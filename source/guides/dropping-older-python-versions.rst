.. _`Dropping Support for Older Python Versions`:

==========================================
Dropping Support for Older Python Versions
==========================================

Dropping support for older Python versions is supported by the standard :ref:`core-metadata` 1.2 specification via a "Requires-Python" attribute.

Metadata 1.2+ clients, such as Pip 9.0+ will adhere to this specification by matching the current Python runtime and comparing it with the required version 
in the package metadata. If they do not match, it will attempt to install the last package distribution that supported that Python runtime.

This mechanism can be leveraged to drop support for older Python versions, by amending the "Requires-Python" attribute in the package metadata.

Requirements
------------

This workflow requires that

1. The publisher be using the latest version of :ref:`setuptools`
2. The latest version of :ref:`twine` be used to upload the package
3. Users have :ref:``


1. Define a setup.py file that includes distutils or :ref:`setuptools` and calls setup( with some information about the package
2. Call python setup.py sdist or python setup.py sdist bdist_wheel if you want to include a wheel file
3. Upload the package to PyPi using twine upload dist/* .



Defining the Python version required
------------------------------------

1. Download the newest version of Setuptools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   pip install --upgrade setuptools

2. Specify the version ranges for supported Python distributions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can specify version ranges and exclusion rules, such as at least Python 3. Or, Python 2.7 and 3.4 beyond.

    Requires-Python: >=3
    Requires-Python: >2.7,!=3.0.*,!=3.1.*, !=3.2.*,!=3.3.*

The way to set those values is within the call to setup within your setup.py script.


Now, calling python setup.py sdist and then twine upload dist/* will publish version 1 of this package specifying that only Python 2.7+ is supported.

Verifying before you publish
Since it’s almost impossible to edit a published package on PyPi, you really want to check first, so run this command to validate the metadata has been generated correctly.

tar xvfz dist/my-package-1.0.0.tar.gz -O | grep “Requires-Python”

4. Validating the Metadata before publishing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Within a Python source package (the zip or the tar-gz file you download) is a text file called PKG-INFO.

This file is generated by distutils or :ref:`setuptools` when it generates the source package. The file contains a set of keys and values, the list of keys is part of the PyPa standard metadata format. You can see the contents of the generated file like this:

    tar xvfz dist/my-package-1.0.0.tar.gz -O | cat */PKG-INFO

Validate that the following is in place, before publishing the package

- If you have upgraded correctly, the Metadata-Version value should be 1.2 or higher. 
- The "Requires-Python" field is set and matches your specification in setup.py


4. Using Twine to publish
~~~~~~~~~~~~~~~~~~~~~~~~~

Twine has a number of advantages, apart from being faster is now the supported method for publishing packages.

Make sure you are using the newest version of Twine, at least 1.9.

Dropping a Python release
-------------------------

Once you have published a package with the metadata, you can then make a further update removing that Python runtime from support.

It must be done in this order for the automated fail-back to work.
