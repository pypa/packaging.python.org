# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 14:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../discussions/deploying-python-applications.rst:4
msgid "Deploying Python applications"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:0
msgid "Page Status"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:6
msgid "Incomplete"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:0
msgid "Last Reviewed"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:7
msgid "2014-11-11"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:11
#: ../../../discussions/install-requires-vs-requirements.rst:9
msgid "Contents"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:14
msgid "Overview"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:18
msgid "Supporting multiple hardware platforms"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:40
msgid "OS packaging & installers"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:52
msgid "Windows"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:61
msgid "Pynsist"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:63
msgid "`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python programs together with the Python-interpreter into a single installer based on NSIS. In most cases, packaging only requires the user to choose a version of the Python-interpreter and declare the dependencies of the program. The tool downloads the specified Python-interpreter for Windows and packages it with all the dependencies in a single Windows-executable installer."
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:70
msgid "The installed program can be started from a shortcut that the installer adds to the start-menu. It uses a Python interpreter installed within its application directory, independent of any other Python installation on the computer."
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:74
msgid "A big advantage of Pynsist is that the Windows packages can be built on Linux. There are several examples for different kinds of programs (console, GUI) in the `documentation <https://pynsist.readthedocs.io>`__. The tool is released under the MIT-licence."
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:80
msgid "Application bundles"
msgstr ""

#: ../../../discussions/deploying-python-applications.rst:91
msgid "Configuration management"
msgstr ""

#: ../../../discussions/index.rst:2
msgid "Discussions"
msgstr ""

#: ../../../discussions/index.rst:4
msgid "**Discussions** are focused on providing comprehensive information about a specific topic. If you're just trying to get stuff done, see :doc:`/guides/index`."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:5
msgid "install_requires vs requirements files"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:12
msgid "install_requires"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:14
msgid "``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that should be used to specify what a project **minimally** needs to run correctly. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:19
msgid "For example, if the project requires A and B, your ``install_requires`` would be like so:"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:29
msgid "Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:31
msgid "For example, it may be known, that your project requires at least v1 of 'A', and v2 of 'B', so it would be like so:"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:41
msgid "It may also be known that project A follows semantic versioning, and that v2 of 'A' will indicate a break in compatibility, so it makes sense to not allow v2:"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:51
msgid "It is not considered best practice to use ``install_requires`` to pin dependencies to specific versions, or to specify sub-dependencies (i.e. dependencies of your dependencies).  This is overly-restrictive, and prevents the user from gaining the benefit of dependency upgrades."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:56
msgid "Lastly, it's important to understand that ``install_requires`` is a listing of \"Abstract\" requirements, i.e just names and version restrictions that don't determine where the dependencies will be fulfilled from (i.e. from what index or source).  The where (i.e. how they are to be made \"Concrete\") is to be determined at install time using :ref:`pip` options. [1]_"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:64
msgid "Requirements files"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:66
msgid ":ref:`Requirements Files <pip:Requirements Files>` described most simply, are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:69
msgid "Whereas ``install_requires`` defines the dependencies for a single project, :ref:`Requirements Files <pip:Requirements Files>` are often used to define the requirements for a complete Python environment."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:73
msgid "Whereas ``install_requires`` requirements are minimal, requirements files often contain an exhaustive listing of pinned versions for the purpose of achieving :ref:`repeatable installations <pip:Repeatability>` of a complete environment."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:78
msgid "Whereas ``install_requires`` requirements are \"Abstract\", i.e. not associated with any particular index, requirements files often contain pip options like ``--index-url`` or ``--find-links`` to make requirements \"Concrete\", i.e. associated with a particular index or directory of packages. [1]_"
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:84
msgid "Whereas ``install_requires`` metadata is automatically analyzed by pip during an install, requirements files are not, and only are used when a user specifically installs them using ``python -m pip install -r``."
msgstr ""

#: ../../../discussions/install-requires-vs-requirements.rst:90
msgid "For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad.io/2013/07/setup-vs-requirement/."
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:6
msgid "pip vs easy_install"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:9
msgid ":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 as part of :ref:`setuptools`. It was notable at the time for installing :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>` using requirement specifiers, and automatically installing dependencies."
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:14
msgid ":ref:`pip` came later in 2008, as alternative to :ref:`easy_install <easy_install>`, although still largely built on top of :ref:`setuptools` components.  It was notable at the time for *not* installing packages as :term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, which gave users the power to easily replicate environments."
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:22
msgid "Here's a breakdown of the important differences between pip and the deprecated easy_install:"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:25
msgid "**pip**"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:25
msgid "**easy_install**"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:27
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:27
#: ../../../discussions/pip-vs-easy-install.rst:38
#: ../../../discussions/pip-vs-easy-install.rst:44
#: ../../../discussions/pip-vs-easy-install.rst:48
#: ../../../discussions/pip-vs-easy-install.rst:54
#: ../../../discussions/pip-vs-easy-install.rst:57
msgid "Yes"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:27
#: ../../../discussions/pip-vs-easy-install.rst:30
#: ../../../discussions/pip-vs-easy-install.rst:32
#: ../../../discussions/pip-vs-easy-install.rst:35
#: ../../../discussions/pip-vs-easy-install.rst:38
#: ../../../discussions/pip-vs-easy-install.rst:44
#: ../../../discussions/pip-vs-easy-install.rst:48
#: ../../../discussions/pip-vs-easy-install.rst:51
#: ../../../discussions/pip-vs-easy-install.rst:54
#: ../../../discussions/pip-vs-easy-install.rst:57
msgid "No"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:30
msgid "Uninstall Packages"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:30
msgid "Yes (``python -m pip uninstall``)"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:32
msgid "Dependency Overrides"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:32
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:35
msgid "List Installed Packages"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:35
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:38
msgid ":pep:`438` Support"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:41
msgid "Installation format"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:41
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:41
msgid "Encapsulated Egg format"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:44
msgid "sys.path modification"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:48
msgid "Installs from :term:`Eggs <Egg>`"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:51
msgid "`pylauncher support`_"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:51
msgid "Yes [1]_"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:54
msgid ":ref:`Multi-version Installs`"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:57
msgid "Exclude scripts during install"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:60
msgid "per project index"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:60
msgid "Only in virtualenv"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:60
msgid "Yes, via setup.cfg"
msgstr ""

#: ../../../discussions/pip-vs-easy-install.rst:68
msgid "https://setuptools.readthedocs.io/en/latest/easy_install.html#natural-script-launcher"
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:5
msgid "Wheel vs Egg"
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:7
msgid ":term:`Wheel` and :term:`Egg` are both packaging formats that aim to support the use case of needing an install artifact that doesn't require building or compilation, which can be costly in testing and production workflows."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:11
msgid "The :term:`Egg` format was introduced by :ref:`setuptools` in 2004, whereas the :term:`Wheel` format was introduced by :pep:`427` in 2012."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:14
msgid ":term:`Wheel` is currently considered the standard for :term:`built <Built Distribution>` and :term:`binary <Binary Distribution>` packaging for Python."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:17
msgid "Here's a breakdown of the important differences between :term:`Wheel` and :term:`Egg`."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:20
msgid ":term:`Wheel` has an :pep:`official PEP <427>`. :term:`Egg` did not."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:22
msgid ":term:`Wheel` is a :term:`distribution <Distribution Package>` format, i.e a packaging format. [1]_ :term:`Egg` was both a distribution format and a runtime installation format (if left zipped), and was designed to be importable."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:26
msgid ":term:`Wheel` archives do not include .pyc files. Therefore, when the distribution only contains Python files (i.e. no compiled extensions), and is compatible with Python 2 and 3, it's possible for a wheel to be \"universal\", similar to an :term:`sdist <Source Distribution (or \"sdist\")>`."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:31
msgid ":term:`Wheel` uses :pep:`PEP376-compliant <376>` ``.dist-info`` directories. Egg used ``.egg-info``."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:34
msgid ":term:`Wheel` has a :pep:`richer file naming convention <425>`. A single wheel archive can indicate its compatibility with a number of Python language versions and implementations, ABIs, and system architectures."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:38
msgid ":term:`Wheel` is versioned. Every wheel file contains the version of the wheel specification and the implementation that packaged it."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:41
msgid ":term:`Wheel` is internally organized by `sysconfig path type <http://docs.python.org/2/library/sysconfig.html#installation-paths>`_, therefore making it easier to convert to other formats."
msgstr ""

#: ../../../discussions/wheel-vs-egg.rst:47
msgid "Circumstantially, in some cases, wheels can be used as an importable runtime format, although :pep:`this is not officially supported at this time <427#is-it-possible-to-import-python-code-directly-from-a-wheel-file>`."
msgstr ""
