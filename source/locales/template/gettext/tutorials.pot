# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 14:11+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../tutorials/creating-documentation.rst:5
msgid "Creating Documentation"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:7
msgid "This section covers the basics of how to create documentation using `Sphinx`_ and host the documentation for free in `Read The Docs`_."
msgstr ""

#: ../../../tutorials/creating-documentation.rst:13
msgid "Installing Sphinx"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:14
msgid "Use ``pip`` to install Sphinx:"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:28
msgid "For other installation methods, see this `installation guide`_ by Sphinx."
msgstr ""

#: ../../../tutorials/creating-documentation.rst:33
msgid "Getting Started With Sphinx"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:35
msgid "Create a ``docs`` directory inside your project to hold your documentation:"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:42
msgid "Run ``sphinx-quickstart`` inside the ``docs`` directory:"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:49
msgid "This sets up a source directory, walks you through some basic configurations, and creates an ``index.rst`` file as well as a ``conf.py`` file."
msgstr ""

#: ../../../tutorials/creating-documentation.rst:51
msgid "You can add some information about your project in ``index.rst``, then build them:"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:57
msgid "For more details on the build process, see this `guide`_ by Read The Docs."
msgstr ""

#: ../../../tutorials/creating-documentation.rst:62
msgid "Other Sources"
msgstr ""

#: ../../../tutorials/creating-documentation.rst:64
msgid "For a more detailed guide on how to use Sphinx and reStructuredText, please see this `documentation tutorial`_ on Hitchhiker's Guide to Python."
msgstr ""

#: ../../../tutorials/index.rst:2
msgid "Tutorials"
msgstr ""

#: ../../../tutorials/index.rst:4
msgid "**Tutorials** are opinionated step-by-step guides to help you get familiar with packaging concepts. For more detailed information on specific packaging topics, see :doc:`/guides/index`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:5
msgid "Installing Packages"
msgstr ""

#: ../../../tutorials/installing-packages.rst:7
msgid "This section covers the basics of how to install Python :term:`packages <Distribution Package>`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:10
msgid "It's important to note that the term \"package\" in this context is being used to describe a bundle of software to be installed (i.e. as a synonym for a :term:`distribution <Distribution Package>`). It does not to refer to the kind of :term:`package <Import Package>` that you import in your Python source code (i.e. a container of modules). It is common in the Python community to refer to a :term:`distribution <Distribution Package>` using the term \"package\".  Using the term \"distribution\" is often not preferred, because it can easily be confused with a Linux distribution, or another larger software distribution like Python itself."
msgstr ""

#: ../../../tutorials/installing-packages.rst:23
msgid "Contents"
msgstr ""

#: ../../../tutorials/installing-packages.rst:28
msgid "Requirements for Installing Packages"
msgstr ""

#: ../../../tutorials/installing-packages.rst:30
msgid "This section describes the steps to follow before installing other Python packages."
msgstr ""

#: ../../../tutorials/installing-packages.rst:35
msgid "Ensure you can run Python from the command line"
msgstr ""

#: ../../../tutorials/installing-packages.rst:37
msgid "Before you go any further, make sure you have Python and that the expected version is available from your command line. You can check this by running:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:53
msgid "You should get some output like ``Python 3.6.3``. If you do not have Python, please install the latest 3.x version from `python.org`_ or refer to the `Installing Python`_ section of the Hitchhiker's Guide to Python."
msgstr ""

#: ../../../tutorials/installing-packages.rst:57
msgid "If you're a newcomer and you get an error like this:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:66
msgid "It's because this command and other suggested commands in this tutorial are intended to be run in a *shell* (also called a *terminal* or *console*). See the Python for Beginners `getting started tutorial`_ for an introduction to using your operating system's shell and interacting with Python."
msgstr ""

#: ../../../tutorials/installing-packages.rst:72
msgid "If you're using an enhanced shell like IPython or the Jupyter notebook, you can run system commands like those in this tutorial by prefacing them with a ``!`` character:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:82
msgid "It's recommended to write ``{sys.executable}`` rather than plain ``python`` in order to ensure that commands are run in the Python installation matching the currently running notebook (which may not be the same Python installation that the ``python`` command refers to)."
msgstr ""

#: ../../../tutorials/installing-packages.rst:87
msgid "Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system Python without creating a virtual environment first should replace the ``python`` command in this tutorial with ``python3`` and the ``python -m pip`` command with ``python3 -m pip --user``. Do *not* run any of the commands in this tutorial with ``sudo``: if you get a permissions error, come back to the section on creating virtual environments, set one up, and then continue with the tutorial as written."
msgstr ""

#: ../../../tutorials/installing-packages.rst:99
msgid "Ensure you can run pip from the command line"
msgstr ""

#: ../../../tutorials/installing-packages.rst:101
msgid "Additionally, you'll need to make sure you have :ref:`pip` available. You can check this by running:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:116
msgid "If you installed Python from source, with an installer from `python.org`_, or via `Homebrew`_ you should already have pip. If you're on Linux and installed using your OS package manager, you may have to install pip separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:124
msgid "If ``pip`` isn't already installed, then first try to bootstrap it from the standard library:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:139
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:141
msgid "Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""

#: ../../../tutorials/installing-packages.rst:144
msgid "Run ``python get-pip.py``. [2]_  This will install or upgrade pip. Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're not installed already."
msgstr ""

#: ../../../tutorials/installing-packages.rst:150
msgid "Be cautious if you're using a Python install that's managed by your operating system or another package manager. get-pip.py does not coordinate with those tools, and may leave your system in an inconsistent state. You can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/local`` which is designed for locally-installed software."
msgstr ""

#: ../../../tutorials/installing-packages.rst:159
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr ""

#: ../../../tutorials/installing-packages.rst:161
msgid "While ``pip`` alone is sufficient to install from pre-built binary archives, up to date copies of the ``setuptools`` and ``wheel`` projects are useful to ensure you can also install from source archives::"
msgstr ""

#: ../../../tutorials/installing-packages.rst:169
msgid "Optionally, create a virtual environment"
msgstr ""

#: ../../../tutorials/installing-packages.rst:171
msgid "See :ref:`section below <Creating and using Virtual Environments>` for details, but here's the basic `venv`_ [3]_ command to use on a typical Linux system:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:188
msgid "This will create a new virtual environment in the ``tutorial_env`` subdirectory, and configure the current shell to use it as the default ``python`` environment."
msgstr ""

#: ../../../tutorials/installing-packages.rst:195
msgid "Creating Virtual Environments"
msgstr ""

#: ../../../tutorials/installing-packages.rst:197
msgid "Python \"Virtual Environments\" allow Python :term:`packages <Distribution Package>` to be installed in an isolated location for a particular application, rather than being installed globally. If you are looking to safely install global command line tools, see :doc:`/guides/installing-stand-alone-command-line-tools`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:203
msgid "Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python3.6/site-packages (or whatever your platform’s standard location is), it’s easy to end up in a situation where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""

#: ../../../tutorials/installing-packages.rst:209
msgid "Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application."
msgstr ""

#: ../../../tutorials/installing-packages.rst:213
msgid "Also, what if you can’t install :term:`packages <Distribution Package>` into the global site-packages directory? For instance, on a shared host."
msgstr ""

#: ../../../tutorials/installing-packages.rst:216
msgid "In all these cases, virtual environments can help you. They have their own installation directories and they don’t share libraries with other virtual environments."
msgstr ""

#: ../../../tutorials/installing-packages.rst:220
msgid "Currently, there are two common tools for creating Python virtual environments:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:222
msgid "`venv`_ is available by default in Python 3.3 and later, and installs :ref:`pip` and :ref:`setuptools` into created virtual environments in Python 3.4 and later."
msgstr ""

#: ../../../tutorials/installing-packages.rst:225
msgid ":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are always installed into created virtual environments by default (regardless of Python version)."
msgstr ""

#: ../../../tutorials/installing-packages.rst:230
msgid "The basic usage is like so:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:232
msgid "Using `venv`_:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:248
msgid "Using :ref:`virtualenv`:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:264
msgid "For more information, see the `venv`_ docs or the `virtualenv <http://virtualenv.pypa.io>`_ docs."
msgstr ""

#: ../../../tutorials/installing-packages.rst:266
msgid "The use of :command:`source` under Unix shells ensures that the virtual environment's variables are set within the current shell, and not in a subprocess (which then disappears, having no useful effect)."
msgstr ""

#: ../../../tutorials/installing-packages.rst:271
msgid "In both of the above cases, Windows users should _not_ use the :command:`source` command, but should rather run the :command:`activate` script directly from the command shell like so:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:281
msgid "Managing multiple virtual environments directly can become tedious, so the :ref:`dependency management tutorial <managing-dependencies>` introduces a higher level tool, :ref:`Pipenv`, that automatically manages a separate virtual environment for each project and application that you work on."
msgstr ""

#: ../../../tutorials/installing-packages.rst:288
msgid "Use pip for Installing"
msgstr ""

#: ../../../tutorials/installing-packages.rst:290
msgid ":ref:`pip` is the recommended installer.  Below, we'll cover the most common usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_, which includes a complete `Reference Guide <https://pip.pypa.io/en/latest/reference/index.html>`_."
msgstr ""

#: ../../../tutorials/installing-packages.rst:297
msgid "Installing from PyPI"
msgstr ""

#: ../../../tutorials/installing-packages.rst:299
msgid "The most common usage of :ref:`pip` is to install from the :term:`Python Package Index <Python Package Index (PyPI)>` using a :term:`requirement specifier <Requirement Specifier>`. Generally speaking, a requirement specifier is composed of a project name followed by an optional :term:`version specifier <Version Specifier>`.  :pep:`440` contains a :pep:`full specification <440#version-specifiers>` of the currently supported specifiers. Below are some examples."
msgstr ""

#: ../../../tutorials/installing-packages.rst:307
msgid "To install the latest version of \"SomeProject\":"
msgstr ""

#: ../../../tutorials/installing-packages.rst:321
msgid "To install a specific version:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:335
msgid "To install greater than or equal to one version and less than another:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:350
msgid "To install a version that's :pep:`\"compatible\" <440#compatible-release>` with a certain version: [4]_"
msgstr ""

#: ../../../tutorials/installing-packages.rst:365
msgid "In this case, this means to install any version \"==1.4.*\" version that's also \">=1.4.2\"."
msgstr ""

#: ../../../tutorials/installing-packages.rst:370
msgid "Source Distributions vs Wheels"
msgstr ""

#: ../../../tutorials/installing-packages.rst:372
msgid ":ref:`pip` can install from either :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:install_--no-binary>` option."
msgstr ""

#: ../../../tutorials/installing-packages.rst:378
msgid ":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution Package>` format that provides faster installation compared to :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when a project contains compiled extensions."
msgstr ""

#: ../../../tutorials/installing-packages.rst:383
msgid "If :ref:`pip` does not find a wheel to install, it will locally build a wheel and cache it for future installs, instead of rebuilding the source distribution in the future."
msgstr ""

#: ../../../tutorials/installing-packages.rst:389
msgid "Upgrading packages"
msgstr ""

#: ../../../tutorials/installing-packages.rst:391
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""

#: ../../../tutorials/installing-packages.rst:408
msgid "Installing to the User Site"
msgstr ""

#: ../../../tutorials/installing-packages.rst:410
msgid "To install :term:`packages <Distribution Package>` that are isolated to the current user, use the ``--user`` flag:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:425
msgid "For more information see the `User Installs <https://pip.readthedocs.io/en/latest/user_guide.html#user-installs>`_ section from the pip docs."
msgstr ""

#: ../../../tutorials/installing-packages.rst:429
msgid "Note that the ``--user`` flag has no effect when inside a virtual environment - all installation commands will affect the virtual environment."
msgstr ""

#: ../../../tutorials/installing-packages.rst:432
msgid "If ``SomeProject`` defines any command-line scripts or console entry points, ``--user`` will cause them to be installed inside the `user base`_'s binary directory, which may or may not already be present in your shell's :envvar:`PATH`.  (Starting in version 10, pip displays a warning when installing any scripts to a directory outside :envvar:`PATH`.)  If the scripts are not available in your shell after installation, you'll need to add the directory to your :envvar:`PATH`:"
msgstr ""

#: ../../../tutorials/installing-packages.rst:440
msgid "On Linux and macOS you can find the user base binary directory by running ``python -m site --user-base`` and adding ``bin`` to the end. For example, this will typically print ``~/.local`` (with ``~`` expanded to the absolute path to your home directory) so you'll need to add ``~/.local/bin`` to your ``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""

#: ../../../tutorials/installing-packages.rst:446
msgid "On Windows you can find the user base binary directory by running ``py -m site --user-site`` and replacing ``site-packages`` with ``Scripts``. For example, this could return ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would need to set your ``PATH`` to include ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your user ``PATH`` permanently in the `Control Panel`_. You may need to log out for the ``PATH`` changes to take effect."
msgstr ""

#: ../../../tutorials/installing-packages.rst:460
msgid "Requirements files"
msgstr ""

#: ../../../tutorials/installing-packages.rst:462
msgid "Install a list of requirements specified in a :ref:`Requirements File <pip:Requirements Files>`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:478
msgid "Installing from VCS"
msgstr ""

#: ../../../tutorials/installing-packages.rst:480
msgid "Install a project from VCS in \"editable\" mode.  For a full breakdown of the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:502
msgid "Installing from other Indexes"
msgstr ""

#: ../../../tutorials/installing-packages.rst:504
msgid "Install from an alternate index"
msgstr ""

#: ../../../tutorials/installing-packages.rst:518
msgid "Search an additional index during install, in addition to :term:`PyPI <Python Package Index (PyPI)>`"
msgstr ""

#: ../../../tutorials/installing-packages.rst:534
msgid "Installing from a local src tree"
msgstr ""

#: ../../../tutorials/installing-packages.rst:537
msgid "Installing from local src in `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_, i.e. in such a way that the project appears to be installed, but yet is still editable from the src tree."
msgstr ""

#: ../../../tutorials/installing-packages.rst:554
msgid "You can also install normally from src"
msgstr ""

#: ../../../tutorials/installing-packages.rst:569
msgid "Installing from local archives"
msgstr ""

#: ../../../tutorials/installing-packages.rst:571
msgid "Install a particular source archive file."
msgstr ""

#: ../../../tutorials/installing-packages.rst:585
msgid "Install from a local directory containing archives (and don't check :term:`PyPI <Python Package Index (PyPI)>`)"
msgstr ""

#: ../../../tutorials/installing-packages.rst:605
msgid "Installing from other sources"
msgstr ""

#: ../../../tutorials/installing-packages.rst:607
msgid "To install from other data sources (for example Amazon S3 storage) you can create a helper application that presents the data in a :pep:`503` compliant index format, and use the ``--extra-index-url`` flag to direct pip to use that index."
msgstr ""

#: ../../../tutorials/installing-packages.rst:619
msgid "Installing Prereleases"
msgstr ""

#: ../../../tutorials/installing-packages.rst:621
msgid "Find pre-release and development versions, in addition to stable versions.  By default, pip only finds stable versions."
msgstr ""

#: ../../../tutorials/installing-packages.rst:637
msgid "Installing Setuptools \"Extras\""
msgstr ""

#: ../../../tutorials/installing-packages.rst:639
msgid "Install `setuptools extras`_."
msgstr ""

#: ../../../tutorials/installing-packages.rst:659
msgid "\"Secure\" in this context means using a modern browser or a tool like :command:`curl` that verifies SSL certificates when downloading from https URLs."
msgstr ""

#: ../../../tutorials/installing-packages.rst:663
msgid "Depending on your platform, this may require root or Administrator access. :ref:`pip` is currently considering changing this by `making user installs the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../../../tutorials/installing-packages.rst:668
msgid "Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:`virtualenv`) will create virtualenv environments with ``pip`` pre-installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""

#: ../../../tutorials/installing-packages.rst:673
msgid "The compatible release specifier was accepted in :pep:`440` and support was released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:4
msgid "Managing Application Dependencies"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:6
msgid "The :ref:`package installation tutorial <installing-packages>` covered the basics of getting set up to install and update Python packages."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:9
msgid "However, running these commands interactively can get tedious even for your own personal projects, and things get even more difficult when trying to set up development environments automatically for projects with multiple contributors."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:13
msgid "This tutorial walks you through the use of :ref:`Pipenv` to manage dependencies for an application. It will show you how to install and use the necessary tools and make strong recommendations on best practices."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:17
msgid "Keep in mind that Python is used for a great many different purposes, and precisely how you want to manage your dependencies may change based on how you decide to publish your software. The guidance presented here is most directly applicable to the development and deployment of network services (including web applications), but is also very well suited to managing development and testing environments for any kind of project."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:24
msgid "Developers of Python libraries, or of applications that support distribution as Python libraries, should also consider the `poetry <https://github.com/python-poetry/poetry>`_ project as an alternative dependency management solution."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:30
msgid "Installing Pipenv"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:32
msgid ":ref:`Pipenv` is a dependency manager for Python projects. If you're familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit to those tools. While :ref:`pip` alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it's a higher-level tool that simplifies dependency management for common use cases."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:38
msgid "Use ``pip`` to install Pipenv:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:54
msgid "This does a `user installation`_ to prevent breaking any system-wide packages. If ``pipenv`` isn't available in your shell after installation, you'll need to add the `user base`_'s binary directory to your ``PATH``. See :ref:`Installing to the User Site` for more information."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:65
msgid "Installing packages for your project"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:67
msgid "Pipenv manages dependencies on a per-project basis. To install packages, change into your project's directory (or just an empty directory for this tutorial) and run:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:76
msgid "Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary):"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:112
msgid "Using installed packages"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:114
msgid "Now that Requests is installed you can create a simple :file:`main.py` file to use it:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:125
msgid "Then you can run this script using ``pipenv run``:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:131
msgid "You should get output similar to this:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:137
msgid "Using ``pipenv run`` ensures that your installed packages are available to your script. It's also possible to spawn a new shell that ensures all commands have access to your installed packages with ``pipenv shell``."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:143
#: ../../../tutorials/packaging-projects.rst:594
msgid "Next steps"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:145
msgid "Congratulations, you now know how to effectively manage dependencies and development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:148
msgid "If you're interested in creating and distributing your own Python packages, see the :ref:`tutorial on packaging and distributing packages <distributing-packages>`."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:151
msgid "Note that when your application includes definitions of Python source packages, they (and their dependencies) can be added to your ``pipenv`` environment with ``pipenv install -e <relative-path-to-source-directory>`` (e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:160
msgid "Other Tools for Application Dependency Management"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:162
msgid "If you find this particular approach to managing application dependencies isn't working well for you or your use case, you may want to explore these other tools and techniques to see if one of them is a better fit:"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:166
msgid "`poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable in scope to ``pipenv`` that focuses more directly on use cases where the repository being managed is structured as a Python project with a valid ``pyproject.toml`` file (by contrast, ``pipenv`` explicitly avoids making the assumption that the application being worked on that's depending on components from PyPI will itself support distribution as a ``pip``-installable Python package)."
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:172
msgid "`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even more steps in the project management workflow (such as incrementing versions, tagging releases, and creating new skeleton projects from project templates)"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:175
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_ to build your own custom workflow from lower level pieces like ``pip-compile`` and ``pip-sync``"
msgstr ""

#: ../../../tutorials/managing-dependencies.rst:177
msgid "`micropipenv <https://github.com/thoth-station/micropipenv>`_ is a lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry lock files or converting them to pip-tools compatible output. Designed for containerized Python applications but not limited to them."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:2
msgid "Packaging Python Projects"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:4
msgid "This tutorial walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to upload it to the Python Package Index."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:10
msgid "If you have trouble running the commands in this tutoral, please copy the command and its output, then `open an issue`_ on the `packaging-problems`_ repository on GitHub. We'll do our best to help you!"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:18
msgid "Some of the commands require a newer version of :ref:`pip`, so start by making sure you have the latest version installed:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:35
msgid "A simple project"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:37
msgid "This tutorial uses a simple project named ``example_package``.  We recommend following this tutorial as-is using this project, before packaging your own project."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:41
msgid "Create the following file structure locally:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:51
msgid ":file:`__init__.py` is required to import the directory as a package, and should be empty."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:54
msgid ":file:`example.py` is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. Open that file and enter the following content:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:63
msgid "If you are unfamiliar with Python's :term:`modules <Module>` and :term:`import packages <Import Package>`, take a few minutes to read over the `Python documentation for packages and modules`_."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:67
msgid "Once you create this structure, you'll want to run all of the commands in this tutorial within the ``packaging_tutorial`` directory."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:75
msgid "Creating the package files"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:77
msgid "You will now add files that are used to prepare the project for distribution. When you're done, the project structure will look like this:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:95
msgid "Creating a test directory"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:97
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:101
msgid "Creating pyproject.toml"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:103
msgid ":file:`pyproject.toml` tells build tools (like :ref:`pip` and :ref:`build`) what is required to build your project. This tutorial uses :ref:`setuptools`, so open :file:`pyproject.toml` and enter the following content:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:117
msgid "``build-system.requires`` gives a list of packages that are needed to build your package. Listing something here will *only* make it available during the build, not after it is installed."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:121
msgid "``build-system.build-backend`` is the name of Python object that will be used to perform the build. If you were to use a different build system, such as :ref:`flit` or :ref:`poetry`, those would go here, and the configuration details would be completely different than the :ref:`setuptools` configuration described below."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:127
msgid "See :pep:`517` and :pep:`518` for background and details."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:131
msgid "Configuring metadata"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:133
msgid "There are two types of metadata: static and dynamic."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:135
msgid "Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is simpler, easier to read, and avoids many common errors, like encoding errors."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:137
msgid "Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are dynamic or determined at install-time, as well as extension modules or extensions to setuptools, need to go into :file:`setup.py`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:141
msgid "Static metadata (:file:`setup.cfg`) should be preferred. Dynamic metadata (:file:`setup.py`) should be used only as an escape hatch when absolutely necessary. :file:`setup.py` used to be required, but can be omitted with newer versions of setuptools and pip."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:148
msgid ":file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include. Eventually much of this configuration may be able to move to :file:`pyproject.toml`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:153
msgid "Open :file:`setup.cfg` and enter the following content. Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:185
msgid "There are a `variety of metadata and options <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_ supported here. This is in :doc:`configparser <python:library/configparser>` format; do not place quotes around values. This example package uses a relatively minimal set of ``metadata``:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:191
#: ../../../tutorials/packaging-projects.rst:286
msgid "``name`` is the *distribution name* of your package. This can be any name as long as it only contains letters, numbers, ``_`` , and ``-``. It also must not already be taken on pypi.org. **Be sure to update this with your username,** as this ensures you won't try to upload a package with the same name as one which already exists."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:196
msgid "``version`` is the package version. See :pep:`440` for more details on versions. You can use ``file:`` or ``attr:`` directives to read from a file or package attribute."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:199
#: ../../../tutorials/packaging-projects.rst:293
msgid "``author`` and ``author_email`` are used to identify the author of the package."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:201
#: ../../../tutorials/packaging-projects.rst:295
msgid "``description`` is a short, one-sentence summary of the package."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:202
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md` (which is a common pattern) using the ``file:`` directive."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:206
#: ../../../tutorials/packaging-projects.rst:300
msgid "``long_description_content_type`` tells the index what type of markup is used for the long description. In this case, it's Markdown."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:208
#: ../../../tutorials/packaging-projects.rst:302
msgid "``url`` is the URL for the homepage of the project. For many projects, this will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting service."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:211
#: ../../../tutorials/packaging-projects.rst:305
msgid "``project_urls`` lets you list any number of extra links to show on PyPI. Generally this could be to documentation, issue trackers, etc."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:213
#: ../../../tutorials/packaging-projects.rst:307
msgid "``classifiers`` gives the index and :ref:`pip` some additional metadata about your package. In this case, the package is only compatible with Python 3, is licensed under the MIT license, and is OS-independent. You should always include at least which version(s) of Python your package works on, which license your package is available under, and which operating systems your package will work on. For a complete list of classifiers, see https://pypi.org/classifiers/."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:221
msgid "In the ``options`` category, we have controls for setuptools itself:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:223
msgid "``package_dir`` is a mapping of package names and directories. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:227
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use the ``find:`` directive to automatically discover all packages and subpackages and ``options.packages.find`` to specify the ``package_dir`` to use. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:234
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back through older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:238
#: ../../../tutorials/packaging-projects.rst:329
msgid "There are many more than the ones mentioned here. See :doc:`/guides/distributing-packages-using-setuptools` for more details."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:244
msgid ":file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:248
msgid "Open :file:`setup.py` and enter the following content.  Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:283
msgid ":func:`setup` takes several arguments. This example package uses a relatively minimal set:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:291
msgid "``version`` is the package version. See :pep:`440` for more details on versions."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:296
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md`, which is a common pattern."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:314
msgid "``package_dir`` is a dictionary with package names for keys and directories for values. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:319
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use :func:`find_packages` to automatically discover all packages and subpackages under ``package_dir``. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:325
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back though older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:333
msgid "Creating README.md"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:335
msgid "Open :file:`README.md` and enter the following content. You can customize this if you'd like."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:347
msgid "Because our configuration loads :file:`README.md` to provide a ``long_description``, :file:`README.md` must be included along with your code when you :ref:`generate a source distribution <generating archives>`. Newer versions of :ref:`setuptools` will do this automatically."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:354
msgid "Creating a LICENSE"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:356
msgid "It's important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see https://choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:387
msgid "Including other files"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:389
msgid "The files listed above will be included automatically in your :term:`source distribution <Source Distribution (or \"sdist\")>`. If you want to control what goes in this explicitly, see :ref:`Using MANIFEST.in`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:393
msgid "The final :term:`built distribution <Built Distribution>` will have the Python files in the discovered or listed Python packages. If you want to control what goes here, such as to add data files, see :doc:`Including Data Files <setuptools:userguide/datafiles>` from the :doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:402
msgid "Generating distribution archives"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:404
msgid "The next step is to generate :term:`distribution packages <Distribution Package>` for the package. These are archives that are uploaded to the Python Package Index and can be installed by :ref:`pip`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:408
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:422
msgid "If you have trouble installing these, see the :doc:`installing-packages` tutorial."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:425
msgid "Now run this command from the same directory where :file:`pyproject.toml` is located:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:439
msgid "This command should output a lot of text and once completed should generate two files in the :file:`dist` directory:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:449
msgid "The ``tar.gz`` file is a :term:`source archive <Source Archive>` whereas the ``.whl`` file is a :term:`built distribution <Built Distribution>`. Newer :ref:`pip` versions preferentially install built distributions, but will fall back to source archives if needed. You should always upload a source archive and provide built archives for the platforms your project is compatible with. In this case, our example package is compatible with Python on any platform so only one built distribution is needed."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:458
msgid "Uploading the distribution archives"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:460
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:462
msgid "The first thing you'll need to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. It's great for things like this tutorial where we don't necessarily want to upload to the real index. To register an account, go to https://test.pypi.org/account/register/ and complete the steps on that page. You will also need to verify your email address before you're able to upload any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:470
msgid "To securely upload your project, you'll need a PyPI `API token`_. Create one at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" to \"Entire account\". **Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:477
msgid "Now that you are registered, you can use :ref:`twine` to upload the distribution packages. You'll need to install Twine:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:492
msgid "Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:506
msgid "You will be prompted for a username and password. For the username, use ``__token__``. For the password, use the token value, including the ``pypi-`` prefix."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:510
msgid "After the command completes, you should see output similar to this:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:523
msgid "Once uploaded your package should be viewable on TestPyPI, for example, https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:528
msgid "Installing your newly uploaded package"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:530
msgid "You can use :ref:`pip` to install your package and verify that it works. Create a :ref:`virtual environment <Creating and using Virtual Environments>` and install your package from TestPyPI:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:546
msgid "Make sure to specify your username in the package name!"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:548
msgid "pip should install the package from TestPyPI and the output should look something like this:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:558
msgid "This example uses ``--index-url`` flag to specify TestPyPI instead of live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have the same packages as the live PyPI, it's possible that attempting to install dependencies may fail or install something unexpected. While our example package doesn't have any dependencies, it's a good practice to avoid installing dependencies when using TestPyPI."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:565
msgid "You can test that it was installed correctly by importing the package. Make sure you're still in your virtual environment, then run Python:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:580
msgid "and import the package:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:588
msgid "Note that the :term:`import package <Import Package>` is ``example_package`` regardless of what ``name`` you gave your :term:`distribution package <Distribution Package>` in :file:`setup.cfg` or :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``)."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:596
msgid "**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 ✨"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:599
msgid "Keep in mind that this tutorial showed you how to upload your package to Test PyPI, which isn't a permanent storage. The Test system occasionally deletes packages and accounts. It is best to use TestPyPI for testing and experiments like this tutorial."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:604
msgid "When you are ready to upload a real package to the Python Package Index you can do much the same as you did in this tutorial, but with these important differences:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:608
msgid "Choose a memorable and unique name for your package. You don't have to append your username as you did in the tutorial."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:610
msgid "Register an account on https://pypi.org - note that these are two separate servers and the login details from the test server are not shared with the main server."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:613
msgid "Use ``twine upload dist/*`` to upload your package and enter your credentials for the account you registered on the real PyPI.  Now that you're uploading the package in production, you don't need to specify ``--repository``; the package will upload to https://pypi.org/ by default."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:617
msgid "Install your package from the real PyPI using ``python3 -m pip install [your-package]``."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:619
msgid "At this point if you want to read more on packaging Python libraries here are some things you can do:"
msgstr ""

#: ../../../tutorials/packaging-projects.rst:622
msgid "Read more about using :ref:`setuptools` to package libraries in :doc:`/guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:624
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ""

#: ../../../tutorials/packaging-projects.rst:625
msgid "Consider alternatives to :ref:`setuptools` such as :ref:`flit`, :ref:`hatch`, and :ref:`poetry`."
msgstr ""
