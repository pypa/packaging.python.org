# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 08:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../key_projects.rst:6
msgid "Project Summaries"
msgstr ""

#: ../../key_projects.rst:8
msgid ""
"Summaries and links for the most relevant projects in the space of Python"
" installation and packaging."
msgstr ""

#: ../../key_projects.rst:14
msgid "PyPA Projects"
msgstr ""

#: ../../key_projects.rst:19
msgid "bandersnatch"
msgstr ""

#: ../../key_projects.rst:21
msgid ""
"`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub "
"<https://github.com/pypa/bandersnatch>`__ | `PyPI "
"<https://pypi.org/project/bandersnatch>`__"
msgstr ""

#: ../../key_projects.rst:25
msgid ""
"``bandersnatch`` is a PyPI mirroring client designed to efficiently "
"create a complete mirror of the contents of PyPI. Organizations thus save"
" bandwidth and latency on package downloads (especially in the context of"
" automated tests) and to prevent heavily loading PyPI's Content Delivery "
"Network (CDN)."
msgstr ""

#: ../../key_projects.rst:35
msgid "build"
msgstr ""

#: ../../key_projects.rst:37
msgid ""
"`Docs <https://pypa-build.readthedocs.io/>`__ | `Issues "
"<https://github.com/pypa/build/issues>`__ | `GitHub "
"<https://github.com/pypa/build>`__ | `PyPI "
"<https://pypi.org/project/build>`__"
msgstr ""

#: ../../key_projects.rst:42
msgid ""
"``build`` is a :pep:`517` compatible Python package builder. It provides "
"a CLI to build packages, as well as a Python API."
msgstr ""

#: ../../key_projects.rst:49
msgid "cibuildwheel"
msgstr ""

#: ../../key_projects.rst:51
msgid ""
"`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues "
"<https://github.com/pypa/cibuildwheel/issues>`__ | `GitHub "
"<https://github.com/pypa/cibuildwheel>`__ | `PyPI "
"<https://pypi.org/project/cibuildwheel>`__ | `Discussions "
"<https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord "
"#cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""

#: ../../key_projects.rst:58
msgid ""
"``cibuildwheel`` is a package that builds wheels for all common platforms"
" and Python versions on most CI systems."
msgstr ""

#: ../../key_projects.rst:65
msgid "distlib"
msgstr ""

#: ../../key_projects.rst:67
msgid ""
"`Docs <http://pythonhosted.org/distlib/>`__ | `Issues "
"<https://bitbucket.org/pypa/distlib/issues?status=new&status=open>`__ | "
"`Bitbucket <https://bitbucket.org/pypa/distlib>`__ | `PyPI "
"<https://pypi.org/project/distlib>`__"
msgstr ""

#: ../../key_projects.rst:72
msgid ""
"``distlib`` is a library which implements low-level functions that relate"
" to packaging and distribution of Python software.  ``distlib`` "
"implements several relevant PEPs (Python Enhancement Proposal standards) "
"and is useful for developers of third-party packaging tools to make and "
"upload binary and source :term:`distributions <Distribution Package>`, "
"achieve interoperability, resolve dependencies, manage package resources,"
" and do other similar functions."
msgstr ""

#: ../../key_projects.rst:81
msgid ""
"Unlike the stricter :ref:`packaging` project (below), which specifically "
"implements modern Python packaging interoperability standards, "
"``distlib`` also attempts to provide reasonable fallback behaviours when "
"asked to handle legacy packages and metadata that predate the modern "
"interoperability standards and fall into the subset of packages that are "
"incompatible with those standards."
msgstr ""

#: ../../key_projects.rst:91
msgid "packaging"
msgstr ""

#: ../../key_projects.rst:93
msgid ""
"`Docs <https://packaging.pypa.io>`__ | `Issues "
"<https://github.com/pypa/packaging/issues>`__ | `GitHub "
"<https://github.com/pypa/packaging>`__ | `PyPI "
"<https://pypi.org/project/packaging>`__"
msgstr ""

#: ../../key_projects.rst:98
msgid ""
"Core utilities for Python packaging used by :ref:`pip` and "
":ref:`setuptools`."
msgstr ""

#: ../../key_projects.rst:100
msgid ""
"The core utilities in the packaging library handle version handling, "
"specifiers, markers, requirements, tags, and similar attributes and tasks"
" for Python packages. Most Python users rely on this library without "
"needing to explicitly call it; developers of the other Python packaging, "
"distribution, and installation tools listed here often use its "
"functionality to parse, discover, and otherwise handle dependency "
"attributes."
msgstr ""

#: ../../key_projects.rst:108
msgid ""
"This project specifically focuses on implementing the modern Python "
"packaging interoperability standards defined at :ref:`packaging-"
"specifications`, and will report errors for sufficiently old legacy "
"packages that are incompatible with those standards. In contrast, the "
":ref:`distlib` project is a more permissive library that attempts to "
"provide a plausible reading of ambiguous metadata in cases where "
":ref:`packaging` will instead report on error."
msgstr ""

#: ../../key_projects.rst:120
msgid "pip"
msgstr ""

#: ../../key_projects.rst:122
msgid ""
"`Docs <https://pip.pypa.io/en/stable/>`__ | `Issues "
"<https://github.com/pypa/pip/issues>`__ | `GitHub "
"<https://github.com/pypa/pip>`__ | `PyPI "
"<https://pypi.org/project/pip/>`__"
msgstr ""

#: ../../key_projects.rst:127
msgid ""
"The most popular tool for installing Python packages, and the one "
"included with modern versions of Python."
msgstr ""

#: ../../key_projects.rst:130
msgid ""
"It provides the essential core features for finding, downloading, and "
"installing packages from PyPI and other Python package indexes, and can "
"be incorporated into a wide range of development workflows via its "
"command-line interface (CLI)."
msgstr ""

#: ../../key_projects.rst:138
msgid "Pipenv"
msgstr ""

#: ../../key_projects.rst:140
msgid ""
"`Docs <https://pipenv.pypa.io/>`__ | `Source "
"<https://github.com/pypa/pipenv>`__ | `Issues "
"<https://github.com/pypa/pipenv/issues>`__ | `PyPI "
"<https://pypi.org/project/pipenv>`__"
msgstr ""

#: ../../key_projects.rst:145
msgid ""
"Pipenv is a project that aims to bring the best of all packaging worlds "
"to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and "
":ref:`virtualenv` into one single toolchain. It features very pretty "
"terminal colors."
msgstr ""

#: ../../key_projects.rst:149
msgid ""
"Pipenv aims to help users manage environments, dependencies, and imported"
" packages on the command line. It also works well on Windows (which other"
" tools often underserve), makes and checkes file hashes, to ensure "
"compliance with hash-locked dependency specifiers, and eases "
"uninstallation of packages and dependencies. It is used by Python users "
"and system administrators, but has been less maintained since late 2018."
msgstr ""

#: ../../key_projects.rst:160
msgid "Pipfile"
msgstr ""

#: ../../key_projects.rst:162
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr ""

#: ../../key_projects.rst:164
msgid ""
":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level "
"application-centric alternative to :ref:`pip`'s lower-level "
":file:`requirements.txt` file."
msgstr ""

#: ../../key_projects.rst:170
msgid "Python Packaging User Guide"
msgstr ""

#: ../../key_projects.rst:172
msgid ""
"`Docs <https://packaging.python.org/en/latest/>`__ | `Issues "
"<https://github.com/pypa/python-packaging-user-guide/issues>`__ | `GitHub"
" <https://github.com/pypa/python-packaging-user-guide>`__"
msgstr ""

#: ../../key_projects.rst:176
msgid "This guide!"
msgstr ""

#: ../../key_projects.rst:181
msgid "readme_renderer"
msgstr ""

#: ../../key_projects.rst:183
msgid ""
"`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme_renderer/>`__"
msgstr ""

#: ../../key_projects.rst:186
msgid ""
"``readme_renderer`` is a library that package developers use to render "
"their user documentation (README) files into HTML from markup languages "
"such as Markdown or reStructuredText. Developers call it on its own or "
"via :ref:`twine`, as part of their release management process, to check "
"that their package descriptions will properly display on PyPI."
msgstr ""

#: ../../key_projects.rst:197
msgid "setuptools"
msgstr ""

#: ../../key_projects.rst:199
msgid ""
"`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues "
"<https://github.com/pypa/setuptools/issues>`__ | `GitHub "
"<https://github.com/pypa/setuptools>`__ | `PyPI "
"<https://pypi.org/project/setuptools>`__"
msgstr ""

#: ../../key_projects.rst:204
msgid ""
"setuptools (which includes ``easy_install``) is a collection of "
"enhancements to the Python distutils that allow you to more easily build "
"and distribute Python :term:`distributions <Distribution Package>`, "
"especially ones that have dependencies on other packages."
msgstr ""

#: ../../key_projects.rst:209
msgid ""
"`distribute`_ was a fork of setuptools that was merged back into "
"setuptools (in v0.7), thereby making setuptools the primary choice for "
"Python packaging."
msgstr ""

#: ../../key_projects.rst:216
msgid "trove-classifiers"
msgstr ""

#: ../../key_projects.rst:218
msgid ""
"`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI "
"<https://pypi.org/project/trove-classifiers/>`__"
msgstr ""

#: ../../key_projects.rst:222
msgid ""
"trove-classifiers is the canonical source for `classifiers on PyPI "
"<https://pypi.org/classifiers/>`_, which project maintainers use to "
"`systematically describe their projects "
"<https://packaging.python.org/specifications/core-metadata/#classifier-"
"multiple-use>`_ so that users can better find projects that match their "
"needs on the PyPI."
msgstr ""

#: ../../key_projects.rst:228
msgid ""
"The trove-classifiers package contains a list of valid classifiers and "
"deprecated classifiers (which are paired with the classifiers that "
"replace them).  Use this package to validate classifiers used in packages"
" intended for uploading to PyPI. As this list of classifiers is published"
" as code, you can install and import it, giving you a more convenient "
"workflow compared to referring to the `list published on PyPI "
"<https://pypi.org/classifiers/>`_. The `issue tracker "
"<https://github.com/pypa/trove-classifiers/issues>`_ for the project "
"hosts discussions on proposed classifiers and requests for new "
"classifiers."
msgstr ""

#: ../../key_projects.rst:242
msgid "twine"
msgstr ""

#: ../../key_projects.rst:244
msgid ""
"`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues "
"<https://github.com/pypa/twine/issues>`__ | `GitHub "
"<https://github.com/pypa/twine>`__ | `PyPI "
"<https://pypi.org/project/twine>`__"
msgstr ""

#: ../../key_projects.rst:249
msgid ""
"Twine is the primary tool developers use to upload packages to the Python"
" Package Index or other Python package indexes. It is a command-line "
"program that passes program files and metadata to a web API. Developers "
"use it because it's the official PyPI upload tool, it's fast and secure, "
"it's maintained, and it reliably works."
msgstr ""

#: ../../key_projects.rst:259
msgid "virtualenv"
msgstr ""

#: ../../key_projects.rst:261
msgid ""
"`Docs <https://virtualenv.pypa.io/en/stable/>`__ | `Issues "
"<https://github.com/pypa/virtualenv/issues>`__ | `GitHub "
"<https://github.com/pypa/virtualenv>`__ | `PyPI "
"<https://pypi.org/project/virtualenv/>`__"
msgstr ""

#: ../../key_projects.rst:266
msgid ""
"virtualenv is a tool which uses the command-line path environment "
"variable to create isolated Python :term:`Virtual Environments <Virtual "
"Environment>`, much as :ref:`venv` does. virtualenv provides additional "
"functionality, compared to :ref:`venv`, by supporting Python 2.7 and by "
"providing convenient features for configuring, maintaining, duplicating, "
"and troubleshooting the virtual environments. For more information, see "
"the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../../key_projects.rst:279
msgid "Warehouse"
msgstr ""

#: ../../key_projects.rst:281
msgid ""
"`Docs <https://warehouse.pypa.io/>`__ | `Issues "
"<https://github.com/pypa/warehouse/issues>`__ | `GitHub "
"<https://github.com/pypa/warehouse>`__"
msgstr ""

#: ../../key_projects.rst:285
msgid ""
"The current codebase powering the :term:`Python Package Index (PyPI)`. It"
" is hosted at `pypi.org <https://pypi.org/>`_. The default source for "
":ref:`pip` downloads."
msgstr ""

#: ../../key_projects.rst:293
msgid "wheel"
msgstr ""

#: ../../key_projects.rst:295
msgid ""
"`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues "
"<https://github.com/pypa/wheel/issues>`__ | `GitHub "
"<https://github.com/pypa/wheel>`__ | `PyPI "
"<https://pypi.org/project/wheel>`__"
msgstr ""

#: ../../key_projects.rst:300
msgid ""
"Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools`"
" extension for creating :term:`wheel distributions <Wheel>`.  "
"Additionally, it offers its own command line utility for creating and "
"installing wheels."
msgstr ""

#: ../../key_projects.rst:304
msgid ""
"See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that"
" package developers use to check and fix Python packages they are making "
"in the binary wheel format. It provides functionality to discover "
"dependencies, check metadata for compliance, and repair the wheel and "
"metadata to properly link and include external shared libraries in a "
"package."
msgstr ""

#: ../../key_projects.rst:313
msgid "Non-PyPA Projects"
msgstr ""

#: ../../key_projects.rst:318
msgid "bento"
msgstr ""

#: ../../key_projects.rst:320
msgid ""
"`Docs <http://cournape.github.io/Bento/>`__ | `Issues "
"<https://github.com/cournape/Bento/issues>`__ | `GitHub "
"<https://github.com/cournape/Bento>`__ | `PyPI "
"<https://pypi.org/project/bento>`__"
msgstr ""

#: ../../key_projects.rst:325
msgid ""
"Bento is a packaging tool solution for Python software, targeted as an "
"alternative to :ref:`distutils`, :ref:`setuptools`, etc....  Bento's "
"philosophy is reproducibility, extensibility and simplicity (in that "
"order)."
msgstr ""

#: ../../key_projects.rst:333
msgid "buildout"
msgstr ""

#: ../../key_projects.rst:335
msgid ""
"`Docs <http://www.buildout.org/en/latest/>`__ | `Issues "
"<https://bugs.launchpad.net/zc.buildout>`__ | `PyPI "
"<https://pypi.org/project/zc.buildout>`__ | `GitHub "
"<https://github.com/buildout/buildout/>`__"
msgstr ""

#: ../../key_projects.rst:340
msgid ""
"Buildout is a Python-based build system for creating, assembling and "
"deploying applications from multiple parts, some of which may be non-"
"Python-based.  It lets you create a buildout configuration and reproduce "
"the same software later."
msgstr ""

#: ../../key_projects.rst:347
msgid "conda"
msgstr ""

#: ../../key_projects.rst:349
msgid "`Docs <http://conda.pydata.org/docs/>`__"
msgstr ""

#: ../../key_projects.rst:351
msgid ""
"conda is the package management tool for `Anaconda "
"<https://docs.anaconda.com/anaconda/>`__ Python installations. Anaconda "
"Python is a distribution from `Anaconda, Inc "
"<https://www.anaconda.com/download>`__ specifically aimed at the "
"scientific community, and in particular on Windows where the installation"
" of binary extensions is often difficult."
msgstr ""

#: ../../key_projects.rst:358
msgid ""
"Conda is a completely separate tool from :ref:`pip`, virtualenv and "
"wheel, but provides many of their combined features in terms of package "
"management, virtual environment management and deployment of binary "
"extensions."
msgstr ""

#: ../../key_projects.rst:362
msgid ""
"Conda does not install packages from PyPI and can install only from the "
"official Anaconda repositories, or anaconda.org (a place for user-"
"contributed *conda* packages), or a local (e.g. intranet) package server."
"  However, note that :ref:`pip` can be installed into, and work side-by-"
"side with conda for managing :term:`distributions <Distribution Package>`"
" from PyPI. Also, `conda skeleton <https://docs.conda.io/projects/conda-"
"build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`__ is a "
"tool to make Python packages installable by conda by first fetching them "
"from PyPI and modifying their metadata."
msgstr ""

#: ../../key_projects.rst:375
msgid "devpi"
msgstr ""

#: ../../key_projects.rst:377
msgid ""
"`Docs <http://doc.devpi.net/latest/>`__ | `Issues "
"<https://bitbucket.org/hpk42/devpi/issues>`__ | `PyPI "
"<https://pypi.org/project/devpi>`__"
msgstr ""

#: ../../key_projects.rst:381
msgid ""
"devpi features a powerful PyPI-compatible server and PyPI proxy cache "
"with a complementary command line tool to drive packaging, testing and "
"release activities with Python. devpi also provides a browsable and "
"searchable web interface."
msgstr ""

#: ../../key_projects.rst:390
msgid "flit"
msgstr ""

#: ../../key_projects.rst:392
msgid ""
"`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues "
"<https://github.com/takluyver/flit/issues>`__ | `PyPI "
"<https://pypi.org/project/flit>`__"
msgstr ""

#: ../../key_projects.rst:396
msgid ""
"Flit provides a simple way to upload pure Python packages and modules to "
"PyPI. It focuses on `making the easy things easy <flit-rationale_>`_ for "
"packaging. Flit can generate a configuration file to quickly set up a "
"simple project, build source distributions and wheels, and upload them to"
" PyPI."
msgstr ""

#: ../../key_projects.rst:401
msgid ""
"Flit uses ``pyproject.toml`` to configure a project. Flit does not rely "
"on tools such as :ref:`setuptools` to build distributions, or "
":ref:`twine` to upload them to PyPI. Flit requires Python 3, but you can "
"use it to distribute modules for Python 2, so long as they can be "
"imported on Python 3."
msgstr ""

#: ../../key_projects.rst:411
msgid "enscons"
msgstr ""

#: ../../key_projects.rst:413
msgid ""
"`Source <https://bitbucket.org/dholth/enscons/src>`__ | `Issues "
"<https://bitbucket.org/dholth/enscons/issues>`__ | `PyPI "
"<https://pypi.org/project/enscons>`__"
msgstr ""

#: ../../key_projects.rst:417
msgid ""
"Enscons is a Python packaging tool based on `SCons`_. It builds "
":ref:`pip`-compatible source distributions and wheels without using "
"distutils or setuptools, including distributions with C extensions. "
"Enscons has a different architecture and philosophy than "
":ref:`distutils`. Rather than adding build features to a Python packaging"
" system, enscons adds Python packaging to a general purpose build system."
" Enscons helps you to build sdists that can be automatically built by "
":ref:`pip`, and wheels that are independent of enscons."
msgstr ""

#: ../../key_projects.rst:432
msgid "Hashdist"
msgstr ""

#: ../../key_projects.rst:434
msgid ""
"`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/hashdist/hashdist/>`__"
msgstr ""

#: ../../key_projects.rst:437
msgid ""
"Hashdist is a library for building non-root software distributions. "
"Hashdist is trying to be “the Debian of choice for cases where Debian "
"technology doesn’t work”. The best way for Pythonistas to think about "
"Hashdist may be a more powerful hybrid of :ref:`virtualenv` and "
":ref:`buildout`. It is aimed at solving the problem of installing "
"scientific software, and making package distribution stateless, cached, "
"and branchable. It is used by some researchers but has been lacking in "
"maintenance since 2016."
msgstr ""

#: ../../key_projects.rst:449
msgid "hatch"
msgstr ""

#: ../../key_projects.rst:451
msgid ""
"`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI "
"<https://pypi.org/project/hatch>`__"
msgstr ""

#: ../../key_projects.rst:454
msgid ""
"Hatch is a unified command-line tool meant to conveniently manage "
"dependencies and environment isolation for Python developers. Python "
"package developers use Hatch to configure, version, specify dependencies "
"for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` "
"to upload packages to PyPI, and :ref:`pip` to download and install "
"packages."
msgstr ""

#: ../../key_projects.rst:464
msgid "pex"
msgstr ""

#: ../../key_projects.rst:466
msgid ""
"`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/pantsbuild/pex/>`__ | `PyPI "
"<https://pypi.org/project/pex>`__"
msgstr ""

#: ../../key_projects.rst:470
msgid ""
"pex is both a library and tool for generating :file:`.pex` (Python "
"EXecutable) files, standalone Python environments in the spirit of "
":ref:`virtualenv`. :file:`.pex` files are just carefully constructed zip "
"files with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, "
"and are designed to make deployment of Python applications as simple as "
"``cp``."
msgstr ""

#: ../../key_projects.rst:479
msgid "pipx"
msgstr ""

#: ../../key_projects.rst:481
msgid ""
"`Docs <https://pipxproject.github.io/pipx/>`__ | `GitHub "
"<https://github.com/pipxproject/pipx>`__ | `PyPI "
"<https://pypi.org/project/pipx/>`__"
msgstr ""

#: ../../key_projects.rst:485
msgid "pipx is a tool to safely install and run Python CLI applications globally."
msgstr ""

#: ../../key_projects.rst:490
msgid "pip-tools"
msgstr ""

#: ../../key_projects.rst:492
msgid ""
"`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI "
"<https://pypi.org/project/pip-tools/>`__"
msgstr ""

#: ../../key_projects.rst:495
msgid ""
"pip-tools is a suite of tools meant for Python system administrators and "
"release managers who particularly want to keep their builds deterministic"
" yet stay up to date with new versions of their dependencies. Users can "
"specify particular release of their dependencies via hash, conveniently "
"make a properly formatted list of requirements from information in other "
"parts of their program, update all dependencies (a feature :ref:`pip` "
"currently does not provide), and create layers of constraints for the "
"program to obey."
msgstr ""

#: ../../key_projects.rst:507
msgid "piwheels"
msgstr ""

#: ../../key_projects.rst:509
msgid ""
"`Website <https://www.piwheels.org/>`__ | `Docs "
"<https://piwheels.readthedocs.io/>`__ | `GitHub "
"<https://github.com/piwheels/piwheels/>`__"
msgstr ""

#: ../../key_projects.rst:513
msgid ""
"piwheels is a website, and software underpinning it, that fetches source "
"code distribution packages from PyPI and compiles them into binary wheels"
" that are optimized for installation onto Raspberry Pi computers. "
"Raspberry Pi OS pre-configures pip to use piwheels.org as an additional "
"index to PyPI."
msgstr ""

#: ../../key_projects.rst:522
msgid "poetry"
msgstr ""

#: ../../key_projects.rst:524
msgid ""
"`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com"
"/python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""

#: ../../key_projects.rst:528
msgid ""
"poetry is a command-line tool to handle dependency installation and "
"isolation as well as building and packaging of Python packages. It uses "
"``pyproject.toml`` and, instead of depending on the resolver "
"functionality within :ref:`pip`, provides its own dependency resolver. It"
" attempts to speed users' experience of installation and dependency "
"resolution by locally caching metadata about dependencies."
msgstr ""

#: ../../key_projects.rst:538
msgid "pypiserver"
msgstr ""

#: ../../key_projects.rst:540
msgid ""
"`Docs "
"<https://github.com/pypiserver/pypiserver/blob/master/README.rst>`__ | "
"`GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI "
"<https://pypi.org/project/pypiserver/>`__"
msgstr ""

#: ../../key_projects.rst:544
msgid ""
"pypiserver is a minimalist application that serves as a private Python "
"package index within organizations, implementing a simple API and browser"
" interface. You can upload private packages using standard upload tools, "
"and users can download and install them with :ref:`pip`, without "
"publishing them publicly. Organizations who use pypiserver usually "
"download packages both from pypiserver and from PyPI."
msgstr ""

#: ../../key_projects.rst:554
msgid "scikit-build"
msgstr ""

#: ../../key_projects.rst:556
msgid ""
"`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build/>`__ | `PyPI "
"<https://pypi.org/project/scikit-build>`__"
msgstr ""

#: ../../key_projects.rst:560
msgid ""
"Scikit-build is an improved build system generator for CPython "
"C/C++/Fortran/Cython extensions that integrates with :ref:`setuptools`, "
":ref:`wheel` and :ref:`pip`. It internally uses `cmake "
"<https://pypi.org/project/cmake>`__ (available on PyPI) to provide better"
" support for additional compilers, build systems, cross compilation, and "
"locating dependencies and their associated build requirements. To speed "
"up and parallelize the build of large projects, the user can install "
"`ninja <https://pypi.org/project/ninja>`__ (also available on PyPI)."
msgstr ""

#: ../../key_projects.rst:572
msgid "shiv"
msgstr ""

#: ../../key_projects.rst:574
msgid ""
"`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/linkedin/shiv>`__ | `PyPI "
"<https://pypi.org/project/shiv/>`__"
msgstr ""

#: ../../key_projects.rst:578
msgid ""
"shiv is a command line utility for building fully self contained Python "
"zipapps as outlined in :pep:`441`, but with all their dependencies "
"included. Its primary goal is making distributing Python applications and"
" command line tools fast & easy."
msgstr ""

#: ../../key_projects.rst:586
msgid "Spack"
msgstr ""

#: ../../key_projects.rst:588
msgid ""
"`Docs <https://spack.readthedocs.io/>`__ | `GitHub "
"<https://github.com/llnl/spack/>`__ | `Paper "
"<http://www.computer.org/csdl/proceedings/sc/2015/3723/00/2807623.pdf>`__"
" | `Slides <https://tgamblin.github.io/files/Gamblin-Spack-"
"SC15-Talk.pdf>`__"
msgstr ""

#: ../../key_projects.rst:593
msgid ""
"A flexible package manager designed to support multiple versions, "
"configurations, platforms, and compilers.  Spack is like Homebrew, but "
"packages are written in Python and parameterized to allow easy swapping "
"of compilers, library versions, build options, etc. Arbitrarily many "
"versions of packages can coexist on the same system. Spack was designed "
"for rapidly building high performance scientific applications on clusters"
" and supercomputers."
msgstr ""

#: ../../key_projects.rst:601
msgid ""
"Spack is not in PyPI (yet), but it requires no installation and can be "
"used immediately after cloning from GitHub."
msgstr ""

#: ../../key_projects.rst:607
msgid "zest.releaser"
msgstr ""

#: ../../key_projects.rst:609
msgid ""
"`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI "
"<https://pypi.org/project/zest.releaser/>`__"
msgstr ""

#: ../../key_projects.rst:613
msgid ""
"``zest.releaser`` is a Python package release tool providing an "
"abstraction layer on top of :ref:`twine`. Python developers use "
"``zest.releaser`` to automate incrementing package version numbers, "
"updating changelogs, tagging releases in source control, and uploading "
"new packages to PyPI."
msgstr ""

#: ../../key_projects.rst:620
msgid "Standard Library Projects"
msgstr ""

#: ../../key_projects.rst:625
msgid "ensurepip"
msgstr ""

#: ../../key_projects.rst:627
msgid ""
"`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues "
"<http://bugs.python.org>`__"
msgstr ""

#: ../../key_projects.rst:630
msgid ""
"A package in the Python Standard Library that provides support for "
"bootstrapping :ref:`pip` into an existing Python installation or virtual "
"environment.  In most cases, end users won't use this module, but rather "
"it will be used during the build of the Python distribution."
msgstr ""

#: ../../key_projects.rst:639
msgid "distutils"
msgstr ""

#: ../../key_projects.rst:641
msgid ""
"`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues "
"<http://bugs.python.org>`__"
msgstr ""

#: ../../key_projects.rst:644
msgid ""
"The original Python packaging system, added to the standard library in "
"Python 2.0."
msgstr ""

#: ../../key_projects.rst:647
msgid ""
"Due to the challenges of maintaining a packaging system where feature "
"updates are tightly coupled to language runtime updates, direct usage of "
":ref:`distutils` is now actively discouraged, with :ref:`Setuptools` "
"being the preferred replacement. :ref:`Setuptools` not only provides "
"features that plain :ref:`distutils` doesn't offer (such as dependency "
"declarations and entry point declarations), it also provides a consistent"
" build interface and feature set across all supported Python versions."
msgstr ""

#: ../../key_projects.rst:660
msgid "venv"
msgstr ""

#: ../../key_projects.rst:662
msgid ""
"`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues "
"<http://bugs.python.org>`__"
msgstr ""

#: ../../key_projects.rst:665
msgid ""
"A package in the Python Standard Library (starting with Python 3.3) for "
"creating :term:`Virtual Environments <Virtual Environment>`.  For more "
"information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""

