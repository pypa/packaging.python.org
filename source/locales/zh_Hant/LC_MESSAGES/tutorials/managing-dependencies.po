# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013‚Äì2020, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/tutorials/managing-dependencies.rst:4
#: 6584ff9f55004e8d81db54265705d944
msgid "Managing Application Dependencies"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:6
#: 558eb6acd6e84126862d36e25281edc4
msgid ""
"The :ref:`package installation tutorial <installing-packages>` covered "
"the basics of getting set up to install and update Python packages."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:9
#: 53f7bdd4af9041a6bcc4d6dfccf8603f
msgid ""
"However, running these commands interactively can get tedious even for "
"your own personal projects, and things get even more difficult when "
"trying to set up development environments automatically for projects with"
" multiple contributors."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:13
#: 0de3cbd9894c433aa37a9c1ea3f63b9b
msgid ""
"This tutorial walks you through the use of :ref:`Pipenv` to manage "
"dependencies for an application. It will show you how to install and use "
"the necessary tools and make strong recommendations on best practices."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:17
#: f18d36be99d9452193e8860a53dae78e
msgid ""
"Keep in mind that Python is used for a great many different purposes, and"
" precisely how you want to manage your dependencies may change based on "
"how you decide to publish your software. The guidance presented here is "
"most directly applicable to the development and deployment of network "
"services (including web applications), but is also very well suited to "
"managing development and testing environments for any kind of project."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:24
#: 7078c1817f8545aba5886c736ade1662
msgid ""
"Developers of Python libraries, or of applications that support "
"distribution as Python libraries, should also consider the `poetry "
"<https://github.com/python-poetry/poetry>`_ project as an alternative "
"dependency management solution."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:30
#: 8745a907b24045f98cba31f784e9bec3
msgid "Installing Pipenv"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:32
#: f05a5f73b5a04a769917db70b5340d04
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in "
"spirit to those tools. While :ref:`pip` alone is often sufficient for "
"personal use, Pipenv is recommended for collaborative projects as it's a "
"higher-level tool that simplifies dependency management for common use "
"cases."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:38
#: e2687f25840c46159ccf7610ea10dc33
msgid "Use ``pip`` to install Pipenv:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:54
#: 1f6f8f227d2f4028ae5c788143642a8d
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation,"
" you'll need to add the `user base`_'s binary directory to your ``PATH``."
" See :ref:`Installing to the User Site` for more information."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:65
#: b7b306cabad04616bcd72246b3d716d2
msgid "Installing packages for your project"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:67
#: 8c2e5320206e4a8a8b4a28281b4cc10c
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this"
" tutorial) and run:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:76
#: 3c89e9bc70c14c129766841bc9c73cc7
msgid ""
"Pipenv will install the `Requests`_ library and create a ``Pipfile`` for "
"you in your project's directory. The :ref:`Pipfile` is used to track "
"which dependencies your project needs in case you need to re-install "
"them, such as when you share your project with others. You should get "
"output similar to this (although the exact paths shown will vary):"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:112
#: 7b8e651c51af46baa3a3b2773245de3d
msgid "Using installed packages"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:114
#: f180551f6e844ce0ba69f1d647929bd2
msgid ""
"Now that Requests is installed you can create a simple :file:`main.py` "
"file to use it:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:125
#: 6f7dca288f4041fcbbb8408de79ce8d6
msgid "Then you can run this script using ``pipenv run``:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:131
#: 9b5b10c2b2344ef583284a637c21b806
msgid "You should get output similar to this:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:137
#: e6e62100a6324b078bf741a697f26f05
msgid ""
"Using ``pipenv run`` ensures that your installed packages are available "
"to your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``pipenv shell``."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:143
#: c79f98bc93c848cbbb4b158083ddc4ab
msgid "Next steps"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:145
#: 6bee4bdcc79748f7900bacdc089a4838
msgid ""
"Congratulations, you now know how to effectively manage dependencies and "
"development environments on a collaborative Python project! ‚ú® üç∞ ‚ú®"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:148
#: 2c1fbddf74d74b0892c7b45f9d527f89
msgid ""
"If you're interested in creating and distributing your own Python "
"packages, see the :ref:`tutorial on packaging and distributing packages "
"<distributing-packages>`."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:151
#: 5c801af7dcdc4483955128e0f2dac618
msgid ""
"Note that when your application includes definitions of Python source "
"packages, they (and their dependencies) can be added to your ``pipenv`` "
"environment with ``pipenv install -e <relative-path-to-source-"
"directory>`` (e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:160
#: f488c213078a4b6f8facb9b52bc9e9ad
msgid "Other Tools for Application Dependency Management"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:162
#: 35271ce9ef7e47b9b50d818b9ca63aca
msgid ""
"If you find this particular approach to managing application dependencies"
" isn't working well for you or your use case, you may want to explore "
"these other tools and techniques to see if one of them is a better fit:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:166
#: 5c99969ccdcd41d4b5844fc5cfc71abd
msgid ""
"`poetry <https://github.com/python-poetry/poetry>`__ for a tool "
"comparable in scope to ``pipenv`` that focuses more directly on use cases"
" where the repository being managed is structured as a Python project "
"with a valid ``pyproject.toml`` file (by contrast, ``pipenv`` explicitly "
"avoids making the assumption that the application being worked on that's "
"depending on components from PyPI will itself support distribution as a "
"``pip``-installable Python package)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:172
#: 6b2538190e2947e4924dced1d33ce386
msgid ""
"`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even"
" more steps in the project management workflow (such as incrementing "
"versions, tagging releases, and creating new skeleton projects from "
"project templates)"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:175
#: 072768b6800f46608fc9bfbba03e700a
msgid ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ to build your own "
"custom workflow from lower level pieces like ``pip-compile`` and ``pip-"
"sync``"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:177
#: b136d5b74d5046eeb25caf90d0eec038
msgid ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ is a "
"lightweight wrapper for pip to support requirements.txt, Pipenv and "
"Poetry lock files or converting them to pip-tools compatible output. "
"Designed for containerized Python applications but not limited to them."
msgstr ""

