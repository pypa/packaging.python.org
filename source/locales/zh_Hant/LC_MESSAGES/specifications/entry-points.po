# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/specifications/entry-points.rst:5 a0d51789b11c472bbc8a5401a1aa4ea1
msgid "Entry points specification"
msgstr ""

#: ../source/specifications/entry-points.rst:7 6d417d459bd74257bd4edaebdcac996f
msgid ""
"*Entry points* are a mechanism for an installed distribution to advertise"
" components it provides to be discovered and used by other code. For "
"example:"
msgstr ""

#: ../source/specifications/entry-points.rst:11
#: 862f95d4d7e94ad58fc19407e224833f
msgid ""
"Distributions can specify ``console_scripts`` entry points, each "
"referring to a function. When *pip* (or another console_scripts aware "
"installer) installs the distribution, it will create a command-line "
"wrapper for each entry point."
msgstr ""

#: ../source/specifications/entry-points.rst:14
#: 1692c769121c45ee99dee6f3ab335818
msgid ""
"Applications can use entry points to load plugins; e.g. Pygments (a "
"syntax highlighting tool) can use additional lexers and styles from "
"separately installed packages. For more about this, see :doc:`/guides"
"/creating-and-discovering-plugins`."
msgstr ""

#: ../source/specifications/entry-points.rst:19
#: 74a46f4ce64644489899f6f40491d2e9
msgid ""
"The entry point file format was originally developed to allow packages "
"built with setuptools to provide integration point metadata that would be"
" read at runtime with ``importlib.metadata``. It is now defined as a PyPA"
" interoperability specification in order to allow build tools other than "
"setuptools to publish ``importlib.metadata`` compatible entry point "
"metadata, and runtime libraries other than ``importlib.metadata`` to "
"portably read published entry point metadata (potentially with different "
"caching and conflict resolution strategies)."
msgstr ""

#: ../source/specifications/entry-points.rst:28
#: ad5055a9096743859cf336a335b8a320
msgid "Data model"
msgstr ""

#: ../source/specifications/entry-points.rst:30
#: 2f9b143e28634f2c9fdc76af9352c581
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr ""

#: ../source/specifications/entry-points.rst:32
#: 2644ec970c754fc189e37fd124fc4cac
msgid ""
"The **group** that an entry point belongs to indicates what sort of "
"object it provides. For instance, the group ``console_scripts`` is for "
"entry points referring to functions which can be used as a command, while"
" ``pygments.styles`` is the group for classes defining pygments styles. "
"The consumer typically defines the expected interface. To avoid clashes, "
"consumers defining a new group should use names starting with a PyPI name"
" owned by the consumer project, followed by ``.``. Group names must be "
"one or more groups of letters, numbers and underscores, separated by dots"
" (regex ``^\\w+(\\.\\w+)*$``)."
msgstr ""

#: ../source/specifications/entry-points.rst:42
#: 00842ac47aa94ab7b72bb13d79ea3745
msgid ""
"The **name** identifies this entry point within its group. The precise "
"meaning of this is up to the consumer. For console scripts, the name of "
"the entry point is the command that will be used to launch it. Within a "
"distribution, entry point names should be unique. If different "
"distributions provide the same name, the consumer decides how to handle "
"such conflicts. The name may contain any characters except ``=``, but it "
"cannot start or end with any whitespace character, or start with ``[``. "
"For new entry points, it is recommended to use only letters, numbers, "
"underscores, dots and dashes (regex ``[\\w.-]+``)."
msgstr ""

#: ../source/specifications/entry-points.rst:51
#: 8edb282530cc4a0981a90f0819d49813
msgid ""
"The **object reference** points to a Python object. It is either in the "
"form ``importable.module``, or ``importable.module:object.attr``. Each of"
" the parts delimited by dots and the colon is a valid Python identifier. "
"It is intended to be looked up like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:64
#: e1bec47dffe84ed0976c298dd9d0964b
msgid ""
"Some tools call this kind of object reference by itself an 'entry point',"
" for want of a better term, especially where it points to a function to "
"launch a program."
msgstr ""

#: ../source/specifications/entry-points.rst:68
#: 7ccda0b7daee4e7f991d6a7f1eaf230b
msgid ""
"There is also an optional property: the **extras** are a set of strings "
"identifying optional features of the distribution providing the entry "
"point. If these are specified, the entry point requires the dependencies "
"of those 'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""

#: ../source/specifications/entry-points.rst:73
#: 33393136ebc449428ebb458f6875f7bf
msgid ""
"Using extras for an entry point is no longer recommended. Consumers "
"should support parsing them from existing distributions, but may then "
"ignore them. New publishing tools need not support specifying extras. The"
" functionality of handling extras was tied to setuptools' model of "
"managing 'egg' packages, but newer tools such as pip and virtualenv use a"
" different model."
msgstr ""

#: ../source/specifications/entry-points.rst:80
#: dacc73343e0640508733af182d01c737
msgid "File format"
msgstr ""

#: ../source/specifications/entry-points.rst:82
#: 050bb8a0c6fc4946b1dd0ab3484bdac6
msgid ""
"Entry points are defined in a file called :file:`entry_points.txt` in the"
" :file:`*.dist-info` directory of the distribution. This is the directory"
" described in :pep:`376` for installed distributions, and in :pep:`427` "
"for wheels.  The file uses the UTF-8 character encoding."
msgstr ""

#: ../source/specifications/entry-points.rst:87
#: 1076ae70152f4769aa74e4ff10d120d9
msgid ""
"The file contents are in INI format, as read by Python's "
":mod:`configparser` module. However, configparser treats names as case-"
"insensitive by default, whereas entry point names are case sensitive. A "
"case-sensitive config parser can be made like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:97
#: 0853481ef2be4670bb7ccf3b57391a95
msgid ""
"The entry points file must always use ``=`` to delimit names from values "
"(whereas configparser also allows using ``:``)."
msgstr ""

#: ../source/specifications/entry-points.rst:100
#: 4853744c8af94762906b3ad7bee9faee
msgid ""
"The sections of the config file represent entry point groups, the names "
"are names, and the values encode both the object reference and the "
"optional extras. If extras are used, they are a comma-separated list "
"inside square brackets."
msgstr ""

#: ../source/specifications/entry-points.rst:104
#: 326929389dfc454ab1e9c4ee6f395be9
msgid ""
"Within a value, readers must accept and ignore spaces (including multiple"
" consecutive spaces) before or after the colon, between the object "
"reference and the left square bracket, between the extra names and the "
"square brackets and colons delimiting them, and after the right square "
"bracket. The syntax for extras is formally specified as part of "
":pep:`508` (as ``extras``). For tools writing the file, it is recommended"
" only to insert a space between the object reference and the left square "
"bracket."
msgstr ""

#: ../source/specifications/entry-points.rst:112
#: 3e58b7451b5f42a5a3bdd27d0e25d37e
msgid "For example::"
msgstr ""

#: ../source/specifications/entry-points.rst:124
#: 6fac725e455a4022820ec25d1c119cc1
msgid "Use for scripts"
msgstr ""

#: ../source/specifications/entry-points.rst:126
#: e085e4d87ab2420eb025eb4b685d2dfe
msgid ""
"Two groups of entry points have special significance in packaging: "
"``console_scripts`` and ``gui_scripts``. In both groups, the name of the "
"entry point should be usable as a command in a system shell after the "
"package is installed. The object reference points to a function which "
"will be called with no arguments when this command is run. The function "
"may return an integer to be used as a process exit code, and returning "
"``None`` is equivalent to returning ``0``."
msgstr ""

#: ../source/specifications/entry-points.rst:134
#: eb087507528f40b5b71d5dc2851bb5c3
msgid ""
"For instance, the entry point ``mycmd = mymod:main`` would create a "
"command ``mycmd`` launching a script like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:141
#: 576e7f8bbc8243ffbcd3c0dcf0bcc71e
msgid ""
"The difference between ``console_scripts`` and ``gui_scripts`` only "
"affects Windows systems. ``console_scripts`` are wrapped in a console "
"executable, so they are attached to a console and can use ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` for input and output. ``gui_scripts`` "
"are wrapped in a GUI executable, so they can be started without a "
"console, but cannot use standard streams unless application code "
"redirects them. Other platforms do not have the same distinction."
msgstr ""

#: ../source/specifications/entry-points.rst:149
#: 08d6b387f9e54b7587183b6d85487bc0
msgid ""
"Install tools are expected to set up wrappers for both "
"``console_scripts`` and ``gui_scripts`` in the scripts directory of the "
"install scheme. They are not responsible for putting this directory in "
"the ``PATH`` environment variable which defines where command-line tools "
"are found."
msgstr ""

#: ../source/specifications/entry-points.rst:154
#: cab8250e8003415584c2e62ab59e2bde
msgid ""
"As files are created from the names, and some filesystems are case-"
"insensitive, packages should avoid using names in these groups which "
"differ only in case. The behaviour of install tools when names differ "
"only in case is undefined."
msgstr ""

