# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../source/guides/tool-recommendations.rst:5 c96780ec405643919b61279ea2af621c
msgid "Tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:7 6025851a1c614e17bc46f15ec70145e7
msgid ""
"If you're familiar with Python packaging and installation, and just want "
"to know what tools are currently recommended, then here it is."
msgstr ""

#: ../source/guides/tool-recommendations.rst:12
#: 8c8910747dc64b29a284224e231b81b1
msgid "Application dependency management"
msgstr ""

#: ../source/guides/tool-recommendations.rst:14
#: b76009010168409e89063c8918373c51
msgid ""
"Use :ref:`pipenv` to manage library dependencies when developing Python "
"applications. See :doc:`../tutorials/managing-dependencies` for more "
"details on using ``pipenv``."
msgstr ""

#: ../source/guides/tool-recommendations.rst:18
#: e331f77d16f54434b8337394fa6ad86a
msgid "When ``pipenv`` does not meet your use case, consider other tools like:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:20
#: 8bf652be869f42249723d967eb0d7d5e
msgid ":ref:`pip`"
msgstr ""

#: ../source/guides/tool-recommendations.rst:22
#: 69cc5a66c8fb4f5786a903f832fbcca9
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:24
#: 054321833f21481c85da63f42fe38357
msgid "`Poetry <https://python-poetry.org/>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:27
#: 7107fd2897fd495c8dfb91d2551a1361
msgid "Installation tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:29
#: cf651bb2d8524e1b8bc19d7abd59166a
msgid ""
"Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
"from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on "
"how :ref:`pip` is installed, you may need to also install :ref:`wheel` to"
" get the benefit of wheel caching. [3]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:34
#: 1358a3726c474c549d7c8b40b8c929f2
msgid ""
"Use :ref:`virtualenv`, or `venv`_ to isolate application specific "
"dependencies from a shared Python installation. [4]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:37
#: 6ef77e23c7ae4bdc83b5158d667b8daa
msgid ""
"If you're looking for management of fully integrated cross-platform "
"software stacks, consider:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:40
#: 123a6797a2674a4d9b37f18b46361143
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ""

#: ../source/guides/tool-recommendations.rst:42
#: 59243176a8694811b9572decd303c57c
msgid ""
":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
"scientific community."
msgstr ""

#: ../source/guides/tool-recommendations.rst:47
#: 9fdb586a329046ddadef692596852a39
msgid "Packaging tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:49
#: 2e758b928088479d9bc70eb3fc4050a8
msgid ""
"Use :ref:`setuptools` to define projects and create :term:`Source "
"Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:52
#: 6bb21e266a66400eb4a0c98a61582675
msgid ""
"Use the ``bdist_wheel`` :ref:`setuptools` extension available from the "
":ref:`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is "
"especially beneficial, if your project contains binary extensions."
msgstr ""

#: ../source/guides/tool-recommendations.rst:56
#: 9e91c81011fb4ea980aa0b6661d3921f
msgid ""
"Use `twine <https://pypi.org/project/twine>`_ for uploading distributions"
" to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:61
#: 126b59356cc549579c81033f9c4da26d
msgid "Publishing platform migration"
msgstr ""

#: ../source/guides/tool-recommendations.rst:63
#: 7a0404d0fe8f4dd4b9930c47056e7761
msgid ""
"The original Python Package Index implementation (previously hosted at "
"`pypi.python.org <https://pypi.python.org>`_) has been phased out in "
"favour of an updated implementation hosted at `pypi.org "
"<https://pypi.org>`_."
msgstr ""

#: ../source/guides/tool-recommendations.rst:67
#: 17624bf6fe504eacb14a3a71139ae0ec
msgid ""
"See :ref:`Migrating to PyPI.org` for more information on the status of "
"the migration, and what settings to change in your clients."
msgstr ""

#: ../source/guides/tool-recommendations.rst:72
#: 86ea974a20904e6aaa424c7fcad251ba
msgid ""
"There are some cases where you might choose to use ``easy_install`` (from"
" :ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` "
"(which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs "
"easy_install`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:77
#: fdce97a4dbf04d7287ec4986acf487e7
msgid ""
"The acceptance of :pep:`453` means that :ref:`pip` will be available by "
"default in most installations of Python 3.4 or later.  See the "
":pep:`rationale section <453#rationale>` from :pep:`453` as for why pip "
"was chosen."
msgstr ""

#: ../source/guides/tool-recommendations.rst:82
#: 5ccf5a1c049d416cbde9b82a9918a85e
msgid ""
"`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and "
":ref:`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and "
":ref:`venv <venv>` do not currently.  Also, the common \"python-pip\" "
"package that's found in various linux distros, does not depend on "
"\"python-wheel\" currently."
msgstr ""

#: ../source/guides/tool-recommendations.rst:88
#: 8d09eeb59a0d4072b89a67bc01794ddf
msgid ""
"Beginning with Python 3.4, ``venv`` will create virtualenv environments "
"with ``pip`` installed, thereby making it an equal alternative to "
":ref:`virtualenv`. However, using :ref:`virtualenv` will still be "
"recommended for users that need cross-version consistency."
msgstr ""

#: ../source/guides/tool-recommendations.rst:93
#: be67cc9f314d436798b17b856d5e8f6c
msgid ""
"Although you can use pure ``distutils`` for many projects, it does not "
"support defining dependencies on other projects and is missing several "
"convenience utilities for automatically populating distribution metadata "
"correctly that are provided by ``setuptools``. Being outside the standard"
" library, ``setuptools`` also offers a more consistent feature set across"
" different versions of Python, and (unlike ``distutils``), recent "
"versions of ``setuptools`` support all of the modern metadata fields "
"described in :ref:`core-metadata`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:102
#: 54fd505431874757bcae94df4561a716
msgid ""
"Even for projects that do choose to use ``distutils``, when :ref:`pip` "
"installs such projects directly from source (rather than installing from "
"a prebuilt :term:`wheel <Wheel>` file), it will actually build your "
"project using :ref:`setuptools` instead."
msgstr ""

#: ../source/guides/tool-recommendations.rst:107
#: 4cc40c8ec6c34d89836566e708fd38c6
msgid ""
"`distribute`_ (a fork of setuptools) was merged back into "
":ref:`setuptools` in June 2013, thereby making setuptools the default "
"choice for packaging."
msgstr ""

