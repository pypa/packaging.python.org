# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging
# User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-28 08:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../guides/analyzing-pypi-package-downloads.rst:3
msgid "Analyzing PyPI package downloads"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:5
msgid ""
"This section covers how to use the public PyPI download statistics "
"dataset to learn more about downloads of a package (or packages) hosted "
"on PyPI. For example, you can use it to discover the distribution of "
"Python versions used to download a package."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:12
#: ../../guides/distributing-packages-using-setuptools.rst:22
#: ../../guides/index-mirrors-and-caches.rst:12
#: ../../guides/installing-scientific-packages.rst:9
#: ../../guides/packaging-binary-extensions.rst:17
#: ../../guides/supporting-multiple-python-versions.rst:12
#: ../../guides/supporting-windows-using-appveyor.rst:15
msgid "Contents"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:15
#: ../../guides/supporting-windows-using-appveyor.rst:18
msgid "Background"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:17
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:19
msgid ""
"**Inefficient to make work with a Content Distribution Network (CDN):** "
"Download statistics change constantly. Including them in project pages, "
"which are heavily cached, would require invalidating the cache more "
"often, and reduce the overall effectiveness of the cache."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:24
msgid ""
"**Highly inaccurate:** A number of things prevent the download counts "
"from being accurate, some of which include:"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:27
msgid "``pip``'s download cache (lowers download counts)"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:28
msgid "Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:29
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:30
msgid ""
"Unofficial scripts or attempts at download count inflation (raises "
"download counts)"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:32
msgid "Known historical data quality issues (lowers download counts)"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:34
msgid ""
"**Not particularly useful:** Just because a project has been downloaded a"
" lot doesn't mean it's good; Similarly just because a project hasn't been"
" downloaded a lot doesn't mean it's bad!"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:38
msgid ""
"In short, because it's value is low for various reasons, and the "
"tradeoffs required to make it work are high, it has been not an effective"
" use of limited resources."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:43
msgid "Public dataset"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:45
msgid ""
"As an alternative, the `Linehaul project "
"<https://github.com/pypa/linehaul>`__ streams download logs from PyPI to "
"`Google BigQuery`_ [#]_, where they are stored as a public dataset."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:50
msgid "Getting set up"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:52
msgid ""
"In order to use `Google BigQuery`_ to query the `public PyPI download "
"statistics dataset`_, you'll need a Google account and to enable the "
"BigQuery API on a Google Cloud Platform project. You can run the up to "
"1TB of queries per month `using the BigQuery free tier without a credit "
"card <https://cloud.google.com/blog/big-data/2017/01/how-to-run-a"
"-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card>`__"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:58
msgid "Navigate to the `BigQuery web UI`_."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:59
msgid "Create a new project."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:60
msgid ""
"Enable the `BigQuery API "
"<https://console.developers.google.com/apis/library/bigquery-"
"json.googleapis.com>`__."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:63
msgid ""
"For more detailed instructions on how to get started with BigQuery, check"
" out the `BigQuery quickstart guide "
"<https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-"
"ui>`__."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:69
msgid "Data schema"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:71
msgid ""
"Linehaul writes an entry in a ``bigquery-public-"
"data.pypi.file_downloads`` table for each download. The table contains "
"information about what file was downloaded and how it was downloaded. "
"Some useful columns from the `table schema "
"<https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-"
"data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:78
msgid "Column"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:78
#: ../../guides/using-manifest-in.rst:67
msgid "Description"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:78
msgid "Examples"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:80
msgid "timestamp"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:80
msgid "Date and time"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:80
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:82
msgid "file.project"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:82
msgid "Project name"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:82
msgid "``pipenv``, ``nose``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:84
msgid "file.version"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:84
msgid "Package version"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:84
msgid "``0.1.6``, ``1.4.2``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:86
msgid "details.installer.name"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:86
msgid "Installer"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:86
msgid "pip, `bandersnatch`_"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:88
msgid "details.python"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:88
msgid "Python version"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:88
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:93
msgid "Useful queries"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:95
msgid ""
"Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" "
"button."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:97
msgid ""
"Note that the rows are stored in a partitioned, which helps limit the "
"cost of queries. These example queries analyze downloads from recent "
"history by filtering on the ``timestamp`` column."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:102
msgid "Counting package downloads"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:104
msgid ""
"The following query counts the total number of downloads for the project "
"\"pytest\"."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:119
#: ../../guides/analyzing-pypi-package-downloads.rst:140
#: ../../guides/analyzing-pypi-package-downloads.rst:168
#: ../../guides/analyzing-pypi-package-downloads.rst:205
msgid "num_downloads"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:121
msgid "26190085"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:124
msgid ""
"To only count downloads from pip, filter on the "
"``details.installer.name`` column."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:142
msgid "24334215"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:146
msgid "Package downloads over time"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:148
msgid ""
"To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also"
" filtering by this column reduces corresponding costs."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:168
msgid "month"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:170
msgid "1956741"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:170
msgid "2018-01-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:172
msgid "2344692"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:172
msgid "2017-12-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:174
msgid "1730398"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:174
msgid "2017-11-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:176
msgid "2047310"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:176
msgid "2017-10-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:178
msgid "1744443"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:178
msgid "2017-09-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:180
msgid "1916952"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:180
msgid "2017-08-01"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:184
msgid "Python versions over time"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:186
msgid ""
"Extract the Python version from the ``details.python`` column. Warning: "
"This query processes over 500 GB of data."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:205
msgid "python"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:207
msgid "3.7"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:207
msgid "18051328726"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:209
msgid "3.6"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:209
msgid "9635067203"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:211
msgid "3.8"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:211
msgid "7781904681"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:213
msgid "2.7"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:213
msgid "6381252241"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:215
msgid "null"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:215
msgid "2026630299"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:217
msgid "3.5"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:217
msgid "1894153540"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:221
msgid "Caveats"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:223
msgid ""
"In addition to the caveats listed in the background above, Linehaul "
"suffered from a bug which caused it to significantly under-report "
"download statistics prior to July 26, 2018. Downloads before this date "
"are proportionally accurate (e.g. the percentage of Python 2 vs. Python 3"
" downloads) but total numbers are lower than actual by an order of "
"magnitude."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:231
msgid "Additional tools"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:233
msgid ""
"Besides using the BigQuery console, there are some additional tools which"
" may be useful when analyzing download statistics."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:237
msgid "``google-cloud-bigquery``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:239
msgid ""
"You can also access the public PyPI download statistics dataset "
"programmatically via the BigQuery API and the `google-cloud-bigquery`_ "
"project, the official Python client library for BigQuery."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:267
msgid "``pypinfo``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:269
msgid ""
"`pypinfo`_ is a command-line tool which provides access to the dataset "
"and can generate several useful queries. For example, you can query the "
"total number of download for a package with the command ``pypinfo "
"package_name``."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:273
msgid "Install `pypinfo`_ using pip."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:279
msgid "Usage:"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:295
msgid "``pandas-gbq``"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:297
msgid ""
"The `pandas-gbq`_ project allows for accessing query results via "
"`Pandas`_."
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:301
msgid "References"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:303
msgid ""
"`PyPI Download Counts deprecation email "
"<https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html>`__"
msgstr ""

#: ../../guides/analyzing-pypi-package-downloads.rst:304
msgid ""
"`PyPI BigQuery dataset announcement email "
"<https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:3
msgid "Creating and discovering plugins"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:5
msgid ""
"Often when creating a Python application or library you'll want the "
"ability to provide customizations or extra features via **plugins**. "
"Because Python packages can be separately distributed, your application "
"or library may want to automatically **discover** all of the plugins "
"available."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:10
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:12
msgid "`Using naming convention`_."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:13
msgid "`Using namespace packages`_."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:14
msgid "`Using package metadata`_."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:18
msgid "Using naming convention"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:20
msgid ""
"If all of the plugins for your application follow the same naming "
"convention, you can use :func:`pkgutil.iter_modules` to discover all of "
"the top-level modules that match the naming convention. For example, "
"`Flask`_ uses the naming convention ``flask_{plugin_name}``. If you "
"wanted to automatically discover all of the Flask plugins installed:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:38
msgid ""
"If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins "
"installed then ``discovered_plugins`` would be:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:48
msgid ""
"Using naming convention for plugins also allows you to query the Python "
"Package Index's `simple API`_ for all packages that conform to your "
"naming convention."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:59
msgid "Using namespace packages"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:61
msgid ""
":doc:`Namespace packages <packaging-namespace-packages>` can be used to "
"provide a convention for where to place plugins and also provides a way "
"to perform discovery. For example, if you make the sub-package "
"``myapp.plugins`` a namespace package then other :term:`distributions "
"<Distribution Package>` can provide modules and packages to that "
"namespace. Once installed, you can use :func:`pkgutil.iter_modules` to "
"discover all modules and packages installed under that namespace:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:89
msgid ""
"Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` "
"causes it to only look for the modules directly under that namespace. For"
" example, if you have installed distributions that provide the modules "
"``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` "
"in this case would be:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:101
msgid ""
"This sample uses a sub-package as the namespace package "
"(``myapp.plugins``), but it's also possible to use a top-level package "
"for this purpose (such as ``myapp_plugins``). How to pick the namespace "
"to use is a matter of preference, but it's not recommended to make your "
"project's main top-level package (``myapp`` in this case) a namespace "
"package for the purpose of plugins, as one bad plugin could cause the "
"entire namespace to break which would in turn make your project "
"unimportable. For the \"namespace sub-package\" approach to work, the "
"plugin packages must omit the :file:`__init__.py` for your top-level "
"package directory (``myapp`` in this case) and include the namespace-"
"package style :file:`__init__.py` in the namespace sub-package directory "
"(``myapp/plugins``).  This also means that plugins will need to "
"explicitly pass a list of packages to :func:`setup`'s ``packages`` "
"argument instead of using :func:`setuptools.find_packages`."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:115
msgid ""
"Namespace packages are a complex feature and there are several different "
"ways to create them. It's highly recommended to read the :doc:`packaging-"
"namespace-packages` documentation and clearly document which approach is "
"preferred for plugins to your project."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:121
msgid "Using package metadata"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:123
msgid ""
"`Setuptools`_ provides :doc:`special support "
"<setuptools:userguide/entry_point>` for plugins. By providing the "
"``entry_points`` argument to :func:`setup` in :file:`setup.py` plugins "
"can register themselves for discovery."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:128
msgid ""
"For example if you have a package named ``myapp-plugin-a`` and it "
"includes in its :file:`setup.py`:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:139
msgid ""
"Then you can discover and load all of the registered entry points by "
"using :func:`importlib.metadata.entry_points` (or the `backport`_ "
"``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:154
msgid ""
"In this example, ``discovered_plugins`` would be a collection of type "
":class:`importlib.metadata.EntryPoint`:"
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:163
msgid ""
"Now the module of your choice can be imported by executing "
"``discovered_plugins['a'].load()``."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:166
msgid ""
"The ``entry_point`` specification in :file:`setup.py` is fairly flexible "
"and has a lot of options. It's recommended to read over the entire "
"section on :doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""

#: ../../guides/creating-and-discovering-plugins.rst:170
msgid ""
"Since this specification is part of the :doc:`standard library "
"<python:library/importlib.metadata>`, most packaging tools other than "
"setuptools provide support for defining entry points."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:5
msgid "Packaging and distributing projects"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:7
msgid ""
"This section covers the basics of how to configure, package and "
"distribute your own Python projects.  It assumes that you are already "
"familiar with the contents of the :doc:`/tutorials/installing-packages` "
"page."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:11
msgid ""
"The section does *not* aim to cover best practices for Python project "
"development as a whole.  For example, it does not provide guidance or "
"tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:15
msgid ""
"For more reference material, see :std:doc:`Building and Distributing "
"Packages <userguide/index>` in the :ref:`setuptools` docs, but note that "
"some advisory content there may be outdated. In the event of conflicts, "
"prefer the advice in the Python Packaging User Guide."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:25
msgid "Requirements for packaging and distributing"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:26
msgid ""
"First, make sure you have already fulfilled the :ref:`requirements for "
"installing packages <installing_requirements>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:29
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:43
msgid ""
"You'll need this to upload your project :term:`distributions "
"<Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` "
"(see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:49
msgid "Configuring your project"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:53
msgid "Initial files"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:56
msgid "setup.py"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:58
msgid ""
"The most important file is :file:`setup.py` which exists at the root of "
"your project directory. For an example, see the `setup.py "
"<https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:63
msgid ":file:`setup.py` serves two primary functions:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:65
msgid ""
"It's the file where various aspects of your project are configured. The "
"primary feature of :file:`setup.py` is that it contains a global "
"``setup()`` function.  The keyword arguments to this function are how "
"specific details of your project are defined.  The most relevant "
"arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:71
msgid ""
"It's the command line interface for running various commands that relate "
"to packaging tasks. To get a listing of available commands, run ``python "
"setup.py --help-commands``."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:77
msgid "setup.cfg"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:79
msgid ""
":file:`setup.cfg` is an ini file that contains option defaults for "
":file:`setup.py` commands.  For an example, see the `setup.cfg "
"<https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:86
msgid "README.rst / README.md"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:88
msgid ""
"All projects should contain a readme file that covers the goal of the "
"project. The most common format is `reStructuredText "
"<http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, "
"although this is not a requirement; multiple variants of `Markdown "
"<https://daringfireball.net/projects/markdown/>`_ are supported as well "
"(look at ``setup()``'s :ref:`long_description_content_type <description>`"
" argument)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:95
msgid ""
"For an example, see `README.md "
"<https://github.com/pypa/sampleproject/blob/master/README.md>`_ from the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:99
msgid ""
"Projects using :ref:`setuptools` 0.6.27+ have standard readme files "
"(:file:`README.rst`, :file:`README.txt`, or :file:`README`) included in "
"source distributions by default. The built-in :ref:`distutils` library "
"adopts this behavior beginning in Python 3.7. Additionally, "
":ref:`setuptools` 36.4.0+ will include a :file:`README.md` if found. If "
"you are using setuptools, you don't need to list your readme file in "
":file:`MANIFEST.in`. Otherwise, include it to be explicit."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:108
msgid "MANIFEST.in"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:110
msgid ""
"A :file:`MANIFEST.in` is needed when you need to package additional files"
" that are not automatically included in a source distribution.  For "
"details on writing a :file:`MANIFEST.in` file, including a list of what's"
" included by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:115
msgid ""
"For an example, see the `MANIFEST.in "
"<https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from "
"the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:119
msgid ":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:122
msgid "LICENSE.txt"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:124
msgid ""
"Every package should include a license file detailing the terms of "
"distribution. In many jurisdictions, packages without an explicit license"
" can not be legally used or distributed by anyone other than the "
"copyright holder. If you're unsure which license to choose, you can use "
"resources such as `GitHub's Choose a License "
"<https://choosealicense.com/>`_ or consult a lawyer."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:130
msgid ""
"For an example, see the `LICENSE.txt "
"<https://github.com/pypa/sampleproject/blob/master/LICENSE.txt>`_ from "
"the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:135
msgid "<your package>"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:137
msgid ""
"Although it's not required, the most common practice is to include your "
"Python modules and packages under a single top-level package that has the"
" same :ref:`name <setup() name>` as your project, or something very "
"close."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:141
msgid ""
"For an example, see the `sample "
"<https://github.com/pypa/sampleproject/tree/master/src/sample>`_ package "
"that's included in the `PyPA sample project "
"<https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:149
msgid "setup() args"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:151
msgid ""
"As mentioned above, the primary feature of :file:`setup.py` is that it "
"contains a global ``setup()`` function.  The keyword arguments to this "
"function are how specific details of your project are defined."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:155
msgid ""
"The most relevant arguments are explained below. Most of the snippets "
"given are taken from the `setup.py "
"<https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained "
"in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:164
msgid "name"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:170
msgid ""
"This is the name of your project, determining how your project is listed "
"on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid "
"project names must:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:174
msgid ""
"Consist only of ASCII letters, digits, underscores (``_``), hyphens "
"(``-``), and/or periods (``.``), and"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:176
msgid "Start & end with an ASCII letter or digit."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:178
msgid ""
"Comparison of project names is case insensitive and treats arbitrarily-"
"long runs of underscores, hyphens, and/or periods as equal.  For example,"
" if you register a project named ``cool-stuff``, users will be able to "
"download it or declare a dependency on it using any of the following "
"spellings::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:190
msgid "version"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:196
msgid ""
"This is the current version of your project, allowing your users to "
"determine whether or not they have the latest version, and to indicate "
"which specific versions they've tested their own software against."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:200
msgid ""
"Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for "
"each release if you publish your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:203
msgid ""
"See :ref:`Choosing a versioning scheme` for more information on ways to "
"use versions to convey compatibility information to your users."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:206
msgid ""
"If the project code itself needs run-time access to the version, the "
"simplest way is to keep the version in both :file:`setup.py` and your "
"code. If you'd rather not duplicate the value, there are a few ways to "
"manage this. See the \":ref:`Single sourcing the version`\" Advanced "
"Topics section."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:214
msgid "description"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:222
msgid "Give a short and long description for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:224
msgid ""
"These values will be displayed on :term:`PyPI <Python Package Index "
"(PyPI)>` if you publish your project. On ``pypi.org``, the user interface"
" displays ``description`` in the grey banner and ``long_description`` in "
"the section named \"Project Description\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:229
msgid ""
"``description`` is also displayed in lists of projects. For example, it's"
" visible in the search results pages such as "
"https://pypi.org/search/?q=jupyter, the front-page lists of trending "
"projects and new releases, and the list of projects you maintain within "
"your account profile (such as https://pypi.org/user/jaraco/)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:235
msgid ""
"A `content type <https://packaging.python.org/specifications/core-"
"metadata/#description-content-type-optional>`_ can be specified with the "
"``long_description_content_type`` argument, which can be one of "
"``text/plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no"
" formatting, `reStructuredText (reST) "
"<http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html"
"#reference-names>`_, and the Github-flavored Markdown dialect of "
"`Markdown <https://daringfireball.net/projects/markdown/>`_ respectively."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:245
msgid "url"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:252
msgid "Give a homepage URL for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:256
msgid "author"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:263
msgid "Provide details about the author."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:267
msgid "license"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:273
msgid ""
"The ``license`` argument doesn't have to indicate the license under which"
" your package is being released, although you may optionally do so if you"
" want.  If you're using a standard, well-known license, then your main "
"indication can and should be via the ``classifiers`` argument. "
"Classifiers exist for all major open-source licenses."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:279
msgid ""
"The \"license\" argument is more typically used to indicate differences "
"from well-known licenses, or to include your own, unique license. As a "
"general rule, it's a good idea to use a standard, well-known license, "
"both to avoid confusion and because some organizations avoid software "
"whose license is unapproved."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:287
msgid "classifiers"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:316
msgid ""
"Provide a list of classifiers that categorize your project. For a full "
"listing, see https://pypi.org/classifiers/."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:319
msgid ""
"Although the list of classifiers is often used to declare what Python "
"versions a project supports, this information is only used for searching "
"& browsing projects on PyPI, not for installing projects.  To actually "
"restrict what Python versions a project can be installed on, use the "
":ref:`python_requires` argument."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:327
msgid "keywords"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:333
msgid "List keywords that describe your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:337
msgid "project_urls"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:349
msgid ""
"List additional relevant URLs about your project. This is the place to "
"link to bug trackers, source repositories, or where to support package "
"development. The string of the key is the exact text that will be "
"displayed on PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:355
msgid "packages"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:361
msgid ""
"Set ``packages`` to a list of all :term:`packages <Import Package>` in "
"your project, including their subpackages, sub-subpackages, etc.  "
"Although the packages can be listed manually, "
"``setuptools.find_packages()`` finds them automatically.  Use the "
"``include`` keyword argument to find only the given packages.  Use the "
"``exclude`` keyword argument to omit packages that are not intended to be"
" released and installed."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:370
msgid "py_modules"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:376
msgid ""
"If your project contains any single-file Python modules that aren't part "
"of a package, set ``py_modules`` to a list of the names of the modules "
"(minus the ``.py`` extension) in order to make :ref:`setuptools` aware of"
" them."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:382
msgid "install_requires"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:388
msgid ""
"\"install_requires\" should be used to specify what dependencies a "
"project minimally needs to run. When the project is installed by "
":ref:`pip`, this is the specification that is used to install its "
"dependencies."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:392
msgid ""
"For more on using \"install_requires\" see :ref:`install_requires vs "
"Requirements files`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:398
msgid "python_requires"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:400
msgid ""
"If your project only runs on certain Python versions, setting the "
"``python_requires`` argument to the appropriate :pep:`440` version "
"specifier string will prevent :ref:`pip` from installing the project on "
"other Python versions.  For example, if your package is for Python 3+ "
"only, write::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:407
msgid ""
"If your package is for Python 2.6, 2.7, and all versions of Python 3 "
"starting with 3.3, write::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:412
msgid "And so on."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:416
msgid ""
"Support for this feature is relatively recent.  Your project's source "
"distributions and wheels (see :ref:`Packaging Your Project`) must be "
"built using at least version 24.2.0 of :ref:`setuptools` in order for the"
" ``python_requires`` argument to be recognized and the appropriate "
"metadata generated."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:422
msgid ""
"In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the "
"``python_requires`` metadata.  Users with earlier versions of pip will be"
" able to download & install projects on any Python version regardless of "
"the projects' ``python_requires`` values."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:431
msgid "package_data"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:440
msgid ""
"Often, additional files need to be installed into a :term:`package "
"<Import Package>`. These files are often data thatâ€™s closely related to "
"the packageâ€™s implementation, or text files containing documentation that"
" might be of interest to programmers using the package. These files are "
"called \"package data\"."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:445
msgid ""
"The value must be a mapping from package name to a list of relative path "
"names that should be copied into the package. The paths are interpreted "
"as relative to the directory containing the package."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:449
msgid ""
"For more information, see :std:doc:`Including Data Files "
"<setuptools:userguide/datafiles>` from the :std:doc:`setuptools docs "
"<setuptools:index>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:457
msgid "data_files"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:463
msgid ""
"Although configuring :ref:`Package Data` is sufficient for most needs, in"
" some cases you may need to place data files *outside* of your "
":term:`packages <Import Package>`.  The ``data_files`` directive allows "
"you to do that. It is mostly useful if you need to install files which "
"are used by other programs, which may be unaware of Python packages."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:469
msgid ""
"Each ``(directory, files)`` pair in the sequence specifies the "
"installation directory and the files to install there. The ``directory`` "
"must be a relative path (although this may change in the future, see "
"`wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_). and it is "
"interpreted relative to the installation prefix (Pythonâ€™s ``sys.prefix`` "
"for a default installation; ``site.USER_BASE`` for a user installation). "
"Each file name in ``files`` is interpreted relative to the "
":file:`setup.py` script at the top of the project source distribution."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:479
msgid ""
"For more information see the distutils section on `Installing Additional "
"Files <http://docs.python.org/3/distutils/setupscript.html#installing-"
"additional-files>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:484
msgid ""
"When installing packages as egg, ``data_files`` is not supported. So, if "
"your project uses :ref:`setuptools`, you must use ``pip`` to install it. "
"Alternatively, if you must use ``python setup.py``, then you need to pass"
" the ``--old-and-unmanageable`` option."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:491
msgid "scripts"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:493
msgid ""
"Although ``setup()`` supports a `scripts "
"<http://docs.python.org/3/distutils/setupscript.html#installing-"
"scripts>`_ keyword for pointing to pre-made scripts to install, the "
"recommended approach to achieve cross-platform compatibility is to use "
":ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:500
msgid "entry_points"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:509
msgid ""
"Use this keyword to specify any plugins that your project provides for "
"any named entry points that may be defined by your project or others that"
" you depend on."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:512
msgid ""
"For more information, see the section on `Advertising Behavior "
"<https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html"
"#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` "
"docs."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:516
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:521
msgid "console_scripts"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:531
msgid ""
"Use \"console_script\" `entry points "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-"
"discovery-of-services-and-plugins>`_ to register your script interfaces. "
"You can then let the toolchain handle the work of turning these "
"interfaces into actual scripts [2]_.  The scripts will be generated "
"during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:538
msgid ""
"For more information, see `Automatic Script Creation "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-"
"script-creation>`_ from the `setuptools docs "
"<https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:545
msgid "Choosing a versioning scheme"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:548
msgid "Standards compliance for interoperability"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:550
msgid ""
"Different Python projects may use different versioning schemes based on "
"the needs of that particular project, but all of them are required to "
"comply with the flexible :pep:`public version scheme <440#public-version-"
"identifiers>` specified in :pep:`440` in order to be supported in tools "
"and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:556
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:567
msgid ""
"To further accommodate historical variations in approaches to version "
"numbering, :pep:`440` also defines a comprehensive technique for "
":pep:`version normalisation <440#normalization>` that maps variant "
"spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:573
msgid "Scheme choices"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:576
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:578
msgid ""
"For new projects, the recommended versioning scheme is based on `Semantic"
" Versioning <http://semver.org>`_, but adopts a different approach to "
"handling pre-releases and build metadata."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:582
msgid ""
"The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE "
"numbering scheme, where the project author increments:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:585
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:586
msgid ""
"MINOR version when they add functionality in a backwards-compatible "
"manner, and"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:587
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:589
msgid ""
"Adopting this approach as a project author allows users to make use of "
":pep:`\"compatible release\" <440#compatible-release>` specifiers, where "
"``name ~= X.Y`` requires at least release X.Y, but also allows any later "
"release with a matching MAJOR version."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:594
msgid ""
"Python projects adopting semantic versioning should abide by clauses 1-8 "
"of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:598
msgid "Date based versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:600
msgid ""
"Semantic versioning is not a suitable choice for all projects, such as "
"those with a regular time based release cadence and a deprecation process"
" that provides warnings for a number of releases prior to removal of a "
"feature."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:604
msgid ""
"A key advantage of date based versioning is that it is straightforward to"
" tell how old the base feature set of a particular release is given just "
"the version number."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:607
msgid ""
"Version numbers for date based projects typically take the form of "
"YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:611
msgid "Serial versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:613
msgid ""
"This is the simplest possible versioning scheme, and consists of a single"
" number which is incremented every release."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:616
msgid ""
"While serial versioning is very easy to manage as a developer, it is the "
"hardest to track as an end user, as serial version numbers convey little "
"or no information regarding API backwards compatibility."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:621
msgid "Hybrid schemes"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:623
msgid ""
"Combinations of the above schemes are possible. For example, a project "
"may combine date based versioning with serial versioning to create a "
"YEAR.SERIAL numbering scheme that readily conveys the approximate age of "
"a release, but doesn't otherwise commit to a particular release cadence "
"within the year."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:629
msgid "Pre-release versioning"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:631
msgid ""
"Regardless of the base versioning scheme, pre-releases for a given final "
"release may be published as:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:634
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:635
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:636
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:637
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:639
msgid ""
"``pip`` and other modern Python package installers ignore pre-releases by"
" default when deciding which versions of dependencies to install."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:644
msgid "Local version identifiers"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:646
msgid ""
"Public version identifiers are designed to support distribution via "
":term:`PyPI <Python Package Index (PyPI)>`. Python's software "
"distribution tools also support the notion of a :pep:`local version "
"identifier <440#local-version-identifiers>`, which can be used to "
"identify local development builds not intended for publication, or "
"modified variants of a release maintained by a redistributor."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:653
msgid ""
"A local version identifier takes the form ``<public version "
"identifier>+<local version label>``. For example::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:661
msgid "Working in \"development mode\""
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:663
msgid ""
"Although not required, it's common to locally install your project in "
"\"editable\" or \"develop\" mode while you're working on it.  This allows"
" your project to be both installed and editable in project form."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:667
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:674
msgid ""
"Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` "
"refers to the current working directory, so together, it means to install"
" the current directory (i.e. your project) in editable mode.  This will "
"also install any dependencies declared with \"install_requires\" and any "
"scripts declared with \"console_scripts\".  Dependencies will be "
"installed in the usual, non-editable mode."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:680
msgid ""
"It's fairly common to also want to install some of your dependencies in "
"editable mode as well. For example, supposing your project requires "
"\"foo\" and \"bar\", but you want \"bar\" installed from VCS in editable "
"mode, then you could construct a requirements file like so::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:688
msgid ""
"The first line says to install your project and any dependencies. The "
"second line overrides the \"bar\" dependency, such that it's fulfilled "
"from VCS, not PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:692
msgid ""
"If, however, you want \"bar\" installed from a local directory in "
"editable mode, the requirements file should look like this, with the "
"local paths at the top of the file::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:697
msgid ""
"Otherwise, the dependency will be fulfilled from PyPI, due to the "
"installation order of the requirements file.  For more on requirements "
"files, see the :ref:`Requirements File <pip:Requirements Files>` section "
"in the pip docs.  For more on VCS installs, see the :ref:`VCS Support "
"<pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:701
msgid ""
"Lastly, if you don't want to install any dependencies at all, you can "
"run::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:706
msgid ""
"For more information, see the `Development Mode "
"<https://setuptools.readthedocs.io/en/latest/setuptools.html#development-"
"mode>`_ section of the `setuptools docs "
"<https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:713
msgid "Packaging your project"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:715
msgid ""
"To have your project installable from a :term:`Package Index` like "
":term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a "
":term:`Distribution <Distribution Package>` (aka \":term:`Package "
"<Distribution Package>`\") for your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:720
msgid ""
"Before you can build wheels and sdists for your project, you'll need to "
"install the ``build`` package:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:737
msgid "Source distributions"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:739
msgid ""
"Minimally, you should create a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>`:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:755
msgid ""
"A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built "
"Distribution`), and requires a build step when installed by pip.  Even if"
" the distribution is pure Python (i.e. contains no extensions), it still "
"involves a build step to build out the installation metadata from "
":file:`setup.py` and/or :file:`setup.cfg`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:763
msgid "Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:765
msgid ""
"You should also create a wheel for your project. A wheel is a "
":term:`built package <Built Distribution>` that can be installed without "
"needing to go through the \"build\" process. Installing wheels is "
"substantially faster for the end user than installing from a source "
"distribution."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:770
msgid ""
"If your project is pure Python then you'll be creating a :ref:`\"Pure "
"Python Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:773
msgid ""
"If your project contains compiled extensions, then you'll be creating "
"what's called a :ref:`*Platform Wheel* (see section below) <Platform "
"Wheels>`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:776
msgid ""
"If your project also supports Python 2 *and* contains no C extensions, "
"then you should create what's called a *Universal Wheel* by adding the "
"following to your :file:`setup.cfg` file:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:785
msgid ""
"Only use this setting if your project does not have any C extensions "
"*and* supports Python 2 and 3."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:792
msgid "Pure Python Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:794
msgid ""
"*Pure Python Wheels* contain no compiled extensions, and therefore only "
"require a single Python wheel."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:797
#: ../../guides/distributing-packages-using-setuptools.rst:826
msgid "To build the wheel:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:811
msgid ""
"The ``wheel`` package will detect that the code is pure Python, and build"
" a wheel that's named such that it's usable on any Python 3 installation."
"  For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:815
msgid ""
"If you run ``build`` without ``--wheel`` or ``--sdist``, it will build "
"both files for you; this is useful when you don't need multiple wheels."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:821
msgid "Platform Wheels"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:823
msgid ""
"*Platform Wheels* are wheels that are specific to a certain platform like"
" Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:841
msgid ""
"The ``wheel`` package will detect that the code is not pure Python, and "
"build a wheel that's named such that it's only usable on the platform "
"that it was built on. For details on the naming of wheel files, see "
":pep:`425`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:847
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of "
"platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` "
"ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:855
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:857
msgid ""
"When you ran the command to create your distribution, a new directory "
"``dist/`` was created under your project's root directory. That's where "
"you'll find your distribution file(s) to upload."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:861
msgid ""
"These files are only created when you run the command to create your "
"distribution. This means that any time you change the source of your "
"project or the configuration in your :file:`setup.py` file, you will need"
" to rebuild these files again before you can distribute the changes to "
"PyPI."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:866
msgid ""
"Before releasing on main PyPI repo, you might prefer training with the "
"`PyPI test site <https://test.pypi.org/>`_ which is cleaned on a semi "
"regular basis. See :ref:`using-test-pypi` on how to setup your "
"configuration in order to use it."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:871
msgid ""
"In other resources you may encounter references to using ``python "
"setup.py register`` and ``python setup.py upload``. These methods of "
"registering and uploading a package are **strongly discouraged** as it "
"may use a plaintext HTTP or unverified HTTPS connection on some Python "
"versions, allowing your username and password to be intercepted during "
"transmission."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:877
msgid ""
"The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, "
"to ensure safety of all users, certain kinds of URLs and directives are "
"forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** "
"trying to upload your distribution, you should check to see if your brief"
" / long descriptions provided in :file:`setup.py` are valid.  You can do "
"this by running :std:doc:`twine check <index>` on your package files::"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:888
msgid "Create an account"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:890
msgid ""
"First, you need a :term:`PyPI <Python Package Index (PyPI)>` user "
"account. You can create an account `using the form on the PyPI website "
"<https://pypi.org/account/register/>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:894
msgid ""
"Now you'll create a PyPI `API token`_ so you will be able to securely "
"upload your project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:897
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_; don't limit its scope to a particular project, since you are "
"creating a new project."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:901
msgid ""
"**Don't close the page until you have copied and saved the token â€” you "
"won't see that token again.**"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:904
msgid ""
"To avoid having to copy and paste the token every time you upload, you "
"can create a :file:`$HOME/.pypirc` file:"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:913
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:915
#: ../../guides/migrating-to-pypi-org.rst:70
#: ../../guides/migrating-to-pypi-org.rst:109
#: ../../guides/using-testpypi.rst:83
msgid ""
"For more details, see the :ref:`specification <pypirc>` for "
":file:`.pypirc`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:921
msgid "Upload your distributions"
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:923
msgid ""
"Once you have an account you can upload your distributions to :term:`PyPI"
" <Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:926
msgid ""
"The process for uploading a release is the same regardless of whether or "
"not the project already exists on PyPI - if it doesn't exist yet, it will"
" be automatically created when the first release is uploaded."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:930
msgid ""
"For the second and subsequent releases, PyPI only requires that the "
"version number of the new release differ from any previous releases."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:937
msgid ""
"You can see if your package has successfully uploaded by navigating to "
"the URL ``https://pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may "
"take a minute or two for your project to appear on the site."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:944
msgid ""
"Depending on your platform, this may require root or Administrator "
"access. :ref:`pip` is currently considering changing this by `making user"
" installs the default behavior "
"<https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../../guides/distributing-packages-using-setuptools.rst:950
msgid ""
"Specifically, the \"console_script\" approach generates ``.exe`` files on"
" Windows, which are necessary because the OS special-cases ``.exe`` "
"files. Script-execution features like ``PATHEXT`` and the :pep:`Python "
"Launcher for Windows <397>` allow scripts to be used in many cases, but "
"not all."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:5
msgid "Dropping support for older Python versions"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:7
msgid ""
"Dropping support for older Python versions is supported by the standard "
":ref:`core-metadata` 1.2 specification via a \"Requires-Python\" "
"attribute."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:9
msgid ""
"Metadata 1.2+ clients, such as Pip 9.0+, will adhere to this "
"specification by matching the current Python runtime and comparing it "
"with the required version in the package metadata. If they do not match, "
"it will attempt to install the last package distribution that supported "
"that Python runtime."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:12
msgid ""
"This mechanism can be used to drop support for older Python versions, by "
"amending the \"Requires-Python\" attribute in the package metadata."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:14
msgid ""
"This guide is specifically for users of :ref:`setuptools`, other "
"packaging tools such as ``flit`` may offer similar functionality but "
"users will need to consult relevant documentation."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:17
msgid "Requirements"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:19
msgid "This workflow requires that:"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:21
msgid "The publisher is using the latest version of :ref:`setuptools`,"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:22
msgid "The latest version of :ref:`twine` is used to upload the package,"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:23
msgid ""
"The user installing the package has at least Pip 9.0, or a client that "
"supports the Metadata 1.2 specification."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:26
msgid "Dealing with the universal wheels"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:28
msgid ""
"Traditionally, projects providing Python code that is semantically "
"compatible with both Python 2 and Python 3, produce :term:`wheels "
"<Wheel>` that have a ``py2.py3`` tag in their names. When dropping "
"support for Python 2, it is important not to forget to change this tag to"
" just ``py3``. It is often configured within :file:`setup.cfg` under the "
"``[bdist_wheel]`` section by setting ``universal = 1`` if they use "
"setuptools."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:36
msgid ""
"If you use this method, either remove this option or section, or "
"explicitly set ``universal`` to ``0``:"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:48
msgid ""
"Since it is possible to override the :file:`setup.cfg` settings via CLI "
"flags, make sure that your scripts don't have ``--universal`` in your "
"package creation scripts."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:53
msgid "Defining the Python version required"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:56
msgid "1. Download the newest version of Setuptools"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:58
msgid ""
"Ensure that before you generate source distributions or binary "
"distributions, you update Setuptools and install twine."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:60
msgid "Steps:"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:74
msgid "`setuptools` version should be above 24.0.0."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:77
msgid "2. Specify the version ranges for supported Python distributions"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:79
msgid ""
"You can specify version ranges and exclusion rules, such as at least "
"Python 3. Or, Python 2.7, 3.4 and beyond."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:81
msgid "Examples::"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:86
msgid ""
"The way to set those values is within the call to ``setup`` within your "
":file:`setup.py` script. This will insert the ``Requires-Python`` "
"metadata values based on the argument you provide in ``python_requires``."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:101
msgid "3. Validating the Metadata before publishing"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:103
msgid ""
"Within a Python source package (the zip or the tar-gz file you download) "
"is a text file called PKG-INFO."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:105
msgid ""
"This file is generated by Distutils or :ref:`setuptools` when it "
"generates the source package. The file contains a set of keys and values,"
" the list of keys is part of the PyPa standard metadata format."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:108
msgid "You can see the contents of the generated file like this::"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:112
msgid "Validate that the following is in place, before publishing the package:"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:114
msgid ""
"If you have upgraded correctly, the Metadata-Version value should be 1.2 "
"or higher."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:115
msgid ""
"The Requires-Python field is set and matches your specification in "
"setup.py."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:118
msgid "4. Using Twine to publish"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:120
msgid ""
"Twine has a number of advantages, apart from being faster it is now the "
"supported method for publishing packages."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:122
msgid "Make sure you are using the newest version of Twine, at least 1.9."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:125
msgid "Dropping a Python release"
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:127
msgid ""
"Once you have published a package with the Requires-Python metadata, you "
"can then make a further update removing that Python runtime from support."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:129
msgid "It must be done in this order for the automated fallback to work."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:131
msgid ""
"For example, you published the Requires-Python: \">=2.7\" as version "
"1.0.0 of your package."
msgstr ""

#: ../../guides/dropping-older-python-versions.rst:133
msgid ""
"If you were then to update the version string to \">=3.5\", and publish a"
" new version 2.0.0 of your package, any users running Pip 9.0+ from "
"version 2.7 will have version 1.0.0 of the package installed, and any "
">=3.5 users will receive version 2.0.0."
msgstr ""

#: ../../guides/hosting-your-own-index.rst:5
msgid "Hosting your own simple repository"
msgstr ""

#: ../../guides/hosting-your-own-index.rst:8
msgid ""
"If you wish to host your own simple repository [1]_, you can either use a"
" software package like `devpi`_ or you can use simply create the proper "
"directory structure and use any web server that can serve static files "
"and generate an autoindex."
msgstr ""

#: ../../guides/hosting-your-own-index.rst:13
msgid ""
"In either case, since you'll be hosting a repository that is likely not "
"in your user's default repositories, you should instruct them in your "
"project's description to configure their installer appropriately. For "
"example with pip:"
msgstr ""

#: ../../guides/hosting-your-own-index.rst:29
msgid ""
"In addition, it is **highly** recommended that you serve your repository "
"with valid HTTPS. At this time, the security of your user's installations"
" depends on all repositories using a valid HTTPS setup."
msgstr ""

#: ../../guides/hosting-your-own-index.rst:35
msgid "\"Manual\" repository"
msgstr ""

#: ../../guides/hosting-your-own-index.rst:37
msgid ""
"The directory layout is fairly simple, within a root directory you need "
"to create a directory for each project. This directory should be the "
"normalized name (as defined by :pep:`503`) of the project. Within each of"
" these directories simply place each of the downloadable files. If you "
"have the projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" "
"(with the version 0.1) You should end up with a structure that looks "
"like::"
msgstr ""

#: ../../guides/hosting-your-own-index.rst:51
msgid ""
"Once you have this layout, simply configure your webserver to serve the "
"root directory with autoindex enabled. For an example using the built in "
"Web server in `Twisted`_, you would simply run ``twistd -n web --path .``"
" and then instruct users to add the URL to their installer's "
"configuration."
msgstr ""

#: ../../guides/hosting-your-own-index.rst:58
msgid ""
"For complete documentation of the simple repository protocol, see "
":pep:`503`."
msgstr ""

#: ../../guides/index.rst:8
msgid "Installing Packages:"
msgstr ""

#: ../../guides/index.rst:20
msgid "Building and Publishing Projects:"
msgstr ""

#: ../../guides/index.rst:38
msgid "Miscellaneous:"
msgstr ""

#: ../../guides/index.rst:2
msgid "Guides"
msgstr ""

#: ../../guides/index.rst:4
msgid ""
"**Guides** are focused on accomplishing a specific task and assume that "
"you are already familiar with the basics of Python packaging. If you're "
"looking for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:5
msgid "Package index mirrors and caches"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst
#: ../../guides/installing-using-linux-tools.rst
#: ../../guides/packaging-binary-extensions.rst
#: ../../guides/supporting-multiple-python-versions.rst
#: ../../guides/supporting-windows-using-appveyor.rst
msgid "Page Status"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:7
#: ../../guides/installing-using-linux-tools.rst:7
#: ../../guides/packaging-binary-extensions.rst:7
#: ../../guides/supporting-multiple-python-versions.rst:7
#: ../../guides/supporting-windows-using-appveyor.rst:5
msgid "Incomplete"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst
#: ../../guides/installing-using-linux-tools.rst
#: ../../guides/packaging-binary-extensions.rst
#: ../../guides/supporting-multiple-python-versions.rst
#: ../../guides/supporting-windows-using-appveyor.rst
msgid "Last Reviewed"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:8
#: ../../guides/supporting-multiple-python-versions.rst:8
msgid "2014-12-24"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:14
msgid ""
"Mirroring or caching of PyPI can be used to speed up local package "
"installation, allow offline work, handle corporate firewalls or just "
"plain Internet flakiness."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:17
msgid "Three options are available in this area:"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:19
msgid "pip provides local caching options,"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:20
msgid ""
"devpi provides higher-level caching option, potentially shared amongst "
"many users or machines, and"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:22
msgid ""
"bandersnatch provides a local complete mirror of all PyPI :term:`packages"
" <Distribution Package>`."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:27
msgid "Caching with pip"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:29
msgid ""
"pip provides a number of facilities for speeding up installation by using"
" local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:32
msgid ""
"`Fast & local installs <https://pip.pypa.io/en/latest/user_guide"
"/#installing-from-local-packages>`_ by downloading all the requirements "
"for a project and then pointing pip at those downloaded files instead of "
"going to PyPI."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:36
msgid ""
"A variation on the above which pre-builds the installation files for the "
"requirements using `python -m pip wheel "
"<https://pip.readthedocs.io/en/latest/reference/pip_wheel.html>`_::"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:45
msgid "Caching with devpi"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:47
msgid ""
"devpi is a caching proxy server which you run on your laptop, or some "
"other machine you know will always be available to you. See the `devpi "
"documentation for getting started`__."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:55
msgid "Complete mirror with bandersnatch"
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:57
msgid ""
"bandersnatch will set up a complete local mirror of all PyPI "
":term:`packages <Distribution Package>` (externally-hosted packages are "
"not mirrored). See the `bandersnatch documentation for getting that "
"going`__."
msgstr ""

#: ../../guides/index-mirrors-and-caches.rst:63
msgid ""
"A benefit of devpi is that it will create a mirror which includes "
":term:`packages <Distribution Package>` that are external to PyPI, unlike"
" bandersnatch which will only cache :term:`packages <Distribution "
"Package>` hosted on PyPI."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:5
msgid "Installing scientific packages"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:11
msgid ""
"Scientific software tends to have more complex dependencies than most, "
"and it will often have multiple build options to take advantage of "
"different kinds of hardware, or to interoperate with different pieces of "
"external software."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:16
msgid ""
"In particular, `NumPy <http://www.numpy.org/>`__, which provides the "
"basis for most of the software in the `scientific Python stack "
"<http://www.scipy.org/stackspec.html#stackspec>`__ can be configured to "
"interoperate with different FORTRAN libraries, and can take advantage of "
"different levels of vectorised instructions available in modern CPUs."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:22
msgid ""
"Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-"
"built 32-bit and 64-bit binaries in the ``wheel`` format are available "
"for all major operating systems (Windows, macOS, and Linux) on PyPI. "
"Note, however, that on Windows, NumPy binaries are linked against the "
"`ATLAS <http://www.netlib.org/atlas/>`__ BLAS/LAPACK library, restricted "
"to SSE2 instructions, so they may not provide optimal linear algebra "
"performance."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:29
msgid ""
"There are a number of alternative options for obtaining scientific Python"
" libraries (or any other Python libraries that require a compilation "
"environment to install from source and don't provide pre-built wheel "
"files on PyPI)."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:35
msgid "Building from source"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:37
msgid ""
"The same complexity which makes it difficult to distribute NumPy (and "
"many of the projects that depend on it) as wheel files also make them "
"difficult to build from source yourself. However, for intrepid folks that"
" are willing to spend the time wrangling compilers and linkers for both C"
" and FORTRAN, building from source is always an option."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:45
msgid "Linux distribution packages"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:47
msgid ""
"For Linux users, the system package manager will often have pre-compiled "
"versions of various pieces of scientific software, including NumPy and "
"other parts of the scientific Python stack."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:51
msgid ""
"If using versions which may be several months old is acceptable, then "
"this is likely to be a good option (just make sure to allow access to "
"distributions installed into the system Python when using virtual "
"environments)."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:57
msgid "Windows installers"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:59
msgid ""
"Many Python projects that don't (or can't) currently publish wheel files "
"at least publish Windows installers, either on PyPI or on their project "
"download page. Using these installers allows users to avoid the need to "
"set up a suitable environment to build extensions locally."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:64
msgid ""
"The extensions provided in these installers are typically compatible with"
" the CPython Windows installers published on python.org."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:67
msgid ""
"For projects which don't provide their own Windows installers (and even "
"some which do), Christoph Gohlke at the University of California provides"
" a `collection of Windows installers "
"<http://www.lfd.uci.edu/~gohlke/pythonlibs/>`__. Many Python users on "
"Windows have reported a positive experience with these prebuilt versions."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:73
msgid ""
"As with Linux system packages, the Windows installers will only install "
"into a system Python installation - they do not support installation in "
"virtual environments. Allowing access to distributions installed into the"
" system Python when using virtual environments is a common approach to "
"working around this limitation."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:79
msgid ""
"The :term:`Wheel` project also provides a :command:`wheel convert` "
"subcommand that can convert a Windows :command:`bdist_wininst` installer "
"to a wheel."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:86
msgid "macOS installers and package managers"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:88
msgid ""
"Similar to the situation on Windows, many projects (including NumPy) "
"publish macOS installers that are compatible with the macOS CPython "
"binaries published on python.org."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:92
msgid ""
"macOS users also have access to Linux distribution style package managers"
" such as ``MacPorts``. The SciPy site has more details on using MacPorts "
"to install the `scientific Python stack "
"<http://www.scipy.org/install.html#mac-packages>`__"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:99
msgid "SciPy distributions"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:101
msgid ""
"The SciPy site lists `several distributions "
"<http://www.scipy.org/install.html>`__ that provide the full SciPy stack "
"to end users in an easy to use and update format."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:105
msgid ""
"Some of these distributions may not be compatible with the standard "
"``pip`` and ``virtualenv`` based toolchain."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:109
msgid "Spack"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:110
msgid ""
"`Spack <https://github.com/LLNL/spack/>`_ is a flexible package manager "
"designed to support multiple versions, configurations, platforms, and "
"compilers. It was built to support the needs of large supercomputing "
"centers and scientific application teams, who must often build software "
"many different ways. Spack is not limited to Python; it can install "
"packages for ``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It"
" is non-destructive; installing a new version of one package does not "
"break existing installations, so many configurations can coexist on the "
"same system."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:119
msgid ""
"Spack offers a simple but powerful syntax that allows users to specify "
"versions and configuration options concisely. Package files are written "
"in pure Python, and they are templated so that it is easy to swap "
"compilers, dependency implementations (like MPI), versions, and build "
"options with a single package file.  Spack also generates *module* files "
"so that packages can be loaded and unloaded from the user's environment."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:128
msgid "The conda cross-platform package manager"
msgstr ""

#: ../../guides/installing-scientific-packages.rst:130
msgid ""
"`Anaconda <https://www.anaconda.com/download/>`_ is a Python distribution"
" published by Anaconda, Inc. It is a stable collection of Open Source "
"packages for big data and scientific use.  As of the 5.0 release of "
"Anaconda, about 200 packages are installed by default, and a total of "
"400-500 can be installed and updated from the Anaconda repository."
msgstr ""

#: ../../guides/installing-scientific-packages.rst:136
msgid ""
"``conda`` is an open source (BSD licensed) package management system and "
"environment management system included in Anaconda that allows users to "
"install multiple versions of binary software packages and their "
"dependencies, and easily switch between them. It is a cross-platform tool"
" working on Windows, macOS, and Linux. Conda can be used to package up "
"and distribute all kinds of packages, it is not limited to just Python "
"packages. It has full support for native virtual environments. Conda "
"makes environments first-class citizens, making it easy to create "
"independent environments even for C libraries. It is written in Python, "
"but is Python-agnostic. Conda manages Python itself as a package, so that"
" :command:`conda update python` is possible, in contrast to pip, which "
"only manages Python packages. Conda is available in Anaconda and "
"Miniconda (an easy-to-install download with just Python and conda)."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:2
msgid "Installing stand alone command line tools"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:4
msgid ""
"Many packages have command line entry points. Examples of this type of "
"application are `mypy <https://github.com/python/mypy>`_, `flake8 "
"<https://github.com/PyCQA/flake8>`_, `pipenv "
"<https://github.com/pypa/pipenv>`_,and `black "
"<https://github.com/ambv/black>`_."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:10
msgid ""
"Usually you want to be able to access these from anywhere, but installing"
" packages and their dependencies to the same global environment can cause"
" version conflicts and break dependencies the operating system has on "
"Python packages."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:15
msgid ""
"`pipx <https://github.com/pipxproject/pipx>`_ solves this by creating a "
"virtual environment for each package, while also ensuring that package's "
"applications are accessible through a directory that is on your "
"``$PATH``. This allows each package to be upgraded or uninstalled without"
" causing conflicts with other packages, and allows you to safely run the "
"program from anywhere."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:21
msgid "pipx only works with Python 3.6+."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:23
msgid "``pipx`` is installed with ``pip``:"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:30
msgid "You may need to restart your terminal for the path updates to take effect."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:32
msgid ""
"Now you can install packages with ``pipx install`` and access the "
"package's entry point(s) from anywhere."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:39
#: ../../guides/installing-stand-alone-command-line-tools.rst:100
msgid "For example"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:59
msgid ""
"To see a list of packages installed with pipx and which CLI applications "
"are available, use ``pipx list``."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:79
msgid "To upgrade or uninstall the package"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:86
msgid "``pipx`` can be upgraded or uninstalled with pip"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:93
msgid ""
"``pipx`` also allows you to install and run the latest version of a cli "
"tool in a temporary, ephemeral environment."
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:106
msgid "To see the full list of commands ``pipx`` offers, run"
msgstr ""

#: ../../guides/installing-stand-alone-command-line-tools.rst:112
msgid ""
"You can learn more about ``pipx`` at its homepage, "
"https://github.com/pipxproject/pipx."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:5
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:8
msgid "2015-09-17"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:11
msgid ""
"This section covers how to install :ref:`pip`, :ref:`setuptools`, and "
":ref:`wheel` using Linux package managers."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:14
msgid ""
"If you're using a Python that was downloaded from `python.org "
"<https://www.python.org>`_, then this section does not apply.  See the "
":ref:`installing_requirements` section instead."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:18
msgid ""
"Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, "
"and :ref:`wheel` supported by a specific Linux Distribution to be "
"outdated by the time it's released to the public, and updates generally "
"only occur for security reasons, not for feature updates.  For certain "
"Distributions, there are additional repositories that can be enabled to "
"provide newer versions.  The repositories we know about are explained "
"below."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:25
msgid ""
"Also note that it's somewhat common for Distributions to apply patches "
"for the sake of security and normalization to their own standards.  In "
"some cases, this can lead to bugs or unexpected behaviors that vary from "
"the original unpatched versions.  When this is known, we will make note "
"of it below."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:32
msgid "Fedora"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:34
msgid "Fedora 21:"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:36
#: ../../guides/installing-using-linux-tools.rst:45
#: ../../guides/installing-using-linux-tools.rst:124
#: ../../guides/installing-using-linux-tools.rst:138
#: ../../guides/installing-using-linux-tools.rst:158
msgid "Python 2::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:41
msgid "Python 3: ``sudo yum install python3 python3-wheel``"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:43
msgid "Fedora 22:"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:50
msgid "Python 3: ``sudo dnf install python3 python3-wheel``"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:53
msgid ""
"To get newer versions of pip, setuptools, and wheel for Python 2, you can"
" enable the `PyPA Copr Repo "
"<https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using the `Copr Repo "
"instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__, and"
" then run::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:63
msgid "CentOS/RHEL"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:65
msgid ""
"CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core "
"repositories, although :ref:`setuptools` is installed by default."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:68
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:70
msgid ""
"Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using"
" `these instructions "
"<https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F>`__."
" On EPEL 6 and EPEL7, you can install pip like so::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:77
msgid "On EPEL 7 (but not EPEL 6), you can install wheel like so::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:81
msgid ""
"Since EPEL only offers extra, non-conflicting packages, EPEL does not "
"offer setuptools, since it's in the core repository."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:85
msgid ""
"Enable the `PyPA Copr Repo "
"<https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using `these "
"instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__ "
"[1]_. You can install pip and wheel like so::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:92
msgid "To additionally upgrade setuptools, run::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:97
msgid ""
"To install pip, wheel, and setuptools, in a parallel, non-system "
"environment (using yum) then there are two options:"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:101
msgid ""
"Use the \"Software Collections\" feature to enable a parallel collection "
"that includes pip, setuptools, and wheel."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:104
msgid ""
"For Redhat, see here: "
"http://developers.redhat.com/products/softwarecollections/overview/"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:106
msgid "For CentOS, see here: https://www.softwarecollections.org/en/"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:108
msgid "Be aware that collections may not contain the most recent versions."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:110
msgid ""
"Enable the `IUS repository <https://ius.io/GettingStarted/>`_ and install"
" one of the `parallel-installable <https://ius.io/SafeRepo/#parallel-"
"installable-package>`_ Pythons, along with pip, setuptools, and wheel, "
"which are kept fairly up to date."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:116
msgid "For example, for Python 3.4 on CentOS7/RHEL7::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:122
msgid "openSUSE"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:129
#: ../../guides/installing-using-linux-tools.rst:143
#: ../../guides/installing-using-linux-tools.rst:162
msgid "Python 3::"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:135
msgid "Debian/Ubuntu"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:150
msgid ""
"Recent Debian/Ubuntu versions have modified pip to use the `\"User "
"Scheme\" <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by "
"default, which is a significant behavior change that can be surprising to"
" some users."
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:156
msgid "Arch Linux"
msgstr ""

#: ../../guides/installing-using-linux-tools.rst:168
msgid ""
"Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so "
"the only option is to manually place the repo files as described."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:2
msgid "Installing packages using pip and virtual environments"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:4
msgid ""
"This guide discusses how to install packages using :ref:`pip` and a "
"virtual environment manager: either :ref:`venv` for Python 3 or "
":ref:`virtualenv` for Python 2. These are the lowest-level tools for "
"managing Python packages and are recommended if higher-level tools do not"
" suit your needs."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:9
msgid ""
"This doc uses the term **package** to refer to a :term:`Distribution "
"Package`  which is different from an :term:`Import Package` that which is"
" used to import modules in your Python source code."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:15
msgid "Installing pip"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:17
msgid ""
":ref:`pip` is the reference Python package manager. It's used to install "
"and update packages. You'll need to make sure you have the latest version"
" of pip installed."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:23
msgid "Windows"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:25
msgid ""
"The Python installers for Windows include pip. You should be able to "
"access pip using:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:33
msgid "You can make sure that pip is up-to-date by running:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:41
msgid "Linux and macOS"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:43
msgid ""
"Debian and most other distributions include a `python-pip`_ package, if "
"you want to use the Linux distribution-provided versions of pip see "
":doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:47
msgid ""
"You can also install pip yourself to ensure you have the latest version. "
"It's recommended to use the system pip to bootstrap a user installation "
"of pip:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:54
msgid "Afterwards, you should have the newest pip installed in your user site:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:65
msgid "Installing virtualenv"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:67
msgid ""
"If you are using Python 3.3 or newer, the :mod:`venv` module is the "
"preferred way to create and manage virtual environments. venv is included"
" in the Python standard library and requires no additional installation. "
"If you are using venv, you may skip this section."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:73
msgid ""
":ref:`virtualenv` is used to manage Python packages for different "
"projects. Using virtualenv allows you to avoid installing Python packages"
" globally which could break system tools or other projects. You can "
"install virtualenv using pip."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:78
#: ../../guides/installing-using-pip-and-virtual-environments.rst:108
#: ../../guides/installing-using-pip-and-virtual-environments.rst:137
#: ../../guides/installing-using-pip-and-virtual-environments.rst:150
msgid "On macOS and Linux:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:84
#: ../../guides/installing-using-pip-and-virtual-environments.rst:114
#: ../../guides/installing-using-pip-and-virtual-environments.rst:157
msgid "On Windows:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:93
msgid "Creating a virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:95
msgid ""
":ref:`venv` (for Python 3) and :ref:`virtualenv` (for Python 2) allow you"
" to manage separate package installations for different projects. They "
"essentially allow you to create a \"virtual\" isolated Python "
"installation and install packages into that virtual installation. When "
"you switch projects, you can simply create a new virtual environment and "
"not have to worry about breaking the packages installed in the other "
"environments. It is always recommended to use a virtual environment while"
" developing Python applications."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:104
msgid ""
"To create a virtual environment, go to your project's directory and run "
"venv. If you are using Python 2, replace ``venv`` with ``virtualenv`` in "
"the below commands."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:120
msgid ""
"The second argument is the location to create the virtual environment. "
"Generally, you can just create this in your project and call it ``env``."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:123
msgid "venv will create a virtual Python installation in the ``env`` folder."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:125
msgid ""
"You should exclude your virtual environment directory from your version "
"control system using ``.gitignore`` or similar."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:130
msgid "Activating a virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:132
msgid ""
"Before you can start installing or using packages in your virtual "
"environment you'll need to *activate* it. Activating a virtual "
"environment will put the virtual environment-specific ``python`` and "
"``pip`` executables into your shell's ``PATH``."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:143
msgid "On Windows::"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:147
msgid ""
"You can confirm you're in the virtual environment by checking the "
"location of your Python interpreter, it should point to the ``env`` "
"directory."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:165
msgid ""
"As long as your virtual environment is activated pip will install "
"packages into that specific environment and you'll be able to import and "
"use packages in your Python application."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:171
msgid "Leaving the virtual environment"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:173
msgid ""
"If you want to switch projects or otherwise leave your virtual "
"environment, simply run:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:179
msgid ""
"If you want to re-enter the virtual environment just follow the same "
"instructions above about activating a virtual environment. There's no "
"need to re-create the virtual environment."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:184
msgid "Installing packages"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:186
msgid ""
"Now that you're in your virtual environment you can install packages. "
"Let's install the `Requests`_ library from the :term:`Python Package "
"Index (PyPI)`:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:201
msgid "pip should download requests and all of its dependencies and install them:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:222
msgid "Installing specific versions"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:224
msgid ""
"pip allows you to specify which version of a package to install using "
":term:`version specifiers <Version Specifier>`. For example, to install a"
" specific version of ``requests``:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:240
msgid "To install the latest ``2.x`` release of requests:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:254
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:270
msgid "Installing extras"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:272
msgid ""
"Some packages have optional `extras`_. You can tell pip to install these "
"by specifying the extra in brackets:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:292
msgid "Installing from source"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:294
msgid "pip can install a package directly from source, for example:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:310
msgid ""
"Additionally, pip can install packages from source in `development "
"mode`_, meaning that changes to the source directory will immediately "
"affect the installed package without needing to re-install:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:331
msgid "Installing from version control systems"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:333
msgid ""
"pip can install packages directly from their version control system. For "
"example, you can install directly from a git repository:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:340
msgid ""
"For more information on supported version control systems and syntax, see"
" pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:345
msgid "Installing from local archives"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:347
msgid ""
"If you have a local copy of a :term:`Distribution Package`'s archive (a "
"zip, wheel, or tar file) you can install it directly with pip:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:362
msgid ""
"If you have a directory containing archives of multiple packages, you can"
" tell pip to look for packages there and not to use the :term:`Python "
"Package Index (PyPI)` at all:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:378
msgid ""
"This is useful if you are installing packages on a system with limited "
"connectivity or if you want to strictly control the origin of "
"distribution packages."
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:384
msgid "Using other package indexes"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:386
msgid ""
"If you want to download packages from a different index than the "
":term:`Python Package Index (PyPI)`, you can use the ``--index-url`` "
"flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:401
msgid ""
"If you want to allow packages from both the :term:`Python Package Index "
"(PyPI)` and a separate index, you can use the ``--extra-index-url`` flag "
"instead:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:418
msgid "Upgrading packages"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:420
msgid ""
"pip can upgrade packages in-place using the ``--upgrade`` flag. For "
"example, to install the latest version of ``requests`` and all of its "
"dependencies:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:436
msgid "Using requirements files"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:438
msgid ""
"Instead of installing packages individually, pip allows you to declare "
"all dependencies in a :ref:`Requirements File <pip:Requirements Files>`. "
"For example you could create a :file:`requirements.txt` file containing:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:447
msgid ""
"And tell pip to install all of the packages in this file using the ``-r``"
" flag:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:462
msgid "Freezing dependencies"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:464
msgid ""
"Pip can export a list of all installed packages and their versions using "
"the ``freeze`` command:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:479
msgid "Which will output a list of package specifiers such as:"
msgstr ""

#: ../../guides/installing-using-pip-and-virtual-environments.rst:495
msgid ""
"This is useful for creating :ref:`pip:Requirements Files` that can re-"
"create the exact versions of all packages installed in an environment."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:2
msgid "Making a PyPI-friendly README"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:4
msgid ""
"README files can help your users understand your project and can be used "
"to set your project's description on PyPI. This guide helps you create a "
"README in a PyPI-friendly format and include your README in your package "
"so it appears on PyPI."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:9
msgid "Creating a README file"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:11
msgid ""
"README files for Python projects are often named ``README``, "
"``README.txt``, ``README.rst``, or ``README.md``."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:13
msgid ""
"For your README to display properly on PyPI, choose a markup language "
"supported by PyPI. Formats supported by `PyPI's README renderer "
"<https://github.com/pypa/readme_renderer>`_ are:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:16
msgid "plain text"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:17
msgid ""
"`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ (without "
"Sphinx extensions)"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:18
msgid ""
"Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by"
" default, or `CommonMark <http://commonmark.org/>`_)"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:21
msgid ""
"It's customary to save your README file in the root of your project, in "
"the same directory as your :file:`setup.py` file."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:25
msgid "Including your README in your package's metadata"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:27
msgid ""
"To include your README's contents as your package description, set your "
"project's ``Description`` and ``Description-Content-Type`` metadata, "
"typically in your project's :file:`setup.py` file."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:33
msgid ":ref:`description-optional`"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:34
msgid ":ref:`description-content-type-optional`"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:36
msgid ""
"For example, to set these values in a package's :file:`setup.py` file, "
"use ``setup()``'s ``long_description`` and "
"``long_description_content_type``."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:39
msgid ""
"Set the value of ``long_description`` to the contents (not the path) of "
"the README file itself. Set the ``long_description_content_type`` to an "
"accepted ``Content-Type``-style value for your README file's markup, such"
" as ``text/plain``, ``text/x-rst`` (for reStructuredText), or "
"``text/markdown``."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:45
msgid ""
"If you're using GitHub-flavored Markdown to write a project's "
"description, ensure you upgrade the following tools:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:60
msgid "The minimum required versions of the respective tools are:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:62
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:63
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:64
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:66
msgid ""
"It's recommended that you use ``twine`` to upload the project's "
"distribution packages:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:72
msgid ""
"For example, see this :file:`setup.py` file, which reads the contents of "
":file:`README.md` as ``long_description`` and identifies the markup as "
"GitHub-flavored Markdown:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:95
msgid "Validating reStructuredText markup"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:97
msgid ""
"If your README is written in reStructuredText, any invalid markup will "
"prevent it from rendering, causing PyPI to instead just show the README's"
" raw source."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:100
msgid ""
"Note that Sphinx extensions used in docstrings, such as `directives and "
"roles <http://www.sphinx-"
"doc.org/en/master/usage/restructuredtext/index.html>`_ (e.g., "
"\"``:py:func:`getattr```\" or \"``:ref:`my-reference-label```\"), are not"
" allowed here and will result in error messages like \"``Error: Unknown "
"interpreted text role \"py:func\".``\"."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:105
msgid "You can check your README for markup errors before uploading as follows:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:107
msgid ""
"Install the latest version of `twine <https://github.com/pypa/twine>`_; "
"version 1.12.0 or higher is required:"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:122
msgid ""
"Build the sdist and wheel for your project as described under "
":ref:`Packaging Your Project`."
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:125
msgid "Run ``twine check`` on the sdist and wheel::"
msgstr ""

#: ../../guides/making-a-pypi-friendly-readme.rst:129
msgid ""
"This command will report any problems rendering your README.  If your "
"markup renders fine, the command will output ``Checking distribution "
"FILENAME: Passed``."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:4
msgid "Migrating to PyPI.org"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:6
msgid ""
":term:`pypi.org` is the new, rewritten version of PyPI that has replaced "
"the legacy PyPI code base. It is the default version of PyPI that people "
"are expected to use. These are the tools and processes that people will "
"need to interact with ``PyPI.org``."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:12
msgid "Publishing releases"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:14
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:16
msgid ""
"Uploads through ``pypi.python.org`` were *switched off* on **July 3, "
"2017**. As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:19
msgid ""
"The recommended way to migrate to PyPI.org for uploading is to ensure "
"that you are using a new enough version of your upload tool."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:22
msgid ""
"The default upload settings switched to ``pypi.org`` in the following "
"versions:"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:24
msgid "``twine`` 1.8.0"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:25
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:26
msgid "Python 2.7.13 (``distutils`` update)"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:27
msgid "Python 3.4.6 (``distutils`` update)"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:28
msgid "Python 3.5.3 (``distutils`` update)"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:29
msgid "Python 3.6.0 (``distutils`` update)"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:31
msgid ""
"In addition to ensuring you're on a new enough version of the tool for "
"the tool's default to have switched, you must also make sure that you "
"have not configured the tool to override its default upload URL. "
"Typically this is configured in a file located at :file:`$HOME/.pypirc`. "
"If you see a file like:"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:48
msgid ""
"Then simply delete the line starting with ``repository`` and you will use"
" your upload tool's default URL."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:51
msgid ""
"If for some reason you're unable to upgrade the version of your tool to a"
" version that defaults to using PyPI.org, then you may edit "
":file:`$HOME/.pypirc` and include the ``repository:`` line, but use the "
"value ``https://upload.pypi.org/legacy/`` instead:"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:67
msgid ""
"(``legacy`` in this URL refers to the fact that this is the new server "
"implementation's emulation of the legacy server implementation's upload "
"API.)"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:73
msgid "Registering package names & metadata"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:75
msgid ""
"Explicit pre-registration of package names with the ``setup.py register``"
" command prior to the first upload is no longer required, and is not "
"currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:79
msgid ""
"As a result, attempting explicit registration after switching to using "
"PyPI.org for uploads will give the following error message::"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:84
msgid ""
"The solution is to skip the registration step, and proceed directly to "
"uploading artifacts."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:89 ../../guides/using-testpypi.rst:5
msgid "Using TestPyPI"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:91
msgid ""
"Legacy TestPyPI (testpypi.python.org) is no longer available; use "
"`test.pypi.org <https://test.pypi.org>`_ instead. If you use TestPyPI, "
"you must update your :file:`$HOME/.pypirc` to handle TestPyPI's new "
"location, by replacing ``https://testpypi.python.org/pypi`` with "
"``https://test.pypi.org/legacy/``, for example:"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:113
msgid "Registering new user accounts"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:115
msgid ""
"In order to help mitigate spam attacks against PyPI, new user "
"registration through ``pypi.python.org`` was *switched off* on **February"
" 20, 2018**. New user registrations at ``pypi.org`` are open."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:121
msgid "Browsing packages"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:123
msgid ""
"While ``pypi.python.org`` is may still be used in links from other PyPA "
"documentation, etc, the default interface for browsing packages is "
"``pypi.org``. The domain pypi.python.org now redirects to pypi.org, and "
"may be disabled sometime in the future."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:130
msgid "Downloading packages"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:132
msgid "``pypi.org`` is the default host for downloading packages."
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:135
msgid "Managing published packages and releases"
msgstr ""

#: ../../guides/migrating-to-pypi-org.rst:137
msgid ""
"``pypi.org`` provides a fully functional interface for logged in users to"
" manage their published packages and releases."
msgstr ""

#: ../../guides/multi-version-installs.rst:5
msgid "Multi-version installs"
msgstr ""

#: ../../guides/multi-version-installs.rst:8
msgid ""
"easy_install allows simultaneous installation of different versions of "
"the same project into a single environment shared by multiple programs "
"which must ``require`` the appropriate version of the project at run time"
" (using ``pkg_resources``)."
msgstr ""

#: ../../guides/multi-version-installs.rst:13
msgid ""
"For many use cases, virtual environments address this need without the "
"complication of the ``require`` directive. However, the advantage of "
"parallel installations within the same environment is that it works for "
"an environment shared by multiple applications, such as the system Python"
" in a Linux distribution."
msgstr ""

#: ../../guides/multi-version-installs.rst:19
msgid ""
"The major limitation of ``pkg_resources`` based parallel installation is "
"that as soon as you import ``pkg_resources`` it locks in the *default* "
"version of everything which is already available on sys.path. This can "
"cause problems, since ``setuptools`` created command line scripts use "
"``pkg_resources`` to find the entry point to execute. This means that, "
"for example, you can't use ``require`` tests invoked through ``nose`` or "
"a WSGI application invoked through ``gunicorn`` if your application needs"
" a non-default version of anything that is available on the standard "
"``sys.path`` - the script wrapper for the main application will lock in "
"the version that is available by default, so the subsequent ``require`` "
"call in your own code fails with a spurious version conflict."
msgstr ""

#: ../../guides/multi-version-installs.rst:31
msgid ""
"This can be worked around by setting all dependencies in "
"``__main__.__requires__`` before importing ``pkg_resources`` for the "
"first time, but that approach does mean that standard command line "
"invocations of the affected tools can't be used - it's necessary to write"
" a custom wrapper script or use ``python -c '<command>'`` to invoke the "
"application's main entry point directly."
msgstr ""

#: ../../guides/multi-version-installs.rst:38
msgid ""
"Refer to the `pkg_resources documentation "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html"
"#workingset-objects>`__ for more details."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:5
msgid "Packaging binary extensions"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:8
msgid "2013-12-08"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:10
msgid ""
"One of the features of the CPython reference interpreter is that, in "
"addition to allowing the execution of Python code, it also exposes a rich"
" C API for use by other software. One of the most common uses of this C "
"API is to create importable C extensions that allow things which aren't "
"always easy to achieve in pure Python code."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:20
msgid "An overview of binary extensions"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:23
msgid "Use cases"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:25
msgid ""
"The typical use cases for binary extensions break down into just three "
"conventional categories:"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:28
msgid ""
"**accelerator modules**: these modules are completely self-contained, and"
" are created solely to run faster than the equivalent pure Python code "
"runs in CPython. Ideally, accelerator modules will always have a pure "
"Python equivalent to use as a fallback if the accelerated version isn't "
"available on a given system. The CPython standard library makes extensive"
" use of accelerator modules. *Example*: When importing ``datetime``, "
"Python falls back to the `datetime.py "
"<https://github.com/python/cpython/blob/master/Lib/datetime.py>`_ module "
"if the C implementation ( `_datetimemodule.c "
"<https://github.com/python/cpython/blob/master/Modules/_datetimemodule.c>`_)"
" is not available."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:39
msgid ""
"**wrapper modules**: these modules are created to expose existing C "
"interfaces to Python code. They may either expose the underlying C "
"interface directly, or else expose a more \"Pythonic\" API that makes use"
" of Python language features to make the API easier to use. The CPython "
"standard library makes extensive use of wrapper modules. *Example*: "
"`functools.py "
"<https://github.com/python/cpython/blob/master/Lib/functools.py>`_ is a "
"Python module wrapper for `_functoolsmodule.c "
"<https://github.com/python/cpython/blob/master/Modules/_functoolsmodule.c>`_."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:47
msgid ""
"**low-level system access**: these modules are created to access lower "
"level features of the CPython runtime, the operating system, or the "
"underlying hardware. Through platform specific code, extension modules "
"may achieve things that aren't possible in pure Python code. A number of "
"CPython standard library modules are written in C in order to access "
"interpreter internals that aren't exposed at the language level. "
"*Example*: ``sys``, which comes from `sysmodule.c "
"<https://github.com/python/cpython/blob/master/Python/sysmodule.c>`_."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:56
msgid ""
"One particularly notable feature of C extensions is that, when they don't"
" need to call back into the interpreter runtime, they can release "
"CPython's global interpreter lock around long-running operations "
"(regardless of whether those operations are CPU or IO bound)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:61
msgid ""
"Not all extension modules will fit neatly into the above categories. The "
"extension modules included with NumPy, for example, span all three use "
"cases - they move inner loops to C for speed reasons, wrap external "
"libraries written in C, FORTRAN and other languages, and use low level "
"system interfaces for both CPython and the underlying operation system to"
" support concurrent execution of vectorised operations and to tightly "
"control the exact memory layout of created objects."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:71
msgid "Disadvantages"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:73
msgid ""
"The main disadvantage of using binary extensions is the fact that it "
"makes subsequent distribution of the software more difficult. One of the "
"advantages of using Python is that it is largely cross platform, and the "
"languages used to write extension modules (typically C or C++, but really"
" any language that can bind to the CPython C API) typically require that "
"custom binaries be created for different platforms."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:80
msgid "This means that binary extensions:"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:82
msgid ""
"require that end users be able to either build them from source, or else "
"that someone publish pre-built binaries for common platforms"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:85
msgid ""
"may not be compatible with different builds of the CPython reference "
"interpreter"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:88
msgid ""
"often will not work correctly with alternative interpreters such as PyPy,"
" IronPython or Jython"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:91
msgid ""
"if handcoded, make maintenance more difficult by requiring that "
"maintainers be familiar not only with Python, but also with the language "
"used to create the binary extension, as well as with the details of the "
"CPython C API."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:96
msgid ""
"if a pure Python fallback implementation is provided, make maintenance "
"more difficult by requiring that changes be implemented in two places, "
"and introducing additional complexity in the test suite to ensure both "
"versions are always executed."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:101
msgid ""
"Another disadvantage of relying on binary extensions is that alternative "
"import mechanisms (such as the ability to import modules directly from "
"zipfiles) often won't work for extension modules (as the dynamic loading "
"mechanisms on most platforms can only load libraries from disk)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:108
msgid "Alternatives to handcoded accelerator modules"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:110
msgid ""
"When extension modules are just being used to make code run faster (after"
" profiling has identified the code where the speed increase is worth "
"additional maintenance effort), a number of other alternatives should "
"also be considered:"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:115
msgid ""
"look for existing optimised alternatives. The CPython standard library "
"includes a number of optimised data structures and algorithms (especially"
" in the builtins and the ``collections`` and ``itertools`` modules). The "
"Python Package Index also offers additional alternatives. Sometimes, the "
"appropriate choice of standard library or third party module can avoid "
"the need to create your own accelerator module."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:122
msgid ""
"for long running applications, the JIT compiled `PyPy interpreter "
"<http://pypy.org/>`__ may offer a suitable alternative to the standard "
"CPython runtime. The main barrier to adopting PyPy is typically reliance "
"on other binary extension modules - while PyPy does emulate the CPython C"
" API, modules that rely on that cause problems for the PyPy JIT, and the "
"emulation layer can often expose latent defects in extension modules that"
" CPython currently tolerates (frequently around reference counting errors"
" - an object having one live reference instead of two often won't break "
"anything, but no references instead of one is a major problem)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:132
msgid ""
"`Cython <http://cython.org/>`__ is a mature static compiler that can "
"compile most Python code to C extension modules. The initial compilation "
"provides some speed increases (by bypassing the CPython interpreter "
"layer), and Cython's optional static typing features can offer additional"
" opportunities for speed increases. Using Cython still has the "
"disadvantage of increasing the complexity of distributing the resulting "
"application, but has the benefit of having a reduced barrier to entry for"
" Python programmers (relative to other languages like C or C++)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:141
msgid ""
"`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members "
"of the scientific Python community, that aims to leverage LLVM to allow "
"selective compilation of pieces of a Python application to native machine"
" code at runtime. It requires that LLVM be available on the system where "
"the code is running, but can provide significant speed increases, "
"especially for operations that are amenable to vectorisation."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:150
msgid "Alternatives to handcoded wrapper modules"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:152
msgid ""
"The C ABI (Application Binary Interface) is a common standard for sharing"
" functionality between multiple applications. One of the strengths of the"
" CPython C API (Application Programming Interface) is allowing Python "
"users to tap into that functionality. However, wrapping modules by hand "
"is quite tedious, so a number of other alternative approaches should be "
"considered."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:158
msgid ""
"The approaches described below don't simplify the distribution case at "
"all, but they *can* significantly reduce the maintenance burden of "
"keeping wrapper modules up to date."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:162
msgid ""
"In addition to being useful for the creation of accelerator modules, "
"`Cython <http://cython.org/>`__ is also useful for creating wrapper "
"modules. It still involves wrapping the interfaces by hand, however, so "
"may not be a good choice for wrapping large APIs."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:167
msgid ""
"`cffi <https://cffi.readthedocs.io/>`__ is a project created by some of "
"the PyPy developers to make it straightforward for developers that "
"already know both Python and C to expose their C modules to Python "
"applications. It also makes it relatively straightforward to wrap a C "
"module based on its header files, even if you don't know C yourself."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:173
msgid ""
"One of the key advantages of ``cffi`` is that it is compatible with the "
"PyPy JIT, allowing CFFI wrapper modules to participate fully in PyPy's "
"tracing JIT optimisations."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:177
msgid ""
"`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that "
"allows a variety of programming languages, including Python, to interface"
" with C *and C++* code."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:181
msgid ""
"The standard library's ``ctypes`` module, while useful for getting access"
" to C level interfaces when header information isn't available, suffers "
"from the fact that it operates solely at the C ABI level, and thus has no"
" automatic consistency checking between the interface actually being "
"exported by the library and the one declared in the Python code. By "
"contrast, the above alternatives are all able to operate at the C *API* "
"level, using C header files to ensure consistency between the interface "
"exported by the library being wrapped and the one expected by the Python "
"wrapper module. While ``cffi`` *can* operate directly at the C ABI level,"
" it suffers from the same interface inconsistency problems as ``ctypes`` "
"when it is used that way."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:195
msgid "Alternatives for low level system access"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:197
msgid ""
"For applications that need low level system access (regardless of the "
"reason), a binary extension module often *is* the best way to go about "
"it. This is particularly true for low level access to the CPython runtime"
" itself, since some operations (like releasing the Global Interpreter "
"Lock) are simply invalid when the interpreter is running code, even if a "
"module like ``ctypes`` or ``cffi`` is used to obtain access to the "
"relevant C API interfaces."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:205
msgid ""
"For cases where the extension module is manipulating the underlying "
"operating system or hardware (rather than the CPython runtime), it may "
"sometimes be better to just write an ordinary C library (or a library in "
"another systems programming language like C++ or Rust that can export a C"
" compatible ABI), and then use one of the wrapping techniques described "
"above to make the interface available as an importable Python module."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:214
msgid "Implementing binary extensions"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:216
msgid ""
"The CPython `Extending and Embedding "
"<https://docs.python.org/3/extending/>`_ guide includes an introduction "
"to writing a `custom extension module in C "
"<https://docs.python.org/3/extending/extending.html>`_."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:233
msgid "Building binary extensions"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:236
msgid "Binary extensions for Windows"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:238
msgid ""
"Before it is possible to build a binary extension, it is necessary to "
"ensure that you have a suitable compiler available. On Windows, Visual C "
"is used to build the official CPython interpreter, and should be used to "
"build compatible binary extensions."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:243
msgid ""
"Python 2.7 used Visual Studio 2008, Python 3.3 and 3.4 used Visual Studio"
" 2010, and Python 3.5+ uses Visual Studio 2015 or later. Unfortunately, "
"older versions of Visual Studio are no longer easily available from "
"Microsoft, so for versions of Python prior to 3.5, the compilers must be "
"obtained differently if you do not already have a copy of the relevant "
"version of Visual Studio."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:249
msgid ""
"To set up a build environment for binary extensions, the steps are as "
"follows:"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:251
msgid "For Python 2.7"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:253
msgid ""
"Install \"Visual C++ Compiler Package for Python 2.7\", which is "
"available from `Microsoft's website <https://www.microsoft.com/en-"
"gb/download/details.aspx?id=44266>`__."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:256
msgid ""
"Use (a recent version of) setuptools in your setup.py (pip will do this "
"for you, in any case)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:258
#: ../../guides/packaging-binary-extensions.rst:268
#: ../../guides/packaging-binary-extensions.rst:275
msgid "Done."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:260
msgid "For Python 3.4"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:262
msgid ""
"Install \"Windows SDK for Windows 7 and .NET Framework 4\" (v7.1), which "
"is available from `Microsoft's website <https://www.microsoft.com/en-"
"gb/download/details.aspx?id=8279>`__."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:265
msgid ""
"Work from an SDK command prompt (with the environment variables set, and "
"the SDK on PATH)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:267
msgid "Set DISTUTILS_USE_SDK=1"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:270
msgid "For Python 3.5"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:272
msgid ""
"Install `Visual Studio 2015 Community Edition "
"<https://www.visualstudio.com/en-us/downloads/download-visual-studio-"
"vs.aspx>`__ (or any later version, when these are released)."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:277
msgid ""
"Note that from Python 3.5 onwards, Visual Studio works in a backward "
"compatible way, which means that any future version of Visual Studio will"
" be able to build Python extensions for all Python versions from 3.5 "
"onwards."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:281
msgid ""
"Building with the recommended compiler on Windows ensures that a "
"compatible C library is used throughout the Python process."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:285
msgid "Binary extensions for Linux"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:287
msgid ""
"Linux binaries must use a sufficiently old glibc to be compatible with "
"older distributions. The `manylinux <https://github.com/pypa/manylinux>`_"
" Docker images provide a build environment with a glibc old enough to "
"support most current Linux distributions on common architectures."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:293
msgid "Binary extensions for macOS"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:295
msgid ""
"Binary compatibility on macOS is determined by the target minimum "
"deployment system, e.g. *10.9*, which is often specified with the "
"``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building "
"binaries on macOS. When building with setuptools / distutils, the "
"deployment target is specified with the flag ``--plat-name``, e.g. "
"``macosx-10.9-x86_64``. For common deployment targets for macOS Python "
"distributions, see the `MacPython Spinning Wheels wiki "
"<https://github.com/MacPython/wiki/wiki/Spinning-wheels>`_."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:305
msgid "Publishing binary extensions"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:307
msgid ""
"For interim guidance on this topic, see the discussion in `this issue "
"<https://github.com/pypa/python-packaging-user-guide/issues/284>`_."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:323
msgid "Additional resources"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:325
msgid ""
"Cross-platform development and distribution of extension modules is a "
"complex topic, so this guide focuses primarily on providing pointers to "
"various tools that automate dealing with the underlying technical "
"challenges. The additional resources in this section are instead intended"
" for developers looking to understand more about the underlying binary "
"interfaces that those systems rely on at runtime."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:332
msgid "Cross-platform wheel generation with scikit-build"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:334
msgid ""
"The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ "
"package helps abstract cross-platform build operations and provides "
"additional capabilities when creating binary extension packages. "
"Additional documentation is also available on the `C runtime, compiler, "
"and build system generator <https://scikit-"
"build.readthedocs.io/en/latest/generators.html>`_ for Python binary "
"extension modules."
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:342
msgid "Introduction to C/C++ extension modules"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:344
msgid ""
"For a more in depth explanation of how extension modules are used by "
"CPython on a Debian system, see the following articles:"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:347
msgid ""
"`What are (c)python extension modules? "
"<https://thomasnyberg.com/what_are_extension_modules.html>`_"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:348
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr ""

#: ../../guides/packaging-binary-extensions.rst:349
msgid ""
"`Writing cpython extension modules using C++ "
"<https://thomasnyberg.com/cpp_extension_modules.html>`_"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:3
msgid "Packaging namespace packages"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:5
msgid ""
"Namespace packages allow you to split the sub-packages and modules within"
" a single :term:`package <Import Package>` across multiple, separate "
":term:`distribution packages <Distribution Package>` (referred to as "
"**distributions** in this document to avoid ambiguity). For example, if "
"you have the following package structure:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:24
msgid "And you use this package in your code like so::"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:29
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:46
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:48
msgid ""
"Namespace packages can be useful for a large collection of loosely-"
"related packages (such as a large corpus of client libraries for multiple"
" products from a single company). However, namespace packages come with "
"several caveats and are not appropriate in all cases. A simple "
"alternative is to use a prefix on all of your distributions such as "
"``import mynamespace_subpackage_a`` (you could even use ``import "
"mynamespace_subpackage_a as subpackage_a`` to keep the import object "
"short)."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:58
msgid "Creating a namespace package"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:60
msgid ""
"There are currently three different approaches to creating namespace "
"packages:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:62
msgid ""
"Use `native namespace packages`_. This type of namespace package is "
"defined in :pep:`420` and is available in Python 3.3 and later. This is "
"recommended if packages in your namespace only ever need to support "
"Python 3 and installation via ``pip``."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:66
msgid ""
"Use `pkgutil-style namespace packages`_. This is recommended for new "
"packages that need to support Python 2 and 3 and installation via both "
"``pip`` and ``python setup.py install``."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:69
msgid ""
"Use `pkg_resources-style namespace packages`_. This method is recommended"
" if you need compatibility with packages already using this method or if "
"your package needs to be zip-safe."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:73
msgid ""
"While native namespace packages and pkgutil-style namespace packages are "
"largely compatible, pkg_resources-style namespace packages are not "
"compatible with the other methods. It's inadvisable to use different "
"methods in different distributions that provide packages to the same "
"namespace."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:80
msgid "Native namespace packages"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:82
msgid ""
"Python 3.3 added **implicit** namespace packages from :pep:`420`. All "
"that is required to create a native namespace package is that you just "
"omit :file:`__init__.py` from the namespace package directory. An example"
" file structure:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:97
msgid ""
"It is extremely important that every distribution that uses the namespace"
" package omits the :file:`__init__.py` or uses a pkgutil-style "
":file:`__init__.py`. If any distribution does not, it will cause the "
"namespace logic to fail and the other sub-packages will not be "
"importable."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:102
msgid ""
"Because ``mynamespace`` doesn't contain an :file:`__init__.py`, "
":func:`setuptools.find_packages` won't find the sub-package. You must use"
" :func:`setuptools.find_namespace_packages` instead or explicitly list "
"all packages in your :file:`setup.py`. For example:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:117
msgid ""
"A complete working example of two native namespace packages can be found "
"in the `native namespace package example project`_."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:123
msgid ""
"Because native and pkgutil-style namespace packages are largely "
"compatible, you can use native namespace packages in the distributions "
"that only support Python 3 and pkgutil-style namespace packages in the "
"distributions that need to support Python 2 and 3."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:129
msgid "pkgutil-style namespace packages"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:131
msgid ""
"Python 2.3 introduced the `pkgutil`_ module and the `extend_path`_ "
"function. This can be used to declare namespace packages that need to be "
"compatible with both Python 2.3+ and Python 3. This is the recommended "
"approach for the highest level of compatibility."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:136
msgid ""
"To create a pkgutil-style namespace package, you need to provide an "
":file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:148
#: ../../guides/packaging-namespace-packages.rst:194
msgid ""
"The :file:`__init__.py` file for the namespace package needs to contain "
"**only** the following:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:155
#: ../../guides/packaging-namespace-packages.rst:201
msgid ""
"**Every** distribution that uses the namespace package must include an "
"identical :file:`__init__.py`. If any distribution does not, it will "
"cause the namespace logic to fail and the other sub-packages will not be "
"importable.  Any additional code in :file:`__init__.py` will be "
"inaccessible."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:160
msgid ""
"A complete working example of two pkgutil-style namespace packages can be"
" found in the `pkgutil namespace example project`_."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:171
msgid "pkg_resources-style namespace packages"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:173
msgid ""
"`Setuptools`_ provides the `pkg_resources.declare_namespace`_ function "
"and the ``namespace_packages`` argument to :func:`~setuptools.setup`. "
"Together these can be used to declare namespace packages. While this "
"approach is no longer recommended, it is widely present in most existing "
"namespace packages. If you are creating a new distribution within an "
"existing namespace package that uses this method then it's recommended to"
" continue using this as the different methods are not cross-compatible "
"and it's not advisable to try to migrate an existing package."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:182
msgid ""
"To create a pkg_resources-style namespace package, you need to provide an"
" :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:206
msgid ""
"Some older recommendations advise the following in the namespace package "
":file:`__init__.py`:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:216
msgid ""
"The idea behind this was that in the rare case that setuptools isn't "
"available packages would fall-back to the pkgutil-style packages. This "
"isn't advisable because pkgutil and pkg_resources-style namespace "
"packages are not cross-compatible. If the presence of setuptools is a "
"concern then the package should just explicitly depend on setuptools via "
"``install_requires``."
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:223
msgid ""
"Finally, every distribution must provide the ``namespace_packages`` "
"argument to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""

#: ../../guides/packaging-namespace-packages.rst:237
msgid ""
"A complete working example of two pkg_resources-style namespace packages "
"can be found in the `pkg_resources namespace example project`_."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:3
msgid ""
"Publishing package distribution releases using GitHub Actions CI/CD "
"workflows"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
msgid ""
"`GitHub Actions CI/CD`_ allows you to run a series of commands whenever "
"an event occurs on the GitHub platform. One popular choice is having a "
"workflow that's triggered by a ``push`` event. This guide shows you how "
"to publish a Python distribution whenever a tagged commit is pushed. It "
"will use the `pypa/gh-action-pypi-publish GitHub Action`_."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:15
msgid ""
"This guide *assumes* that you already have a project that you know how to"
" build distributions for and *it lives on GitHub*."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:19
msgid "Saving credentials on GitHub"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:21
msgid ""
"In this guide, we'll demonstrate uploading to both PyPI and TestPyPI, "
"meaning that we'll have two separate sets of credentials. And we'll need "
"to save them in the GitHub repository settings."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:26
msgid "Let's begin! ðŸš€"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:28
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_. If you have the project on PyPI already, limit the token scope "
"to just that project. You can call it something like ``GitHub Actions "
"CI/CD â€” project-org/project-repo`` in order for it to be easily "
"distinguishable in the token list. **Don't close the page just yet â€” you "
"won't see that token again.**"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:37
msgid ""
"In a separate browser tab or window, go to the ``Settings`` tab of your "
"target repository and then click on `Secrets`_ in the left sidebar."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:40
msgid ""
"Create a new secret called ``PYPI_API_TOKEN`` and copy-paste the token "
"from the first step."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:42
msgid ""
"Now, go to https://test.pypi.org/manage/account/#api-tokens and repeat "
"the steps. Save that TestPyPI token on GitHub as ``TEST_PYPI_API_TOKEN``."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:48
msgid ""
"If you don't have a TestPyPI account, you'll need to create it. It's not "
"the same as a regular PyPI account."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:53
msgid "Creating a workflow definition"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:55
msgid ""
"GitHub CI/CD workflows are declared in YAML files stored in the "
"``.github/workflows/`` directory of your repository."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:58
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:61
msgid ""
"Start it with a meaningful name and define the event that should make "
"GitHub run this workflow:"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:70
msgid "Defining a workflow job environment"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
msgid ""
"Now, let's add initial setup for our job. It's a process that will "
"execute commands that we'll define later. In this guide, we'll use Ubuntu"
" 18.04:"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:83
msgid "Checking out the project and building distributions"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:85
msgid "Then, add the following under the ``build-n-publish`` section:"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:92
msgid ""
"This will download your repository into the CI runner and then install "
"and activate Python 3.7."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:95
msgid ""
"And now we can build dists from source. In this example, we'll use "
"``build`` package, assuming that your project has a ``pyproject.toml`` "
"properly set up (see :pep:`517`/:pep:`518`)."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:102
msgid ""
"You can use any other method for building distributions as long as it "
"produces ready-to-upload artifacts saved into the ``dist/`` folder."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:106
msgid "So add this to the steps list:"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:115
msgid "Publishing the distribution to PyPI and TestPyPI"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:117
msgid "Finally, add the following steps at the end:"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:123
msgid ""
"These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the"
" first one uploads contents of the ``dist/`` folder into TestPyPI "
"unconditionally and the second does that to PyPI, but only if the current"
" commit is tagged."
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:130
msgid "That's all, folks!"
msgstr ""

#: ../../guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:132
msgid ""
"Now, whenever you push a tagged commit to your Git repository remote on "
"GitHub, this workflow will publish it to PyPI. And it'll publish any push"
" to TestPyPI which is useful for providing test builds to your alpha "
"users as well as making sure that your release pipeline remains healthy!"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:5
msgid "Single-sourcing the package version"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:8
msgid ""
"There are many techniques to maintain a single source of truth for the "
"version number of your project:"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:11
msgid ""
"Read the file in :file:`setup.py` and get the version. Example (from `pip"
" setup.py <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:38
msgid ""
"As of the release of setuptools 46.4.0, one can accomplish the same thing"
" by instead placing the following in the project's ``setup.cfg`` file "
"(replacing \"package\" with the import name of the package):"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:47
msgid ""
"Earlier versions of setuptools implemented the ``attr:`` directive by "
"importing the module, but setuptools 46.4.0 added rudimentary AST "
"analysis so that ``attr:`` can function without having to import any of "
"the package's dependencies."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:52
msgid ""
"Also, please be aware that declarative config indicators, including the "
"``attr:`` directive, are not supported in parameters to ``setup.py``."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:55
msgid ""
"Use an external build tool that either manages updating both locations, "
"or offers an API that both locations can use."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:58
msgid ""
"Few tools you could use, in no particular order, and not necessarily "
"complete: `bump2version <https://pypi.org/project/bump2version>`_, "
"`changes <https://pypi.org/project/changes>`_, `commitizen "
"<https://pypi.org/project/commitizen>`_, `zest.releaser "
"<https://pypi.org/project/zest.releaser>`_."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:65
msgid ""
"Set the value to a ``__version__`` global variable in a dedicated module "
"in your project (e.g. :file:`version.py`), then have :file:`setup.py` "
"read and ``exec`` the value into a variable."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:76
msgid ""
"Example using this technique: `warehouse "
"<https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:78
msgid ""
"Place the value in a simple ``VERSION`` text file and have both "
":file:`setup.py` and the project code read it."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:86
msgid ""
"An advantage with this technique is that it's not specific to Python.  "
"Any tool can read the version."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:91
msgid ""
"With this approach you must make sure that the ``VERSION`` file is "
"included in all your source and binary distributions (e.g. add ``include "
"VERSION`` to your :file:`MANIFEST.in`)."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:95
msgid ""
"Set the value in :file:`setup.py`, and have the project code use the "
"``importlib.metadata`` API to fetch the value at runtime. "
"(``importlib.metadata`` was introduced in Python 3.8 and is available to "
"older versions as the ``importlib-metadata`` project.)  An installed "
"project's version can be fetched with the API as follows::"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:110
msgid ""
"Be aware that the ``importlib.metadata`` API only knows about what's in "
"the installation metadata, which is not necessarily the code that's "
"currently imported."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:114
msgid ""
"If a project uses this method to fetch its version at runtime, then its "
"``install_requires`` value needs to be edited to install ``importlib-"
"metadata`` on pre-3.8 versions of Python like so::"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:128
msgid ""
"An older (and less efficient) alternative to ``importlib.metadata`` is "
"the ``pkg_resources`` API provided by ``setuptools``::"
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:134
msgid ""
"If a project uses ``pkg_resources`` to fetch its own version at runtime, "
"then ``setuptools`` must be added to the project's ``install_requires`` "
"list."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:138
msgid ""
"Example using this technique: `setuptools "
"<https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:141
msgid ""
"Set the value to ``__version__`` in ``sample/__init__.py`` and import "
"``sample`` in :file:`setup.py`."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:155
msgid ""
"Although this technique is common, beware that it will fail if "
"``sample/__init__.py`` imports packages from ``install_requires`` "
"dependencies, which will very likely not be installed yet when "
":file:`setup.py` is run."
msgstr ""

#: ../../guides/single-sourcing-package-version.rst:161
msgid ""
"Keep the version number in the tags of a version control system (Git, "
"Mercurial, etc) instead of in the code, and automatically extract it from"
" there using `setuptools_scm <https://pypi.org/project/setuptools_scm>`_."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:5
msgid "Supporting multiple Python versions"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:37
msgid ""
"In addition to the work required to create a Python package, it is often "
"necessary that the package must be made available on different versions "
"of Python.  Different Python versions may contain different (or renamed) "
"standard library packages, and the changes between Python versions 2.x "
"and 3.x include changes in the language syntax."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:43
msgid ""
"Performed manually, all the testing required to ensure that the package "
"works correctly on all the target Python versions (and OSs!) could be "
"very time-consuming. Fortunately, several tools are available for dealing"
" with this, and these will briefly be discussed here."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:49
msgid "Automated testing and continuous integration"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:51
msgid ""
"Several hosted services for automated testing are available. These "
"services will typically monitor your source code repository (e.g. at "
"`Github <https://github.com>`_ or `Bitbucket <https://bitbucket.org>`_) "
"and run your project's test suite every time a new commit is made."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:56
msgid ""
"These services also offer facilities to run your project's test suite on "
"*multiple versions of Python*, giving rapid feedback about whether the "
"code will work, without the developer having to perform such tests "
"themselves."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:60
msgid ""
"Wikipedia has an extensive `comparison "
"<http://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software>`_"
" of many continuous-integration systems. There are two hosted services "
"which when used in conjunction provide automated testing across Linux, "
"Mac and Windows:"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:66
msgid ""
"`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS "
"environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 "
"bit while the macOS is 10.9.2 at the time of writing."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:69
msgid ""
"`Appveyor <http://www.appveyor.com>`_ provides a Windows environment "
"(Windows Server 2012)."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:80
msgid ""
"Both `Travis CI`_ and Appveyor_ require a `YAML "
"<http://www.yaml.org>`_-formatted file as specification for the "
"instructions for testing. If any tests fail, the output log for that "
"specific configuration can be inspected."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:85
msgid ""
"For Python projects that are intended to be deployed on both Python 2 and"
" 3 with a single-source strategy, there are a number of options."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:89
msgid "Tools for single-source Python packages"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:91
msgid ""
"`six <http://pythonhosted.org/six/>`_ is a tool developed by Benjamin "
"Peterson for wrapping over the differences between Python 2 and Python 3."
" The six_ package has enjoyed widespread use and may be regarded as a "
"reliable way to write a single-source Python module that can be use in "
"both Python 2 and 3. The six_ module can be used from as early as Python "
"2.5. A tool called `modernize <https://pypi.org/project/modernize>`_, "
"developed by Armin Ronacher, can be used to automatically apply the code "
"modifications provided by six_."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:100
msgid ""
"Similar to six_, `python-future <http://python-"
"future.org/overview.html>`_ is a package that provides a compatibility "
"layer between Python 2 and Python 3 source code; however, unlike six_, "
"this package aims to provide interoperability between Python 2 and Python"
" 3 with a language syntax that matches one of the two Python versions: "
"one may use"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:107
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:108
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:110
msgid ""
"Because of the bi-directionality, python-future_ offers a pathway to "
"converting a Python 2 package to Python 3 syntax module-by-module. "
"However, in contrast to six_, python-future_ is supported only from "
"Python 2.6. Similar to modernize_ for six_, python-future_ comes with two"
" scripts called ``futurize`` and ``pasteurize`` that can be applied to "
"either a Python 2 module or a Python 3 module respectively."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:117
msgid ""
"Use of six_ or python-future_ adds an additional runtime dependency to "
"your package: with python-future_, the ``futurize`` script can be called "
"with the ``--stage1`` option to apply only the changes that Python 2.6+ "
"already provides for forward-compatibility to Python 3. Any remaining "
"compatibility problems would require manual changes."
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:124
msgid "What's in which Python?"
msgstr ""

#: ../../guides/supporting-multiple-python-versions.rst:126
msgid ""
"Ned Batchelder provides a list of changes in each Python release for "
"`Python 2 "
"<https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 "
"<https://nedbatchelder.com/blog/201310/whats_in_which_python_3.html>`__ "
"and `Python 3.4-3.6 "
"<https://nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__."
" These lists may be used to check whether any changes between Python "
"versions may affect your package."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:3
msgid "Supporting Windows using Appveyor"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:6
msgid "2015-12-03"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:8
msgid ""
"This section covers how to use the free `Appveyor`_ continuous "
"integration service to provide Windows support for your project. This "
"includes testing the code on Windows, and building Windows-targeted "
"binaries for projects that use C extensions."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:20
msgid ""
"Many projects are developed on Unix by default, and providing Windows "
"support can be a challenge, because setting up a suitable Windows test "
"environment is non-trivial, and may require buying software licenses."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:24
msgid ""
"The Appveyor service is a continuous integration service, much like the "
"better-known `Travis`_ service that is commonly used for testing by "
"projects hosted on `Github`_. However, unlike Travis, the build workers "
"on Appveyor are Windows hosts and have the necessary compilers installed "
"to build Python extensions."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:30
msgid ""
"Windows users typically do not have access to a C compiler, and therefore"
" are reliant on projects that use C extensions distributing binary wheels"
" on PyPI in order for the distribution to be installable via ``python -m "
"pip install <dist>``. By using Appveyor as a build service (even if not "
"using it for testing) it is possible for projects without a dedicated "
"Windows environment to provide Windows-targeted binaries."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:38
msgid "Setting up"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:40
msgid ""
"In order to use Appveyor to build Windows wheels for your project, you "
"must have an account on the service. Instructions on setting up an "
"account are given in `the Appveyor documentation "
"<http://www.appveyor.com/docs>`__. The free tier of account is perfectly "
"adequate for open source projects."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:45
msgid ""
"Appveyor provides integration with `Github`_ and `Bitbucket`_, so as long"
" as your project is hosted on one of those two services, setting up "
"Appveyor integration is straightforward."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:49
msgid ""
"Once you have set up your Appveyor account and added your project, "
"Appveyor will automatically build your project each time a commit occurs."
" This behaviour will be familiar to users of Travis."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:54
msgid "Adding Appveyor support to your project"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:56
msgid ""
"In order to define how Appveyor should build your project, you need to "
"add an :file:`appveyor.yml` file to your project. The full details of "
"what can be included in the file are covered in the Appveyor "
"documentation. This guide will provide the details necessary to set up "
"wheel builds."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:61
msgid ""
"Appveyor includes by default all of the compiler toolchains needed to "
"build extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of "
"3.3 and 3.4, the tools work out of the box. But for 64-bit versions of "
"Python 3.3 and 3.4, there is a small amount of additional configuration "
"needed to let distutils know where to find the 64-bit compilers. (From "
"3.5 onwards, the version of Visual Studio used includes 64-bit compilers "
"with no additional setup)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:69
msgid "appveyor.yml"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:75
msgid ""
"This file can be downloaded from `here "
"<https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/appveyor.yml>`__."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:77
msgid ""
"The :file:`appveyor.yml` file must be located in the root directory of "
"your project. It is in ``YAML`` format, and consists of a number of "
"sections."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:80
msgid ""
"The ``environment`` section is the key to defining the Python versions "
"for which your wheels will be created. Appveyor comes with Python 2.6, "
"2.7, 3.3, 3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The "
"example file builds for all of these environments except Python 2.6. "
"Installing for Python 2.6 is more complex, as it does not come with pip "
"included. We don't support 2.6 in this document (as Windows users still "
"using Python 2 are generally able to move to Python 2.7 without too much "
"difficulty)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:88
msgid ""
"The ``install`` section uses pip to install any additional software that "
"the project may require. The only requirement for building wheels is the "
"``wheel`` project, but projects may wish to customise this code in "
"certain circumstances (for example, to install additional build packages "
"such as ``Cython``, or test tools such as ``tox``)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:94
msgid ""
"The ``build`` section simply switches off builds - there is no build step"
" needed for Python, unlike languages like ``C#``."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:97
msgid ""
"The main sections that will need to be tailored to your project are "
"``test_script`` and ``after_test``."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:100
msgid ""
"The ``test_script`` section is where you will run your project's tests. "
"The supplied file runs your test suite using ``setup.py test``. If you "
"are only interested in building wheels, and not in running your tests on "
"Windows, you can replace this section with a dummy command such as ``echo"
" Skipped Tests``. You may wish to use another test tool, such as ``nose``"
" or :file:`py.test`.  Or you may wish to use a test driver like ``tox`` -"
" however if you are using ``tox`` there are some additional configuration"
" changes you will need to consider, which are described below."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:109
msgid ""
"The ``after_test`` runs once your tests have completed, and so is where "
"the wheels should be built. Assuming your project uses the recommended "
"tools (specifically, ``setuptools``) then the ``setup.py bdist_wheel`` "
"command will build your wheels."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:114
msgid ""
"Note that wheels will only be built if your tests succeed. If you expect "
"your tests to fail on Windows, you can skip them as described above."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:119
msgid "Support script"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:121
msgid ""
"The :file:`appveyor.yml` file relies on a single support script, which "
"sets up the environment to use the SDK compiler for 64-bit builds on "
"Python 3.3 and 3.4.  For projects which do not need a compiler, or which "
"don't support 3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml`"
" file is needed."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:126
msgid ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows "
"batch script that runs a single command in an environment with the "
"appropriate compiler for the selected Python version. All you need to do "
"is to set the single environment variable ``DISTUTILS_USE_SDK`` to a "
"value of ``1`` and the script does the rest. It sets up the SDK needed "
"for 64-bit builds of Python 3.3 or 3.4, so don't set the environment "
"variable for any other builds."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:133
msgid ""
"You can simply download the batch file and include it in your project "
"unchanged."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:137
msgid "Access to the built wheels"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:139
msgid ""
"When your build completes, the built wheels will be available from the "
"Appveyor control panel for your project. They can be found by going to "
"the build status page for each build in turn. At the top of the build "
"output there is a series of links, one of which is \"Artifacts\". That "
"page will include a list of links to the wheels for that Python version /"
" architecture. You can download those wheels and upload them to PyPI as "
"part of your release process."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:147
msgid "Additional notes"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:150
msgid "Testing with tox"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:152
msgid ""
"Many projects use the `Tox`_ tool to run their tests. It ensures that "
"tests are run in an isolated environment using the exact files that will "
"be distributed by the project."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:156
msgid ""
"In order to use ``tox`` on Appveyor there are a couple of additional "
"considerations (in actual fact, these issues are not specific to "
"Appveyor, and may well affect other CI systems)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:160
msgid ""
"By default, ``tox`` only passes a chosen subset of environment variables "
"to the test processes. Because ``distutils`` uses environment variables "
"to control the compiler, this \"test isolation\" feature will cause the "
"tests to use the wrong compiler by default."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:165
msgid ""
"To force ``tox`` to pass the necessary environment variables to the "
"subprocess, you need to set the ``tox`` configuration option ``passenv`` "
"to list the additional environment variables to be passed to the "
"subprocess. For the SDK compilers, you need"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:170
msgid "``DISTUTILS_USE_SDK``"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:171
msgid "``MSSdk``"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:172
msgid "``INCLUDE``"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:173
msgid "``LIB``"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:175
msgid ""
"The ``passenv`` option can be set in your :file:`tox.ini`, or if you "
"prefer to avoid adding Windows-specific settings to your general project "
"files, it can be set by setting the ``TOX_TESTENV_PASSENV`` environment "
"variable. The supplied :file:`build.cmd` script does this by default "
"whenever ``DISTUTILS_USE_SDK`` is set."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:181
msgid ""
"When used interactively, ``tox`` allows you to run your tests against "
"multiple environments (often, this means multiple Python versions). This "
"feature is not as useful in a CI environment like Travis or Appveyor, "
"where all tests are run in isolated environments for each configuration. "
"As a result, projects often supply an argument ``-e ENVNAME`` to ``tox`` "
"to specify which environment to use (there are default environments for "
"most versions of Python)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:188
msgid ""
"However, this does *not* work well with a Windows CI system like "
"Appveyor, where there are (for example) two installations of Python 3.4 "
"(32-bit and 64-bit) available, but only one ``py34`` environment in "
"``tox``."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:192
msgid ""
"In order to run tests using ``tox``, therefore, projects should probably "
"use the default ``py`` environment in ``tox``, which uses the Python "
"interpreter that was used to run ``tox``. This will ensure that when "
"Appveyor runs the tests, they will be run with the configured "
"interpreter."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:197
msgid ""
"In order to support running under the ``py`` environment, it is possible "
"that projects with complex ``tox`` configurations might need to modify "
"their :file:`tox.ini` file. Doing so is, however, outside the scope of "
"this document."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:203
msgid "Automatically uploading wheels"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:205
msgid ""
"It is possible to request Appveyor to automatically upload wheels. There "
"is a ``deployment`` step available in :file:`appveyor.yml` that can be "
"used to (for example) copy the built artifacts to a FTP site, or an "
"Amazon S3 instance. Documentation on how to do this is included in the "
"Appveyor guides."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:210
msgid ""
"Alternatively, it would be possible to add a ``twine upload`` step to the"
" build.  The supplied :file:`appveyor.yml` does not do this, as it is not"
" clear that uploading new wheels after every commit is desirable "
"(although some projects may wish to do this)."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:216
msgid "External dependencies"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:218
msgid ""
"The supplied scripts will successfully build any distribution that does "
"not rely on 3rd party external libraries for the build."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:221
msgid ""
"It is possible to add steps to the :file:`appveyor.yml` configuration "
"(typically in the \"install\" section) to download and/or build external "
"libraries needed by the distribution. And if needed, it is possible to "
"add extra configuration for the build to supply the location of these "
"libraries to the compiler. However, this level of configuration is beyond"
" the scope of this document."
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:230
msgid "Support scripts"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:232
msgid "For reference, the SDK setup support script is listed here:"
msgstr ""

#: ../../guides/supporting-windows-using-appveyor.rst:234
msgid "``appveyor-sample/build.cmd``"
msgstr ""

#: ../../guides/tool-recommendations.rst:5
msgid "Tool recommendations"
msgstr ""

#: ../../guides/tool-recommendations.rst:7
msgid ""
"If you're familiar with Python packaging and installation, and just want "
"to know what tools are currently recommended, then here it is."
msgstr ""

#: ../../guides/tool-recommendations.rst:12
msgid "Application dependency management"
msgstr ""

#: ../../guides/tool-recommendations.rst:14
msgid ""
"Use :ref:`pipenv` to manage library dependencies when developing Python "
"applications. See :doc:`../tutorials/managing-dependencies` for more "
"details on using ``pipenv``."
msgstr ""

#: ../../guides/tool-recommendations.rst:18
msgid "When ``pipenv`` does not meet your use case, consider other tools like:"
msgstr ""

#: ../../guides/tool-recommendations.rst:20
msgid ":ref:`pip`"
msgstr ""

#: ../../guides/tool-recommendations.rst:22
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
msgstr ""

#: ../../guides/tool-recommendations.rst:24
msgid "`Poetry <https://python-poetry.org/>`_"
msgstr ""

#: ../../guides/tool-recommendations.rst:27
msgid "Installation tool recommendations"
msgstr ""

#: ../../guides/tool-recommendations.rst:29
msgid ""
"Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
"from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on "
"how :ref:`pip` is installed, you may need to also install :ref:`wheel` to"
" get the benefit of wheel caching. [3]_"
msgstr ""

#: ../../guides/tool-recommendations.rst:34
msgid ""
"Use :ref:`virtualenv`, or `venv`_ to isolate application specific "
"dependencies from a shared Python installation. [4]_"
msgstr ""

#: ../../guides/tool-recommendations.rst:37
msgid ""
"If you're looking for management of fully integrated cross-platform "
"software stacks, consider:"
msgstr ""

#: ../../guides/tool-recommendations.rst:40
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ""

#: ../../guides/tool-recommendations.rst:42
msgid ""
":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
"scientific community."
msgstr ""

#: ../../guides/tool-recommendations.rst:47
msgid "Packaging tool recommendations"
msgstr ""

#: ../../guides/tool-recommendations.rst:49
msgid ""
"Use :ref:`setuptools` to define projects and create :term:`Source "
"Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""

#: ../../guides/tool-recommendations.rst:52
msgid ""
"Use the ``bdist_wheel`` :ref:`setuptools` extension available from the "
":ref:`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is "
"especially beneficial, if your project contains binary extensions."
msgstr ""

#: ../../guides/tool-recommendations.rst:56
msgid ""
"Use `twine <https://pypi.org/project/twine>`_ for uploading distributions"
" to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../../guides/tool-recommendations.rst:61
msgid "Publishing platform migration"
msgstr ""

#: ../../guides/tool-recommendations.rst:63
msgid ""
"The original Python Package Index implementation (previously hosted at "
"`pypi.python.org <https://pypi.python.org>`_) has been phased out in "
"favour of an updated implementation hosted at `pypi.org "
"<https://pypi.org>`_."
msgstr ""

#: ../../guides/tool-recommendations.rst:67
msgid ""
"See :ref:`Migrating to PyPI.org` for more information on the status of "
"the migration, and what settings to change in your clients."
msgstr ""

#: ../../guides/tool-recommendations.rst:72
msgid ""
"There are some cases where you might choose to use ``easy_install`` (from"
" :ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` "
"(which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs "
"easy_install`."
msgstr ""

#: ../../guides/tool-recommendations.rst:77
msgid ""
"The acceptance of :pep:`453` means that :ref:`pip` will be available by "
"default in most installations of Python 3.4 or later.  See the "
":pep:`rationale section <453#rationale>` from :pep:`453` as for why pip "
"was chosen."
msgstr ""

#: ../../guides/tool-recommendations.rst:82
msgid ""
"`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and "
":ref:`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and "
":ref:`venv <venv>` do not currently.  Also, the common \"python-pip\" "
"package that's found in various linux distros, does not depend on "
"\"python-wheel\" currently."
msgstr ""

#: ../../guides/tool-recommendations.rst:88
msgid ""
"Beginning with Python 3.4, ``venv`` will create virtualenv environments "
"with ``pip`` installed, thereby making it an equal alternative to "
":ref:`virtualenv`. However, using :ref:`virtualenv` will still be "
"recommended for users that need cross-version consistency."
msgstr ""

#: ../../guides/tool-recommendations.rst:93
msgid ""
"Although you can use pure ``distutils`` for many projects, it does not "
"support defining dependencies on other projects and is missing several "
"convenience utilities for automatically populating distribution metadata "
"correctly that are provided by ``setuptools``. Being outside the standard"
" library, ``setuptools`` also offers a more consistent feature set across"
" different versions of Python, and (unlike ``distutils``), recent "
"versions of ``setuptools`` support all of the modern metadata fields "
"described in :ref:`core-metadata`."
msgstr ""

#: ../../guides/tool-recommendations.rst:102
msgid ""
"Even for projects that do choose to use ``distutils``, when :ref:`pip` "
"installs such projects directly from source (rather than installing from "
"a prebuilt :term:`wheel <Wheel>` file), it will actually build your "
"project using :ref:`setuptools` instead."
msgstr ""

#: ../../guides/tool-recommendations.rst:107
msgid ""
"`distribute`_ (a fork of setuptools) was merged back into "
":ref:`setuptools` in June 2013, thereby making setuptools the default "
"choice for packaging."
msgstr ""

#: ../../guides/using-manifest-in.rst:5
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr ""

#: ../../guides/using-manifest-in.rst:7
msgid ""
"When building a :term:`source distribution <Source Distribution (or "
"\"sdist\")>` for your package, by default only a minimal set of files are"
" included.  You may find yourself wanting to include extra files in the "
"source distribution, such as an authors/contributors file, a "
":file:`docs/` directory, or a directory of data files used for testing "
"purposes.  There may even be extra files that you *need* to include; for "
"example, if your :file:`setup.py` computes your project's "
"``long_description`` by reading from both a README and a changelog file, "
"you'll need to include both those files in the sdist so that people that "
"build or install from the sdist get the correct results."
msgstr ""

#: ../../guides/using-manifest-in.rst:17
msgid ""
"Adding & removing files to & from the source distribution is done by "
"writing a :file:`MANIFEST.in` file at the project root."
msgstr ""

#: ../../guides/using-manifest-in.rst:22
msgid "How files are included in an sdist"
msgstr ""

#: ../../guides/using-manifest-in.rst:24
msgid "The following files are included in a source distribution by default:"
msgstr ""

#: ../../guides/using-manifest-in.rst:26
msgid ""
"all Python source files implied by the ``py_modules`` and ``packages`` "
"``setup()`` arguments"
msgstr ""

#: ../../guides/using-manifest-in.rst:28
msgid ""
"all C source files mentioned in the ``ext_modules`` or ``libraries`` "
"``setup()`` arguments"
msgstr ""

#: ../../guides/using-manifest-in.rst:30
msgid "scripts specified by the ``scripts`` ``setup()`` argument"
msgstr ""

#: ../../guides/using-manifest-in.rst:31
msgid ""
"all files specified by the ``package_data`` and ``data_files`` "
"``setup()`` arguments"
msgstr ""

#: ../../guides/using-manifest-in.rst:33
msgid ""
"the file specified by the ``license_file`` option in :file:`setup.cfg` "
"(setuptools 40.8.0+)"
msgstr ""

#: ../../guides/using-manifest-in.rst:35
msgid ""
"all files specified by the ``license_files`` option in :file:`setup.cfg` "
"(setuptools 42.0.0+)"
msgstr ""

#: ../../guides/using-manifest-in.rst:37
msgid "all files matching the pattern :file:`test/test*.py`"
msgstr ""

#: ../../guides/using-manifest-in.rst:38
msgid ":file:`setup.py` (or whatever you called your setup script)"
msgstr ""

#: ../../guides/using-manifest-in.rst:39
msgid ":file:`setup.cfg`"
msgstr ""

#: ../../guides/using-manifest-in.rst:40
msgid ":file:`README`"
msgstr ""

#: ../../guides/using-manifest-in.rst:41
msgid ":file:`README.txt`"
msgstr ""

#: ../../guides/using-manifest-in.rst:42
msgid ":file:`README.rst` (Python 3.7+ or setuptools 0.6.27+)"
msgstr ""

#: ../../guides/using-manifest-in.rst:43
msgid ":file:`README.md` (setuptools 36.4.0+)"
msgstr ""

#: ../../guides/using-manifest-in.rst:44
msgid ":file:`pyproject.toml` (setuptools 43.0.0+)"
msgstr ""

#: ../../guides/using-manifest-in.rst:45
msgid ":file:`MANIFEST.in`"
msgstr ""

#: ../../guides/using-manifest-in.rst:47
msgid ""
"After adding the above files to the sdist, the commands in "
":file:`MANIFEST.in` (if such a file exists) are executed in order to add "
"and remove further files to & from the sdist.  Default files can even be "
"removed from the sdist with the appropriate :file:`MANIFEST.in` command."
msgstr ""

#: ../../guides/using-manifest-in.rst:52
msgid ""
"After processing the :file:`MANIFEST.in` file, setuptools removes the "
":file:`build/` directory as well as any directories named :file:`RCS`, "
":file:`CVS`, or :file:`.svn` from the sdist, and it adds a :file:`PKG-"
"INFO` file and an :file:`*.egg-info` directory.  This behavior cannot be "
"changed with :file:`MANIFEST.in`."
msgstr ""

#: ../../guides/using-manifest-in.rst:60
msgid ":file:`MANIFEST.in` commands"
msgstr ""

#: ../../guides/using-manifest-in.rst:62
msgid ""
"A :file:`MANIFEST.in` file consists of commands, one per line, "
"instructing setuptools to add or remove some set of files from the sdist."
"  The commands are:"
msgstr ""

#: ../../guides/using-manifest-in.rst:67
msgid "Command"
msgstr ""

#: ../../guides/using-manifest-in.rst:69
msgid ":samp:`include {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:69
msgid "Add all files matching any of the listed patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:70
msgid ":samp:`exclude {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:70
msgid "Remove all files matching any of the listed patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:71
msgid ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:71
msgid ""
"Add all files under directories matching ``dir-pattern`` that match any "
"of the listed patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:72
msgid ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:72
msgid ""
"Remove all files under directories matching ``dir-pattern`` that match "
"any of the listed patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:73
msgid ":samp:`global-include {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:73
msgid ""
"Add all files anywhere in the source tree matching any of the listed "
"patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:74
msgid ":samp:`global-exclude {pat1} {pat2} ...`"
msgstr ""

#: ../../guides/using-manifest-in.rst:74
msgid ""
"Remove all files anywhere in the source tree matching any of the listed "
"patterns"
msgstr ""

#: ../../guides/using-manifest-in.rst:75
msgid ":samp:`graft {dir-pattern}`"
msgstr ""

#: ../../guides/using-manifest-in.rst:75
msgid "Add all files under directories matching ``dir-pattern``"
msgstr ""

#: ../../guides/using-manifest-in.rst:76
msgid ":samp:`prune {dir-pattern}`"
msgstr ""

#: ../../guides/using-manifest-in.rst:76
msgid "Remove all files under directories matching ``dir-pattern``"
msgstr ""

#: ../../guides/using-manifest-in.rst:79
msgid ""
"The patterns here are glob-style patterns: ``*`` matches zero or more "
"regular filename characters (on Unix, everything except forward slash; on"
" Windows, everything except backslash and colon); ``?`` matches a single "
"regular filename character, and ``[chars]`` matches any one of the "
"characters between the square brackets (which may contain character "
"ranges, e.g., ``[a-z]`` or ``[a-fA-F0-9]``).  Setuptools also has "
"undocumented support for ``**`` matching zero or more characters "
"including forward slash, backslash, and colon."
msgstr ""

#: ../../guides/using-manifest-in.rst:87
msgid ""
"Directory patterns are relative to the root of the project directory; "
"e.g., ``graft example*`` will include a directory named :file:`examples` "
"in the project root but will not include :file:`docs/examples/`."
msgstr ""

#: ../../guides/using-manifest-in.rst:91
msgid ""
"File & directory names in :file:`MANIFEST.in` should be ``/``-separated; "
"setuptools will automatically convert the slashes to the local platform's"
" appropriate directory separator."
msgstr ""

#: ../../guides/using-manifest-in.rst:95
msgid ""
"Commands are processed in the order they appear in the "
":file:`MANIFEST.in` file.  For example, given the commands::"
msgstr ""

#: ../../guides/using-manifest-in.rst:101
msgid ""
"the contents of the directory tree :file:`tests` will first be added to "
"the sdist, and then after that all files in the sdist with a ``.pyc``, "
"``.pyo``, or ``.pyd`` extension will be removed from the sdist.  If the "
"commands were in the opposite order, then ``*.pyc`` files etc. would be "
"only be removed from what was already in the sdist before adding "
":file:`tests`, and if :file:`tests` happened to contain any ``*.pyc`` "
"files, they would end up included in the sdist because the exclusion "
"happened before they were included."
msgstr ""

#: ../../guides/using-testpypi.rst:7
msgid ""
"``TestPyPI`` is a separate instance of the :term:`Python Package Index "
"(PyPI)` that allows you to try out the distribution tools and process "
"without worrying about affecting the real index. TestPyPI is hosted at "
"`test.pypi.org <https://test.pypi.org>`_"
msgstr ""

#: ../../guides/using-testpypi.rst:13
msgid "Registering your account"
msgstr ""

#: ../../guides/using-testpypi.rst:15
msgid ""
"Because TestPyPI has a separate database from the live PyPI, you'll need "
"a separate user account for specifically for TestPyPI. Go to "
"https://test.pypi.org/account/register/ to register your account."
msgstr ""

#: ../../guides/using-testpypi.rst:19
msgid ""
"The database for TestPyPI may be periodically pruned, so it is not "
"unusual for user accounts to be deleted."
msgstr ""

#: ../../guides/using-testpypi.rst:24
msgid "Using TestPyPI with Twine"
msgstr ""

#: ../../guides/using-testpypi.rst:26
msgid ""
"You can upload your distributions to TestPyPI using :ref:`twine` by "
"specifying the ``--repository`` flag"
msgstr ""

#: ../../guides/using-testpypi.rst:33
msgid ""
"You can see if your package has successfully uploaded by navigating to "
"the URL ``https://test.pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may "
"take a minute or two for your project to appear on the site."
msgstr ""

#: ../../guides/using-testpypi.rst:39
msgid "Using TestPyPI with pip"
msgstr ""

#: ../../guides/using-testpypi.rst:41
msgid ""
"You can tell pip to download packages from TestPyPI instead of PyPI by "
"specifying the ``--index-url`` flag"
msgstr ""

#: ../../guides/using-testpypi.rst:56
msgid ""
"If you want to allow pip to also pull other packages from PyPI you can "
"specify ``--extra-index-url`` to point to PyPI. This is useful when the "
"package you're testing has dependencies:"
msgstr ""

#: ../../guides/using-testpypi.rst:73
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr ""

#: ../../guides/using-testpypi.rst:75
msgid ""
"If you want to avoid entering your username, you can configure TestPyPI "
"in your :file:`$HOME/.pypirc`:"
msgstr ""

