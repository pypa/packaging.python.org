# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/guides/supporting-multiple-python-versions.rst:5
#: 33bc2a7df9594ef688fd432878d2ff61
msgid "Supporting multiple Python versions"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:0
#: 65866c0eea80404588cabf3236928e8b
msgid "Page Status"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:7
#: 719af340c32b4d80b11db9fd578d6dcf
msgid "Incomplete"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:0
#: 78cdc98448ca47a9984270e08f676c8e
msgid "Last Reviewed"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:8
#: b7d57e4b85f24973a1b1c52e1185514e
msgid "2014-12-24"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:12
#: d03a704de1ce482a9929315326bdac72
msgid "Contents"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:37
#: f50370a6490949849ae2b05e4872282a
msgid "In addition to the work required to create a Python package, it is often necessary that the package must be made available on different versions of Python.  Different Python versions may contain different (or renamed) standard library packages, and the changes between Python versions 2.x and 3.x include changes in the language syntax."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:43
#: dd1e29e068f6495388b9e6d910dd25c6
msgid "Performed manually, all the testing required to ensure that the package works correctly on all the target Python versions (and OSs!) could be very time-consuming. Fortunately, several tools are available for dealing with this, and these will briefly be discussed here."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:49
#: a0113eabf8224b9f875a1bfa4116fcdd
msgid "Automated testing and continuous integration"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:51
#: 455efde338fe4b568e9cfff169b769f2
msgid "Several hosted services for automated testing are available. These services will typically monitor your source code repository (e.g. at `Github <https://github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your project's test suite every time a new commit is made."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:56
#: 00671c4da24046c6a6a58b6e749b4886
msgid "These services also offer facilities to run your project's test suite on *multiple versions of Python*, giving rapid feedback about whether the code will work, without the developer having to perform such tests themselves."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:60
#: 4ab80208d165475187835ed32840ab91
msgid "Wikipedia has an extensive `comparison <http://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software>`_ of many continuous-integration systems. There are two hosted services which when used in conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:66
#: de7946584e684ab89ba802742a4ae3e9
msgid "`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit while the macOS is 10.9.2 at the time of writing."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:69
#: 2340db71ff254979a2e5c4da4f835416
msgid "`Appveyor <http://www.appveyor.com>`_ provides a Windows environment (Windows Server 2012)."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:80
#: dd2925183626415ebe4bbc4b2f12af9d
msgid "Both `Travis CI`_ and Appveyor_ require a `YAML <http://www.yaml.org>`_-formatted file as specification for the instructions for testing. If any tests fail, the output log for that specific configuration can be inspected."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:85
#: 2d82a149d5e34f94a2da4edbba898989
msgid "For Python projects that are intended to be deployed on both Python 2 and 3 with a single-source strategy, there are a number of options."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:89
#: a07145bf58894c1b920fd6c4d1e23862
msgid "Tools for single-source Python packages"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:91
#: d0bf729f093e4fb6a303e95c4ea43d9f
msgid "`six <http://pythonhosted.org/six/>`_ is a tool developed by Benjamin Peterson for wrapping over the differences between Python 2 and Python 3. The six_ package has enjoyed widespread use and may be regarded as a reliable way to write a single-source Python module that can be use in both Python 2 and 3. The six_ module can be used from as early as Python 2.5. A tool called `modernize <https://pypi.org/project/modernize>`_, developed by Armin Ronacher, can be used to automatically apply the code modifications provided by six_."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:100
#: 3dc082511b0e438792a9bb8d6305521c
msgid "Similar to six_, `python-future <http://python-future.org/overview.html>`_ is a package that provides a compatibility layer between Python 2 and Python 3 source code; however, unlike six_, this package aims to provide interoperability between Python 2 and Python 3 with a language syntax that matches one of the two Python versions: one may use"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:107
#: e863db78b4da4d82a9ce44bdb5498f11
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:108
#: 30072e56a81d494aa5c3a5959dfda79e
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:110
#: 6c051cc53ab0449f8e5777a0862cf53e
msgid "Because of the bi-directionality, python-future_ offers a pathway to converting a Python 2 package to Python 3 syntax module-by-module. However, in contrast to six_, python-future_ is supported only from Python 2.6. Similar to modernize_ for six_, python-future_ comes with two scripts called ``futurize`` and ``pasteurize`` that can be applied to either a Python 2 module or a Python 3 module respectively."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:117
#: 08ed57728fc44fe99053c2ca1f114b68
msgid "Use of six_ or python-future_ adds an additional runtime dependency to your package: with python-future_, the ``futurize`` script can be called with the ``--stage1`` option to apply only the changes that Python 2.6+ already provides for forward-compatibility to Python 3. Any remaining compatibility problems would require manual changes."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:124
#: 27471e93141b47eb86a9471ae6ec69b6
msgid "What's in which Python?"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:126
#: 0df3a80e31264f5195239a35096e2cbb
msgid "Ned Batchelder provides a list of changes in each Python release for `Python 2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, `Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used to check whether any changes between Python versions may affect your package."
msgstr ""
