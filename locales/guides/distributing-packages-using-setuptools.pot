# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/guides/distributing-packages-using-setuptools.rst:5
#: 16e52955e84a4bb39bfa910bd171c1e5
msgid "Packaging and distributing projects"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:7
#: de13ab499dfa469d9b7f619cad912357
msgid "This section covers the basics of how to configure, package and distribute your own Python projects.  It assumes that you are already familiar with the contents of the :doc:`/tutorials/installing-packages` page."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:11
#: 61130ad893eb4947935c2f150f09bca1
msgid "The section does *not* aim to cover best practices for Python project development as a whole.  For example, it does not provide guidance or tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:15
#: 2df7437533f34cc99dffc04c83ec5ae4
msgid "For more reference material, see :std:doc:`Building and Distributing Packages <userguide/index>` in the :ref:`setuptools` docs, but note that some advisory content there may be outdated. In the event of conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:22
#: e23ab86d222e448f991030c1d710b196
msgid "Contents"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:25
#: 2021a4e1ceb142dfa9f1e89c3b2dd3e9
msgid "Requirements for packaging and distributing"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:26
#: 8a7a60a0a45848daac166961219e056c
msgid "First, make sure you have already fulfilled the :ref:`requirements for installing packages <installing_requirements>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:29
#: f9cabef7284a44948a3d0fe02da7c85d
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:43
#: cd05d971d0d94247bbbb74b289e100ce
msgid "You'll need this to upload your project :term:`distributions <Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:49
#: 313ea0d6478141aa924d86eadcb9b6aa
msgid "Configuring your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:53
#: 4889e2982d2046ce8b2a644c33c2fef0
msgid "Initial files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:56
#: 8cfeac4fb34f45a58d0988b3afcd183b
msgid "setup.py"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:58
#: 74c9004bbf4d4d4d8e82fe973183845e
msgid "The most important file is :file:`setup.py` which exists at the root of your project directory. For an example, see the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:63
#: e1a1da0a4ff34e83be6e1d09d0da9385
msgid ":file:`setup.py` serves two primary functions:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:65
#: b7d768da5a22413baf9b8a8bc6d828c0
msgid "It's the file where various aspects of your project are configured. The primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined.  The most relevant arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:71
#: fcb73807283146a49ba8eadbef084b72
msgid "It's the command line interface for running various commands that relate to packaging tasks. To get a listing of available commands, run ``python setup.py --help-commands``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:77
#: 44544dcbc5f24848b8f7b4fa523e6b13
msgid "setup.cfg"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:79
#: d12276a20a714873a975b6fa21ff889e
msgid ":file:`setup.cfg` is an ini file that contains option defaults for :file:`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:86
#: cef70debbcb34a8fa94efad92ce51f2d
msgid "README.rst / README.md"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:88
#: 4199c6ad2294410d80ed4968a4cc70bf
msgid "All projects should contain a readme file that covers the goal of the project. The most common format is `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, although this is not a requirement; multiple variants of `Markdown <https://daringfireball.net/projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:`long_description_content_type <description>` argument)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:95
#: 70a7c8410b2c4757aa2ee2ee1468e0c0
msgid "For an example, see `README.md <https://github.com/pypa/sampleproject/blob/master/README.md>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:99
#: 593a09e26d054d1c9a21807b4aff0d3d
msgid "Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:`README.rst`, :file:`README.txt`, or :file:`README`) included in source distributions by default. The built-in :ref:`distutils` library adopts this behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ will include a :file:`README.md` if found. If you are using setuptools, you don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, include it to be explicit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:108
#: 581f142a17ee4007af533a482df7173a
msgid "MANIFEST.in"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:110
#: 0132eeb4df6e464bab1b3fbf582d6520
msgid "A :file:`MANIFEST.in` is needed when you need to package additional files that are not automatically included in a source distribution.  For details on writing a :file:`MANIFEST.in` file, including a list of what's included by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:115
#: 82c630a41ed04655bff7f4ede0ee68a7
msgid "For an example, see the `MANIFEST.in <https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:119
#: 1e3fa74f90a24aab967bca909b058294
msgid ":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:122
#: 872029c6fd1b463b836c68e19c1d0311
msgid "LICENSE.txt"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:124
#: 75ede077bbcb4828bdd9f299ce00c1d2
msgid "Every package should include a license file detailing the terms of distribution. In many jurisdictions, packages without an explicit license can not be legally used or distributed by anyone other than the copyright holder. If you're unsure which license to choose, you can use resources such as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a lawyer."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:130
#: 336e7cb053744b3082b0e8cbbb532827
msgid "For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/blob/master/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:135
#: 63e2e31346d149d7ae5206fa54e38dbb
msgid "<your package>"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:137
#: 38df187752a14c9f9c3d1a4b7a0dc393
msgid "Although it's not required, the most common practice is to include your Python modules and packages under a single top-level package that has the same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:141
#: ae53ffff5a9d4315af98a3c3f65b474b
msgid "For an example, see the `sample <https://github.com/pypa/sampleproject/tree/master/src/sample>`_ package that's included in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:149
#: 0b88a03576554dd8aaf387e29393ca08
msgid "setup() args"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:151
#: ae6accc3ab2a46cc8079efefa2766ea7
msgid "As mentioned above, the primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:155
#: 7279eb3cc1194da99d8bd18fd78b1d03
msgid "The most relevant arguments are explained below. Most of the snippets given are taken from the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:164
#: 4c273e6d96364cd0bad41c765b2f0db7
msgid "name"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:170
#: 1b692ee69b4142d08082da22e07b4ad5
msgid "This is the name of your project, determining how your project is listed on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid project names must:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:174
#: 2e59707c4a0a4fbba641d881475e176f
msgid "Consist only of ASCII letters, digits, underscores (``_``), hyphens (``-``), and/or periods (``.``), and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:176
#: a6c5e6c239fb44d19cdfe11edd79cc96
msgid "Start & end with an ASCII letter or digit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:178
#: 3e60b4acd50b4812ab0c6fb57eb1285a
msgid "Comparison of project names is case insensitive and treats arbitrarily-long runs of underscores, hyphens, and/or periods as equal.  For example, if you register a project named ``cool-stuff``, users will be able to download it or declare a dependency on it using any of the following spellings::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:190
#: 41e9aa86a6b5434c99e25de048966b90
msgid "version"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:196
#: 5d525d7f5fb841c583331166455fcde2
msgid "This is the current version of your project, allowing your users to determine whether or not they have the latest version, and to indicate which specific versions they've tested their own software against."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:200
#: 83f2dc478f5b49b2b3373ebfafc4b07f
msgid "Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for each release if you publish your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:203
#: 1b1017159d3345e6841294e516c85711
msgid "See :ref:`Choosing a versioning scheme` for more information on ways to use versions to convey compatibility information to your users."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:206
#: b88be345aa074108b923a2dd05220eef
msgid "If the project code itself needs run-time access to the version, the simplest way is to keep the version in both :file:`setup.py` and your code. If you'd rather not duplicate the value, there are a few ways to manage this. See the \":ref:`Single sourcing the version`\" Advanced Topics section."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:214
#: 79f5801d10674abcac8e6ffc56a2a65e
msgid "description"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:222
#: f3419c3c57af4b6d91025f80263ee4d8
msgid "Give a short and long description for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:224
#: b78d5e3107324e7a916bde8c06ce5f5b
msgid "These values will be displayed on :term:`PyPI <Python Package Index (PyPI)>` if you publish your project. On ``pypi.org``, the user interface displays ``description`` in the grey banner and ``long_description`` in the section named \"Project Description\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:229
#: feb421ae75214e47a771fc32888f5fd5
msgid "``description`` is also displayed in lists of projects. For example, it's visible in the search results pages such as https://pypi.org/search/?q=jupyter, the front-page lists of trending projects and new releases, and the list of projects you maintain within your account profile (such as https://pypi.org/user/jaraco/)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:235
#: b366dbfb5fdb4c13a8e623ee7e8e477b
msgid "A `content type <https://packaging.python.org/specifications/core-metadata/#description-content-type-optional>`_ can be specified with the ``long_description_content_type`` argument, which can be one of ``text/plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no formatting, `reStructuredText (reST) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`_, and the Github-flavored Markdown dialect of `Markdown <https://daringfireball.net/projects/markdown/>`_ respectively."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:245
#: 8d1ae6ea55254ffeb58aaf9b97553e08
msgid "url"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:252
#: 19313c6ec1e548e4a8c2d57ddd3cc8f3
msgid "Give a homepage URL for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:256
#: 4c73a18f7b754bcfac8c551f4ae3de59
msgid "author"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:263
#: 22985d37500e4604a397171c05779e73
msgid "Provide details about the author."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:267
#: 1d1dfa586cdd4ccd8d75ab85f1709c84
msgid "license"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:273
#: 9d1a7b65ef334269b2652c8beeb46901
msgid "The ``license`` argument doesn't have to indicate the license under which your package is being released, although you may optionally do so if you want.  If you're using a standard, well-known license, then your main indication can and should be via the ``classifiers`` argument. Classifiers exist for all major open-source licenses."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:279
#: 3b9f235506c440f5a29f1a7a0231d7a8
msgid "The \"license\" argument is more typically used to indicate differences from well-known licenses, or to include your own, unique license. As a general rule, it's a good idea to use a standard, well-known license, both to avoid confusion and because some organizations avoid software whose license is unapproved."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:287
#: bfd5b0658cbb4867a2ead328f778f5a3
msgid "classifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:316
#: 8c81615e1977434f9a4ef544f0b6d5f5
msgid "Provide a list of classifiers that categorize your project. For a full listing, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:319
#: 5eb1406974a04f13b9e10c948b9c9b9e
msgid "Although the list of classifiers is often used to declare what Python versions a project supports, this information is only used for searching & browsing projects on PyPI, not for installing projects.  To actually restrict what Python versions a project can be installed on, use the :ref:`python_requires` argument."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:327
#: 71d932e4812d4f9b8df3766d079a912d
msgid "keywords"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:333
#: 9902e00d1ba44594b0385ad8f678359a
msgid "List keywords that describe your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:337
#: c2d2ea5bc18c4c47acbc6110a363fdd4
msgid "project_urls"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:349
#: b76c972a083e4c9da0f0a0c390372256
msgid "List additional relevant URLs about your project. This is the place to link to bug trackers, source repositories, or where to support package development. The string of the key is the exact text that will be displayed on PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:355
#: ea61cb99bb4541bd89c225a64b2fa23e
msgid "packages"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:361
#: 5bf5de2b77384085a64700cf8500ec71
msgid "Set ``packages`` to a list of all :term:`packages <Import Package>` in your project, including their subpackages, sub-subpackages, etc.  Although the packages can be listed manually, ``setuptools.find_packages()`` finds them automatically.  Use the ``include`` keyword argument to find only the given packages.  Use the ``exclude`` keyword argument to omit packages that are not intended to be released and installed."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:370
#: f423b0d28bc34d988f366b938e13b112
msgid "py_modules"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:376
#: 5c014ab7efeb47a182b09913b896f891
msgid "If your project contains any single-file Python modules that aren't part of a package, set ``py_modules`` to a list of the names of the modules (minus the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:382
#: 29cc14398ac14101acbc67968d2b17c7
msgid "install_requires"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:388
#: cd7f58507f174ab8afe7d5e74a799e12
msgid "\"install_requires\" should be used to specify what dependencies a project minimally needs to run. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:392
#: 78cdc5642c144eb2b6d6744257bab725
msgid "For more on using \"install_requires\" see :ref:`install_requires vs Requirements files`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:398
#: 79de7d1f76a6492289fe4c7b3763ca16
msgid "python_requires"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:400
#: 58ed4923a69e4a2e917867a07cd9b9dd
msgid "If your project only runs on certain Python versions, setting the ``python_requires`` argument to the appropriate :pep:`440` version specifier string will prevent :ref:`pip` from installing the project on other Python versions.  For example, if your package is for Python 3+ only, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:407
#: d888c3b417104769a00b7ebf1c14a52f
msgid "If your package is for Python 2.6, 2.7, and all versions of Python 3 starting with 3.3, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:412
#: abb1c00f6e29483f88bf01918cdd3aee
msgid "And so on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:416
#: f1edf49618c74aab9a545d04276297ed
msgid "Support for this feature is relatively recent.  Your project's source distributions and wheels (see :ref:`Packaging Your Project`) must be built using at least version 24.2.0 of :ref:`setuptools` in order for the ``python_requires`` argument to be recognized and the appropriate metadata generated."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:422
#: 9b9280a926144433b9e9036bccb23f42
msgid "In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the ``python_requires`` metadata.  Users with earlier versions of pip will be able to download & install projects on any Python version regardless of the projects' ``python_requires`` values."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:431
#: 42d1b8e5bc6a407faa0a2f90df7ca69d
msgid "package_data"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:440
#: a4d7b2825b964240a468d2a3a139616b
msgid "Often, additional files need to be installed into a :term:`package <Import Package>`. These files are often data thatâ€™s closely related to the packageâ€™s implementation, or text files containing documentation that might be of interest to programmers using the package. These files are called \"package data\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:445
#: 094550928b5547318761c869ad56d1c1
msgid "The value must be a mapping from package name to a list of relative path names that should be copied into the package. The paths are interpreted as relative to the directory containing the package."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:449
#: 7fd2bafb12d646898693b233b40b36e2
msgid "For more information, see :std:doc:`Including Data Files <setuptools:userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:457
#: 7acec270d2b4400aa8fc22cce6b6c806
msgid "data_files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:463
#: 61b3d063eeab448689ac81eb3fb1371b
msgid "Although configuring :ref:`Package Data` is sufficient for most needs, in some cases you may need to place data files *outside* of your :term:`packages <Import Package>`.  The ``data_files`` directive allows you to do that. It is mostly useful if you need to install files which are used by other programs, which may be unaware of Python packages."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:469
#: 9e94acb3572f4ea08bd861b2aaea418a
msgid "Each ``(directory, files)`` pair in the sequence specifies the installation directory and the files to install there. The ``directory`` must be a relative path (although this may change in the future, see `wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_). and it is interpreted relative to the installation prefix (Pythonâ€™s ``sys.prefix`` for a default installation; ``site.USER_BASE`` for a user installation). Each file name in ``files`` is interpreted relative to the :file:`setup.py` script at the top of the project source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:479
#: 48e9a62653484dc19635547556b6a36b
msgid "For more information see the distutils section on `Installing Additional Files <http://docs.python.org/3/distutils/setupscript.html#installing-additional-files>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:484
#: 0892a7b26ab0490aa3893be473423cc9
msgid "When installing packages as egg, ``data_files`` is not supported. So, if your project uses :ref:`setuptools`, you must use ``pip`` to install it. Alternatively, if you must use ``python setup.py``, then you need to pass the ``--old-and-unmanageable`` option."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:491
#: e6363e3108ab4f1791af02d6e490e88b
msgid "scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:493
#: 9d33fabf0a1f4c92b7e0ebb215ec47b5
msgid "Although ``setup()`` supports a `scripts <http://docs.python.org/3/distutils/setupscript.html#installing-scripts>`_ keyword for pointing to pre-made scripts to install, the recommended approach to achieve cross-platform compatibility is to use :ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:500
#: 49f982340e4f4bac90f1fb355fcadce5
msgid "entry_points"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:509
#: 9635f573309d4cab8313a832c7e4801a
msgid "Use this keyword to specify any plugins that your project provides for any named entry points that may be defined by your project or others that you depend on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:512
#: 2169b026bbea40068c982c9a5a9716c3
msgid "For more information, see the section on `Advertising Behavior <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:516
#: 28ada1e46b2449e0a33a42c08e533d11
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:521
#: e09b49d33faf402b965bd35223015a5e
msgid "console_scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:531
#: 606d276bf3ab4ba686d9f050aa53c256
msgid "Use \"console_script\" `entry points <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ to register your script interfaces. You can then let the toolchain handle the work of turning these interfaces into actual scripts [2]_.  The scripts will be generated during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:538
#: ec6d3a8c6567475fb91074d121335f66
msgid "For more information, see `Automatic Script Creation <https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation>`_ from the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:545
#: b3befdb8783b47c4a48f85a6457cb0a1
msgid "Choosing a versioning scheme"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:548
#: daa516e5e2054d0a90f65592e6a0af69
msgid "Standards compliance for interoperability"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:550
#: 649f525d8b074cb3b8b5387bcb89a350
msgid "Different Python projects may use different versioning schemes based on the needs of that particular project, but all of them are required to comply with the flexible :pep:`public version scheme <440#public-version-identifiers>` specified in :pep:`440` in order to be supported in tools and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:556
#: 295c8a548d854ab4b3b398f2edcce02a
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:567
#: a8ce40b7185c490c8fd9af9a6022553e
msgid "To further accommodate historical variations in approaches to version numbering, :pep:`440` also defines a comprehensive technique for :pep:`version normalisation <440#normalization>` that maps variant spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:573
#: 5b1ae40433084254a67ae87100c7ce63
msgid "Scheme choices"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:576
#: 978dadfc514747c38efcc453200b563e
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:578
#: 23c0b3abbdf34eaf9f6a5dd6eb13c324
msgid "For new projects, the recommended versioning scheme is based on `Semantic Versioning <http://semver.org>`_, but adopts a different approach to handling pre-releases and build metadata."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:582
#: 73b58e16d27244f3ba16b90f380ecf00
msgid "The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE numbering scheme, where the project author increments:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:585
#: 80067f291d0a4508a13069d35772bc38
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:586
#: dc6ccdcddbf6463b876fb9a1b01403a6
msgid "MINOR version when they add functionality in a backwards-compatible manner, and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:587
#: 94278263d4834fb08d35ef02d117104b
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:589
#: bc574ddc7734420ba09f67c7e984da5e
msgid "Adopting this approach as a project author allows users to make use of :pep:`\"compatible release\" <440#compatible-release>` specifiers, where ``name ~= X.Y`` requires at least release X.Y, but also allows any later release with a matching MAJOR version."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:594
#: e71dd9f512bd46f6a6f8e1c7e5b26f0e
msgid "Python projects adopting semantic versioning should abide by clauses 1-8 of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:598
#: 1e6db7c6d88842deadec9d8538367268
msgid "Date based versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:600
#: 91643b8006a44a91b1cf96fbf07f9ba1
msgid "Semantic versioning is not a suitable choice for all projects, such as those with a regular time based release cadence and a deprecation process that provides warnings for a number of releases prior to removal of a feature."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:604
#: 595770349da34553a4cae4c7bf49a5ea
msgid "A key advantage of date based versioning is that it is straightforward to tell how old the base feature set of a particular release is given just the version number."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:607
#: 30b6bf099f9e4664b52580925d8882eb
msgid "Version numbers for date based projects typically take the form of YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:611
#: 3263e863052641c7816c161f234d252c
msgid "Serial versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:613
#: ee09e3dcc8bc45e386a988356337a391
msgid "This is the simplest possible versioning scheme, and consists of a single number which is incremented every release."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:616
#: 45a41c70e3464c8b89ae0e9672a0f7f5
msgid "While serial versioning is very easy to manage as a developer, it is the hardest to track as an end user, as serial version numbers convey little or no information regarding API backwards compatibility."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:621
#: 20c3d70a705c4c53a97f593328730dfd
msgid "Hybrid schemes"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:623
#: 08485cf0281f477183f556201d7ca77b
msgid "Combinations of the above schemes are possible. For example, a project may combine date based versioning with serial versioning to create a YEAR.SERIAL numbering scheme that readily conveys the approximate age of a release, but doesn't otherwise commit to a particular release cadence within the year."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:629
#: 9a2d3eca1aae4e5e9da011c5ad4dc972
msgid "Pre-release versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:631
#: dcf91db7ffcc4cff8251c7d073addf86
msgid "Regardless of the base versioning scheme, pre-releases for a given final release may be published as:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:634
#: 92c67a73585c4299a2a5be65b3ca49d2
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:635
#: 55e702b4b73244fbaae5ba2f0cfc2aae
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:636
#: 2dbdda23bde445df8e66d7c36064329c
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:637
#: 16c184fb6ff44143be54a61ddf76b7af
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:639
#: 38e5e6f380c741388e6876fe1549042c
msgid "``pip`` and other modern Python package installers ignore pre-releases by default when deciding which versions of dependencies to install."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:644
#: f7ee2dbce5d3425abd3404e0bbb9a2e1
msgid "Local version identifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:646
#: f8c966da3bdc478aa453bb39a618071a
msgid "Public version identifiers are designed to support distribution via :term:`PyPI <Python Package Index (PyPI)>`. Python's software distribution tools also support the notion of a :pep:`local version identifier <440#local-version-identifiers>`, which can be used to identify local development builds not intended for publication, or modified variants of a release maintained by a redistributor."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:653
#: 9f3c8a007ea44684abc386c3c421709b
msgid "A local version identifier takes the form ``<public version identifier>+<local version label>``. For example::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:661
#: 9430ad3226554349ab61d07bb99b00c2
msgid "Working in \"development mode\""
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:663
#: d3863a3b30704ddf986fb58dbee450ac
msgid "Although not required, it's common to locally install your project in \"editable\" or \"develop\" mode while you're working on it.  This allows your project to be both installed and editable in project form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:667
#: 7a396799f689494eab963b03b6394010
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:674
#: cca49fbb774b44f0aac121a1aab173a6
msgid "Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` refers to the current working directory, so together, it means to install the current directory (i.e. your project) in editable mode.  This will also install any dependencies declared with \"install_requires\" and any scripts declared with \"console_scripts\".  Dependencies will be installed in the usual, non-editable mode."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:680
#: af9405491d8d4917b3681f55610d4ba7
msgid "It's fairly common to also want to install some of your dependencies in editable mode as well. For example, supposing your project requires \"foo\" and \"bar\", but you want \"bar\" installed from VCS in editable mode, then you could construct a requirements file like so::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:688
#: 118332ae897b4dd2ae27b3f9584b4793
msgid "The first line says to install your project and any dependencies. The second line overrides the \"bar\" dependency, such that it's fulfilled from VCS, not PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:692
#: 728a93b68f644834bca53c6bec7aa3af
msgid "If, however, you want \"bar\" installed from a local directory in editable mode, the requirements file should look like this, with the local paths at the top of the file::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:697
#: 7648cfba150841328de64e931b324f70
msgid "Otherwise, the dependency will be fulfilled from PyPI, due to the installation order of the requirements file.  For more on requirements files, see the :ref:`Requirements File <pip:Requirements Files>` section in the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:701
#: d3244e2ec2894a528205db3d81fd2e38
msgid "Lastly, if you don't want to install any dependencies at all, you can run::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:706
#: 6f7f600299804d09bab5d0e0d6844f61
msgid "For more information, see the `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_ section of the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:713
#: 1b3a329188fb4a8bb22db3efad145284
msgid "Packaging your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:715
#: 017bb0c8b5df46e1a43e50c69a412771
msgid "To have your project installable from a :term:`Package Index` like :term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:`Distribution <Distribution Package>` (aka \":term:`Package <Distribution Package>`\") for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:720
#: e79e2a91790c44778464fc75c15900e4
msgid "Before you can build wheels and sdists for your project, you'll need to install the ``build`` package:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:737
#: 2437d9af62784de584748bc6eec5aa9b
msgid "Source distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:739
#: 4045ba299a824856abe1484eb8d80205
msgid "Minimally, you should create a :term:`Source Distribution <Source Distribution (or \"sdist\")>`:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:755
#: 0f8c1fca70c240439bc019b18d60e4d3
msgid "A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built Distribution`), and requires a build step when installed by pip.  Even if the distribution is pure Python (i.e. contains no extensions), it still involves a build step to build out the installation metadata from :file:`setup.py` and/or :file:`setup.cfg`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:763
#: 1617729b5a184ec1871162c8d40fb2b4
msgid "Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:765
#: 971a8a326502492280f695c2fc274616
msgid "You should also create a wheel for your project. A wheel is a :term:`built package <Built Distribution>` that can be installed without needing to go through the \"build\" process. Installing wheels is substantially faster for the end user than installing from a source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:770
#: 342b802674564e0b90361b5ebf5ac3de
msgid "If your project is pure Python then you'll be creating a :ref:`\"Pure Python Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:773
#: 4213396ed29b461187420f4b06112f91
msgid "If your project contains compiled extensions, then you'll be creating what's called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:776
#: a50d0513d67245408ee5e596a67fd04e
msgid "If your project also supports Python 2 *and* contains no C extensions, then you should create what's called a *Universal Wheel* by adding the following to your :file:`setup.cfg` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:785
#: a04471d3046947b5ba44e7ee24a099fd
msgid "Only use this setting if your project does not have any C extensions *and* supports Python 2 and 3."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:792
#: 024464b46e9746039e223a89b49c80ac
msgid "Pure Python Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:794
#: 6851107df7de4382a3e1cc73786e034e
msgid "*Pure Python Wheels* contain no compiled extensions, and therefore only require a single Python wheel."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:797
#: ../source/guides/distributing-packages-using-setuptools.rst:826
#: 496451d49b944f34bdf97ff1446d00a7
#: 07d0695b395149afa882871de347aa84
msgid "To build the wheel:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:811
#: dc3ff6a2144f435eab01d7b01f0beaa9
msgid "The ``wheel`` package will detect that the code is pure Python, and build a wheel that's named such that it's usable on any Python 3 installation.  For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:815
#: 6d4f8c07a4f1451e919d1ee4e0c94856
msgid "If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both files for you; this is useful when you don't need multiple wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:821
#: 89c9c97b42d74c1ba774ae48dd910363
msgid "Platform Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:823
#: 5cb280ca6fe1410aa6e4a990d6037259
msgid "*Platform Wheels* are wheels that are specific to a certain platform like Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:841
#: c7c3ea2f10a6490f9fdcbe656f171878
msgid "The ``wheel`` package will detect that the code is not pure Python, and build a wheel that's named such that it's only usable on the platform that it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:847
#: 66ea4cea01324c21b0da0dd6d38627f2
msgid ":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:855
#: c633ca310c354efdac0ebc874fa4b2bf
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:857
#: 250ccf90e95a41e4955020f5d9f8bf5c
msgid "When you ran the command to create your distribution, a new directory ``dist/`` was created under your project's root directory. That's where you'll find your distribution file(s) to upload."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:861
#: f1611d1ec5dc4e60829e2f99418bbe21
msgid "These files are only created when you run the command to create your distribution. This means that any time you change the source of your project or the configuration in your :file:`setup.py` file, you will need to rebuild these files again before you can distribute the changes to PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:866
#: c6936d26f0b3431f9557cd717fea3a30
msgid "Before releasing on main PyPI repo, you might prefer training with the `PyPI test site <https://test.pypi.org/>`_ which is cleaned on a semi regular basis. See :ref:`using-test-pypi` on how to setup your configuration in order to use it."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:871
#: 5d5988812f864b899e706274e0fa72bc
msgid "In other resources you may encounter references to using ``python setup.py register`` and ``python setup.py upload``. These methods of registering and uploading a package are **strongly discouraged** as it may use a plaintext HTTP or unverified HTTPS connection on some Python versions, allowing your username and password to be intercepted during transmission."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:877
#: 968c5d13f2824f9db9ad8ea82a1ce51e
msgid "The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to ensure safety of all users, certain kinds of URLs and directives are forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** trying to upload your distribution, you should check to see if your brief / long descriptions provided in :file:`setup.py` are valid.  You can do this by running :std:doc:`twine check <index>` on your package files::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:888
#: 2bb47df377bd405da07999192a970520
msgid "Create an account"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:890
#: bb7de465c6e840b5927a9f58f75163f5
msgid "First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. You can create an account `using the form on the PyPI website <https://pypi.org/account/register/>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:894
#: 303e2e15373442beaa5c34291c991934
msgid "Now you'll create a PyPI `API token`_ so you will be able to securely upload your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:897
#: 3021cfb113124b9a926187a1787f1732
msgid "Go to https://pypi.org/manage/account/#api-tokens and create a new `API token`_; don't limit its scope to a particular project, since you are creating a new project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:901
#: aae5ba7c00ee43b687a5558d1f0eaa30
msgid "**Don't close the page until you have copied and saved the token â€” you won't see that token again.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:904
#: 7f15df5cb9d44a079479bd2a3a5e7174
msgid "To avoid having to copy and paste the token every time you upload, you can create a :file:`$HOME/.pypirc` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:913
#: 2912fb00f058499986995ae5fc3d5f5f
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:915
#: 71d6d387e73241e3a8ae2040d059e3c8
msgid "For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:921
#: 11a4ac992afe4e5ea4d88f4a465d45fc
msgid "Upload your distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:923
#: aebe65ad51d044988e5f36d7871151a0
msgid "Once you have an account you can upload your distributions to :term:`PyPI <Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:926
#: a966b0ef9df04d1185a63210ce33be65
msgid "The process for uploading a release is the same regardless of whether or not the project already exists on PyPI - if it doesn't exist yet, it will be automatically created when the first release is uploaded."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:930
#: 231dbba6b0934d529fd6b20373759b81
msgid "For the second and subsequent releases, PyPI only requires that the version number of the new release differ from any previous releases."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:937
#: b5876f5c2ae241f3826099f4e8b0d10f
msgid "You can see if your package has successfully uploaded by navigating to the URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is the name of your project that you uploaded. It may take a minute or two for your project to appear on the site."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:944
#: 912bbc02f4794804a172d7a51b7d3a9c
msgid "Depending on your platform, this may require root or Administrator access. :ref:`pip` is currently considering changing this by `making user installs the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:950
#: f993df658a3147959bb540d5b8f9b84e
msgid "Specifically, the \"console_script\" approach generates ``.exe`` files on Windows, which are necessary because the OS special-cases ``.exe`` files. Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher for Windows <397>` allow scripts to be used in many cases, but not all."
msgstr ""
