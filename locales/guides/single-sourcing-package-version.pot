# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/guides/single-sourcing-package-version.rst:5
#: d16e452d5ee24b8895397b7f8c3d1e2d
msgid "Single-sourcing the package version"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:8
#: d15d384210d041c4bb364b2842902155
msgid "There are many techniques to maintain a single source of truth for the version number of your project:"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:11
#: c42f8f4d5a8441d59f66b5c55ada4575
msgid "Read the file in :file:`setup.py` and get the version. Example (from `pip setup.py <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:38
#: 6e1c77c06a8a4cf78feaab618f7fe451
msgid "As of the release of setuptools 46.4.0, one can accomplish the same thing by instead placing the following in the project's ``setup.cfg`` file (replacing \"package\" with the import name of the package):"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:47
#: 5bf29445913a459e8de9b8a422f12bcc
msgid "Earlier versions of setuptools implemented the ``attr:`` directive by importing the module, but setuptools 46.4.0 added rudimentary AST analysis so that ``attr:`` can function without having to import any of the package's dependencies."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:52
#: cdc5ebe239694b74b3b5c2ab63f33665
msgid "Also, please be aware that declarative config indicators, including the ``attr:`` directive, are not supported in parameters to ``setup.py``."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:55
#: 8c865cb2be4747fa86d116ccd45d1e06
msgid "Use an external build tool that either manages updating both locations, or offers an API that both locations can use."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:58
#: 6d667ab9e79c48308b276475c31f55c8
msgid "Few tools you could use, in no particular order, and not necessarily complete: `bump2version <https://pypi.org/project/bump2version>`_, `changes <https://pypi.org/project/changes>`_, `commitizen <https://pypi.org/project/commitizen>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:65
#: ab3a32bf29ed47e2989cea036cc1ebaa
msgid "Set the value to a ``__version__`` global variable in a dedicated module in your project (e.g. :file:`version.py`), then have :file:`setup.py` read and ``exec`` the value into a variable."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:76
#: 0d00f83e11cd4de0aeaa1b156962c206
msgid "Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:78
#: a19804be907a49e4b66f47ed6d50b6d5
msgid "Place the value in a simple ``VERSION`` text file and have both :file:`setup.py` and the project code read it."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:86
#: c582312448fe4fb5886fcbd1cd97d77c
msgid "An advantage with this technique is that it's not specific to Python.  Any tool can read the version."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:91
#: 6d120be79c504a04aea960983befb4bf
msgid "With this approach you must make sure that the ``VERSION`` file is included in all your source and binary distributions (e.g. add ``include VERSION`` to your :file:`MANIFEST.in`)."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:95
#: 0f6833ac5a7c4e1ca8d09cffef9bd0ab
msgid "Set the value in :file:`setup.py`, and have the project code use the ``importlib.metadata`` API to fetch the value at runtime. (``importlib.metadata`` was introduced in Python 3.8 and is available to older versions as the ``importlib-metadata`` project.)  An installed project's version can be fetched with the API as follows::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:110
#: 4d02d21db05742c8aaf020d528d9a645
msgid "Be aware that the ``importlib.metadata`` API only knows about what's in the installation metadata, which is not necessarily the code that's currently imported."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:114
#: 6efee8ea07b8410f8e8c1f695d6c78b5
msgid "If a project uses this method to fetch its version at runtime, then its ``install_requires`` value needs to be edited to install ``importlib-metadata`` on pre-3.8 versions of Python like so::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:128
#: 553ecf811cf34d7e88b2325fbdf23045
msgid "An older (and less efficient) alternative to ``importlib.metadata`` is the ``pkg_resources`` API provided by ``setuptools``::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:134
#: e86c143a38154f73a8fc58dc43507786
msgid "If a project uses ``pkg_resources`` to fetch its own version at runtime, then ``setuptools`` must be added to the project's ``install_requires`` list."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:138
#: acff0a9f899441b8a010a44078557400
msgid "Example using this technique: `setuptools <https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:141
#: f2128adbb2a8424e9728ac15741d0f79
msgid "Set the value to ``__version__`` in ``sample/__init__.py`` and import ``sample`` in :file:`setup.py`."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:155
#: 5fee0bdcd2d643cb90c5e6aab90a78ac
msgid "Although this technique is common, beware that it will fail if ``sample/__init__.py`` imports packages from ``install_requires`` dependencies, which will very likely not be installed yet when :file:`setup.py` is run."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:161
#: 192d71e314944b0fa7b04e9c1a01a3d1
msgid "Keep the version number in the tags of a version control system (Git, Mercurial, etc) instead of in the code, and automatically extract it from there using `setuptools_scm <https://pypi.org/project/setuptools_scm>`_."
msgstr ""
