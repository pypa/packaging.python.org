# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 20:23+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: zh_Hant\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/contribute.rst:5
#: 4b4b81dd9f7e4f5cab0a8cc5aacb48df
msgid "Contribute to this guide"
msgstr ""

#: ../source/contribute.rst:7
#: 8c3c265f8e434103b9e8c0c6e0f58fa3
msgid "The |PyPUG| welcomes contributors! There are lots of ways to help out, including:"
msgstr ""

#: ../source/contribute.rst:10
#: 7f8e0f632f6f4c529b82501fbc2f1866
msgid "Reading the guide and giving feedback"
msgstr ""

#: ../source/contribute.rst:11
#: 19e11e6ee524490980eaf270c921e201
msgid "Reviewing new contributions"
msgstr ""

#: ../source/contribute.rst:12
#: 005d710db4a24114a9451e69ea803f75
msgid "Revising existing content"
msgstr ""

#: ../source/contribute.rst:13
#: be9c3469488f453bab21faf6121f03c3
msgid "Writing new content"
msgstr ""

#: ../source/contribute.rst:15
#: 07ae0d8be0754221b62c23ac633506e7
msgid "Most of the work on the |PyPUG| takes place on the `project's GitHub repository`__. To get started, check out the list of `open issues`__ and `pull requests`__. If you're planning to write or edit the guide, please read the :ref:`style guide <contributing_style_guide>`."
msgstr ""

#: ../source/contribute.rst:24
#: 84efaec9e3bf46db9d7802f03dcfe8cd
msgid "By contributing to the |PyPUG|, you're expected to follow the PSF's `Code of Conduct`__."
msgstr ""

#: ../source/contribute.rst:31
#: c7d593aac3d848e1a25ad0cbd076baa4
msgid "Documentation types"
msgstr ""

#: ../source/contribute.rst:33
#: 7fc67de0a19f4dff9c8e61ab46152f4e
msgid "This project consists of four distinct documentation types with specific purposes. When proposing new additions to the project please pick the appropriate documentation type."
msgstr ""

#: ../source/contribute.rst:38
#: ../source/tutorials/index.rst:2
#: a80c0dbac18b4c0ea500fe0e0a332f14
#: 4991aa80b3414dd1a7f049abb0e8cd96
msgid "Tutorials"
msgstr ""

#: ../source/contribute.rst:40
#: 64e0943472224fa2a7ae083308058255
msgid "Tutorials are focused on teaching the reader new concepts by accomplishing a goal. They are opinionated step-by-step guides. They do not include extraneous warnings or information. `example tutorial-style document`_."
msgstr ""

#: ../source/contribute.rst:47
#: ../source/guides/index.rst:2
#: dc0c123548514b5e9314bb96e94d9b7f
#: dca35e7872bf48fd971103a3db41b059
msgid "Guides"
msgstr ""

#: ../source/contribute.rst:49
#: eac550b6f9214981961fd449623c140c
msgid "Guides are focused on accomplishing a specific task and can assume some level of pre-requisite knowledge. These are similar to tutorials, but have a narrow and clear focus and can provide lots of caveats and additional information as needed. They may also discuss multiple approaches to accomplishing the task. :doc:`example guide-style document <guides/packaging-namespace-packages>`."
msgstr ""

#: ../source/contribute.rst:56
#: ../source/discussions/index.rst:2
#: 6b6f738be0c54dac8b983ddd68c389c0
#: a40988be757e4d39aa9b291caf6f9066
msgid "Discussions"
msgstr ""

#: ../source/contribute.rst:58
#: f939ebb96c70459e811d49702c61f5af
msgid "Discussions are focused on understanding and information. These explore a specific topic without a specific goal in mind. :doc:`example discussion-style document <discussions/install-requires-vs-requirements>`."
msgstr ""

#: ../source/contribute.rst:63
#: c9d838ccc5ff49c4818f2fef64f904d9
msgid "Specifications"
msgstr ""

#: ../source/contribute.rst:65
#: fc0f14f2b1b34594a6f4b969bb1e526a
msgid "Specifications are reference documention focused on comprehensively documenting an agreed-upon interface for interoperability between packaging tools. :doc:`example specification-style document <specifications/core-metadata>`."
msgstr ""

#: ../source/contribute.rst:73
#: 75cb8bf88f734b939653e7b0125c61ba
msgid "Building the guide locally"
msgstr ""

#: ../source/contribute.rst:75
#: 10373e4e92f04cf287377f24874a2c9b
msgid "Though not required to contribute, it may be useful to build this guide locally in order to test your changes. In order to build this guide locally, you'll need:"
msgstr ""

#: ../source/contribute.rst:79
#: 4f5ac3548b4a491ea6728831a82feb5e
msgid "`Nox <https://nox.readthedocs.io/en/latest/>`_. You can install or upgrade nox using ``pip``::"
msgstr ""

#: ../source/contribute.rst:84
#: 417a2a3069794e2690390edcb8544dd0
msgid "Python 3.6. Our build scripts are designed to work with Python 3.6 only. See the `Hitchhiker's Guide to Python installation instructions`_ to install Python 3.6 on your operating system."
msgstr ""

#: ../source/contribute.rst:91
#: 3f30eb8889dc42bdba21fdb33c05f9f1
msgid "To build the guide, run the following bash command in the source folder::"
msgstr ""

#: ../source/contribute.rst:95
#: b64b8afa1d554898b3df3b3a52f263f4
msgid "After the process has completed you can find the HTML output in the ``./build/html`` directory. You can open the ``index.html`` file to view the guide in web browser, but it's recommended to serve the guide using an HTTP server."
msgstr ""

#: ../source/contribute.rst:100
#: 0df0a603150640b592ff11d6bcaf2c61
msgid "You can build the guide and serve it via an HTTP server using the following command::"
msgstr ""

#: ../source/contribute.rst:105
#: 8a1f9658c63642648717febcb9b2c912
msgid "The guide will be browsable via http://localhost:8000."
msgstr ""

#: ../source/contribute.rst:109
#: eed47ff9f93045928f6d0c5436e97ffc
msgid "Where the guide is deployed"
msgstr ""

#: ../source/contribute.rst:111
#: 922947daf55f43d197d6bd04c6189df2
msgid "The guide is deployed via ReadTheDocs and the configuration lives at https://readthedocs.org/projects/python-packaging-user-guide/. It's served from a custom domain and fronted by Fast.ly."
msgstr ""

#: ../source/contribute.rst:117
#: 7dbb7bb5064f496ca37ea73bd16ae987
msgid "Style guide"
msgstr ""

#: ../source/contribute.rst:119
#: 72697e4285d34c4ca25e88f9a91e2637
msgid "This style guide has recommendations for how you should write the |PyPUG|. Before you start writing, please review it. By following the style guide, your contributions will help add to a cohesive whole and make it easier for your contributions to be accepted into the project."
msgstr ""

#: ../source/contribute.rst:126
#: 7015e5b412e045dbb5242b767635f289
msgid "Purpose"
msgstr ""

#: ../source/contribute.rst:128
#: 74c444cce0a94a27bfa102352ec2a689
msgid "The purpose of the |PyPUG| is to be the authoritative resource on how to package, publish, and install Python projects using current tools."
msgstr ""

#: ../source/contribute.rst:133
#: 2d2b615c4a914e62867639b4252b6b91
msgid "Scope"
msgstr ""

#: ../source/contribute.rst:135
#: d78849146c0c4d7fb78e67ca0b8d955f
msgid "The guide is meant to answer questions and solve problems with accurate and focused recommendations."
msgstr ""

#: ../source/contribute.rst:138
#: 18b4ddf4dd8f49af82fd1a2c992cdc88
msgid "The guide isn't meant to be comprehensive and it's not meant to replace individual projects' documentation. For example, pip has dozens of commands, options, and settings. The pip documentation describes each of them in detail, while this guide describes only the parts of pip that are needed to complete the specific tasks described in this guide."
msgstr ""

#: ../source/contribute.rst:146
#: 119ad107720047d3a786cb719daa316f
msgid "Audience"
msgstr ""

#: ../source/contribute.rst:148
#: 01c06981dabb489db031c4051072dd3e
msgid "The audience of this guide is anyone who uses Python with packages."
msgstr ""

#: ../source/contribute.rst:150
#: 6540f95b521143109cc0ce7710670067
msgid "Don't forget that the Python community is big and welcoming. Readers may not share your age, gender, education, culture, and more, but they deserve to learn about packaging just as much as you do."
msgstr ""

#: ../source/contribute.rst:154
#: 5c70dfc3ec884c829a3265e9633f7849
msgid "In particular, keep in mind that not all people who use Python see themselves as programmers. The audience of this guide includes astronomers or painters or students as well as professional software developers."
msgstr ""

#: ../source/contribute.rst:160
#: 853552b394694acca070691f6746c912
msgid "Voice and tone"
msgstr ""

#: ../source/contribute.rst:162
#: 44937601f35941c2a8dba4aa1cf173d4
msgid "When writing this guide, strive to write with a voice that's approachable and humble, even if you have all the answers."
msgstr ""

#: ../source/contribute.rst:165
#: 11850943d79947f5894f54625ce94078
msgid "Imagine you're working on a Python project with someone you know to be smart and skilled. You like working with them and they like working with you. That person has asked you a question and you know the answer. How do you respond? *That* is how you should write this guide."
msgstr ""

#: ../source/contribute.rst:170
#: 75f454c6608d4bac8a5e7b7582df1565
msgid "Here's a quick check: try reading aloud to get a sense for your writing's voice and tone. Does it sound like something you would say or does it sound like you're acting out a part or giving a speech? Feel free to use contractions and don't worry about sticking to fussy grammar rules. You are hereby granted permission to end a sentence in a preposition, if that's what you want to end it with."
msgstr ""

#: ../source/contribute.rst:177
#: 082a7ab535b24f8ab33faa3322b8b7c7
msgid "When writing the guide, adjust your tone for the seriousness and difficulty of the topic. If you're writing an introductory tutorial, it's OK to make a joke, but if you're covering a sensitive security recommendation, you might want to avoid jokes altogether."
msgstr ""

#: ../source/contribute.rst:184
#: 08fbbf43937d406093ba7a47f7132dba
msgid "Conventions and mechanics"
msgstr ""

#: ../source/contribute.rst:192
#: e66d6b29aaaa4d618b6b4e7bc46a0ce6
msgid "**Write to the reader**"
msgstr ""

#: ../source/contribute.rst:187
#: ef81df07380f4a26bc5ac7e4d8e18223
msgid "When giving recommendations or steps to take, address the reader as *you* or use the imperative mood."
msgstr ""

#: ../source/contribute.rst:0
#: 1d945ab1a20f472d91deed8b5202872e
msgid "Wrong: To install it, the user runs…"
msgstr ""

#: ../source/contribute.rst:0
#: e037c932a54d4c32a7b866c6fe196497
msgid "Right: You can install it by running…"
msgstr ""

#: ../source/contribute.rst:0
#: 75878821163c491aa0cc11ae3b427be1
msgid "Right: To install it, run…"
msgstr ""

#: ../source/contribute.rst:198
#: ed92c95b8cc248a2b83cc45347534ba1
msgid "**State assumptions**"
msgstr ""

#: ../source/contribute.rst:195
#: 32e930cb1ad149a49e57845988d07111
msgid "Avoid making unstated assumptions. Reading on the web means that any page of the guide may be the first page of the guide that the reader ever sees. If you're going to make assumptions, then say what assumptions that you're going to make."
msgstr ""

#: ../source/contribute.rst:203
#: 418de2aaf7db42eeb1f25f940bd7158d
msgid "**Cross-reference generously**"
msgstr ""

#: ../source/contribute.rst:201
#: d4e48d39308f42278d81e24d72e75f2f
msgid "The first time you mention a tool or practice, link to the part of the guide that covers it, or link to a relevant document elsewhere. Save the reader a search."
msgstr ""

#: ../source/contribute.rst:213
#: ee3267b908334bf693dbc9890d18d218
msgid "**Respect naming practices**"
msgstr ""

#: ../source/contribute.rst:206
#: 5c0bf722e42348bcadc25c1a5af006f5
msgid "When naming tools, sites, people, and other proper nouns, use their preferred capitalization."
msgstr ""

#: ../source/contribute.rst:0
#: e467152ececd48929866c83e1f316e6a
msgid "Wrong: Pip uses…"
msgstr ""

#: ../source/contribute.rst:0
#: 2ae88e77e3ad474b8c92dd5a80efb4b9
msgid "Right: pip uses…"
msgstr ""

#: ../source/contribute.rst:0
#: 1cfd8c48e0114fbb86e8a9a3f437fd95
msgid "Wrong: …hosted on github."
msgstr ""

#: ../source/contribute.rst:0
#: a4490d49a5194c16a59f3c20347d68ab
msgid "Right: …hosted on GitHub."
msgstr ""

#: ../source/contribute.rst:222
#: 10cd271545754aeea04a9408efbd7f08
msgid "**Use a gender-neutral style**"
msgstr ""

#: ../source/contribute.rst:216
#: fd952939dee34116a54eacf05c55f200
msgid "Often, you'll address the reader directly with *you*, *your* and *yours*. Otherwise, use gender-neutral pronouns *they*, *their*, and *theirs* or avoid pronouns entirely."
msgstr ""

#: ../source/contribute.rst:0
#: 29e0fe58ef7e431aa2f4ec00253dea61
msgid "Wrong: A maintainer uploads the file. Then he…"
msgstr ""

#: ../source/contribute.rst:0
#: a00f120bd4bd4cfeaea0e86d26535b96
msgid "Right: A maintainer uploads the file. Then they…"
msgstr ""

#: ../source/contribute.rst:0
#: e895c4e0d06f4b2b9219149eb9f74f73
msgid "Right: A maintainer uploads the file. Then the maintainer…"
msgstr ""

#: ../source/contribute.rst:234
#: c69d3224b7514fc0ae66224879158e1a
msgid "**Headings**"
msgstr ""

#: ../source/contribute.rst:225
#: 6f05ab7502634e98be1fee33fb73a34d
msgid "Write headings that use words the reader is searching for. A good way to do this is to have your heading complete an implied question. For example, a reader might want to know *How do I install MyLibrary?* so a good heading might be *Install MyLibrary*."
msgstr ""

#: ../source/contribute.rst:230
#: c60361e884b5425caf3f38239ce7127d
msgid "In section headings, use sentence case. In other words, write headings as you would write a typical sentence."
msgstr ""

#: ../source/contribute.rst:0
#: e9fb873974f54ab9a1f00c3aa26fd26d
msgid "Wrong: Things You Should Know About Python"
msgstr ""

#: ../source/contribute.rst:0
#: 500ff2e33eeb464380cfeddd63c44e63
msgid "Right: Things you should know about Python"
msgstr ""

#: ../source/contribute.rst:237
#: 4c4d45fe2b1f40c1964eecb0d13c0e32
msgid "**Numbers**"
msgstr ""

#: ../source/contribute.rst:237
#: 1b721d4851114970834ccc9d64db2b6b
msgid "In body text, write numbers one through nine as words. For other numbers or numbers in tables, use numerals."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:4
#: ecc45018faeb40ad919faede6a983723
msgid "Deploying Python applications"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
#: a7ea3bc7f0fe41f2bb5d677b49d20e44
#: 9b940945ad834103bc34970fb7e97eba
#: fab9f0d547c84c12940b1f51fb0ddec5
#: 861ab2e733dc49d5affd99881b9c65b5
#: 2e808407d7834f5b9a805128762940d2
#: dc3a17616f8545a19262b82d85c71629
msgid "Page Status"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:6
#: ../source/guides/index-mirrors-and-caches.rst:7
#: ../source/guides/installing-using-linux-tools.rst:7
#: ../source/guides/packaging-binary-extensions.rst:7
#: ../source/guides/supporting-multiple-python-versions.rst:7
#: ../source/guides/supporting-windows-using-appveyor.rst:5
#: 60f0a9798eee494c9916349a75a9b62a
#: f134bcb8e184428f9b4d86da12e7bd14
#: f68d7f01fd2643c0b80573e833856dc8
#: de67808664e84c2ba35a83a0447466f6
#: b9b9c46065e64a9985f7d530a34a5858
#: 020981d628654b4984cc00215a8d19e7
msgid "Incomplete"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
#: 8a326ab09ada4c578367923fae778563
#: 9dd221cc97a244e9be6616c4f1f7c0e7
#: 48d1a5a257ef46e6827bd002c36dac23
#: e721f1e8f9e64a47a949b421cfb059de
#: a43defd11b6d4823aa666b04693de055
#: 08f94adfd60a4a44a5a901b998e7c53e
msgid "Last Reviewed"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:7
#: 5262552b7afe49298ec42068688d507b
msgid "2014-11-11"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:11
#: ../source/discussions/install-requires-vs-requirements.rst:9
#: ../source/guides/analyzing-pypi-package-downloads.rst:12
#: ../source/guides/distributing-packages-using-setuptools.rst:22
#: ../source/guides/index-mirrors-and-caches.rst:12
#: ../source/guides/installing-scientific-packages.rst:9
#: ../source/guides/packaging-binary-extensions.rst:17
#: ../source/guides/supporting-multiple-python-versions.rst:12
#: ../source/guides/supporting-windows-using-appveyor.rst:15
#: ../source/overview.rst:23
#: ../source/specifications/core-metadata.rst:38
#: ../source/specifications/direct-url.rst:14
#: ../source/tutorials/installing-packages.rst:23
#: 462f21dd8f824bd29b9bcfbecc72f84f
#: ce3f6d51633e431ea449c8a022f0d1f5
#: 334e6219904c44a29518fd5621a67ab5
#: 1646356ba975409a8c6e96781b5a02da
#: bc23b0549be34f92a3aae077e11dd7db
#: 73d8c4525c8841679deaa9f18f3ced1d
#: 44cbfb3bfa904a02b24e4de62343dc57
#: ab6347d94966454aa37ae0d7384bc7c0
#: 4e16bddb86724bda9ce71ae34c19aaaa
#: c16415f881824e57910d3a958cab6e4e
#: 247ff8041b984e939fc74f2b0197a160
#: 60d8b33c5f4e4b2e8b2e8470ea68b321
#: fee2892cdedf4428ba366cd2cc006808
msgid "Contents"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:14
#: a91ad0f0ea7c436d8daf05353fd63bae
msgid "Overview"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:18
#: 220b9e9d89cb469db5d3d473cdf8b87a
msgid "Supporting multiple hardware platforms"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:40
#: 1e39325f18c8424e977eede8805d0ed9
msgid "OS packaging & installers"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:52
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:23
#: 9c7461aa14b44e77afb0e8ab04840fab
#: 746cc1df814340559e770d042e4068a0
msgid "Windows"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:61
#: 8c907680c56b41b5988738f4a70ac0c3
msgid "Pynsist"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:63
#: b8f3402391d0475bbb92b12c7f38a7bb
msgid "`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python programs together with the Python-interpreter into a single installer based on NSIS. In most cases, packaging only requires the user to choose a version of the Python-interpreter and declare the dependencies of the program. The tool downloads the specified Python-interpreter for Windows and packages it with all the dependencies in a single Windows-executable installer."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:70
#: f6ceeab14e9c4da08dd51c6e09c6566b
msgid "The installed program can be started from a shortcut that the installer adds to the start-menu. It uses a Python interpreter installed within its application directory, independent of any other Python installation on the computer."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:74
#: b27f3718506d429888025d26967c1601
msgid "A big advantage of Pynsist is that the Windows packages can be built on Linux. There are several examples for different kinds of programs (console, GUI) in the `documentation <https://pynsist.readthedocs.io>`__. The tool is released under the MIT-licence."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:80
#: 3e34ba81b8904ccc9006afe86e5445c9
msgid "Application bundles"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:91
#: d2ed411b2177479ead26c94e66094128
msgid "Configuration management"
msgstr ""

#: ../source/discussions/index.rst:4
#: 8b02deb81b08493f9ec20c2f785afb2c
msgid "**Discussions** are focused on providing comprehensive information about a specific topic. If you're just trying to get stuff done, see :doc:`/guides/index`."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:5
#: f5913a0311974cb48361795d59125fd3
msgid "install_requires vs requirements files"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:12
#: ../source/guides/distributing-packages-using-setuptools.rst:382
#: 16db87c1b66341de88f28c33cb501934
#: b0e2321d0406476a931283f1134a60c8
msgid "install_requires"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:14
#: 048e21ee82134d1fb897a91b384921fe
msgid "``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that should be used to specify what a project **minimally** needs to run correctly. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:19
#: f6f399f7099c48f1b519e6dca5d587f9
msgid "For example, if the project requires A and B, your ``install_requires`` would be like so:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:29
#: a3534fbc41bf475eb3954a4727b14f01
msgid "Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:31
#: 3f83c35195d941bdaafce14a8b589c3c
msgid "For example, it may be known, that your project requires at least v1 of 'A', and v2 of 'B', so it would be like so:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:41
#: 89921d1573c84fc2bf88ccba0a4616e4
msgid "It may also be known that project A follows semantic versioning, and that v2 of 'A' will indicate a break in compatibility, so it makes sense to not allow v2:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:51
#: 524bdccb693e48ffbc0d13407c1b2a11
msgid "It is not considered best practice to use ``install_requires`` to pin dependencies to specific versions, or to specify sub-dependencies (i.e. dependencies of your dependencies).  This is overly-restrictive, and prevents the user from gaining the benefit of dependency upgrades."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:56
#: ae338649a695484382fd8a491396b5f5
msgid "Lastly, it's important to understand that ``install_requires`` is a listing of \"Abstract\" requirements, i.e just names and version restrictions that don't determine where the dependencies will be fulfilled from (i.e. from what index or source).  The where (i.e. how they are to be made \"Concrete\") is to be determined at install time using :ref:`pip` options. [1]_"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:64
#: ../source/tutorials/installing-packages.rst:460
#: 2619b348350f4356952c3778a9754c0c
#: 0a80efb6bd894bbd9f9890c89a1bc0b8
msgid "Requirements files"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:66
#: 59991708caf044c19c21280412fd5043
msgid ":ref:`Requirements Files <pip:Requirements Files>` described most simply, are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:69
#: da1e121082c14defb600ef914fcb0b48
msgid "Whereas ``install_requires`` defines the dependencies for a single project, :ref:`Requirements Files <pip:Requirements Files>` are often used to define the requirements for a complete Python environment."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:73
#: 2e50dfab32824dbca88c4a1d20244edc
msgid "Whereas ``install_requires`` requirements are minimal, requirements files often contain an exhaustive listing of pinned versions for the purpose of achieving :ref:`repeatable installations <pip:Repeatability>` of a complete environment."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:78
#: 55df805eb08047c584555938c3671d0d
msgid "Whereas ``install_requires`` requirements are \"Abstract\", i.e. not associated with any particular index, requirements files often contain pip options like ``--index-url`` or ``--find-links`` to make requirements \"Concrete\", i.e. associated with a particular index or directory of packages. [1]_"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:84
#: 1c097c0251774bc79efdcca359791652
msgid "Whereas ``install_requires`` metadata is automatically analyzed by pip during an install, requirements files are not, and only are used when a user specifically installs them using ``python -m pip install -r``."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:90
#: 48fb8ee1ed1147f98bab1dd019012474
msgid "For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad.io/2013/07/setup-vs-requirement/."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:6
#: 68634295e0ed4b21b3051ea372761950
msgid "pip vs easy_install"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:9
#: f86dc8d7f5374eb4bd79e7f8c6ed4c4b
msgid ":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 as part of :ref:`setuptools`. It was notable at the time for installing :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>` using requirement specifiers, and automatically installing dependencies."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:14
#: 38c084068f134f11b6f8ea41b0be726c
msgid ":ref:`pip` came later in 2008, as alternative to :ref:`easy_install <easy_install>`, although still largely built on top of :ref:`setuptools` components.  It was notable at the time for *not* installing packages as :term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, which gave users the power to easily replicate environments."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:22
#: bb27afd8458944ab868927336986b710
msgid "Here's a breakdown of the important differences between pip and the deprecated easy_install:"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
#: 2e466908e632481d9fd0a21216be9b36
msgid "**pip**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
#: 868bec2e7a49474fa197ad658409e7d9
msgid "**easy_install**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: f9de10cc61ae42299f1b95cc377a12f6
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
#: e1ea415042d04381ba217fcdcc87e3ed
#: e266ffa255e84a29a75a8f724dc514df
#: f98cb99eb5964efb8d8202bef5ed0822
#: 5498aa53eaf34b82a1f2c27578f4f2c6
#: 4bea5f80622f415f9fcea33230dadc23
#: 96514d981f06480c9ce6a07f49e0e094
msgid "Yes"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:30
#: ../source/discussions/pip-vs-easy-install.rst:32
#: ../source/discussions/pip-vs-easy-install.rst:35
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:51
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
#: 44d9398f01114cc9848f4629b24a586e
#: 0026cc04e29b41b9a07243c24571caa7
#: 76f71d2d3d7442d0940b909afcc72dfa
#: 0affcca417074c4d915233868059fa4b
#: f279a8cbe9bb4eb88cf223ddf6b9f901
#: a851a55cf4fe41718b52319a506d61c2
#: 0cf675f5367241aaa7f8448d0ab8aded
#: 588593a894dc46f1b6de54a38110614e
#: 4b41b117c65d4ef8ba01e76b1641216b
#: c79c8dbd18b247cb81def780e2037847
msgid "No"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:30
#: 697eb158a7194e71ac8f5ff033c35d5f
msgid "Uninstall Packages"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:30
#: 932f319d9faa44aba79e2ec879b39fc4
msgid "Yes (``python -m pip uninstall``)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:32
#: 7434f1197ebc48b89d725caa0adba8b3
msgid "Dependency Overrides"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:32
#: a719eb2d725d464097a7a167fbf949b0
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:35
#: bbb0065f676b4cd18cd81bb94f64f329
msgid "List Installed Packages"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:35
#: b26442dacc9b453ea526c990def48344
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:38
#: ffef4f6e634e41ca89978eb32f895fa2
msgid ":pep:`438` Support"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: adf2a13eff3b40ea8fa47acd9360eaf0
msgid "Installation format"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: 265dcc1ed10e41d3bccbd2e405951211
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: 84272fbff3894c9eba87b2be76808252
msgid "Encapsulated Egg format"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:44
#: 2843cbdabb704c4582cef9d0f0e1fd0a
msgid "sys.path modification"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:48
#: b891ca65588c410a9bbe23eedb5d2253
msgid "Installs from :term:`Eggs <Egg>`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:51
#: d11ed4c1db4e48349f52120c19b8038a
msgid "`pylauncher support`_"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:51
#: 7fd5630ebcf641e1b0e7710ddce81ab6
msgid "Yes [1]_"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:54
#: d612dc1a6b2444cbbe1085fa4bb91db3
msgid ":ref:`Multi-version Installs`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:57
#: ed76f0bb1e904765af1458540ed3ce23
msgid "Exclude scripts during install"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: c3a9750c98ed4bb989c5b68a2dcc4aa8
msgid "per project index"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: f9c8411306a64aa5b289c47730a1181f
msgid "Only in virtualenv"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: aa0faa6468ee4034b7712effe5cd8780
msgid "Yes, via setup.cfg"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:68
#: 9552f17cb5a44ab2a8534afdc1e16181
msgid "https://setuptools.readthedocs.io/en/latest/easy_install.html#natural-script-launcher"
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:5
#: b99d142c6e894a57905fb2bedef3784d
msgid "Wheel vs Egg"
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:7
#: 960301d1295648c5ba722bf69ad41110
msgid ":term:`Wheel` and :term:`Egg` are both packaging formats that aim to support the use case of needing an install artifact that doesn't require building or compilation, which can be costly in testing and production workflows."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:11
#: 4e1e3b2472014cfb8ef263c45797b5b1
msgid "The :term:`Egg` format was introduced by :ref:`setuptools` in 2004, whereas the :term:`Wheel` format was introduced by :pep:`427` in 2012."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:14
#: 06d127f28c2d4eeeaee9dc66f83f3369
msgid ":term:`Wheel` is currently considered the standard for :term:`built <Built Distribution>` and :term:`binary <Binary Distribution>` packaging for Python."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:17
#: 06ee1587f3c746538111fccb6245ac64
msgid "Here's a breakdown of the important differences between :term:`Wheel` and :term:`Egg`."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:20
#: 1804eb1e7ad047d5b6aad870f1eeb7b7
msgid ":term:`Wheel` has an :pep:`official PEP <427>`. :term:`Egg` did not."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:22
#: ce50c84e4eec4f7887eefbd5f4425fe8
msgid ":term:`Wheel` is a :term:`distribution <Distribution Package>` format, i.e a packaging format. [1]_ :term:`Egg` was both a distribution format and a runtime installation format (if left zipped), and was designed to be importable."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:26
#: 042e3a2b136b482a857d8e3805b12135
msgid ":term:`Wheel` archives do not include .pyc files. Therefore, when the distribution only contains Python files (i.e. no compiled extensions), and is compatible with Python 2 and 3, it's possible for a wheel to be \"universal\", similar to an :term:`sdist <Source Distribution (or \"sdist\")>`."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:31
#: f571bd5d6c9342a6ad3533863125e02d
msgid ":term:`Wheel` uses :pep:`PEP376-compliant <376>` ``.dist-info`` directories. Egg used ``.egg-info``."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:34
#: f61cf57bb1334f28bdfd81bd15464c68
msgid ":term:`Wheel` has a :pep:`richer file naming convention <425>`. A single wheel archive can indicate its compatibility with a number of Python language versions and implementations, ABIs, and system architectures."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:38
#: 8599a719d23648ff996f03d6661b6e0f
msgid ":term:`Wheel` is versioned. Every wheel file contains the version of the wheel specification and the implementation that packaged it."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:41
#: fef051e91af24bf7a3f25695e77ad714
msgid ":term:`Wheel` is internally organized by `sysconfig path type <http://docs.python.org/2/library/sysconfig.html#installation-paths>`_, therefore making it easier to convert to other formats."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:47
#: 299ad779ecca46d4a82f180c1a8fc715
msgid "Circumstantially, in some cases, wheels can be used as an importable runtime format, although :pep:`this is not officially supported at this time <427#is-it-possible-to-import-python-code-directly-from-a-wheel-file>`."
msgstr ""

#: ../source/glossary.rst:3
#: 4e2eaf1dd92c49edba9d8f74e7398d5c
msgid "Glossary"
msgstr ""

#: ../source/glossary.rst:8
#: f22cfdec9027423dbc251cf031676d9f
msgid "Binary Distribution"
msgstr ""

#: ../source/glossary.rst:11
#: 16d877b87f9941d0b8cdd10fbc9f0067
msgid "A specific kind of :term:`Built Distribution` that contains compiled extensions."
msgstr ""

#: ../source/glossary.rst:14
#: adef9bc472cf4e19af1c3e0474ec714b
msgid "Built Distribution"
msgstr ""

#: ../source/glossary.rst:17
#: 4e00ec9205334a55927730aacba39a8a
msgid "A :term:`Distribution <Distribution Package>` format containing files and metadata that only need to be moved to the correct location on the target system, to be installed. :term:`Wheel` is such a format, whereas distutil's :term:`Source Distribution <Source Distribution (or \"sdist\")>` is not, in that it requires a build step before it can be installed.  This format does not imply that Python files have to be precompiled (:term:`Wheel` intentionally does not include compiled Python files)."
msgstr ""

#: ../source/glossary.rst:26
#: aba61d5dc0cf4162a90a7ac80ada49e9
msgid "Distribution Package"
msgstr ""

#: ../source/glossary.rst:29
#: f646e90746ae43099c3ae1bcacfc2e64
msgid "A versioned archive file that contains Python :term:`packages <Import Package>`, :term:`modules <Module>`, and other resource files that are used to distribute a :term:`Release`. The archive file is what an end-user will download from the internet and install."
msgstr ""

#: ../source/glossary.rst:34
#: 83e268cc6feb4706a8fead95a3080740
msgid "A distribution package is more commonly referred to with the single words \"package\" or \"distribution\", but this guide may use the expanded term when more clarity is needed to prevent confusion with an :term:`Import Package` (which is also commonly called a \"package\") or another kind of distribution (e.g. a Linux distribution or the Python language distribution), which are often referred to with the single term \"distribution\"."
msgstr ""

#: ../source/glossary.rst:41
#: 8f007219c4484924a431b8b9f6cfda19
msgid "Egg"
msgstr ""

#: ../source/glossary.rst:44
#: c6624a83f08941aaa9e1d395565c93cf
msgid "A :term:`Built Distribution` format introduced by :ref:`setuptools`, which is being replaced by :term:`Wheel`.  For details, see `The Internal Structure of Python Eggs <https://setuptools.readthedocs.io/en/latest/deprecated/python_eggs.html>`_ and `Python Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../source/glossary.rst:49
#: 5f23fab714184690ad374d403b7b262d
msgid "Extension Module"
msgstr ""

#: ../source/glossary.rst:52
#: cd5ff926a4da4e4e89e4544232b4d3c9
msgid "A :term:`Module` written in the low-level language of the Python implementation: C/C++ for Python, Java for Jython. Typically contained in a single dynamically loadable pre-compiled file, e.g.  a shared object (.so) file for Python extensions on Unix, a DLL (given the .pyd extension) for Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""

#: ../source/glossary.rst:59
#: 02d9e4982186449b9d310a8af8b9091b
msgid "Known Good Set (KGS)"
msgstr ""

#: ../source/glossary.rst:62
#: 316c53d3ea994e7d9390e10010362231
msgid "A set of distributions at specified versions which are compatible with each other. Typically a test suite will be run which passes all tests before a specific set of packages is declared a known good set. This term is commonly used by frameworks and toolkits which are comprised of multiple individual distributions."
msgstr ""

#: ../source/glossary.rst:68
#: 0686ef13c0fe4d36ae422e9a8e4cd918
msgid "Import Package"
msgstr ""

#: ../source/glossary.rst:71
#: 39d11b6a270240fb8caa83db201778d9
msgid "A Python module which can contain other modules or recursively, other packages."
msgstr ""

#: ../source/glossary.rst:74
#: 46ecf48d07754e728c701329b30e53b1
msgid "An import package is more commonly referred to with the single word \"package\", but this guide will use the expanded term when more clarity is needed to prevent confusion with a :term:`Distribution Package` which is also commonly called a \"package\"."
msgstr ""

#: ../source/glossary.rst:78
#: 2728525f990349088fb12dfea5b1d208
msgid "Module"
msgstr ""

#: ../source/glossary.rst:81
#: abf95faa49894b6baf2108e5c28f4841
msgid "The basic unit of code reusability in Python, existing in one of two types: :term:`Pure Module`, or :term:`Extension Module`."
msgstr ""

#: ../source/glossary.rst:84
#: 1a63f6037c874aae9bf1cc28846b3a5a
msgid "Package Index"
msgstr ""

#: ../source/glossary.rst:87
#: 43a433b477544398b47bdfc408499141
msgid "A repository of distributions with a web interface to automate :term:`package <Distribution Package>` discovery and consumption."
msgstr ""

#: ../source/glossary.rst:90
#: 955e82b1a81244a4bd95c2e23b13be05
msgid "Per Project Index"
msgstr ""

#: ../source/glossary.rst:93
#: cb646c23652f452589dbdb4369553bee
msgid "A private or other non-canonical :term:`Package Index` indicated by a specific :term:`Project` as the index preferred or required to resolve dependencies of that project."
msgstr ""

#: ../source/glossary.rst:97
#: 3a3bd67c32eb40f183cfe951486e2ff1
msgid "Project"
msgstr ""

#: ../source/glossary.rst:100
#: d21f983104a24d52badeb896dc67c720
msgid "A library, framework, script, plugin, application, or collection of data or other resources, or some combination thereof that is intended to be packaged into a :term:`Distribution <Distribution Package>`."
msgstr ""

#: ../source/glossary.rst:104
#: ad213830d7fd4ec5a35dfb751c4e1b98
msgid "Since most projects create :term:`Distributions <Distribution Package>` using either :pep:`518` ``build-system``, :ref:`distutils` or :ref:`setuptools`, another practical way to define projects currently is something that contains a :term:`pyproject.toml`, :term:`setup.py`, or :term:`setup.cfg` file at the root of the project source directory."
msgstr ""

#: ../source/glossary.rst:110
#: 7564d42cbef94c1e8cd55c7104dbe105
msgid "Python projects must have unique names, which are registered on :term:`PyPI <Python Package Index (PyPI)>`. Each project will then contain one or more :term:`Releases <Release>`, and each release may comprise one or more :term:`distributions <Distribution Package>`."
msgstr ""

#: ../source/glossary.rst:115
#: 1f87ceadf11d49e18e875db6741c3465
msgid "Note that there is a strong convention to name a project after the name of the package that is imported to run that project. However, this doesn't have to hold true. It's possible to install a distribution from the project 'foo' and have it provide a package importable only as 'bar'."
msgstr ""

#: ../source/glossary.rst:121
#: 14fa025cd9174efb8f249cf25baac621
msgid "Pure Module"
msgstr ""

#: ../source/glossary.rst:124
#: 97f6a03301354f939fa00351d69f65ac
msgid "A :term:`Module` written in Python and contained in a single ``.py`` file (and possibly associated ``.pyc`` and/or ``.pyo`` files)."
msgstr ""

#: ../source/glossary.rst:127
#: d67ab63aa0d84f2185bca77f923e93da
msgid "Python Packaging Authority (PyPA)"
msgstr ""

#: ../source/glossary.rst:130
#: 497663628eed4f7fa4efa5d5cc155806
msgid "PyPA is a working group that maintains many of the relevant projects in Python packaging. They maintain a site at https://www.pypa.io, host projects on `GitHub <https://github.com/pypa>`_ and `Bitbucket <https://bitbucket.org/pypa>`_, and discuss issues on the `distutils-sig mailing list <https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ and `the Python Discourse forum <https://discuss.python.org/c/packaging>`__."
msgstr ""

#: ../source/glossary.rst:139
#: 88781788b3a244cf8a68de5273fdfc82
msgid "Python Package Index (PyPI)"
msgstr ""

#: ../source/glossary.rst:142
#: 4ccc27c107c246b0a42184d4fb1a6dac
msgid "`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the Python community. It is open to all Python developers to consume and distribute their distributions."
msgstr ""

#: ../source/glossary.rst:145
#: 507212c7715c40618761de63bcde153f
msgid "pypi.org"
msgstr ""

#: ../source/glossary.rst:148
#: 3c540e020ea342f281abdfe059ded12d
msgid "`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python Package Index (PyPI)`. It replaced the legacy index domain name, ``pypi.python.org``, in 2017. It is powered by :ref:`warehouse`."
msgstr ""

#: ../source/glossary.rst:152
#: b342bf620c5642ec99ee95b9e9a1d92f
msgid "pyproject.toml"
msgstr ""

#: ../source/glossary.rst:155
#: d722aa1b401c440ab4cc5fcb881a0b70
msgid "The tool-agnostic :term:`Project` specification file. Defined in :pep:`518`."
msgstr ""

#: ../source/glossary.rst:157
#: a8696949ebfb4c2c9cd18760a37d66ea
msgid "Release"
msgstr ""

#: ../source/glossary.rst:160
#: 23968927c41e4cca9a927fd627473baf
msgid "A snapshot of a :term:`Project` at a particular point in time, denoted by a version identifier."
msgstr ""

#: ../source/glossary.rst:163
#: 1304c30b66f2466088fbea231f103927
msgid "Making a release may entail the publishing of multiple :term:`Distributions <Distribution Package>`.  For example, if version 1.0 of a project was released, it could be available in both a source distribution format and a Windows installer distribution format."
msgstr ""

#: ../source/glossary.rst:168
#: 644988525e214b5897ed4edd0f2c925d
msgid "Requirement"
msgstr ""

#: ../source/glossary.rst:171
#: 71cc510b78324bf0abd9f889f05be20b
msgid "A specification for a :term:`package <Distribution Package>` to be installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` recommended installer, allows various forms of specification that can all be considered a \"requirement\". For more information, see the :ref:`pip:pip install` reference."
msgstr ""

#: ../source/glossary.rst:177
#: 8f047fbddb284b608e405f47b4ce00f9
msgid "Requirement Specifier"
msgstr ""

#: ../source/glossary.rst:180
#: cfaa203c88574cba89a46cc77a3121e8
msgid "A format used by :ref:`pip` to install packages from a :term:`Package Index`. For an EBNF diagram of the format, see the `pkg_resources.Requirement <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#requirement-objects>`_ entry in the :ref:`setuptools` docs. For example, \"foo>=1.3\" is a requirement specifier, where \"foo\" is the project name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""

#: ../source/glossary.rst:187
#: 6abcca469adb49a9934d0016b15e0d2e
msgid "Requirements File"
msgstr ""

#: ../source/glossary.rst:190
#: 631c925a9a874fc9866ad52974d93e42
msgid "A file containing a list of :term:`Requirements <Requirement>` that can be installed using :ref:`pip`. For more information, see the :ref:`pip` docs on :ref:`pip:Requirements Files`."
msgstr ""

#: ../source/glossary.rst:194
#: ../source/guides/distributing-packages-using-setuptools.rst:56
#: eff90b2a69a64eb791b2ff67740d977d
#: 8bda054d199f45a1a39ccc3dff935784
msgid "setup.py"
msgstr ""

#: ../source/glossary.rst:195
#: ../source/guides/distributing-packages-using-setuptools.rst:77
#: 859faf72f55d440cbd089b06914d50fc
#: 56716fa2e21a4944bbcadee2b300e586
msgid "setup.cfg"
msgstr ""

#: ../source/glossary.rst:198
#: 1fffac555c3c4c74a6c516e15a517a3f
msgid "The project specification files for :ref:`distutils` and :ref:`setuptools`. See also :term:`pyproject.toml`."
msgstr ""

#: ../source/glossary.rst:201
#: 7c4899729e8c4276aa4486c091864860
msgid "Source Archive"
msgstr ""

#: ../source/glossary.rst:204
#: 18051af2c7254d25a8197ca2ef4fb4b5
msgid "An archive containing the raw source code for a :term:`Release`, prior to creation of a :term:`Source Distribution <Source Distribution (or \"sdist\")>` or :term:`Built Distribution`."
msgstr ""

#: ../source/glossary.rst:208
#: 38973c4e91634b8bb3b1d96a3f1a5654
msgid "Source Distribution (or \"sdist\")"
msgstr ""

#: ../source/glossary.rst:211
#: 285e002126694e2ca1570ea210d07873
msgid "A :term:`distribution <Distribution Package>` format (usually generated using ``python setup.py sdist``) that provides metadata and the essential source files needed for installing by a tool like :ref:`pip`, or for generating a :term:`Built Distribution`."
msgstr ""

#: ../source/glossary.rst:216
#: e26151a546ec4a5a9c925e04c7143232
msgid "System Package"
msgstr ""

#: ../source/glossary.rst:219
#: 10bec5f63e5d4bdcb28bbbf44b3c633e
msgid "A package provided in a format native to the operating system, e.g. an rpm or dpkg file."
msgstr ""

#: ../source/glossary.rst:222
#: e658a41b63d541b48f0b0e91eea1a63a
msgid "Version Specifier"
msgstr ""

#: ../source/glossary.rst:225
#: 1463906ed20642598e2871cb05ac4cad
msgid "The version component of a :term:`Requirement Specifier`. For example, the \">=1.3\" portion of \"foo>=1.3\".  :pep:`440` contains a :pep:`full specification <440#version-specifiers>` of the specifiers that Python packaging currently supports.  Support for PEP440 was implemented in :ref:`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""

#: ../source/glossary.rst:231
#: 4fccb154332049b997597eaa7e37a6f4
msgid "Virtual Environment"
msgstr ""

#: ../source/glossary.rst:234
#: d1cf41dcfe1e434c949ff5f4bc133135
msgid "An isolated Python environment that allows packages to be installed for use by a particular application, rather than being installed system wide. For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/glossary.rst:238
#: 969aee43c6ab484298c4e8ced3d559d3
msgid "Wheel"
msgstr ""

#: ../source/glossary.rst:241
#: d634a4c3aafc4095bd4cd3071a9ed1e4
msgid "A :term:`Built Distribution` format introduced by :pep:`427`, which is intended to replace the :term:`Egg` format.  Wheel is currently supported by :ref:`pip`."
msgstr ""

#: ../source/glossary.rst:244
#: 45ba513de1c94de0aa35327b1a78732b
msgid "Working Set"
msgstr ""

#: ../source/glossary.rst:247
#: e58951e94cb34592b6637b2c313a65bb
msgid "A collection of :term:`distributions <Distribution Package>` available for importing. These are the distributions that are on the `sys.path` variable. At most, one :term:`Distribution <Distribution Package>` for a project is possible in a working set."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:3
#: 89f6a33838b74936baeddc6ed9cd535d
msgid "Analyzing PyPI package downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:5
#: edf2001b709343c48c57ac05f72ee4a2
msgid "This section covers how to use the public PyPI download statistics dataset to learn more about downloads of a package (or packages) hosted on PyPI. For example, you can use it to discover the distribution of Python versions used to download a package."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:15
#: ../source/guides/supporting-windows-using-appveyor.rst:18
#: dcf1d323ccb646eaa8e506e347f07a1b
#: a6f653a9781941bca0884ff6602cec66
msgid "Background"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:17
#: 7066da630fed4191b272b8e874ce1bda
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:19
#: 6a964fc73771464c992ee3859a909e03
msgid "**Inefficient to make work with a Content Distribution Network (CDN):** Download statistics change constantly. Including them in project pages, which are heavily cached, would require invalidating the cache more often, and reduce the overall effectiveness of the cache."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:24
#: 8c689596e3c84a8fbbf1f7b2ce5084c3
msgid "**Highly inaccurate:** A number of things prevent the download counts from being accurate, some of which include:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:27
#: 8279eab6b09f4418bd19b15fe16ceaad
msgid "``pip``'s download cache (lowers download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:28
#: 478f1246bfed424cb3554f2c0946a70e
msgid "Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:29
#: 214ff61ba2414d8f8b774002baf3e571
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:30
#: 5e118f31414741e5b14ea35d4afcc46f
msgid "Unofficial scripts or attempts at download count inflation (raises download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:32
#: 2daed75827ad445ba67cf978b3c74d7e
msgid "Known historical data quality issues (lowers download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:34
#: 534e46109f3247d396e356210d98c797
msgid "**Not particularly useful:** Just because a project has been downloaded a lot doesn't mean it's good; Similarly just because a project hasn't been downloaded a lot doesn't mean it's bad!"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:38
#: fbc5439fdf764a45a0df51fc9208be5d
msgid "In short, because it's value is low for various reasons, and the tradeoffs required to make it work are high, it has been not an effective use of limited resources."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:43
#: c780aeeea2c3487297704884d6568f1e
msgid "Public dataset"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:45
#: ed120554f4ff4164b8c982952fe56c91
msgid "As an alternative, the `Linehaul project <https://github.com/pypa/linehaul>`__ streams download logs from PyPI to `Google BigQuery`_ [#]_, where they are stored as a public dataset."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:50
#: db4cbb49289049879f12435061ab4973
msgid "Getting set up"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:52
#: 24084518508748d79ad7d6a361cdf844
msgid "In order to use `Google BigQuery`_ to query the `public PyPI download statistics dataset`_, you'll need a Google account and to enable the BigQuery API on a Google Cloud Platform project. You can run the up to 1TB of queries per month `using the BigQuery free tier without a credit card <https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card>`__"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:58
#: d3bf25dc4332495586d6028ef6c68956
msgid "Navigate to the `BigQuery web UI`_."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:59
#: f789c3be4a3b42aa973c4cef9d5e66f7
msgid "Create a new project."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:60
#: 39535e6d20c54f5e9713742b6069539e
msgid "Enable the `BigQuery API <https://console.developers.google.com/apis/library/bigquery-json.googleapis.com>`__."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:63
#: 4b38d87931494e8782e9ecc54310f9ff
msgid "For more detailed instructions on how to get started with BigQuery, check out the `BigQuery quickstart guide <https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui>`__."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:69
#: 8e2f6d0e7786487fb7db691f6ccaf6d5
msgid "Data schema"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:71
#: d310064b178846ecbf33f2a33758d3f3
msgid "Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` table for each download. The table contains information about what file was downloaded and how it was downloaded. Some useful columns from the `table schema <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: 9d1d9ca8bebc4eb0be6b46358522f730
msgid "Column"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/guides/using-manifest-in.rst:67
#: ../source/specifications/core-metadata.rst:185
#: ec55a5025ebf499fb63e5177cba8b3a3
#: 72dd1641238c4664adcc889ed4c4fb94
#: 3be31a26724c483387960e36b775c2d9
msgid "Description"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/specifications/direct-url.rst:226
#: 348cc6594ea54abda05c59d3d562c247
#: 96c401d1b16544b590e74cc11c7b4754
msgid "Examples"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: 6d98b522fb194134b836d07d06e36de0
msgid "timestamp"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: cdf1e0f62109474390be818a327d9217
msgid "Date and time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: 94763be09f8d474daadc70aa71e8d170
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: d157912ce9d941199b6c9323829b7d46
msgid "file.project"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: 9780ad46e7d44d05bc7cfef19fa0e7fb
msgid "Project name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: f8374d3fa2fe472298c73e0f8e4fc63a
msgid "``pipenv``, ``nose``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: d90f192bd88f4f159d0bc91792e73ab9
msgid "file.version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: 4a13ac8a393549b7ae79d30277218a01
msgid "Package version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: abfe7b34ab874042a4856d45b1f9a056
msgid "``0.1.6``, ``1.4.2``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: 1e94ae2a2c7b4ee3b89e2b039cc32197
msgid "details.installer.name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: 3dc1b45a751843e1a1b986f55cfbf15e
msgid "Installer"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: ac625d58d5de4c02b8beb3c5071dc5c3
msgid "pip, `bandersnatch`_"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: d9c14198d53e413bb6baac78b23b7ea5
msgid "details.python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: 5cfa8206375f462b96096d4c99b0f633
msgid "Python version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: bcbd1ab4a1f74b2888168061473b8104
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:93
#: ad34cd6332874a199ec84eb977c3a122
msgid "Useful queries"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:95
#: 6a1a21bd3d55477594fbe9a78c780a06
msgid "Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" button."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:97
#: 0edbd4c5aade415fb8eb8e172730f606
msgid "Note that the rows are stored in a partitioned, which helps limit the cost of queries. These example queries analyze downloads from recent history by filtering on the ``timestamp`` column."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:102
#: 66626bdd5df74e8cbac7449b40312e85
msgid "Counting package downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:104
#: 619090d1c1c14746847bacf09ffe5b5c
msgid "The following query counts the total number of downloads for the project \"pytest\"."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:119
#: ../source/guides/analyzing-pypi-package-downloads.rst:140
#: ../source/guides/analyzing-pypi-package-downloads.rst:168
#: ../source/guides/analyzing-pypi-package-downloads.rst:205
#: 8af6e1f9856546c2827cd9e08d3a5953
#: 171c576323d44cb780794c8de1384013
#: 0a34954ab96c4d22ba4f194e1d04addf
#: 370dade311744d6998ef8466d0984c76
msgid "num_downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:121
#: a1d21dc568e941558cc4d0f908266a6b
msgid "26190085"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:124
#: 568915dbf4374c7889f3d5a0718c856b
msgid "To only count downloads from pip, filter on the ``details.installer.name`` column."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:142
#: 4129f3e6e10d4fb2a3ea448b526517c2
msgid "24334215"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:146
#: 12d8d06c95ae47dbb58c24f75d39bacf
msgid "Package downloads over time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:148
#: 8ef5ce5d310643c8b6cdbec6d24c92dd
msgid "To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also filtering by this column reduces corresponding costs."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:168
#: 2bd314c6ad70433d8cd966a8c3090478
msgid "month"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
#: 641be3650fd442549907105baff26b80
msgid "1956741"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
#: 40278d9b9b3e4e7cab2b2aee209623f7
msgid "2018-01-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
#: ac829ad677244d9aba3547c251c01f6d
msgid "2344692"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
#: 621c627fffb643c5be0a996468effebe
msgid "2017-12-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
#: 8a9ffea877df4867b55ca8ca2f0f6c6f
msgid "1730398"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
#: be8dd4177da54d60934711667692f727
msgid "2017-11-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
#: 00f57747f0354acbaf8608bee59b6d56
msgid "2047310"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
#: cc01f91dd27040878278e56543bff48c
msgid "2017-10-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
#: 26218249e01943d989d7ae5227bc1cf5
msgid "1744443"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
#: be33da9274d94f89bb3dab024e407771
msgid "2017-09-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
#: 1f26578c0fd945a88f5c8ce27cc20f65
msgid "1916952"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
#: bf31ee4de6584e54909b12f8cc519887
msgid "2017-08-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:184
#: f7fde85fab5b4fbfabe0254efc2bd263
msgid "Python versions over time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:186
#: a7924ef863354603afda51f5ea0bc8cb
msgid "Extract the Python version from the ``details.python`` column. Warning: This query processes over 500 GB of data."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:205
#: 9e8ad22bda9c4bbcbecdd73061d5fb73
msgid "python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
#: bbc529c33d784c97b4f3aa81d7e921d7
msgid "3.7"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
#: 58b7db13dca44329a7d20d62e0fbcee2
msgid "18051328726"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
#: 63624d9a1ace4b0a9967ef4cde78e837
msgid "3.6"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
#: 248c0d00ee8f4260977a5071cb7a1c1b
msgid "9635067203"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
#: 1c5261dfeb8747b8a96405958eaed429
msgid "3.8"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
#: 6883e9bf936c4eafad6d6ded9d735257
msgid "7781904681"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
#: 59e01e7123aa4c47822b7c0a76982a21
msgid "2.7"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
#: f92f235429f64b0cb451a92ded8e5191
msgid "6381252241"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
#: e9215ea4821848eeb3cd3a2d1318677a
msgid "null"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
#: a9353d548176439e9d2c560840e6ea2f
msgid "2026630299"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
#: 4ef6e0e473d64d88bdd63e76c8d3ef42
msgid "3.5"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
#: 364f9d11b5194cd4bc04c3137fc4c38d
msgid "1894153540"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:221
#: c4bffefc563845d5a3b745afbf1b9820
msgid "Caveats"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:223
#: 5318409d8ff94d979fbb2542efe4c02c
msgid "In addition to the caveats listed in the background above, Linehaul suffered from a bug which caused it to significantly under-report download statistics prior to July 26, 2018. Downloads before this date are proportionally accurate (e.g. the percentage of Python 2 vs. Python 3 downloads) but total numbers are lower than actual by an order of magnitude."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:231
#: 908d379d53b545b5a594d76acb2b5b67
msgid "Additional tools"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:233
#: a59d13cf441340eeb0e1268fbe1b61d2
msgid "Besides using the BigQuery console, there are some additional tools which may be useful when analyzing download statistics."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:237
#: 05b288519ad449b2a824434fb64bb321
msgid "``google-cloud-bigquery``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:239
#: e1d9c90e63744154bb17fc7e3857cded
msgid "You can also access the public PyPI download statistics dataset programmatically via the BigQuery API and the `google-cloud-bigquery`_ project, the official Python client library for BigQuery."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:267
#: b77c167d27564bf8bdb8590d0b933209
msgid "``pypinfo``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:269
#: 7e27306010874aa19ca5e3fe52984251
msgid "`pypinfo`_ is a command-line tool which provides access to the dataset and can generate several useful queries. For example, you can query the total number of download for a package with the command ``pypinfo package_name``."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:273
#: 13c2a237995948e3aa239bd5eec5f354
msgid "Install `pypinfo`_ using pip."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:279
#: 8ba3b34c95874254a0da74bda1e3af4b
msgid "Usage:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:295
#: 48be2525b41649f1bdd8a3265d54800c
msgid "``pandas-gbq``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:297
#: 9fae574b91354482b243d83d59c8b0b0
msgid "The `pandas-gbq`_ project allows for accessing query results via `Pandas`_."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:301
#: ../source/specifications/binary-distribution-format.rst:459
#: b701d55904194b3984da550b731de03f
#: fc2429d774124a13bef53f91628e0dcb
msgid "References"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:303
#: a358838321a940d2b256e7101a4b34b6
msgid "`PyPI Download Counts deprecation email <https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html>`__"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:304
#: d29761e808e342e58d71efdfd45f73d4
msgid "`PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:3
#: 760d88e3890042508a807c5bac197cad
msgid "Creating and discovering plugins"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:5
#: f538ff10408f4104ae3d3cf353d2210a
msgid "Often when creating a Python application or library you'll want the ability to provide customizations or extra features via **plugins**. Because Python packages can be separately distributed, your application or library may want to automatically **discover** all of the plugins available."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:10
#: 42c9915e721e470ca2df0d180a1f9c4c
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:12
#: 34194add30d94d5d80dba4d459e6090c
msgid "`Using naming convention`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:13
#: 5f64527523da40cd92c100abb8a8a363
msgid "`Using namespace packages`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:14
#: d3a6e35cb9e6403982c70ea8fa1e89a3
msgid "`Using package metadata`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:18
#: 5a48ebd560ad4d029f78665e44012830
msgid "Using naming convention"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:20
#: 10f751651e344b298711150d1f97c912
msgid "If all of the plugins for your application follow the same naming convention, you can use :func:`pkgutil.iter_modules` to discover all of the top-level modules that match the naming convention. For example, `Flask`_ uses the naming convention ``flask_{plugin_name}``. If you wanted to automatically discover all of the Flask plugins installed:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:38
#: 804734f40c124c708ed24522622f3449
msgid "If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins installed then ``discovered_plugins`` would be:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:48
#: 52e639b348224540b67ef296037363e1
msgid "Using naming convention for plugins also allows you to query the Python Package Index's `simple API`_ for all packages that conform to your naming convention."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:59
#: 24cc56e83e4d4b61a7f8bcad5a12bc40
msgid "Using namespace packages"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:61
#: 6f8140a42a424ce484b10fc0a835f0c9
msgid ":doc:`Namespace packages <packaging-namespace-packages>` can be used to provide a convention for where to place plugins and also provides a way to perform discovery. For example, if you make the sub-package ``myapp.plugins`` a namespace package then other :term:`distributions <Distribution Package>` can provide modules and packages to that namespace. Once installed, you can use :func:`pkgutil.iter_modules` to discover all modules and packages installed under that namespace:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:89
#: 54ebf3aa743447f28cde80ee25f2a285
msgid "Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` causes it to only look for the modules directly under that namespace. For example, if you have installed distributions that provide the modules ``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` in this case would be:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:101
#: 616f25c7c93b48feb1e4c2e9e4ba82a2
msgid "This sample uses a sub-package as the namespace package (``myapp.plugins``), but it's also possible to use a top-level package for this purpose (such as ``myapp_plugins``). How to pick the namespace to use is a matter of preference, but it's not recommended to make your project's main top-level package (``myapp`` in this case) a namespace package for the purpose of plugins, as one bad plugin could cause the entire namespace to break which would in turn make your project unimportable. For the \"namespace sub-package\" approach to work, the plugin packages must omit the :file:`__init__.py` for your top-level package directory (``myapp`` in this case) and include the namespace-package style :file:`__init__.py` in the namespace sub-package directory (``myapp/plugins``).  This also means that plugins will need to explicitly pass a list of packages to :func:`setup`'s ``packages`` argument instead of using :func:`setuptools.find_packages`."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:115
#: 7090cce356574d7988b457c4d38031a4
msgid "Namespace packages are a complex feature and there are several different ways to create them. It's highly recommended to read the :doc:`packaging-namespace-packages` documentation and clearly document which approach is preferred for plugins to your project."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:121
#: e16f6ee08ee3447180d06c54f97333d4
msgid "Using package metadata"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:123
#: 00c2363964b74f1e9fbbd18daf850ebd
msgid "`Setuptools`_ provides :doc:`special support <setuptools:userguide/entry_point>` for plugins. By providing the ``entry_points`` argument to :func:`setup` in :file:`setup.py` plugins can register themselves for discovery."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:128
#: e05e206ad15e4ce7a160b87bab782f63
msgid "For example if you have a package named ``myapp-plugin-a`` and it includes in its :file:`setup.py`:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:139
#: 3b62ee8f6fbe4d0c9cc421894a6babd5
msgid "Then you can discover and load all of the registered entry points by using :func:`importlib.metadata.entry_points` (or the `backport`_ ``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:154
#: e8bc337138f643f9a03b147ef899edcb
msgid "In this example, ``discovered_plugins`` would be a collection of type :class:`importlib.metadata.EntryPoint`:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:163
#: b666cd42204f49419b5b518645807710
msgid "Now the module of your choice can be imported by executing ``discovered_plugins['a'].load()``."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:166
#: 700f8b2ec7d746a2adeb2264dc343978
msgid "The ``entry_point`` specification in :file:`setup.py` is fairly flexible and has a lot of options. It's recommended to read over the entire section on :doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:170
#: a4546796078943019c5d23ae0252f519
msgid "Since this specification is part of the :doc:`standard library <python:library/importlib.metadata>`, most packaging tools other than setuptools provide support for defining entry points."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:5
#: 429159b36e6e479f8ecffcde46148af5
msgid "Packaging and distributing projects"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:7
#: bf2e624bc16a4250b477865850c20ea4
msgid "This section covers the basics of how to configure, package and distribute your own Python projects.  It assumes that you are already familiar with the contents of the :doc:`/tutorials/installing-packages` page."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:11
#: ee11f656986c4918a80504f0c3e080e9
msgid "The section does *not* aim to cover best practices for Python project development as a whole.  For example, it does not provide guidance or tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:15
#: e6cdf4c7edca4da8a14f4eb4c283f12c
msgid "For more reference material, see :std:doc:`Building and Distributing Packages <userguide/index>` in the :ref:`setuptools` docs, but note that some advisory content there may be outdated. In the event of conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:25
#: 2a96c16a63cb435bb68968edabdf7351
msgid "Requirements for packaging and distributing"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:26
#: 66a2ca58280a4d12841fcdfbf6289ba7
msgid "First, make sure you have already fulfilled the :ref:`requirements for installing packages <installing_requirements>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:29
#: 9196b0db394349de83339a3c43cf6d7d
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:43
#: b9636ab3e7ce4352995d217659ffc695
msgid "You'll need this to upload your project :term:`distributions <Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:49
#: f65f28d7e26d4b4cbaf4be94ad75f8f5
msgid "Configuring your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:53
#: cfbb31f8b0324f04902863743c5650c7
msgid "Initial files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:58
#: 892715780ac742929955b39d8fee13c8
msgid "The most important file is :file:`setup.py` which exists at the root of your project directory. For an example, see the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:63
#: 5e5c0af678c34917bfa9aaa77bcc1c3e
msgid ":file:`setup.py` serves two primary functions:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:65
#: a457da961c9742de8f0c3ee8ee1c83b2
msgid "It's the file where various aspects of your project are configured. The primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined.  The most relevant arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:71
#: c5ee74ebc8614b43b750c33757fde5bb
msgid "It's the command line interface for running various commands that relate to packaging tasks. To get a listing of available commands, run ``python setup.py --help-commands``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:79
#: bef495059b3d47839a9da92b9c5ca6d7
msgid ":file:`setup.cfg` is an ini file that contains option defaults for :file:`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:86
#: 566d993f40374d8694c0010056c06e7f
msgid "README.rst / README.md"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:88
#: 6179aba50e434832970a4e4189f7c0be
msgid "All projects should contain a readme file that covers the goal of the project. The most common format is `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, although this is not a requirement; multiple variants of `Markdown <https://daringfireball.net/projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:`long_description_content_type <description>` argument)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:95
#: 77b5d2406de94ee7828438f7ff445c3a
msgid "For an example, see `README.md <https://github.com/pypa/sampleproject/blob/master/README.md>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:99
#: de7a4f881c8b4fdcb9de49ca6ac7b1d3
msgid "Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:`README.rst`, :file:`README.txt`, or :file:`README`) included in source distributions by default. The built-in :ref:`distutils` library adopts this behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ will include a :file:`README.md` if found. If you are using setuptools, you don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, include it to be explicit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:108
#: 384ab4b3cde84d47a2017af219030433
msgid "MANIFEST.in"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:110
#: a28701f7fd2f4c238c619903469dee5a
msgid "A :file:`MANIFEST.in` is needed when you need to package additional files that are not automatically included in a source distribution.  For details on writing a :file:`MANIFEST.in` file, including a list of what's included by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:115
#: 70e6aa298aa34097907856274181d0f5
msgid "For an example, see the `MANIFEST.in <https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:119
#: 3dbbdfd6015549a9bba58600c1028a15
msgid ":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:122
#: 51ac2cfa7b914235bc80ee73ffec02ab
msgid "LICENSE.txt"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:124
#: b362b8f1ff91454981dc809ac592b046
msgid "Every package should include a license file detailing the terms of distribution. In many jurisdictions, packages without an explicit license can not be legally used or distributed by anyone other than the copyright holder. If you're unsure which license to choose, you can use resources such as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a lawyer."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:130
#: 2de5c860dca14c2995f6e98c7bee877f
msgid "For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/blob/master/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:135
#: de8edf63143545bda842db7c7f64ceb8
msgid "<your package>"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:137
#: fbb38c3588f84f75aeaae59bb148fd3b
msgid "Although it's not required, the most common practice is to include your Python modules and packages under a single top-level package that has the same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:141
#: 75c7859b81e6402295ecb98ca1dd114e
msgid "For an example, see the `sample <https://github.com/pypa/sampleproject/tree/master/src/sample>`_ package that's included in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:149
#: 06bcd39eeef046eda5f3141da5c3a5a3
msgid "setup() args"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:151
#: 11d29da154f14baca799fe12aa151e2a
msgid "As mentioned above, the primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:155
#: ee20076906094c73ab745886ba23da13
msgid "The most relevant arguments are explained below. Most of the snippets given are taken from the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:164
#: d2fcd92823294ba4a5ba84f17699a36e
msgid "name"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:170
#: a453d0887a9c4cf4955132bf02a7d07f
msgid "This is the name of your project, determining how your project is listed on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid project names must:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:174
#: 5856ac9c14aa46ce93e091b9e84db6f6
msgid "Consist only of ASCII letters, digits, underscores (``_``), hyphens (``-``), and/or periods (``.``), and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:176
#: f72b4943adeb4061a068f466d8cc48ce
msgid "Start & end with an ASCII letter or digit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:178
#: 16dc5622e745464abbde75c971af9747
msgid "Comparison of project names is case insensitive and treats arbitrarily-long runs of underscores, hyphens, and/or periods as equal.  For example, if you register a project named ``cool-stuff``, users will be able to download it or declare a dependency on it using any of the following spellings::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:190
#: ../source/specifications/binary-distribution-format.rst:127
#: cacef461465c4a6091a649b4a0688e3b
#: 0da4a2c2eff54a45b17e7af877365269
msgid "version"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:196
#: 590c5375311f48ab9057d74036766a89
msgid "This is the current version of your project, allowing your users to determine whether or not they have the latest version, and to indicate which specific versions they've tested their own software against."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:200
#: 635e99da78cd400a860a385766457da8
msgid "Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for each release if you publish your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:203
#: 6c9f0a944d9945cfa21eb6bbdb047409
msgid "See :ref:`Choosing a versioning scheme` for more information on ways to use versions to convey compatibility information to your users."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:206
#: 2d05ceae33cc40219572faa9e32055a2
msgid "If the project code itself needs run-time access to the version, the simplest way is to keep the version in both :file:`setup.py` and your code. If you'd rather not duplicate the value, there are a few ways to manage this. See the \":ref:`Single sourcing the version`\" Advanced Topics section."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:214
#: 018ca79f90194a04a97fca63889ca016
msgid "description"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:222
#: b124e0626de94209b52d15e302792daf
msgid "Give a short and long description for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:224
#: ef1b78f1d23846b7aea96fb566f19a7b
msgid "These values will be displayed on :term:`PyPI <Python Package Index (PyPI)>` if you publish your project. On ``pypi.org``, the user interface displays ``description`` in the grey banner and ``long_description`` in the section named \"Project Description\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:229
#: 560b3177c0344e909f8766ecdea5bf40
msgid "``description`` is also displayed in lists of projects. For example, it's visible in the search results pages such as https://pypi.org/search/?q=jupyter, the front-page lists of trending projects and new releases, and the list of projects you maintain within your account profile (such as https://pypi.org/user/jaraco/)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:235
#: 3358e491bb404b3392be8658a3bb13bb
msgid "A `content type <https://packaging.python.org/specifications/core-metadata/#description-content-type-optional>`_ can be specified with the ``long_description_content_type`` argument, which can be one of ``text/plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no formatting, `reStructuredText (reST) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`_, and the Github-flavored Markdown dialect of `Markdown <https://daringfireball.net/projects/markdown/>`_ respectively."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:245
#: a808f60c6a834eba86725e0ccf642eb4
msgid "url"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:252
#: 533e170326ff4d1986cca77e931fd743
msgid "Give a homepage URL for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:256
#: 32d2dcb0e315431f981573241e8e99be
msgid "author"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:263
#: 3dd551067d4743e8827c641f5ef10110
msgid "Provide details about the author."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:267
#: 96372987d25e4db6b4bd0c60635761e5
msgid "license"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:273
#: d254c5c4f5124a1da539c6512e958ae2
msgid "The ``license`` argument doesn't have to indicate the license under which your package is being released, although you may optionally do so if you want.  If you're using a standard, well-known license, then your main indication can and should be via the ``classifiers`` argument. Classifiers exist for all major open-source licenses."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:279
#: c05c910704bf40949ea1ef5452cbcabe
msgid "The \"license\" argument is more typically used to indicate differences from well-known licenses, or to include your own, unique license. As a general rule, it's a good idea to use a standard, well-known license, both to avoid confusion and because some organizations avoid software whose license is unapproved."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:287
#: f4f34e271dc54fea8e2f473eb3cb65cb
msgid "classifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:316
#: 012fec6e8bd547a692418a0039767226
msgid "Provide a list of classifiers that categorize your project. For a full listing, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:319
#: e93cc6acbc854f7eaf13a20f091d8ecc
msgid "Although the list of classifiers is often used to declare what Python versions a project supports, this information is only used for searching & browsing projects on PyPI, not for installing projects.  To actually restrict what Python versions a project can be installed on, use the :ref:`python_requires` argument."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:327
#: 2b1ac8b82a804f758be24626f3c74bae
msgid "keywords"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:333
#: 26834e4b6f9449bf82424959d5b49f86
msgid "List keywords that describe your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:337
#: fa7373c92a8244a08f50d8158505b8f4
msgid "project_urls"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:349
#: 4a76f624249949e08c243fcaa9cda2dd
msgid "List additional relevant URLs about your project. This is the place to link to bug trackers, source repositories, or where to support package development. The string of the key is the exact text that will be displayed on PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:355
#: 676a026fbec54a768f4039108b349fa1
msgid "packages"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:361
#: b0d2d4604e494757aaf5797f195299c7
msgid "Set ``packages`` to a list of all :term:`packages <Import Package>` in your project, including their subpackages, sub-subpackages, etc.  Although the packages can be listed manually, ``setuptools.find_packages()`` finds them automatically.  Use the ``include`` keyword argument to find only the given packages.  Use the ``exclude`` keyword argument to omit packages that are not intended to be released and installed."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:370
#: f75dfc57ff874106bcf8bb0b3bed1f40
msgid "py_modules"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:376
#: 9dad961c97bb4bc392d732fd39ef11e7
msgid "If your project contains any single-file Python modules that aren't part of a package, set ``py_modules`` to a list of the names of the modules (minus the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:388
#: 76a8235169424cfdb3b4fc6067b5402d
msgid "\"install_requires\" should be used to specify what dependencies a project minimally needs to run. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:392
#: a05396d1d8334de6a52ca2d3fbb62aa6
msgid "For more on using \"install_requires\" see :ref:`install_requires vs Requirements files`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:398
#: c3214b79f7604f74b5af6c61efc8b3ff
msgid "python_requires"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:400
#: 343287bf2c95470ca9e8f6fb39a9ef0a
msgid "If your project only runs on certain Python versions, setting the ``python_requires`` argument to the appropriate :pep:`440` version specifier string will prevent :ref:`pip` from installing the project on other Python versions.  For example, if your package is for Python 3+ only, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:407
#: 94dfb06b656342aaa0e0683d6e0d9db8
msgid "If your package is for Python 2.6, 2.7, and all versions of Python 3 starting with 3.3, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:412
#: f3a5509a6a874b22a964f793585c50d4
msgid "And so on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:416
#: 87a0edf8bbc54e3abc7537465ba22eb1
msgid "Support for this feature is relatively recent.  Your project's source distributions and wheels (see :ref:`Packaging Your Project`) must be built using at least version 24.2.0 of :ref:`setuptools` in order for the ``python_requires`` argument to be recognized and the appropriate metadata generated."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:422
#: 2933558f60484e5483b52b6509e4ad7b
msgid "In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the ``python_requires`` metadata.  Users with earlier versions of pip will be able to download & install projects on any Python version regardless of the projects' ``python_requires`` values."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:431
#: 0cfc03e32c31489b9104a0f349078fbd
msgid "package_data"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:440
#: 47f4fb02b4ee44778544a52fa36762d5
msgid "Often, additional files need to be installed into a :term:`package <Import Package>`. These files are often data that’s closely related to the package’s implementation, or text files containing documentation that might be of interest to programmers using the package. These files are called \"package data\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:445
#: b31f77ce65054b29b23d9b823923c6fc
msgid "The value must be a mapping from package name to a list of relative path names that should be copied into the package. The paths are interpreted as relative to the directory containing the package."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:449
#: 8758bf6512a240bfbb8173e9025684cc
msgid "For more information, see :std:doc:`Including Data Files <setuptools:userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:457
#: 29a9be801ab045be8dfac9f80013700d
msgid "data_files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:463
#: 9abe63e3be3d419eb462b37e99fba6f5
msgid "Although configuring :ref:`Package Data` is sufficient for most needs, in some cases you may need to place data files *outside* of your :term:`packages <Import Package>`.  The ``data_files`` directive allows you to do that. It is mostly useful if you need to install files which are used by other programs, which may be unaware of Python packages."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:469
#: 4ab3a735aa4e47df997659bee33c64e4
msgid "Each ``(directory, files)`` pair in the sequence specifies the installation directory and the files to install there. The ``directory`` must be a relative path (although this may change in the future, see `wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_). and it is interpreted relative to the installation prefix (Python’s ``sys.prefix`` for a default installation; ``site.USER_BASE`` for a user installation). Each file name in ``files`` is interpreted relative to the :file:`setup.py` script at the top of the project source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:479
#: b4f242faf3ed453d8b01064382f0da9b
msgid "For more information see the distutils section on `Installing Additional Files <http://docs.python.org/3/distutils/setupscript.html#installing-additional-files>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:484
#: 3fb1dedf346747abba87016d3a0be188
msgid "When installing packages as egg, ``data_files`` is not supported. So, if your project uses :ref:`setuptools`, you must use ``pip`` to install it. Alternatively, if you must use ``python setup.py``, then you need to pass the ``--old-and-unmanageable`` option."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:491
#: ee85684ed7224aad9379fdbf1bf7e14e
msgid "scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:493
#: df988bc3dfee44f68deed84d4c246348
msgid "Although ``setup()`` supports a `scripts <http://docs.python.org/3/distutils/setupscript.html#installing-scripts>`_ keyword for pointing to pre-made scripts to install, the recommended approach to achieve cross-platform compatibility is to use :ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:500
#: 81954d01597e4b9faee046d64ff00287
msgid "entry_points"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:509
#: 47cf14c300ff4c49b2bdbbfb3b9d8f33
msgid "Use this keyword to specify any plugins that your project provides for any named entry points that may be defined by your project or others that you depend on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:512
#: 4bffe0fc01ab47079d6c190c2e97b648
msgid "For more information, see the section on `Advertising Behavior <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:516
#: ae2d63aa36e849bc813192e23004cdea
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:521
#: da145eff803040fbb94fead9dc4a46a8
msgid "console_scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:531
#: ccab79d677f842c3adbd47d27ada70d5
msgid "Use \"console_script\" `entry points <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ to register your script interfaces. You can then let the toolchain handle the work of turning these interfaces into actual scripts [2]_.  The scripts will be generated during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:538
#: 0bcb404eacfc4adba00c745466bd51f3
msgid "For more information, see `Automatic Script Creation <https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation>`_ from the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:545
#: 7c459882ad444e5eadbd3bf435f17633
msgid "Choosing a versioning scheme"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:548
#: 22434f38034d446fae7dd266103e5dad
msgid "Standards compliance for interoperability"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:550
#: d2c4c2457ddc4f26922e0e94d6897ac7
msgid "Different Python projects may use different versioning schemes based on the needs of that particular project, but all of them are required to comply with the flexible :pep:`public version scheme <440#public-version-identifiers>` specified in :pep:`440` in order to be supported in tools and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:556
#: 8e3d78ca1c76482cbdbe58813562ceb7
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:567
#: fb6163e07df74da3a0eca6a04cb86768
msgid "To further accommodate historical variations in approaches to version numbering, :pep:`440` also defines a comprehensive technique for :pep:`version normalisation <440#normalization>` that maps variant spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:573
#: c9e4ce92111d4028992ab1eaa358b8d2
msgid "Scheme choices"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:576
#: c75968cb03ca4d048e0a6ae52618cea4
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:578
#: e97e407198ee45f2a075c43fe40eeb02
msgid "For new projects, the recommended versioning scheme is based on `Semantic Versioning <http://semver.org>`_, but adopts a different approach to handling pre-releases and build metadata."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:582
#: 4cb7909b46744b2db631353ecb26bccb
msgid "The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE numbering scheme, where the project author increments:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:585
#: cb10acaac9de4d0fa5386942a925656d
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:586
#: 0e15c9394594480cad86735f7c0fef17
msgid "MINOR version when they add functionality in a backwards-compatible manner, and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:587
#: 2d74cf60730d46e499f53226c38696ad
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:589
#: cdc76eb7bf1d4c3e80ec5c1833c749b5
msgid "Adopting this approach as a project author allows users to make use of :pep:`\"compatible release\" <440#compatible-release>` specifiers, where ``name ~= X.Y`` requires at least release X.Y, but also allows any later release with a matching MAJOR version."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:594
#: 1ec22a8007c847aa91c66fc551a05583
msgid "Python projects adopting semantic versioning should abide by clauses 1-8 of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:598
#: 8580f812e9594f8db175d5ed60715fda
msgid "Date based versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:600
#: a8238a1a4a73463ba46d3bd4121543a2
msgid "Semantic versioning is not a suitable choice for all projects, such as those with a regular time based release cadence and a deprecation process that provides warnings for a number of releases prior to removal of a feature."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:604
#: d5b947f1351f4bb8ab64d94a6d0b8595
msgid "A key advantage of date based versioning is that it is straightforward to tell how old the base feature set of a particular release is given just the version number."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:607
#: 3e14915bc2054cc48fe74095d49a0762
msgid "Version numbers for date based projects typically take the form of YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:611
#: dc94503730c74a2d886b87ad1c268ae7
msgid "Serial versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:613
#: 7550a82dab024bcbbd2b426eb9e18679
msgid "This is the simplest possible versioning scheme, and consists of a single number which is incremented every release."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:616
#: 72d17ada68514d118a3729e5fd35227a
msgid "While serial versioning is very easy to manage as a developer, it is the hardest to track as an end user, as serial version numbers convey little or no information regarding API backwards compatibility."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:621
#: 029d3d22bbe648e297b47460f9fba2c0
msgid "Hybrid schemes"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:623
#: 4a32282733f047269307d13549d96b1b
msgid "Combinations of the above schemes are possible. For example, a project may combine date based versioning with serial versioning to create a YEAR.SERIAL numbering scheme that readily conveys the approximate age of a release, but doesn't otherwise commit to a particular release cadence within the year."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:629
#: 825cf9a04f98421f892a30d5db6e685f
msgid "Pre-release versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:631
#: e0a398b6dcc94154a0b7a7889c6b2b24
msgid "Regardless of the base versioning scheme, pre-releases for a given final release may be published as:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:634
#: 26c5fa9939504b768fea8707608791c6
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:635
#: 00671fb7c99b49bfb8d46b090d77e38c
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:636
#: ac288fb8a60445a2aa7014b1b618e1fb
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:637
#: 9a8334f236a14de8895d395a3bb35af9
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:639
#: 779cd1bc4c1f4b2a87e4f704610b3bdc
msgid "``pip`` and other modern Python package installers ignore pre-releases by default when deciding which versions of dependencies to install."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:644
#: 37efd4fde83b4cd0a68e048adae2779c
msgid "Local version identifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:646
#: 9756bebba67e4b7d9f168271e9efd860
msgid "Public version identifiers are designed to support distribution via :term:`PyPI <Python Package Index (PyPI)>`. Python's software distribution tools also support the notion of a :pep:`local version identifier <440#local-version-identifiers>`, which can be used to identify local development builds not intended for publication, or modified variants of a release maintained by a redistributor."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:653
#: 267ddf0efd69423fb6d06fb2a2163274
msgid "A local version identifier takes the form ``<public version identifier>+<local version label>``. For example::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:661
#: 38ea8724abaa4c6e962756528028d5ac
msgid "Working in \"development mode\""
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:663
#: bab8b7777fe64331aeeda6e33f4fbc7d
msgid "Although not required, it's common to locally install your project in \"editable\" or \"develop\" mode while you're working on it.  This allows your project to be both installed and editable in project form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:667
#: d2abd50bf4c847c59f1ac434eda0bf01
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:674
#: 6189d00cd0bf45a3a8e963ab4b2c3eca
msgid "Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` refers to the current working directory, so together, it means to install the current directory (i.e. your project) in editable mode.  This will also install any dependencies declared with \"install_requires\" and any scripts declared with \"console_scripts\".  Dependencies will be installed in the usual, non-editable mode."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:680
#: 68aa3bb5af024d7b99c13ff495ce7efc
msgid "It's fairly common to also want to install some of your dependencies in editable mode as well. For example, supposing your project requires \"foo\" and \"bar\", but you want \"bar\" installed from VCS in editable mode, then you could construct a requirements file like so::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:688
#: 6c4f7721a520472585b6704460e778f2
msgid "The first line says to install your project and any dependencies. The second line overrides the \"bar\" dependency, such that it's fulfilled from VCS, not PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:692
#: b6d90724c2f949f58da802d6f1a14f48
msgid "If, however, you want \"bar\" installed from a local directory in editable mode, the requirements file should look like this, with the local paths at the top of the file::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:697
#: 70ad1be886a44424a977d9da33f099ef
msgid "Otherwise, the dependency will be fulfilled from PyPI, due to the installation order of the requirements file.  For more on requirements files, see the :ref:`Requirements File <pip:Requirements Files>` section in the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:701
#: ad808146afa54092ae3c8c3b383892f6
msgid "Lastly, if you don't want to install any dependencies at all, you can run::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:706
#: 999eec3f406a44e7bc02785c51cdd4c0
msgid "For more information, see the `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_ section of the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:713
#: 904f95b86b174544a08ce7560dc94eea
msgid "Packaging your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:715
#: 2c109001874f4059a54cfba0648c44e7
msgid "To have your project installable from a :term:`Package Index` like :term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:`Distribution <Distribution Package>` (aka \":term:`Package <Distribution Package>`\") for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:720
#: 071c5977c6c54c03bcb7a56f1e7e7763
msgid "Before you can build wheels and sdists for your project, you'll need to install the ``build`` package:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:737
#: 565e33e2b9dc4c6481fd2c08521a4a2b
msgid "Source distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:739
#: 0e87118687504ecea7cc9752d8b51bce
msgid "Minimally, you should create a :term:`Source Distribution <Source Distribution (or \"sdist\")>`:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:755
#: bbd9eb91aa784a7aad4c1f6c061ea4b0
msgid "A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built Distribution`), and requires a build step when installed by pip.  Even if the distribution is pure Python (i.e. contains no extensions), it still involves a build step to build out the installation metadata from :file:`setup.py` and/or :file:`setup.cfg`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:763
#: d401b187492a4d5f9ed48b99868448b1
msgid "Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:765
#: 7e5657ae68ba435b8709bae8fec312db
msgid "You should also create a wheel for your project. A wheel is a :term:`built package <Built Distribution>` that can be installed without needing to go through the \"build\" process. Installing wheels is substantially faster for the end user than installing from a source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:770
#: 55886deb5e9b4fc494b8fbd3b941d253
msgid "If your project is pure Python then you'll be creating a :ref:`\"Pure Python Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:773
#: f5527248adef48c498a5586267b9ae36
msgid "If your project contains compiled extensions, then you'll be creating what's called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:776
#: 53254218f31147fd9d63f3d2e3d612d5
msgid "If your project also supports Python 2 *and* contains no C extensions, then you should create what's called a *Universal Wheel* by adding the following to your :file:`setup.cfg` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:785
#: 64dba808a1ed4955a1d9ccc1fd2bad19
msgid "Only use this setting if your project does not have any C extensions *and* supports Python 2 and 3."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:792
#: d827ee2052904198a99ecc0213ebfb68
msgid "Pure Python Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:794
#: 4d672b168e614f308ca9705444736fd7
msgid "*Pure Python Wheels* contain no compiled extensions, and therefore only require a single Python wheel."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:797
#: ../source/guides/distributing-packages-using-setuptools.rst:826
#: 08a94822300e4028a67254e15a0dfbdc
#: 7a81f5f4edb245a0ba21b66855660900
msgid "To build the wheel:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:811
#: b27934d14727415ea2c1b072c5ce45e3
msgid "The ``wheel`` package will detect that the code is pure Python, and build a wheel that's named such that it's usable on any Python 3 installation.  For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:815
#: 16477f6df79045adbf5402a540779709
msgid "If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both files for you; this is useful when you don't need multiple wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:821
#: 57bd71a18c5a451888f862c0922e45a4
msgid "Platform Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:823
#: 33a015d2afc3413692b41cefb6854490
msgid "*Platform Wheels* are wheels that are specific to a certain platform like Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:841
#: ee628e49af594bb58735a7daa3ffb693
msgid "The ``wheel`` package will detect that the code is not pure Python, and build a wheel that's named such that it's only usable on the platform that it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:847
#: 9ee1342468bf4cd79dcb9049e1c4e528
msgid ":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:855
#: 339446e0d63e463085ba82194ce079a2
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:857
#: d8ddbb3741ba462e8edacaa29d123814
msgid "When you ran the command to create your distribution, a new directory ``dist/`` was created under your project's root directory. That's where you'll find your distribution file(s) to upload."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:861
#: 89b6f833b5924b45befccf6c3c484621
msgid "These files are only created when you run the command to create your distribution. This means that any time you change the source of your project or the configuration in your :file:`setup.py` file, you will need to rebuild these files again before you can distribute the changes to PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:866
#: d207f8ac246344d78c5144f510dc33cb
msgid "Before releasing on main PyPI repo, you might prefer training with the `PyPI test site <https://test.pypi.org/>`_ which is cleaned on a semi regular basis. See :ref:`using-test-pypi` on how to setup your configuration in order to use it."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:871
#: d2aecbfdb5b84fa4ad939a23e7866f92
msgid "In other resources you may encounter references to using ``python setup.py register`` and ``python setup.py upload``. These methods of registering and uploading a package are **strongly discouraged** as it may use a plaintext HTTP or unverified HTTPS connection on some Python versions, allowing your username and password to be intercepted during transmission."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:877
#: 66780486094247f094497837b8f77cfb
msgid "The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to ensure safety of all users, certain kinds of URLs and directives are forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** trying to upload your distribution, you should check to see if your brief / long descriptions provided in :file:`setup.py` are valid.  You can do this by running :std:doc:`twine check <index>` on your package files::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:888
#: 32778d7016f8462a9896cfe3b86f7490
msgid "Create an account"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:890
#: b7a93a2d345d427e82542f8a77bf61cc
msgid "First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. You can create an account `using the form on the PyPI website <https://pypi.org/account/register/>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:894
#: 70dc95fc8fcb4314b91b4aba87ab43b9
msgid "Now you'll create a PyPI `API token`_ so you will be able to securely upload your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:897
#: c5bd4943b43e4f61b828edac85a5ac39
msgid "Go to https://pypi.org/manage/account/#api-tokens and create a new `API token`_; don't limit its scope to a particular project, since you are creating a new project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:901
#: 5a9d4d864fa64d6d8b0cb0e793423f36
msgid "**Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:904
#: 5adaa6f356df4b139d8a4fbd42766b88
msgid "To avoid having to copy and paste the token every time you upload, you can create a :file:`$HOME/.pypirc` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:913
#: 0c9e5aa4a5874c28a57d3a569772a020
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:915
#: ../source/guides/migrating-to-pypi-org.rst:70
#: ../source/guides/migrating-to-pypi-org.rst:109
#: ../source/guides/using-testpypi.rst:83
#: 60665040a4074189ac0b40bde081d1e1
#: 4627049b41f745e0afc0e4688fad2a16
#: 47bd5ad7c7d84c0b8d710ef98657fa88
#: 9707bf968fa14d94ae2be1d149b1cffe
msgid "For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:921
#: 1f7dd356eaea4c579f98e796c24ce512
msgid "Upload your distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:923
#: c3d7713fcc36439a95433f3101021d34
msgid "Once you have an account you can upload your distributions to :term:`PyPI <Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:926
#: fe325e7665e3413f8d77dea63dd54cd1
msgid "The process for uploading a release is the same regardless of whether or not the project already exists on PyPI - if it doesn't exist yet, it will be automatically created when the first release is uploaded."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:930
#: 56cb6596131045779416529b2e59d6b0
msgid "For the second and subsequent releases, PyPI only requires that the version number of the new release differ from any previous releases."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:937
#: e5407013a09a41588c2fede8d4ed0c57
msgid "You can see if your package has successfully uploaded by navigating to the URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is the name of your project that you uploaded. It may take a minute or two for your project to appear on the site."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:944
#: ../source/tutorials/installing-packages.rst:663
#: 1c50d68e22914f0da15692850dd1c775
#: 1728db6423744ac7811cae7f8298b099
msgid "Depending on your platform, this may require root or Administrator access. :ref:`pip` is currently considering changing this by `making user installs the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:950
#: 496e4e79ac294ba185317baa7da4eb4a
msgid "Specifically, the \"console_script\" approach generates ``.exe`` files on Windows, which are necessary because the OS special-cases ``.exe`` files. Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher for Windows <397>` allow scripts to be used in many cases, but not all."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:5
#: 9e750002a08a43a0a58060c68827daa7
msgid "Dropping support for older Python versions"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:7
#: 3a582712d370404fad81c8e7b29447b6
msgid "Dropping support for older Python versions is supported by the standard :ref:`core-metadata` 1.2 specification via a \"Requires-Python\" attribute."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:9
#: b51bd51cea7f4587906ec0fbd810fc0e
msgid "Metadata 1.2+ clients, such as Pip 9.0+, will adhere to this specification by matching the current Python runtime and comparing it with the required version in the package metadata. If they do not match, it will attempt to install the last package distribution that supported that Python runtime."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:12
#: 2c4ad75aa68e43629c4e6362facfddd5
msgid "This mechanism can be used to drop support for older Python versions, by amending the \"Requires-Python\" attribute in the package metadata."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:14
#: f0fe2c3243564474982518f5ad13995a
msgid "This guide is specifically for users of :ref:`setuptools`, other packaging tools such as ``flit`` may offer similar functionality but users will need to consult relevant documentation."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:17
#: 2c3607626b944019bb8fb14736d9497c
msgid "Requirements"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:19
#: 3237e9ddb84d4459a5fe79a2013ba614
msgid "This workflow requires that:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:21
#: ad72855d245c46588995be99997854a8
msgid "The publisher is using the latest version of :ref:`setuptools`,"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:22
#: 57ba6cddf91143adb0aef50f94f0b4ac
msgid "The latest version of :ref:`twine` is used to upload the package,"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:23
#: 31e387e664444e6faf41521b04313a3c
msgid "The user installing the package has at least Pip 9.0, or a client that supports the Metadata 1.2 specification."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:26
#: fdf936749dc24f2e984fad4a616b7e9d
msgid "Dealing with the universal wheels"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:28
#: b51a987dfb5148a58fb59aee6afe53c8
msgid "Traditionally, projects providing Python code that is semantically compatible with both Python 2 and Python 3, produce :term:`wheels <Wheel>` that have a ``py2.py3`` tag in their names. When dropping support for Python 2, it is important not to forget to change this tag to just ``py3``. It is often configured within :file:`setup.cfg` under the ``[bdist_wheel]`` section by setting ``universal = 1`` if they use setuptools."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:36
#: cf049b15997d425ab3e7a04dc526d941
msgid "If you use this method, either remove this option or section, or explicitly set ``universal`` to ``0``:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:48
#: 739780a9a331424db28d4b833503eee4
msgid "Since it is possible to override the :file:`setup.cfg` settings via CLI flags, make sure that your scripts don't have ``--universal`` in your package creation scripts."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:53
#: 7f0559441f7f4c4e83ef27d6b94703e2
msgid "Defining the Python version required"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:56
#: ea0e0ab990c8437385a0603b0e666857
msgid "1. Download the newest version of Setuptools"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:58
#: 03fad182c4a04dc285394c1690e71289
msgid "Ensure that before you generate source distributions or binary distributions, you update Setuptools and install twine."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:60
#: accd8e27b69147c7b9e94cc9425d9521
msgid "Steps:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:74
#: ddc49521e55a4222bf9ce484aa2532ae
msgid "`setuptools` version should be above 24.0.0."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:77
#: 5f6d99c4da2347ea9584058e6a667b74
msgid "2. Specify the version ranges for supported Python distributions"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:79
#: 2e9c2ed1d74e400c832c8c2c1c1d856d
msgid "You can specify version ranges and exclusion rules, such as at least Python 3. Or, Python 2.7, 3.4 and beyond."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:81
#: ../source/specifications/core-metadata.rst:139
#: ../source/specifications/core-metadata.rst:463
#: ../source/specifications/core-metadata.rst:487
#: ../source/specifications/core-metadata.rst:527
#: ../source/specifications/core-metadata.rst:550
#: ../source/specifications/core-metadata.rst:583
#: ../source/specifications/core-metadata.rst:693
#: ../source/specifications/core-metadata.rst:722
#: 8331be5164fa4f34a2f0ff5a90aac6a9
#: 5aa9b91d2c2047ccb72e258f848c1702
#: b46983c33c744803a4b8bdec5cf68e50
#: 20806810e1b04589a7d91b7d94d0493a
#: d248a170b16545a4b7dd83385f56b08c
#: 819b406ce2714f0aa832d42b28614bdc
#: 6526098d8d3043b98b8fcb69beeb067b
#: f79974ae7e60435db8decf7c6b5eb7f9
#: 5475b8a408af4a8bac254009e64c89db
msgid "Examples::"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:86
#: 52ec4c423e174ee5b01b925d6234c223
msgid "The way to set those values is within the call to ``setup`` within your :file:`setup.py` script. This will insert the ``Requires-Python`` metadata values based on the argument you provide in ``python_requires``."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:101
#: 0b8aa70d93d3486181f8a248a39c3dc2
msgid "3. Validating the Metadata before publishing"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:103
#: 350afd89efdd44179fea068494104b04
msgid "Within a Python source package (the zip or the tar-gz file you download) is a text file called PKG-INFO."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:105
#: 96741e8ba68f47b3a3b813ef77f54923
msgid "This file is generated by Distutils or :ref:`setuptools` when it generates the source package. The file contains a set of keys and values, the list of keys is part of the PyPa standard metadata format."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:108
#: a4191e5efa6a4ccca79267b29db87bb9
msgid "You can see the contents of the generated file like this::"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:112
#: 75237a13148e4ee9a8f374e447ba6fed
msgid "Validate that the following is in place, before publishing the package:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:114
#: 7ce1795385764b448785f275dcf934c4
msgid "If you have upgraded correctly, the Metadata-Version value should be 1.2 or higher."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:115
#: 23016257f843421a93eb73d4d33a3fb9
msgid "The Requires-Python field is set and matches your specification in setup.py."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:118
#: 132cf050603742b7a04e013b35ec7908
msgid "4. Using Twine to publish"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:120
#: ea4235562ed74fbd91d961d0f59130c5
msgid "Twine has a number of advantages, apart from being faster it is now the supported method for publishing packages."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:122
#: 39dd80f8d4cf4e968e65ab94cff2987c
msgid "Make sure you are using the newest version of Twine, at least 1.9."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:125
#: 661566ed925640af9d1d42d7f9bf887d
msgid "Dropping a Python release"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:127
#: fdaa052b5ae44e8b9eff1a868da5897e
msgid "Once you have published a package with the Requires-Python metadata, you can then make a further update removing that Python runtime from support."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:129
#: 010a40b0dad44086a902e8ccf6ca663a
msgid "It must be done in this order for the automated fallback to work."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:131
#: ef1b7c17e13345cd9f9bfb7973e7952e
msgid "For example, you published the Requires-Python: \">=2.7\" as version 1.0.0 of your package."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:133
#: 417891ba4dae42beaf0933d3c8871716
msgid "If you were then to update the version string to \">=3.5\", and publish a new version 2.0.0 of your package, any users running Pip 9.0+ from version 2.7 will have version 1.0.0 of the package installed, and any >=3.5 users will receive version 2.0.0."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:5
#: 9874c81feed64fbcaf321a7cf0fc9edb
msgid "Hosting your own simple repository"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:8
#: f2b10adfc0a24fa8926609d001342175
msgid "If you wish to host your own simple repository [1]_, you can either use a software package like `devpi`_ or you can use simply create the proper directory structure and use any web server that can serve static files and generate an autoindex."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:13
#: 5161146521034875a4170ba672a2eef9
msgid "In either case, since you'll be hosting a repository that is likely not in your user's default repositories, you should instruct them in your project's description to configure their installer appropriately. For example with pip:"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:29
#: 6303f6240ea3467d9f497bc01a6aeb50
msgid "In addition, it is **highly** recommended that you serve your repository with valid HTTPS. At this time, the security of your user's installations depends on all repositories using a valid HTTPS setup."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:35
#: a37796db35ca4ced83674e4621cad042
msgid "\"Manual\" repository"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:37
#: 045009c081c941b18302f142e83c5fce
msgid "The directory layout is fairly simple, within a root directory you need to create a directory for each project. This directory should be the normalized name (as defined by :pep:`503`) of the project. Within each of these directories simply place each of the downloadable files. If you have the projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" (with the version 0.1) You should end up with a structure that looks like::"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:51
#: 3960f8ce1c5c4aaf95383f126f80c044
msgid "Once you have this layout, simply configure your webserver to serve the root directory with autoindex enabled. For an example using the built in Web server in `Twisted`_, you would simply run ``twistd -n web --path .`` and then instruct users to add the URL to their installer's configuration."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:58
#: 1468f0531c0d43ceb66c82f04e4c490f
msgid "For complete documentation of the simple repository protocol, see :pep:`503`."
msgstr ""

#: ../source/guides/index.rst:8
#: ../source/guides/index.rst:8
#: 
#: 1067c8f58e70432d884d972b4b3b5d7e
msgid "Installing Packages:"
msgstr ""

#: ../source/guides/index.rst:20
#: ../source/guides/index.rst:20
#: 
#: f3ed3500f9a44e6ba8483400b1f21413
msgid "Building and Publishing Projects:"
msgstr ""

#: ../source/guides/index.rst:38
#: ../source/guides/index.rst:38
#: 
#: 4b262b962ed9470db43dfb251026490e
msgid "Miscellaneous:"
msgstr ""

#: ../source/guides/index.rst:4
#: 0f3d1414705e46de872afe78018d327f
msgid "**Guides** are focused on accomplishing a specific task and assume that you are already familiar with the basics of Python packaging. If you're looking for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:5
#: 125a6e94837548fb913836e5f66c2392
msgid "Package index mirrors and caches"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:8
#: 004adca9a09747ccb822fd431b45159f
#: 6d47af82929a43b4a74be0a0f488c98d
msgid "2014-12-24"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:14
#: 2d07796017574b4c8b487b841336666d
msgid "Mirroring or caching of PyPI can be used to speed up local package installation, allow offline work, handle corporate firewalls or just plain Internet flakiness."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:17
#: b626d981686f420caba44f1679759bb5
msgid "Three options are available in this area:"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:19
#: d5ac20bb04f94355be101a8df87d1e62
msgid "pip provides local caching options,"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:20
#: 1018af53a5684730ac39740a8d2449e9
msgid "devpi provides higher-level caching option, potentially shared amongst many users or machines, and"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:22
#: df2133f27b344b9e984907e1eed937b6
msgid "bandersnatch provides a local complete mirror of all PyPI :term:`packages <Distribution Package>`."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:27
#: 7a9435e7223c4f9896ade859eda0e952
msgid "Caching with pip"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:29
#: d696448046df497bba2c9681e2c1da17
msgid "pip provides a number of facilities for speeding up installation by using local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:32
#: e739d6dc41bf4011a7c34e80b3f0f9e9
msgid "`Fast & local installs <https://pip.pypa.io/en/latest/user_guide/#installing-from-local-packages>`_ by downloading all the requirements for a project and then pointing pip at those downloaded files instead of going to PyPI."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:36
#: e8b021bb65864d0fac43ceba22492b8a
msgid "A variation on the above which pre-builds the installation files for the requirements using `python -m pip wheel <https://pip.readthedocs.io/en/latest/reference/pip_wheel.html>`_::"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:45
#: 92745631abcd47d1af4e20f63fcbe307
msgid "Caching with devpi"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:47
#: f9339254e7e541bd99281dd4645143ec
msgid "devpi is a caching proxy server which you run on your laptop, or some other machine you know will always be available to you. See the `devpi documentation for getting started`__."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:55
#: ce3d89595dca4162a6789502c902bf87
msgid "Complete mirror with bandersnatch"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:57
#: 46e90a38437e487b8c3412958b921ac1
msgid "bandersnatch will set up a complete local mirror of all PyPI :term:`packages <Distribution Package>` (externally-hosted packages are not mirrored). See the `bandersnatch documentation for getting that going`__."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:63
#: bfb989928b9a481da7b4de7d301b06d2
msgid "A benefit of devpi is that it will create a mirror which includes :term:`packages <Distribution Package>` that are external to PyPI, unlike bandersnatch which will only cache :term:`packages <Distribution Package>` hosted on PyPI."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:5
#: d18ab24c26e747df8caad7a08b7fc3ab
msgid "Installing scientific packages"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:11
#: 58f5d3934e3f4f4787e061c3a27d5438
msgid "Scientific software tends to have more complex dependencies than most, and it will often have multiple build options to take advantage of different kinds of hardware, or to interoperate with different pieces of external software."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:16
#: 5921f093e93146d48db80f0569f2732b
msgid "In particular, `NumPy <http://www.numpy.org/>`__, which provides the basis for most of the software in the `scientific Python stack <http://www.scipy.org/stackspec.html#stackspec>`__ can be configured to interoperate with different FORTRAN libraries, and can take advantage of different levels of vectorised instructions available in modern CPUs."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:22
#: d99c980d5d61497e8b73eface072eca8
msgid "Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-built 32-bit and 64-bit binaries in the ``wheel`` format are available for all major operating systems (Windows, macOS, and Linux) on PyPI. Note, however, that on Windows, NumPy binaries are linked against the `ATLAS <http://www.netlib.org/atlas/>`__ BLAS/LAPACK library, restricted to SSE2 instructions, so they may not provide optimal linear algebra performance."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:29
#: 51ba74e1ba2c46c8b010ea17c7b8d926
msgid "There are a number of alternative options for obtaining scientific Python libraries (or any other Python libraries that require a compilation environment to install from source and don't provide pre-built wheel files on PyPI)."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:35
#: f20e63d6803f44d38466610cc3a68307
msgid "Building from source"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:37
#: 39bb0ce0484c4854ad1253ed9409ee52
msgid "The same complexity which makes it difficult to distribute NumPy (and many of the projects that depend on it) as wheel files also make them difficult to build from source yourself. However, for intrepid folks that are willing to spend the time wrangling compilers and linkers for both C and FORTRAN, building from source is always an option."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:45
#: fa12e666c23a4c2ea03eab95e021db98
msgid "Linux distribution packages"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:47
#: 48e02114811b47eba273589a9e4e36c5
msgid "For Linux users, the system package manager will often have pre-compiled versions of various pieces of scientific software, including NumPy and other parts of the scientific Python stack."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:51
#: ae2caa812d2c4061b088fe1097cfcf68
msgid "If using versions which may be several months old is acceptable, then this is likely to be a good option (just make sure to allow access to distributions installed into the system Python when using virtual environments)."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:57
#: 6ee1f56eba3b4f599178df3a6b8b0437
msgid "Windows installers"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:59
#: ecfb0c3ace8348179955939b6d13cf15
msgid "Many Python projects that don't (or can't) currently publish wheel files at least publish Windows installers, either on PyPI or on their project download page. Using these installers allows users to avoid the need to set up a suitable environment to build extensions locally."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:64
#: f21f109ef79242a48d9903214220a382
msgid "The extensions provided in these installers are typically compatible with the CPython Windows installers published on python.org."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:67
#: 6d085d24bd2c424b9645af6fec682cfd
msgid "For projects which don't provide their own Windows installers (and even some which do), Christoph Gohlke at the University of California provides a `collection of Windows installers <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`__. Many Python users on Windows have reported a positive experience with these prebuilt versions."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:73
#: 033ae31453bf4c9e80c84dbf7c455a05
msgid "As with Linux system packages, the Windows installers will only install into a system Python installation - they do not support installation in virtual environments. Allowing access to distributions installed into the system Python when using virtual environments is a common approach to working around this limitation."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:79
#: c01e0cea2d4d48a3a362bf0027e5a8f8
msgid "The :term:`Wheel` project also provides a :command:`wheel convert` subcommand that can convert a Windows :command:`bdist_wininst` installer to a wheel."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:86
#: 8d1f95bc22cd439d83ea7dbb2240d8b4
msgid "macOS installers and package managers"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:88
#: e0ce2eefe6b24799bfbed72a802c6645
msgid "Similar to the situation on Windows, many projects (including NumPy) publish macOS installers that are compatible with the macOS CPython binaries published on python.org."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:92
#: 5c9f4bee30564902bcb2b30a0fbca4f4
msgid "macOS users also have access to Linux distribution style package managers such as ``MacPorts``. The SciPy site has more details on using MacPorts to install the `scientific Python stack <http://www.scipy.org/install.html#mac-packages>`__"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:99
#: 5eab457e56dd4d4ba795bae281fd08ed
msgid "SciPy distributions"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:101
#: ab1a31084ec841049d9d6bbae3577a16
msgid "The SciPy site lists `several distributions <http://www.scipy.org/install.html>`__ that provide the full SciPy stack to end users in an easy to use and update format."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:105
#: ccd36b06ea6248229a715314abb1d48a
msgid "Some of these distributions may not be compatible with the standard ``pip`` and ``virtualenv`` based toolchain."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:109
#: ../source/key_projects.rst:586
#: f3a87df1950346eaacbe931393b4a4a0
#: 2df66e621f1d46e5a2c829e7bf843a68
msgid "Spack"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:110
#: 9a76ad1ee6b24620ac1598bb100dac84
msgid "`Spack <https://github.com/LLNL/spack/>`_ is a flexible package manager designed to support multiple versions, configurations, platforms, and compilers. It was built to support the needs of large supercomputing centers and scientific application teams, who must often build software many different ways. Spack is not limited to Python; it can install packages for ``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It is non-destructive; installing a new version of one package does not break existing installations, so many configurations can coexist on the same system."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:119
#: b1f1537306344afd960ebd7fcfb1c2dd
msgid "Spack offers a simple but powerful syntax that allows users to specify versions and configuration options concisely. Package files are written in pure Python, and they are templated so that it is easy to swap compilers, dependency implementations (like MPI), versions, and build options with a single package file.  Spack also generates *module* files so that packages can be loaded and unloaded from the user's environment."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:128
#: 7b883e83dd4844109fdc25089748dd94
msgid "The conda cross-platform package manager"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:130
#: 95ed8ef5c51a4791867d952f94a9008c
msgid "`Anaconda <https://www.anaconda.com/download/>`_ is a Python distribution published by Anaconda, Inc. It is a stable collection of Open Source packages for big data and scientific use.  As of the 5.0 release of Anaconda, about 200 packages are installed by default, and a total of 400-500 can be installed and updated from the Anaconda repository."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:136
#: a0b27d44961a494899debf1c9ff18369
msgid "``conda`` is an open source (BSD licensed) package management system and environment management system included in Anaconda that allows users to install multiple versions of binary software packages and their dependencies, and easily switch between them. It is a cross-platform tool working on Windows, macOS, and Linux. Conda can be used to package up and distribute all kinds of packages, it is not limited to just Python packages. It has full support for native virtual environments. Conda makes environments first-class citizens, making it easy to create independent environments even for C libraries. It is written in Python, but is Python-agnostic. Conda manages Python itself as a package, so that :command:`conda update python` is possible, in contrast to pip, which only manages Python packages. Conda is available in Anaconda and Miniconda (an easy-to-install download with just Python and conda)."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:2
#: 5c5bc2aa218f4578a5f3c684acad7ff2
msgid "Installing stand alone command line tools"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:4
#: 4cb649e52a244ee8b06df3de5b3b8548
msgid "Many packages have command line entry points. Examples of this type of application are `mypy <https://github.com/python/mypy>`_, `flake8 <https://github.com/PyCQA/flake8>`_, `pipenv <https://github.com/pypa/pipenv>`_,and `black <https://github.com/ambv/black>`_."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:10
#: f251dfae341d464ab220b9c623fe0880
msgid "Usually you want to be able to access these from anywhere, but installing packages and their dependencies to the same global environment can cause version conflicts and break dependencies the operating system has on Python packages."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:15
#: 94969427b960408c875ba5c589911feb
msgid "`pipx <https://github.com/pipxproject/pipx>`_ solves this by creating a virtual environment for each package, while also ensuring that package's applications are accessible through a directory that is on your ``$PATH``. This allows each package to be upgraded or uninstalled without causing conflicts with other packages, and allows you to safely run the program from anywhere."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:21
#: 3942d7961ddf45f2b1bad72d8dd44d50
msgid "pipx only works with Python 3.6+."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:23
#: a358492a228d4d068d003bedd3bc8060
msgid "``pipx`` is installed with ``pip``:"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:30
#: adfa6efd066f46f2a7df69e24cef6593
msgid "You may need to restart your terminal for the path updates to take effect."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:32
#: 2e52c68a16244003a0e1e0651ee62155
msgid "Now you can install packages with ``pipx install`` and access the package's entry point(s) from anywhere."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:39
#: ../source/guides/installing-stand-alone-command-line-tools.rst:100
#: 69f7bd7ec36d46c091a5000d672cffe7
#: 2745e5d7ed824b0bb8e4eead1ddfdd5d
msgid "For example"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:59
#: aa5a7fdc4d25422cb20a7d8a4b8eafa8
msgid "To see a list of packages installed with pipx and which CLI applications are available, use ``pipx list``."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:79
#: e154cf68934f498ea850d5ce95cdd325
msgid "To upgrade or uninstall the package"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:86
#: 1ee84e33abc542738d97f82e54e4135a
msgid "``pipx`` can be upgraded or uninstalled with pip"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:93
#: 7be85b45230343489337a0942cfaa8c8
msgid "``pipx`` also allows you to install and run the latest version of a cli tool in a temporary, ephemeral environment."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:106
#: 3af57e8043354b77a8f71172c025abfc
msgid "To see the full list of commands ``pipx`` offers, run"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:112
#: af3befffd5c246f39f1e634133e2ef36
msgid "You can learn more about ``pipx`` at its homepage, https://github.com/pipxproject/pipx."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:5
#: bf212b0b5c584518996b793beaba3383
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:8
#: 37db2bf381794aef9933ae8600877093
msgid "2015-09-17"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:11
#: 42d1b386ed63455c863b1b75d79464f0
msgid "This section covers how to install :ref:`pip`, :ref:`setuptools`, and :ref:`wheel` using Linux package managers."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:14
#: c86e552643784fa798aae32094d4bbdb
msgid "If you're using a Python that was downloaded from `python.org <https://www.python.org>`_, then this section does not apply.  See the :ref:`installing_requirements` section instead."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:18
#: d48cb36a4a124d7288f26374073db344
msgid "Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, and :ref:`wheel` supported by a specific Linux Distribution to be outdated by the time it's released to the public, and updates generally only occur for security reasons, not for feature updates.  For certain Distributions, there are additional repositories that can be enabled to provide newer versions.  The repositories we know about are explained below."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:25
#: 9e23ad6af6124f609be083cf302ace8b
msgid "Also note that it's somewhat common for Distributions to apply patches for the sake of security and normalization to their own standards.  In some cases, this can lead to bugs or unexpected behaviors that vary from the original unpatched versions.  When this is known, we will make note of it below."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:32
#: 906e72686c1e467eb1bde3f6338fa194
msgid "Fedora"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:34
#: c36cba64e41e49c6a36470a73041bc41
msgid "Fedora 21:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:36
#: ../source/guides/installing-using-linux-tools.rst:45
#: ../source/guides/installing-using-linux-tools.rst:124
#: ../source/guides/installing-using-linux-tools.rst:138
#: ../source/guides/installing-using-linux-tools.rst:158
#: 14284f8956d14a6d980531ad914e3de9
#: f05cd4b1421d4e7ca1b1d326c00a3a13
#: b88aa080c1604647a8a90fcef46bd808
#: 788504e0461546cf8865e3fde9aaf4b0
#: 063957b35ae1412da7bebcc527798a4e
msgid "Python 2::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:41
#: 81a74b1b6c804e77b29f722b8d951193
msgid "Python 3: ``sudo yum install python3 python3-wheel``"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:43
#: 4e42452eb66b46c7b49bf53c3f46e5ea
msgid "Fedora 22:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:50
#: 4efce69375954513a4716a8011ec4ce7
msgid "Python 3: ``sudo dnf install python3 python3-wheel``"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:53
#: ba6e2d8dee54448cb8ed16498f3bfede
msgid "To get newer versions of pip, setuptools, and wheel for Python 2, you can enable the `PyPA Copr Repo <https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using the `Copr Repo instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__, and then run::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:63
#: 94e7fdb3819341c289ace9b426f77928
msgid "CentOS/RHEL"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:65
#: 084bc9acbff54ebcb52ce914009246f4
msgid "CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core repositories, although :ref:`setuptools` is installed by default."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:68
#: e469f8fd50804d029d223acf80d98d2d
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:70
#: f4dd4ea1ee9b4c8ab64ecd3aad3a4fe7
msgid "Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using `these instructions <https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F>`__. On EPEL 6 and EPEL7, you can install pip like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:77
#: bcfcdf047d1f453a82f1f4323bfdc951
msgid "On EPEL 7 (but not EPEL 6), you can install wheel like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:81
#: 5b2d64c509604b3a87b31f5c21e5b17d
msgid "Since EPEL only offers extra, non-conflicting packages, EPEL does not offer setuptools, since it's in the core repository."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:85
#: 70710ddfbd4241a8a982ac40be70f46e
msgid "Enable the `PyPA Copr Repo <https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using `these instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__ [1]_. You can install pip and wheel like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:92
#: 3c50be9ff0de4310aeeb3172bb67657f
msgid "To additionally upgrade setuptools, run::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:97
#: 37d45976d2054b3b97bc0e698432f57d
msgid "To install pip, wheel, and setuptools, in a parallel, non-system environment (using yum) then there are two options:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:101
#: a6a600b272c34b58847c6b185a7e9253
msgid "Use the \"Software Collections\" feature to enable a parallel collection that includes pip, setuptools, and wheel."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:104
#: 4262c49826c94f58bb1ce99d6592334b
msgid "For Redhat, see here: http://developers.redhat.com/products/softwarecollections/overview/"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:106
#: a9c5358b108c4c5cafef291b3f2b02c4
msgid "For CentOS, see here: https://www.softwarecollections.org/en/"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:108
#: a6ee225a99ff40e9a9804949147f4475
msgid "Be aware that collections may not contain the most recent versions."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:110
#: c645a44e2314464bb882f00516035922
msgid "Enable the `IUS repository <https://ius.io/GettingStarted/>`_ and install one of the `parallel-installable <https://ius.io/SafeRepo/#parallel-installable-package>`_ Pythons, along with pip, setuptools, and wheel, which are kept fairly up to date."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:116
#: 2b3ac6698e8b490592793e30517beab6
msgid "For example, for Python 3.4 on CentOS7/RHEL7::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:122
#: 2fbe68e157384b8fbec6377021fe7f1a
msgid "openSUSE"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:129
#: ../source/guides/installing-using-linux-tools.rst:143
#: ../source/guides/installing-using-linux-tools.rst:162
#: a14c8b0a24f1498c8042f0083a7a6689
#: 5996d4c6f2fd4124a8e91ff670edbc3c
#: a70c91194cbe48218f490b43d8bd10f4
msgid "Python 3::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:135
#: 573e14d2d7ec43bd9021e47c719ceb0e
msgid "Debian/Ubuntu"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:150
#: 3ea3f86886a44ca99589b6045abfccb1
msgid "Recent Debian/Ubuntu versions have modified pip to use the `\"User Scheme\" <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by default, which is a significant behavior change that can be surprising to some users."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:156
#: d2d264a49a1f4e14b2a1a87862d926df
msgid "Arch Linux"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:168
#: 5660763aca074d0eac341175c293702c
msgid "Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so the only option is to manually place the repo files as described."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:2
#: 63f8874d4aa64d58bf9cfe8c010135a2
msgid "Installing packages using pip and virtual environments"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:4
#: 8ab581ac6d19427f91c6d63a0c4d0631
msgid "This guide discusses how to install packages using :ref:`pip` and a virtual environment manager: either :ref:`venv` for Python 3 or :ref:`virtualenv` for Python 2. These are the lowest-level tools for managing Python packages and are recommended if higher-level tools do not suit your needs."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:9
#: c71a05f795e343008b6326d3fe55db31
msgid "This doc uses the term **package** to refer to a :term:`Distribution Package`  which is different from an :term:`Import Package` that which is used to import modules in your Python source code."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:15
#: 997da9ca72f548eab9937f8d8df0fb30
msgid "Installing pip"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:17
#: 78c59aa781ea494ca59e7e89048a7e40
msgid ":ref:`pip` is the reference Python package manager. It's used to install and update packages. You'll need to make sure you have the latest version of pip installed."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:25
#: b6cb933109454d4d9deb9cca281d99d6
msgid "The Python installers for Windows include pip. You should be able to access pip using:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:33
#: 5e4b7f93f0184995823d4ab61c9d5ac6
msgid "You can make sure that pip is up-to-date by running:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:41
#: 125b56a9f6da41bda22941cdfccdb1c1
msgid "Linux and macOS"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:43
#: bf396db6722c481cab77ac8ff63a1e4e
msgid "Debian and most other distributions include a `python-pip`_ package, if you want to use the Linux distribution-provided versions of pip see :doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:47
#: 05aa147736fb4cd8babd8040d3fec572
msgid "You can also install pip yourself to ensure you have the latest version. It's recommended to use the system pip to bootstrap a user installation of pip:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:54
#: 3ea9416109a1487e9d92d03053486e20
msgid "Afterwards, you should have the newest pip installed in your user site:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:65
#: d327d920452843e0a2bc0c8b9bee1346
msgid "Installing virtualenv"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:67
#: 07fe9e8020c742f3803d96df3af86bc1
msgid "If you are using Python 3.3 or newer, the :mod:`venv` module is the preferred way to create and manage virtual environments. venv is included in the Python standard library and requires no additional installation. If you are using venv, you may skip this section."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:73
#: e77ed9619649421b90565b356f312e82
msgid ":ref:`virtualenv` is used to manage Python packages for different projects. Using virtualenv allows you to avoid installing Python packages globally which could break system tools or other projects. You can install virtualenv using pip."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:78
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:108
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:137
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:150
#: 2e1cc92c21bf48f0835d28d41f7cd30f
#: 789dad8ddb0944c8a34c55b22285a9cb
#: 7e6745b0e0584f45af6aef10fd3cbfdd
#: d7dc1592a5b34f13bf0bb56eb09907b6
msgid "On macOS and Linux:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:84
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:114
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:157
#: d502cfee516a496fa29b243405a95560
#: ebb8e6ebe18941beb258739e8287b3c6
#: 704eda601408412793dc856ac6e0736b
msgid "On Windows:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:93
#: 820a07278d994af8abede0704753ca37
msgid "Creating a virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:95
#: 84e7add972bd4a1181ab62a07f8d33cd
msgid ":ref:`venv` (for Python 3) and :ref:`virtualenv` (for Python 2) allow you to manage separate package installations for different projects. They essentially allow you to create a \"virtual\" isolated Python installation and install packages into that virtual installation. When you switch projects, you can simply create a new virtual environment and not have to worry about breaking the packages installed in the other environments. It is always recommended to use a virtual environment while developing Python applications."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:104
#: 63da7b8debbc45328db9efebde008355
msgid "To create a virtual environment, go to your project's directory and run venv. If you are using Python 2, replace ``venv`` with ``virtualenv`` in the below commands."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:120
#: be2009781fb541458c3d91ead10dd05a
msgid "The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it ``env``."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:123
#: 82425b79cd0d4698b1cac890036437e0
msgid "venv will create a virtual Python installation in the ``env`` folder."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:125
#: f7913dcff97045cfb4cd75429fce9880
msgid "You should exclude your virtual environment directory from your version control system using ``.gitignore`` or similar."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:130
#: 2c7620ceafaa4ebb8e53ab5295568f2c
msgid "Activating a virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
#: cbb8694122c9452fa3b2839fa8269bbc
msgid "Before you can start installing or using packages in your virtual environment you'll need to *activate* it. Activating a virtual environment will put the virtual environment-specific ``python`` and ``pip`` executables into your shell's ``PATH``."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:143
#: 57fe0373664945a7abd573d96c14fa69
msgid "On Windows::"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:147
#: 94e537ec86944c7abd934e9e1c2f65a9
msgid "You can confirm you're in the virtual environment by checking the location of your Python interpreter, it should point to the ``env`` directory."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:165
#: b0cccc03c128419e885c7c40d7fd819b
msgid "As long as your virtual environment is activated pip will install packages into that specific environment and you'll be able to import and use packages in your Python application."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:171
#: 04fedd5d7b614827863839f30287fbe1
msgid "Leaving the virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:173
#: beab6b5e57ff40469abd3639b8b70a88
msgid "If you want to switch projects or otherwise leave your virtual environment, simply run:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:179
#: 7a431e767ae849f1a39bec33062e4af2
msgid "If you want to re-enter the virtual environment just follow the same instructions above about activating a virtual environment. There's no need to re-create the virtual environment."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:184
#: 305665f536d1422a92085c59c24cf5a4
msgid "Installing packages"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:186
#: 608179c34f994a8b8b2096ecb13f3832
msgid "Now that you're in your virtual environment you can install packages. Let's install the `Requests`_ library from the :term:`Python Package Index (PyPI)`:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:201
#: 6d6340a491b945c9b75efadd0d47348f
msgid "pip should download requests and all of its dependencies and install them:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:222
#: c6b297a7db18405d969cdcee21e2b12a
msgid "Installing specific versions"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:224
#: 370355cecd6943eb8ec2fff5f8426ca8
msgid "pip allows you to specify which version of a package to install using :term:`version specifiers <Version Specifier>`. For example, to install a specific version of ``requests``:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:240
#: fae44013fa9c47aeacd7dcac32314b5d
msgid "To install the latest ``2.x`` release of requests:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:254
#: 0339d659df4d430882c1eaad4952a7e6
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:270
#: 5775979833a44125959638feb02801b5
msgid "Installing extras"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:272
#: cdcd7568a02b49199976912bea92ae20
msgid "Some packages have optional `extras`_. You can tell pip to install these by specifying the extra in brackets:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:292
#: 8f9a663b280a444f9c049dd245181778
msgid "Installing from source"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:294
#: bf6fe4a59e4347789f08751a84ba05fc
msgid "pip can install a package directly from source, for example:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:310
#: 3e55faae007e4c5eb6065563a2eee34c
msgid "Additionally, pip can install packages from source in `development mode`_, meaning that changes to the source directory will immediately affect the installed package without needing to re-install:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:331
#: 90de8d4d7e3944098ef6dd27da0cd5b7
msgid "Installing from version control systems"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:333
#: c07646bbd22a41f69790406f5d9c37f3
msgid "pip can install packages directly from their version control system. For example, you can install directly from a git repository:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:340
#: 51b286eff2fd4294938fe925ca71dfa5
msgid "For more information on supported version control systems and syntax, see pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:345
#: ../source/tutorials/installing-packages.rst:569
#: bad8364fc4874962a8a0b7ea798b1140
#: 3bf718b1eb9c459b85e941686fc41463
msgid "Installing from local archives"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:347
#: e1c52272968c41008e6f0c44c0e380c4
msgid "If you have a local copy of a :term:`Distribution Package`'s archive (a zip, wheel, or tar file) you can install it directly with pip:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:362
#: eeb82e2c22624b6ba3427c5ed109915c
msgid "If you have a directory containing archives of multiple packages, you can tell pip to look for packages there and not to use the :term:`Python Package Index (PyPI)` at all:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:378
#: db9b4c909a084240bf4225661df5fe61
msgid "This is useful if you are installing packages on a system with limited connectivity or if you want to strictly control the origin of distribution packages."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:384
#: 38bfd3c861894520ab9e8a0765afa24b
msgid "Using other package indexes"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:386
#: 8edbba0d0d534c75a7066675cb3309d8
msgid "If you want to download packages from a different index than the :term:`Python Package Index (PyPI)`, you can use the ``--index-url`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:401
#: 2e829ebef4d34696935bf7232caada27
msgid "If you want to allow packages from both the :term:`Python Package Index (PyPI)` and a separate index, you can use the ``--extra-index-url`` flag instead:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:418
#: ../source/tutorials/installing-packages.rst:389
#: 8df56439591c42aeb650095e870e4438
#: 643e2ffe95dd43a99967888fc5cbcc26
msgid "Upgrading packages"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:420
#: a54a8b56fe7a4c59aa8e834b9442f858
msgid "pip can upgrade packages in-place using the ``--upgrade`` flag. For example, to install the latest version of ``requests`` and all of its dependencies:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:436
#: b214265233c847fd87394ca970b8da31
msgid "Using requirements files"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:438
#: e8e24e4d577a4a00ad0d9b984693f696
msgid "Instead of installing packages individually, pip allows you to declare all dependencies in a :ref:`Requirements File <pip:Requirements Files>`. For example you could create a :file:`requirements.txt` file containing:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:447
#: 9669c373b824489ca78757e6dcbea3d6
msgid "And tell pip to install all of the packages in this file using the ``-r`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:462
#: 002f932c86f243d08abc5d3aabfd1819
msgid "Freezing dependencies"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:464
#: 8ce9ccbe3b394993a02919c0fb494967
msgid "Pip can export a list of all installed packages and their versions using the ``freeze`` command:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:479
#: 889fc39fe1144f4bacf71149b3e8a49f
msgid "Which will output a list of package specifiers such as:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:495
#: d48ff7f721d340f7ac21c0530243a120
msgid "This is useful for creating :ref:`pip:Requirements Files` that can re-create the exact versions of all packages installed in an environment."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:2
#: 11bdcefa114e4e00abd3126d0de2b322
msgid "Making a PyPI-friendly README"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:4
#: 04e82bd72ed34625a8784349a88f18ea
msgid "README files can help your users understand your project and can be used to set your project's description on PyPI. This guide helps you create a README in a PyPI-friendly format and include your README in your package so it appears on PyPI."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:9
#: 7d6931a451ce47cc9c153aa6ae84b13e
msgid "Creating a README file"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:11
#: 7fd4ad8424234563871c20db69e11131
msgid "README files for Python projects are often named ``README``, ``README.txt``, ``README.rst``, or ``README.md``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:13
#: 72ebf6d9f5b542058c93768fa4250d62
msgid "For your README to display properly on PyPI, choose a markup language supported by PyPI. Formats supported by `PyPI's README renderer <https://github.com/pypa/readme_renderer>`_ are:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:16
#: 16dcdafbe0e24a0899b8b7423ebd0927
msgid "plain text"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:17
#: c1c0dc4dfc68410a8af6eb12c3edc62b
msgid "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ (without Sphinx extensions)"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:18
#: ef9e800d16534dfdbc3036fe460f8eb4
msgid "Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by default, or `CommonMark <http://commonmark.org/>`_)"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:21
#: ebcf9d3c8d6d456ea660b64073a827c4
msgid "It's customary to save your README file in the root of your project, in the same directory as your :file:`setup.py` file."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:25
#: f0b9c98ae7f34119b36d21cc716e3832
msgid "Including your README in your package's metadata"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:27
#: 08ba038a99c84f4a91aeb71dc10d5177
msgid "To include your README's contents as your package description, set your project's ``Description`` and ``Description-Content-Type`` metadata, typically in your project's :file:`setup.py` file."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:33
#: a5d53f6af8d5400b8a3254b066124d1a
msgid ":ref:`description-optional`"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:34
#: 1aa6ca57287b47c9a0d44d9c729c00a4
msgid ":ref:`description-content-type-optional`"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:36
#: 6c0a7495c43b40f58fbfd4bde1d35c7b
msgid "For example, to set these values in a package's :file:`setup.py` file, use ``setup()``'s ``long_description`` and ``long_description_content_type``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:39
#: 9d6653c18ed74b85b7e973479227332d
msgid "Set the value of ``long_description`` to the contents (not the path) of the README file itself. Set the ``long_description_content_type`` to an accepted ``Content-Type``-style value for your README file's markup, such as ``text/plain``, ``text/x-rst`` (for reStructuredText), or ``text/markdown``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:45
#: 56e27fffd3154b0dbb375d35faf5e7d2
msgid "If you're using GitHub-flavored Markdown to write a project's description, ensure you upgrade the following tools:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:60
#: 9050001fe12642dbab43b4b2e7176095
msgid "The minimum required versions of the respective tools are:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:62
#: 0210d46717f44da0973a25fcbcf6b74c
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:63
#: dda4812206f04e098582453d46689a6f
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:64
#: ce2dd6feb1b643d3b491bb4107ccbd64
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:66
#: 06d26c7dabcd488493cce266e9d44e36
msgid "It's recommended that you use ``twine`` to upload the project's distribution packages:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:72
#: 22b3734f6f4d4b15a3b391cccdc268fe
msgid "For example, see this :file:`setup.py` file, which reads the contents of :file:`README.md` as ``long_description`` and identifies the markup as GitHub-flavored Markdown:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:95
#: 719f8ba479f14d6d8983dcca908fc6b4
msgid "Validating reStructuredText markup"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:97
#: 6f794ca422b2404880cd3dc4869a525b
msgid "If your README is written in reStructuredText, any invalid markup will prevent it from rendering, causing PyPI to instead just show the README's raw source."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:100
#: 26547bfec6d141d98c011627de2d36bf
msgid "Note that Sphinx extensions used in docstrings, such as `directives and roles <http://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_ (e.g., \"``:py:func:`getattr```\" or \"``:ref:`my-reference-label```\"), are not allowed here and will result in error messages like \"``Error: Unknown interpreted text role \"py:func\".``\"."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:105
#: f0f0ed687e834a66beef03e83fae4a1c
msgid "You can check your README for markup errors before uploading as follows:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:107
#: 552cd2e9c35d4becb902c7bc88a8a95b
msgid "Install the latest version of `twine <https://github.com/pypa/twine>`_; version 1.12.0 or higher is required:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:122
#: ce3dbf7597b54946b9ef2685e15d837a
msgid "Build the sdist and wheel for your project as described under :ref:`Packaging Your Project`."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:125
#: 8f71d085d7c24bc581d6082d22f87353
msgid "Run ``twine check`` on the sdist and wheel::"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:129
#: dcf17e5e9cc54bdcb4adc03b5f8a5e2a
msgid "This command will report any problems rendering your README.  If your markup renders fine, the command will output ``Checking distribution FILENAME: Passed``."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:4
#: 79026c3f9ef94462b545b797b33500e7
msgid "Migrating to PyPI.org"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:6
#: d9c6ed67bd8f41f5b25f0e832d0c42ab
msgid ":term:`pypi.org` is the new, rewritten version of PyPI that has replaced the legacy PyPI code base. It is the default version of PyPI that people are expected to use. These are the tools and processes that people will need to interact with ``PyPI.org``."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:12
#: 06c7e8d5761c43ed9a3819415722e9ff
msgid "Publishing releases"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:14
#: 4bbbfe4ed64341cca9ef509ab9e242df
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:16
#: 684b730f671c429a8631307b93c1efab
msgid "Uploads through ``pypi.python.org`` were *switched off* on **July 3, 2017**. As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:19
#: b07e83f2a88541ec9e2a971a0569bac6
msgid "The recommended way to migrate to PyPI.org for uploading is to ensure that you are using a new enough version of your upload tool."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:22
#: 5d872dbb21b44c529ac51ffc5cf3b384
msgid "The default upload settings switched to ``pypi.org`` in the following versions:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:24
#: 7a52753b61304da49621e10e41b5a950
msgid "``twine`` 1.8.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:25
#: feeb5d20fa1e4434a8f6668b526c5492
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:26
#: 99f7552d1b0242a38032d27907c517ce
msgid "Python 2.7.13 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:27
#: 7de18c97886d405dbf71b6c1fe8307e9
msgid "Python 3.4.6 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:28
#: 08a7985762e94ed08fe9994acb14eed8
msgid "Python 3.5.3 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:29
#: 11c1f01cc33b42be9ee8e44b6b6ac859
msgid "Python 3.6.0 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:31
#: 4599205a488c4f0d9a82f6c13d8cab6c
msgid "In addition to ensuring you're on a new enough version of the tool for the tool's default to have switched, you must also make sure that you have not configured the tool to override its default upload URL. Typically this is configured in a file located at :file:`$HOME/.pypirc`. If you see a file like:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:48
#: 0a531622ce5c4bd2bfded5b50565451e
msgid "Then simply delete the line starting with ``repository`` and you will use your upload tool's default URL."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:51
#: 1dacca8533d64028b7071b0b219dcc69
msgid "If for some reason you're unable to upgrade the version of your tool to a version that defaults to using PyPI.org, then you may edit :file:`$HOME/.pypirc` and include the ``repository:`` line, but use the value ``https://upload.pypi.org/legacy/`` instead:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:67
#: 131c2af408784e94b39116ec61a0c3ad
msgid "(``legacy`` in this URL refers to the fact that this is the new server implementation's emulation of the legacy server implementation's upload API.)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:73
#: bdc26f95786a4befb5daec8b364496b6
msgid "Registering package names & metadata"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:75
#: bea24313971249bc9a080b2399bd24c8
msgid "Explicit pre-registration of package names with the ``setup.py register`` command prior to the first upload is no longer required, and is not currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:79
#: bab8b6b00c87409cb61b16f4e458a1e2
msgid "As a result, attempting explicit registration after switching to using PyPI.org for uploads will give the following error message::"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:84
#: 3c6944b2fac94f7bbf3ac2521477a95a
msgid "The solution is to skip the registration step, and proceed directly to uploading artifacts."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:89
#: ../source/guides/using-testpypi.rst:5
#: 66321c56a5904897931708909202fa20
#: 59411dbbd674484cadae1acb0fd86b0d
msgid "Using TestPyPI"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:91
#: 4c4275014142473689f1059575b4079c
msgid "Legacy TestPyPI (testpypi.python.org) is no longer available; use `test.pypi.org <https://test.pypi.org>`_ instead. If you use TestPyPI, you must update your :file:`$HOME/.pypirc` to handle TestPyPI's new location, by replacing ``https://testpypi.python.org/pypi`` with ``https://test.pypi.org/legacy/``, for example:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:113
#: f044434a467144ddbfce1ba85c89ed39
msgid "Registering new user accounts"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:115
#: 75b0de03deac47b3bf401c6a8233d667
msgid "In order to help mitigate spam attacks against PyPI, new user registration through ``pypi.python.org`` was *switched off* on **February 20, 2018**. New user registrations at ``pypi.org`` are open."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:121
#: 83f7b26d60ce43ec88bb77855c6ae93f
msgid "Browsing packages"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:123
#: d51317463ffb4137b213468115c4dc28
msgid "While ``pypi.python.org`` is may still be used in links from other PyPA documentation, etc, the default interface for browsing packages is ``pypi.org``. The domain pypi.python.org now redirects to pypi.org, and may be disabled sometime in the future."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:130
#: 95ed51dc1ab64ab4b38d0df675a564c4
msgid "Downloading packages"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:132
#: af3f2411ff914ccd8b8eac7c83ef1609
msgid "``pypi.org`` is the default host for downloading packages."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:135
#: 2cddb849bdf640219e2b4324f00e1c43
msgid "Managing published packages and releases"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:137
#: 77f1284824fa4998a0abfa97daeaac05
msgid "``pypi.org`` provides a fully functional interface for logged in users to manage their published packages and releases."
msgstr ""

#: ../source/guides/multi-version-installs.rst:5
#: daa4219d8cf54e0ba2201e3f9cc4ec12
msgid "Multi-version installs"
msgstr ""

#: ../source/guides/multi-version-installs.rst:8
#: c12e29f0f0734abdbc8fcadb33b1c305
msgid "easy_install allows simultaneous installation of different versions of the same project into a single environment shared by multiple programs which must ``require`` the appropriate version of the project at run time (using ``pkg_resources``)."
msgstr ""

#: ../source/guides/multi-version-installs.rst:13
#: 62e1170ba5de44e2aaa94ef405c9e8e0
msgid "For many use cases, virtual environments address this need without the complication of the ``require`` directive. However, the advantage of parallel installations within the same environment is that it works for an environment shared by multiple applications, such as the system Python in a Linux distribution."
msgstr ""

#: ../source/guides/multi-version-installs.rst:19
#: cac50bc1e8e04f3aa1d30be508aab92c
msgid "The major limitation of ``pkg_resources`` based parallel installation is that as soon as you import ``pkg_resources`` it locks in the *default* version of everything which is already available on sys.path. This can cause problems, since ``setuptools`` created command line scripts use ``pkg_resources`` to find the entry point to execute. This means that, for example, you can't use ``require`` tests invoked through ``nose`` or a WSGI application invoked through ``gunicorn`` if your application needs a non-default version of anything that is available on the standard ``sys.path`` - the script wrapper for the main application will lock in the version that is available by default, so the subsequent ``require`` call in your own code fails with a spurious version conflict."
msgstr ""

#: ../source/guides/multi-version-installs.rst:31
#: 098602405ad944e8b01cd30e5a743d0c
msgid "This can be worked around by setting all dependencies in ``__main__.__requires__`` before importing ``pkg_resources`` for the first time, but that approach does mean that standard command line invocations of the affected tools can't be used - it's necessary to write a custom wrapper script or use ``python -c '<command>'`` to invoke the application's main entry point directly."
msgstr ""

#: ../source/guides/multi-version-installs.rst:38
#: 69e81a06c428476db6350befa91e021f
msgid "Refer to the `pkg_resources documentation <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#workingset-objects>`__ for more details."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:5
#: 31cfbbd5daae49ec84382d79022cb6f0
msgid "Packaging binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:8
#: 77d1470954024c5c87c8db6f28deb568
msgid "2013-12-08"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:10
#: c5b19a02fd6a4081b9641d85b382a70e
msgid "One of the features of the CPython reference interpreter is that, in addition to allowing the execution of Python code, it also exposes a rich C API for use by other software. One of the most common uses of this C API is to create importable C extensions that allow things which aren't always easy to achieve in pure Python code."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:20
#: ae47f7563dcd49409050c09d1043f7d6
msgid "An overview of binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:23
#: eca07ff2b0cc4369b553b352af9d6c02
msgid "Use cases"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:25
#: 1adeedf76aae40f2911efde1b4f90702
msgid "The typical use cases for binary extensions break down into just three conventional categories:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:28
#: 6d7526249a4f4ea9861dec60fb3a03bf
msgid "**accelerator modules**: these modules are completely self-contained, and are created solely to run faster than the equivalent pure Python code runs in CPython. Ideally, accelerator modules will always have a pure Python equivalent to use as a fallback if the accelerated version isn't available on a given system. The CPython standard library makes extensive use of accelerator modules. *Example*: When importing ``datetime``, Python falls back to the `datetime.py <https://github.com/python/cpython/blob/master/Lib/datetime.py>`_ module if the C implementation ( `_datetimemodule.c <https://github.com/python/cpython/blob/master/Modules/_datetimemodule.c>`_) is not available."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:39
#: 83a552931a0e4d24b3ee42661556d9e2
msgid "**wrapper modules**: these modules are created to expose existing C interfaces to Python code. They may either expose the underlying C interface directly, or else expose a more \"Pythonic\" API that makes use of Python language features to make the API easier to use. The CPython standard library makes extensive use of wrapper modules. *Example*: `functools.py <https://github.com/python/cpython/blob/master/Lib/functools.py>`_ is a Python module wrapper for `_functoolsmodule.c <https://github.com/python/cpython/blob/master/Modules/_functoolsmodule.c>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:47
#: 87e1472cff8a4e6fa72cb5124034ef69
msgid "**low-level system access**: these modules are created to access lower level features of the CPython runtime, the operating system, or the underlying hardware. Through platform specific code, extension modules may achieve things that aren't possible in pure Python code. A number of CPython standard library modules are written in C in order to access interpreter internals that aren't exposed at the language level. *Example*: ``sys``, which comes from `sysmodule.c <https://github.com/python/cpython/blob/master/Python/sysmodule.c>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:56
#: 6c7bb3603d754a83bc5ec159818e850f
msgid "One particularly notable feature of C extensions is that, when they don't need to call back into the interpreter runtime, they can release CPython's global interpreter lock around long-running operations (regardless of whether those operations are CPU or IO bound)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:61
#: 64aa92dea7f64935bf39e79bf7c32657
msgid "Not all extension modules will fit neatly into the above categories. The extension modules included with NumPy, for example, span all three use cases - they move inner loops to C for speed reasons, wrap external libraries written in C, FORTRAN and other languages, and use low level system interfaces for both CPython and the underlying operation system to support concurrent execution of vectorised operations and to tightly control the exact memory layout of created objects."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:71
#: 973e932cf5cb44e8888d07dabffdf6eb
msgid "Disadvantages"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:73
#: 46a4c10712664594885b8832af070483
msgid "The main disadvantage of using binary extensions is the fact that it makes subsequent distribution of the software more difficult. One of the advantages of using Python is that it is largely cross platform, and the languages used to write extension modules (typically C or C++, but really any language that can bind to the CPython C API) typically require that custom binaries be created for different platforms."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:80
#: ae0360e1dcce4481a3e06a6bc83e27f8
msgid "This means that binary extensions:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:82
#: 3b72414b508f487d9d0d5d6976be09d3
msgid "require that end users be able to either build them from source, or else that someone publish pre-built binaries for common platforms"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:85
#: eb2825d3367f431c9fa9652c9cf453d4
msgid "may not be compatible with different builds of the CPython reference interpreter"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:88
#: 93604dbaa3a640efbc832372580f8415
msgid "often will not work correctly with alternative interpreters such as PyPy, IronPython or Jython"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:91
#: 4e11ad5b02a540e99152e57e3a5dbcb3
msgid "if handcoded, make maintenance more difficult by requiring that maintainers be familiar not only with Python, but also with the language used to create the binary extension, as well as with the details of the CPython C API."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:96
#: 5425c828372242f9b073abc010dfbe4f
msgid "if a pure Python fallback implementation is provided, make maintenance more difficult by requiring that changes be implemented in two places, and introducing additional complexity in the test suite to ensure both versions are always executed."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:101
#: 01fc2a61db104701a2b95d70fb115a39
msgid "Another disadvantage of relying on binary extensions is that alternative import mechanisms (such as the ability to import modules directly from zipfiles) often won't work for extension modules (as the dynamic loading mechanisms on most platforms can only load libraries from disk)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:108
#: 64145707609e46c8999913d4e05c8919
msgid "Alternatives to handcoded accelerator modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:110
#: 18945c311b634367bf180569f1aa5940
msgid "When extension modules are just being used to make code run faster (after profiling has identified the code where the speed increase is worth additional maintenance effort), a number of other alternatives should also be considered:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:115
#: b62d9c0a76ab432e9175992ef0872f02
msgid "look for existing optimised alternatives. The CPython standard library includes a number of optimised data structures and algorithms (especially in the builtins and the ``collections`` and ``itertools`` modules). The Python Package Index also offers additional alternatives. Sometimes, the appropriate choice of standard library or third party module can avoid the need to create your own accelerator module."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:122
#: dec5ee4f892745d295a9227149f0cf57
msgid "for long running applications, the JIT compiled `PyPy interpreter <http://pypy.org/>`__ may offer a suitable alternative to the standard CPython runtime. The main barrier to adopting PyPy is typically reliance on other binary extension modules - while PyPy does emulate the CPython C API, modules that rely on that cause problems for the PyPy JIT, and the emulation layer can often expose latent defects in extension modules that CPython currently tolerates (frequently around reference counting errors - an object having one live reference instead of two often won't break anything, but no references instead of one is a major problem)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:132
#: 9185362b3dc64738b1ecf24eea01be01
msgid "`Cython <http://cython.org/>`__ is a mature static compiler that can compile most Python code to C extension modules. The initial compilation provides some speed increases (by bypassing the CPython interpreter layer), and Cython's optional static typing features can offer additional opportunities for speed increases. Using Cython still has the disadvantage of increasing the complexity of distributing the resulting application, but has the benefit of having a reduced barrier to entry for Python programmers (relative to other languages like C or C++)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:141
#: 15929a315105439eb93f877b90005cb5
msgid "`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members of the scientific Python community, that aims to leverage LLVM to allow selective compilation of pieces of a Python application to native machine code at runtime. It requires that LLVM be available on the system where the code is running, but can provide significant speed increases, especially for operations that are amenable to vectorisation."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:150
#: b4a5465d691148d0a381740de3a91f4b
msgid "Alternatives to handcoded wrapper modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:152
#: f48cb4d85ba74f39a1227abcee28fe50
msgid "The C ABI (Application Binary Interface) is a common standard for sharing functionality between multiple applications. One of the strengths of the CPython C API (Application Programming Interface) is allowing Python users to tap into that functionality. However, wrapping modules by hand is quite tedious, so a number of other alternative approaches should be considered."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:158
#: 07e6c81921604354aa1eed0cdb5b608c
msgid "The approaches described below don't simplify the distribution case at all, but they *can* significantly reduce the maintenance burden of keeping wrapper modules up to date."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:162
#: 2fa33cd62f694fc781d097e81a46bf08
msgid "In addition to being useful for the creation of accelerator modules, `Cython <http://cython.org/>`__ is also useful for creating wrapper modules. It still involves wrapping the interfaces by hand, however, so may not be a good choice for wrapping large APIs."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:167
#: 34900ac03afd4b9c860128b8e553f11d
msgid "`cffi <https://cffi.readthedocs.io/>`__ is a project created by some of the PyPy developers to make it straightforward for developers that already know both Python and C to expose their C modules to Python applications. It also makes it relatively straightforward to wrap a C module based on its header files, even if you don't know C yourself."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:173
#: 6fb12ac017a74d5f9f8ea449d17e0421
msgid "One of the key advantages of ``cffi`` is that it is compatible with the PyPy JIT, allowing CFFI wrapper modules to participate fully in PyPy's tracing JIT optimisations."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:177
#: 0577cc9cb4c64608bdd6564f36fc8b46
msgid "`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that allows a variety of programming languages, including Python, to interface with C *and C++* code."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:181
#: 6fbfd7c2f5a1441e9199a6c67bb92a03
msgid "The standard library's ``ctypes`` module, while useful for getting access to C level interfaces when header information isn't available, suffers from the fact that it operates solely at the C ABI level, and thus has no automatic consistency checking between the interface actually being exported by the library and the one declared in the Python code. By contrast, the above alternatives are all able to operate at the C *API* level, using C header files to ensure consistency between the interface exported by the library being wrapped and the one expected by the Python wrapper module. While ``cffi`` *can* operate directly at the C ABI level, it suffers from the same interface inconsistency problems as ``ctypes`` when it is used that way."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:195
#: bdd9e3fa9b674f66b3d956488934445e
msgid "Alternatives for low level system access"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:197
#: dca52d05596744d19f2af25cba707f09
msgid "For applications that need low level system access (regardless of the reason), a binary extension module often *is* the best way to go about it. This is particularly true for low level access to the CPython runtime itself, since some operations (like releasing the Global Interpreter Lock) are simply invalid when the interpreter is running code, even if a module like ``ctypes`` or ``cffi`` is used to obtain access to the relevant C API interfaces."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:205
#: 4c5cfa7ee8de4e7a8aa3dc078495eaa0
msgid "For cases where the extension module is manipulating the underlying operating system or hardware (rather than the CPython runtime), it may sometimes be better to just write an ordinary C library (or a library in another systems programming language like C++ or Rust that can export a C compatible ABI), and then use one of the wrapping techniques described above to make the interface available as an importable Python module."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:214
#: 60f1034963714d91b259331497229164
msgid "Implementing binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:216
#: 733b3cc8ad184672a4476adf9116f46b
msgid "The CPython `Extending and Embedding <https://docs.python.org/3/extending/>`_ guide includes an introduction to writing a `custom extension module in C <https://docs.python.org/3/extending/extending.html>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:233
#: 782438e180f341ba949ee7aafceb4a66
msgid "Building binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:236
#: 8e0c8373c79c47fa911555f3a5a63d41
msgid "Binary extensions for Windows"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:238
#: c1a8320e3ec84ddc82b8621eff806dc6
msgid "Before it is possible to build a binary extension, it is necessary to ensure that you have a suitable compiler available. On Windows, Visual C is used to build the official CPython interpreter, and should be used to build compatible binary extensions."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:243
#: 160077d93c464172817d2529f842325e
msgid "Python 2.7 used Visual Studio 2008, Python 3.3 and 3.4 used Visual Studio 2010, and Python 3.5+ uses Visual Studio 2015 or later. Unfortunately, older versions of Visual Studio are no longer easily available from Microsoft, so for versions of Python prior to 3.5, the compilers must be obtained differently if you do not already have a copy of the relevant version of Visual Studio."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:249
#: e813dd92d48f400fabbb50f3082f05e8
msgid "To set up a build environment for binary extensions, the steps are as follows:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:251
#: ac13eed6065e4cffadb398d215c454e7
msgid "For Python 2.7"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:253
#: 9a7bc9b18e9243128e336028ecdb85a2
msgid "Install \"Visual C++ Compiler Package for Python 2.7\", which is available from `Microsoft's website <https://www.microsoft.com/en-gb/download/details.aspx?id=44266>`__."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:256
#: 0b39b76a5139436eb82c2a2c4f5307c1
msgid "Use (a recent version of) setuptools in your setup.py (pip will do this for you, in any case)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:258
#: ../source/guides/packaging-binary-extensions.rst:268
#: ../source/guides/packaging-binary-extensions.rst:275
#: 8052118936fc4f90aacfc8e26627c8c6
#: e2ac4fd0f203427cb91f3c41545135ad
#: cee8ff6bb5ef4b6f81fc11dfcb47398e
msgid "Done."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:260
#: 24b70bea512e469bbd432b92eb9d96e2
msgid "For Python 3.4"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:262
#: 314da903e37a4b0ca7ba5ef4e17eab79
msgid "Install \"Windows SDK for Windows 7 and .NET Framework 4\" (v7.1), which is available from `Microsoft's website <https://www.microsoft.com/en-gb/download/details.aspx?id=8279>`__."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:265
#: d02f14d899b549cebbb4d5a2bed9f6b3
msgid "Work from an SDK command prompt (with the environment variables set, and the SDK on PATH)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:267
#: 367c748720104f43915a9a2e2a6060e2
msgid "Set DISTUTILS_USE_SDK=1"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:270
#: 17ffb394589145a5a26a30ec414f0b6f
msgid "For Python 3.5"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:272
#: 63c53e091c6541ea8cbac3fb4e7b39c4
msgid "Install `Visual Studio 2015 Community Edition <https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx>`__ (or any later version, when these are released)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:277
#: c1502561da91427e8599f06d7bb7bfe5
msgid "Note that from Python 3.5 onwards, Visual Studio works in a backward compatible way, which means that any future version of Visual Studio will be able to build Python extensions for all Python versions from 3.5 onwards."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:281
#: b3babbed66804abcbddf76d4aebf13cf
msgid "Building with the recommended compiler on Windows ensures that a compatible C library is used throughout the Python process."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:285
#: 68ea724d60f54eabb6d2b71b52091899
msgid "Binary extensions for Linux"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:287
#: ec7e4e80116b4af4bef4216eb8c56e63
msgid "Linux binaries must use a sufficiently old glibc to be compatible with older distributions. The `manylinux <https://github.com/pypa/manylinux>`_ Docker images provide a build environment with a glibc old enough to support most current Linux distributions on common architectures."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:293
#: ac488400d9504dfa976eceac118690dd
msgid "Binary extensions for macOS"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:295
#: 7eb59310e17b44cdacf6578515857cc6
msgid "Binary compatibility on macOS is determined by the target minimum deployment system, e.g. *10.9*, which is often specified with the ``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building binaries on macOS. When building with setuptools / distutils, the deployment target is specified with the flag ``--plat-name``, e.g. ``macosx-10.9-x86_64``. For common deployment targets for macOS Python distributions, see the `MacPython Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/Spinning-wheels>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:305
#: a44a2af6c88144f19c007b097c495227
msgid "Publishing binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:307
#: 35e86663dd7a443aa6013dd49668ec96
msgid "For interim guidance on this topic, see the discussion in `this issue <https://github.com/pypa/python-packaging-user-guide/issues/284>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:323
#: 7384f1b2d10f4363ac413d301c5e56a2
msgid "Additional resources"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:325
#: 8ad43330b37043798e57e9f943191313
msgid "Cross-platform development and distribution of extension modules is a complex topic, so this guide focuses primarily on providing pointers to various tools that automate dealing with the underlying technical challenges. The additional resources in this section are instead intended for developers looking to understand more about the underlying binary interfaces that those systems rely on at runtime."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:332
#: ca70d4b873414d82b40e103a047f0349
msgid "Cross-platform wheel generation with scikit-build"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:334
#: 5110f65725a6461c8ff730e58c8051cd
msgid "The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ package helps abstract cross-platform build operations and provides additional capabilities when creating binary extension packages. Additional documentation is also available on the `C runtime, compiler, and build system generator <https://scikit-build.readthedocs.io/en/latest/generators.html>`_ for Python binary extension modules."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:342
#: c8e29ee002cb4de693179c52523dc976
msgid "Introduction to C/C++ extension modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:344
#: 1fb42096feba4f8490b2411307a9ff31
msgid "For a more in depth explanation of how extension modules are used by CPython on a Debian system, see the following articles:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:347
#: 07ea475bc1144be38891356c80ddb131
msgid "`What are (c)python extension modules? <https://thomasnyberg.com/what_are_extension_modules.html>`_"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:348
#: 9667dbd515934e9d8f0780bddd90c5d7
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:349
#: 472d765594784c699162863fc69c30b3
msgid "`Writing cpython extension modules using C++ <https://thomasnyberg.com/cpp_extension_modules.html>`_"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:3
#: 31890bb2f8134d7a977ae66d61cbd784
msgid "Packaging namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:5
#: fa446f5508e1405eb2a0229d7578c643
msgid "Namespace packages allow you to split the sub-packages and modules within a single :term:`package <Import Package>` across multiple, separate :term:`distribution packages <Distribution Package>` (referred to as **distributions** in this document to avoid ambiguity). For example, if you have the following package structure:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:24
#: 14c294c8cb12406a93aaf241e4fb1d12
msgid "And you use this package in your code like so::"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:29
#: 5b4f1f30947f4e2fb1ea18eb75d7b394
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:46
#: 69fcb4bb8d414b968cbeabd26157963b
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:48
#: 6ba27ddfdc3f4408a98b757a4ca657e6
msgid "Namespace packages can be useful for a large collection of loosely-related packages (such as a large corpus of client libraries for multiple products from a single company). However, namespace packages come with several caveats and are not appropriate in all cases. A simple alternative is to use a prefix on all of your distributions such as ``import mynamespace_subpackage_a`` (you could even use ``import mynamespace_subpackage_a as subpackage_a`` to keep the import object short)."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:58
#: 1e030f99986c479ba3e9e7a58882cdd2
msgid "Creating a namespace package"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:60
#: b7aa122923c24267acc85fa703f64704
msgid "There are currently three different approaches to creating namespace packages:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:62
#: 906446254b6045d0ac3c02210daa9e1d
msgid "Use `native namespace packages`_. This type of namespace package is defined in :pep:`420` and is available in Python 3.3 and later. This is recommended if packages in your namespace only ever need to support Python 3 and installation via ``pip``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:66
#: f4974966f5944ff9a2eaa5ebebdb7e82
msgid "Use `pkgutil-style namespace packages`_. This is recommended for new packages that need to support Python 2 and 3 and installation via both ``pip`` and ``python setup.py install``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:69
#: 84f60e7796e84ab1b49b9d491682945b
msgid "Use `pkg_resources-style namespace packages`_. This method is recommended if you need compatibility with packages already using this method or if your package needs to be zip-safe."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:73
#: 420a029043b449fdba20312c7e01eaaf
msgid "While native namespace packages and pkgutil-style namespace packages are largely compatible, pkg_resources-style namespace packages are not compatible with the other methods. It's inadvisable to use different methods in different distributions that provide packages to the same namespace."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:80
#: dd0d9967b99246539db7b20d46f9b92d
msgid "Native namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:82
#: 14516152afaa43df953ec73dcdbdc468
msgid "Python 3.3 added **implicit** namespace packages from :pep:`420`. All that is required to create a native namespace package is that you just omit :file:`__init__.py` from the namespace package directory. An example file structure:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:97
#: 49e4af9d6eb24305aea9ad5ea31c442b
msgid "It is extremely important that every distribution that uses the namespace package omits the :file:`__init__.py` or uses a pkgutil-style :file:`__init__.py`. If any distribution does not, it will cause the namespace logic to fail and the other sub-packages will not be importable."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:102
#: b7965c0fd9c545fcb32fb06a42baf111
msgid "Because ``mynamespace`` doesn't contain an :file:`__init__.py`, :func:`setuptools.find_packages` won't find the sub-package. You must use :func:`setuptools.find_namespace_packages` instead or explicitly list all packages in your :file:`setup.py`. For example:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:117
#: b3f9718528614565ac600749b1cff3a3
msgid "A complete working example of two native namespace packages can be found in the `native namespace package example project`_."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:123
#: 7931c0c819204b22a6cd17696bafd0a4
msgid "Because native and pkgutil-style namespace packages are largely compatible, you can use native namespace packages in the distributions that only support Python 3 and pkgutil-style namespace packages in the distributions that need to support Python 2 and 3."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:129
#: e10822f18a6d4ff18c864c93c8ee2f04
msgid "pkgutil-style namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:131
#: 43c1817e18474ec4bfcb2698e1362456
msgid "Python 2.3 introduced the `pkgutil`_ module and the `extend_path`_ function. This can be used to declare namespace packages that need to be compatible with both Python 2.3+ and Python 3. This is the recommended approach for the highest level of compatibility."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:136
#: af65bb6ba8884b65892b3c69ebad941a
msgid "To create a pkgutil-style namespace package, you need to provide an :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:148
#: ../source/guides/packaging-namespace-packages.rst:194
#: 12875168b32d4dc08dbfadc991fd8fcb
#: 5d8cddfb08704189bd386bd2d16d19ea
msgid "The :file:`__init__.py` file for the namespace package needs to contain **only** the following:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:155
#: ../source/guides/packaging-namespace-packages.rst:201
#: 04d7c00dd0e24e309913c10897bfc30e
#: 9354019d29384a5295135fb1f030571c
msgid "**Every** distribution that uses the namespace package must include an identical :file:`__init__.py`. If any distribution does not, it will cause the namespace logic to fail and the other sub-packages will not be importable.  Any additional code in :file:`__init__.py` will be inaccessible."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:160
#: cc70608cf70a49c6b68c249a393da4d0
msgid "A complete working example of two pkgutil-style namespace packages can be found in the `pkgutil namespace example project`_."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:171
#: 9682ff4e6e754bf0972a107a7c5d1aaf
msgid "pkg_resources-style namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:173
#: 06a194532fdd4a2181239c5a47c01cf0
msgid "`Setuptools`_ provides the `pkg_resources.declare_namespace`_ function and the ``namespace_packages`` argument to :func:`~setuptools.setup`. Together these can be used to declare namespace packages. While this approach is no longer recommended, it is widely present in most existing namespace packages. If you are creating a new distribution within an existing namespace package that uses this method then it's recommended to continue using this as the different methods are not cross-compatible and it's not advisable to try to migrate an existing package."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:182
#: 7ca48c4c16704f14b01335bcbfeba6b6
msgid "To create a pkg_resources-style namespace package, you need to provide an :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:206
#: 9d3f52d67b594cefb949d2e71045db73
msgid "Some older recommendations advise the following in the namespace package :file:`__init__.py`:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:216
#: a0cfe9f22902495e9b668c21f13e6a1a
msgid "The idea behind this was that in the rare case that setuptools isn't available packages would fall-back to the pkgutil-style packages. This isn't advisable because pkgutil and pkg_resources-style namespace packages are not cross-compatible. If the presence of setuptools is a concern then the package should just explicitly depend on setuptools via ``install_requires``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:223
#: 385a838a4c414f5eab2747c04867b6bc
msgid "Finally, every distribution must provide the ``namespace_packages`` argument to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:237
#: 71b5026566db4384aeaea4a509c40098
msgid "A complete working example of two pkg_resources-style namespace packages can be found in the `pkg_resources namespace example project`_."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:3
#: f7d76528f6644a0382aa657f8c9fb46f
msgid "Publishing package distribution releases using GitHub Actions CI/CD workflows"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
#: 99121f2e68a048c59f619c688c78dbf0
msgid "`GitHub Actions CI/CD`_ allows you to run a series of commands whenever an event occurs on the GitHub platform. One popular choice is having a workflow that's triggered by a ``push`` event. This guide shows you how to publish a Python distribution whenever a tagged commit is pushed. It will use the `pypa/gh-action-pypi-publish GitHub Action`_."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:15
#: 843f03259ee64a16a5b4f1eab1911d9f
msgid "This guide *assumes* that you already have a project that you know how to build distributions for and *it lives on GitHub*."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:19
#: 5047424a808342408886767ce0f6f0a8
msgid "Saving credentials on GitHub"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:21
#: 71abc742b1c34d01a15f1dcb5c653e99
msgid "In this guide, we'll demonstrate uploading to both PyPI and TestPyPI, meaning that we'll have two separate sets of credentials. And we'll need to save them in the GitHub repository settings."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:26
#: bbcfc4e2099c492eab2a51f37943818d
msgid "Let's begin! 🚀"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:28
#: bf11d1fbf38441039a1017145588cf5c
msgid "Go to https://pypi.org/manage/account/#api-tokens and create a new `API token`_. If you have the project on PyPI already, limit the token scope to just that project. You can call it something like ``GitHub Actions CI/CD — project-org/project-repo`` in order for it to be easily distinguishable in the token list. **Don't close the page just yet — you won't see that token again.**"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:37
#: 46e55c3f7b4a4c40b0180521c5cf0ea3
msgid "In a separate browser tab or window, go to the ``Settings`` tab of your target repository and then click on `Secrets`_ in the left sidebar."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:40
#: c3f4b7cbb44d4cfca51234c6edd7ad0b
msgid "Create a new secret called ``PYPI_API_TOKEN`` and copy-paste the token from the first step."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:42
#: 9bb6336c4e024751a89949fd2d654cc5
msgid "Now, go to https://test.pypi.org/manage/account/#api-tokens and repeat the steps. Save that TestPyPI token on GitHub as ``TEST_PYPI_API_TOKEN``."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:48
#: b1fd76361575441683d4ce2f75876320
msgid "If you don't have a TestPyPI account, you'll need to create it. It's not the same as a regular PyPI account."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:53
#: 50482da52db442a28a9a617f3f93b819
msgid "Creating a workflow definition"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:55
#: 6eee449cee18456f9e71c0b92e3fe36e
msgid "GitHub CI/CD workflows are declared in YAML files stored in the ``.github/workflows/`` directory of your repository."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:58
#: f93302f1b4fd40329e1785da86a5376b
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:61
#: 5e123462776c4dc8b637ad0b5d794663
msgid "Start it with a meaningful name and define the event that should make GitHub run this workflow:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:70
#: 140fc199e60f48bf87d7b6130dbad611
msgid "Defining a workflow job environment"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
#: 692410bd0e3742eeb6a8cfe1a56be9ea
msgid "Now, let's add initial setup for our job. It's a process that will execute commands that we'll define later. In this guide, we'll use Ubuntu 18.04:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:83
#: be270a3670fe4fde80f76347e2ae5390
msgid "Checking out the project and building distributions"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:85
#: abfd79682759448aa06e6430da0e7c57
msgid "Then, add the following under the ``build-n-publish`` section:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:92
#: ad3673c2754d44e8b4f4379165f23b94
msgid "This will download your repository into the CI runner and then install and activate Python 3.7."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:95
#: b053c09204964c99b8d6227de0a80465
msgid "And now we can build dists from source. In this example, we'll use ``build`` package, assuming that your project has a ``pyproject.toml`` properly set up (see :pep:`517`/:pep:`518`)."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:102
#: 522223e5873d41c3850fb33b39de62d2
msgid "You can use any other method for building distributions as long as it produces ready-to-upload artifacts saved into the ``dist/`` folder."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:106
#: c8974805680e4d848d77f0072234cd57
msgid "So add this to the steps list:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:115
#: 9ab08e64bf6740bebee5f97c1c48149d
msgid "Publishing the distribution to PyPI and TestPyPI"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:117
#: 3c6afc07e58a4e498de45b0e1478368d
msgid "Finally, add the following steps at the end:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:123
#: bf46f29a456d4d23b21132b3569aac3a
msgid "These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the first one uploads contents of the ``dist/`` folder into TestPyPI unconditionally and the second does that to PyPI, but only if the current commit is tagged."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:130
#: 0b301d2f7b8a43f5a9c54ae535123e6e
msgid "That's all, folks!"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:132
#: afdad080f1fa4c2d9b5493998f22f10c
msgid "Now, whenever you push a tagged commit to your Git repository remote on GitHub, this workflow will publish it to PyPI. And it'll publish any push to TestPyPI which is useful for providing test builds to your alpha users as well as making sure that your release pipeline remains healthy!"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:5
#: 7bead748e799461cbf35d7cab67195b1
msgid "Single-sourcing the package version"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:8
#: 207880fdb85946a28e41460bfb63d9fe
msgid "There are many techniques to maintain a single source of truth for the version number of your project:"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:11
#: df938a4741b846639a246890466517ed
msgid "Read the file in :file:`setup.py` and get the version. Example (from `pip setup.py <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:38
#: ef0fb5eea65c48708349337d340d21eb
msgid "As of the release of setuptools 46.4.0, one can accomplish the same thing by instead placing the following in the project's ``setup.cfg`` file (replacing \"package\" with the import name of the package):"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:47
#: a46d63f346a34117bdcce6f3709f4ff1
msgid "Earlier versions of setuptools implemented the ``attr:`` directive by importing the module, but setuptools 46.4.0 added rudimentary AST analysis so that ``attr:`` can function without having to import any of the package's dependencies."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:52
#: 17e74d93e02a4f0e9eafced08dba01ad
msgid "Also, please be aware that declarative config indicators, including the ``attr:`` directive, are not supported in parameters to ``setup.py``."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:55
#: bdfd2ac959314e0080977a53555ff5c1
msgid "Use an external build tool that either manages updating both locations, or offers an API that both locations can use."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:58
#: 23746f5a20e3442b8ef04df531d0d1c2
msgid "Few tools you could use, in no particular order, and not necessarily complete: `bump2version <https://pypi.org/project/bump2version>`_, `changes <https://pypi.org/project/changes>`_, `commitizen <https://pypi.org/project/commitizen>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:65
#: 4413cff24dc94164b95254064885676e
msgid "Set the value to a ``__version__`` global variable in a dedicated module in your project (e.g. :file:`version.py`), then have :file:`setup.py` read and ``exec`` the value into a variable."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:76
#: d6cb09fb24b24b2e8436a56c27432018
msgid "Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:78
#: b10c566a29254abb87155bcf2ee40348
msgid "Place the value in a simple ``VERSION`` text file and have both :file:`setup.py` and the project code read it."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:86
#: d1399cd2c3034af8824b3377314d8613
msgid "An advantage with this technique is that it's not specific to Python.  Any tool can read the version."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:91
#: d3cf7e77b9bc48648f2dab0ee660217d
msgid "With this approach you must make sure that the ``VERSION`` file is included in all your source and binary distributions (e.g. add ``include VERSION`` to your :file:`MANIFEST.in`)."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:95
#: b0d49c089c3f47f28572e02ec95e4090
msgid "Set the value in :file:`setup.py`, and have the project code use the ``importlib.metadata`` API to fetch the value at runtime. (``importlib.metadata`` was introduced in Python 3.8 and is available to older versions as the ``importlib-metadata`` project.)  An installed project's version can be fetched with the API as follows::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:110
#: 192fc5de0730444081dd131d6be9e1f4
msgid "Be aware that the ``importlib.metadata`` API only knows about what's in the installation metadata, which is not necessarily the code that's currently imported."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:114
#: 6df0d65c88514833821898b49b7d388c
msgid "If a project uses this method to fetch its version at runtime, then its ``install_requires`` value needs to be edited to install ``importlib-metadata`` on pre-3.8 versions of Python like so::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:128
#: 6a2dbf39e63744c0a0d080c351a5f790
msgid "An older (and less efficient) alternative to ``importlib.metadata`` is the ``pkg_resources`` API provided by ``setuptools``::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:134
#: 10f4df9976dc416fbd129327e108efa0
msgid "If a project uses ``pkg_resources`` to fetch its own version at runtime, then ``setuptools`` must be added to the project's ``install_requires`` list."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:138
#: 959c0dba370f47439fca464aa458a6aa
msgid "Example using this technique: `setuptools <https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:141
#: d8d8d8d7f324419382ce1edd626064d8
msgid "Set the value to ``__version__`` in ``sample/__init__.py`` and import ``sample`` in :file:`setup.py`."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:155
#: 3ce43c88962e4ba489c26fde9be2052d
msgid "Although this technique is common, beware that it will fail if ``sample/__init__.py`` imports packages from ``install_requires`` dependencies, which will very likely not be installed yet when :file:`setup.py` is run."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:161
#: a225d970084240aea3be1238acbeca05
msgid "Keep the version number in the tags of a version control system (Git, Mercurial, etc) instead of in the code, and automatically extract it from there using `setuptools_scm <https://pypi.org/project/setuptools_scm>`_."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:5
#: 49448613d6f64ec0bbb60e7d877243de
msgid "Supporting multiple Python versions"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:37
#: 9973ee61c610487e8312f0c52f0939f8
msgid "In addition to the work required to create a Python package, it is often necessary that the package must be made available on different versions of Python.  Different Python versions may contain different (or renamed) standard library packages, and the changes between Python versions 2.x and 3.x include changes in the language syntax."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:43
#: 20474bfd842344bd8a1ef07dfba510fe
msgid "Performed manually, all the testing required to ensure that the package works correctly on all the target Python versions (and OSs!) could be very time-consuming. Fortunately, several tools are available for dealing with this, and these will briefly be discussed here."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:49
#: 71255bce40dd43828192487b86ef48dd
msgid "Automated testing and continuous integration"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:51
#: 49dec763748541b9a217c44489ba0c11
msgid "Several hosted services for automated testing are available. These services will typically monitor your source code repository (e.g. at `Github <https://github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your project's test suite every time a new commit is made."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:56
#: 511f3581f90a4b0685634c53b395289d
msgid "These services also offer facilities to run your project's test suite on *multiple versions of Python*, giving rapid feedback about whether the code will work, without the developer having to perform such tests themselves."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:60
#: 6b2becc32e0e421e9b076307f7a2ec9f
msgid "Wikipedia has an extensive `comparison <http://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software>`_ of many continuous-integration systems. There are two hosted services which when used in conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:66
#: a91c1d6d3d534d82b42ae55514dcf08d
msgid "`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit while the macOS is 10.9.2 at the time of writing."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:69
#: f98a335816a44788893f393dbf99298b
msgid "`Appveyor <http://www.appveyor.com>`_ provides a Windows environment (Windows Server 2012)."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:80
#: 42221176af7146a2a6189f7c477d718a
msgid "Both `Travis CI`_ and Appveyor_ require a `YAML <http://www.yaml.org>`_-formatted file as specification for the instructions for testing. If any tests fail, the output log for that specific configuration can be inspected."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:85
#: a99422f5d8c04fcb842822df8cae15b0
msgid "For Python projects that are intended to be deployed on both Python 2 and 3 with a single-source strategy, there are a number of options."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:89
#: a459a011af734f7da80bd1dba53e1027
msgid "Tools for single-source Python packages"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:91
#: e8fbe318c08d43119cf7ed70ddc314c2
msgid "`six <http://pythonhosted.org/six/>`_ is a tool developed by Benjamin Peterson for wrapping over the differences between Python 2 and Python 3. The six_ package has enjoyed widespread use and may be regarded as a reliable way to write a single-source Python module that can be use in both Python 2 and 3. The six_ module can be used from as early as Python 2.5. A tool called `modernize <https://pypi.org/project/modernize>`_, developed by Armin Ronacher, can be used to automatically apply the code modifications provided by six_."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:100
#: 52c76b2d93a049b492f682853e708727
msgid "Similar to six_, `python-future <http://python-future.org/overview.html>`_ is a package that provides a compatibility layer between Python 2 and Python 3 source code; however, unlike six_, this package aims to provide interoperability between Python 2 and Python 3 with a language syntax that matches one of the two Python versions: one may use"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:107
#: 0777d49a32ba43c8bdf46317c4981446
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:108
#: 1e8514f85ca0446d89045881a7672cde
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:110
#: 3a57098b88cc42e2a2dc1d2d8bc0f431
msgid "Because of the bi-directionality, python-future_ offers a pathway to converting a Python 2 package to Python 3 syntax module-by-module. However, in contrast to six_, python-future_ is supported only from Python 2.6. Similar to modernize_ for six_, python-future_ comes with two scripts called ``futurize`` and ``pasteurize`` that can be applied to either a Python 2 module or a Python 3 module respectively."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:117
#: 6d8fa701ce9b4cda91e0bbeff7641a15
msgid "Use of six_ or python-future_ adds an additional runtime dependency to your package: with python-future_, the ``futurize`` script can be called with the ``--stage1`` option to apply only the changes that Python 2.6+ already provides for forward-compatibility to Python 3. Any remaining compatibility problems would require manual changes."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:124
#: 3f28970ee3104cb891bbb65674646cc8
msgid "What's in which Python?"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:126
#: 7ad1634fbf32496982ae032764a300dc
msgid "Ned Batchelder provides a list of changes in each Python release for `Python 2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, `Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used to check whether any changes between Python versions may affect your package."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:3
#: ea784ba6cecd4050a9e81443e76dc054
msgid "Supporting Windows using Appveyor"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:6
#: cf12d1619b8e40dd8f21be4ad2347f3b
msgid "2015-12-03"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:8
#: ab780da068cc4202a546ecdb45b5f521
msgid "This section covers how to use the free `Appveyor`_ continuous integration service to provide Windows support for your project. This includes testing the code on Windows, and building Windows-targeted binaries for projects that use C extensions."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:20
#: 52d59d4efb0b44079cccdeb539c2f1f0
msgid "Many projects are developed on Unix by default, and providing Windows support can be a challenge, because setting up a suitable Windows test environment is non-trivial, and may require buying software licenses."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:24
#: ebc67e5a141d4e7f869d4943459d627f
msgid "The Appveyor service is a continuous integration service, much like the better-known `Travis`_ service that is commonly used for testing by projects hosted on `Github`_. However, unlike Travis, the build workers on Appveyor are Windows hosts and have the necessary compilers installed to build Python extensions."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:30
#: 3564ce95088a4269a27b24899ac25ba2
msgid "Windows users typically do not have access to a C compiler, and therefore are reliant on projects that use C extensions distributing binary wheels on PyPI in order for the distribution to be installable via ``python -m pip install <dist>``. By using Appveyor as a build service (even if not using it for testing) it is possible for projects without a dedicated Windows environment to provide Windows-targeted binaries."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:38
#: a8f86aaec719426ebc5768530ab6f70a
msgid "Setting up"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:40
#: f27588392ddc4324a06ae81bbd73d0c0
msgid "In order to use Appveyor to build Windows wheels for your project, you must have an account on the service. Instructions on setting up an account are given in `the Appveyor documentation <http://www.appveyor.com/docs>`__. The free tier of account is perfectly adequate for open source projects."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:45
#: cbe81f12014a4beabff4b9536aa7c6c4
msgid "Appveyor provides integration with `Github`_ and `Bitbucket`_, so as long as your project is hosted on one of those two services, setting up Appveyor integration is straightforward."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:49
#: 1a5626d405ee493ca5a0c358048d248f
msgid "Once you have set up your Appveyor account and added your project, Appveyor will automatically build your project each time a commit occurs. This behaviour will be familiar to users of Travis."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:54
#: 7d2bc0e5d6a044939e462cec67651eff
msgid "Adding Appveyor support to your project"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:56
#: 4f2b8bfa10524c49986e437cff8b310c
msgid "In order to define how Appveyor should build your project, you need to add an :file:`appveyor.yml` file to your project. The full details of what can be included in the file are covered in the Appveyor documentation. This guide will provide the details necessary to set up wheel builds."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:61
#: 88963cf4f4d14416a55ff59a3db582df
msgid "Appveyor includes by default all of the compiler toolchains needed to build extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of 3.3 and 3.4, the tools work out of the box. But for 64-bit versions of Python 3.3 and 3.4, there is a small amount of additional configuration needed to let distutils know where to find the 64-bit compilers. (From 3.5 onwards, the version of Visual Studio used includes 64-bit compilers with no additional setup)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:69
#: 4087716c5c5e40c3b456c4fa6c695514
msgid "appveyor.yml"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:75
#: 239dde5a1c1347d3a8a7fb4b800d6c86
msgid "This file can be downloaded from `here <https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/appveyor.yml>`__."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:77
#: cc79ed99d6874be8a4d2b9cc49ea5701
msgid "The :file:`appveyor.yml` file must be located in the root directory of your project. It is in ``YAML`` format, and consists of a number of sections."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:80
#: 7e1513513e6f4712b939710751295793
msgid "The ``environment`` section is the key to defining the Python versions for which your wheels will be created. Appveyor comes with Python 2.6, 2.7, 3.3, 3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The example file builds for all of these environments except Python 2.6. Installing for Python 2.6 is more complex, as it does not come with pip included. We don't support 2.6 in this document (as Windows users still using Python 2 are generally able to move to Python 2.7 without too much difficulty)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:88
#: 6c5cbac2fcac43f79ca340686bbe8d88
msgid "The ``install`` section uses pip to install any additional software that the project may require. The only requirement for building wheels is the ``wheel`` project, but projects may wish to customise this code in certain circumstances (for example, to install additional build packages such as ``Cython``, or test tools such as ``tox``)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:94
#: 075bf84f7f6547a8afdb1e4baddbd3ea
msgid "The ``build`` section simply switches off builds - there is no build step needed for Python, unlike languages like ``C#``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:97
#: 00a23372d979474c84265a213277a8c9
msgid "The main sections that will need to be tailored to your project are ``test_script`` and ``after_test``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:100
#: 153640362f2a49f9bf39be272d2fa9c2
msgid "The ``test_script`` section is where you will run your project's tests. The supplied file runs your test suite using ``setup.py test``. If you are only interested in building wheels, and not in running your tests on Windows, you can replace this section with a dummy command such as ``echo Skipped Tests``. You may wish to use another test tool, such as ``nose`` or :file:`py.test`.  Or you may wish to use a test driver like ``tox`` - however if you are using ``tox`` there are some additional configuration changes you will need to consider, which are described below."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:109
#: bcf227d639444e609a8a460c92301420
msgid "The ``after_test`` runs once your tests have completed, and so is where the wheels should be built. Assuming your project uses the recommended tools (specifically, ``setuptools``) then the ``setup.py bdist_wheel`` command will build your wheels."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:114
#: 04a54eaeef3a4c30ab6488ff4bdc6bee
msgid "Note that wheels will only be built if your tests succeed. If you expect your tests to fail on Windows, you can skip them as described above."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:119
#: 7e7a6f2f5e5747deb87c8001829ba4a3
msgid "Support script"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:121
#: 372585ca5fcc4b9e87a72ed61d8db0e3
msgid "The :file:`appveyor.yml` file relies on a single support script, which sets up the environment to use the SDK compiler for 64-bit builds on Python 3.3 and 3.4.  For projects which do not need a compiler, or which don't support 3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml` file is needed."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:126
#: 45c79d6960954a3aa486c43bf0aebaea
msgid "`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows batch script that runs a single command in an environment with the appropriate compiler for the selected Python version. All you need to do is to set the single environment variable ``DISTUTILS_USE_SDK`` to a value of ``1`` and the script does the rest. It sets up the SDK needed for 64-bit builds of Python 3.3 or 3.4, so don't set the environment variable for any other builds."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:133
#: 3e4aa03e90d9482f998d2165dcba9cd4
msgid "You can simply download the batch file and include it in your project unchanged."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:137
#: 573c490d115a45aebd690a50c5c8909c
msgid "Access to the built wheels"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:139
#: 482d73ae7ecb4ac7acc6fb4061f483ad
msgid "When your build completes, the built wheels will be available from the Appveyor control panel for your project. They can be found by going to the build status page for each build in turn. At the top of the build output there is a series of links, one of which is \"Artifacts\". That page will include a list of links to the wheels for that Python version / architecture. You can download those wheels and upload them to PyPI as part of your release process."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:147
#: b2584f602b4b46a18e5ebf0295e8c260
msgid "Additional notes"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:150
#: 8f8d13e1d30740d587690f9fc23a5f80
msgid "Testing with tox"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:152
#: c14cbe7ea87244c69400d64c322d579e
msgid "Many projects use the `Tox`_ tool to run their tests. It ensures that tests are run in an isolated environment using the exact files that will be distributed by the project."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:156
#: 9937fd6157a640998a41893969ccf15a
msgid "In order to use ``tox`` on Appveyor there are a couple of additional considerations (in actual fact, these issues are not specific to Appveyor, and may well affect other CI systems)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:160
#: a159f2e8c8954f14b3bc570e70f93f2b
msgid "By default, ``tox`` only passes a chosen subset of environment variables to the test processes. Because ``distutils`` uses environment variables to control the compiler, this \"test isolation\" feature will cause the tests to use the wrong compiler by default."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:165
#: af13d4de9df54c2dae2e3f1e07cfd6ff
msgid "To force ``tox`` to pass the necessary environment variables to the subprocess, you need to set the ``tox`` configuration option ``passenv`` to list the additional environment variables to be passed to the subprocess. For the SDK compilers, you need"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:170
#: 01bd0c66e160446cb9b88fc724e799ad
msgid "``DISTUTILS_USE_SDK``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:171
#: cd88d059af794adf95014a1632045dc3
msgid "``MSSdk``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:172
#: dd7811c20482459f88112fb35493906e
msgid "``INCLUDE``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:173
#: 1bfcb4e4f5b04f0ba07775cb3408a925
msgid "``LIB``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:175
#: 706e412e6c994f79b5f6b7b78ff53176
msgid "The ``passenv`` option can be set in your :file:`tox.ini`, or if you prefer to avoid adding Windows-specific settings to your general project files, it can be set by setting the ``TOX_TESTENV_PASSENV`` environment variable. The supplied :file:`build.cmd` script does this by default whenever ``DISTUTILS_USE_SDK`` is set."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:181
#: ce95912bc95c4c86b5afd109e5fd7762
msgid "When used interactively, ``tox`` allows you to run your tests against multiple environments (often, this means multiple Python versions). This feature is not as useful in a CI environment like Travis or Appveyor, where all tests are run in isolated environments for each configuration. As a result, projects often supply an argument ``-e ENVNAME`` to ``tox`` to specify which environment to use (there are default environments for most versions of Python)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:188
#: e52ebaa74cd245d8a5f35e1e3c321240
msgid "However, this does *not* work well with a Windows CI system like Appveyor, where there are (for example) two installations of Python 3.4 (32-bit and 64-bit) available, but only one ``py34`` environment in ``tox``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:192
#: d1124ae3f2c44f1c81c0692d7aa65f37
msgid "In order to run tests using ``tox``, therefore, projects should probably use the default ``py`` environment in ``tox``, which uses the Python interpreter that was used to run ``tox``. This will ensure that when Appveyor runs the tests, they will be run with the configured interpreter."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:197
#: 7f7cf417912f458e9d925d8825f4ce6d
msgid "In order to support running under the ``py`` environment, it is possible that projects with complex ``tox`` configurations might need to modify their :file:`tox.ini` file. Doing so is, however, outside the scope of this document."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:203
#: 5355d61570764c88a7bb4b9a5f5a9fdd
msgid "Automatically uploading wheels"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:205
#: 84e8da4e724446c3b8abfe91c28588c4
msgid "It is possible to request Appveyor to automatically upload wheels. There is a ``deployment`` step available in :file:`appveyor.yml` that can be used to (for example) copy the built artifacts to a FTP site, or an Amazon S3 instance. Documentation on how to do this is included in the Appveyor guides."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:210
#: f28c820678564883a4c56272d021c70f
msgid "Alternatively, it would be possible to add a ``twine upload`` step to the build.  The supplied :file:`appveyor.yml` does not do this, as it is not clear that uploading new wheels after every commit is desirable (although some projects may wish to do this)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:216
#: f28d931eb55c4a658b99c71a7abee7e9
msgid "External dependencies"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:218
#: 46c7005a570340359afe21f9bbd1226b
msgid "The supplied scripts will successfully build any distribution that does not rely on 3rd party external libraries for the build."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:221
#: 517ad0216fae43a48ebcf99b2a628c88
msgid "It is possible to add steps to the :file:`appveyor.yml` configuration (typically in the \"install\" section) to download and/or build external libraries needed by the distribution. And if needed, it is possible to add extra configuration for the build to supply the location of these libraries to the compiler. However, this level of configuration is beyond the scope of this document."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:230
#: e215650c08cc4b26953e99f5b179c930
msgid "Support scripts"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:232
#: a2bb440eae104b66aa9600463d379cd8
msgid "For reference, the SDK setup support script is listed here:"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:234
#: 30586f76e0294cf08a0d2e46bd1a84fd
msgid "``appveyor-sample/build.cmd``"
msgstr ""

#: ../source/guides/tool-recommendations.rst:5
#: 7921da99446343e083e2e6fc81021e5f
msgid "Tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:7
#: aa2056e23dbb482595018944ee4ed524
msgid "If you're familiar with Python packaging and installation, and just want to know what tools are currently recommended, then here it is."
msgstr ""

#: ../source/guides/tool-recommendations.rst:12
#: fc0a6395085e46b8bec70cdbbaa1523d
msgid "Application dependency management"
msgstr ""

#: ../source/guides/tool-recommendations.rst:14
#: f9819f4e8de042e7b8480275ed36c472
msgid "Use :ref:`pipenv` to manage library dependencies when developing Python applications. See :doc:`../tutorials/managing-dependencies` for more details on using ``pipenv``."
msgstr ""

#: ../source/guides/tool-recommendations.rst:18
#: 56a9fd843fe94c8d94a4570da98a45fd
msgid "When ``pipenv`` does not meet your use case, consider other tools like:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:20
#: 046ee2be33ce4526bed20c065b31a114
msgid ":ref:`pip`"
msgstr ""

#: ../source/guides/tool-recommendations.rst:22
#: ccda3f3b91c347cda111f6033720b698
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:24
#: 7e6f20a1d13240e3a0e70cb2fe3e7f69
msgid "`Poetry <https://python-poetry.org/>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:27
#: f578f47e3d30440d89425a8559f7e52b
msgid "Installation tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:29
#: e8b8234af49548c78c45cab049a86d12
msgid "Use :ref:`pip` to install Python :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on how :ref:`pip` is installed, you may need to also install :ref:`wheel` to get the benefit of wheel caching. [3]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:34
#: 642153cad14d4378ac0d9973d3350895
msgid "Use :ref:`virtualenv`, or `venv`_ to isolate application specific dependencies from a shared Python installation. [4]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:37
#: 453a5c6bca974e8a865dc3ade6974fa3
msgid "If you're looking for management of fully integrated cross-platform software stacks, consider:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:40
#: b06ae1af80dc4c5fa947df9986c5273e
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ""

#: ../source/guides/tool-recommendations.rst:42
#: 25965ab99ef9410cab066f8082f87a6a
msgid ":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the scientific community."
msgstr ""

#: ../source/guides/tool-recommendations.rst:47
#: 65654c8633134734b6d4431d9dddf746
msgid "Packaging tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:49
#: 4f53d0918405459e806f596fae37bfa6
msgid "Use :ref:`setuptools` to define projects and create :term:`Source Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:52
#: 708eb25623f04034b2b50467783e7be0
msgid "Use the ``bdist_wheel`` :ref:`setuptools` extension available from the :ref:`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is especially beneficial, if your project contains binary extensions."
msgstr ""

#: ../source/guides/tool-recommendations.rst:56
#: 0d1e8b71890b4eddbe6e8ce1fee882cc
msgid "Use `twine <https://pypi.org/project/twine>`_ for uploading distributions to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:61
#: 5e8b35d9050944759213cbe58ce1cb8f
msgid "Publishing platform migration"
msgstr ""

#: ../source/guides/tool-recommendations.rst:63
#: 2d494c5db7a140dd8f3f6e4885e9348c
msgid "The original Python Package Index implementation (previously hosted at `pypi.python.org <https://pypi.python.org>`_) has been phased out in favour of an updated implementation hosted at `pypi.org <https://pypi.org>`_."
msgstr ""

#: ../source/guides/tool-recommendations.rst:67
#: b14b0e2513dd4c73b41b1b13d55fe614
msgid "See :ref:`Migrating to PyPI.org` for more information on the status of the migration, and what settings to change in your clients."
msgstr ""

#: ../source/guides/tool-recommendations.rst:72
#: b494b8268fe84368bf9f63ca7417bc38
msgid "There are some cases where you might choose to use ``easy_install`` (from :ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` (which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs easy_install`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:77
#: a3cbcefe416642d594f924cba5c75bc7
msgid "The acceptance of :pep:`453` means that :ref:`pip` will be available by default in most installations of Python 3.4 or later.  See the :pep:`rationale section <453#rationale>` from :pep:`453` as for why pip was chosen."
msgstr ""

#: ../source/guides/tool-recommendations.rst:82
#: 4d3c2eb710d64911958f0356ca59e8af
msgid "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and :ref:`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:`venv <venv>` do not currently.  Also, the common \"python-pip\" package that's found in various linux distros, does not depend on \"python-wheel\" currently."
msgstr ""

#: ../source/guides/tool-recommendations.rst:88
#: f8b0ea3d04ef4c70b5deb28d2836a741
msgid "Beginning with Python 3.4, ``venv`` will create virtualenv environments with ``pip`` installed, thereby making it an equal alternative to :ref:`virtualenv`. However, using :ref:`virtualenv` will still be recommended for users that need cross-version consistency."
msgstr ""

#: ../source/guides/tool-recommendations.rst:93
#: 892f153e0eff4d77bf6bb4e28c819125
msgid "Although you can use pure ``distutils`` for many projects, it does not support defining dependencies on other projects and is missing several convenience utilities for automatically populating distribution metadata correctly that are provided by ``setuptools``. Being outside the standard library, ``setuptools`` also offers a more consistent feature set across different versions of Python, and (unlike ``distutils``), recent versions of ``setuptools`` support all of the modern metadata fields described in :ref:`core-metadata`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:102
#: 8da70bcab118496e83bdd5b77355a974
msgid "Even for projects that do choose to use ``distutils``, when :ref:`pip` installs such projects directly from source (rather than installing from a prebuilt :term:`wheel <Wheel>` file), it will actually build your project using :ref:`setuptools` instead."
msgstr ""

#: ../source/guides/tool-recommendations.rst:107
#: 969d31dcd2ca417d930a59991804a29f
msgid "`distribute`_ (a fork of setuptools) was merged back into :ref:`setuptools` in June 2013, thereby making setuptools the default choice for packaging."
msgstr ""

#: ../source/guides/using-manifest-in.rst:5
#: bb39d0ff02d14499b6245a648e96978f
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:7
#: 5ce47c44e8e34e8189b3cf659028011b
msgid "When building a :term:`source distribution <Source Distribution (or \"sdist\")>` for your package, by default only a minimal set of files are included.  You may find yourself wanting to include extra files in the source distribution, such as an authors/contributors file, a :file:`docs/` directory, or a directory of data files used for testing purposes.  There may even be extra files that you *need* to include; for example, if your :file:`setup.py` computes your project's ``long_description`` by reading from both a README and a changelog file, you'll need to include both those files in the sdist so that people that build or install from the sdist get the correct results."
msgstr ""

#: ../source/guides/using-manifest-in.rst:17
#: 9fbd83b19feb42628d686f6dbfd0cf6b
msgid "Adding & removing files to & from the source distribution is done by writing a :file:`MANIFEST.in` file at the project root."
msgstr ""

#: ../source/guides/using-manifest-in.rst:22
#: 4136c1acbdec4deb8330769e44ec2e7e
msgid "How files are included in an sdist"
msgstr ""

#: ../source/guides/using-manifest-in.rst:24
#: 970711c494f441bba7a5ea7c876daf52
msgid "The following files are included in a source distribution by default:"
msgstr ""

#: ../source/guides/using-manifest-in.rst:26
#: c3cba1424f3b43d882947f7db1d7ccc3
msgid "all Python source files implied by the ``py_modules`` and ``packages`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:28
#: c9b0b4332bc2470ba85743fd9b1aa3f5
msgid "all C source files mentioned in the ``ext_modules`` or ``libraries`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:30
#: 1a941caeac8a4f9f91031e7e792aa0f8
msgid "scripts specified by the ``scripts`` ``setup()`` argument"
msgstr ""

#: ../source/guides/using-manifest-in.rst:31
#: df5cd5d7c264493db2392ebb67e44456
msgid "all files specified by the ``package_data`` and ``data_files`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:33
#: 423218a759044675bad9d4d8ba046bc8
msgid "the file specified by the ``license_file`` option in :file:`setup.cfg` (setuptools 40.8.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:35
#: 531266039c614aac9c094b698129b551
msgid "all files specified by the ``license_files`` option in :file:`setup.cfg` (setuptools 42.0.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:37
#: 7cfc79888030488a9834eeb33605cdf4
msgid "all files matching the pattern :file:`test/test*.py`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:38
#: 8e59c97aebc14ed08d9f741cb9c77609
msgid ":file:`setup.py` (or whatever you called your setup script)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:39
#: 478e5a3630644a739796d70edea67ea3
msgid ":file:`setup.cfg`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:40
#: e999129e732b41e4b9fa804521f766a8
msgid ":file:`README`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:41
#: 79d88dba53634d8e9d76984edfc9c77f
msgid ":file:`README.txt`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:42
#: f4a3973301fd405195d3963f17f8008e
msgid ":file:`README.rst` (Python 3.7+ or setuptools 0.6.27+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:43
#: 5a5ada39d7d7413bb71f5eddae322f94
msgid ":file:`README.md` (setuptools 36.4.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:44
#: 2dcd1074722a4cd28e9c2dbdd0cdd238
msgid ":file:`pyproject.toml` (setuptools 43.0.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:45
#: 7be110d0f9e649ac8b17c5944c49aa7e
msgid ":file:`MANIFEST.in`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:47
#: 5fa3abc0d366476591e91572d4aeb425
msgid "After adding the above files to the sdist, the commands in :file:`MANIFEST.in` (if such a file exists) are executed in order to add and remove further files to & from the sdist.  Default files can even be removed from the sdist with the appropriate :file:`MANIFEST.in` command."
msgstr ""

#: ../source/guides/using-manifest-in.rst:52
#: 96608f9bf1ee4b98b43ebd6df77b4f54
msgid "After processing the :file:`MANIFEST.in` file, setuptools removes the :file:`build/` directory as well as any directories named :file:`RCS`, :file:`CVS`, or :file:`.svn` from the sdist, and it adds a :file:`PKG-INFO` file and an :file:`*.egg-info` directory.  This behavior cannot be changed with :file:`MANIFEST.in`."
msgstr ""

#: ../source/guides/using-manifest-in.rst:60
#: 4ef701734ea843dfbc6dc4554859eb42
msgid ":file:`MANIFEST.in` commands"
msgstr ""

#: ../source/guides/using-manifest-in.rst:62
#: 3f26c2933ea64d549923210c69f3589c
msgid "A :file:`MANIFEST.in` file consists of commands, one per line, instructing setuptools to add or remove some set of files from the sdist.  The commands are:"
msgstr ""

#: ../source/guides/using-manifest-in.rst:67
#: 8312785b0a4a4b74bd6e211f51f0262b
msgid "Command"
msgstr ""

#: ../source/guides/using-manifest-in.rst:69
#: b03e60e80fbe45c5bca72e21a139fe18
msgid ":samp:`include {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:69
#: a11558d4a9c84094829eb9e1e905b825
msgid "Add all files matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:70
#: f0512ae27a574352a9a4c34c3d9b2323
msgid ":samp:`exclude {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:70
#: a38cf4b5129545af84775893c5b6bd19
msgid "Remove all files matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:71
#: e1736d8e01204b7e9023a22f7888b8b9
msgid ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:71
#: f98f8d4a9c49488f9a083722e7a8a849
msgid "Add all files under directories matching ``dir-pattern`` that match any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:72
#: d4eff83b33da467983a35b8b7b78618e
msgid ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:72
#: 94c4875346ef41e1bc2191a47ab5f3e6
msgid "Remove all files under directories matching ``dir-pattern`` that match any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:73
#: d1266e32e6c44123a87d46e543ed132b
msgid ":samp:`global-include {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:73
#: 8fb24fd506d1402db1c29ad90fa18a23
msgid "Add all files anywhere in the source tree matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:74
#: 340cd30dbf2749de925809561c4b0062
msgid ":samp:`global-exclude {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:74
#: d47928890b144fe7a9ef1edbfb9907ed
msgid "Remove all files anywhere in the source tree matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:75
#: b22f975b7ebd466eac17ff2ac2665370
msgid ":samp:`graft {dir-pattern}`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:75
#: 89986179dc344ddcb052b6fcbe306475
msgid "Add all files under directories matching ``dir-pattern``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:76
#: 6739b848186642a2992e54a61dfc16fa
msgid ":samp:`prune {dir-pattern}`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:76
#: 65e7b3ad35e042a88c76a6997dd57836
msgid "Remove all files under directories matching ``dir-pattern``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:79
#: 8b424bd01db2489ab23dde459f9c0629
msgid "The patterns here are glob-style patterns: ``*`` matches zero or more regular filename characters (on Unix, everything except forward slash; on Windows, everything except backslash and colon); ``?`` matches a single regular filename character, and ``[chars]`` matches any one of the characters between the square brackets (which may contain character ranges, e.g., ``[a-z]`` or ``[a-fA-F0-9]``).  Setuptools also has undocumented support for ``**`` matching zero or more characters including forward slash, backslash, and colon."
msgstr ""

#: ../source/guides/using-manifest-in.rst:87
#: 13fd416134e34068a90e539226a87b92
msgid "Directory patterns are relative to the root of the project directory; e.g., ``graft example*`` will include a directory named :file:`examples` in the project root but will not include :file:`docs/examples/`."
msgstr ""

#: ../source/guides/using-manifest-in.rst:91
#: 1ea4a2ec87734d6e9b8cf6de467ea307
msgid "File & directory names in :file:`MANIFEST.in` should be ``/``-separated; setuptools will automatically convert the slashes to the local platform's appropriate directory separator."
msgstr ""

#: ../source/guides/using-manifest-in.rst:95
#: 4cbabbb782fd4601b0481566e6b976d1
msgid "Commands are processed in the order they appear in the :file:`MANIFEST.in` file.  For example, given the commands::"
msgstr ""

#: ../source/guides/using-manifest-in.rst:101
#: be83cc46b4fa479291a9a5399c585e16
msgid "the contents of the directory tree :file:`tests` will first be added to the sdist, and then after that all files in the sdist with a ``.pyc``, ``.pyo``, or ``.pyd`` extension will be removed from the sdist.  If the commands were in the opposite order, then ``*.pyc`` files etc. would be only be removed from what was already in the sdist before adding :file:`tests`, and if :file:`tests` happened to contain any ``*.pyc`` files, they would end up included in the sdist because the exclusion happened before they were included."
msgstr ""

#: ../source/guides/using-testpypi.rst:7
#: ad8e99193f934b02a131ae5f869f5c55
msgid "``TestPyPI`` is a separate instance of the :term:`Python Package Index (PyPI)` that allows you to try out the distribution tools and process without worrying about affecting the real index. TestPyPI is hosted at `test.pypi.org <https://test.pypi.org>`_"
msgstr ""

#: ../source/guides/using-testpypi.rst:13
#: e646b8868331451ca9565fb1b33d14a4
msgid "Registering your account"
msgstr ""

#: ../source/guides/using-testpypi.rst:15
#: be27df21ec5348a18e12a236f9ba44bf
msgid "Because TestPyPI has a separate database from the live PyPI, you'll need a separate user account for specifically for TestPyPI. Go to https://test.pypi.org/account/register/ to register your account."
msgstr ""

#: ../source/guides/using-testpypi.rst:19
#: 9f0851241421431095e15844573781a8
msgid "The database for TestPyPI may be periodically pruned, so it is not unusual for user accounts to be deleted."
msgstr ""

#: ../source/guides/using-testpypi.rst:24
#: 5d44541d0fb441b7ab24038d2c644cd3
msgid "Using TestPyPI with Twine"
msgstr ""

#: ../source/guides/using-testpypi.rst:26
#: 27bebab3e3f9417d8e3874f5d8093670
msgid "You can upload your distributions to TestPyPI using :ref:`twine` by specifying the ``--repository`` flag"
msgstr ""

#: ../source/guides/using-testpypi.rst:33
#: 4bc6e79d84384b18a061045ec4fb8dca
msgid "You can see if your package has successfully uploaded by navigating to the URL ``https://test.pypi.org/project/<sampleproject>`` where ``sampleproject`` is the name of your project that you uploaded. It may take a minute or two for your project to appear on the site."
msgstr ""

#: ../source/guides/using-testpypi.rst:39
#: 6c75b2b851f74b58902e9da0a3e6c07f
msgid "Using TestPyPI with pip"
msgstr ""

#: ../source/guides/using-testpypi.rst:41
#: 9bab9c65404a4d1389a097565e8992c4
msgid "You can tell pip to download packages from TestPyPI instead of PyPI by specifying the ``--index-url`` flag"
msgstr ""

#: ../source/guides/using-testpypi.rst:56
#: 9c7869448116415e9a762e5f34222199
msgid "If you want to allow pip to also pull other packages from PyPI you can specify ``--extra-index-url`` to point to PyPI. This is useful when the package you're testing has dependencies:"
msgstr ""

#: ../source/guides/using-testpypi.rst:73
#: 1c0aa62ccccd4201b6b512e990a38ca8
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr ""

#: ../source/guides/using-testpypi.rst:75
#: ef03eb4e3a1043d0a78095d2e94858ee
msgid "If you want to avoid entering your username, you can configure TestPyPI in your :file:`$HOME/.pypirc`:"
msgstr ""

#: ../source/index.rst:3
#: ../source/key_projects.rst:170
#: 7146c0ab1fda4903aed979b9dc8a222f
#: c4ef8130157f431e9bb4669288cb4197
msgid "Python Packaging User Guide"
msgstr ""

#: ../source/index.rst:5
#: 64d71b912e6c4f139f58da6190a05cd9
msgid "The Python Packaging User Guide (PyPUG) is a collection of tutorials and guides for packaging Python software."
msgstr ""

#: ../source/index.rst:5
#: ef29e981d03b45c982ab450fbb8f8642
msgid "python, packaging, guide, tutorial"
msgstr ""

#: ../source/index.rst:24
#: e8c60c3d66344177a679e76bca12d46f
msgid "Welcome to the *Python Packaging User Guide*, a collection of tutorials and references to help you distribute and install Python packages with modern tools."
msgstr ""

#: ../source/index.rst:28
#: 4cf86da3d2994d6d9a01ca8bbce444ba
msgid "This guide is maintained on `GitHub`_ by the `Python Packaging Authority`_. We happily accept any :doc:`contributions and feedback <contribute>`. 😊"
msgstr ""

#: ../source/index.rst:36
#: 18b9e38d8baa40d790266e3793a7320a
msgid "Get started"
msgstr ""

#: ../source/index.rst:38
#: 0913e112fd89425ba705baf3ca323bf8
msgid "Essential tools and concepts for working within the Python development ecosystem are covered in our :doc:`tutorials/index` section:"
msgstr ""

#: ../source/index.rst:41
#: 41bcf539965a4f64ad6dc8605af64fc7
msgid "To learn how to install packages, see the :doc:`tutorial on installing packages <tutorials/installing-packages>`"
msgstr ""

#: ../source/index.rst:43
#: bf0719992b154d689b5adf6d7faa80a4
msgid "To learn how to manage dependencies in a version controlled project, see the :doc:`tutorial on managing application dependencies <tutorials/managing-dependencies>`"
msgstr ""

#: ../source/index.rst:45
#: 0924f12ca4884f3c8ec65e94caecc9a0
msgid "To learn how to package and distribute your projects, see the :doc:`tutorial on packaging and distributing <tutorials/packaging-projects>`"
msgstr ""

#: ../source/index.rst:47
#: 41f4b9c65d6c4ae4a4a95fd038de1c22
msgid "To get an overview of packaging options for Python libraries and applications, see the :doc:`Overview of Python Packaging <overview>`"
msgstr ""

#: ../source/index.rst:52
#: af8b2413ddcb472d9d2ba583a2665826
msgid "Learn more"
msgstr ""

#: ../source/index.rst:54
#: dbdb99598de44589a6c0eab7298bfdd8
msgid "Beyond our :doc:`tutorials/index`, this guide has several other resources:"
msgstr ""

#: ../source/index.rst:56
#: 6fd4675647034d80a41502fbcb978724
msgid "The :doc:`guides/index` section for walk throughs, such as :doc:`guides/installing-using-linux-tools` or :doc:`guides/packaging-binary-extensions`."
msgstr ""

#: ../source/index.rst:58
#: 1ac388339eef4fbead303c16820d50e3
msgid "The :doc:`discussions/index` section for in-depth references on topics such as :doc:`discussions/deploying-python-applications` or :doc:`discussions/pip-vs-easy-install`."
msgstr ""

#: ../source/index.rst:60
#: c243abc4333b4eaf811f2d042883ebd2
msgid "The :doc:`specifications/index` section for packaging interoperability specifications."
msgstr ""

#: ../source/index.rst:62
#: ec2b63b7106745a09f60379965018450
msgid "Additionally, there is a list of :doc:`other projects <key_projects>` maintained by members of the Python Packaging Authority."
msgstr ""

#: ../source/key_projects.rst:6
#: 162805fdaea44049ae07b39910bc2713
msgid "Project Summaries"
msgstr ""

#: ../source/key_projects.rst:8
#: 4034aed98391443ab4f794c28749675a
msgid "Summaries and links for the most relevant projects in the space of Python installation and packaging."
msgstr ""

#: ../source/key_projects.rst:14
#: 1fa1ffc2aad94d41b0c1fd4cfaed256f
msgid "PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:19
#: bd6e0064ba4b48e48f994e3726412ba4
msgid "bandersnatch"
msgstr ""

#: ../source/key_projects.rst:21
#: d79fb8a46936495f978c9ca5901c5533
msgid "`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"
msgstr ""

#: ../source/key_projects.rst:25
#: 14311fee64fa48889c5c2429bc636f19
msgid "``bandersnatch`` is a PyPI mirroring client designed to efficiently create a complete mirror of the contents of PyPI. Organizations thus save bandwidth and latency on package downloads (especially in the context of automated tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN)."
msgstr ""

#: ../source/key_projects.rst:35
#: b4a0332bbc744b0ea4dece39440eb514
msgid "build"
msgstr ""

#: ../source/key_projects.rst:37
#: 11435431ad9740d2b5c1e6983189cadc
msgid "`Docs <https://pypa-build.readthedocs.io/>`__ | `Issues <https://github.com/pypa/build/issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://pypi.org/project/build>`__"
msgstr ""

#: ../source/key_projects.rst:42
#: 631be086b9b144908e926e96a6175652
msgid "``build`` is a :pep:`517` compatible Python package builder. It provides a CLI to build packages, as well as a Python API."
msgstr ""

#: ../source/key_projects.rst:49
#: 5c4812130f034678839f8fbdf87adbf8
msgid "cibuildwheel"
msgstr ""

#: ../source/key_projects.rst:51
#: 7e63aac93e554efcb63aa0955635864d
msgid "`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | `Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""

#: ../source/key_projects.rst:58
#: 6634dd7cc6fe40a9b27288ba366f0a12
msgid "``cibuildwheel`` is a package that builds wheels for all common platforms and Python versions on most CI systems."
msgstr ""

#: ../source/key_projects.rst:65
#: c8dc87b3a4fe43e1b6b11e783bfd1178
msgid "distlib"
msgstr ""

#: ../source/key_projects.rst:67
#: e678fe983ad2476c86cac3dbcdfb8b99
msgid "`Docs <http://pythonhosted.org/distlib/>`__ | `Issues <https://bitbucket.org/pypa/distlib/issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket.org/pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"
msgstr ""

#: ../source/key_projects.rst:72
#: ef926357454c4b8e80bcce16b4ed8321
msgid "``distlib`` is a library which implements low-level functions that relate to packaging and distribution of Python software.  ``distlib`` implements several relevant PEPs (Python Enhancement Proposal standards) and is useful for developers of third-party packaging tools to make and upload binary and source :term:`distributions <Distribution Package>`, achieve interoperability, resolve dependencies, manage package resources, and do other similar functions."
msgstr ""

#: ../source/key_projects.rst:81
#: 3742879833414187b398597ab0652ede
msgid "Unlike the stricter :ref:`packaging` project (below), which specifically implements modern Python packaging interoperability standards, ``distlib`` also attempts to provide reasonable fallback behaviours when asked to handle legacy packages and metadata that predate the modern interoperability standards and fall into the subset of packages that are incompatible with those standards."
msgstr ""

#: ../source/key_projects.rst:91
#: 1883ed13b4ab4597bbb8501ad9d0bc9a
msgid "packaging"
msgstr ""

#: ../source/key_projects.rst:93
#: 24b9caf65bd548dc955199b1984fd6a5
msgid "`Docs <https://packaging.pypa.io>`__ | `Issues <https://github.com/pypa/packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://pypi.org/project/packaging>`__"
msgstr ""

#: ../source/key_projects.rst:98
#: 05c20faadaba49ba969aac0ab3a66a28
msgid "Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""

#: ../source/key_projects.rst:100
#: 017bd16f719f42e08ef2484721c37803
msgid "The core utilities in the packaging library handle version handling, specifiers, markers, requirements, tags, and similar attributes and tasks for Python packages. Most Python users rely on this library without needing to explicitly call it; developers of the other Python packaging, distribution, and installation tools listed here often use its functionality to parse, discover, and otherwise handle dependency attributes."
msgstr ""

#: ../source/key_projects.rst:108
#: 986b71065bbe489a95d924f5a8dbff55
msgid "This project specifically focuses on implementing the modern Python packaging interoperability standards defined at :ref:`packaging-specifications`, and will report errors for sufficiently old legacy packages that are incompatible with those standards. In contrast, the :ref:`distlib` project is a more permissive library that attempts to provide a plausible reading of ambiguous metadata in cases where :ref:`packaging` will instead report on error."
msgstr ""

#: ../source/key_projects.rst:120
#: ../source/specifications/platform-compatibility-tags.rst:85
#: b78a091886e34bbb9f7aa5218e4500da
#: 8ad664055cbc4d1cbe7f0a8f04f1f78e
msgid "pip"
msgstr ""

#: ../source/key_projects.rst:122
#: 0290661fe2c742e2899d883d2746ce8f
msgid "`Docs <https://pip.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi.org/project/pip/>`__"
msgstr ""

#: ../source/key_projects.rst:127
#: 8badce2a00dd47cea58123ae3402d438
msgid "The most popular tool for installing Python packages, and the one included with modern versions of Python."
msgstr ""

#: ../source/key_projects.rst:130
#: a36732b006d441acb1006319b3b1e3e1
msgid "It provides the essential core features for finding, downloading, and installing packages from PyPI and other Python package indexes, and can be incorporated into a wide range of development workflows via its command-line interface (CLI)."
msgstr ""

#: ../source/key_projects.rst:138
#: e04f200c41d44c5d83d392ffa2d235f6
msgid "Pipenv"
msgstr ""

#: ../source/key_projects.rst:140
#: 05420d6c6d154fea8814bf84c6a08004
msgid "`Docs <https://pipenv.pypa.io/>`__ | `Source <https://github.com/pypa/pipenv>`__ | `Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/project/pipenv>`__"
msgstr ""

#: ../source/key_projects.rst:145
#: 9a633dcd4c3d49d18916f67d1dae84fa
msgid "Pipenv is a project that aims to bring the best of all packaging worlds to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:`virtualenv` into one single toolchain. It features very pretty terminal colors."
msgstr ""

#: ../source/key_projects.rst:149
#: 331858f888dc4a8fb31c33d1c1062860
msgid "Pipenv aims to help users manage environments, dependencies, and imported packages on the command line. It also works well on Windows (which other tools often underserve), makes and checkes file hashes, to ensure compliance with hash-locked dependency specifiers, and eases uninstallation of packages and dependencies. It is used by Python users and system administrators, but has been less maintained since late 2018."
msgstr ""

#: ../source/key_projects.rst:160
#: 9777bf89bce741c3ae46d4eb70728633
msgid "Pipfile"
msgstr ""

#: ../source/key_projects.rst:162
#: 6fb11d5dd851428c8d4dc3c232e6cdb2
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr ""

#: ../source/key_projects.rst:164
#: 0332fde4793f49cbb0d86071b0c61441
msgid ":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level application-centric alternative to :ref:`pip`'s lower-level :file:`requirements.txt` file."
msgstr ""

#: ../source/key_projects.rst:172
#: 2c8b377eba724cb2b688519fa6201bfc
msgid "`Docs <https://packaging.python.org/en/latest/>`__ | `Issues <https://github.com/pypa/python-packaging-user-guide/issues>`__ | `GitHub <https://github.com/pypa/python-packaging-user-guide>`__"
msgstr ""

#: ../source/key_projects.rst:176
#: 0595b8d256bf44ab9f19f75d91d0b4ea
msgid "This guide!"
msgstr ""

#: ../source/key_projects.rst:181
#: fcfb2b1b16084646bf6ed6b413ad23cd
msgid "readme_renderer"
msgstr ""

#: ../source/key_projects.rst:183
#: a776116a2e7345e39f24c6bc8dd2d67d
msgid "`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI <https://pypi.org/project/readme_renderer/>`__"
msgstr ""

#: ../source/key_projects.rst:186
#: 3595eeb66ed844cab0255964394c9bb4
msgid "``readme_renderer`` is a library that package developers use to render their user documentation (README) files into HTML from markup languages such as Markdown or reStructuredText. Developers call it on its own or via :ref:`twine`, as part of their release management process, to check that their package descriptions will properly display on PyPI."
msgstr ""

#: ../source/key_projects.rst:197
#: a21ec98e60f542058d17a7d7c3da6800
msgid "setuptools"
msgstr ""

#: ../source/key_projects.rst:199
#: 9e3a8d706737459ab7022c9754389873
msgid "`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""

#: ../source/key_projects.rst:204
#: 338f78a3aab14c94a21c160572c5a1ff
msgid "setuptools (which includes ``easy_install``) is a collection of enhancements to the Python distutils that allow you to more easily build and distribute Python :term:`distributions <Distribution Package>`, especially ones that have dependencies on other packages."
msgstr ""

#: ../source/key_projects.rst:209
#: 800feddc28e2401aa9ee4b0c08a1e854
msgid "`distribute`_ was a fork of setuptools that was merged back into setuptools (in v0.7), thereby making setuptools the primary choice for Python packaging."
msgstr ""

#: ../source/key_projects.rst:216
#: cc9d6de23fd74f85854b029ecb46248b
msgid "trove-classifiers"
msgstr ""

#: ../source/key_projects.rst:218
#: d4904574c65e4aa19cf985bd196106ec
msgid "`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub <https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/project/trove-classifiers/>`__"
msgstr ""

#: ../source/key_projects.rst:222
#: 8b51502a06ba466d96ef8ebd6acb5020
msgid "trove-classifiers is the canonical source for `classifiers on PyPI <https://pypi.org/classifiers/>`_, which project maintainers use to `systematically describe their projects <https://packaging.python.org/specifications/core-metadata/#classifier-multiple-use>`_ so that users can better find projects that match their needs on the PyPI."
msgstr ""

#: ../source/key_projects.rst:228
#: 37792a8d197b431ebe7a926bb31967f5
msgid "The trove-classifiers package contains a list of valid classifiers and deprecated classifiers (which are paired with the classifiers that replace them).  Use this package to validate classifiers used in packages intended for uploading to PyPI. As this list of classifiers is published as code, you can install and import it, giving you a more convenient workflow compared to referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for the project hosts discussions on proposed classifiers and requests for new classifiers."
msgstr ""

#: ../source/key_projects.rst:242
#: 89ea6d7d216c4abc8363826b506f1b18
msgid "twine"
msgstr ""

#: ../source/key_projects.rst:244
#: bf9632bac8e64a33b0b34f55a33117e8
msgid "`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | `PyPI <https://pypi.org/project/twine>`__"
msgstr ""

#: ../source/key_projects.rst:249
#: bc50d20cb6b943d18660980d459d804b
msgid "Twine is the primary tool developers use to upload packages to the Python Package Index or other Python package indexes. It is a command-line program that passes program files and metadata to a web API. Developers use it because it's the official PyPI upload tool, it's fast and secure, it's maintained, and it reliably works."
msgstr ""

#: ../source/key_projects.rst:259
#: ../source/overview.rst:415
#: 80de632902c84b7d9651e5a5c0e8e278
#: 0c2750b2ba814457a47dc0ce60740ba2
msgid "virtualenv"
msgstr ""

#: ../source/key_projects.rst:261
#: 51a458b57b834a528f78937b03982325
msgid "`Docs <https://virtualenv.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"
msgstr ""

#: ../source/key_projects.rst:266
#: 231f578bc45b422aabb42dcca59d058e
msgid "virtualenv is a tool which uses the command-line path environment variable to create isolated Python :term:`Virtual Environments <Virtual Environment>`, much as :ref:`venv` does. virtualenv provides additional functionality, compared to :ref:`venv`, by supporting Python 2.7 and by providing convenient features for configuring, maintaining, duplicating, and troubleshooting the virtual environments. For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/key_projects.rst:279
#: 285c92ff6979435f953d444ab82034b5
msgid "Warehouse"
msgstr ""

#: ../source/key_projects.rst:281
#: 1b98ce6b7d5f4ca5ab3107ec71ae9f48
msgid "`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""

#: ../source/key_projects.rst:285
#: 645dce03b8e84080a9d1f1e93d3f90e1
msgid "The current codebase powering the :term:`Python Package Index (PyPI)`. It is hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` downloads."
msgstr ""

#: ../source/key_projects.rst:293
#: 6b9f0728580a4a28b4a5bf5deb19ae68
msgid "wheel"
msgstr ""

#: ../source/key_projects.rst:295
#: 7456626e45b94da285aa05a604570c24
msgid "`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"
msgstr ""

#: ../source/key_projects.rst:300
#: e6bf7098483846f6a4dd01ad7f0fc478
msgid "Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` extension for creating :term:`wheel distributions <Wheel>`.  Additionally, it offers its own command line utility for creating and installing wheels."
msgstr ""

#: ../source/key_projects.rst:304
#: ddd798f25be444719d46c98b7f0cb59e
msgid "See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that package developers use to check and fix Python packages they are making in the binary wheel format. It provides functionality to discover dependencies, check metadata for compliance, and repair the wheel and metadata to properly link and include external shared libraries in a package."
msgstr ""

#: ../source/key_projects.rst:313
#: fac7367866bb49599a158380a8046fc7
msgid "Non-PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:318
#: d33867367e234c6aba2918416f37187b
msgid "bento"
msgstr ""

#: ../source/key_projects.rst:320
#: 7c7ce824537347ff97ca121dfbab4410
msgid "`Docs <http://cournape.github.io/Bento/>`__ | `Issues <https://github.com/cournape/Bento/issues>`__ | `GitHub <https://github.com/cournape/Bento>`__ | `PyPI <https://pypi.org/project/bento>`__"
msgstr ""

#: ../source/key_projects.rst:325
#: ffb0d28910094473a01d1599ced103b0
msgid "Bento is a packaging tool solution for Python software, targeted as an alternative to :ref:`distutils`, :ref:`setuptools`, etc....  Bento's philosophy is reproducibility, extensibility and simplicity (in that order)."
msgstr ""

#: ../source/key_projects.rst:333
#: e1b5d2c012384370b546d378ca6ec94a
msgid "buildout"
msgstr ""

#: ../source/key_projects.rst:335
#: 93efbfc30ead4978b094bd4e8a6c9c4a
msgid "`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs.launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc.buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""

#: ../source/key_projects.rst:340
#: fbc62adf578348d5b8df031e9504866d
msgid "Buildout is a Python-based build system for creating, assembling and deploying applications from multiple parts, some of which may be non-Python-based.  It lets you create a buildout configuration and reproduce the same software later."
msgstr ""

#: ../source/key_projects.rst:347
#: f4ba7947073141769652dcbd9af4787d
msgid "conda"
msgstr ""

#: ../source/key_projects.rst:349
#: fd55f424187d400ba6d1e792cf4b105e
msgid "`Docs <http://conda.pydata.org/docs/>`__"
msgstr ""

#: ../source/key_projects.rst:351
#: a73bf4089b6143949c94af13745f4a07
msgid "conda is the package management tool for `Anaconda <https://docs.anaconda.com/anaconda/>`__ Python installations. Anaconda Python is a distribution from `Anaconda, Inc <https://www.anaconda.com/download>`__ specifically aimed at the scientific community, and in particular on Windows where the installation of binary extensions is often difficult."
msgstr ""

#: ../source/key_projects.rst:358
#: b0e7763656194b09844c9a682419d8e3
msgid "Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, but provides many of their combined features in terms of package management, virtual environment management and deployment of binary extensions."
msgstr ""

#: ../source/key_projects.rst:362
#: b649e03f13484dbf821507366c3aaa5c
msgid "Conda does not install packages from PyPI and can install only from the official Anaconda repositories, or anaconda.org (a place for user-contributed *conda* packages), or a local (e.g. intranet) package server.  However, note that :ref:`pip` can be installed into, and work side-by-side with conda for managing :term:`distributions <Distribution Package>` from PyPI. Also, `conda skeleton <https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`__ is a tool to make Python packages installable by conda by first fetching them from PyPI and modifying their metadata."
msgstr ""

#: ../source/key_projects.rst:375
#: 17fa61b4d177489e89e45fdcfd2ec60b
msgid "devpi"
msgstr ""

#: ../source/key_projects.rst:377
#: 9a26a5446aee4f77819f31aebaff0b7e
msgid "`Docs <http://doc.devpi.net/latest/>`__ | `Issues <https://bitbucket.org/hpk42/devpi/issues>`__ | `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""

#: ../source/key_projects.rst:381
#: 18999a70d53d49c2a4956975367ff822
msgid "devpi features a powerful PyPI-compatible server and PyPI proxy cache with a complementary command line tool to drive packaging, testing and release activities with Python. devpi also provides a browsable and searchable web interface."
msgstr ""

#: ../source/key_projects.rst:390
#: f6d9ccfc30494d49878deca42decc888
msgid "flit"
msgstr ""

#: ../source/key_projects.rst:392
#: 6f01ed47125644cf95cec3ce8b3eaa54
msgid "`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/takluyver/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""

#: ../source/key_projects.rst:396
#: aca46f1644d74342b805ed805ff94226
msgid "Flit provides a simple way to upload pure Python packages and modules to PyPI. It focuses on `making the easy things easy <flit-rationale_>`_ for packaging. Flit can generate a configuration file to quickly set up a simple project, build source distributions and wheels, and upload them to PyPI."
msgstr ""

#: ../source/key_projects.rst:401
#: 4cc32d9570104e7c9e80a95340cbc451
msgid "Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to upload them to PyPI. Flit requires Python 3, but you can use it to distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""

#: ../source/key_projects.rst:411
#: 388eee329482457b8ce765b7fd736160
msgid "enscons"
msgstr ""

#: ../source/key_projects.rst:413
#: 6274e336eea74398b51e60594002a5c9
msgid "`Source <https://bitbucket.org/dholth/enscons/src>`__ | `Issues <https://bitbucket.org/dholth/enscons/issues>`__ | `PyPI <https://pypi.org/project/enscons>`__"
msgstr ""

#: ../source/key_projects.rst:417
#: bd4995521e5245f4a18b76f45cb22f28
msgid "Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-compatible source distributions and wheels without using distutils or setuptools, including distributions with C extensions. Enscons has a different architecture and philosophy than :ref:`distutils`. Rather than adding build features to a Python packaging system, enscons adds Python packaging to a general purpose build system. Enscons helps you to build sdists that can be automatically built by :ref:`pip`, and wheels that are independent of enscons."
msgstr ""

#: ../source/key_projects.rst:432
#: 87e81fe458dd42d1968f2c115bd92195
msgid "Hashdist"
msgstr ""

#: ../source/key_projects.rst:434
#: 44f03b70aad444788bd03469040ecbe5
msgid "`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/hashdist/hashdist/>`__"
msgstr ""

#: ../source/key_projects.rst:437
#: 1649ce4e77da4ab9a9bd7bdc95d57053
msgid "Hashdist is a library for building non-root software distributions. Hashdist is trying to be “the Debian of choice for cases where Debian technology doesn’t work”. The best way for Pythonistas to think about Hashdist may be a more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed at solving the problem of installing scientific software, and making package distribution stateless, cached, and branchable. It is used by some researchers but has been lacking in maintenance since 2016."
msgstr ""

#: ../source/key_projects.rst:449
#: 33385303596844d5902e00b6e21c89b0
msgid "hatch"
msgstr ""

#: ../source/key_projects.rst:451
#: 9ac64aa7e7cb4c3cae12d7af00eb7b83
msgid "`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""

#: ../source/key_projects.rst:454
#: de550291146b4834ac5ae7da719707f1
msgid "Hatch is a unified command-line tool meant to conveniently manage dependencies and environment isolation for Python developers. Python package developers use Hatch to configure, version, specify dependencies for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` to upload packages to PyPI, and :ref:`pip` to download and install packages."
msgstr ""

#: ../source/key_projects.rst:464
#: ae46dcc693f443f8898ab2db8d3d5533
msgid "pex"
msgstr ""

#: ../source/key_projects.rst:466
#: fd4276ce6cd743eba4f58749e9bb4b69
msgid "`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""

#: ../source/key_projects.rst:470
#: 2673daa483484001968982bc78dc714d
msgid "pex is both a library and tool for generating :file:`.pex` (Python EXecutable) files, standalone Python environments in the spirit of :ref:`virtualenv`. :file:`.pex` files are just carefully constructed zip files with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are designed to make deployment of Python applications as simple as ``cp``."
msgstr ""

#: ../source/key_projects.rst:479
#: 8d24f68093c14a708caca3fda79ffb1b
msgid "pipx"
msgstr ""

#: ../source/key_projects.rst:481
#: 97232c98bccc47d5a86e9991d1ea555f
msgid "`Docs <https://pipxproject.github.io/pipx/>`__ | `GitHub <https://github.com/pipxproject/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""

#: ../source/key_projects.rst:485
#: b7cb2b9db0204674a2f75b7d8b0f638a
msgid "pipx is a tool to safely install and run Python CLI applications globally."
msgstr ""

#: ../source/key_projects.rst:490
#: 31f7d77d00f7478ea2dbdba19436145c
msgid "pip-tools"
msgstr ""

#: ../source/key_projects.rst:492
#: 023a818ee8f24d6bb4a0b113eb304f95
msgid "`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-tools/>`__"
msgstr ""

#: ../source/key_projects.rst:495
#: 8a26104192684559b9e2eff71e7e2bd3
msgid "pip-tools is a suite of tools meant for Python system administrators and release managers who particularly want to keep their builds deterministic yet stay up to date with new versions of their dependencies. Users can specify particular release of their dependencies via hash, conveniently make a properly formatted list of requirements from information in other parts of their program, update all dependencies (a feature :ref:`pip` currently does not provide), and create layers of constraints for the program to obey."
msgstr ""

#: ../source/key_projects.rst:507
#: 343d4da00ff14f1a9b7b5198587b20dd
msgid "piwheels"
msgstr ""

#: ../source/key_projects.rst:509
#: 196918f5067044eeb057915d27a01992
msgid "`Website <https://www.piwheels.org/>`__ | `Docs <https://piwheels.readthedocs.io/>`__ | `GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""

#: ../source/key_projects.rst:513
#: a9f6c4f0f80b4b7e98f43086049b0c57
msgid "piwheels is a website, and software underpinning it, that fetches source code distribution packages from PyPI and compiles them into binary wheels that are optimized for installation onto Raspberry Pi computers. Raspberry Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""

#: ../source/key_projects.rst:522
#: d132b5814fa042a2aac7c6b24e4112f9
msgid "poetry"
msgstr ""

#: ../source/key_projects.rst:524
#: 1266d35f9a4846a8af0ed39deff8d6ca
msgid "`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""

#: ../source/key_projects.rst:528
#: 1b6ed45aebcf4c4aa6194d37f45f1686
msgid "poetry is a command-line tool to handle dependency installation and isolation as well as building and packaging of Python packages. It uses ``pyproject.toml`` and, instead of depending on the resolver functionality within :ref:`pip`, provides its own dependency resolver. It attempts to speed users' experience of installation and dependency resolution by locally caching metadata about dependencies."
msgstr ""

#: ../source/key_projects.rst:538
#: 2fef927e5c1f4319945bdad26079708e
msgid "pypiserver"
msgstr ""

#: ../source/key_projects.rst:540
#: 6c591490d9d045728eb00e57185bcda7
msgid "`Docs <https://github.com/pypiserver/pypiserver/blob/master/README.rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi.org/project/pypiserver/>`__"
msgstr ""

#: ../source/key_projects.rst:544
#: e2b9d3f770b245eaac75a36a9d7a5cb3
msgid "pypiserver is a minimalist application that serves as a private Python package index within organizations, implementing a simple API and browser interface. You can upload private packages using standard upload tools, and users can download and install them with :ref:`pip`, without publishing them publicly. Organizations who use pypiserver usually download packages both from pypiserver and from PyPI."
msgstr ""

#: ../source/key_projects.rst:554
#: 78a9cd880329483dbdd07afe2075d5f2
msgid "scikit-build"
msgstr ""

#: ../source/key_projects.rst:556
#: 6b964f92594647f0be43074d6adab258
msgid "`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/scikit-build>`__"
msgstr ""

#: ../source/key_projects.rst:560
#: 3896172830654d5da4205c5df246f21c
msgid "Scikit-build is an improved build system generator for CPython C/C++/Fortran/Cython extensions that integrates with :ref:`setuptools`, :ref:`wheel` and :ref:`pip`. It internally uses `cmake <https://pypi.org/project/cmake>`__ (available on PyPI) to provide better support for additional compilers, build systems, cross compilation, and locating dependencies and their associated build requirements. To speed up and parallelize the build of large projects, the user can install `ninja <https://pypi.org/project/ninja>`__ (also available on PyPI)."
msgstr ""

#: ../source/key_projects.rst:572
#: 0a7d8ea18de840e4b38532c3a8e9837e
msgid "shiv"
msgstr ""

#: ../source/key_projects.rst:574
#: 4e5a9f90caef4e36ba4f671563be34a8
msgid "`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""

#: ../source/key_projects.rst:578
#: dd962af7ad3d4dbf90b84f52db02da76
msgid "shiv is a command line utility for building fully self contained Python zipapps as outlined in :pep:`441`, but with all their dependencies included. Its primary goal is making distributing Python applications and command line tools fast & easy."
msgstr ""

#: ../source/key_projects.rst:588
#: 700bf25ebc674ccd9c1a7213ef3cc643
msgid "`Docs <https://spack.readthedocs.io/>`__ | `GitHub <https://github.com/llnl/spack/>`__ | `Paper <http://www.computer.org/csdl/proceedings/sc/2015/3723/00/2807623.pdf>`__ | `Slides <https://tgamblin.github.io/files/Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""

#: ../source/key_projects.rst:593
#: 71be6a1121c64f7c80023fe78c7f5d96
msgid "A flexible package manager designed to support multiple versions, configurations, platforms, and compilers.  Spack is like Homebrew, but packages are written in Python and parameterized to allow easy swapping of compilers, library versions, build options, etc. Arbitrarily many versions of packages can coexist on the same system. Spack was designed for rapidly building high performance scientific applications on clusters and supercomputers."
msgstr ""

#: ../source/key_projects.rst:601
#: 6e9718ca480f4124aef1dc561e280875
msgid "Spack is not in PyPI (yet), but it requires no installation and can be used immediately after cloning from GitHub."
msgstr ""

#: ../source/key_projects.rst:607
#: 83216c80cfb84d839f555755aa4b90e7
msgid "zest.releaser"
msgstr ""

#: ../source/key_projects.rst:609
#: 720f5fc8e53c4cb6bf232c299ddfe435
msgid "`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/zest.releaser/>`__"
msgstr ""

#: ../source/key_projects.rst:613
#: 906088c3fa2b4a09933ad7ef4e32f284
msgid "``zest.releaser`` is a Python package release tool providing an abstraction layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to automate incrementing package version numbers, updating changelogs, tagging releases in source control, and uploading new packages to PyPI."
msgstr ""

#: ../source/key_projects.rst:620
#: fd9202dc33704bbea343e307326b90aa
msgid "Standard Library Projects"
msgstr ""

#: ../source/key_projects.rst:625
#: e8fae70e7401474d9fbae95d0ea2a765
msgid "ensurepip"
msgstr ""

#: ../source/key_projects.rst:627
#: 08317c80f73d4fa384968e30227759f6
msgid "`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:630
#: 9f9cc51167c0476283244625f80dda60
msgid "A package in the Python Standard Library that provides support for bootstrapping :ref:`pip` into an existing Python installation or virtual environment.  In most cases, end users won't use this module, but rather it will be used during the build of the Python distribution."
msgstr ""

#: ../source/key_projects.rst:639
#: 14ac31f98b2741ffb842bff556ee33d5
msgid "distutils"
msgstr ""

#: ../source/key_projects.rst:641
#: dabb98bf8822482cbbb236d804c14545
msgid "`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:644
#: 8b5de2a746d64152a465f608f918e0c7
msgid "The original Python packaging system, added to the standard library in Python 2.0."
msgstr ""

#: ../source/key_projects.rst:647
#: a3f5f00f8f9041dd9a395c5ffe187917
msgid "Due to the challenges of maintaining a packaging system where feature updates are tightly coupled to language runtime updates, direct usage of :ref:`distutils` is now actively discouraged, with :ref:`Setuptools` being the preferred replacement. :ref:`Setuptools` not only provides features that plain :ref:`distutils` doesn't offer (such as dependency declarations and entry point declarations), it also provides a consistent build interface and feature set across all supported Python versions."
msgstr ""

#: ../source/key_projects.rst:660
#: e26df483efdd49fead30096aff9faf8b
msgid "venv"
msgstr ""

#: ../source/key_projects.rst:662
#: 296749ef90904efb88282934b0521c2e
msgid "`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:665
#: 8af4f9a6202f424db323f87f9f837d24
msgid "A package in the Python Standard Library (starting with Python 3.3) for creating :term:`Virtual Environments <Virtual Environment>`.  For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/news.rst:2
#: f3fa257a2e854b3fb6422e329c8c1544
msgid "News"
msgstr ""

#: ../source/news.rst:5
#: cb07921bf94f411d99de8e01c609e50b
msgid "September 2019"
msgstr ""

#: ../source/news.rst:6
#: 1db86e932b0e4426af9f36840ad04624
msgid "Added a guide about publishing dists via GitHub Actions. (:pr:`647`)"
msgstr ""

#: ../source/news.rst:9
#: 73e5a121b53e4ab5a7d27e312e88b436
msgid "August 2019"
msgstr ""

#: ../source/news.rst:10
#: b03a42b58c0c4a38b39c150b4d1a2eed
msgid "Updated to use :file:`python3 -m` when installing pipx. (:pr:`631`)"
msgstr ""

#: ../source/news.rst:13
#: f473239211f444b5b09c625a41e7fb68
msgid "July 2019"
msgstr ""

#: ../source/news.rst:14
#: 7782d024b04e44f7a2d700461edbecf4
msgid "Marked all PEP numbers with the :pep: role. (:pr:`629`)"
msgstr ""

#: ../source/news.rst:15
#: 896bdbbc028843a2af051f1c25a34b59
msgid "Upgraded Sphinx version and removed pypa.io intersphinx. (:pr:`625`)"
msgstr ""

#: ../source/news.rst:16
#: 2855f820c53746daab24591cffe9e7b8
msgid "Mentioned :file:`find_namespace_packages`. (:pr:`622`)"
msgstr ""

#: ../source/news.rst:17
#: ef2d24d29e874b0aba16ff8c57051ba1
msgid "Updated directory layout examples for consistency. (:pr:`611`)"
msgstr ""

#: ../source/news.rst:18
#: dc95b134b62748cdb9db4c2229c4de76
msgid "Updated Bandersnatch link to GitHub. (:pr:`623`)"
msgstr ""

#: ../source/news.rst:21
#: 53b24f159788469c8d6efe3479727408
msgid "June 2019"
msgstr ""

#: ../source/news.rst:22
#: ca544c9284a24467a40057b16468493e
msgid "Fixed some typos. (:pr:`620`)"
msgstr ""

#: ../source/news.rst:25
#: bf292c4878214c69a9b540686063f095
msgid "May 2019"
msgstr ""

#: ../source/news.rst:26
#: 5d92cbc896eb45e29d7d087cbd00c7d2
msgid "Added :file:`python_requires` usage to packaging tutorial. (:pr:`613`)"
msgstr ""

#: ../source/news.rst:27
#: 8e4c6be94cd646c39ba2401b0a5a60fa
msgid "Added a MANIFEST.in guide page. (:pr:`609`)"
msgstr ""

#: ../source/news.rst:30
#: 75ca10ea3aab4184aa2e0593fec8d5b2
msgid "April 2019"
msgstr ""

#: ../source/news.rst:31
#: ef2bbb95095a48e4ba4f3b87b18fdf4a
msgid "Added a mention for :file:`shiv` in the key projects section. (:pr:`608`)"
msgstr ""

#: ../source/news.rst:32
#: a150bbe80d904be8a4e838e02356cf5c
msgid "Reduced emphasis on virtualenv. (:pr:`606`)"
msgstr ""

#: ../source/news.rst:35
#: 3180ad93143d4f7792db616f8a139248
msgid "March 2019"
msgstr ""

#: ../source/news.rst:36
#: fa2496201b934611b1a591e97eb32a0b
msgid "Moved single-sourcing guide version option to Python 3. (:pr:`605`)"
msgstr ""

#: ../source/news.rst:37
#: a948a694658844c58c7cfd35da3788ff
msgid "Covered RTD details for contributing. (:pr:`600`)"
msgstr ""

#: ../source/news.rst:40
#: 0a03042261a94061b1ea23bd65f3ae8e
msgid "February 2019"
msgstr ""

#: ../source/news.rst:41
#: 6c5f7c06731a46b99f4dd0d2eb94de96
msgid "Elaborate upon the differences between the tutorial and the real packaging process. (:pr:`602`)"
msgstr ""

#: ../source/news.rst:42
#: b66354d458a344588df306350715d7b6
msgid "Added instructions to install Python CLI applications. (:pr:`594`)"
msgstr ""

#: ../source/news.rst:45
#: eb953a78a5144d3dbe4a5291543fd873
msgid "January 2019"
msgstr ""

#: ../source/news.rst:46
#: 0418726b5c3a4d1eb516b01e8d76bfa7
msgid "Added :file:`--no-deps` to the packaging tutorial. (:pr:`593`)"
msgstr ""

#: ../source/news.rst:47
#: 25911fda6f5c4a27b3ff46f3cc088dda
msgid "Updated Sphinx and Nox. (:pr:`591`)"
msgstr ""

#: ../source/news.rst:48
#: bf68de229c424efc963a1e51ed98e6a4
msgid "Referenced Twine from Python3. (:pr:`581`)"
msgstr ""

#: ../source/news.rst:51
#: 68fecb6a2b284b4da86e06251f415995
msgid "December 2018"
msgstr ""

#: ../source/news.rst:52
#: 28ad4a8e39cc4b2cab630c23c8b8d1fc
msgid "No programmers in the office!"
msgstr ""

#: ../source/news.rst:55
#: 356c44d6473947c38250b2749f0bbd91
msgid "November 2018"
msgstr ""

#: ../source/news.rst:56
#: f28bd34fddb7483b9a0fe25b0c17a07a
msgid "Removed landing page link to PyPI migration guide. (:pr:`575`)"
msgstr ""

#: ../source/news.rst:57
#: b47831bde9a140d18357052573d3fb95
msgid "Changed bumpversion to bump2version. (:pr:`572`)"
msgstr ""

#: ../source/news.rst:58
#: 9d8103032a664f8bbb80ce43aca3acb7
msgid "Added single-sourcing package version example. (:pr:`573`)"
msgstr ""

#: ../source/news.rst:59
#: ae0a4967eb5d48308866a398b4411a6a
msgid "Added a guide for creating documentation. (:pr:`568`)"
msgstr ""

#: ../source/news.rst:62
#: 3bea612d16c940f6ba4a2d4848432f80
msgid "October 2018"
msgstr ""

#: ../source/news.rst:63
#: 97effc9b1308498893fd190a0bc493e9
msgid "Updated Nox package name. (:pr:`566`)"
msgstr ""

#: ../source/news.rst:64
#: a3904cf766fc4b109ddcc55ad95a7321
msgid "Mentioned Sphinx extensions in guides. (:pr:`562`)"
msgstr ""

#: ../source/news.rst:67
#: bc880e2d96fe45b5b61496f2a5fce9c4
msgid "September 2018"
msgstr ""

#: ../source/news.rst:68
#: 77a1904c35ca4aee917e9e72b22ca215
msgid "Added a section on checking RST markup. (:pr:`554`)"
msgstr ""

#: ../source/news.rst:69
#: cbb1fe564726454592be484a653a4287
msgid "Updated user installs page. (:pr:`558`)"
msgstr ""

#: ../source/news.rst:70
#: e14b2d5e8a22493291fef97899126d7b
msgid "Updated Google BigQuery urls. (:pr:`556`)"
msgstr ""

#: ../source/news.rst:71
#: 1b5c1c09fb6b4573b548cc50a0d41232
msgid "Replaced tar command with working command. (:pr:`552`)"
msgstr ""

#: ../source/news.rst:72
#: 4340f42773ac48cb9ff3f910fbbe256a
msgid "Changed to double quotes in the pip install SomeProject==1.4. (:pr:`550`)"
msgstr ""

#: ../source/news.rst:75
#: 38e6ab0c27414312b72fc2cfec309e2a
msgid "August 2018"
msgstr ""

#: ../source/news.rst:76
#: 40d6176f71b14d47b5e680b5996630e3
msgid "Removed the recommendation to store passwords in cleartext. (:pr:`546`)"
msgstr ""

#: ../source/news.rst:77
#: 6284bcc884a04350bebab418e6e0f686
msgid "Moved the Overview to a task based lead in along with the others. (:pr:`540`)"
msgstr ""

#: ../source/news.rst:78
#: d3a9914484d44579a7a80914d9ef1cf4
msgid "Updated Python version supported by virtualenv. (:pr:`538`)"
msgstr ""

#: ../source/news.rst:79
#: 8f4f1c1f4d0b4f2db61faa53828c9ca0
msgid "Added outline/rough draft of new Overview page. (:pr:`519`)"
msgstr ""

#: ../source/news.rst:82
#: 3a8a8c3e81834467860203f80e5a2417
msgid "July 2018"
msgstr ""

#: ../source/news.rst:84
#: f6aa7c55f1ef4b1aae6612c37e362af0
msgid "Improved binary extension docs. (:pr:`531`)"
msgstr ""

#: ../source/news.rst:85
#: 39c34afe80a44e0c9f3a52cf195eb327
msgid "Added scikit-build to key projects. (:pr:`530`)"
msgstr ""

#: ../source/news.rst:88
#: c5ab0b66025747b496759c8719b8452c
msgid "June 2018"
msgstr ""

#: ../source/news.rst:90
#: 7a1e04c8320a425b94c9066680004595
msgid "Fixed categories of interop PEP for pypa.io. (:pr:`527`)"
msgstr ""

#: ../source/news.rst:91
#: ecf4daa45ae84ed28e76502f1cf759bd
msgid "Updated Markdown descriptions explanation. (:pr:`522`)"
msgstr ""

#: ../source/news.rst:94
#: 65862cb739de41388930e16cb51ee4e4
msgid "May 2018"
msgstr ""

#: ../source/news.rst:96
#: 49b118a354314467a45ccf4533a843db
msgid "Noted issues with Provides-Dist and Obsoletes-Dist. (:pr:`513`)"
msgstr ""

#: ../source/news.rst:97
#: 98fd5641544944e1a18d910dcbebe61a
msgid "Removed outdated warning about Python version mixing with Pipenv. (:pr:`501`)"
msgstr ""

#: ../source/news.rst:98
#: 25d29741ef844e139705a1d30ab9051b
msgid "Simplified packaging tutorial. (:pr:`498`)"
msgstr ""

#: ../source/news.rst:99
#: 1002bee7ba41453a842da01acae852e1
msgid "Updated Windows users instructions for clarity. (:pr:`493`)"
msgstr ""

#: ../source/news.rst:100
#: 249622d28edd4ec7b884aa175f8d1c15
msgid "Updated the license section description for completeness. (:pr:`492`)"
msgstr ""

#: ../source/news.rst:101
#: fc9a717a54814c96a2f4743acdeb6b0c
msgid "Added specification-style document to contributing section. (:pr:`489`)"
msgstr ""

#: ../source/news.rst:102
#: bea09749735d42bb9c70aeb639fa5b5e
msgid "Added documentation types to contributing guide. (:pr:`485`)"
msgstr ""

#: ../source/news.rst:105
#: 7e8ed9d22c3a438a912c9bb7a925208e
msgid "April 2018"
msgstr ""

#: ../source/news.rst:107
#: 1fb0c467416c4634912bc671c7353832
msgid "Added README guide. (:pr:`461`)"
msgstr ""

#: ../source/news.rst:108
#: 2b822f05644b4f148ea15f4d5b4bd72a
msgid "Updated instructions and status for PyPI launch. (:pr:`475`)"
msgstr ""

#: ../source/news.rst:109
#: bd925108ed3244c8bb200b6a24d4a522
msgid "Added instructions for Warehouse. (:pr:`471`)"
msgstr ""

#: ../source/news.rst:110
#: 1a8904c0a5594ce7b4149541334a758a
msgid "Removed GPG references from publishing tutorial. (:pr:`466`)"
msgstr ""

#: ../source/news.rst:111
#: 34fb16c6e63245b9bd802bd466f5127b
msgid "Added 'What’s in which Python 3.4–3.6?'. (:pr:`468`)"
msgstr ""

#: ../source/news.rst:112
#: e85637082edf4e8cb5c7a0b29c4ef818
msgid "Added a guide for phasing out Python versions. (:pr:`459`)"
msgstr ""

#: ../source/news.rst:113
#: 77839c3968f34e5eb11270ed1e0275d4
msgid "Made default Description-Content-Type variant GFM. (:pr:`462`)"
msgstr ""

#: ../source/news.rst:116
#: 9d836afbd8de4b25ba109e95f6d32542
msgid "March 2018"
msgstr ""

#: ../source/news.rst:118
#: a30166ecc54d48329714a5e03ab94165
msgid "Updated \"installing scientific packages\". (:pr:`455`)"
msgstr ""

#: ../source/news.rst:119
#: ddd683cda4364b4d8ab92320dce4c38a
msgid "Added :file:`long_description_content_type` to follow PEP 556. (:pr:`457`)"
msgstr ""

#: ../source/news.rst:120
#: 63a2d0a00e2c464cb043667ef677b4a5
msgid "Clarified a long description classifier on pypi.org. (:pr:`456`)"
msgstr ""

#: ../source/news.rst:121
#: c96f0e92d8414e658cc4a195683ff976
msgid "Updated Core Metadata spec to follw PEP 556. (:pr:`412`)"
msgstr ""

#: ../source/news.rst:124
#: 50a7a9254ec24ba08d5b704331e48984
msgid "February 2018"
msgstr ""

#: ../source/news.rst:126
#: 12b063b9630b49619bc7a3d436ba5b11
msgid "Added python3-venv and python3-pip to Debian installation instructions. (:pr:`445`)"
msgstr ""

#: ../source/news.rst:127
#: a5f89647e60d45179ce1d760cccd72d9
msgid "Updated PyPI migration info. (:pr:`439`)"
msgstr ""

#: ../source/news.rst:128
#: 85966388e01f414c8b98ced6f5be95b2
msgid "Added a warning about managing multiple versions with pipenv. (:pr:`430`)"
msgstr ""

#: ../source/news.rst:129
#: c23c34e7a599401aaf6e2f44af0d10e5
msgid "Added example of multiple emails to Core Metadata. (:pr:`429`)"
msgstr ""

#: ../source/news.rst:130
#: eb38ef8f0fcb4aef9a48cead620d52b3
msgid "Added explanation of \"legacy\" in test.pypi.org/legacy. (:pr:`426`)"
msgstr ""

#: ../source/news.rst:133
#: 4966fc2d8a964279812ac587d13321d5
msgid "January 2018"
msgstr ""

#: ../source/news.rst:135
#: 24d4bcc5325141a188483df7ac7f299b
msgid "Added a link to PyPI's list of classifiers. (:pr:`425`)"
msgstr ""

#: ../source/news.rst:136
#: 13ef0f1a478349d49b35039c66f41c60
msgid "Updated README.rst explanation. (:pr:`419`)"
msgstr ""

#: ../source/news.rst:139
#: 0b3bb39c1fa745d99c565218662ca37a
msgid "December 2017"
msgstr ""

#: ../source/news.rst:141
#: 52b300e1986540aa9925c350f08b88ec
msgid "Replaced :file:`~` with :file:`$HOME` in guides and tutorials.  (:pr:`418`)"
msgstr ""

#: ../source/news.rst:142
#: 48c271bd8c294cfb84e8d62ea00501c7
msgid "Noted which fields can be used with environment markers. (:pr:`416`)"
msgstr ""

#: ../source/news.rst:143
#: 8c2118fab8a14790a785aaf8d8f5dbef
msgid "Updated Requires-Python section. (:pr:`414`)"
msgstr ""

#: ../source/news.rst:144
#: c2ae07874434486c80a53dafc4630a49
msgid "Added news page. (:pr:`404`)"
msgstr ""

#: ../source/news.rst:147
#: ed3ddaa7c9e64e62b647115d3a73059b
msgid "November 2017"
msgstr ""

#: ../source/news.rst:149
#: 86a1739b8f6d4d529f5d4175c3322b8c
msgid "Introduced a new dependency management tutorial based on Pipenv. (:pr:`402`)"
msgstr ""

#: ../source/news.rst:150
#: c5b7c4af439f479fa9f4070ce93f4c27
msgid "Updated the *Single Sourcing Package Version* tutorial to reflect pip's current strategy. (:pr:`400`)"
msgstr ""

#: ../source/news.rst:152
#: 28593a828c014a8a960294a3b9cc8a1d
msgid "Added documentation about the ``py_modules`` argument to ``setup``. (:pr:`398`)"
msgstr ""

#: ../source/news.rst:153
#: c50f2c1fa1174cb380a1ddeefa8a5c2d
msgid "Simplified the wording for the :file:`manifest.in` section. (:pr:`395`)"
msgstr ""

#: ../source/news.rst:156
#: 76c762d387534cc5bd053a0d95a1e93c
msgid "October 2017"
msgstr ""

#: ../source/news.rst:158
#: b443af3824054e7bb04e9a97bb255e47
msgid "Added a specification for the :file:`entry_points.txt` file. (:pr:`398`)"
msgstr ""

#: ../source/news.rst:159
#: a8b42108a7f2454abafcc9400628bf57
msgid "Created a new guide for managing packages using ``pip`` and ``virtualenv``. (:pr:`385`)"
msgstr ""

#: ../source/news.rst:160
#: 38292e89b31940079bc60b5bdc08a7a3
msgid "Split the specifications page into multiple pages. (:pr:`386`)"
msgstr ""

#: ../source/news.rst:163
#: acbb8760bbbb42879d240d73ad9a0ff4
msgid "September 2017"
msgstr ""

#: ../source/news.rst:165
#: 37c82a521bb4466ea9bb7f3d673e4bb4
msgid "Encouraged using ``readme_renderer`` to validate :file:`README.rst`. (:pr:`379`)"
msgstr ""

#: ../source/news.rst:167
#: 3a8450c9bdcf43fea70b458f68456c48
msgid "Recommended using the ``--user-base`` option. (:pr:`374`)"
msgstr ""

#: ../source/news.rst:170
#: fca91fc0c328462ea04b667da709e5da
msgid "August 2017"
msgstr ""

#: ../source/news.rst:172
#: 14bbbccb131f43e884c2d4d908fffb1e
msgid "Added a new, experimental tutorial on installing packages using ``Pipenv``. (:pr:`369`)"
msgstr ""

#: ../source/news.rst:173
#: 022792923c6c4cd5ba06ad19718e5810
msgid "Added a new guide on how to use ``TestPyPI``. (:pr:`366`)"
msgstr ""

#: ../source/news.rst:174
#: a7724c26ae8b4e01b234e201fa5edffc
msgid "Added :file:`pypi.org` as a term. (:pr:`365`)"
msgstr ""

#: ../source/news.rst:177
#: 558d241b0d254d5c852f1a15fce385ed
msgid "July 2017"
msgstr ""

#: ../source/news.rst:179
#: 7c328008d47841d6bbbe460bbdfa5ba1
msgid "Added ``flit`` to the key projects list. (:pr:`358`)"
msgstr ""

#: ../source/news.rst:180
#: a916721a42ac456090b73107deab8c94
msgid "Added ``enscons`` to the list of key projects. (:pr:`357`)"
msgstr ""

#: ../source/news.rst:181
#: 7b269db8720b40cbbaad3a9d092f652b
msgid "Updated this guide's ``readme`` with instructions on how to build the guide locally. (:pr:`356`)"
msgstr ""

#: ../source/news.rst:182
#: 47658c5b84df437d86cbc13bfe3293ed
msgid "Made the new ``TestPyPI`` URL more visible, adding note to homepage about pypi.org. (:pr:`354`)"
msgstr ""

#: ../source/news.rst:183
#: 0c34758365ac4c4daf5711ba82220cbf
msgid "Added a note about the removal of the explicit registration API. (:pr:`347`)"
msgstr ""

#: ../source/news.rst:186
#: d890b9562eb34536b113eadeb3972b20
msgid "June 2017"
msgstr ""

#: ../source/news.rst:188
#: cc542ae62d824fa394f4ff2b0af915aa
msgid "Added a document on migrating uploads to :file:`PyPI.org`. (:pr:`339`)"
msgstr ""

#: ../source/news.rst:189
#: 4dd0f93ef9004f9d9bf801aa56937bfc
msgid "Added documentation for ``python_requires``. (:pr:`338`)"
msgstr ""

#: ../source/news.rst:190
#: 04bfde46990046c6a16eabb312e573f1
msgid "Added a note about PyPI migration in the *Tool Recommendations* tutorial. (:pr:`335`)"
msgstr ""

#: ../source/news.rst:191
#: dd812905cd954f7cb7e589fe0e69d1a3
msgid "Added a note that :file:`manifest.in` does not affect wheels. (:pr:`332`)"
msgstr ""

#: ../source/news.rst:192
#: 699d3132ca8f4396b785b5ce6dcc191c
msgid "Added a license section to the distributing guide. (:pr:`331`)"
msgstr ""

#: ../source/news.rst:193
#: 7176729c07c4431b9be95ba84f5079ee
msgid "Expanded the section on the ``name`` argument. (:pr:`329`)"
msgstr ""

#: ../source/news.rst:194
#: 62c8ad543e9f4d3bacfd8a661e7d5543
msgid "Adjusted the landing page. (:pr:`327`, :pr:`326`, :pr:`324`)"
msgstr ""

#: ../source/news.rst:195
#: ae25d3df5ccf46dd8fe53b2cfe8b14ab
msgid "Updated to Sphinx 1.6.2. (:pr:`323`)"
msgstr ""

#: ../source/news.rst:196
#: 67baa1f28482472c8eb4744f4c6675e9
msgid "Switched to the PyPA theme. (:pr:`305`)"
msgstr ""

#: ../source/news.rst:197
#: 899fbd65ec6a4dbbbc59d25c6e7df58f
msgid "Re-organized the documentation into the new structure. (:pr:`318`)"
msgstr ""

#: ../source/news.rst:200
#: 27a25a25351b4299b35b9ee73abbcce1
msgid "May 2017"
msgstr ""

#: ../source/news.rst:202
#: a677bc2c8a8d46a78a3d6da5b2c89037
msgid "Added documentation for the ``Description-Content-Type`` field. (:pr:`258`)"
msgstr ""

#: ../source/news.rst:203
#: cfde990e085b422a981ce48b3427c12b
msgid "Added contributor and style guide. (:pr:`307`)"
msgstr ""

#: ../source/news.rst:204
#: b9d68b851e14473e8e6e730bb00ca8d3
msgid "Documented ``pip`` and ``easy_install``'s differences for per-project indexes. (:pr:`233`)"
msgstr ""

#: ../source/news.rst:207
#: 15cb44a087aa47dda36257fa318d6cc2
msgid "April 2017"
msgstr ""

#: ../source/news.rst:209
#: a1dab3bd8efc44dc8ad27e2d95f5708f
msgid "Added travis configuration for testing pull requests. (:pr:`300`)"
msgstr ""

#: ../source/news.rst:210
#: ffbfe9487615462c9c76ab11c21df7bd
msgid "Mentioned the requirement of the ``wheel`` package for creating wheels (:pr:`299`)"
msgstr ""

#: ../source/news.rst:211
#: e768f65da27142ae9efcc7b5ad9d677a
msgid "Removed the ``twine register`` reference in the *Distributing Packages* tutorial. (:pr:`271`)"
msgstr ""

#: ../source/news.rst:212
#: 0d11a182115f4ae3b15e4fa52c49bf38
msgid "Added a topic on plugin discovery. (:pr:`294`, :pr:`296`)"
msgstr ""

#: ../source/news.rst:213
#: c0673a90898b448ab92f831e92abe993
msgid "Added a topic on namespace packages. (:pr:`290`)"
msgstr ""

#: ../source/news.rst:214
#: d0e3c157c417437f87ae53de8a75c3b7
msgid "Added documentation explaining prominently how to install ``pip`` in ``/usr/local``. (:pr:`230`)"
msgstr ""

#: ../source/news.rst:215
#: eec94d64ba164dfaabc70be96d4bb601
msgid "Updated development mode documentation to mention that order of local packages matters. (:pr:`208`)"
msgstr ""

#: ../source/news.rst:216
#: 96083ed231ee47458038d14f076cc75c
msgid "Convert readthedocs link for their ``.org`` -> ``.io`` migration for hosted projects (:pr:`239`)"
msgstr ""

#: ../source/news.rst:217
#: e3e0182ff38c4e308111c0bc8149c14d
msgid "Swaped order of :file:`setup.py` arguments for the upload command, as order is significant. (:pr:`260`)"
msgstr ""

#: ../source/news.rst:219
#: 3c989b989fb4439ca0d5e9a429b6a5a2
msgid "Explained how to install from unsupported sources using a helper application. (:pr:`289`)"
msgstr ""

#: ../source/news.rst:223
#: 0a202f8e6c02473095ec4c3ba68fcdc3
msgid "March 2017"
msgstr ""

#: ../source/news.rst:225
#: fd8262fd08024754a69dedd567e1ccfc
msgid "Covered ``manylinux1`` in *Platform Wheels*. (:pr:`283`)"
msgstr ""

#: ../source/news.rst:228
#: 84d3675f873344459a749b3f54d98d48
msgid "February 2017"
msgstr ""

#: ../source/news.rst:230
#: 500c0a7d039345098e578bfc9703b09b
msgid "Added :pep:`518`. (:pr:`281`)"
msgstr ""

#: ../source/overview.rst:3
#: 301c0cbb0ba74cd8a947b9eb49384ebb
msgid "An Overview of Packaging for Python"
msgstr ""

#: ../source/overview.rst:7
#: 6f5c07dad1a84daab25b406820650ca1
msgid "As a general-purpose programming language, Python is designed to be used in many ways. You can build web sites or industrial robots or a game for your friends to play, and much more, all using the same core technology."
msgstr ""

#: ../source/overview.rst:12
#: dc7a0f8cda6d4b08a5b5a0b82a35c35b
msgid "Python's flexibility is why the first step in every Python project must be to think about the project's audience and the corresponding environment where the project will run. It might seem strange to think about packaging before writing code, but this process does wonders for avoiding future headaches."
msgstr ""

#: ../source/overview.rst:18
#: d943ed8b61b4442c8da00ce251babe86
msgid "This overview provides a general-purpose decision tree for reasoning about Python's plethora of packaging options. Read on to choose the best technology for your next project."
msgstr ""

#: ../source/overview.rst:26
#: 407cda02439041ab94326c79d9c13076
msgid "Thinking about deployment"
msgstr ""

#: ../source/overview.rst:28
#: f164a41784184266bb1814ec03193c98
msgid "Packages exist to be installed (or *deployed*), so before you package anything, you'll want to have some answers to the deployment questions below:"
msgstr ""

#: ../source/overview.rst:32
#: 09e8ccc88e804e7fbbe5d2fb65a938fa
msgid "Who are your software's users? Will your software be installed by other developers doing software development, operations people in a datacenter, or a less software-savvy group?"
msgstr ""

#: ../source/overview.rst:35
#: a7caaf22533a4345bb0e3faf12eef031
msgid "Is your software intended to run on servers, desktops, mobile clients (phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""

#: ../source/overview.rst:37
#: 185cf85f66cc45b38bcdf05a51c2d79d
msgid "Is your software installed individually, or in large deployment batches?"
msgstr ""

#: ../source/overview.rst:39
#: 0078157d7afe4ad284e9246e306a3f4a
msgid "Packaging is all about target environment and deployment experience. There are many answers to the questions above and each combination of circumstances has its own solutions. With this information, the following overview will guide you to the packaging technologies best suited to your project."
msgstr ""

#: ../source/overview.rst:46
#: 8a0a612f4e1e4abca5eedb1f752afdf4
msgid "Packaging Python libraries and tools"
msgstr ""

#: ../source/overview.rst:48
#: e7dabebe81ed4a8abb5dfa6606a46f6f
msgid "You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are just a few of the tools Python's ecosystem provides for distributing Python code to developers, which you can read about in :doc:`guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/overview.rst:53
#: 5c0899ac2eb6478f98a127aa9988f170
msgid "The following approaches to packaging are meant for libraries and tools used by technical audience in a development setting. If you're looking for ways to package Python for a non-technical audience and/or a production setting, skip ahead to :ref:`packaging-applications`."
msgstr ""

#: ../source/overview.rst:59
#: a52226b20d9d48fa9ea9018b26ffa08a
msgid "Python modules"
msgstr ""

#: ../source/overview.rst:61
#: 54470d61194d497c9230b67aaa1a6683
msgid "A Python file, provided it only relies on the standard library, can be redistributed and reused. You will also need to ensure it's written for the right version of Python, and only relies on the standard library."
msgstr ""

#: ../source/overview.rst:66
#: ca7d8af9b87c4d54bfad8dca963166e4
msgid "This is great for sharing simple scripts and snippets between people who both have compatible Python versions (such as via email, StackOverflow, or GitHub gists). There are even some entire Python libraries that offer this as an option, such as `bottle.py <https://bottlepy.org/docs/dev/>`_ and `boltons <http://boltons.readthedocs.io/en/latest/architecture.html#architecture>`_."
msgstr ""

#: ../source/overview.rst:73
#: 26aeff8e19934e21b1be0e3809f0bf9b
msgid "However, this pattern won't scale for projects that consist of multiple files, need additional libraries, or need a specific version of Python, hence the options below."
msgstr ""

#: ../source/overview.rst:78
#: 183ab68ffb1b46679510d8d072396d5a
msgid "Python source distributions"
msgstr ""

#: ../source/overview.rst:80
#: 0e61fb0d1d75431f860cb72feeb97f3d
msgid "If your code consists of multiple Python files, it's usually organized into a directory structure. Any directory containing Python files can comprise an :term:`Import Package`."
msgstr ""

#: ../source/overview.rst:84
#: a25c2aecd1b04a64b18be2a7625e53dc
msgid "Because packages consist of multiple files, they are harder to distribute. Most protocols support transferring only one file at a time (when was the last time you clicked a link and it downloaded multiple files?). It's easier to get incomplete transfers, and harder to guarantee code integrity at the destination."
msgstr ""

#: ../source/overview.rst:90
#: 22a2740034604cf7a029239eba750e24
msgid "So long as your code contains nothing but pure Python code, and you know your deployment environment supports your version of Python, then you can use Python's native packaging tools to create a *source* :term:`Distribution Package`, or *sdist* for short."
msgstr ""

#: ../source/overview.rst:95
#: 3354c6ac62d44cc683552caea9aed706
msgid "Python's *sdists* are compressed archives (``.tar.gz`` files) containing one or more packages or modules. If your code is pure-Python, and you only depend on other Python packages, you can `go here to learn more <https://docs.python.org/3/distutils/sourcedist.html>`_."
msgstr ""

#: ../source/overview.rst:100
#: b67a05df396c40569c80d66718ca0936
msgid "If you rely on any non-Python code, or non-Python packages (such as `libxml2 <https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi.org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi.org/project/numpy>`_), you will need to use the format detailed in the next section, which also has many advantages for pure-Python libraries."
msgstr ""

#: ../source/overview.rst:107
#: 63ed01993f004cfa86f3f371f281f9b0
msgid "Python and PyPI support multiple distributions providing different implementations of the same package. For instance the unmaintained-but-seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an actively-maintained fork of PIL!"
msgstr ""

#: ../source/overview.rst:114
#: 20da61a5b8d04f6892cfb8158db7b6ca
msgid "This Python packaging superpower makes it possible for Pillow to be a drop-in replacement for PIL, just by changing your project's ``install_requires`` or ``requirements.txt``."
msgstr ""

#: ../source/overview.rst:119
#: 4bd1491b4e4e480fb012096312700f9f
msgid "Python binary distributions"
msgstr ""

#: ../source/overview.rst:121
#: d3ba6367519946faba12cdeb05c6ee62
msgid "So much of Python's practical power comes from its ability to integrate with the software ecosystem, in particular libraries written in C, C++, Fortran, Rust, and other languages."
msgstr ""

#: ../source/overview.rst:125
#: d5c4dd5edc414b708fa12278da653e12
msgid "Not all developers have the right tools or experiences to build these components written in these compiled languages, so Python created the :term:`Wheel`, a package format designed to ship libraries with compiled artifacts. In fact, Python's package installer, ``pip``, always prefers wheels because installation is always faster, so even pure-Python packages work better with wheels."
msgstr ""

#: ../source/overview.rst:132
#: 357277b780384996af92f6a1e6a7a77c
msgid "Binary distributions are best when they come with source distributions to match. Even if you don't upload wheels of your code for every operating system, by uploading the sdist, you're enabling users of other platforms to still build it for themselves. Default to publishing both sdist and wheel archives together, *unless* you're creating artifacts for a very specific use case where you know the recipient only needs one or the other."
msgstr ""

#: ../source/overview.rst:140
#: 9924cb09356844639ec2f14a69bf13bc
msgid "Python and PyPI make it easy to upload both wheels and sdists together. Just follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""

#: ../source/overview.rst:148
#: ef41a9586ba445d28092752ca0dd7033
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr ""

#: ../source/overview.rst:148
#: 81f0fab96d8740329b7c249c294e8baf
msgid "Python's recommended built-in library and tool packaging technologies. Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?v=iLVNWfPWAC8>`_."
msgstr ""

#: ../source/overview.rst:155
#: edbfc0fd8e514eadb577520333c5947d
msgid "Packaging Python applications"
msgstr ""

#: ../source/overview.rst:157
#: af98d7e1d6004589a5032d70c3b53a6f
msgid "So far we've only discussed Python's native distribution tools. Based on our introduction, you would be correct to infer these built-in approaches only target environments which have Python, and an audience who knows how to install Python packages."
msgstr ""

#: ../source/overview.rst:162
#: 0b08719504644a7fab3b37e924e18540
msgid "With the variety of operating systems, configurations, and people out there, this assumption is only safe when targeting a developer audience."
msgstr ""

#: ../source/overview.rst:166
#: ad775ab81dee407eb026242411da7cbe
msgid "Python's native packaging is mostly built for distributing reusable code, called libraries, between developers. You can piggyback **tools**, or basic applications for developers, on top of Python's library packaging, using technologies like `setuptools entry_points <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html>`_."
msgstr ""

#: ../source/overview.rst:172
#: 0965958727cc4f549a13d7d8f2cd2855
msgid "Libraries are building blocks, not complete applications. For distributing applications, there's a whole new world of technologies out there."
msgstr ""

#: ../source/overview.rst:176
#: a31a6941dbdc4fccb05d0aa7c41006a6
msgid "The next few sections organize these application packaging options according to their dependencies on the target environment, so you can choose the right one for your project."
msgstr ""

#: ../source/overview.rst:181
#: e40a8329a3f44946921b7ce8b61066af
msgid "Depending on a framework"
msgstr ""

#: ../source/overview.rst:183
#: 82ff3d776bf44370b76abef7c8bdfaa6
msgid "Some types of Python applications, like web site backends and other network services, are common enough that they have frameworks to enable their development and packaging. Other types of applications, like dynamic web frontends and mobile clients, are complex enough to target that a framework becomes more than a convenience."
msgstr ""

#: ../source/overview.rst:189
#: 26f6547bf72e4e8989504524e1d6312c
msgid "In all these cases, it makes sense to work backwards, from the framework's packaging and deployment story. Some frameworks include a deployment system which wraps the technologies outlined in the rest of the guide. In these cases, you'll want to defer to your framework's packaging guide for the easiest and most reliable production experience."
msgstr ""

#: ../source/overview.rst:195
#: 996add99c6544ac5af6ea129c6824304
msgid "If you ever wonder how these platforms and frameworks work under the hood, you can always read the sections beyond."
msgstr ""

#: ../source/overview.rst:199
#: b2901bf7275d4ad9a10b65869aa3583a
msgid "Service platforms"
msgstr ""

#: ../source/overview.rst:201
#: 6ad93197523e48e88b5043000984f439
msgid "If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like Heroku or Google App Engine, you are going to want to follow their respective packaging guides."
msgstr ""

#: ../source/overview.rst:205
#: 3c8c21b2468d4c84bd8692b14ba6eb3f
msgid "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_"
msgstr ""

#: ../source/overview.rst:206
#: 08377cfadde141ea8f68f3aa64c074ee
msgid "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
msgstr ""

#: ../source/overview.rst:207
#: 9dabfce915c04fa1bdc3982b0091d9d6
msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
msgstr ""

#: ../source/overview.rst:208
#: e40e6cf18a2d408b9a38ab81b07cb52e
msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
msgstr ""

#: ../source/overview.rst:209
#: 2c173da0a8cd4cfdbb724ea5b215e30d
msgid "\"Serverless\" frameworks like `Zappa <https://www.zappa.io/>`_"
msgstr ""

#: ../source/overview.rst:211
#: b00ac470a5354525b4416e25375df53f
msgid "In all these setups, the platform takes care of packaging and deployment, as long as you follow their patterns. Most software does not fit one of these templates, hence the existence of all the other options below."
msgstr ""

#: ../source/overview.rst:216
#: 42ef42be5bff486fac982e50d8ce38d6
msgid "If you're developing software that will be deployed to machines you own, users' personal computers, or any other arrangement, read on."
msgstr ""

#: ../source/overview.rst:220
#: 288e941c4a8a405da2e48cae7232a5c1
msgid "Web browsers and mobile applications"
msgstr ""

#: ../source/overview.rst:222
#: 64e62b73bda14499b51008875d70f407
msgid "Python's steady advances are leading it into new spaces. These days you can write a mobile app or web application frontend in Python. While the language may be familiar, the packaging and deployment practices are brand new."
msgstr ""

#: ../source/overview.rst:227
#: 1199b18a6e8d413d9d82b8be79642509
msgid "If you're planning on releasing to these new frontiers, you'll want to check out the following frameworks, and refer to their packaging guides:"
msgstr ""

#: ../source/overview.rst:231
#: 0ebfc01cbccd4c7fbf5564686c34f563
msgid "`Kivy <https://kivy.org/#home>`_"
msgstr ""

#: ../source/overview.rst:232
#: 7fc33165913c4f8b8c2bc93ef5c30f8f
msgid "`Beeware <https://pybee.org/>`_"
msgstr ""

#: ../source/overview.rst:233
#: a841f14133bb403ba466761cabfddbcf
msgid "`Brython <https://brython.info/>`_"
msgstr ""

#: ../source/overview.rst:234
#: e28afda574fa48598512dabf1ce02eef
msgid "`Flexx <http://flexx.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../source/overview.rst:236
#: edd5cb002e25426a83d37375efadebab
msgid "If you are *not* interested in using a framework or platform, or just wonder about some of the technologies and techniques utilized by the frameworks above, continue reading below."
msgstr ""

#: ../source/overview.rst:241
#: 5f0b4ab279b14d44bdc8ea76cd1a035e
msgid "Depending on a pre-installed Python"
msgstr ""

#: ../source/overview.rst:243
#: d2e0d53c1732436e836109cd5d81021d
msgid "Pick an arbitrary computer, and depending on the context, there's a very good chance Python is already installed. Included by default in most Linux and Mac operating systems for many years now, you can reasonably depend on Python preexisting in your data centers or on the personal machines of developers and data scientists."
msgstr ""

#: ../source/overview.rst:249
#: 2f0051e4e2d649a98cbbf5e48ee0d04f
msgid "Technologies which support this model:"
msgstr ""

#: ../source/overview.rst:251
#: 98ca9925aad24690841abd36074e2831
msgid "`PEX <https://github.com/pantsbuild/pex#pex>`_ (Python EXecutable)"
msgstr ""

#: ../source/overview.rst:252
#: 0c549f7ee1934dbd8022e12f595705e5
msgid "`zipapp <https://docs.python.org/3/library/zipapp.html>`_ (does not help manage dependencies, requires Python 3.5+)"
msgstr ""

#: ../source/overview.rst:253
#: a9e57a9496db4ba9a5cd04c6f45ba6a1
msgid "`shiv <https://github.com/linkedin/shiv#shiv>`_ (requires Python 3)"
msgstr ""

#: ../source/overview.rst:255
#: a4d702b15e474f57bc35243beef6dbcb
msgid "Of all the approaches here, depending on a pre-installed Python relies the most on the target environment. Of course, this also makes for the smallest package, as small as single-digit megabytes, or even kilobytes."
msgstr ""

#: ../source/overview.rst:260
#: 6e194f68a2b240428bc21684870b7fb3
msgid "In general, decreasing the dependency on the target system increases the size of our package, so the solutions here are roughly arranged by increasing size of output."
msgstr ""

#: ../source/overview.rst:267
#: a8e1fa315f5b42988e3e23a6c15fb525
msgid "Depending on a separate software distribution ecosystem"
msgstr ""

#: ../source/overview.rst:269
#: e12915bf0207496aa9c26a87f18238cb
msgid "For a long time many operating systems, including Mac and Windows, lacked built-in package management. Only recently did these OSes gain so-called \"app stores\", but even those focus on consumer applications and offer little for developers."
msgstr ""

#: ../source/overview.rst:274
#: fdeeee54346c42459e13918a9d7759dc
msgid "Developers long sought remedies, and in this struggle, emerged with their own package management solutions, such as `Homebrew <https://brew.sh/>`_. The most relevant alternative for Python developers is a package ecosystem called `Anaconda <https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is increasingly common in academic, analytical, and other data-oriented environments, even making its way `into server-oriented environments <https://www.paypal-engineering.com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""

#: ../source/overview.rst:284
#: 1b02edcbab4d4038a7259aaf8353d426
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr ""

#: ../source/overview.rst:286
#: 86024d8ca85e4a458ff2283534fa06eb
msgid "`Building libraries and applications with conda <https://conda.io/docs/user-guide/tutorials/index.html>`_"
msgstr ""

#: ../source/overview.rst:287
#: 0d1a2422ceb94caa8c63257b54753fa1
msgid "`Transitioning a native Python package to Anaconda <https://conda.io/docs/user-guide/tutorials/build-pkgs-skeleton.html>`_"
msgstr ""

#: ../source/overview.rst:289
#: 55d0983b62294cdabc9aa263e70d55e1
msgid "A similar model involves installing an alternative Python distribution, but does not support arbitrary operating system-level packages:"
msgstr ""

#: ../source/overview.rst:293
#: 609860dee9054256b610b9ae5f23c0d1
msgid "`Enthought Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../source/overview.rst:294
#: 9d262fd15ad24b6e8e51006a38fe5ceb
msgid "`ActiveState ActivePython <https://www.activestate.com/activepython>`_"
msgstr ""

#: ../source/overview.rst:295
#: fab4614e9cef4a89b739e11d49593681
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr ""

#: ../source/overview.rst:300
#: 813e54339cd248aa9e28b480d9ac6e0d
msgid "Bringing your own Python executable"
msgstr ""

#: ../source/overview.rst:302
#: 0ca664f9cefc4d459f73d74c6c746d7e
msgid "Computing as we know it is defined by the ability to execute programs. Every operating system natively supports one or more formats of program they can natively execute."
msgstr ""

#: ../source/overview.rst:306
#: fcbada92376d4fd685e57e2658b03ba1
msgid "There are many techniques and technologies which turn your Python program into one of these formats, most of which involve embedding the Python interpreter and any other dependencies into a single executable file."
msgstr ""

#: ../source/overview.rst:311
#: a8e4322561974e9d892f256e85941553
msgid "This approach, called *freezing*, offers wide compatibility and seamless user experience, though often requires multiple technologies, and a good amount of effort."
msgstr ""

#: ../source/overview.rst:315
#: 5507cc2e113842b6b0db4bf3c8d92f48
msgid "A selection of Python freezers:"
msgstr ""

#: ../source/overview.rst:317
#: aeecc16c68354f128519f85416fb4426
msgid "`pyInstaller <http://www.pyinstaller.org/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:318
#: 369452acfe1c4cf2af1e933883a96490
msgid "`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:319
#: cc35021382a84b05bd584c452b37b69f
msgid "`constructor <https://github.com/conda/constructor>`_ - For command-line installers"
msgstr ""

#: ../source/overview.rst:320
#: a6c13c25cb12442a90ada05eef6d6e29
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:321
#: 0daf9b6aadae4738987f38615ec26685
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr ""

#: ../source/overview.rst:322
#: 9043b9081d7744718914947610fed104
msgid "`bbFreeze <https://pypi.org/project/bbfreeze>`_ - Windows, Linux, Python 2 only"
msgstr ""

#: ../source/overview.rst:323
#: 6925c8c4994d4506a3d509ba852f6ed8
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr ""

#: ../source/overview.rst:324
#: f606ab83285146cba882a24af1ea01f5
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:326
#: 9128e5e32a8048cba09920092dbbf6d0
msgid "Most of the above imply single-user deployments. For multi-component server applications, see `Chef Omnibus <https://github.com/chef/omnibus#-omnibus>`_."
msgstr ""

#: ../source/overview.rst:332
#: 899a1bcd2e5f49d59cb44f58e3edc7d9
msgid "Bringing your own userspace"
msgstr ""

#: ../source/overview.rst:334
#: 8c7cd15f838c4ea590dc85c86b0cdb50
msgid "An increasing number of operating systems -- including Linux, Mac OS, and Windows -- can be set up to run applications packaged as lightweight images, using a relatively modern arrangement often referred to as `operating-system-level virtualization <https://en.wikipedia.org/wiki/Operating-system-level_virtualization>`_, or *containerization*."
msgstr ""

#: ../source/overview.rst:341
#: 8377a73c76c54237a608a8343bf2d6e5
msgid "These techniques are mostly Python agnostic, because they package whole OS filesystems, not just Python or Python packages."
msgstr ""

#: ../source/overview.rst:344
#: 467e3919526d4cccb5d38f66f72daca9
msgid "Adoption is most extensive among Linux servers, where the technology originated and where the technologies below work best:"
msgstr ""

#: ../source/overview.rst:347
#: 78887d9e0f3f418b9ee62f62ac6a3069
msgid "`AppImage <https://appimage.org/>`_"
msgstr ""

#: ../source/overview.rst:348
#: 95b3ab3bddaf46de8b4cf69755952268
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr ""

#: ../source/overview.rst:349
#: c15afa0f9ae74eb0b884a9b7d4f9df2d
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr ""

#: ../source/overview.rst:350
#: 0f47cad850e94331bdd3f0935b5ab39d
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr ""

#: ../source/overview.rst:353
#: a724b63e53464203afffac80e0cf063b
msgid "Bringing your own kernel"
msgstr ""

#: ../source/overview.rst:355
#: 94fe649bf12842988d89fbb3e47b9e21
msgid "Most operating systems support some form of classical virtualization, running applications packaged as images containing a full operating system of their own. Running these virtual machines, or VMs, is a mature approach, widespread in data center environments."
msgstr ""

#: ../source/overview.rst:360
#: a3f4dedadc6f40d0802b437e3569b0cb
msgid "These techniques are mostly reserved for larger scale deployments in data centers, though certain complex applications can benefit from this packaging. Technologies are Python agnostic, and include:"
msgstr ""

#: ../source/overview.rst:364
#: 7250e71624024d2e8e6995a4d6e5279b
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr ""

#: ../source/overview.rst:365
#: 24b1630415494613a6949d0b9ecfca6e
msgid "`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en.wikipedia.org/wiki/Amazon_Machine_Image>`_, and `other formats <https://docs.openstack.org/image-guide/image-formats.html>`_"
msgstr ""

#: ../source/overview.rst:366
#: 7c60dd433b094e49aef7431dfde6b8c7
msgid "`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud management system in Python, with extensive VM support"
msgstr ""

#: ../source/overview.rst:369
#: 0de0e3d9fa7442dfa330740285940dd5
msgid "Bringing your own hardware"
msgstr ""

#: ../source/overview.rst:371
#: 7d9e7134581a47a1bbc5b86852b9afa3
msgid "The most all-encompassing way to ship your software would be to ship it already-installed on some hardware. This way, your software's user would require only electricity."
msgstr ""

#: ../source/overview.rst:375
#: 422a1602eb684a05a347dddc887c06d0
msgid "Whereas the virtual machines described above are primarily reserved for the tech-savvy, you can find hardware appliances being used by everyone from the most advanced data centers to the youngest children."
msgstr ""

#: ../source/overview.rst:379
#: 84f1c197ec054974a6e0ab97faab8e05
msgid "Embed your code on an `Adafruit <https://github.com/adafruit/circuitpython#adafruit-circuitpython>`_, `MicroPython <https://micropython.org/>`_, or more-powerful hardware running Python, then ship it to the datacenter or your users' homes. They plug and play, and you can call it a day."
msgstr ""

#: ../source/overview.rst:389
#: c6042db2789f4daaa9ba492d4e16aa76
msgid "A summary of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:389
#: e4a90828877f434cad9402f21a7f8d32
msgid "The simplified gamut of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:392
#: 7fb1885303db4bb8938ee4c2e062a29c
msgid "What about..."
msgstr ""

#: ../source/overview.rst:394
#: a99dea60a8994ab2ad8078db3894d3b9
msgid "The sections above can only summarize so much, and you might be wondering about some of the more conspicuous gaps."
msgstr ""

#: ../source/overview.rst:398
#: fe63b7600c92438d86c4633042747d40
msgid "Operating system packages"
msgstr ""

#: ../source/overview.rst:400
#: ed08dd80e7c6412c93fca6d1513cffab
msgid "As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some operating systems have package managers of their own. If you're very sure of the operating system you're targeting, you can depend directly on a format like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ (for Red Hat, Fedora, etc.), and use that built-in package manager to take care of installation, and even deployment. You can even use `FPM <https://fpm.readthedocs.io/en/latest/source/virtualenv.html>`_ to generate both deb and RPMs from the same source."
msgstr ""

#: ../source/overview.rst:411
#: e16c9163d6a7430da850416469b13aac
msgid "In most deployment pipelines, the OS package manager is just one piece of the puzzle."
msgstr ""

#: ../source/overview.rst:417
#: 97ff7795e3734c7e80e770ed60348117
msgid "`Virtualenvs <http://python-guide.readthedocs.io/en/latest/dev/virtualenvs/>`_ have been an indispensable tool for multiple generations of Python developer, but are slowly fading from view, as they are being wrapped by higher-level tools. With packaging in particular, virtualenvs are used as a primitive in `the dh-virtualenv tool <http://dh-virtualenv.readthedocs.io/en/1.0/tutorial.html>`_ and `osnap <https://github.com/jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""

#: ../source/overview.rst:427
#: b5106e3cbc16434c8119aefd10130b60
msgid "For production deployments, do not rely on running ``python -m pip install`` from the Internet into a virtualenv, as one might do in a development environment. The overview above is full of much better solutions."
msgstr ""

#: ../source/overview.rst:432
#: a80320b8528745ea8119304f48a0ce03
msgid "Security"
msgstr ""

#: ../source/overview.rst:434
#: 94dc704a3e734a92919b16168b31975d
msgid "The further down the gradient you come, the harder it gets to update components of your package. Everything is more tightly bound together."
msgstr ""

#: ../source/overview.rst:437
#: a5d23ea9897544948543861faa0c8990
msgid "For example, if a kernel security issue emerges, and you're deploying containers, the host system's kernel can be updated without requiring a new build on behalf of the application. If you deploy VM images, you'll need a new build. Whether or not this dynamic makes one option more secure is still a bit of an old debate, going back to the still-unsettled matter of `static versus dynamic linking <https://www.google.com/search?channel=fs&q=static+vs+dynamic+linking>`_."
msgstr ""

#: ../source/overview.rst:446
#: 7a73d53910a74265bd61c85b63539f12
msgid "Wrap up"
msgstr ""

#: ../source/overview.rst:448
#: 0699d3a720fc4e36958f95355219b010
msgid "Packaging in Python has a bit of a reputation for being a bumpy ride. This impression is mostly a byproduct of Python's versatility. Once you understand the natural boundaries between each packaging solution, you begin to realize that the varied landscape is a small price Python programmers pay for using one of the most balanced, flexible languages available."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:6
#: 7bcebb1c2bbc4750a023d39906052eeb
msgid "Binary distribution format"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:8
#: 400802775f8748d8a157bfd50ec02bc9
msgid "The binary distribution format (:term:`wheel <Wheel>`) was originally defined in :pep:`427`. The current version of the specification is here."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:13
#: 5d997953b83f41738e6adcb42a590e2a
msgid "Abstract"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:15
#: 2a1b602e801e473687c397343e53e0c5
msgid "This PEP describes a built-package format for Python called \"wheel\"."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:17
#: 5cbd4402d93b430d81334924699229b7
msgid "A wheel is a ZIP-format archive with a specially formatted file name and the ``.whl`` extension.  It contains a single distribution nearly as it would be installed according to PEP 376 with a particular installation scheme.  Although a specialized installer is recommended, a wheel file may be installed by simply unpacking into site-packages with the standard 'unzip' tool while preserving enough information to spread its contents out onto their final paths at any later time."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:27
#: 46faa01d24a74dfe8ca1ef283d8c859c
msgid "PEP Acceptance"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:29
#: 6857554580c744289807ebc6af4382a9
msgid "This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 [1]_"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:34
#: b9720f50b2224518b8eb5b2057e2b921
msgid "Rationale"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:36
#: 04502d592d9943f9b653b9df8d446f19
msgid "Python needs a package format that is easier to install than sdist. Python's sdist packages are defined by and require the distutils and setuptools build systems, running arbitrary code to build-and-install, and re-compile, code just so it can be installed into a new virtualenv.  This system of conflating build-install is slow, hard to maintain, and hinders innovation in both build systems and installers."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:43
#: 55962f4325904ed7b315394e14ebcc7c
msgid "Wheel attempts to remedy these problems by providing a simpler interface between the build system and the installer.  The wheel binary package format frees installers from having to know about the build system, saves time by amortizing compile time over many installations, and removes the need to install a build system in the target environment."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:52
#: b82f51f74ff044489b1629b01f0deeea
msgid "Details"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:55
#: c1ecaf6a0ee544b5bfffc42754278ce5
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:57
#: 9bcdbcfdff394760b9d52233cb8eb47b
msgid "Wheel installation notionally consists of two phases:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:59
#: 54eba9316fe34f50ba923454a06e7225
msgid "Unpack."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:61
#: f8ab7065542348539edd60cc541b9fd4
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:62
#: ca1cd2cb79454ea09f85116479a67ae1
msgid "Check that installer is compatible with Wheel-Version.  Warn if minor version is greater, abort if major version is greater."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:64
#: 000d28fbc0e6472a851a3b11b285df19
msgid "If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:66
#: e6c662de88db4d7ca70411c63a6443c4
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:68
#: d623ab42a92a45e8804b39511d153d29
msgid "Spread."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:70
#: 403744686d364e3abb58e2e28eef821c
msgid "Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there is data) ``distribution-1.0.data/``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:72
#: f7184b01354a4675a61107d1e27d1867
msgid "Move each subtree of ``distribution-1.0.data/`` onto its destination path. Each subdirectory of ``distribution-1.0.data/`` is a key into a dict of destination directories, such as ``distribution-1.0.data/(purelib|platlib|headers|scripts|data)``. The initially supported paths are taken from ``distutils.command.install``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:78
#: 3ddddb99e7ae42f4b8fb6a6007e6686c
msgid "If applicable, update scripts starting with ``#!python`` to point to the correct interpreter."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:80
#: 802fc55eafd647358fdc0a9042db0e92
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:82
#: f43a5e38ba094fd79eac32bb1be0ce14
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:83
#: 79f8ae4e01484b6f89b9895c89174d26
msgid "Compile any installed .py to .pyc. (Uninstallers should be smart enough to remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:87
#: 411204c95a08453d9b062a0a366c28a6
msgid "Recommended installer features"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:97
#: 8fd107197c7a470c9934a498f9fce077
msgid "Rewrite ``#!python``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:90
#: fb0cbe20bac74aa89751227b56e256d1
msgid "In wheel, scripts are packaged in ``{distribution}-{version}.data/scripts/``.  If the first line of a file in ``scripts/`` starts with exactly ``b'#!python'``, rewrite to point to the correct interpreter.  Unix installers may need to add the +x bit to these files if the archive was created on Windows."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:96
#: 443a291b32d046d8a1734725025b8b2a
msgid "The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a GUI script instead of a console script."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:102
#: b82a17dc150f40acb3762552e8bd7a05
msgid "Generate script wrappers."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:100
#: 0cd110c6d50347d7941ff0d9ce4b7577
msgid "In wheel, scripts packaged on Unix systems will certainly not have accompanying .exe wrappers.  Windows installers may want to add them during install."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:105
#: 1664665dc1af42278aa68dc03a2aaa6e
msgid "Recommended archiver features"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:112
#: 56e0d39271dc4ea78475850fa2a425da
msgid "Place ``.dist-info`` at the end of the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:108
#: 63d4598aefb64f4298353df4dfa381c2
msgid "Archivers are encouraged to place the ``.dist-info`` files physically at the end of the archive.  This enables some potentially interesting ZIP tricks including the ability to amend the metadata without rewriting the entire archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:115
#: f566aa6e883544989503ad98d4e34d95
msgid "File Format"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:118
#: 20b204e496ce447fade50c47bff38e0c
msgid "File name convention"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:120
#: 80cffdad21d247f39efb2af1dbb4cd1e
msgid "The wheel filename is ``{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:124
#: f193626c4b5c4754885419d2e77dfd13
msgid "distribution"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:124
#: b1ac7c3a3b81410f9dbf9d86a154e8da
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:127
#: 5eb91daa2a874a98aab387518bf3dafd
msgid "Distribution version, e.g. 1.0."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:135
#: 0aae8a643ecb4f378b148658a48a1221
msgid "build tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:130
#: 458325a3ab0546e5921fc232ea8fee02
msgid "Optional build number.  Must start with a digit.  Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags).  Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an ``int``, and the second item being the remainder of the tag as a ``str``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:138
#: 92c39ab083924321bbb4800e85ee979a
msgid "language implementation and version tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:138
#: b6757b211b6142fab1eb58bab79dc096
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:141
#: bf5eb8f379364f9cafb4344f05f46a6e
msgid "abi tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:141
#: 97e63a1a96ae43759cd3b47678f69b91
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:144
#: f8f7fd9abcff47fcb594e06654f905bb
msgid "platform tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:144
#: d144d7ac63344fb19efa1fda79858dfe
msgid "E.g. 'linux_x86_64', 'any'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:146
#: 3f7f5c80a3af4d3a8ea6d08896be4b9c
msgid "For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:151
#: d6f3943567d0493989377e85009c30ef
msgid "The last three components of the filename before the extension are called \"compatibility tags.\"  The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:156
#: 69d53bf08e7b4991a3d341c684d7a939
msgid "Escaping and Unicode"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:158
#: 65d873126f794ad1b5628d0d26f15c4c
msgid "As the components of the filename are separated by a dash (``-``, HYPHEN-MINUS), this character cannot appear within any component. This is handled as follows:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:161
#: 230137f60d064fe4a62aacdfedc64fd4
msgid "In distribution names, any run of ``-_.`` characters (HYPHEN-MINUS, LOW LINE and FULL STOP) should be replaced with ``_`` (LOW LINE). This is equivalent to :pep:`503` normalisation followed by replacing ``-`` with ``_``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:164
#: e187c036dce6431eb80d5974f2ac6fe5
msgid "Version numbers should be normalised according to :pep:`440`. Normalised version numbers cannot contain ``-``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:166
#: d18e9f886c0343008369d54cd8bfd4b6
msgid "The remaining components may not contain ``-`` characters, so no escaping is necessary."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:169
#: ac3c6fa8f70f4204a10a276ab858a04d
msgid "Tools producing wheels should verify that the filename components do not contain ``-``, as the resulting file may not be processed correctly if they do."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:172
#: af358fe8eb3e4d26a5eec160f6a8cf40
msgid "The archive filename is Unicode.  It will be some time before the tools are updated to support non-ASCII filenames, but they are supported in this specification."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:176
#: c9fabc0efab44acf8f0f9f77b3cfd2c4
msgid "The filenames *inside* the archive are encoded as UTF-8.  Although some ZIP clients in common use do not properly display UTF-8 filenames, the encoding is supported by both the ZIP specification and Python's ``zipfile``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:182
#: 67ae2da68a064431b096ebe32b76c449
msgid "File contents"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:184
#: 4fedc0f1612b4575867e66e592678cf7
msgid "The contents of a wheel file, where {distribution} is replaced with the name of the package, e.g. ``beaglevote`` and {version} is replaced with its version, e.g. ``1.0.0``, consist of:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:188
#: 94ab2dd19ddf4ddfa499e321b59709e0
msgid "``/``, the root of the archive, contains all files to be installed in ``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and ``platlib`` are usually both ``site-packages``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:191
#: 06a79e2dc6914f4aaaa10c6201975139
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:192
#: 044a62c209694fb99979033b13f520b5
msgid "``{distribution}-{version}.data/`` contains one subdirectory for each non-empty install scheme key not already covered, where the subdirectory name is an index into a dictionary of install paths (e.g. ``data``, ``scripts``, ``include``, ``purelib``, ``platlib``)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:196
#: e07535329bb34c97bc5ac40cfb94a6bf
msgid "Python scripts must appear in ``scripts`` and begin with exactly ``b'#!python'`` in order to enjoy script wrapper generation and ``#!python`` rewriting at install time.  They may have any or no extension."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:200
#: 77536fdcda3e4a5fb93dbfff046584fb
msgid "``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 or greater format metadata."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:202
#: b6b36c4f842547d3b030d8fe7dfee2d9
msgid "``{distribution}-{version}.dist-info/WHEEL`` is metadata about the archive itself in the same basic key: value format::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:212
#: 59e8222ac44540d9bf32f9ee964adbf3
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:213
#: 0382c78349b24b2db461d471d3f9c85b
msgid "``Generator`` is the name and optionally the version of the software that produced the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:215
#: 46d4d7889fae4c01b8d21b67f41e8a7a
msgid "``Root-Is-Purelib`` is true if the top level directory of the archive should be installed into purelib; otherwise the root should be installed into platlib."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:218
#: afd75015af194876885e78559f942cd5
msgid "``Tag`` is the wheel's expanded compatibility tags; in the example the filename would contain ``py2.py3-none-any``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:220
#: 4b0344def7bc4efcb1f839a07972b6c9
msgid "``Build`` is the build number and is omitted if there is no build number."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:221
#: 4d3e4d2535514f3fb55a4ba88204142b
msgid "A wheel installer should warn if Wheel-Version is greater than the version it supports, and must fail if Wheel-Version has a greater major version than the version it supports."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:224
#: 2f258cb8b8d3408bb840d30bd7e1b653
msgid "Wheel, being an installation format that is intended to work across multiple versions of Python, does not generally include .pyc files."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:226
#: 006da2c702b24ce9b797203cc9fe05d1
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:228
#: 0fc6344c422e40e9bf0137d15aa216f7
msgid "This version of the wheel specification is based on the distutils install schemes and does not define how to install files to other locations. The layout offers a superset of the functionality provided by the existing wininst and egg binary formats."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:235
#: ../source/specifications/recording-installed-packages.rst:35
#: 3e0dcb838c3c4f2399040af411faa338
#: c97ee89921e14c438bbee80d7fb57eb4
msgid "The .dist-info directory"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:237
#: 8af2d1e3053549ba8fdd515343484218
msgid "Wheel .dist-info directories include at a minimum METADATA, WHEEL, and RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:239
#: ace90cdb620d4eeea53a2a1afbd2245a
msgid "METADATA is the package metadata, the same format as PKG-INFO as found at the root of sdists."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:241
#: 0a05aaf98e8e433192a2e6bff62961c2
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:242
#: 4b02998ff407409cbe4750c2ce1b48f0
msgid "RECORD is a list of (almost) all the files in the wheel and their secure hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a hash of itself, must include its hash.  The hash algorithm must be sha256 or better; specifically, md5 and sha1 are not permitted, as signed wheel files rely on the strong hashes in RECORD to validate the integrity of the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:248
#: 142aab5fa2a244b39f4cfb200f60c5bd
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:249
#: fff8fcc6d7e24de883abc37761552c49
msgid "RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:251
#: e4d6da9cddcc4515813a4e870fe214e4
msgid "RECORD.p7s is allowed as a courtesy to anyone who would prefer to use S/MIME signatures to secure their wheel files.  It is not mentioned in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:254
#: c52ece8f351e43ba8941a51be77428e1
msgid "During extraction, wheel installers verify all the hashes in RECORD against the file contents.  Apart from RECORD and its signatures, installation will fail if any file in the archive is not both mentioned and correctly hashed in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:261
#: f9eb9d4a06e84c00bdb38782129b4f95
msgid "The .data directory"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:263
#: 2643963a27674775a65456bf7b385d6d
msgid "Any file that is not normally installed inside site-packages goes into the .data directory, named as the .dist-info directory but with the .data/ extension::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:271
#: eaffb7ec442f4c69adaefc2f032cc363
msgid "The .data directory contains subdirectories with the scripts, headers, documentation and so forth from the distribution.  During installation the contents of these subdirectories are moved onto their destination paths."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:277
#: 619492f8a55a4674a6727480abe78e8f
msgid "Signed wheel files"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:279
#: 20a20be4970a4702be87aee5e48de679
msgid "Wheel files include an extended RECORD that enables digital signatures.  PEP 376's RECORD is altered to include a secure hash ``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding with no trailing = characters) as the second column instead of an md5sum.  All possible entries are hashed, including any generated files such as .pyc files, but not RECORD which cannot contain its own hash. For example::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:290
#: e712c560138645ae8959cff2ac41609e
msgid "The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in RECORD at all since they can only be added after RECORD is generated. Every other file in the archive must have a correct hash in RECORD or the installation will fail."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:295
#: 974abec8b05842a2aa8861847302ab29
msgid "If JSON web signatures are used, one or more JSON Web Signature JSON Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent to RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of RECORD as the signature's JSON payload::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:302
#: 102af63ca39b4b569c53602f21937e52
msgid "(The hash value is the same format used in RECORD.)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:304
#: 38307d6420e14615b2133cf792893347
msgid "If RECORD.p7s is used, it must contain a detached S/MIME format signature of RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:307
#: f2a31ad11ff948518bb2e883c2d3b64c
msgid "A wheel installer is not required to understand digital signatures but MUST verify the hashes in RECORD against the extracted file contents. When the installer checks file hashes against RECORD, a separate signature checker only needs to establish that RECORD matches the signature."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:312
#: af474c6454d443e19cd06283add57bf3
msgid "See"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:314
#: 78b04a582e814293b0c6cd1bc3a56fd0
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:315
#: 5a74e411a1694bac880f4afa3b780fcb
msgid "http://self-issued.info/docs/draft-jones-jose-jws-json-serialization.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:316
#: a08e4ed7f8d54577bd03b9eff94412ec
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-key.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:317
#: e74464185ef94b9588ebc67d9a2404b5
msgid "http://self-issued.info/docs/draft-jones-jose-json-private-key.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:321
#: 4ff6bacc8205469fb9cbaafef33f82aa
msgid "Comparison to .egg"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:323
#: 04db3d640a4241a5ace74cb1d49ed14d
msgid "Wheel is an installation format; egg is importable.  Wheel archives do not need to include .pyc and are less tied to a specific Python version or implementation. Wheel can install (pure Python) packages built with previous versions of Python so you don't always have to wait for the packager to catch up."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:328
#: 149607650a22409fbeef9264168c14c9
msgid "Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is compatible with the new world of Python packaging and the new concepts it brings."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:331
#: fc9b5a7c9635405fbb5e03f3b650df3d
msgid "Wheel has a richer file naming convention for today's multi-implementation world.  A single wheel archive can indicate its compatibility with a number of Python language versions and implementations, ABIs, and system architectures.  Historically the ABI has been specific to a CPython release, wheel is ready for the stable ABI."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:337
#: 002b4e4187534cbdb477ec1f36457590
msgid "Wheel is lossless.  The first wheel implementation bdist_wheel always generates egg-info, and then converts it to a .whl.  It is also possible to convert existing eggs and bdist_wininst distributions."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:341
#: e15c848716a448219cb8d1525ae10284
msgid "Wheel is versioned.  Every wheel file contains the version of the wheel specification and the implementation that packaged it. Hopefully the next migration can simply be to Wheel 2.0."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:344
#: c55126e696444ef2ade5d1c8d312dcd0
msgid "Wheel is a reference to the other Python."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:348
#: 7c3a3bb0c1964cbdb7705bfa9982964e
msgid "FAQ"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:352
#: 5024222b61ac419dbfb3a008f563aa4c
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:354
#: b5e4a30e984a49ae9b1aa4f2541839df
msgid "This specification does not have an opinion on how you should organize your code.  The .data directory is just a place for any files that are not normally installed inside ``site-packages`` or on the PYTHONPATH. In other words, you may continue to use ``pkgutil.get_data(package, resource)`` even though *those* files will usually not be distributed in *wheel's* ``.data`` directory."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:363
#: 63d9bea88a5c4dabaae226a312f18287
msgid "Why does wheel include attached signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:365
#: f71517cf0ca6459abd23ac995b176e8c
msgid "Attached signatures are more convenient than detached signatures because they travel with the archive.  Since only the individual files are signed, the archive can be recompressed without invalidating the signature or individual files can be verified without having to download the whole archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:373
#: 60b05b6e14d5469693dff4088fb27157
msgid "Why does wheel allow JWS signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:375
#: 7228dae362e94225908ad4186ed3e33c
msgid "The JOSE specifications of which JWS is a part are designed to be easy to implement, a feature that is also one of wheel's primary design goals.  JWS yields a useful, concise pure-Python implementation."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:381
#: 2fac805838b641e69031f72081409dad
msgid "Why does wheel also allow S/MIME signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:383
#: b45b6413603f4817b3a5a00a156a1c28
msgid "S/MIME signatures are allowed for users who need or want to use existing public key infrastructure with wheel."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:386
#: ea33461cc007482d9269a7fc4f4177e9
msgid "Signed packages are only a basic building block in a secure package update system.  Wheel only provides the building block."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:391
#: e9cbd42f65524e2bab70679bfa0e3b73
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:393
#: 812393d972de43cd89d045854c74dfe8
msgid "Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is significant on some platforms. For example, Fedora installs pure Python packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:398
#: c2a8295d803c47e5a4cbfa6cb2072117
msgid "A wheel with \"Root-Is-Purelib: false\" with all its files in ``{name}-{version}.data/purelib`` is equivalent to a wheel with \"Root-Is-Purelib: true\" with those same files in the root, and it is legal to have files in both the \"purelib\" and \"platlib\" categories."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:403
#: 280662b74cd341f698f8bd41ec318542
msgid "In practice a wheel should have only one of \"purelib\" or \"platlib\" depending on whether it is pure Python or not and those files should be at the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:409
#: c7a7f0dbf5ba4ba19cbd1dc0eb4b5773
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:411
#: 75ec8c7004de46eb873411a6a99dc2e2
msgid "Technically, due to the combination of supporting installation via simple extraction and using an archive format that is compatible with ``zipimport``, a subset of wheel files *do* support being placed directly on ``sys.path``. However, while this behaviour is a natural consequence of the format design, actually relying on it is generally discouraged."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:417
#: 6fc6a1a91e9a46499e00fda920871bf7
msgid "Firstly, wheel *is* designed primarily as a distribution format, so skipping the installation step also means deliberately avoiding any reliance on features that assume full installation (such as being able to use standard tools like ``pip`` and ``virtualenv`` to capture and manage dependencies in a way that can be properly tracked for auditing and security update purposes, or integrating fully with the standard build machinery for C extensions by publishing header files in the appropriate place)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:426
#: d4c5106921c14058ae73e9a4f5ba4b62
msgid "Secondly, while some Python software is written to support running directly from a zip archive, it is still common for code to be written assuming it has been fully installed. When that assumption is broken by trying to run the software from a zip archive, the failures can often be obscure and hard to diagnose (especially when they occur in third party libraries). The two most common sources of problems with this are the fact that importing C extensions from a zip archive is *not* supported by CPython (since doing so is not supported directly by the dynamic loading machinery on any platform) and that when running from a zip archive the ``__file__`` attribute no longer refers to an ordinary filesystem path, but to a combination path that includes both the location of the zip archive on the filesystem and the relative path to the module inside the archive. Even when software correctly uses the abstract resource APIs internally, interfacing with external components may still require the availability of an actual on-disk file."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:443
#: e09dd8405e7d4e5ab085d76a69de874e
msgid "Like metaclasses, monkeypatching and metapath importers, if you're not already sure you need to take advantage of this feature, you almost certainly don't need it. If you *do* decide to use it anyway, be aware that many projects will require a failure to be reproduced with a fully installed package before accepting it as a genuine bug."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:450
#: ae183703f6dc4254af965e2a42b55ed7
msgid "Changes"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:452
#: 756340a04a534cb2aa79480464d0c7f4
msgid "Since :pep:`427`, this specification has changed as follows:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:454
#: dd82cf3f6c0443f59e158aaa4fef2280
msgid "The rules on escaping in wheel filenames were revised, to bring them into line with what popular tools actually do (February 2021)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:461
#: d15f57b9105f456d8a7025af4f8699d3
msgid "PEP acceptance (https://mail.python.org/pipermail/python-dev/2013-February/124103.html)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:466
#: 4d3c5fe1d68c492886d7a274ffd99a49
msgid "Appendix"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:468
#: 43186bde8b1442aba3c8075497c871f1
msgid "Example urlsafe-base64-nopad implementation::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:482
#: 3e7ea1e533064356b607c5a81f0db269
msgid "Copyright"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:484
#: 8813e9e49700467599f83cd1f14f75b4
msgid "This document has been placed into the public domain."
msgstr ""

#: ../source/specifications/core-metadata.rst:5
#: 36772fdbf7d54e979571a3b892d937ac
msgid "Core metadata specifications"
msgstr ""

#: ../source/specifications/core-metadata.rst:7
#: 2141a136206d4a3ebba2993f68a62229
msgid "Fields defined in the following specification should be considered valid, complete and not subject to change. The required fields are:"
msgstr ""

#: ../source/specifications/core-metadata.rst:10
#: d49a37afb6cc4125af69fa2fd003fc15
msgid "``Metadata-Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:11
#: f9a73ea1732e4565bf3d7104d2196175
msgid "``Name``"
msgstr ""

#: ../source/specifications/core-metadata.rst:12
#: 21486d7823584dd390b9984a25cb480d
msgid "``Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:14
#: 932c7650bbe34f55a85d6fe1d0c6e9ea
msgid "All the other fields are optional."
msgstr ""

#: ../source/specifications/core-metadata.rst:16
#: b4780c43e99b4baf9b259a2544cfb7ce
msgid "The standard file format for metadata (including in :doc:`wheels <binary-distribution-format>` and :doc:`installed projects <recording-installed-packages>`) is based on the format of email headers. However, email formats have been revised several times, and exactly which email RFC applies to packaging metadata is not specified. In the absence of a precise definition, the practical standard is set by what the standard library :mod:`python:email.parser` module can parse using the :data:`~.python:email.policy.compat32` policy."
msgstr ""

#: ../source/specifications/core-metadata.rst:25
#: 2f7e5877dd8547939dfaeecf1201e098
msgid "Although :pep:`566` defined a way to transform metadata into a JSON-compatible dictionary, this is not yet used as a standard interchange format. The need for tools to work with years worth of existing packages makes it difficult to shift to a new format."
msgstr ""

#: ../source/specifications/core-metadata.rst:30
#: 18f723339d224b7d83be8e5c2ab2de7c
msgid "*Interpreting old metadata:* In :pep:`566`, the version specifier field format specification was relaxed to accept the syntax used by popular publishing tools (namely to remove the requirement that version specifiers must be surrounded by parentheses). Metadata consumers may want to use the more relaxed formatting rules even for metadata files that are nominally less than version 2.1."
msgstr ""

#: ../source/specifications/core-metadata.rst:41
#: e650a71bebfb4fec8ec04107dc0a4f53
msgid "Metadata-Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:45
#: f4775c72814c438c9568604fe07dd615
msgid "Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", \"2.1\" and \"2.2\"."
msgstr ""

#: ../source/specifications/core-metadata.rst:48
#: a4a907847480479cbe94f107461e02bb
msgid "Automated tools consuming metadata SHOULD warn if ``metadata_version`` is greater than the highest version they support, and MUST fail if ``metadata_version`` has a greater major version than the highest version they support (as described in :pep:`440`, the major version is the value before the first dot)."
msgstr ""

#: ../source/specifications/core-metadata.rst:54
#: b912c336421947c684b884e4e3862fce
msgid "For broader compatibility, build tools MAY choose to produce distribution metadata using the lowest metadata version that includes all of the needed fields."
msgstr ""

#: ../source/specifications/core-metadata.rst:58
#: ../source/specifications/core-metadata.rst:80
#: ../source/specifications/core-metadata.rst:95
#: ../source/specifications/core-metadata.rst:155
#: ../source/specifications/core-metadata.rst:170
#: ../source/specifications/core-metadata.rst:208
#: ../source/specifications/core-metadata.rst:283
#: ../source/specifications/core-metadata.rst:287
#: ../source/specifications/core-metadata.rst:291
#: ../source/specifications/core-metadata.rst:295
#: ../source/specifications/core-metadata.rst:327
#: ../source/specifications/core-metadata.rst:347
#: ../source/specifications/core-metadata.rst:373
#: ../source/specifications/core-metadata.rst:391
#: ../source/specifications/core-metadata.rst:416
#: ../source/specifications/core-metadata.rst:438
#: ../source/specifications/core-metadata.rst:600
#: ../source/specifications/core-metadata.rst:620
#: ../source/specifications/core-metadata.rst:630
#: e4bcc98cfda54589991d4060d351d61f
#: f152c5ab09f04117b5e2c3b19fc2001b
#: ee1f138978354cfab368123d6b1e9ce8
#: 1c75b2b9e38841e4a71f75f122e32226
#: a937a02dabe14c129c9d8118a7ca52f4
#: fa130cead2834366bbc693b2ecab51da
#: 22ba35cc40eb4a47b5c2a81a5c72464e
#: 5c5672084b8f483aaef1ae570f88a099
#: 938c7b5f012b4537863a6c801585ee0d
#: 23849f44f7b7424b80edf74fd5c3cd0d
#: c3ba1714b7514056bc135a20948cc293
#: ccbaacddbd6e477a9507328f2dca54a4
#: d1251ec469a84639ab4a2a7b065e2b77
#: 05f560c431a44ae5bd08bd03712f42ab
#: aab61a5669c84dfaa5c00c523a9c34bc
#: 77e65d61aa0642d3b1ffa070ac099dc2
#: a950419a2ef444a9a28f53206c7d3681
#: d9be2b0137da400cafda67f44d91ba37
#: f12e401209d14ec88227f1c578f898a7
msgid "Example::"
msgstr ""

#: ../source/specifications/core-metadata.rst:66
#: 0d36fc0615b0482099da631030400dfa
msgid "Name"
msgstr ""

#: ../source/specifications/core-metadata.rst:69
#: b389c62255834292839ee488e604c90f
msgid "Added additional restrictions on format from :pep:`508`"
msgstr ""

#: ../source/specifications/core-metadata.rst:72
#: 7d791e82f4754f32a3715c2103ccb9b6
msgid "The name of the distribution. The name field is the primary identifier for a distribution. A valid name consists only of ASCII letters and numbers, period, underscore and hyphen. It must start and end with a letter or number. Distribution names are limited to those which match the following regex (run with ``re.IGNORECASE``)::"
msgstr ""

#: ../source/specifications/core-metadata.rst:88
#: 8cfb56f1b3944c52a79581d8d5acd5a9
msgid "Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:92
#: 38bf6025cb8e4473ad7ed762b6d4f3d2
msgid "A string containing the distribution's version number.  This field  must be in the format specified in :pep:`440`."
msgstr ""

#: ../source/specifications/core-metadata.rst:101
#: dbdb3081ad324439b30fa8ef15f885e3
msgid "Dynamic (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:105
#: bddc483f0c9e48de9d5b245ef5a5ffe3
msgid "A string containing the name of another core metadata field. The field names ``Name`` and ``Version`` may not be specified in this field."
msgstr ""

#: ../source/specifications/core-metadata.rst:108
#: 2e403449194d4326a81b349a5dd069f9
msgid "When found in the metadata of a source distribution, the following rules apply:"
msgstr ""

#: ../source/specifications/core-metadata.rst:111
#: ef05572c9568483aad3bd61c2fdcda4e
msgid "If a field is *not* marked as ``Dynamic``, then the value of the field in any wheel built from the sdist MUST match the value in the sdist. If the field is not in the sdist, and not marked as ``Dynamic``, then it MUST NOT be present in the wheel."
msgstr ""

#: ../source/specifications/core-metadata.rst:115
#: d851dcf953e44d54b202ee161381fdc2
msgid "If a field is marked as ``Dynamic``, it may contain any valid value in a wheel built from the sdist (including not being present at all)."
msgstr ""

#: ../source/specifications/core-metadata.rst:118
#: 7a627fca08734bf9adf1e141e32a03b7
msgid "If the sdist metadata version is older than version 2.2, then all fields should be treated as if they were specified with ``Dynamic`` (i.e. there are no special restrictions on the metadata of wheels built from the sdist)."
msgstr ""

#: ../source/specifications/core-metadata.rst:122
#: 3e93e8821da148959f6dffe7799a088f
msgid "In any context other than a source distribution, ``Dynamic`` is for information only, and indicates that the field value was calculated at wheel build time, and may not be the same as the value in the sdist or in other wheels for the project."
msgstr ""

#: ../source/specifications/core-metadata.rst:127
#: 33ebd676b2c54e05a40829726890991c
msgid "Full details of the semantics of ``Dynamic`` are described in :pep:`643`."
msgstr ""

#: ../source/specifications/core-metadata.rst:131
#: a180f9bf47534e6cb9276a67f6a710db
msgid "Platform (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:135
#: f2cf40d5fb714447bd3e7ea85e2f34f3
msgid "A Platform specification describing an operating system supported by the distribution which is not listed in the \"Operating System\" Trove classifiers. See \"Classifier\" below."
msgstr ""

#: ../source/specifications/core-metadata.rst:146
#: 02c22f5b2e3c45dd84da96532d89c189
msgid "Supported-Platform (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:150
#: bc59625dd1904ec4a1bcf39147e2089b
msgid "Binary distributions containing a PKG-INFO file will use the Supported-Platform field in their metadata to specify the OS and CPU for which the binary distribution was compiled.  The semantics of the Supported-Platform field are not specified in this PEP."
msgstr ""

#: ../source/specifications/core-metadata.rst:164
#: 7057e659b172456e901ba4c8ca1ba3eb
msgid "Summary"
msgstr ""

#: ../source/specifications/core-metadata.rst:168
#: 4dbba8aaadeb411687bd5d8cbe4b527e
msgid "A one-line summary of what the distribution does."
msgstr ""

#: ../source/specifications/core-metadata.rst:188
#: 7eb33e6f5c904e8aa049df002359d122
msgid "This field may be specified in the message body instead."
msgstr ""

#: ../source/specifications/core-metadata.rst:191
#: c6720ca54a324bfe8e0ea3f8febe4ce5
msgid "A longer description of the distribution that can run to several paragraphs.  Software that deals with metadata should not assume any maximum size for this field, though people shouldn't include their instruction manual as the description."
msgstr ""

#: ../source/specifications/core-metadata.rst:196
#: 3da87f1859c2451cb3b052d3e62b6fe4
msgid "The contents of this field can be written using reStructuredText markup [1]_.  For programs that work with the metadata, supporting markup is optional; programs can also display the contents of the field as-is.  This means that authors should be conservative in the markup they use."
msgstr ""

#: ../source/specifications/core-metadata.rst:202
#: 441774b9e6d54dd2bedb0a5fc77089c4
msgid "To support empty lines and lines with indentation with respect to the RFC 822 format, any CRLF character has to be suffixed by 7 spaces followed by a pipe (\"|\") char. As a result, the Description field is encoded into a folded field that can be interpreted by RFC822 parser [2]_."
msgstr ""

#: ../source/specifications/core-metadata.rst:219
#: 082467561b474d1b9dc645798f08019f
msgid "This encoding implies that any occurrences of a CRLF followed by 7 spaces and a pipe char have to be replaced by a single CRLF when the field is unfolded using a RFC822 reader."
msgstr ""

#: ../source/specifications/core-metadata.rst:223
#: ed0adb1ab53e42ce9c16fec49c544158
msgid "Alternatively, the distribution's description may instead be provided in the message body (i.e., after a completely blank line following the headers, with no indentation or other special formatting necessary)."
msgstr ""

#: ../source/specifications/core-metadata.rst:232
#: 2a7a0b05cf954c59834be2f84bac4047
msgid "Description-Content-Type"
msgstr ""

#: ../source/specifications/core-metadata.rst:236
#: 22a028bf19194f9c8cf78f109608722f
msgid "A string stating the markup syntax (if any) used in the distribution's description, so that tools can intelligently render the description."
msgstr ""

#: ../source/specifications/core-metadata.rst:239
#: bbf64f3096d54d76a55c67bd751b94ff
msgid "Historically, PyPI supported descriptions in plain text and `reStructuredText (reST) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html>`_, and could render reST into HTML. However, it is common for distribution authors to write the description in `Markdown <https://daringfireball.net/projects/markdown/>`_ (`RFC 7763 <https://tools.ietf.org/html/rfc7763>`_) as many code hosting sites render Markdown READMEs, and authors would reuse the file for the description. PyPI didn't recognize the format and so could not render the description correctly. This resulted in many packages on PyPI with poorly-rendered descriptions when Markdown is left as plain text, or worse, was attempted to be rendered as reST. This field allows the distribution author to specify the format of their description, opening up the possibility for PyPI and other tools to be able to render Markdown and other formats."
msgstr ""

#: ../source/specifications/core-metadata.rst:253
#: b749600c9f6347f99c26cf24be4c4e70
msgid "The format of this field is the same as the ``Content-Type`` header in HTTP (i.e.: `RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type.html>`_). Briefly, this means that it has a ``type/subtype`` part and then it can optionally have a number of parameters:"
msgstr ""

#: ../source/specifications/core-metadata.rst:259
#: 9d4c4cc93ac048b5a08c9cd8241ea9d2
msgid "Format::"
msgstr ""

#: ../source/specifications/core-metadata.rst:263
#: e8eb71d5cfac47b2bf02423128c54cc3
msgid "The ``type/subtype`` part has only a few legal values:"
msgstr ""

#: ../source/specifications/core-metadata.rst:265
#: d763a49565d24dc2b1882cf33f1aa0cd
msgid "``text/plain``"
msgstr ""

#: ../source/specifications/core-metadata.rst:266
#: 206d32c2c4a34e49a5b43c17dc555c08
msgid "``text/x-rst``"
msgstr ""

#: ../source/specifications/core-metadata.rst:267
#: 90825358e73e438091ffa344a89aa787
msgid "``text/markdown``"
msgstr ""

#: ../source/specifications/core-metadata.rst:269
#: df21dfd727484cd9a4632592445d0468
msgid "The ``charset`` parameter can be used to specify the character encoding of the description. The only legal value is ``UTF-8``. If omitted, it is assumed to be ``UTF-8``."
msgstr ""

#: ../source/specifications/core-metadata.rst:273
#: 0337ebc7124143fca59897dfd25e251d
msgid "Other parameters might be specific to the chosen subtype. For example, for the ``markdown`` subtype, there is an optional ``variant`` parameter that allows specifying the variant of Markdown in use (defaults to ``GFM`` if not specified). Currently, two variants are recognized:"
msgstr ""

#: ../source/specifications/core-metadata.rst:278
#: b2cdd4bbb16448ee94f739405f8059c0
msgid "``GFM`` for `Github-flavored Markdown <https://tools.ietf.org/html/rfc7764#section-3.2>`_"
msgstr ""

#: ../source/specifications/core-metadata.rst:280
#: fc6a4eca7ba8415ca5dff1ef59bdcc5e
msgid "``CommonMark`` for `CommonMark <https://tools.ietf.org/html/rfc7764#section-3.5>`_"
msgstr ""

#: ../source/specifications/core-metadata.rst:299
#: 14c3259cad8e49bfbc7c8b96cea9c827
msgid "If a ``Description-Content-Type`` is not specified, then applications should attempt to render it as ``text/x-rst; charset=UTF-8`` and fall back to ``text/plain`` if it is not valid rst."
msgstr ""

#: ../source/specifications/core-metadata.rst:303
#: ebf2372cbaa14526ab1ba1ffb108ada1
msgid "If a ``Description-Content-Type`` is an unrecognized value, then the assumed content type is ``text/plain`` (Although PyPI will probably reject anything with an unrecognized value)."
msgstr ""

#: ../source/specifications/core-metadata.rst:307
#: 486e43d8a54b49389ceb2b50fa305024
msgid "If the ``Description-Content-Type`` is ``text/markdown`` and ``variant`` is not specified or is set to an unrecognized value, then the assumed ``variant`` is ``GFM``."
msgstr ""

#: ../source/specifications/core-metadata.rst:311
#: 29b77622b296434bb0f2477dc9f174fe
msgid "So for the last example above, the ``charset`` defaults to ``UTF-8`` and the ``variant`` defaults to ``GFM`` and thus it is equivalent to the example before it."
msgstr ""

#: ../source/specifications/core-metadata.rst:320
#: 181cc258d3c44ce8971a29ba7bb9ffbc
msgid "Keywords"
msgstr ""

#: ../source/specifications/core-metadata.rst:324
#: efd83047ef4947929f4b7410f844d1d0
msgid "A list of additional keywords, separated by commas, to be used to assist searching for the distribution in a larger catalog."
msgstr ""

#: ../source/specifications/core-metadata.rst:333
#: efb3ed936a1c46d39848b6805d406d9c
msgid "The specification previously showed keywords separated by spaces, but distutils and setuptools implemented it with commas. These tools have been very widely used for many years, so it was easier to update the specification to match the de facto standard."
msgstr ""

#: ../source/specifications/core-metadata.rst:341
#: 69eda7ad6c7d44ccb094d71831461ea0
msgid "Home-page"
msgstr ""

#: ../source/specifications/core-metadata.rst:345
#: c19df447bc83405d934292e1f2261978
msgid "A string containing the URL for the distribution's home page."
msgstr ""

#: ../source/specifications/core-metadata.rst:353
#: ca2a642901e4472fbe459c185b2bb6da
msgid "Download-URL"
msgstr ""

#: ../source/specifications/core-metadata.rst:357
#: 55399532dd8c4b22a2a2d1246044d26e
msgid "A string containing the URL from which this version of the distribution can be downloaded.  (This means that the URL can't be something like \".../BeagleVote-latest.tgz\", but instead must be \".../BeagleVote-0.45.tgz\".)"
msgstr ""

#: ../source/specifications/core-metadata.rst:366
#: 56c9f1d8251949e39e4d203fb769290a
msgid "Author"
msgstr ""

#: ../source/specifications/core-metadata.rst:370
#: 26c21c45fd76401dbd1f4886b4b8b721
msgid "A string containing the author's name at a minimum; additional contact information may be provided."
msgstr ""

#: ../source/specifications/core-metadata.rst:383
#: ceb7e2b82f6c4b2191af559a4368a20e
msgid "Author-email"
msgstr ""

#: ../source/specifications/core-metadata.rst:387
#: 22ca90daae0b481a8af6b7ca1242d19b
msgid "A string containing the author's e-mail address.  It can contain a name and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""

#: ../source/specifications/core-metadata.rst:395
#: ../source/specifications/core-metadata.rst:442
#: 89b3a01413ca4aa5838569e691b125f5
#: 2a5a5e813e384652b8101eeddce4a50c
msgid "Per RFC-822, this field may contain multiple comma-separated e-mail addresses::"
msgstr ""

#: ../source/specifications/core-metadata.rst:405
#: e51d48a0d9bb4a9483f96e1045e7f2f7
msgid "Maintainer"
msgstr ""

#: ../source/specifications/core-metadata.rst:409
#: 5e2ac132ee9b434e99d6065d42d53cad
msgid "A string containing the maintainer's name at a minimum; additional contact information may be provided."
msgstr ""

#: ../source/specifications/core-metadata.rst:412
#: 73c409aa87614d5ca9c6fb40b999359e
msgid "Note that this field is intended for use when a project is being maintained by someone other than the original author:  it should be omitted if it is identical to ``Author``."
msgstr ""

#: ../source/specifications/core-metadata.rst:426
#: 32281a371a264e9cb2cab3e1ef215385
msgid "Maintainer-email"
msgstr ""

#: ../source/specifications/core-metadata.rst:430
#: 25b0e1a955d0413fb6a61ed55e7b5ff6
msgid "A string containing the maintainer's e-mail address.  It can contain a name and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""

#: ../source/specifications/core-metadata.rst:434
#: 41773de98ffa4aefb68c3f2f0e859ce3
msgid "Note that this field is intended for use when a project is being maintained by someone other than the original author:  it should be omitted if it is identical to ``Author-email``."
msgstr ""

#: ../source/specifications/core-metadata.rst:452
#: efb041f382f7489da882035a981817ed
msgid "License"
msgstr ""

#: ../source/specifications/core-metadata.rst:456
#: 2443b4e86a7a4874aa34d0cdecb0ae7f
msgid "Text indicating the license covering the distribution where the license is not a selection from the \"License\" Trove classifiers. See :ref:`\"Classifier\" <metadata-classifier>` below. This field may also be used to specify a particular version of a license which is named via the ``Classifier`` field, or to indicate a variation or exception to such a license."
msgstr ""

#: ../source/specifications/core-metadata.rst:476
#: 8b6306ebcade4f5b80581815f38a2b0b
msgid "Classifier (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:480
#: 57436d610e0f4539981c72eb3cfde700
msgid "Each entry is a string giving a single classification value for the distribution.  Classifiers are described in :pep:`301`, and the Python Package Index publishes a dynamic list of `currently defined classifiers <https://pypi.org/classifiers/>`__."
msgstr ""

#: ../source/specifications/core-metadata.rst:485
#: ../source/specifications/core-metadata.rst:574
#: ../source/specifications/core-metadata.rst:691
#: ../source/specifications/core-metadata.rst:715
#: af52cbf5891a41d58fa40592782752d7
#: f9a08c97890648c6b70f54dff28f63cf
#: 82a97b7aab114f4dbcdfd3f0a79fa0bb
#: c74152f8fbaf406c90320d2ffa6964a9
msgid "This field may be followed by an environment marker after a semicolon."
msgstr ""

#: ../source/specifications/core-metadata.rst:496
#: 1e19853014f94562bd3887e51bf97d40
msgid "Requires-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:499
#: ../source/specifications/core-metadata.rst:561
#: ../source/specifications/core-metadata.rst:663
#: ../source/specifications/core-metadata.rst:704
#: ef179e410d644cb68e0a0d23552bc4ed
#: b09dda1861984b78a2020ce70d3f9823
#: b6967aceabb74d6eaf8d0b3e8619af5b
#: 6d696b47ab3e4e0998291b439a49fb73
msgid "The field format specification was relaxed to accept the syntax used by popular publishing tools."
msgstr ""

#: ../source/specifications/core-metadata.rst:503
#: 04e37b80046c4a9d9dd7b599431be3a2
msgid "Each entry contains a string naming some other distutils project required by this distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:506
#: 14c5d2c073864466bda87c1415ae5251
msgid "The format of a requirement string contains from one to four parts:"
msgstr ""

#: ../source/specifications/core-metadata.rst:508
#: b12dcd2a72c04e5eb09503ad9fb323cd
msgid "A project name, in the same format as the ``Name:`` field. The only mandatory part."
msgstr ""

#: ../source/specifications/core-metadata.rst:510
#: b59e944f08ce48c18800cede52c5e337
msgid "A comma-separated list of 'extra' names. These are defined by the required project, referring to specific features which may need extra dependencies."
msgstr ""

#: ../source/specifications/core-metadata.rst:513
#: bfe42e504d88407eac8af9e3da13113a
msgid "A version specifier. Tools parsing the format should accept optional parentheses around this, but tools generating it should not use parentheses."
msgstr ""

#: ../source/specifications/core-metadata.rst:516
#: 7d87e1c70ee64d70ba7fe1a7f2e4e929
msgid "An environment marker after a semicolon. This means that the requirement is only needed in the specified conditions."
msgstr ""

#: ../source/specifications/core-metadata.rst:519
#: f9536cd15bd44e16a723e4dc243cccae
msgid "See :pep:`508` for full details of the allowed format."
msgstr ""

#: ../source/specifications/core-metadata.rst:521
#: e130b15318dd4e0bb6b9304a6ceac19f
msgid "The project names should correspond to names as found on the `Python Package Index`_."
msgstr ""

#: ../source/specifications/core-metadata.rst:524
#: 077c8bf03b984a64905b59a987b05437
msgid "Version specifiers must follow the rules described in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:538
#: 63b1407ed62f445e9e658969a2a09895
msgid "Requires-Python"
msgstr ""

#: ../source/specifications/core-metadata.rst:542
#: a8f53734ebae420cbdbb7ad8dece2235
msgid "This field specifies the Python version(s) that the distribution is guaranteed to be compatible with. Installation tools may look at this when picking which version of a project to install."
msgstr ""

#: ../source/specifications/core-metadata.rst:546
#: 62a064f4f3bd432a9eed4827488cacf8
msgid "The value must be in the format specified in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:548
#: a1c3489511514ab39b465a4c609c8500
msgid "This field cannot be followed by an environment marker."
msgstr ""

#: ../source/specifications/core-metadata.rst:558
#: 3d66ffbfd22d4565871d2477d3e8d361
msgid "Requires-External (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:565
#: fc6279b3bb534c03a7688028739662ba
msgid "Each entry contains a string describing some dependency in the system that the distribution is to be used.  This field is intended to serve as a hint to downstream project maintainers, and has no semantics which are meaningful to the ``distutils`` distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:570
#: fbefb4fc7b9e41dd937db576674da557
msgid "The format of a requirement string is a name of an external dependency, optionally followed by a version declaration within parentheses."
msgstr ""

#: ../source/specifications/core-metadata.rst:576
#: 6259e0a95f5f420587935433c60cd0db
msgid "Because they refer to non-Python software releases, version numbers for this field are **not** required to conform to the format specified in :pep:`440`:  they should correspond to the version scheme used by the external dependency."
msgstr ""

#: ../source/specifications/core-metadata.rst:581
#: d951c36e989244f4900fb0ead8331098
msgid "Notice that there is no particular rule on the strings to be used."
msgstr ""

#: ../source/specifications/core-metadata.rst:593
#: 29b2c99254f8421f9c7b7cba6f95e739
msgid "Project-URL (multiple-use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:597
#: dc5d983365fc4bc5ba75c2bb4867437e
msgid "A string containing a browsable URL for the project and a label for it, separated by a comma."
msgstr ""

#: ../source/specifications/core-metadata.rst:604
#: 4c681a2490534249a6739e6f2c9e1f96
msgid "The label is free text limited to 32 characters."
msgstr ""

#: ../source/specifications/core-metadata.rst:612
#: aa9dc51892fe4760a39a5814f0b842ee
msgid "Provides-Extra (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:616
#: 1c4404946d5246909482f7aad3740db4
msgid "A string containing the name of an optional feature. Must be a valid Python identifier. May be used to make a dependency conditional on whether the optional feature has been requested."
msgstr ""

#: ../source/specifications/core-metadata.rst:625
#: 67455d1887bd4787bb64e173d237de9a
msgid "A second distribution requires an optional dependency by placing it inside square brackets, and can request multiple features by separating them with a comma (,). The requirements are evaluated for each requested feature and added to the set of requirements for the distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:635
#: 6c804518287a4e6fba10d0828775712a
msgid "Two feature names ``test`` and ``doc`` are reserved to mark dependencies that are needed for running automated tests and generating documentation, respectively."
msgstr ""

#: ../source/specifications/core-metadata.rst:639
#: e7afa8f4ca344216b78ba334eac55d89
msgid "It is legal to specify ``Provides-Extra:`` without referencing it in any ``Requires-Dist:``."
msgstr ""

#: ../source/specifications/core-metadata.rst:644
#: 103c53342f094ff3837dc18811085b71
msgid "Rarely Used Fields"
msgstr ""

#: ../source/specifications/core-metadata.rst:646
#: a1d3b1716d1e41bc8591e347b3bb15ce
msgid "The fields in this section are currently rarely used, as their design was inspired by comparable mechanisms in Linux package management systems, and it isn't at all clear how tools should interpret them in the context of an open index server such as `PyPI <https://pypi.org>`__."
msgstr ""

#: ../source/specifications/core-metadata.rst:651
#: 6739d9cb0a0c445daa6d447c6df31019
msgid "As a result, popular installation tools ignore them completely, which in turn means there is little incentive for package publishers to set them appropriately. However, they're retained in the metadata specification, as they're still potentially useful for informational purposes, and can also be used for their originally intended purpose in combination with a curated package repository."
msgstr ""

#: ../source/specifications/core-metadata.rst:660
#: d514ae5f1a884eb98ac96dfcacdf5c9b
msgid "Provides-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:667
#: 6dff2dca58844ccea66c917fef4ec14a
msgid "Each entry contains a string naming a Distutils project which is contained within this distribution.  This field *must* include the project identified in the ``Name`` field, followed by the version : Name (Version)."
msgstr ""

#: ../source/specifications/core-metadata.rst:672
#: 1947bf46ce014f5b97cba89daa076c7a
msgid "A distribution may provide additional names, e.g. to indicate that multiple projects have been bundled together.  For instance, source distributions of the ``ZODB`` project have historically included the ``transaction`` project, which is now available as a separate distribution.  Installing such a source distribution satisfies requirements for both ``ZODB`` and ``transaction``."
msgstr ""

#: ../source/specifications/core-metadata.rst:679
#: 84c5473bc8a240f0b37477fa0626f9e1
msgid "A distribution may also provide a \"virtual\" project name, which does not correspond to any separately-distributed project:  such a name might be used to indicate an abstract capability which could be supplied by one of multiple projects.  E.g., multiple projects might supply RDBMS bindings for use by a given ORM:  each project might declare that it provides ``ORM-bindings``, allowing other projects to depend only on having at most one of them installed."
msgstr ""

#: ../source/specifications/core-metadata.rst:687
#: 164ddebe3e7743b8954b12583756df3c
msgid "A version declaration may be supplied and must follow the rules described in :doc:`version-specifiers`. The distribution's version number will be implied if none is specified."
msgstr ""

#: ../source/specifications/core-metadata.rst:701
#: 1585e13d66b3438ca091baff812abf0f
msgid "Obsoletes-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:708
#: c4dbcffec10c42e7b9a65d45eda8d129
msgid "Each entry contains a string describing a distutils project's distribution which this distribution renders obsolete, meaning that the two projects should not be installed at the same time."
msgstr ""

#: ../source/specifications/core-metadata.rst:712
#: d428b1dbbb2d4e6a8193b3217b15a880
msgid "Version declarations can be supplied.  Version numbers must be in the format specified in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:717
#: f68fb1922696479899343e52de15d789
msgid "The most common use of this field will be in case a project name changes, e.g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install Torqued Python, the Gorgon distribution should be removed."
msgstr ""

#: ../source/specifications/core-metadata.rst:730
#: b3f93c289d1244f08e54f4b74d4d9335
msgid "reStructuredText markup: http://docutils.sourceforge.net/"
msgstr ""

#: ../source/specifications/core-metadata.rst:735
#: ee218b8669b14fdc96eb9f58be9856ea
msgid "RFC 822 Long Header Fields: http://www.freesoft.org/CIE/RFC/822/7.htm"
msgstr ""

#: ../source/specifications/declaring-build-dependencies.rst:6
#: 88ab047a518e46a289ad3bcbed854ff2
msgid "Declaring build system dependencies"
msgstr ""

#: ../source/specifications/declaring-build-dependencies.rst:8
#: 6c734570b14b42d2929727a76e7b51db
msgid "`pyproject.toml` is a build system independent file format defined in :pep:`518` that projects may provide in order to declare any Python level dependencies that must be installed in order to run the project's build system successfully."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:5
#: 7b6eb5128b97497880969e6e1b4f3fb6
msgid "Declaring project metadata"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:7
#: bd626fc128dd4c959ccd8de186149484
msgid ":pep:`621` specifies how to write a project's :ref:`core metadata <core-metadata>` in a ``pyproject.toml`` file for packaging-related tools to consume. It defines the following specification as the canonical source for the format used."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:12
#: f9c45157a8b04adb881c2b70b7ca4bb8
msgid "There are two kinds of metadata: *static* and *dynamic*. Static metadata is specified in the ``pyproject.toml`` file directly and cannot be specified or changed by a tool. Dynamic metadata is listed via the ``dynamic`` field (defined later in this specification) and represents metadata that a tool will later provide."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:18
#: 9230b3c4ae32471d94f1fc31e21a8429
msgid "The fields defined in this specification MUST be in a table named ``[project]`` in ``pyproject.toml``. No tools may add fields to this table which are not defined by this specification. For tools wishing to store their own settings in ``pyproject.toml``, they may use the ``[tool]`` table as defined in the :ref:`build dependency declaration specification <declaring-build-dependencies>`. The lack of a ``[project]`` table implicitly means the build back-end will dynamically provide all fields."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:27
#: cf23c29408dd49dc8af4ca18b3cb9b62
msgid "The only fields required to be statically defined are:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:29
#: ../source/specifications/declaring-project-metadata.rst:41
#: 92615ac7a2234d81aa5482ed2d1f12b5
#: f9f2fdb847c645f4b67bb8353d2c937e
msgid "``name``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:31
#: 4ac274e9370e408a8089061f00f88e55
msgid "The fields which are required but may be specified *either* statically or listed as dynamic are:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:34
#: ../source/specifications/declaring-project-metadata.rst:54
#: 23ed919baa724d61bd79cdde618cd7dd
#: b5e34b5a69db46bf85772bdf19998c9c
msgid "``version``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:36
#: 72c630b3d6964de3ba46ddb8d9116b8f
msgid "All other fields are considered optional and my be specified statically, listed as dynamic, or left unspecified."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:43
#: ../source/specifications/declaring-project-metadata.rst:56
#: ../source/specifications/declaring-project-metadata.rst:68
#: ../source/specifications/declaring-project-metadata.rst:117
#: 7a28edde90f0413fa08023e20998a75b
#: 06dfbe2d80924e8f9c4e40a89316a7b4
#: 8e14de38298443ec8d9e2dbd3e05cddd
#: 0b2f8a828d0547cdbed7a21bb0fe6a65
msgid "TOML_ type: string"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:44
#: d2efb2e0bc5740d5aed5acccbbdb028d
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name <core-metadata-name>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:47
#: 84419efa9c8d438d9206f41ef7d0c409
msgid "The name of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:49
#: 692b104b29b44b7bb1955179f62852a7
msgid "Tools SHOULD normalize this name, as specified by :pep:`503`, as soon as it is read for internal consistency."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:57
#: 71c9a6b9648c4591b7349c345d6cc3d1
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Version <core-metadata-version>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:60
#: 1f402c2a0e064047ab0704a436cc653e
msgid "The version of the project as supported by :pep:`440`."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:62
#: 52cdf2b9671943128ba404a6ba1d477e
msgid "Users SHOULD prefer to specify already-normalized versions."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:66
#: b00c2b6a01d943d9bceb627496a17b79
msgid "``description``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:69
#: fd962f01009f4311bb5b47ec56ca200b
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Summary <core-metadata-summary>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:72
#: 86003ec9a29f4b7781cca3a2c1c56080
msgid "The summary description of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:76
#: 475f09c333254b43b49534cb91c73ade
msgid "``readme``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:78
#: b44f730383834b3abb741929eb25a606
msgid "TOML_ type: string or table"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:79
#: 4ff37c6519564763843459f088b84096
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Description <core-metadata-description>` and :ref:`Description-Content-Type <core-metadata-description-content-type>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:83
#: 2f218d1dbeed4cb48aaafda6419adf65
msgid "The full description of the project (i.e. the README)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:85
#: e14f22a857d94424b609a245544cde64
msgid "The field accepts either a string or a table. If it is a string then it is a path relative to ``pyproject.toml`` to a text file containing the full description. Tools MUST assume the file's encoding is UTF-8. If the file path ends in a case-insensitive ``.md`` suffix, then tools MUST assume the content-type is ``text/markdown``. If the file path ends in a case-insensitive ``.rst``, then tools MUST assume the content-type is ``text/x-rst``. If a tool recognizes more extensions than this PEP, they MAY infer the content-type for the user without specifying this field as ``dynamic``. For all unrecognized suffixes when a content-type is not provided, tools MUST raise an error."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:96
#: 5cfcff0493ad4659ba519c5baa5b5b89
msgid "The ``readme`` field may also take a table. The ``file`` key has a string value representing a path relative to ``pyproject.toml`` to a file containing the full description. The ``text`` key has a string value which is the full description. These keys are mutually-exclusive, thus tools MUST raise an error if the metadata specifies both keys."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:103
#: aec6ebc63531458dadb1cc7026216b58
msgid "A table specified in the ``readme`` field also has a ``content-type`` field which takes a string specifying the content-type of the full description. A tool MUST raise an error if the metadata does not specify this field in the table. If the metadata does not specify the ``charset`` parameter, then it is assumed to be UTF-8. Tools MAY support other encodings if they choose to. Tools MAY support alternative content-types which they can transform to a content-type as supported by the :ref:`core metadata <core-metadata>`. Otherwise tools MUST raise an error for unsupported content-types."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:115
#: d915e3dd1aad4ef79dd42590ac4121e0
msgid "``requires-python``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:118
#: 6c40772162194633b22c95a39eecb1fe
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-Python <core-metadata-requires-python>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:121
#: 4d0de20ee5ff41188498b91e490b6c33
msgid "The Python version requirements of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:125
#: eac06213704e49cfb2931f0e33a06ea3
msgid "``license``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:127
#: 2d6a4b79e9314ac0ad64e6bcfc47230a
msgid "TOML_ type: table"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:128
#: a9d6b467d0c84ec2b3d876f0965e8881
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License <core-metadata-license>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:131
#: b7793a273e62416b93e664dba088de1a
msgid "The table may have one of two keys. The ``file`` key has a string value that is a file path relative to ``pyproject.toml`` to the file which contains the license for the project. Tools MUST assume the file's encoding is UTF-8. The ``text`` key has a string value which is the license of the project.  These keys are mutually exclusive, so a tool MUST raise an error if the metadata specifies both keys."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:140
#: 5d54ae51e0e744e099d176ea3bce53ac
msgid "``authors``/``maintainers``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:142
#: 8139ca400b534079951970a9ba8aa617
msgid "TOML_ type: Array of inline tables with string keys and values"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:143
#: 0fed2ac6c5e2468b839512de4000d8a4
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Author <core-metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :ref:`Maintainer <core-metadata-maintainer>`, and :ref:`Maintainer-email <core-metadata-maintainer-email>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:149
#: 6e7a100df36f428fb900d6fcf4ba2840
msgid "The people or organizations considered to be the \"authors\" of the project. The exact meaning is open to interpretation — it may list the original or primary authors, current maintainers, or owners of the package."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:154
#: 2fdcec9bc1d24e0da427e4083a70fba6
msgid "The \"maintainers\" field is similar to \"authors\" in that its exact meaning is open to interpretation."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:157
#: 12a3a9d2402b4e2493d976c6142aecd1
msgid "These fields accept an array of tables with 2 keys: ``name`` and ``email``. Both values must be strings. The ``name`` value MUST be a valid email name (i.e. whatever can be put as a name, before an email, in `RFC 822`_) and not contain commas. The ``email`` value MUST be a valid email address. Both keys are optional."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:163
#: e2026a7e067e4091a3997462ffefac4f
msgid "Using the data to fill in :ref:`core metadata <core-metadata>` is as follows:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:166
#: 4c1e1193628441748b2a934b27b301ca
msgid "If only ``name`` is provided, the value goes in :ref:`Author <core-metadata-author>` or :ref:`Maintainer <core-metadata-maintainer>` as appropriate."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:169
#: 466aaa861662427abbd454b78da6b67e
msgid "If only ``email`` is provided, the value goes in :ref:`Author-email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-email>` as appropriate."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:173
#: b3a7a71079f5412da0e375f1125b042e
msgid "If both ``email`` and ``name`` are provided, the value goes in :ref:`Author-email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-email>` as appropriate, with the format ``{name} <{email}>``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:177
#: d42b25a07d294fa183135e16097a5906
msgid "Multiple values should be separated by commas."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:181
#: ca01cb559b4c468f8fcceb6d13c1ae0b
msgid "``keywords``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:183
#: ../source/specifications/declaring-project-metadata.rst:193
#: 23f7bd5dd722428d84be3bd0b5fef838
#: d1a73328415e4f4fa21f70b1dcba4172
msgid "TOML_ type: array of strings"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:184
#: 914d9e1fb6a44dd4ad307473ad5e0afb
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Keywords <core-metadata-keywords>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:187
#: cd6e0085d5e04aa3a2aa8ffa8ad4b82b
msgid "The keywords for the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:191
#: d77636fc541f4893892b437432706577
msgid "``classifiers``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:194
#: b9e18b33ed3c42929964859f92d26fdb
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Classifier <core-metadata-classifier>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:197
#: e2fa93f6cafe462c88522afd19f0e58b
msgid "Trove classifiers which apply to the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:201
#: 4efc1b11239e4bdfb31596a8d4de056d
msgid "``urls``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:203
#: 78ac322145964de4b381388659da91ef
msgid "TOML_ type: table with keys and values of strings"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:204
#: 6205a69151a84405837668b994cec177
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Project-URL <core-metadata-project-url>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:207
#: 9d04960fbc2a43b09a569bbf383fe70a
msgid "A table of URLs where the key is the URL label and the value is the URL itself."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:212
#: 979d0680eb43487388cff5609003f691
msgid "Entry points"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:214
#: e872bff8283c48b2a7a4f44b005fed9a
msgid "TOML_ type: table (``[project.scripts]``, ``[project.gui-scripts]``, and ``[project.entry-points]``)"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:216
#: d910120c141648209b15875d8b6f4a51
msgid ":ref:`Entry points specification <entry-points>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:218
#: 16aba8c8113a4e3abc3ea24a9405b11f
msgid "There are three tables related to entry points. The ``[project.scripts]`` table corresponds to the ``console_scripts`` group in the :ref:`entry points specification <entry-points>`. The key of the table is the name of the entry point and the value is the object reference."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:224
#: 92618514d7734c70bc1ba51b3681449b
msgid "The ``[project.gui-scripts]`` table corresponds to the ``gui_scripts`` group in the :ref:`entry points specification <entry-points>`. Its format is the same as ``[project.scripts]``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:228
#: a9704d5465b84f708a1c715e15d1ad1e
msgid "The ``[project.entry-points]`` table is a collection of tables. Each sub-table's name is an entry point group. The key and value semantics are the same as ``[project.scripts]``. Users MUST NOT create nested sub-tables but instead keep the entry point groups to only one level deep."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:234
#: a6589f4de5224370b90d5a6e73f355b6
msgid "Build back-ends MUST raise an error if the metadata defines a ``[project.entry-points.console_scripts]`` or ``[project.entry-points.gui_scripts]`` table, as they would be ambiguous in the face of ``[project.scripts]`` and ``[project.gui-scripts]``, respectively."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:242
#: 44bbd9fa08794ad7bdf8795c2a9b6bbd
msgid "``dependencies``/``optional-dependencies``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:244
#: 5c0599be736e42db94dd9129933d53a2
msgid "TOML_ type: Array of :pep:`508` strings (``dependencies``), and a table with values of arrays of :pep:`508` strings (``optional-dependencies``)"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:247
#: 5ca045e4d244456baabadfe2d15eeb6e
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-Dist <core-metadata-requires-dist>` and :ref:`Provides-Extra <core-metadata-provides-extra>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:251
#: 1375bfd7d15c4c16a6271c5b87c76238
msgid "The (optional) dependencies of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:253
#: b73cb4962b0f4245af6b2d18267c3554
msgid "For ``dependencies``, it is a key whose value is an array of strings. Each string represents a dependency of the project and MUST be formatted as a valid :pep:`508` string. Each string maps directly to a :ref:`Requires-Dist <core-metadata-requires-dist>` entry."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:258
#: 2fd200171e724d30878dcf25b2b5e363
msgid "For ``optional-dependencies``, it is a table where each key specifies an extra and whose value is an array of strings. The strings of the arrays must be valid :pep:`508` strings. The keys MUST be valid values for :ref:`Provides-Extra <core-metadata-provides-extra>`. Each value in the array thus becomes a corresponding :ref:`Requires-Dist <core-metadata-requires-dist>` entry for the matching :ref:`Provides-Extra <core-metadata-provides-extra>` metadata."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:269
#: 93457996e41c4611b7a86e4294a8ea4c
msgid "``dynamic``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:271
#: ec0c023f11434e03bc693e92db2102ea
msgid "TOML_ type: array of string"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:272
#: 9474407f39b8449a8eddd49b06e706ad
msgid "A corresponding :ref:`core metadata <core-metadata>` field does not exist"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:275
#: 36955a8aea7c4e06aa54c2aaf5c6f672
msgid "Specifies which fields listed by this PEP were intentionally unspecified so another tool can/will provide such metadata dynamically. This clearly delineates which metadata is purposefully unspecified and expected to stay unspecified compared to being provided via tooling later on."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:281
#: e353f178a1464515bbc19e95771ba31b
msgid "A build back-end MUST honour statically-specified metadata (which means the metadata did not list the field in ``dynamic``)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:283
#: 40c704c8d54a455a8737a9c36b377195
msgid "A build back-end MUST raise an error if the metadata specifies ``name`` in ``dynamic``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:285
#: c3adbebbc3c74a6691735652df480950
msgid "If the :ref:`core metadata <core-metadata>` specification lists a field as \"Required\", then the metadata MUST specify the field statically or list it in ``dynamic`` (build back-ends MUST raise an error otherwise, i.e. it should not be possible for a required field to not be listed somehow in the ``[project]`` table)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:290
#: fac9073e68384fefbef1721d81ec4d34
msgid "If the :ref:`core metadata <core-metadata>` specification lists a field as \"Optional\", the metadata MAY list it in ``dynamic`` if the expectation is a build back-end will provide the data for the field later."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:294
#: da5e1d4fb3c34b88b0a5b24b884705b2
msgid "Build back-ends MUST raise an error if the metadata specifies a field statically as well as being listed in ``dynamic``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:296
#: 06a47b4750824940ac39847572d465fb
msgid "If the metadata does not list a field in ``dynamic``, then a build back-end CANNOT fill in the requisite metadata on behalf of the user (i.e. ``dynamic`` is the only way to allow a tool to fill in metadata and the user must opt into the filling in)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:300
#: 3183661ca13a444abf82f1accadc45bb
msgid "Build back-ends MUST raise an error if the metadata specifies a field in ``dynamic`` but the build back-end was unable to determine the data for it (omitting the data, if determined to be the accurate value, is acceptable)."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:6
#: e9d6d50b0ba0424c9b4ddf9f5f843bb5
msgid "Dependency specifiers"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:8
#: b3648a3da1d34a23b864ebde2cca7bc2
msgid "The dependency specifier format used to declare a dependency on another component is defined in :pep:`508`."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:11
#: 596bf415143b460ea60223fbeaa5787e
msgid "The environment markers section in this PEP supersedes the environment markers section in :pep:`345`."
msgstr ""

#: ../source/specifications/direct-url.rst:6
#: d850214424b64ec287c501caafc37b05
msgid "Recording the Direct URL Origin of installed distributions"
msgstr ""

#: ../source/specifications/direct-url.rst:8
#: b4066dd9705d4664943362b0867167b6
msgid "This document specifies a :file:`direct_url.json` file in the :file:`*.dist-info` directory of an installed distribution, to record the Direct URL Origin of the distribution. The layout of this file was originally specified in :pep:`610` and is formally documented here."
msgstr ""

#: ../source/specifications/direct-url.rst:17
#: dbb3dfe4e6a54bb289478e6f54cbbe24
msgid "Specification"
msgstr ""

#: ../source/specifications/direct-url.rst:19
#: 6c17bae5a5c14683b619be30b0baa200
msgid "The :file:`direct_url.json` file MUST be created in the :file:`*.dist-info` directory by installers when installing a distribution from a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""

#: ../source/specifications/direct-url.rst:23
#: ../source/specifications/recording-installed-packages.rst:206
#: e81811a20b8e43f4b5c7eb899478d7e0
#: 2f8441417af244eea6a72ba1fb046176
msgid "This file MUST NOT be created when installing a distribution from an other type of requirement (i.e. name plus version specifier)."
msgstr ""

#: ../source/specifications/direct-url.rst:26
#: 36feb5b49005484a86de24e88d4dedcd
msgid "This JSON file MUST be a dictionary, compliant with `RFC 8259 <https://tools.ietf.org/html/rfc8259>`_ and UTF-8 encoded."
msgstr ""

#: ../source/specifications/direct-url.rst:29
#: 92deae2857c7476aab599203c62b4e46
msgid "If present, it MUST contain at least two fields. The first one is ``url``, with type ``string``. Depending on what ``url`` refers to, the second field MUST be one of ``vcs_info`` (if ``url`` is a VCS reference), ``archive_info`` (if ``url`` is a source archives or a wheel), or ``dir_info`` (if ``url``  is a local directory). These info fields have a (possibly empty) subdictionary as value, with the possible keys defined below."
msgstr ""

#: ../source/specifications/direct-url.rst:36
#: 8dcaab09625644e2855cd5f9cf732007
msgid "``url`` MUST be stripped of any sensitive authentication information, for security reasons."
msgstr ""

#: ../source/specifications/direct-url.rst:39
#: 08dd2fc2bc6841d88636494c10784713
msgid "The user:password section of the URL MAY however be composed of environment variables, matching the following regular expression::"
msgstr ""

#: ../source/specifications/direct-url.rst:45
#: 638f6c594ccf4dd5bea9c423ffcb61c7
msgid "Additionally, the user:password section of the URL MAY be a well-known, non security sensitive string. A typical example is ``git`` in the case of an URL such as ``ssh://git@gitlab.com/user/repo``."
msgstr ""

#: ../source/specifications/direct-url.rst:49
#: 0160ef634ea34c24a94d5f9aac9f8e63
msgid "When ``url`` refers to a VCS repository, the ``vcs_info`` key MUST be present as a dictionary with the following keys:"
msgstr ""

#: ../source/specifications/direct-url.rst:52
#: 6bfa6636e83246a89ceb24d938cbd70c
msgid "A ``vcs`` key (type ``string``) MUST be present, containing the name of the VCS (i.e. one of ``git``, ``hg``, ``bzr``, ``svn``). Other VCS's SHOULD be registered by writing a PEP to amend this specification. The ``url`` value MUST be compatible with the corresponding VCS, so an installer can hand it off without transformation to a checkout/download command of the VCS."
msgstr ""

#: ../source/specifications/direct-url.rst:58
#: 745fc474e721457f8ce326ceaba3f93d
msgid "A ``requested_revision`` key (type ``string``) MAY be present naming a branch/tag/ref/commit/revision/etc (in a format compatible with the VCS) to install."
msgstr ""

#: ../source/specifications/direct-url.rst:61
#: dc1a003c99d44492a62a25e10eb97813
msgid "A ``commit_id`` key (type ``string``) MUST be present, containing the exact commit/revision number that was installed. If the VCS supports commit-hash based revision identifiers, such commit-hash MUST be used as ``commit_id`` in order to reference the immutable version of the source code that was installed."
msgstr ""

#: ../source/specifications/direct-url.rst:68
#: 00ab7bb253f14b3fadfdc888cb1d0049
msgid "When ``url`` refers to a source archive or a wheel, the ``archive_info`` key MUST be present as a dictionary with the following key:"
msgstr ""

#: ../source/specifications/direct-url.rst:71
#: 64fb4e929d574e368ee2b7f4d3999ded
msgid "A ``hash`` key (type ``string``) SHOULD be present, with value ``<hash-algorithm>=<expected-hash>``. It is RECOMMENDED that only hashes which are unconditionally provided by the latest version of the standard library's ``hashlib`` module be used for source archive hashes. At time of writing, that list consists of 'md5', 'sha1', 'sha224', 'sha256', 'sha384', and 'sha512'."
msgstr ""

#: ../source/specifications/direct-url.rst:78
#: e4027e9572be4bdfb6a22252b4bddd2c
msgid "When ``url`` refers to a local directory, the ``dir_info`` key MUST be present as a dictionary with the following key:"
msgstr ""

#: ../source/specifications/direct-url.rst:81
#: b6208f162347452b8f986c013228f425
msgid "``editable`` (type: ``boolean``): ``true`` if the distribution was installed in editable mode, ``false`` otherwise. If absent, default to ``false``."
msgstr ""

#: ../source/specifications/direct-url.rst:84
#: 6e6ea78d54f5488abe84673d4b94602e
msgid "When ``url`` refers to a local directory, it MUST have the ``file`` sheme and be compliant with `RFC 8089 <https://tools.ietf.org/html/rfc8089>`_. In particular, the path component must be absolute. Symbolic links SHOULD be preserved when making relative paths absolute."
msgstr ""

#: ../source/specifications/direct-url.rst:91
#: c812634c32564236bfb79932ddeae735
msgid "When the requested URL has the file:// scheme and points to a local directory that happens to contain a VCS checkout, installers MUST NOT attempt to infer any VCS information and therefore MUST NOT output any VCS related information (such as ``vcs_info``) in :file:`direct_url.json`."
msgstr ""

#: ../source/specifications/direct-url.rst:96
#: 4f1027ed0001448badc68caf618a89b9
msgid "A top-level ``subdirectory`` field MAY be present containing a directory path, relative to the root of the VCS repository, source archive or local directory, to specify where ``pyproject.toml`` or ``setup.py`` is located."
msgstr ""

#: ../source/specifications/direct-url.rst:102
#: a183e1ebe16b490d97e9a387324655c7
msgid "As a general rule, installers should as much as possible preserve the information that was provided in the requested URL when generating :file:`direct_url.json`. For example user:password environment variables should be preserved and ``requested_revision`` should reflect the revision that was provided in the requested URL as faithfully as possible. This information is however *enriched* with more precise data, such as ``commit_id``."
msgstr ""

#: ../source/specifications/direct-url.rst:110
#: 63de56b552a24641ac6841e11757d737
msgid "Registered VCS"
msgstr ""

#: ../source/specifications/direct-url.rst:112
#: 9ac2224887d94623a68c997a48d0a2b8
msgid "This section lists the registered VCS's; expanded, VCS-specific information on how to use the ``vcs``, ``requested_revision``, and other fields of ``vcs_info``; and in some cases additional VCS-specific fields. Tools MAY support other VCS's although it is RECOMMENDED to register them by writing a PEP to amend this specification. The ``vcs`` field SHOULD be the command name (lowercased). Additional fields that would be necessary to support such VCS SHOULD be prefixed with the VCS command name."
msgstr ""

#: ../source/specifications/direct-url.rst:122
#: d0c29e8867c5432183e2267651e8e825
msgid "Git"
msgstr ""

#: ../source/specifications/direct-url.rst:124
#: ../source/specifications/direct-url.rst:156
#: ../source/specifications/direct-url.rst:179
#: ../source/specifications/direct-url.rst:202
#: c9e0574b85934e1ab43489db7133645b
#: 714dc789f280419b85312d7c18dd7d68
#: f2a8d6f518de456489056156f367d074
#: 26704379e9894297a9c0c4c9eb620507
msgid "Home page"
msgstr ""

#: ../source/specifications/direct-url.rst:126
#: 7ff5182e60ba4172b44e8fde39105eea
msgid "https://git-scm.com/"
msgstr ""

#: ../source/specifications/direct-url.rst:128
#: ../source/specifications/direct-url.rst:160
#: ../source/specifications/direct-url.rst:183
#: ../source/specifications/direct-url.rst:206
#: 0ad97d09399e424e9a948b7eca7e699d
#: b163e9c94458438680e25a2ec52c6b72
#: 3fe1a572455a48e4a2a03e2b6ad5e6c5
#: c33a19330d374e679ca9ad1207fd5b78
msgid "vcs command"
msgstr ""

#: ../source/specifications/direct-url.rst:130
#: ../source/specifications/direct-url.rst:134
#: a9b1467ba1614c00ab7614cd201502bb
#: e0a084dc13554cb28ccb4c21482ab5a2
msgid "git"
msgstr ""

#: ../source/specifications/direct-url.rst:132
#: ../source/specifications/direct-url.rst:164
#: ../source/specifications/direct-url.rst:187
#: ../source/specifications/direct-url.rst:210
#: 88fd7bbe863e464a9b40fd6c62f20191
#: 18ada98c4ff249bb953e8b25aec1237b
#: 42926c9de377411f90e734fdcb324a56
#: 8d288a9d3c7643dda4711b801f5b7e22
msgid "``vcs`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:136
#: ../source/specifications/direct-url.rst:168
#: ../source/specifications/direct-url.rst:191
#: ../source/specifications/direct-url.rst:214
#: 120a023c50ac46bb83708208bd5fcbff
#: 2089b16acfbc41b094255085e6e6090f
#: b08a631f242443009364fab4c2342148
#: 604a67c701ce4b6b92228f8fe1fd6d1f
msgid "``requested_revision`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:138
#: f719a5b192b94947a1a5adcf3484384c
msgid "A tag name, branch name, Git ref, commit hash, shortened commit hash, or other commit-ish."
msgstr ""

#: ../source/specifications/direct-url.rst:141
#: ../source/specifications/direct-url.rst:172
#: ../source/specifications/direct-url.rst:195
#: ../source/specifications/direct-url.rst:219
#: 20ccb7c08d7b41e98c5042b58cc299ec
#: e360e84767954cf293b4369563e630ef
#: a0afaca36b5e4b6297fc33efde5dd342
#: f7e46283b234431cae82d1cd424e4be1
msgid "``commit_id`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:143
#: 622626d8e45449d0bb9ecd43b7011c5e
msgid "A commit hash (40 hexadecimal characters sha1)."
msgstr ""

#: ../source/specifications/direct-url.rst:147
#: 84bcb83de4874e0794bfc902a6c578c9
msgid "Installers can use the ``git show-ref`` and ``git symbolic-ref`` commands to determine if the ``requested_revision`` corresponds to a Git ref. In turn, a ref beginning with ``refs/tags/`` corresponds to a tag, and a ref beginning with ``refs/remotes/origin/`` after cloning corresponds to a branch."
msgstr ""

#: ../source/specifications/direct-url.rst:154
#: d0ffc6d9969c4bc294a9e772b775bbd9
msgid "Mercurial"
msgstr ""

#: ../source/specifications/direct-url.rst:158
#: eda2dc59dc014d0b87b2d0d9bdd6df95
msgid "https://www.mercurial-scm.org/"
msgstr ""

#: ../source/specifications/direct-url.rst:162
#: ../source/specifications/direct-url.rst:166
#: 08b6c2b128e6498a898080645f06ea94
#: 04cd05e813ae464abd289309009ba0bc
msgid "hg"
msgstr ""

#: ../source/specifications/direct-url.rst:170
#: 2f3dac489ef94e279468d2d7eda42935
msgid "A tag name, branch name, changeset ID, shortened changeset ID."
msgstr ""

#: ../source/specifications/direct-url.rst:174
#: 5bfd290a97614e398efd0ea8e487c21f
msgid "A changeset ID (40 hexadecimal characters)."
msgstr ""

#: ../source/specifications/direct-url.rst:177
#: 2de977765a0a4225a4768526d49588c2
msgid "Bazaar"
msgstr ""

#: ../source/specifications/direct-url.rst:181
#: a3062d6643a74bebb723cc5b07cf8d11
msgid "https://bazaar.canonical.com/"
msgstr ""

#: ../source/specifications/direct-url.rst:185
#: ../source/specifications/direct-url.rst:189
#: 50d338b5849e4c9eb6dd4ee220d1888f
#: cdfc5bd7f7774826bd89737f12e852b9
msgid "bzr"
msgstr ""

#: ../source/specifications/direct-url.rst:193
#: 989ef6331ba24878a7f93b6a6fb88dd4
msgid "A tag name, branch name, revision id."
msgstr ""

#: ../source/specifications/direct-url.rst:197
#: 0fed9ac9df144befa769d980688d433d
msgid "A revision id."
msgstr ""

#: ../source/specifications/direct-url.rst:200
#: f85c8d9b9788436c8f26c09b8476a988
msgid "Subversion"
msgstr ""

#: ../source/specifications/direct-url.rst:204
#: 33cb894ee20140c796744b6306a2f7d5
msgid "https://subversion.apache.org/"
msgstr ""

#: ../source/specifications/direct-url.rst:208
#: ../source/specifications/direct-url.rst:212
#: 9efb2c0f885f4172a10f6bb26c74490b
#: e7a35e05e2b74789a44855c03030bbdc
msgid "svn"
msgstr ""

#: ../source/specifications/direct-url.rst:216
#: 1874991c9ede41b0b34ea1cb1e1d2ec1
msgid "``requested_revision`` must be compatible with ``svn checkout`` ``--revision`` option. In Subversion, branch or tag is part of ``url``."
msgstr ""

#: ../source/specifications/direct-url.rst:221
#: 6d3b3e26e39541b28c8a5fb077958166
msgid "Since Subversion does not support globally unique identifiers, this field is the Subversion revision number in the corresponding repository."
msgstr ""

#: ../source/specifications/direct-url.rst:229
#: 8377681629704906be7eacec026dfc66
msgid "Example direct_url.json"
msgstr ""

#: ../source/specifications/direct-url.rst:231
#: 17a556881c964eac869455f1d7fd68ec
msgid "Source archive:"
msgstr ""

#: ../source/specifications/direct-url.rst:242
#: 9848935cfe1f46a3a5d52d9b38779e84
msgid "Git URL with tag and commit-hash:"
msgstr ""

#: ../source/specifications/direct-url.rst:255
#: 91a44fc0235a473fbd76331e1b2ef378
msgid "Local directory:"
msgstr ""

#: ../source/specifications/direct-url.rst:264
#: 0d09565d70114910a4fc6a0ba112323e
msgid "Local directory installed in editable mode:"
msgstr ""

#: ../source/specifications/direct-url.rst:277
#: 91104db1765a4544afbfb4a8a1469805
msgid "Example pip commands and their effect on direct_url.json"
msgstr ""

#: ../source/specifications/direct-url.rst:279
#: 6e1c7031c05b4d15b6a8495045162e32
msgid "Commands that generate a ``direct_url.json``:"
msgstr ""

#: ../source/specifications/direct-url.rst:281
#: c18f3666aa0b43fb9a2e2002a3ecc65b
msgid "pip install https://example.com/app-1.0.tgz"
msgstr ""

#: ../source/specifications/direct-url.rst:282
#: 71d5b78dd0494f7281d96dd1a3e3858d
msgid "pip install https://example.com/app-1.0.whl"
msgstr ""

#: ../source/specifications/direct-url.rst:283
#: a131cdcf3c5a4ef5a0c6a9e6bb1f6c2c
msgid "pip install \"git+https://example.com/repo/app.git#egg=app&subdirectory=setup\""
msgstr ""

#: ../source/specifications/direct-url.rst:284
#: fafd20e19dd14799a9b1bafeca8aee42
msgid "pip install ./app"
msgstr ""

#: ../source/specifications/direct-url.rst:285
#: c209da874a514aa5aa0970b886001643
msgid "pip install file:///home/user/app"
msgstr ""

#: ../source/specifications/direct-url.rst:286
#: bc4ad6c596a046ecac3b77095d15d635
msgid "pip install --editable \"git+https://example.com/repo/app.git#egg=app&subdirectory=setup\" (in which case, ``url`` will be the local directory where the git repository has been cloned to, and ``dir_info`` will be present with ``\"editable\": true`` and no ``vcs_info`` will be set)"
msgstr ""

#: ../source/specifications/direct-url.rst:290
#: 514c0a58b10b4e5b942c3eb7120978e3
msgid "pip install -e ./app"
msgstr ""

#: ../source/specifications/direct-url.rst:292
#: 26e1656ca4b849a1b615a3bbfc817f3c
msgid "Commands that *do not* generate a ``direct_url.json``"
msgstr ""

#: ../source/specifications/direct-url.rst:294
#: 4683ecf64cfb40d08846f91e33d53fd5
msgid "pip install app"
msgstr ""

#: ../source/specifications/direct-url.rst:295
#: 2f1ccfd6ce8b415fb05e24e932feeac0
msgid "pip install app --no-index --find-links https://example.com/"
msgstr ""

#: ../source/specifications/entry-points.rst:5
#: 84ba2e78c8024f588aed960b9cfba275
msgid "Entry points specification"
msgstr ""

#: ../source/specifications/entry-points.rst:7
#: aafd5ac387834367975efaf8aaf785de
msgid "*Entry points* are a mechanism for an installed distribution to advertise components it provides to be discovered and used by other code. For example:"
msgstr ""

#: ../source/specifications/entry-points.rst:11
#: 84f316edbea9439ba5198acce3c75f72
msgid "Distributions can specify ``console_scripts`` entry points, each referring to a function. When *pip* (or another console_scripts aware installer) installs the distribution, it will create a command-line wrapper for each entry point."
msgstr ""

#: ../source/specifications/entry-points.rst:14
#: c42682601c7341328eeba3766e0ef6bb
msgid "Applications can use entry points to load plugins; e.g. Pygments (a syntax highlighting tool) can use additional lexers and styles from separately installed packages. For more about this, see :doc:`/guides/creating-and-discovering-plugins`."
msgstr ""

#: ../source/specifications/entry-points.rst:19
#: f7cdbb5a92f64163830760e2a7d64dec
msgid "The entry point file format was originally developed to allow packages built with setuptools to provide integration point metadata that would be read at runtime with ``importlib.metadata``. It is now defined as a PyPA interoperability specification in order to allow build tools other than setuptools to publish ``importlib.metadata`` compatible entry point metadata, and runtime libraries other than ``importlib.metadata`` to portably read published entry point metadata (potentially with different caching and conflict resolution strategies)."
msgstr ""

#: ../source/specifications/entry-points.rst:28
#: bd8cb641fbe64d31a5583210296d5c1d
msgid "Data model"
msgstr ""

#: ../source/specifications/entry-points.rst:30
#: b02f7b590d664a5fa4119c261b215c9e
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr ""

#: ../source/specifications/entry-points.rst:32
#: dd6a3e46f33e491d91a2ae1a573bb3bd
msgid "The **group** that an entry point belongs to indicates what sort of object it provides. For instance, the group ``console_scripts`` is for entry points referring to functions which can be used as a command, while ``pygments.styles`` is the group for classes defining pygments styles. The consumer typically defines the expected interface. To avoid clashes, consumers defining a new group should use names starting with a PyPI name owned by the consumer project, followed by ``.``. Group names must be one or more groups of letters, numbers and underscores, separated by dots (regex ``^\\w+(\\.\\w+)*$``)."
msgstr ""

#: ../source/specifications/entry-points.rst:42
#: 93c1fff80fd5430980a9102e74851c09
msgid "The **name** identifies this entry point within its group. The precise meaning of this is up to the consumer. For console scripts, the name of the entry point is the command that will be used to launch it. Within a distribution, entry point names should be unique. If different distributions provide the same name, the consumer decides how to handle such conflicts. The name may contain any characters except ``=``, but it cannot start or end with any whitespace character, or start with ``[``. For new entry points, it is recommended to use only letters, numbers, underscores, dots and dashes (regex ``[\\w.-]+``)."
msgstr ""

#: ../source/specifications/entry-points.rst:51
#: 506d9f77b86b49148d8463520f9bc291
msgid "The **object reference** points to a Python object. It is either in the form ``importable.module``, or ``importable.module:object.attr``. Each of the parts delimited by dots and the colon is a valid Python identifier. It is intended to be looked up like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:64
#: 8f59c82ee9db42c58cb6ac5a931ae85a
msgid "Some tools call this kind of object reference by itself an 'entry point', for want of a better term, especially where it points to a function to launch a program."
msgstr ""

#: ../source/specifications/entry-points.rst:68
#: 0528b7571ba44d8a9fdcda21d7ca5dcb
msgid "There is also an optional property: the **extras** are a set of strings identifying optional features of the distribution providing the entry point. If these are specified, the entry point requires the dependencies of those 'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""

#: ../source/specifications/entry-points.rst:73
#: 0c19e29103bf4bcaa3ac7ebd0eda1bbf
msgid "Using extras for an entry point is no longer recommended. Consumers should support parsing them from existing distributions, but may then ignore them. New publishing tools need not support specifying extras. The functionality of handling extras was tied to setuptools' model of managing 'egg' packages, but newer tools such as pip and virtualenv use a different model."
msgstr ""

#: ../source/specifications/entry-points.rst:80
#: 8218e06126034164838c618bf3147a6c
msgid "File format"
msgstr ""

#: ../source/specifications/entry-points.rst:82
#: 80236a4064184b1ca88b7876192dc524
msgid "Entry points are defined in a file called :file:`entry_points.txt` in the :file:`*.dist-info` directory of the distribution. This is the directory described in :pep:`376` for installed distributions, and in :pep:`427` for wheels.  The file uses the UTF-8 character encoding."
msgstr ""

#: ../source/specifications/entry-points.rst:87
#: cf7cf45c6b9d4b1abc69f84af1e5ec09
msgid "The file contents are in INI format, as read by Python's :mod:`configparser` module. However, configparser treats names as case-insensitive by default, whereas entry point names are case sensitive. A case-sensitive config parser can be made like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:97
#: f109e3ca255d4d8c809b092f7f06df4b
msgid "The entry points file must always use ``=`` to delimit names from values (whereas configparser also allows using ``:``)."
msgstr ""

#: ../source/specifications/entry-points.rst:100
#: 7b6fe6c838f943a88d0d91c865cf4c13
msgid "The sections of the config file represent entry point groups, the names are names, and the values encode both the object reference and the optional extras. If extras are used, they are a comma-separated list inside square brackets."
msgstr ""

#: ../source/specifications/entry-points.rst:104
#: bd18d75bfbc3483eb1a8d33c00beddb8
msgid "Within a value, readers must accept and ignore spaces (including multiple consecutive spaces) before or after the colon, between the object reference and the left square bracket, between the extra names and the square brackets and colons delimiting them, and after the right square bracket. The syntax for extras is formally specified as part of :pep:`508` (as ``extras``). For tools writing the file, it is recommended only to insert a space between the object reference and the left square bracket."
msgstr ""

#: ../source/specifications/entry-points.rst:112
#: fd27bf7bbac74059ac9e76b81592b091
msgid "For example::"
msgstr ""

#: ../source/specifications/entry-points.rst:124
#: 9cdbae46eaa84553901e43eead9f8044
msgid "Use for scripts"
msgstr ""

#: ../source/specifications/entry-points.rst:126
#: 6013bed8a6a64a12be8e87167d006386
msgid "Two groups of entry points have special significance in packaging: ``console_scripts`` and ``gui_scripts``. In both groups, the name of the entry point should be usable as a command in a system shell after the package is installed. The object reference points to a function which will be called with no arguments when this command is run. The function may return an integer to be used as a process exit code, and returning ``None`` is equivalent to returning ``0``."
msgstr ""

#: ../source/specifications/entry-points.rst:134
#: 3005bc28300747f2ac0e2a1df6102950
msgid "For instance, the entry point ``mycmd = mymod:main`` would create a command ``mycmd`` launching a script like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:141
#: d1ab1189613945f9ab526c4258f372e4
msgid "The difference between ``console_scripts`` and ``gui_scripts`` only affects Windows systems. ``console_scripts`` are wrapped in a console executable, so they are attached to a console and can use ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` for input and output. ``gui_scripts`` are wrapped in a GUI executable, so they can be started without a console, but cannot use standard streams unless application code redirects them. Other platforms do not have the same distinction."
msgstr ""

#: ../source/specifications/entry-points.rst:149
#: 0b8e13b2f54b45f38142af25719e899d
msgid "Install tools are expected to set up wrappers for both ``console_scripts`` and ``gui_scripts`` in the scripts directory of the install scheme. They are not responsible for putting this directory in the ``PATH`` environment variable which defines where command-line tools are found."
msgstr ""

#: ../source/specifications/entry-points.rst:154
#: 4006aaca3f25421999399449f3f00216
msgid "As files are created from the names, and some filesystems are case-insensitive, packages should avoid using names in these groups which differ only in case. The behaviour of install tools when names differ only in case is undefined."
msgstr ""

#: ../source/specifications/index.rst:4
#: b9f663b219fb46d585d7a3304e300daf
msgid "PyPA specifications"
msgstr ""

#: ../source/specifications/index.rst:6
#: a16bd618aab34df1811a6ee4250f4bee
msgid "This is a list of currently active interoperability specifications maintained by the Python Packaging Authority. The process for updating these standards, and for proposing new ones, is documented on `pypa.io <https://www.pypa.io/en/latest/specifications/>`__."
msgstr ""

#: ../source/specifications/index.rst:13
#: fecf201a117446a689d9fadafbd5a6ab
msgid "Package Distribution Metadata"
msgstr ""

#: ../source/specifications/index.rst:30
#: 6a5c767101ce48f7ab5f6ceb6d526b8c
msgid "Package Distribution File Formats"
msgstr ""

#: ../source/specifications/index.rst:40
#: 87218b2f500b4f46b95132bcddc0659f
msgid "Package Index Interfaces"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:6
#: 73d48a6ac3da4895a5d8c72bfd9911e8
msgid "Platform compatibility tags"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:8
#: 6cbf216103ef479d80bf066323f2198d
msgid "Platform compatibility tags allow build tools to mark distributions as being compatible with specific platforms, and allows installers to understand which distributions are compatible with the system they are running on."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:12
#: 33c2c61dc9184efd818111cbc3ce1c58
msgid "The platform compatibility tagging model used for the ``wheel`` distribution format is defined in :pep:`425`."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:16
#: d9adf781af2a4b21969a7eac7a876505
msgid "Platform tags for Windows"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:18
#: 5b86aeb22aeb4d229481c6474395a7a0
msgid "The scheme defined in :pep:`425` covers public distribution of wheel files to systems running Windows."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:22
#: 628a308806494b38893af35507aed9c8
msgid "Platform tags for macOS (Mac OS X)"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:24
#: 9f08a1b07d26454bb4075ac17b1283c8
msgid "The scheme defined in :pep:`425` covers public distribution of wheel files to systems running macOS (previously known as Mac OS X)."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:28
#: dccc399e206f4220bf82d8f3d6c30d08
msgid "Platform tags for common Linux distributions"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:32
#: 28e3b9165bda4e37b43ae02c733b19b8
msgid "The scheme defined in :pep:`425` is insufficient for public distribution of wheel files (and \\*nix wheel files in general) to Linux platforms, due to the large ecosystem of Linux platforms and subtle differences between them."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:36
#: 88f334f6083940648fad8b6b45b2a4af
msgid "Instead, :pep:`600` defines the ``manylinux`` standard, which represents a common subset of Linux platforms, and allows building wheels tagged with the ``manylinux`` platform tag which can be used across most common Linux distributions."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:41
#: 5af5c2180dce424cbbe4b5a36d695fda
msgid "There were multiple iterations of the ``manylinux`` specification, each representing the common subset of Linux platforms at a given point in time:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:44
#: d13f1abe47d04e0ea8578b6350a21491
msgid "``manylinux1`` (:pep:`513`) supports ``x86_64`` and ``i686`` architectures, and is based on a compatible Linux platform from 2007."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:46
#: 52ce37d69ddf4a4e9056e437f34d3ce7
msgid "``manylinux2010`` (:pep:`571`) supports ``x86_64`` and ``i686`` architectures. and updates the previous specification to be based on a compatible Linux platform from 2010 instead."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:49
#: e9efe3aaa8494da68010376afbfa9dbb
msgid "``manylinux2014`` (:pep:`599`) adds support for a number of additional architectures (``aarch64``, ``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``) and updates the base platform to a compatible Linux platform from 2014."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:54
#: a26ef668583c47d58c7a37174bc65f2f
msgid "``manylinux_x_y`` (:pep:`600`) supersedes all previous PEPs to define a future-proof standard. It defines ``x`` and ``y`` as glibc major an minor versions supported (e.g. ``manylinux_2_24`` should work on any distro using glibc 2.24+). Previous tags are still supported for backward compatibility."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:59
#: 4ee850dd22ac4bffbeb2f533e690c429
msgid "In general, distributions built for older versions of the specification are forwards-compatible (meaning that ``manylinux1`` distributions should continue to work on modern systems) but not backwards-compatible (meaning that ``manylinux2010`` distributions are not expected to work on platforms that existed before 2010)."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:65
#: 514205d958784c4381df43d671af11d2
msgid "Package maintainers should attempt to target the most compatible specification possible, with the caveat that the provided build environment for ``manylinux1`` and ``manylinux2010`` have reached end-of-life meaning that these images will no longer receive security updates."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:71
#: 1ac7367da4d64e14b842044631048c28
msgid "Manylinux compatibility support"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:74
#: 45bbc5f8c4a74bafa3d3ee2d5f4a2b65
msgid "The ``manylinux2014`` specification is relatively new and is not yet widely recognised by install tools."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:76
#: 523f4081245046439eb3da6a5458bde5
msgid "The ``manylinux_x_y`` specification is relatively new and is not yet widely recognised by install tools."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:79
#: 1f5d2ba00eed40fd9db5cf4dab57d610
msgid "The following table shows the minimum versions of relevant projects to support the various ``manylinux`` standards:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 5b2550546d9044c2a02145fc32d3e217
msgid "Tool"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 830967deaf6b4afaa3366734c51f64fd
msgid "``manylinux1``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 6e6eaaa3bfd140e79e3b9de948502378
msgid "``manylinux2010``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 886a903d3ab74128b5a4472a26c4c428
msgid "``manylinux2014``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: f575b0b999c74fe28099e52a37e790a0
msgid "``manylinux_x_y``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: 8c3824e93d124d5db7a7ef2fc975152e
msgid "``>=8.1.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: 7cf5641e64b5465fa76c3af9657e58e5
msgid "``>=19.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: c6c86b8dde3f4090863cc3758fbe3710
msgid "``>=19.3``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: 2a69c832603b41fe86a60d71b48e9fd9
msgid "``>=20.3``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: f6f50661e34a49dc99056ba81f9aaf99
msgid "auditwheel"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 96ba2872873246fe91fc8490bedee670
msgid "``>=1.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 16ab85bfda354142844f09c5466d22c5
msgid "``>=2.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 4c1305943e0644d6b6199cdabfc8771a
msgid "``>=3.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: d6d76d0508db46ae84e255c600ef60ab
msgid "``>=3.3.0`` [#]_"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:90
#: effe52af11cc4413a8226fe8995fac9c
msgid "Platform tags for other \\*nix platforms"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:92
#: b4ae0e0fcb2f45f999a8d69bbba4674c
msgid "The scheme defined in :pep:`425` is not generally sufficient for public distribution of wheel files to other \\*nix platforms. Efforts are currently (albeit intermittently) under way to define improved compatibility tagging schemes for AIX and for Alpine Linux."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:98
#: bd85f0da967b47d4851f93a9b9456194
msgid "Only support for ``manylinux_2_24`` has been added in auditwheel 3.3.0"
msgstr ""

#: ../source/specifications/pypirc.rst:6
#: d9a3d37933e44b4897c738321c90c6f9
msgid "The :file:`.pypirc` file"
msgstr ""

#: ../source/specifications/pypirc.rst:8
#: 890f70f1645340b39db4ea7a7e33926b
msgid "A :file:`.pypirc` file allows you to define the configuration for :term:`package indexes <Package Index>` (referred to here as \"repositories\"), so that you don't have to enter the URL, username, or password whenever you upload a package with :ref:`twine` or :ref:`flit`."
msgstr ""

#: ../source/specifications/pypirc.rst:13
#: 11843027f96a491e8711cfcac467bb30
msgid "The format (originally defined by the :ref:`distutils` package) is:"
msgstr ""

#: ../source/specifications/pypirc.rst:32
#: e3951d6d8b954c838b3ce657899413db
msgid "The ``distutils`` section defines an ``index-servers`` field that lists the name of all sections describing a repository."
msgstr ""

#: ../source/specifications/pypirc.rst:35
#: 799a111e2d79496eaadbcda9e419b96a
msgid "Each section describing a repository defines three fields:"
msgstr ""

#: ../source/specifications/pypirc.rst:37
#: 3285f8b37290486da615bca0219b51dd
msgid "``repository``: The URL of the repository."
msgstr ""

#: ../source/specifications/pypirc.rst:38
#: d6f50a0d4e734f7c92e6ee1705a8cba1
msgid "``username``: The registered username on the repository."
msgstr ""

#: ../source/specifications/pypirc.rst:39
#: 3d4230885b4048af94d430923777daf0
msgid "``password``: The password that will used to authenticate the username."
msgstr ""

#: ../source/specifications/pypirc.rst:43
#: e60de8e0250d49e9a0a7921cfbde6831
msgid "Be aware that this stores your password in plain text. For better security, consider an alternative like `keyring`_, setting environment variables, or providing the password on the command line."
msgstr ""

#: ../source/specifications/pypirc.rst:47
#: aca359c154694aafb514f499d970a7bc
msgid "Otherwise, set the permissions on :file:`.pypirc` so that only you can view or modify it. For example, on Linux or macOS, run:"
msgstr ""

#: ../source/specifications/pypirc.rst:57
#: e3d2f66e0bdf43c48fc99f6962775c58
msgid "Common configurations"
msgstr ""

#: ../source/specifications/pypirc.rst:61
#: e63166304c9a47d894a756dac5456b3b
msgid "These examples apply to :ref:`twine`, and projects like :ref:`hatch` that use it under the hood. Other projects (e.g. :ref:`flit`) also use :file:`.pypirc`, but with different defaults. Please refer to each project's documentation for more details and usage instructions."
msgstr ""

#: ../source/specifications/pypirc.rst:66
#: 18117b6401df4dd8b74ff6362c34ce33
msgid "Twine's default configuration mimics a :file:`.pypirc` with repository sections for PyPI and TestPyPI:"
msgstr ""

#: ../source/specifications/pypirc.rst:82
#: cb24a46400f94ab3b04a519e83cdf8f5
msgid "Twine will add additional configuration from :file:`$HOME/.pypirc`, the command line, and environment variables to this default configuration."
msgstr ""

#: ../source/specifications/pypirc.rst:86
#: 58483579d24548ee8c5c509dd636dacd
msgid "Using a PyPI token"
msgstr ""

#: ../source/specifications/pypirc.rst:88
#: 855654788c0440d1a1c90db9f0b679da
msgid "To set your `API token`_ for PyPI, you can create a :file:`$HOME/.pypirc` similar to:"
msgstr ""

#: ../source/specifications/pypirc.rst:97
#: 276b422136fa402b9fd54598a3d3bae0
msgid "For :ref:`TestPyPI <using-test-pypi>`, add a ``[testpypi]`` section, using the API token from your TestPyPI account."
msgstr ""

#: ../source/specifications/pypirc.rst:103
#: 4455c09f1e5c4b9ca747909cd73698b6
msgid "Using another package index"
msgstr ""

#: ../source/specifications/pypirc.rst:105
#: bbfcd6b3a9144c82bd88f371cc1578fd
msgid "To configure an additional repository, you'll need to redefine the ``index-servers`` field to include the repository name. Here is a complete example of a :file:`$HOME/.pypirc` for PyPI, TestPyPI, and a private repository:"
msgstr ""

#: ../source/specifications/pypirc.rst:132
#: e7e0d3d6a756430db63ac6b9376c4b1d
msgid "Instead of using the ``password`` field, consider saving your API tokens and passwords securely using `keyring`_ (which is installed by Twine):"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:5
#: 96ef64af1a21436c8e3b591fac0f630d
msgid "Recording installed projects"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:7
#: d429646907024f699ca268453366fcd6
msgid "This document specifies a common format of recording information about Python :term:`projects <Project>` installed in an environment. A common metadata format allows tools to query, manage or uninstall projects, regardless of how they were installed."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:12
#: 09281641655e427f98cc53fab05bae9e
msgid "Almost all information is optional. This allows tools outside the Python ecosystem, such as Linux package managers, to integrate with Python tooling as much as possible. For example, even if an installer cannot easily provide a list of installed files in a format specific to Python tooling, it should still record the name and version of the installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:21
#: e2d763e108ce486db553add38aad123c
msgid "History and change workflow"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:23
#: 9ed4837574ea463e9a09f0e1234b178c
msgid "The metadata described here was first specified in :pep:`376`, and later amended in :pep:`627`. It was formerly known as *Database of Installed Python Distributions*. Further amendments (except trivial language or typography fixes) must be made through the PEP process (see :pep:`1`)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:29
#: 33a1af0fbf8c4207b53782cebfa799ba
msgid "While this document is the normative specification, these PEPs that introduce changes to it may include additional information such as rationales and backwards compatibility considerations."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:37
#: 529c17a80c21424ca59f22c809a268b4
msgid "Each project installed from a distribution must, in addition to files, install a \"``.dist-info``\" directory located alongside importable modules and packages (commonly, the ``site-packages`` directory)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:41
#: 119f133cef3a4212b8522d828da8d1b2
msgid "This directory is named as ``{name}-{version}.dist-info``, with ``name`` and ``version`` fields corresponding to :ref:`core-metadata`. Both fields must be normalized (see :pep:`PEP 503 <503#normalized-names>` and :pep:`PEP 440 <440#normalization>` for the definition of normalization for each field respectively), and replace dash (``-``) characters with underscore (``_``) chacaters, so the ``.dist-info`` directory always has exactly one dash (``-``) character in its stem, separating the ``name`` and ``version`` fields."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:50
#: bf9e808df31d43c3a3681ef0fcd8b9b6
msgid "Historically, tools have failed to replace dot characters or normalize case in the ``name`` field, or not perform normalization in the ``version`` field. Tools consuming ``.dist-info`` directories should expect those fields to be unnormalized, and treat them as equivalent to their normalized counterparts. New tools that write ``.dist-info`` directories MUST normalize both ``name`` and ``version`` fields using the rules described above, and existing tools are encouraged to start normalizing those fields."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:60
#: 2b06e0f57aad4c2b991ac53ad8884322
msgid "The ``.dist-info`` directory's name is formatted to unambigiously represent a distribution as a filesystem path. Tools presenting a distribution name to a user should avoid using the normalized name, and instead present the specified name (when needed prior to resolution to an installed package), or read the respective fields in Core Metadata, since values listed there are unescaped and accurately reflect the distribution. Libraries should provide API for such tools to consume, so tools can have access to the unnormalized name when displaying distrubution information."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:69
#: e4ee1e9a9bff492f932ec3bbe1b739ff
msgid "This ``.dist-info`` directory can contain these files, described in detail below:"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:72
#: 93a77107cd40448b9bd63ec66e152110
msgid "``METADATA``: contains project metadata"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:73
#: 4dc6f990c6a94f35bc09a276185ece39
msgid "``RECORD``: records the list of installed files."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:74
#: adca6008f1624073a7c891095c24ade3
msgid "``INSTALLER``: records the name of the tool used to install the project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:76
#: aa3854c96ac042349205aee2d2789f5e
msgid "The ``METADATA`` file is mandatory. All other files may be omitted at the installing tool's discretion. Additional installer-specific files may be present."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:82
#: bf57de14e23c46a9ba059f1dd44ae39a
msgid "The :ref:`binary-distribution-format` specification describes additional files that may appear in the ``.dist-info`` directory of a :term:`Wheel`. Such files may be copied to the ``.dist-info`` directory of an installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:87
#: 4c0759d127424a0f8273a17293ea1a25
msgid "The previous versions of this specification also specified a ``REQUESTED`` file. This file is now considered a tool-specific extension, but may be standardized again in the future. See `PEP 376 <https://www.python.org/dev/peps/pep-0376/#requested>`_ for its original meaning."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:94
#: bd44e6dbc1e24a9a8eba32d28accc0ff
msgid "The METADATA file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:96
#: 9eb6946a05bf4b7d9d2375e52ee1fcd3
msgid "The ``METADATA`` file contains metadata as described in the :ref:`core-metadata` specification, version 1.1 or greater."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:99
#: 4e31708dfd8e46479703e82832878073
msgid "The ``METADATA`` file is mandatory. If it cannot be created, or if required core metadata is not available, installers must report an error and fail to install the project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:105
#: 3142683e09e142f4b053f27db6d75646
msgid "The RECORD file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:107
#: f0087c2496b941d3b3c29485de9d52b8
msgid "The ``RECORD`` file holds the list of installed files. It is a CSV file containing one record (line) per installed file."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:110
#: 7d672a3b3957446bb63acbdefc18abd2
msgid "The CSV dialect must be readable with the default ``reader`` of Python's ``csv`` module:"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:113
#: d4f73afbeb704ae3ae65191e3e22da05
msgid "field delimiter: ``,`` (comma),"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:114
#: 9d4cbbc7c3fd4bd899b23c1eb294a67b
msgid "quoting char: ``\"`` (straight double quote),"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:115
#: 0482620401de4995b178df78b241aec3
msgid "line terminator: either ``\\r\\n`` or ``\\n``."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:117
#: 4da0cf58cd1a45b6b97b84c98c49ce4e
msgid "Each record is composed of three elements: the file's **path**, the **hash** of the contents, and its **size**."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:120
#: 1df91898f0494d3692de3f54156f9b26
msgid "The *path* may be either absolute, or relative to the directory containing the ``.dist-info`` directory (commonly, the ``site-packages`` directory). On Windows, directories may be separated either by forward- or backslashes (``/`` or ``\\``)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:125
#: 82ecc17070674dc9bb174dfa59c38581
msgid "The *hash* is either an empty string or the name of a hash algorithm from ``hashlib.algorithms_guaranteed``, followed by the equals character ``=`` and the digest of the file's contents, encoded with the urlsafe-base64-nopad encoding (``base64.urlsafe_b64encode(digest)`` with trailing ``=`` removed)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:130
#: adbe6062f06a4d78b6e7c0ac30876011
msgid "The *size* is either the empty string, or file's size in bytes, as a base 10 integer."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:133
#: c925b75c90eb42ea88e1a8e9c19715bb
msgid "For any file, either or both of the *hash* and *size* fields may be left empty. Commonly, entries for ``.pyc`` files and the ``RECORD`` file itself have empty *hash* and *size*. For other files, leaving the information out is discouraged, as it prevents verifying the integrity of the installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:139
#: a192bc2350b74fddb6fc6313bd6afeef
msgid "If the ``RECORD`` file is present, it must list all installed files of the project, except ``.pyc`` files corresponding to ``.py`` files listed in ``RECORD``, which are optional. Notably, the contents of the ``.dist-info`` directory (including the ``RECORD`` file itself) must be listed. Directories should not be listed."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:146
#: 066f0584226540d5ac231065b7b34ed2
msgid "To completely uninstall a package, a tool needs to remove all files listed in ``RECORD``, all ``.pyc`` files (of all optimization levels) corresponding to removed ``.py`` files, and any directories emptied by the uninstallation."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:151
#: 5bb99b2444df415fbbb7dcab98ec5fde
msgid "Here is an example snippet of a possible ``RECORD`` file::"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:170
#: e1ecc8b6e8b14e53a08596b0e430eb24
msgid "If the ``RECORD`` file is missing, tools that rely on ``.dist-info`` must not atempt to uninstall or upgrade the package. (This does not apply to tools that rely on other sources of information, such as system package managers in Linux distros.)"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:177
#: 50fb2de830f94eec8e5d503e2b0587a1
msgid "The INSTALLER file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:179
#: 1f6f6518755d4b398dbf22218721aa96
msgid "If present, ``INSTALLER`` is a single-line text file naming the tool used to install the project. If the installer is executable from the command line, ``INSTALLER`` should contain the command name. Otherwise, it should contain a printable ASCII string."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:185
#: 0bd2b925339d4eebbecaa89bd617621b
msgid "The file can be terminated by zero or more ASCII whitespace characters."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:187
#: 684400d1270a4c3f91bfceb95d758e13
msgid "Here are examples of two possible ``INSTALLER`` files::"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:195
#: a1f9fd9847d248509fac724c3c8eb9cf
msgid "This value should be used for informational purposes only. For example, if a tool is asked to uninstall a project but finds no ``RECORD`` file, it may suggest that the tool named in ``INSTALLER`` may be able to do the uninstallation."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:201
#: 84119530db58470f940edfb1e859d4e4
msgid "The direct_url.json file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:203
#: 829e8a59e14a439e8d7829b805859fe6
msgid "This file MUST be created by installers when installing a distribution from a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:209
#: f1e07133b68c497dba64c8563bd97b64
msgid "Its detailed specification is at :ref:`direct-url`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:6
#: dffa7c03541e445cacccefaef7896ede
msgid "Simple repository API"
msgstr ""

#: ../source/specifications/simple-repository-api.rst:8
#: 9efa2c8b62cd42a491cd7ac2b3b335d6
msgid "The current interface for querying available package versions and retrieving packages from an index server is defined in :pep:`503`, with the addition of \"yank\" support (allowing a kind of file deletion) as defined in :pep:`592` and specifying the interface version provided by an index server in :pep:`629`."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:6
#: 6e45625d3b2a491b80efd99c1c519c37
msgid "Source distribution format"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:8
#: 7b5b44147a04455a861e95554b1be748
msgid "The current standard format of source distribution format is identified by the presence of a :file:`pyproject.toml` file in the distribution archive.  The layout of such a distribution was originally specified in :pep:`517` and is formally documented here."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:13
#: 4389d9f6fdd448f8982597e7a0677c3b
msgid "There is also the legacy source distribution format, implicitly defined by the behaviour of ``distutils`` module in the standard library, when executing :command:`setup.py sdist`. This document does not attempt to standardise this format, except to note that if a legacy source distribution contains a ``PKG-INFO`` file using metadata version 2.2 or later, then it MUST follow the rules applicable to source distributions defined in the metadata specification."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:21
#: e2b1ddbc0a57481ea151f01d145e93ce
msgid "Source distributions are also known as *sdists* for short."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:24
#: 471f9c96cbb14200bfc6016a3855f057
msgid "Source distribution file name"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:26
#: 92fdcc3b61d74a52a30b3056de9656b8
msgid "The file name of a sdist is not currently standardised, although the *de facto* form is ``{name}-{version}.tar.gz``, where ``{name}`` is the canonicalized form of the project name (see :pep:`503` for the canonicalization rules) with ``-`` characters replaced with ``_``, and ``{version}`` is the project version."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:31
#: 11ae15ba5bab4b4ab2a3fb1045ac2074
msgid "The name and version components of the filename MUST match the values stored in the metadata contained in the file."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:35
#: 03ff47588e5045b8aaa645a4468b4b23
msgid "Source distribution file format"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:37
#: af80a13d61034a59b9e2235fb8b5e893
msgid "A ``.tar.gz`` source distribution (sdist) contains a single top-level directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the source files of the package. The name and version MUST match the metadata stored in the file. This directory must also contain a :file:`pyproject.toml` in the format defined in :ref:`declaring-build-dependencies`, and a ``PKG-INFO`` file containing metadata in the format described in the :ref:`core-metadata` specification. The metadata MUST conform to at least version 2.2 of the metadata specification."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:45
#: 60ed03db70b742cbbd720abb941d9644
msgid "No other content of a sdist is required or defined. Build systems can store whatever information they need in the sdist to build the project."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:48
#: 7e9ab26477fc4c679dc3e6416c4f0505
msgid "The tarball should use the modern POSIX.1-2001 pax tar format, which specifies UTF-8 based file names."
msgstr ""

#: ../source/specifications/version-specifiers.rst:6
#: c0d03d73802640c48d47423058a143f1
msgid "Version specifiers"
msgstr ""

#: ../source/specifications/version-specifiers.rst:8
#: 37b9bf13e4804c279978c5053dfc30b5
msgid "Version numbering requirements and the semantics for specifying comparisons between versions are defined in :pep:`440`."
msgstr ""

#: ../source/specifications/version-specifiers.rst:11
#: 3ab78878eceb4011831a1fc6c8a78d24
msgid "The version specifiers section in this PEP supersedes the version specifiers section in :pep:`345`."
msgstr ""

#: ../source/support.rst:3
#: 20d796668d234b2cbe94791cdbb41bf6
msgid "How to Get Support"
msgstr ""

#: ../source/support.rst:5
#: 711b10e748394c259fd9046e4807396e
msgid "For support related to a specific project, see the links on the :doc:`Projects <key_projects>` page."
msgstr ""

#: ../source/support.rst:8
#: 6191b211eb964f59ac72e81235c4abe8
msgid "For something more general, or when you're just not sure, please `open an issue <https://github.com/pypa/packaging-problems/issues/new>`_ on the `packaging-problems <https://github.com/pypa/packaging-problems>`_ repository on GitHub."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:5
#: afa0b97e97554b92a82b441bc1940287
msgid "Creating Documentation"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:7
#: 2a816cda18d1432bb9ae95d7049e2f14
msgid "This section covers the basics of how to create documentation using `Sphinx`_ and host the documentation for free in `Read The Docs`_."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:13
#: 92803f871e384b4d8e79e006d368c174
msgid "Installing Sphinx"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:14
#: 8dee70063cfc48dc8c72f0a859b5ab60
msgid "Use ``pip`` to install Sphinx:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:28
#: 0174bde01053483399e4231faee698b0
msgid "For other installation methods, see this `installation guide`_ by Sphinx."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:33
#: 6ea1d5f0e57b46c68d5b835ac81f86b0
msgid "Getting Started With Sphinx"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:35
#: facd82f0143a4825bffbad89091940f5
msgid "Create a ``docs`` directory inside your project to hold your documentation:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:42
#: 053b6726eb164281a7221343a577abcf
msgid "Run ``sphinx-quickstart`` inside the ``docs`` directory:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:49
#: 21026045268b484d8c74c136c4b92f7a
msgid "This sets up a source directory, walks you through some basic configurations, and creates an ``index.rst`` file as well as a ``conf.py`` file."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:51
#: df4007c098b9430f9053cf549fa69e74
msgid "You can add some information about your project in ``index.rst``, then build them:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:57
#: 098270e7fcee4d51957de61ca2f379c5
msgid "For more details on the build process, see this `guide`_ by Read The Docs."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:62
#: 4ddcfb47ec02487fac65157e84311083
msgid "Other Sources"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:64
#: 31af7a2c84aa4c58b9fe35ace47b315e
msgid "For a more detailed guide on how to use Sphinx and reStructuredText, please see this `documentation tutorial`_ on Hitchhiker's Guide to Python."
msgstr ""

#: ../source/tutorials/index.rst:4
#: be85ba9350b64ac99813a66fa60eb210
msgid "**Tutorials** are opinionated step-by-step guides to help you get familiar with packaging concepts. For more detailed information on specific packaging topics, see :doc:`/guides/index`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:5
#: 1a2c7e462a3445918c692b10caa60733
msgid "Installing Packages"
msgstr ""

#: ../source/tutorials/installing-packages.rst:7
#: 5cb1025661ef4203b158fdd193e810f0
msgid "This section covers the basics of how to install Python :term:`packages <Distribution Package>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:10
#: c67069092ab847fba7530f959852a597
msgid "It's important to note that the term \"package\" in this context is being used to describe a bundle of software to be installed (i.e. as a synonym for a :term:`distribution <Distribution Package>`). It does not to refer to the kind of :term:`package <Import Package>` that you import in your Python source code (i.e. a container of modules). It is common in the Python community to refer to a :term:`distribution <Distribution Package>` using the term \"package\".  Using the term \"distribution\" is often not preferred, because it can easily be confused with a Linux distribution, or another larger software distribution like Python itself."
msgstr ""

#: ../source/tutorials/installing-packages.rst:28
#: 3286009ed58a4d8abf13b1bb3129aac2
msgid "Requirements for Installing Packages"
msgstr ""

#: ../source/tutorials/installing-packages.rst:30
#: 7496d39f7a20488aa47b5a4481e14ff7
msgid "This section describes the steps to follow before installing other Python packages."
msgstr ""

#: ../source/tutorials/installing-packages.rst:35
#: 7d26139ea59b43758495f57cb2f76e29
msgid "Ensure you can run Python from the command line"
msgstr ""

#: ../source/tutorials/installing-packages.rst:37
#: 85a442f7096846e6981e59b0cc432dbb
msgid "Before you go any further, make sure you have Python and that the expected version is available from your command line. You can check this by running:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:53
#: 1a31782b1e7541d09acc2bef64d72d26
msgid "You should get some output like ``Python 3.6.3``. If you do not have Python, please install the latest 3.x version from `python.org`_ or refer to the `Installing Python`_ section of the Hitchhiker's Guide to Python."
msgstr ""

#: ../source/tutorials/installing-packages.rst:57
#: 1a0bcc1746fc446fb6e6d8c970f9cbc8
msgid "If you're a newcomer and you get an error like this:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:66
#: 2951ac0871b2430694cea42c45f50e13
msgid "It's because this command and other suggested commands in this tutorial are intended to be run in a *shell* (also called a *terminal* or *console*). See the Python for Beginners `getting started tutorial`_ for an introduction to using your operating system's shell and interacting with Python."
msgstr ""

#: ../source/tutorials/installing-packages.rst:72
#: 3150f43cdd5a437ba61d2d295417a4eb
msgid "If you're using an enhanced shell like IPython or the Jupyter notebook, you can run system commands like those in this tutorial by prefacing them with a ``!`` character:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:82
#: a6b1cc9d9bdb4b53bde06980efd84ce7
msgid "It's recommended to write ``{sys.executable}`` rather than plain ``python`` in order to ensure that commands are run in the Python installation matching the currently running notebook (which may not be the same Python installation that the ``python`` command refers to)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:87
#: edd77746fe754b0d80d0d0346753523f
msgid "Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system Python without creating a virtual environment first should replace the ``python`` command in this tutorial with ``python3`` and the ``python -m pip`` command with ``python3 -m pip --user``. Do *not* run any of the commands in this tutorial with ``sudo``: if you get a permissions error, come back to the section on creating virtual environments, set one up, and then continue with the tutorial as written."
msgstr ""

#: ../source/tutorials/installing-packages.rst:99
#: 3cdd8ebc9faf4379849606ca0d280c24
msgid "Ensure you can run pip from the command line"
msgstr ""

#: ../source/tutorials/installing-packages.rst:101
#: 278e96eb582b49aaab32097b193da039
msgid "Additionally, you'll need to make sure you have :ref:`pip` available. You can check this by running:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:116
#: 84ea876a5f084033a677bc0c8f38e4b3
msgid "If you installed Python from source, with an installer from `python.org`_, or via `Homebrew`_ you should already have pip. If you're on Linux and installed using your OS package manager, you may have to install pip separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:124
#: 907fdc4a21a947adbadefc0740502a08
msgid "If ``pip`` isn't already installed, then first try to bootstrap it from the standard library:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:139
#: ff164dd0429d438892ed02db73692955
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:141
#: 1ff9c4ace6a74b3aa3a3f235dfc5e36e
msgid "Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""

#: ../source/tutorials/installing-packages.rst:144
#: c9de97a1cc47482282f4c06c19e6d3b0
msgid "Run ``python get-pip.py``. [2]_  This will install or upgrade pip. Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're not installed already."
msgstr ""

#: ../source/tutorials/installing-packages.rst:150
#: 5f451522125b4ec8a85179a2ac6839d8
msgid "Be cautious if you're using a Python install that's managed by your operating system or another package manager. get-pip.py does not coordinate with those tools, and may leave your system in an inconsistent state. You can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/local`` which is designed for locally-installed software."
msgstr ""

#: ../source/tutorials/installing-packages.rst:159
#: 6a72103fe3a347fab26c25e6223f5fb5
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr ""

#: ../source/tutorials/installing-packages.rst:161
#: 4f789d690d0340ab876fd9d38ae18c3f
msgid "While ``pip`` alone is sufficient to install from pre-built binary archives, up to date copies of the ``setuptools`` and ``wheel`` projects are useful to ensure you can also install from source archives::"
msgstr ""

#: ../source/tutorials/installing-packages.rst:169
#: 38d25311d1744da09de937c341407461
msgid "Optionally, create a virtual environment"
msgstr ""

#: ../source/tutorials/installing-packages.rst:171
#: 22d93a534f7d47b4a2b8a0fb9b6429dc
msgid "See :ref:`section below <Creating and using Virtual Environments>` for details, but here's the basic `venv`_ [3]_ command to use on a typical Linux system:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:188
#: c715c5c0c5ad4ebb9547ea3970485a3a
msgid "This will create a new virtual environment in the ``tutorial_env`` subdirectory, and configure the current shell to use it as the default ``python`` environment."
msgstr ""

#: ../source/tutorials/installing-packages.rst:195
#: 20f2b669dcef4375900fb0cf4a2bc70e
msgid "Creating Virtual Environments"
msgstr ""

#: ../source/tutorials/installing-packages.rst:197
#: 9ff3bef399e8486cbb292ad2cc48be97
msgid "Python \"Virtual Environments\" allow Python :term:`packages <Distribution Package>` to be installed in an isolated location for a particular application, rather than being installed globally. If you are looking to safely install global command line tools, see :doc:`/guides/installing-stand-alone-command-line-tools`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:203
#: 073f89bb41464c9dbd565f1fb7a30f50
msgid "Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python3.6/site-packages (or whatever your platform’s standard location is), it’s easy to end up in a situation where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""

#: ../source/tutorials/installing-packages.rst:209
#: 969d4d3c124842ca97deee5bfad18aa1
msgid "Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application."
msgstr ""

#: ../source/tutorials/installing-packages.rst:213
#: 381512e835a04c1ca766e6d478feb692
msgid "Also, what if you can’t install :term:`packages <Distribution Package>` into the global site-packages directory? For instance, on a shared host."
msgstr ""

#: ../source/tutorials/installing-packages.rst:216
#: cbea7079a8f540039f35381d474b9011
msgid "In all these cases, virtual environments can help you. They have their own installation directories and they don’t share libraries with other virtual environments."
msgstr ""

#: ../source/tutorials/installing-packages.rst:220
#: d7e227b6bb5d4d75ba38175c660a3a5e
msgid "Currently, there are two common tools for creating Python virtual environments:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:222
#: a0d9c25f0b8c4fae9ce52f82fb4e86d4
msgid "`venv`_ is available by default in Python 3.3 and later, and installs :ref:`pip` and :ref:`setuptools` into created virtual environments in Python 3.4 and later."
msgstr ""

#: ../source/tutorials/installing-packages.rst:225
#: d9e58f1378504d0a8454137299589c7d
msgid ":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are always installed into created virtual environments by default (regardless of Python version)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:230
#: bf6c03c0fc2b484188a8eb6ee54adcee
msgid "The basic usage is like so:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:232
#: cc659248947a43cda48df2d01ee81f6c
msgid "Using `venv`_:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:248
#: c81a8ac70c284e5391d33c7371fcd100
msgid "Using :ref:`virtualenv`:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:264
#: a7d3b33bcbd04d7c8bf73da832322333
msgid "For more information, see the `venv`_ docs or the `virtualenv <http://virtualenv.pypa.io>`_ docs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:266
#: c1b73104e2a742299f0e44b81825458e
msgid "The use of :command:`source` under Unix shells ensures that the virtual environment's variables are set within the current shell, and not in a subprocess (which then disappears, having no useful effect)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:271
#: fae3a4c42cc24770988dff2965307373
msgid "In both of the above cases, Windows users should _not_ use the :command:`source` command, but should rather run the :command:`activate` script directly from the command shell like so:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:281
#: 839b793c227948a68c1201efd189a750
msgid "Managing multiple virtual environments directly can become tedious, so the :ref:`dependency management tutorial <managing-dependencies>` introduces a higher level tool, :ref:`Pipenv`, that automatically manages a separate virtual environment for each project and application that you work on."
msgstr ""

#: ../source/tutorials/installing-packages.rst:288
#: e560f4d60c174d499c723f28b5c6d963
msgid "Use pip for Installing"
msgstr ""

#: ../source/tutorials/installing-packages.rst:290
#: 5716da0739584dd491c9d6429305e76a
msgid ":ref:`pip` is the recommended installer.  Below, we'll cover the most common usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_, which includes a complete `Reference Guide <https://pip.pypa.io/en/latest/reference/index.html>`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:297
#: ead447e82a994de687a38204059150f3
msgid "Installing from PyPI"
msgstr ""

#: ../source/tutorials/installing-packages.rst:299
#: 5e40add424804b15b296c575af32e15d
msgid "The most common usage of :ref:`pip` is to install from the :term:`Python Package Index <Python Package Index (PyPI)>` using a :term:`requirement specifier <Requirement Specifier>`. Generally speaking, a requirement specifier is composed of a project name followed by an optional :term:`version specifier <Version Specifier>`.  :pep:`440` contains a :pep:`full specification <440#version-specifiers>` of the currently supported specifiers. Below are some examples."
msgstr ""

#: ../source/tutorials/installing-packages.rst:307
#: 79989cb003784d66ac75b434370555d8
msgid "To install the latest version of \"SomeProject\":"
msgstr ""

#: ../source/tutorials/installing-packages.rst:321
#: 9ed2f34a76bd4d1a902e3c984e6496dd
msgid "To install a specific version:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:335
#: 32b6895b4bb04dff91729211545fadb3
msgid "To install greater than or equal to one version and less than another:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:350
#: 3d140d89c4074c5495e5006cea8a6031
msgid "To install a version that's :pep:`\"compatible\" <440#compatible-release>` with a certain version: [4]_"
msgstr ""

#: ../source/tutorials/installing-packages.rst:365
#: 7160cd6a88f24c428e849e2be9814b19
msgid "In this case, this means to install any version \"==1.4.*\" version that's also \">=1.4.2\"."
msgstr ""

#: ../source/tutorials/installing-packages.rst:370
#: c04f6cb7143941a9a537d72ba70ae86f
msgid "Source Distributions vs Wheels"
msgstr ""

#: ../source/tutorials/installing-packages.rst:372
#: be82510e845245b0baca537308fffc33
msgid ":ref:`pip` can install from either :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:install_--no-binary>` option."
msgstr ""

#: ../source/tutorials/installing-packages.rst:378
#: d327006b56bd4d67825986065e9ce956
msgid ":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution Package>` format that provides faster installation compared to :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when a project contains compiled extensions."
msgstr ""

#: ../source/tutorials/installing-packages.rst:383
#: 862aa5d7e61845bdb68797c62d8414b3
msgid "If :ref:`pip` does not find a wheel to install, it will locally build a wheel and cache it for future installs, instead of rebuilding the source distribution in the future."
msgstr ""

#: ../source/tutorials/installing-packages.rst:391
#: 1bb85b1154f64d1ab55d5407b9560edf
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""

#: ../source/tutorials/installing-packages.rst:408
#: 21c2de15f898476e8cc8e5234b28ca23
msgid "Installing to the User Site"
msgstr ""

#: ../source/tutorials/installing-packages.rst:410
#: 187cb91c00534811b7df7268ff6de78b
msgid "To install :term:`packages <Distribution Package>` that are isolated to the current user, use the ``--user`` flag:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:425
#: bb5ab34c3ba045518f29cfd6e0a765c2
msgid "For more information see the `User Installs <https://pip.readthedocs.io/en/latest/user_guide.html#user-installs>`_ section from the pip docs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:429
#: 5641f54afe2344bcaa34bb80824b35c0
msgid "Note that the ``--user`` flag has no effect when inside a virtual environment - all installation commands will affect the virtual environment."
msgstr ""

#: ../source/tutorials/installing-packages.rst:432
#: e0afa120816f4939a0c938859f6a7164
msgid "If ``SomeProject`` defines any command-line scripts or console entry points, ``--user`` will cause them to be installed inside the `user base`_'s binary directory, which may or may not already be present in your shell's :envvar:`PATH`.  (Starting in version 10, pip displays a warning when installing any scripts to a directory outside :envvar:`PATH`.)  If the scripts are not available in your shell after installation, you'll need to add the directory to your :envvar:`PATH`:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:440
#: b5b1cc2931734358906d41cd812d6ffa
msgid "On Linux and macOS you can find the user base binary directory by running ``python -m site --user-base`` and adding ``bin`` to the end. For example, this will typically print ``~/.local`` (with ``~`` expanded to the absolute path to your home directory) so you'll need to add ``~/.local/bin`` to your ``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:446
#: 8f0efcd4f53b4b859f9deb725ba653ea
msgid "On Windows you can find the user base binary directory by running ``py -m site --user-site`` and replacing ``site-packages`` with ``Scripts``. For example, this could return ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would need to set your ``PATH`` to include ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your user ``PATH`` permanently in the `Control Panel`_. You may need to log out for the ``PATH`` changes to take effect."
msgstr ""

#: ../source/tutorials/installing-packages.rst:462
#: e2f785f0329a40b29f6ba974a1b5c5d3
msgid "Install a list of requirements specified in a :ref:`Requirements File <pip:Requirements Files>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:478
#: 618adf8cd12c440fa00c40cbecb080c8
msgid "Installing from VCS"
msgstr ""

#: ../source/tutorials/installing-packages.rst:480
#: 16c3a1113b6b46bf9c87e39e428076ee
msgid "Install a project from VCS in \"editable\" mode.  For a full breakdown of the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:502
#: 34969b91943e418d8b101886df677f5b
msgid "Installing from other Indexes"
msgstr ""

#: ../source/tutorials/installing-packages.rst:504
#: 504da8f192804d619bbcae771677e4c7
msgid "Install from an alternate index"
msgstr ""

#: ../source/tutorials/installing-packages.rst:518
#: 4cbff2aefe4e440fb05128180ee97be3
msgid "Search an additional index during install, in addition to :term:`PyPI <Python Package Index (PyPI)>`"
msgstr ""

#: ../source/tutorials/installing-packages.rst:534
#: fcd73ba6b9a4408a8f0321b571068e43
msgid "Installing from a local src tree"
msgstr ""

#: ../source/tutorials/installing-packages.rst:537
#: e88433360b98407aa31f0a857b5ca979
msgid "Installing from local src in `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_, i.e. in such a way that the project appears to be installed, but yet is still editable from the src tree."
msgstr ""

#: ../source/tutorials/installing-packages.rst:554
#: 4df0287a04a4406ab54b0331faf75d9e
msgid "You can also install normally from src"
msgstr ""

#: ../source/tutorials/installing-packages.rst:571
#: 3d1e7958d16f4bb8ad15bba5904dc7ce
msgid "Install a particular source archive file."
msgstr ""

#: ../source/tutorials/installing-packages.rst:585
#: 5e469a1ddf144006a121e24a6a0b98e1
msgid "Install from a local directory containing archives (and don't check :term:`PyPI <Python Package Index (PyPI)>`)"
msgstr ""

#: ../source/tutorials/installing-packages.rst:605
#: 9bf70f9f2655497dbcde128c497407f6
msgid "Installing from other sources"
msgstr ""

#: ../source/tutorials/installing-packages.rst:607
#: ce4870c6f2804a6e9bf2493fa0286f2d
msgid "To install from other data sources (for example Amazon S3 storage) you can create a helper application that presents the data in a :pep:`503` compliant index format, and use the ``--extra-index-url`` flag to direct pip to use that index."
msgstr ""

#: ../source/tutorials/installing-packages.rst:619
#: 17d1783769fb479bb33467402284c085
msgid "Installing Prereleases"
msgstr ""

#: ../source/tutorials/installing-packages.rst:621
#: afb3954a2b444cc38590a8062688b2cb
msgid "Find pre-release and development versions, in addition to stable versions.  By default, pip only finds stable versions."
msgstr ""

#: ../source/tutorials/installing-packages.rst:637
#: aa106be97ee346649a4b6ae08a75d0ae
msgid "Installing Setuptools \"Extras\""
msgstr ""

#: ../source/tutorials/installing-packages.rst:639
#: b1740def112b4da1a667cde57b304804
msgid "Install `setuptools extras`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:659
#: 2062a2f7de8e4ad3802e4aaf2706d263
msgid "\"Secure\" in this context means using a modern browser or a tool like :command:`curl` that verifies SSL certificates when downloading from https URLs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:668
#: 851ddce1582c48919b8df069586fbed7
msgid "Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:`virtualenv`) will create virtualenv environments with ``pip`` pre-installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:673
#: 9cdc19f46bca4aecb929bb8007fdcf70
msgid "The compatible release specifier was accepted in :pep:`440` and support was released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:4
#: 753229ef704b4ee282877acb69cc2992
msgid "Managing Application Dependencies"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:6
#: 7e5a7acadc44408798387d76d23f1138
msgid "The :ref:`package installation tutorial <installing-packages>` covered the basics of getting set up to install and update Python packages."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:9
#: 4148f4be0d964b649aba19ed2c83a501
msgid "However, running these commands interactively can get tedious even for your own personal projects, and things get even more difficult when trying to set up development environments automatically for projects with multiple contributors."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:13
#: 61a43cd5f3b24c85a431d60fc9d18c3c
msgid "This tutorial walks you through the use of :ref:`Pipenv` to manage dependencies for an application. It will show you how to install and use the necessary tools and make strong recommendations on best practices."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:17
#: 814deb010ff04012906faad83ab9f4ad
msgid "Keep in mind that Python is used for a great many different purposes, and precisely how you want to manage your dependencies may change based on how you decide to publish your software. The guidance presented here is most directly applicable to the development and deployment of network services (including web applications), but is also very well suited to managing development and testing environments for any kind of project."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:24
#: 78954ed84ea540479fb0f465b12f2699
msgid "Developers of Python libraries, or of applications that support distribution as Python libraries, should also consider the `poetry <https://github.com/python-poetry/poetry>`_ project as an alternative dependency management solution."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:30
#: dcd729eded89454cbaefdb6718824a3a
msgid "Installing Pipenv"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:32
#: 8adb6f28a38c462987ec117fe39dadd5
msgid ":ref:`Pipenv` is a dependency manager for Python projects. If you're familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit to those tools. While :ref:`pip` alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it's a higher-level tool that simplifies dependency management for common use cases."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:38
#: a2684933088944c3b4d88a2dd34540da
msgid "Use ``pip`` to install Pipenv:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:54
#: 083587ce62a4444e8325ecc652de8038
msgid "This does a `user installation`_ to prevent breaking any system-wide packages. If ``pipenv`` isn't available in your shell after installation, you'll need to add the `user base`_'s binary directory to your ``PATH``. See :ref:`Installing to the User Site` for more information."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:65
#: 68e5ba2644294ec69f5cb0ef2b4adb9b
msgid "Installing packages for your project"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:67
#: 8d9c2fc58063429f9468100402dc2b70
msgid "Pipenv manages dependencies on a per-project basis. To install packages, change into your project's directory (or just an empty directory for this tutorial) and run:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:76
#: 1fb8a17dff3347afa639ed10470f8faf
msgid "Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary):"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:112
#: f8b3fd94b06b4c2998cf5d14bec282b0
msgid "Using installed packages"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:114
#: 3aa7083fdbf6472cb03725815b0a17c2
msgid "Now that Requests is installed you can create a simple :file:`main.py` file to use it:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:125
#: 92093ae435ee4a7f83dd3338c7dc49f9
msgid "Then you can run this script using ``pipenv run``:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:131
#: 293287e1e67848e4b20624ea69939efb
msgid "You should get output similar to this:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:137
#: 168c3da60f0d45cab4f26b411534aa1a
msgid "Using ``pipenv run`` ensures that your installed packages are available to your script. It's also possible to spawn a new shell that ensures all commands have access to your installed packages with ``pipenv shell``."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:143
#: ../source/tutorials/packaging-projects.rst:594
#: 595bfa58ddc74cc6a0545d96c6fc0f3a
#: c4e93269a74348e39a575e418d7273a9
msgid "Next steps"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:145
#: 52ebb79ad52c41eda4db1c06d25494f8
msgid "Congratulations, you now know how to effectively manage dependencies and development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:148
#: 65dfbf07cc5746d0ad2405681d581ad2
msgid "If you're interested in creating and distributing your own Python packages, see the :ref:`tutorial on packaging and distributing packages <distributing-packages>`."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:151
#: d5176fc2835f4925999245b22eec70a8
msgid "Note that when your application includes definitions of Python source packages, they (and their dependencies) can be added to your ``pipenv`` environment with ``pipenv install -e <relative-path-to-source-directory>`` (e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:160
#: 51a004a120b64eff8ed88dedc91a65c9
msgid "Other Tools for Application Dependency Management"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:162
#: 1880b43b7d6d464781195a439d01c851
msgid "If you find this particular approach to managing application dependencies isn't working well for you or your use case, you may want to explore these other tools and techniques to see if one of them is a better fit:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:166
#: bcdb9a3549744d1a95694a7f956ef582
msgid "`poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable in scope to ``pipenv`` that focuses more directly on use cases where the repository being managed is structured as a Python project with a valid ``pyproject.toml`` file (by contrast, ``pipenv`` explicitly avoids making the assumption that the application being worked on that's depending on components from PyPI will itself support distribution as a ``pip``-installable Python package)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:172
#: 6bebfd2026244f6e866fadbb473c4a22
msgid "`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even more steps in the project management workflow (such as incrementing versions, tagging releases, and creating new skeleton projects from project templates)"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:175
#: 8b138f9c299740d5abe3037d849f8e4c
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_ to build your own custom workflow from lower level pieces like ``pip-compile`` and ``pip-sync``"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:177
#: 9ad16aec7ee14404b705068657f74e75
msgid "`micropipenv <https://github.com/thoth-station/micropipenv>`_ is a lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry lock files or converting them to pip-tools compatible output. Designed for containerized Python applications but not limited to them."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:2
#: df5510fa64874236a6ec188db80aee07
msgid "Packaging Python Projects"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:4
#: 70ccea9a4db94d0485b60ed599a97cd8
msgid "This tutorial walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to upload it to the Python Package Index."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:10
#: 06e8d54427d64e5ba783a61b28342eb4
msgid "If you have trouble running the commands in this tutoral, please copy the command and its output, then `open an issue`_ on the `packaging-problems`_ repository on GitHub. We'll do our best to help you!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:18
#: 3688f305189e45c98a54959a217e3fec
msgid "Some of the commands require a newer version of :ref:`pip`, so start by making sure you have the latest version installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:35
#: 0190d1c7d41d4198ab5173fd0ec7926e
msgid "A simple project"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:37
#: 5b0c71fc1cf54cd5b1ad9bf89062cfaa
msgid "This tutorial uses a simple project named ``example_package``.  We recommend following this tutorial as-is using this project, before packaging your own project."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:41
#: 96c78de707234c0fb5c87c781d103e1c
msgid "Create the following file structure locally:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:51
#: 0c5d8b7685624f7ebb885df48668f52d
msgid ":file:`__init__.py` is required to import the directory as a package, and should be empty."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:54
#: 2db57df689c04d0b9510aa27c17d1c1f
msgid ":file:`example.py` is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. Open that file and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:63
#: 42c0ff9613ea4115a9cf50c707a203ff
msgid "If you are unfamiliar with Python's :term:`modules <Module>` and :term:`import packages <Import Package>`, take a few minutes to read over the `Python documentation for packages and modules`_."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:67
#: c33c89d9851647af98915ea5803293f5
msgid "Once you create this structure, you'll want to run all of the commands in this tutorial within the ``packaging_tutorial`` directory."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:75
#: 083520a7d4944ef3b6b9b77220425cf6
msgid "Creating the package files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:77
#: a986303170d64d99abfccb96abff9400
msgid "You will now add files that are used to prepare the project for distribution. When you're done, the project structure will look like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:95
#: f57f5e67f74546c1a648a1825548f4ba
msgid "Creating a test directory"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:97
#: 20f44c18505e4d7eac9268f7ec84ad3c
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:101
#: f64f621d36c94fd9a1a617afd9a44d17
msgid "Creating pyproject.toml"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:103
#: 9b003dead3e2480991b6ce98d5de6931
msgid ":file:`pyproject.toml` tells build tools (like :ref:`pip` and :ref:`build`) what is required to build your project. This tutorial uses :ref:`setuptools`, so open :file:`pyproject.toml` and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:117
#: c96cbd55029f4cb6bef811b786d437b8
msgid "``build-system.requires`` gives a list of packages that are needed to build your package. Listing something here will *only* make it available during the build, not after it is installed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:121
#: a95cc608ee25454ea8db01639dcac438
msgid "``build-system.build-backend`` is the name of Python object that will be used to perform the build. If you were to use a different build system, such as :ref:`flit` or :ref:`poetry`, those would go here, and the configuration details would be completely different than the :ref:`setuptools` configuration described below."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:127
#: 0ed168c394a64ae9b560ffede34ab340
msgid "See :pep:`517` and :pep:`518` for background and details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:131
#: af68a77fc31f48e186d9d47f19ec79be
msgid "Configuring metadata"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:133
#: ddc56a8cab3845699b8a4340b1e27d57
msgid "There are two types of metadata: static and dynamic."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:135
#: 5fa60be2e17b4ee0ae6c4e54ccbeb019
msgid "Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is simpler, easier to read, and avoids many common errors, like encoding errors."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:137
#: e3380adbcc2a45228ad5a05ca6ccf93a
msgid "Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are dynamic or determined at install-time, as well as extension modules or extensions to setuptools, need to go into :file:`setup.py`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:141
#: 13b1266c67c64463ad9b415c5bea649a
msgid "Static metadata (:file:`setup.cfg`) should be preferred. Dynamic metadata (:file:`setup.py`) should be used only as an escape hatch when absolutely necessary. :file:`setup.py` used to be required, but can be omitted with newer versions of setuptools and pip."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:148
#: 14b5a10c14b6432ba9cf0bf120cae031
msgid ":file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include. Eventually much of this configuration may be able to move to :file:`pyproject.toml`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:153
#: eee83402c4cf462bbbd6350a0d6d39bf
msgid "Open :file:`setup.cfg` and enter the following content. Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:185
#: 48dee833f6c045fda53d0849c6875a94
msgid "There are a `variety of metadata and options <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_ supported here. This is in :doc:`configparser <python:library/configparser>` format; do not place quotes around values. This example package uses a relatively minimal set of ``metadata``:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:191
#: ../source/tutorials/packaging-projects.rst:286
#: 5a87c5ca74004363af33d652f3e3d1d7
#: 1ad4c27d77e5435d80936ac19fd0e15a
msgid "``name`` is the *distribution name* of your package. This can be any name as long as it only contains letters, numbers, ``_`` , and ``-``. It also must not already be taken on pypi.org. **Be sure to update this with your username,** as this ensures you won't try to upload a package with the same name as one which already exists."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:196
#: 799b1874a334464ea17bba6feb4dbb39
msgid "``version`` is the package version. See :pep:`440` for more details on versions. You can use ``file:`` or ``attr:`` directives to read from a file or package attribute."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:199
#: ../source/tutorials/packaging-projects.rst:293
#: 47fb9c1f6f0c4506a2a44fb3fadb3192
#: d06180d7a8ad4390bb9eb8f7c3246d06
msgid "``author`` and ``author_email`` are used to identify the author of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:201
#: ../source/tutorials/packaging-projects.rst:295
#: 73d3f2c88fb74dcaa35a9bf79c500d7d
#: 9a7debeb9ee24ed9ad3f4ab36323170e
msgid "``description`` is a short, one-sentence summary of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:202
#: 6b9e9abdb1e44272916debf84c63f6ea
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md` (which is a common pattern) using the ``file:`` directive."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:206
#: ../source/tutorials/packaging-projects.rst:300
#: 37a64192fc5242a69160f2df2456e742
#: c2271519a857474db7bdc2f41e3eebd3
msgid "``long_description_content_type`` tells the index what type of markup is used for the long description. In this case, it's Markdown."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:208
#: ../source/tutorials/packaging-projects.rst:302
#: be7f3fc225574f47adceb1ab24ff28b6
#: f2608acdbb024e489491f15896031121
msgid "``url`` is the URL for the homepage of the project. For many projects, this will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting service."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:211
#: ../source/tutorials/packaging-projects.rst:305
#: 49c8c13a40174f8380db25e9e7838ae4
#: 92dded1b2e0f4d7e845ad0321b0d138c
msgid "``project_urls`` lets you list any number of extra links to show on PyPI. Generally this could be to documentation, issue trackers, etc."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:213
#: ../source/tutorials/packaging-projects.rst:307
#: de5ca96c01b5461ea3bfccecae51181b
#: 15abb5fa3d7a44bd9903cfe1ddb65d2e
msgid "``classifiers`` gives the index and :ref:`pip` some additional metadata about your package. In this case, the package is only compatible with Python 3, is licensed under the MIT license, and is OS-independent. You should always include at least which version(s) of Python your package works on, which license your package is available under, and which operating systems your package will work on. For a complete list of classifiers, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:221
#: 1a85f79500554dc98f3a63e38ccc10c0
msgid "In the ``options`` category, we have controls for setuptools itself:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:223
#: 102ae79966fb4ba692407c382ba6f964
msgid "``package_dir`` is a mapping of package names and directories. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:227
#: 2b4911fb59f44f81a34c394697594baa
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use the ``find:`` directive to automatically discover all packages and subpackages and ``options.packages.find`` to specify the ``package_dir`` to use. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:234
#: 1f778f26f6a140fdada2f64caed3475c
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back through older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:238
#: ../source/tutorials/packaging-projects.rst:329
#: cc4c29d3767e44ec99ce1a9a403449e4
#: 6380fef3e5bb4ddf8d5664e02211581d
msgid "There are many more than the ones mentioned here. See :doc:`/guides/distributing-packages-using-setuptools` for more details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:244
#: 9be962a7dc854f85bc1cec291bca802e
msgid ":file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:248
#: adac1cd0f0f74200984ef7c2ff5d1d86
msgid "Open :file:`setup.py` and enter the following content.  Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:283
#: 4611d76fa5ee4078b74ae8ad0d41b856
msgid ":func:`setup` takes several arguments. This example package uses a relatively minimal set:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:291
#: 5f80ab272f844eb98ca5d01bc993dedc
msgid "``version`` is the package version. See :pep:`440` for more details on versions."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:296
#: de24058a2975400b86b55f2073e33d6b
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md`, which is a common pattern."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:314
#: 327bc0ad43fb4a81b9176b0f5a9d7091
msgid "``package_dir`` is a dictionary with package names for keys and directories for values. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:319
#: 7ccc98c41a70482992257c36957b73d5
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use :func:`find_packages` to automatically discover all packages and subpackages under ``package_dir``. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:325
#: a8cb55dc27154eb283d8baf3e0a233ee
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back though older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:333
#: 69ba84771ca94294b522dcfe72352621
msgid "Creating README.md"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:335
#: 1873262b3cf240098b3d649b54b5a382
msgid "Open :file:`README.md` and enter the following content. You can customize this if you'd like."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:347
#: a00dbbbd32b1412da5832bd11c4ae3e6
msgid "Because our configuration loads :file:`README.md` to provide a ``long_description``, :file:`README.md` must be included along with your code when you :ref:`generate a source distribution <generating archives>`. Newer versions of :ref:`setuptools` will do this automatically."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:354
#: 2c34b4ac442341cdb96db94c2649899e
msgid "Creating a LICENSE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:356
#: 3d55e34dadfe4c918c33a6075f918453
msgid "It's important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see https://choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:387
#: 6e2161c3dfc94388a220287815fa2b2b
msgid "Including other files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:389
#: aa90bbf74d214ce78defde5934219f70
msgid "The files listed above will be included automatically in your :term:`source distribution <Source Distribution (or \"sdist\")>`. If you want to control what goes in this explicitly, see :ref:`Using MANIFEST.in`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:393
#: b2f4f26feb2b45d1b441cdd803493012
msgid "The final :term:`built distribution <Built Distribution>` will have the Python files in the discovered or listed Python packages. If you want to control what goes here, such as to add data files, see :doc:`Including Data Files <setuptools:userguide/datafiles>` from the :doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:402
#: 76cfffd7fcca415bb1885d81fca7ee9f
msgid "Generating distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:404
#: 8208668c04674a04b323fe39856a65c1
msgid "The next step is to generate :term:`distribution packages <Distribution Package>` for the package. These are archives that are uploaded to the Python Package Index and can be installed by :ref:`pip`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:408
#: 5a081deefb69449384ff8ccbb74a5e2e
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:422
#: ae306398e9da497a82cf2e89765e9d9d
msgid "If you have trouble installing these, see the :doc:`installing-packages` tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:425
#: 5d10090af5ec4116b882d536626a4ca6
msgid "Now run this command from the same directory where :file:`pyproject.toml` is located:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:439
#: 64f2365c63cb42b89603b3fbb5cfa14c
msgid "This command should output a lot of text and once completed should generate two files in the :file:`dist` directory:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:449
#: 0f6d89d8914e426fac619f0841f8a7f0
msgid "The ``tar.gz`` file is a :term:`source archive <Source Archive>` whereas the ``.whl`` file is a :term:`built distribution <Built Distribution>`. Newer :ref:`pip` versions preferentially install built distributions, but will fall back to source archives if needed. You should always upload a source archive and provide built archives for the platforms your project is compatible with. In this case, our example package is compatible with Python on any platform so only one built distribution is needed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:458
#: 2fba0113aa354be88c390af94dcc6e69
msgid "Uploading the distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:460
#: 73e04654f08042f3acdf9d542b2e00d9
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:462
#: f8d2844c7b17410a8fc416fab71904e1
msgid "The first thing you'll need to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. It's great for things like this tutorial where we don't necessarily want to upload to the real index. To register an account, go to https://test.pypi.org/account/register/ and complete the steps on that page. You will also need to verify your email address before you're able to upload any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:470
#: c135a8520db347a2a1a6a7403502fce3
msgid "To securely upload your project, you'll need a PyPI `API token`_. Create one at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" to \"Entire account\". **Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:477
#: f5b61289b82449c4a6c7fddbc3296232
msgid "Now that you are registered, you can use :ref:`twine` to upload the distribution packages. You'll need to install Twine:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:492
#: e8034e0817b6458b96a1f7931c21fdc2
msgid "Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:506
#: efa339185f8a480bbd5c32feacaceb08
msgid "You will be prompted for a username and password. For the username, use ``__token__``. For the password, use the token value, including the ``pypi-`` prefix."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:510
#: 5e2684f81cda45cb81ea8a1a6342cc28
msgid "After the command completes, you should see output similar to this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:523
#: 0134b0c1bc4f4a96b5bd08368d1005b7
msgid "Once uploaded your package should be viewable on TestPyPI, for example, https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:528
#: f730128b3bfb467cbe67458b11238de4
msgid "Installing your newly uploaded package"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:530
#: 40b4f7cb5f694394937079623c784779
msgid "You can use :ref:`pip` to install your package and verify that it works. Create a :ref:`virtual environment <Creating and using Virtual Environments>` and install your package from TestPyPI:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:546
#: 832a630dfa9f4ef480d53146565599ec
msgid "Make sure to specify your username in the package name!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:548
#: 02607746842d46a4934ab6321a53c82a
msgid "pip should install the package from TestPyPI and the output should look something like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:558
#: b183dbc95d4b4eac8531e876612d7303
msgid "This example uses ``--index-url`` flag to specify TestPyPI instead of live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have the same packages as the live PyPI, it's possible that attempting to install dependencies may fail or install something unexpected. While our example package doesn't have any dependencies, it's a good practice to avoid installing dependencies when using TestPyPI."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:565
#: e07819a166634dcea821094860db505c
msgid "You can test that it was installed correctly by importing the package. Make sure you're still in your virtual environment, then run Python:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:580
#: 03b71c6d93f647d486d282764ecc2731
msgid "and import the package:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:588
#: 99e2aadbfd204be287423153b3cb5231
msgid "Note that the :term:`import package <Import Package>` is ``example_package`` regardless of what ``name`` you gave your :term:`distribution package <Distribution Package>` in :file:`setup.cfg` or :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``)."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:596
#: 7ac9b3e493f54e5b956efcec43097226
msgid "**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 ✨"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:599
#: d99460d4602e4671971790ae80e926c5
msgid "Keep in mind that this tutorial showed you how to upload your package to Test PyPI, which isn't a permanent storage. The Test system occasionally deletes packages and accounts. It is best to use TestPyPI for testing and experiments like this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:604
#: 0ddea819d1c54fcd8b3c63d37d0bf56e
msgid "When you are ready to upload a real package to the Python Package Index you can do much the same as you did in this tutorial, but with these important differences:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:608
#: d270fb50770c4c90b6febcec400d17fb
msgid "Choose a memorable and unique name for your package. You don't have to append your username as you did in the tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:610
#: e14e18e4fc04407e98ecbcf3ee23415d
msgid "Register an account on https://pypi.org - note that these are two separate servers and the login details from the test server are not shared with the main server."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:613
#: 8339aa8558754141bea9bfeba35ac0e4
msgid "Use ``twine upload dist/*`` to upload your package and enter your credentials for the account you registered on the real PyPI.  Now that you're uploading the package in production, you don't need to specify ``--repository``; the package will upload to https://pypi.org/ by default."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:617
#: f21c8a8de7fc4ef9bb1e325652988a7e
msgid "Install your package from the real PyPI using ``python3 -m pip install [your-package]``."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:619
#: 6290c059c30a4114894e7ff93e65635c
msgid "At this point if you want to read more on packaging Python libraries here are some things you can do:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:622
#: 0e9e79afe103407a8782f71024bfe96a
msgid "Read more about using :ref:`setuptools` to package libraries in :doc:`/guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:624
#: c5b333c302b94c6280ebcaa0f2e884cf
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:625
#: 7501df5429d14ac385e4a9196e214b42
msgid "Consider alternatives to :ref:`setuptools` such as :ref:`flit`, :ref:`hatch`, and :ref:`poetry`."
msgstr ""
