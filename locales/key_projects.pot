# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/key_projects.rst:6
#: e54c7036b17048d981e00b9cd23ec605
msgid "Project Summaries"
msgstr ""

#: ../source/key_projects.rst:8
#: ae5d774e45f94f20a444c5d692f3375f
msgid "Summaries and links for the most relevant projects in the space of Python installation and packaging."
msgstr ""

#: ../source/key_projects.rst:14
#: 7d6b1b0698e14e2aae715f55c327b74e
msgid "PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:19
#: 20c36b3bbd9b4ddbbc173a6d0796c1a9
msgid "bandersnatch"
msgstr ""

#: ../source/key_projects.rst:21
#: fec71d236e0a46c6a1cff3440ba892c2
msgid "`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"
msgstr ""

#: ../source/key_projects.rst:25
#: ff5c0d519541442dac13d795f6762b43
msgid "``bandersnatch`` is a PyPI mirroring client designed to efficiently create a complete mirror of the contents of PyPI. Organizations thus save bandwidth and latency on package downloads (especially in the context of automated tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN)."
msgstr ""

#: ../source/key_projects.rst:35
#: 5fb7600a49af479ea0779ff0decc5515
msgid "build"
msgstr ""

#: ../source/key_projects.rst:37
#: 764abc964d354dc6952d73f9b6f807c2
msgid "`Docs <https://pypa-build.readthedocs.io/>`__ | `Issues <https://github.com/pypa/build/issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://pypi.org/project/build>`__"
msgstr ""

#: ../source/key_projects.rst:42
#: b01137f142b94730b33cb0bffaa590fe
msgid "``build`` is a :pep:`517` compatible Python package builder. It provides a CLI to build packages, as well as a Python API."
msgstr ""

#: ../source/key_projects.rst:49
#: 9e38df89c72943b7a5bfea3c97425989
msgid "cibuildwheel"
msgstr ""

#: ../source/key_projects.rst:51
#: 7eff3bf365c14bc7864bed8a4dcf4b11
msgid "`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | `Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""

#: ../source/key_projects.rst:58
#: 2c23aeca449e4e12b9a7dd5e0a7db6db
msgid "``cibuildwheel`` is a package that builds wheels for all common platforms and Python versions on most CI systems."
msgstr ""

#: ../source/key_projects.rst:65
#: 8f935e10de904d76922159cb4b87beb6
msgid "distlib"
msgstr ""

#: ../source/key_projects.rst:67
#: 839cf433b4934cf684f8c43e68c912d1
msgid "`Docs <http://pythonhosted.org/distlib/>`__ | `Issues <https://bitbucket.org/pypa/distlib/issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket.org/pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"
msgstr ""

#: ../source/key_projects.rst:72
#: 518c56d9c0a8494e89595b3ebd368aff
msgid "``distlib`` is a library which implements low-level functions that relate to packaging and distribution of Python software.  ``distlib`` implements several relevant PEPs (Python Enhancement Proposal standards) and is useful for developers of third-party packaging tools to make and upload binary and source :term:`distributions <Distribution Package>`, achieve interoperability, resolve dependencies, manage package resources, and do other similar functions."
msgstr ""

#: ../source/key_projects.rst:81
#: 85ad5ee0e9c54f178a15eefaa05be0fe
msgid "Unlike the stricter :ref:`packaging` project (below), which specifically implements modern Python packaging interoperability standards, ``distlib`` also attempts to provide reasonable fallback behaviours when asked to handle legacy packages and metadata that predate the modern interoperability standards and fall into the subset of packages that are incompatible with those standards."
msgstr ""

#: ../source/key_projects.rst:91
#: 9d2a55bdb4a14516b97aaeb649a0faf0
msgid "packaging"
msgstr ""

#: ../source/key_projects.rst:93
#: 4f1a26c2a89349679c8d20b888edacf4
msgid "`Docs <https://packaging.pypa.io>`__ | `Issues <https://github.com/pypa/packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://pypi.org/project/packaging>`__"
msgstr ""

#: ../source/key_projects.rst:98
#: a90368fa8a1b49b891d8a0a2275830a8
msgid "Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""

#: ../source/key_projects.rst:100
#: a216099eaf1848a08b6460435d8a5b56
msgid "The core utilities in the packaging library handle version handling, specifiers, markers, requirements, tags, and similar attributes and tasks for Python packages. Most Python users rely on this library without needing to explicitly call it; developers of the other Python packaging, distribution, and installation tools listed here often use its functionality to parse, discover, and otherwise handle dependency attributes."
msgstr ""

#: ../source/key_projects.rst:108
#: b404590049d04696a6034da1caaee571
msgid "This project specifically focuses on implementing the modern Python packaging interoperability standards defined at :ref:`packaging-specifications`, and will report errors for sufficiently old legacy packages that are incompatible with those standards. In contrast, the :ref:`distlib` project is a more permissive library that attempts to provide a plausible reading of ambiguous metadata in cases where :ref:`packaging` will instead report on error."
msgstr ""

#: ../source/key_projects.rst:120
#: ad0b346135b04ed886b379f529e9622a
msgid "pip"
msgstr ""

#: ../source/key_projects.rst:122
#: 0481ee83fc5f41efb0cddc34caffdff8
msgid "`Docs <https://pip.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi.org/project/pip/>`__"
msgstr ""

#: ../source/key_projects.rst:127
#: 88c194e7e10640c2b19ace3c607cd0be
msgid "The most popular tool for installing Python packages, and the one included with modern versions of Python."
msgstr ""

#: ../source/key_projects.rst:130
#: 39637bcec2fe4c3aa7eb42c2f6147ba3
msgid "It provides the essential core features for finding, downloading, and installing packages from PyPI and other Python package indexes, and can be incorporated into a wide range of development workflows via its command-line interface (CLI)."
msgstr ""

#: ../source/key_projects.rst:138
#: a40d65c8d23c47839555a1b81032b660
msgid "Pipenv"
msgstr ""

#: ../source/key_projects.rst:140
#: d9b644522530483a94ff1f397a946313
msgid "`Docs <https://pipenv.pypa.io/>`__ | `Source <https://github.com/pypa/pipenv>`__ | `Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/project/pipenv>`__"
msgstr ""

#: ../source/key_projects.rst:145
#: 9976b9e3afb946b08f9f5df15814a736
msgid "Pipenv is a project that aims to bring the best of all packaging worlds to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:`virtualenv` into one single toolchain. It features very pretty terminal colors."
msgstr ""

#: ../source/key_projects.rst:149
#: dd217d902a5f47ed8b9fce176b7dd4b6
msgid "Pipenv aims to help users manage environments, dependencies, and imported packages on the command line. It also works well on Windows (which other tools often underserve), makes and checkes file hashes, to ensure compliance with hash-locked dependency specifiers, and eases uninstallation of packages and dependencies. It is used by Python users and system administrators, but has been less maintained since late 2018."
msgstr ""

#: ../source/key_projects.rst:160
#: 717a5ee4a3e94290ab5c86425468fd0a
msgid "Pipfile"
msgstr ""

#: ../source/key_projects.rst:162
#: a1eea6cf38cb4ee0b4ac0358ae8919b0
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr ""

#: ../source/key_projects.rst:164
#: 7d60eebd818044daa52b4273f6d7bc8d
msgid ":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level application-centric alternative to :ref:`pip`'s lower-level :file:`requirements.txt` file."
msgstr ""

#: ../source/key_projects.rst:170
#: dfa7f2958b2042aeab28a6100a1cb678
msgid "Python Packaging User Guide"
msgstr ""

#: ../source/key_projects.rst:172
#: c2d4e65f4e1941c2aaf29261463389ac
msgid "`Docs <https://packaging.python.org/en/latest/>`__ | `Issues <https://github.com/pypa/python-packaging-user-guide/issues>`__ | `GitHub <https://github.com/pypa/python-packaging-user-guide>`__"
msgstr ""

#: ../source/key_projects.rst:176
#: ac55e545308842d89a2d5dda2b2007ad
msgid "This guide!"
msgstr ""

#: ../source/key_projects.rst:181
#: 36957e76bd7b48daa06726e9487477e1
msgid "readme_renderer"
msgstr ""

#: ../source/key_projects.rst:183
#: 5c0218d1ff4243efa57395d85f4d3ddb
msgid "`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI <https://pypi.org/project/readme_renderer/>`__"
msgstr ""

#: ../source/key_projects.rst:186
#: bbf69ab186ed4426aae7c2186032ca65
msgid "``readme_renderer`` is a library that package developers use to render their user documentation (README) files into HTML from markup languages such as Markdown or reStructuredText. Developers call it on its own or via :ref:`twine`, as part of their release management process, to check that their package descriptions will properly display on PyPI."
msgstr ""

#: ../source/key_projects.rst:197
#: b5d260e2dff64ace98536090099492c4
msgid "setuptools"
msgstr ""

#: ../source/key_projects.rst:199
#: e9abec5be10c44c1bb5328f199d4f0f3
msgid "`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""

#: ../source/key_projects.rst:204
#: fda89cb400d04dd180abe5b64dcf656b
msgid "setuptools (which includes ``easy_install``) is a collection of enhancements to the Python distutils that allow you to more easily build and distribute Python :term:`distributions <Distribution Package>`, especially ones that have dependencies on other packages."
msgstr ""

#: ../source/key_projects.rst:209
#: f7913f230bc14f1a994679614336c76a
msgid "`distribute`_ was a fork of setuptools that was merged back into setuptools (in v0.7), thereby making setuptools the primary choice for Python packaging."
msgstr ""

#: ../source/key_projects.rst:216
#: 4d5cb2c33d81479296064a3052e780f5
msgid "trove-classifiers"
msgstr ""

#: ../source/key_projects.rst:218
#: 2284aa17565e471fa51af2468dbc1d74
msgid "`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub <https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/project/trove-classifiers/>`__"
msgstr ""

#: ../source/key_projects.rst:222
#: a61e144149854fb4886d566dd6a38c7c
msgid "trove-classifiers is the canonical source for `classifiers on PyPI <https://pypi.org/classifiers/>`_, which project maintainers use to `systematically describe their projects <https://packaging.python.org/specifications/core-metadata/#classifier-multiple-use>`_ so that users can better find projects that match their needs on the PyPI."
msgstr ""

#: ../source/key_projects.rst:228
#: 282316ca8505470c84fd1e898e155544
msgid "The trove-classifiers package contains a list of valid classifiers and deprecated classifiers (which are paired with the classifiers that replace them).  Use this package to validate classifiers used in packages intended for uploading to PyPI. As this list of classifiers is published as code, you can install and import it, giving you a more convenient workflow compared to referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for the project hosts discussions on proposed classifiers and requests for new classifiers."
msgstr ""

#: ../source/key_projects.rst:242
#: de6a641f98ed4892a424408f489e80a2
msgid "twine"
msgstr ""

#: ../source/key_projects.rst:244
#: 9e32f81109354cd089b1976bfa34ab7a
msgid "`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | `PyPI <https://pypi.org/project/twine>`__"
msgstr ""

#: ../source/key_projects.rst:249
#: 31298cc8e0754c40b957397a1da5fb81
msgid "Twine is the primary tool developers use to upload packages to the Python Package Index or other Python package indexes. It is a command-line program that passes program files and metadata to a web API. Developers use it because it's the official PyPI upload tool, it's fast and secure, it's maintained, and it reliably works."
msgstr ""

#: ../source/key_projects.rst:259
#: b3229df1dff14ecc9e0af774f6e1812b
msgid "virtualenv"
msgstr ""

#: ../source/key_projects.rst:261
#: 21b792755d0e46dc9fced7de3f5b22c4
msgid "`Docs <https://virtualenv.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"
msgstr ""

#: ../source/key_projects.rst:266
#: 998ddf5999c44db9aac4a0605e249abb
msgid "virtualenv is a tool which uses the command-line path environment variable to create isolated Python :term:`Virtual Environments <Virtual Environment>`, much as :ref:`venv` does. virtualenv provides additional functionality, compared to :ref:`venv`, by supporting Python 2.7 and by providing convenient features for configuring, maintaining, duplicating, and troubleshooting the virtual environments. For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/key_projects.rst:279
#: 2c1d01242a2d468289de7cdaaf23d130
msgid "Warehouse"
msgstr ""

#: ../source/key_projects.rst:281
#: 081a41a577094fb2bc7af2640d2b5dc6
msgid "`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""

#: ../source/key_projects.rst:285
#: a9e61b1de46541ac86555eefeff72003
msgid "The current codebase powering the :term:`Python Package Index (PyPI)`. It is hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` downloads."
msgstr ""

#: ../source/key_projects.rst:293
#: d49f25de4a6e4073a6a53a5fd34eff99
msgid "wheel"
msgstr ""

#: ../source/key_projects.rst:295
#: 8163658adaa0433a865e70eb3b39f7e9
msgid "`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"
msgstr ""

#: ../source/key_projects.rst:300
#: 1f6492e27c4f4704be2380911082e231
msgid "Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` extension for creating :term:`wheel distributions <Wheel>`.  Additionally, it offers its own command line utility for creating and installing wheels."
msgstr ""

#: ../source/key_projects.rst:304
#: ece1a197bd0f4a3097df9b8c97d0a6f4
msgid "See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that package developers use to check and fix Python packages they are making in the binary wheel format. It provides functionality to discover dependencies, check metadata for compliance, and repair the wheel and metadata to properly link and include external shared libraries in a package."
msgstr ""

#: ../source/key_projects.rst:313
#: 2db757279e5742ae8eafed22b369cea1
msgid "Non-PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:318
#: c9b55ad6c2284900b06b0214ffce956f
msgid "bento"
msgstr ""

#: ../source/key_projects.rst:320
#: 4d6c2ff9a55f473e86dab12c1a7758ae
msgid "`Docs <http://cournape.github.io/Bento/>`__ | `Issues <https://github.com/cournape/Bento/issues>`__ | `GitHub <https://github.com/cournape/Bento>`__ | `PyPI <https://pypi.org/project/bento>`__"
msgstr ""

#: ../source/key_projects.rst:325
#: 2a54416a31e9499aba9bb52dd5c5944f
msgid "Bento is a packaging tool solution for Python software, targeted as an alternative to :ref:`distutils`, :ref:`setuptools`, etc....  Bento's philosophy is reproducibility, extensibility and simplicity (in that order)."
msgstr ""

#: ../source/key_projects.rst:333
#: 7f4fbf9b5c914a948a262df74aebc0cc
msgid "buildout"
msgstr ""

#: ../source/key_projects.rst:335
#: 699897f1313f42fc8b3d285e794cbfec
msgid "`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs.launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc.buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""

#: ../source/key_projects.rst:340
#: 83667288752f4bfda689b622e6d0d5bd
msgid "Buildout is a Python-based build system for creating, assembling and deploying applications from multiple parts, some of which may be non-Python-based.  It lets you create a buildout configuration and reproduce the same software later."
msgstr ""

#: ../source/key_projects.rst:347
#: 61c5ea504db84f97ac84aeadb37c932e
msgid "conda"
msgstr ""

#: ../source/key_projects.rst:349
#: bf911498487c4b6c8eaebc2f175d11fc
msgid "`Docs <http://conda.pydata.org/docs/>`__"
msgstr ""

#: ../source/key_projects.rst:351
#: 6c14a3b1698047b680d2c0fdb98a2ed6
msgid "conda is the package management tool for `Anaconda <https://docs.anaconda.com/anaconda/>`__ Python installations. Anaconda Python is a distribution from `Anaconda, Inc <https://www.anaconda.com/download>`__ specifically aimed at the scientific community, and in particular on Windows where the installation of binary extensions is often difficult."
msgstr ""

#: ../source/key_projects.rst:358
#: 1e2e883f6c0d4a82be4b81ef577bda80
msgid "Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, but provides many of their combined features in terms of package management, virtual environment management and deployment of binary extensions."
msgstr ""

#: ../source/key_projects.rst:362
#: a6a0d627b471410dac13d8406a3b3cd2
msgid "Conda does not install packages from PyPI and can install only from the official Anaconda repositories, or anaconda.org (a place for user-contributed *conda* packages), or a local (e.g. intranet) package server.  However, note that :ref:`pip` can be installed into, and work side-by-side with conda for managing :term:`distributions <Distribution Package>` from PyPI. Also, `conda skeleton <https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`__ is a tool to make Python packages installable by conda by first fetching them from PyPI and modifying their metadata."
msgstr ""

#: ../source/key_projects.rst:375
#: d9f08edb0ef2407b89ff2dc15bd1d63d
msgid "devpi"
msgstr ""

#: ../source/key_projects.rst:377
#: bea1adda38c1416c8f73825d96766dfb
msgid "`Docs <http://doc.devpi.net/latest/>`__ | `Issues <https://bitbucket.org/hpk42/devpi/issues>`__ | `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""

#: ../source/key_projects.rst:381
#: fc1639efd2b34158a05dcbf8620d0fb0
msgid "devpi features a powerful PyPI-compatible server and PyPI proxy cache with a complementary command line tool to drive packaging, testing and release activities with Python. devpi also provides a browsable and searchable web interface."
msgstr ""

#: ../source/key_projects.rst:390
#: fcb7d3ddc1374448a70ce04e993f3c03
msgid "flit"
msgstr ""

#: ../source/key_projects.rst:392
#: adfe8a996518414caff701ec803f06d3
msgid "`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/takluyver/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""

#: ../source/key_projects.rst:396
#: f893f659e62c43efa515c6a5db2d97ab
msgid "Flit provides a simple way to upload pure Python packages and modules to PyPI. It focuses on `making the easy things easy <flit-rationale_>`_ for packaging. Flit can generate a configuration file to quickly set up a simple project, build source distributions and wheels, and upload them to PyPI."
msgstr ""

#: ../source/key_projects.rst:401
#: 024b5fa43449403784cdcfe1a2adbb59
msgid "Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to upload them to PyPI. Flit requires Python 3, but you can use it to distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""

#: ../source/key_projects.rst:411
#: fe07f4d8c3b04bc3a2d0f921256dc978
msgid "enscons"
msgstr ""

#: ../source/key_projects.rst:413
#: a68cc600ccf94167b5e5a613d8a6c05a
msgid "`Source <https://bitbucket.org/dholth/enscons/src>`__ | `Issues <https://bitbucket.org/dholth/enscons/issues>`__ | `PyPI <https://pypi.org/project/enscons>`__"
msgstr ""

#: ../source/key_projects.rst:417
#: a844049dbdb745f1a75c2c5650adc7be
msgid "Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-compatible source distributions and wheels without using distutils or setuptools, including distributions with C extensions. Enscons has a different architecture and philosophy than :ref:`distutils`. Rather than adding build features to a Python packaging system, enscons adds Python packaging to a general purpose build system. Enscons helps you to build sdists that can be automatically built by :ref:`pip`, and wheels that are independent of enscons."
msgstr ""

#: ../source/key_projects.rst:432
#: 1fb7bbc87f804336941dc1468aeed8d6
msgid "Hashdist"
msgstr ""

#: ../source/key_projects.rst:434
#: 9c3249be28ca45cd9143313943aad3c5
msgid "`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/hashdist/hashdist/>`__"
msgstr ""

#: ../source/key_projects.rst:437
#: 913f4f3153204253aa11592662296ea2
msgid "Hashdist is a library for building non-root software distributions. Hashdist is trying to be “the Debian of choice for cases where Debian technology doesn’t work”. The best way for Pythonistas to think about Hashdist may be a more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed at solving the problem of installing scientific software, and making package distribution stateless, cached, and branchable. It is used by some researchers but has been lacking in maintenance since 2016."
msgstr ""

#: ../source/key_projects.rst:449
#: b37d338162df46649d31a9a1b4937128
msgid "hatch"
msgstr ""

#: ../source/key_projects.rst:451
#: 91e9dd1b0d874395b972735f7f54b21d
msgid "`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""

#: ../source/key_projects.rst:454
#: 75d6dcbcc4444d8a8496a5aa851bc2eb
msgid "Hatch is a unified command-line tool meant to conveniently manage dependencies and environment isolation for Python developers. Python package developers use Hatch to configure, version, specify dependencies for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` to upload packages to PyPI, and :ref:`pip` to download and install packages."
msgstr ""

#: ../source/key_projects.rst:464
#: 3b1ccf5cb24642248226fcaf972acc0a
msgid "pex"
msgstr ""

#: ../source/key_projects.rst:466
#: 3b3cb55e61644eb1a052b1f7c8975827
msgid "`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""

#: ../source/key_projects.rst:470
#: 678b0e1937bc469bbaf23c8ae658c85b
msgid "pex is both a library and tool for generating :file:`.pex` (Python EXecutable) files, standalone Python environments in the spirit of :ref:`virtualenv`. :file:`.pex` files are just carefully constructed zip files with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are designed to make deployment of Python applications as simple as ``cp``."
msgstr ""

#: ../source/key_projects.rst:479
#: 8bfe79564d234388aa90169280e4ee1c
msgid "pipx"
msgstr ""

#: ../source/key_projects.rst:481
#: 5cc9f0f811aa497b825fede4cf9ddc15
msgid "`Docs <https://pipxproject.github.io/pipx/>`__ | `GitHub <https://github.com/pipxproject/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""

#: ../source/key_projects.rst:485
#: f2c8510eee9548d3bddbac5defda10b7
msgid "pipx is a tool to safely install and run Python CLI applications globally."
msgstr ""

#: ../source/key_projects.rst:490
#: f7fa444cb1714ef09b9f7502e2bcc726
msgid "pip-tools"
msgstr ""

#: ../source/key_projects.rst:492
#: 795373501bd24dfd96f57762f12d66f1
msgid "`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-tools/>`__"
msgstr ""

#: ../source/key_projects.rst:495
#: 8e23d795dec94753a31713073a58ea82
msgid "pip-tools is a suite of tools meant for Python system administrators and release managers who particularly want to keep their builds deterministic yet stay up to date with new versions of their dependencies. Users can specify particular release of their dependencies via hash, conveniently make a properly formatted list of requirements from information in other parts of their program, update all dependencies (a feature :ref:`pip` currently does not provide), and create layers of constraints for the program to obey."
msgstr ""

#: ../source/key_projects.rst:507
#: 86d1f8063442497da19131695030c647
msgid "piwheels"
msgstr ""

#: ../source/key_projects.rst:509
#: a949124da4fa43f2856c80a5d5269a1e
msgid "`Website <https://www.piwheels.org/>`__ | `Docs <https://piwheels.readthedocs.io/>`__ | `GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""

#: ../source/key_projects.rst:513
#: 1037c87384e044709b4ec8e264bfc99b
msgid "piwheels is a website, and software underpinning it, that fetches source code distribution packages from PyPI and compiles them into binary wheels that are optimized for installation onto Raspberry Pi computers. Raspberry Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""

#: ../source/key_projects.rst:522
#: 14f6e008289e45d7a378793c6e6563ae
msgid "poetry"
msgstr ""

#: ../source/key_projects.rst:524
#: 0b094b813b424a56a7493d53ac1f7a53
msgid "`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""

#: ../source/key_projects.rst:528
#: 564d561be9994c6db21e47f5ea10c8ee
msgid "poetry is a command-line tool to handle dependency installation and isolation as well as building and packaging of Python packages. It uses ``pyproject.toml`` and, instead of depending on the resolver functionality within :ref:`pip`, provides its own dependency resolver. It attempts to speed users' experience of installation and dependency resolution by locally caching metadata about dependencies."
msgstr ""

#: ../source/key_projects.rst:538
#: 4dcc0bfed4b54b03b6073fcce858fca9
msgid "pypiserver"
msgstr ""

#: ../source/key_projects.rst:540
#: 5ebfb909b4fa4d5d8652474a154a9043
msgid "`Docs <https://github.com/pypiserver/pypiserver/blob/master/README.rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi.org/project/pypiserver/>`__"
msgstr ""

#: ../source/key_projects.rst:544
#: 24e3b4dd7877496d819c71c222d7fd12
msgid "pypiserver is a minimalist application that serves as a private Python package index within organizations, implementing a simple API and browser interface. You can upload private packages using standard upload tools, and users can download and install them with :ref:`pip`, without publishing them publicly. Organizations who use pypiserver usually download packages both from pypiserver and from PyPI."
msgstr ""

#: ../source/key_projects.rst:554
#: 7a22c1fa4852419a8ef5e5b49e1587f7
msgid "scikit-build"
msgstr ""

#: ../source/key_projects.rst:556
#: baee6e934eb146cfbed348b1d8d23350
msgid "`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/scikit-build>`__"
msgstr ""

#: ../source/key_projects.rst:560
#: 2a27fad360a54bd6ae4a770e8457a15f
msgid "Scikit-build is an improved build system generator for CPython C/C++/Fortran/Cython extensions that integrates with :ref:`setuptools`, :ref:`wheel` and :ref:`pip`. It internally uses `cmake <https://pypi.org/project/cmake>`__ (available on PyPI) to provide better support for additional compilers, build systems, cross compilation, and locating dependencies and their associated build requirements. To speed up and parallelize the build of large projects, the user can install `ninja <https://pypi.org/project/ninja>`__ (also available on PyPI)."
msgstr ""

#: ../source/key_projects.rst:572
#: 6b69fee79eae4b80a954ee563d414b66
msgid "shiv"
msgstr ""

#: ../source/key_projects.rst:574
#: c5c17df4541043d180e6dd92db5e42d6
msgid "`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""

#: ../source/key_projects.rst:578
#: d827d93a7fbc4b249b90cda6ee014a0f
msgid "shiv is a command line utility for building fully self contained Python zipapps as outlined in :pep:`441`, but with all their dependencies included. Its primary goal is making distributing Python applications and command line tools fast & easy."
msgstr ""

#: ../source/key_projects.rst:586
#: 135d92ea7e784b0a9256db981273f2bb
msgid "Spack"
msgstr ""

#: ../source/key_projects.rst:588
#: 7863898fb80942b4a0d870c18f004168
msgid "`Docs <https://spack.readthedocs.io/>`__ | `GitHub <https://github.com/llnl/spack/>`__ | `Paper <http://www.computer.org/csdl/proceedings/sc/2015/3723/00/2807623.pdf>`__ | `Slides <https://tgamblin.github.io/files/Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""

#: ../source/key_projects.rst:593
#: 5537ab32098c4c8caa6de115989cf4e2
msgid "A flexible package manager designed to support multiple versions, configurations, platforms, and compilers.  Spack is like Homebrew, but packages are written in Python and parameterized to allow easy swapping of compilers, library versions, build options, etc. Arbitrarily many versions of packages can coexist on the same system. Spack was designed for rapidly building high performance scientific applications on clusters and supercomputers."
msgstr ""

#: ../source/key_projects.rst:601
#: 3c302c22e2fa45e484add88008f7acfe
msgid "Spack is not in PyPI (yet), but it requires no installation and can be used immediately after cloning from GitHub."
msgstr ""

#: ../source/key_projects.rst:607
#: a8bc9f0809d6478a9637e54a1297226e
msgid "zest.releaser"
msgstr ""

#: ../source/key_projects.rst:609
#: 232e347ac21a43b1b07ea8db2c2e87f2
msgid "`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/zest.releaser/>`__"
msgstr ""

#: ../source/key_projects.rst:613
#: de5624ea1e2144d5b4237d3bf3124359
msgid "``zest.releaser`` is a Python package release tool providing an abstraction layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to automate incrementing package version numbers, updating changelogs, tagging releases in source control, and uploading new packages to PyPI."
msgstr ""

#: ../source/key_projects.rst:620
#: ab08d45f0b094726950bbe834ac0a4ec
msgid "Standard Library Projects"
msgstr ""

#: ../source/key_projects.rst:625
#: a0914144782d4b81af1a0cae02cb5eaa
msgid "ensurepip"
msgstr ""

#: ../source/key_projects.rst:627
#: 48e8e722b9904b7c9294efcda5567131
msgid "`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:630
#: 11978c4eada541058fd0c1088f1b0482
msgid "A package in the Python Standard Library that provides support for bootstrapping :ref:`pip` into an existing Python installation or virtual environment.  In most cases, end users won't use this module, but rather it will be used during the build of the Python distribution."
msgstr ""

#: ../source/key_projects.rst:639
#: 3c169ead63544decb9edcc597c0fdac0
msgid "distutils"
msgstr ""

#: ../source/key_projects.rst:641
#: 3060505fe05f472ba98be948875e4cec
msgid "`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:644
#: 5631a7cbeb344ad4a55c3c6bf131958b
msgid "The original Python packaging system, added to the standard library in Python 2.0."
msgstr ""

#: ../source/key_projects.rst:647
#: bfa88c3ecff74b0ba6c513829d3c7af6
msgid "Due to the challenges of maintaining a packaging system where feature updates are tightly coupled to language runtime updates, direct usage of :ref:`distutils` is now actively discouraged, with :ref:`Setuptools` being the preferred replacement. :ref:`Setuptools` not only provides features that plain :ref:`distutils` doesn't offer (such as dependency declarations and entry point declarations), it also provides a consistent build interface and feature set across all supported Python versions."
msgstr ""

#: ../source/key_projects.rst:660
#: eddc472fb73f4924a76f90123ac7d3c0
msgid "venv"
msgstr ""

#: ../source/key_projects.rst:662
#: f334aefd9ce54ec6b32def433dc9a9f5
msgid "`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:665
#: e58d9886588946d895fabade9e898b2d
msgid "A package in the Python Standard Library (starting with Python 3.3) for creating :term:`Virtual Environments <Virtual Environment>`.  For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""
