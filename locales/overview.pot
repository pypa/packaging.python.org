# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013â€“2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/overview.rst:3
#: 99a6d9b4b7184fc09c2b8b9eea488b02
msgid "An Overview of Packaging for Python"
msgstr ""

#: ../source/overview.rst:7
#: 3cd15d9f4c464e0db11008e60c2b5485
msgid "As a general-purpose programming language, Python is designed to be used in many ways. You can build web sites or industrial robots or a game for your friends to play, and much more, all using the same core technology."
msgstr ""

#: ../source/overview.rst:12
#: baabc81c536c4ddf8bddf4df73ad26c1
msgid "Python's flexibility is why the first step in every Python project must be to think about the project's audience and the corresponding environment where the project will run. It might seem strange to think about packaging before writing code, but this process does wonders for avoiding future headaches."
msgstr ""

#: ../source/overview.rst:18
#: 66e80ff06f03455bb0d493159b306cab
msgid "This overview provides a general-purpose decision tree for reasoning about Python's plethora of packaging options. Read on to choose the best technology for your next project."
msgstr ""

#: ../source/overview.rst:23
#: 7c78d2380ba5453db3d4f78b65224879
msgid "Contents"
msgstr ""

#: ../source/overview.rst:26
#: d1b40022fdd64e379f27b91ca6ad14ce
msgid "Thinking about deployment"
msgstr ""

#: ../source/overview.rst:28
#: 5f924e68ec8a4a0fb89a7a915e90056c
msgid "Packages exist to be installed (or *deployed*), so before you package anything, you'll want to have some answers to the deployment questions below:"
msgstr ""

#: ../source/overview.rst:32
#: a7d6cb613503438bb1801027dc021b4d
msgid "Who are your software's users? Will your software be installed by other developers doing software development, operations people in a datacenter, or a less software-savvy group?"
msgstr ""

#: ../source/overview.rst:35
#: 710c6fbb893041238016af3e0d8d1336
msgid "Is your software intended to run on servers, desktops, mobile clients (phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""

#: ../source/overview.rst:37
#: 943661680b714c4c8dcabf2bfd227f9b
msgid "Is your software installed individually, or in large deployment batches?"
msgstr ""

#: ../source/overview.rst:39
#: c0cd042eb19d4683afbdd210899ee74b
msgid "Packaging is all about target environment and deployment experience. There are many answers to the questions above and each combination of circumstances has its own solutions. With this information, the following overview will guide you to the packaging technologies best suited to your project."
msgstr ""

#: ../source/overview.rst:46
#: 639e036af62a45029002855ea4855659
msgid "Packaging Python libraries and tools"
msgstr ""

#: ../source/overview.rst:48
#: ecb8700a7d894dc48c015c186c83be00
msgid "You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are just a few of the tools Python's ecosystem provides for distributing Python code to developers, which you can read about in :doc:`guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/overview.rst:53
#: aa3d95196748418ca51ffc1b2cba3b28
msgid "The following approaches to packaging are meant for libraries and tools used by technical audience in a development setting. If you're looking for ways to package Python for a non-technical audience and/or a production setting, skip ahead to :ref:`packaging-applications`."
msgstr ""

#: ../source/overview.rst:59
#: 21234af44b704b84a3071ec75f2d4120
msgid "Python modules"
msgstr ""

#: ../source/overview.rst:61
#: 0570605775764ee3a58ebbda28a48969
msgid "A Python file, provided it only relies on the standard library, can be redistributed and reused. You will also need to ensure it's written for the right version of Python, and only relies on the standard library."
msgstr ""

#: ../source/overview.rst:66
#: 73b12d7f1d3947ef8859f274d93b2302
msgid "This is great for sharing simple scripts and snippets between people who both have compatible Python versions (such as via email, StackOverflow, or GitHub gists). There are even some entire Python libraries that offer this as an option, such as `bottle.py <https://bottlepy.org/docs/dev/>`_ and `boltons <http://boltons.readthedocs.io/en/latest/architecture.html#architecture>`_."
msgstr ""

#: ../source/overview.rst:73
#: 2773170d2385493d9f6ecccf8912f5c0
msgid "However, this pattern won't scale for projects that consist of multiple files, need additional libraries, or need a specific version of Python, hence the options below."
msgstr ""

#: ../source/overview.rst:78
#: cf017a04fc694e5889adf3be5eb53315
msgid "Python source distributions"
msgstr ""

#: ../source/overview.rst:80
#: 5c2393b9af7b47478c050112c9f04067
msgid "If your code consists of multiple Python files, it's usually organized into a directory structure. Any directory containing Python files can comprise an :term:`Import Package`."
msgstr ""

#: ../source/overview.rst:84
#: 15a1fb0bb032408d857ec729d41cc0ac
msgid "Because packages consist of multiple files, they are harder to distribute. Most protocols support transferring only one file at a time (when was the last time you clicked a link and it downloaded multiple files?). It's easier to get incomplete transfers, and harder to guarantee code integrity at the destination."
msgstr ""

#: ../source/overview.rst:90
#: da62d48f84424857b010f4c42da7db01
msgid "So long as your code contains nothing but pure Python code, and you know your deployment environment supports your version of Python, then you can use Python's native packaging tools to create a *source* :term:`Distribution Package`, or *sdist* for short."
msgstr ""

#: ../source/overview.rst:95
#: 0a30c26700e443d88f84ef8838bdc3a8
msgid "Python's *sdists* are compressed archives (``.tar.gz`` files) containing one or more packages or modules. If your code is pure-Python, and you only depend on other Python packages, you can `go here to learn more <https://docs.python.org/3/distutils/sourcedist.html>`_."
msgstr ""

#: ../source/overview.rst:100
#: 366ef8d1996b453b903f9f2c5b83ef51
msgid "If you rely on any non-Python code, or non-Python packages (such as `libxml2 <https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi.org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi.org/project/numpy>`_), you will need to use the format detailed in the next section, which also has many advantages for pure-Python libraries."
msgstr ""

#: ../source/overview.rst:107
#: e4e19a803d4c4eac9379211d70953079
msgid "Python and PyPI support multiple distributions providing different implementations of the same package. For instance the unmaintained-but-seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an actively-maintained fork of PIL!"
msgstr ""

#: ../source/overview.rst:114
#: b501440b518b4146b7fb9360ff32624f
msgid "This Python packaging superpower makes it possible for Pillow to be a drop-in replacement for PIL, just by changing your project's ``install_requires`` or ``requirements.txt``."
msgstr ""

#: ../source/overview.rst:119
#: d1fbd39828a3473eb5b9d27ed55decbc
msgid "Python binary distributions"
msgstr ""

#: ../source/overview.rst:121
#: 94f0af75ea014c42b31f0939129ff5ce
msgid "So much of Python's practical power comes from its ability to integrate with the software ecosystem, in particular libraries written in C, C++, Fortran, Rust, and other languages."
msgstr ""

#: ../source/overview.rst:125
#: 8691e3bdcc0147c0ac20bd0568ca2372
msgid "Not all developers have the right tools or experiences to build these components written in these compiled languages, so Python created the :term:`Wheel`, a package format designed to ship libraries with compiled artifacts. In fact, Python's package installer, ``pip``, always prefers wheels because installation is always faster, so even pure-Python packages work better with wheels."
msgstr ""

#: ../source/overview.rst:132
#: 2a637f3771694e14be30342ed3f7e956
msgid "Binary distributions are best when they come with source distributions to match. Even if you don't upload wheels of your code for every operating system, by uploading the sdist, you're enabling users of other platforms to still build it for themselves. Default to publishing both sdist and wheel archives together, *unless* you're creating artifacts for a very specific use case where you know the recipient only needs one or the other."
msgstr ""

#: ../source/overview.rst:140
#: 166c301d224a4c0c89b20e3c52dd6a5c
msgid "Python and PyPI make it easy to upload both wheels and sdists together. Just follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""

#: ../source/overview.rst:148
#: 42b5bf0514884f63bc7ef52b81f8e4ae
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr ""

#: ../source/overview.rst:148
#: 2c90747461c64e448e61e1c7f787d221
msgid "Python's recommended built-in library and tool packaging technologies. Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?v=iLVNWfPWAC8>`_."
msgstr ""

#: ../source/overview.rst:155
#: 827a98db451e4d8a8646fdab6477978b
msgid "Packaging Python applications"
msgstr ""

#: ../source/overview.rst:157
#: fd28bd7f08a542b0afa238739f004dba
msgid "So far we've only discussed Python's native distribution tools. Based on our introduction, you would be correct to infer these built-in approaches only target environments which have Python, and an audience who knows how to install Python packages."
msgstr ""

#: ../source/overview.rst:162
#: 8bff74669b7e45489fe43a0c710ee2b8
msgid "With the variety of operating systems, configurations, and people out there, this assumption is only safe when targeting a developer audience."
msgstr ""

#: ../source/overview.rst:166
#: b43e3e649e5a4a5483f9711e251ba403
msgid "Python's native packaging is mostly built for distributing reusable code, called libraries, between developers. You can piggyback **tools**, or basic applications for developers, on top of Python's library packaging, using technologies like `setuptools entry_points <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html>`_."
msgstr ""

#: ../source/overview.rst:172
#: 44ac75d01c074df2983b504259302f02
msgid "Libraries are building blocks, not complete applications. For distributing applications, there's a whole new world of technologies out there."
msgstr ""

#: ../source/overview.rst:176
#: e9ae25d589b24fdb944fba0d173170fd
msgid "The next few sections organize these application packaging options according to their dependencies on the target environment, so you can choose the right one for your project."
msgstr ""

#: ../source/overview.rst:181
#: e8868fd4fada4a7b8c1b1de98f9a6465
msgid "Depending on a framework"
msgstr ""

#: ../source/overview.rst:183
#: 014f2c24f94e437bbe5658660bbc820c
msgid "Some types of Python applications, like web site backends and other network services, are common enough that they have frameworks to enable their development and packaging. Other types of applications, like dynamic web frontends and mobile clients, are complex enough to target that a framework becomes more than a convenience."
msgstr ""

#: ../source/overview.rst:189
#: 49280277fbee4d4d83dcf329112c10c1
msgid "In all these cases, it makes sense to work backwards, from the framework's packaging and deployment story. Some frameworks include a deployment system which wraps the technologies outlined in the rest of the guide. In these cases, you'll want to defer to your framework's packaging guide for the easiest and most reliable production experience."
msgstr ""

#: ../source/overview.rst:195
#: 97e628d5b9a54166aa28784cbe3d7679
msgid "If you ever wonder how these platforms and frameworks work under the hood, you can always read the sections beyond."
msgstr ""

#: ../source/overview.rst:199
#: e193e854911c4192801f53f810118dfd
msgid "Service platforms"
msgstr ""

#: ../source/overview.rst:201
#: ff1502af217e47009303d7e40c8f04e2
msgid "If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like Heroku or Google App Engine, you are going to want to follow their respective packaging guides."
msgstr ""

#: ../source/overview.rst:205
#: a13f71467404408495c54333d9a2ec3c
msgid "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_"
msgstr ""

#: ../source/overview.rst:206
#: 96b9e98c128d4cd987f3421339e7f32b
msgid "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
msgstr ""

#: ../source/overview.rst:207
#: a914ed27599a45979a7e16a91affa9bd
msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
msgstr ""

#: ../source/overview.rst:208
#: 535cb6ad11404f04836a8bef60fb24d1
msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
msgstr ""

#: ../source/overview.rst:209
#: 1dc48800337946d390d342bf731fd10d
msgid "\"Serverless\" frameworks like `Zappa <https://www.zappa.io/>`_"
msgstr ""

#: ../source/overview.rst:211
#: f400732828564a0c8ff73a8a56c82185
msgid "In all these setups, the platform takes care of packaging and deployment, as long as you follow their patterns. Most software does not fit one of these templates, hence the existence of all the other options below."
msgstr ""

#: ../source/overview.rst:216
#: b9724dedf3f548759a476b42cc7fcba1
msgid "If you're developing software that will be deployed to machines you own, users' personal computers, or any other arrangement, read on."
msgstr ""

#: ../source/overview.rst:220
#: 82305e44f72d49b083ae6046881fb97a
msgid "Web browsers and mobile applications"
msgstr ""

#: ../source/overview.rst:222
#: 8dec0497353845f680dffbbc21cb3545
msgid "Python's steady advances are leading it into new spaces. These days you can write a mobile app or web application frontend in Python. While the language may be familiar, the packaging and deployment practices are brand new."
msgstr ""

#: ../source/overview.rst:227
#: 6d197c2de89f445e8b50dc40b5aeb954
msgid "If you're planning on releasing to these new frontiers, you'll want to check out the following frameworks, and refer to their packaging guides:"
msgstr ""

#: ../source/overview.rst:231
#: 58bfaf1cc434448d8afe0629f38402e4
msgid "`Kivy <https://kivy.org/#home>`_"
msgstr ""

#: ../source/overview.rst:232
#: 06b605b7181a4110865f6a7d727c29ae
msgid "`Beeware <https://pybee.org/>`_"
msgstr ""

#: ../source/overview.rst:233
#: f5d3b172ac36475fa7f05d9a3ab8c851
msgid "`Brython <https://brython.info/>`_"
msgstr ""

#: ../source/overview.rst:234
#: a6937705bbbe4a4593c79530ef18a79c
msgid "`Flexx <http://flexx.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../source/overview.rst:236
#: c8b77e7e16a345c4ba4998c5c3ec7d16
msgid "If you are *not* interested in using a framework or platform, or just wonder about some of the technologies and techniques utilized by the frameworks above, continue reading below."
msgstr ""

#: ../source/overview.rst:241
#: e7065369ed12469b99f2ee4bc4a92197
msgid "Depending on a pre-installed Python"
msgstr ""

#: ../source/overview.rst:243
#: f4ef59d62e904d31a5f7589abf05b066
msgid "Pick an arbitrary computer, and depending on the context, there's a very good chance Python is already installed. Included by default in most Linux and Mac operating systems for many years now, you can reasonably depend on Python preexisting in your data centers or on the personal machines of developers and data scientists."
msgstr ""

#: ../source/overview.rst:249
#: 65059907d845454a88e42f3a107a62f3
msgid "Technologies which support this model:"
msgstr ""

#: ../source/overview.rst:251
#: 1f8bce3c008e47d396cd93f391047f60
msgid "`PEX <https://github.com/pantsbuild/pex#pex>`_ (Python EXecutable)"
msgstr ""

#: ../source/overview.rst:252
#: d4ec3b3c40bb4e06ade6e9aab3d0c7a6
msgid "`zipapp <https://docs.python.org/3/library/zipapp.html>`_ (does not help manage dependencies, requires Python 3.5+)"
msgstr ""

#: ../source/overview.rst:253
#: cfcbf468616745eebc58cbcd8c50b170
msgid "`shiv <https://github.com/linkedin/shiv#shiv>`_ (requires Python 3)"
msgstr ""

#: ../source/overview.rst:255
#: 902801c4efce403eb7ba17338e745a39
msgid "Of all the approaches here, depending on a pre-installed Python relies the most on the target environment. Of course, this also makes for the smallest package, as small as single-digit megabytes, or even kilobytes."
msgstr ""

#: ../source/overview.rst:260
#: dc18a75705934fdf9a4c7710eb9b87ac
msgid "In general, decreasing the dependency on the target system increases the size of our package, so the solutions here are roughly arranged by increasing size of output."
msgstr ""

#: ../source/overview.rst:267
#: c12fa67ef81a4ac5abfd7e27329de0ed
msgid "Depending on a separate software distribution ecosystem"
msgstr ""

#: ../source/overview.rst:269
#: a20685e5fa884b71860b36b4e2fa4a48
msgid "For a long time many operating systems, including Mac and Windows, lacked built-in package management. Only recently did these OSes gain so-called \"app stores\", but even those focus on consumer applications and offer little for developers."
msgstr ""

#: ../source/overview.rst:274
#: 234f4609b84b480cac1d3b2320f9cdde
msgid "Developers long sought remedies, and in this struggle, emerged with their own package management solutions, such as `Homebrew <https://brew.sh/>`_. The most relevant alternative for Python developers is a package ecosystem called `Anaconda <https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is increasingly common in academic, analytical, and other data-oriented environments, even making its way `into server-oriented environments <https://www.paypal-engineering.com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""

#: ../source/overview.rst:284
#: d86785406f7d476e913627a3a934ec51
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr ""

#: ../source/overview.rst:286
#: b1f2643193b640c7ae793f279b71eeb0
msgid "`Building libraries and applications with conda <https://conda.io/docs/user-guide/tutorials/index.html>`_"
msgstr ""

#: ../source/overview.rst:287
#: 5591082f387047d993a5c4a68742b615
msgid "`Transitioning a native Python package to Anaconda <https://conda.io/docs/user-guide/tutorials/build-pkgs-skeleton.html>`_"
msgstr ""

#: ../source/overview.rst:289
#: 3709209f6e1a48419c17057aeb4b2f07
msgid "A similar model involves installing an alternative Python distribution, but does not support arbitrary operating system-level packages:"
msgstr ""

#: ../source/overview.rst:293
#: 8b142958c35c4f0fa7b1b8fb0f50cc67
msgid "`Enthought Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../source/overview.rst:294
#: 6e92e940cb6842baa12c4a2addb1051b
msgid "`ActiveState ActivePython <https://www.activestate.com/activepython>`_"
msgstr ""

#: ../source/overview.rst:295
#: a8bbdf10a55a4280a20905b0ae48ec8b
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr ""

#: ../source/overview.rst:300
#: e0b53e1f38f640a9b79c691025eff3d3
msgid "Bringing your own Python executable"
msgstr ""

#: ../source/overview.rst:302
#: 746fe1c3905b4199bf137c3b7e4cec2d
msgid "Computing as we know it is defined by the ability to execute programs. Every operating system natively supports one or more formats of program they can natively execute."
msgstr ""

#: ../source/overview.rst:306
#: 2bd9e854281a4c67b6a87e7788f5e3fd
msgid "There are many techniques and technologies which turn your Python program into one of these formats, most of which involve embedding the Python interpreter and any other dependencies into a single executable file."
msgstr ""

#: ../source/overview.rst:311
#: 1092e2e1792d4dd5804ccca9c4492e48
msgid "This approach, called *freezing*, offers wide compatibility and seamless user experience, though often requires multiple technologies, and a good amount of effort."
msgstr ""

#: ../source/overview.rst:315
#: be41a4df439045afb66920fb37261019
msgid "A selection of Python freezers:"
msgstr ""

#: ../source/overview.rst:317
#: e7d4dd9ffaa742d0a3b9a332aa396468
msgid "`pyInstaller <http://www.pyinstaller.org/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:318
#: 35786c45d3a5469aa6207f79491c7efa
msgid "`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:319
#: 9f8a91f7578b419991899f5b2d003f14
msgid "`constructor <https://github.com/conda/constructor>`_ - For command-line installers"
msgstr ""

#: ../source/overview.rst:320
#: 48d6c518504d4b0288e5213db682f14e
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:321
#: b698b63877004468bdd4fdcf0ead42c6
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr ""

#: ../source/overview.rst:322
#: adbbc90fc82a45f48ca50e49302f8f6a
msgid "`bbFreeze <https://pypi.org/project/bbfreeze>`_ - Windows, Linux, Python 2 only"
msgstr ""

#: ../source/overview.rst:323
#: b158c26ec1324296997bf886115dee12
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr ""

#: ../source/overview.rst:324
#: d3f5da64dbfb403b8f9a16b86ffddb40
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:326
#: 2d364e4d99db41b8a34c0e4c0780b07f
msgid "Most of the above imply single-user deployments. For multi-component server applications, see `Chef Omnibus <https://github.com/chef/omnibus#-omnibus>`_."
msgstr ""

#: ../source/overview.rst:332
#: 2391a4c38a0b4da6b6a571f7033cff87
msgid "Bringing your own userspace"
msgstr ""

#: ../source/overview.rst:334
#: af13f3b0e2624ae6b2738ac148cced2b
msgid "An increasing number of operating systems -- including Linux, Mac OS, and Windows -- can be set up to run applications packaged as lightweight images, using a relatively modern arrangement often referred to as `operating-system-level virtualization <https://en.wikipedia.org/wiki/Operating-system-level_virtualization>`_, or *containerization*."
msgstr ""

#: ../source/overview.rst:341
#: 6e973fc4505542f9824a873202cfbff0
msgid "These techniques are mostly Python agnostic, because they package whole OS filesystems, not just Python or Python packages."
msgstr ""

#: ../source/overview.rst:344
#: 99e61674e2674144a39557427ff1517c
msgid "Adoption is most extensive among Linux servers, where the technology originated and where the technologies below work best:"
msgstr ""

#: ../source/overview.rst:347
#: 6d70522c768243ec856aeee52b9c5c1a
msgid "`AppImage <https://appimage.org/>`_"
msgstr ""

#: ../source/overview.rst:348
#: 32bdfa46966c461c881760ed200dd8e7
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr ""

#: ../source/overview.rst:349
#: 6abad0e0efe541028781f6e7c8ece043
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr ""

#: ../source/overview.rst:350
#: abb22bd80a2546b187d77ee268c8467f
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr ""

#: ../source/overview.rst:353
#: 3b6ada17af394638bef8f6441fb73640
msgid "Bringing your own kernel"
msgstr ""

#: ../source/overview.rst:355
#: 6c2431e00754432ba0e3164bc1b00272
msgid "Most operating systems support some form of classical virtualization, running applications packaged as images containing a full operating system of their own. Running these virtual machines, or VMs, is a mature approach, widespread in data center environments."
msgstr ""

#: ../source/overview.rst:360
#: abd43a780b2c454182ca5c70a2e0cd38
msgid "These techniques are mostly reserved for larger scale deployments in data centers, though certain complex applications can benefit from this packaging. Technologies are Python agnostic, and include:"
msgstr ""

#: ../source/overview.rst:364
#: 7dd527a8c3434810aa2d3c9866c4807e
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr ""

#: ../source/overview.rst:365
#: d52a4eb770484053a3fd192de2f4ca96
msgid "`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en.wikipedia.org/wiki/Amazon_Machine_Image>`_, and `other formats <https://docs.openstack.org/image-guide/image-formats.html>`_"
msgstr ""

#: ../source/overview.rst:366
#: c821238496834406860a18613597b56b
msgid "`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud management system in Python, with extensive VM support"
msgstr ""

#: ../source/overview.rst:369
#: bcd9d841bcb54008b0c0bb897648259d
msgid "Bringing your own hardware"
msgstr ""

#: ../source/overview.rst:371
#: 170d8f8e97be4afb80a2f444374e4ec0
msgid "The most all-encompassing way to ship your software would be to ship it already-installed on some hardware. This way, your software's user would require only electricity."
msgstr ""

#: ../source/overview.rst:375
#: a6669a9359e640f1b405d1a0c8489d5e
msgid "Whereas the virtual machines described above are primarily reserved for the tech-savvy, you can find hardware appliances being used by everyone from the most advanced data centers to the youngest children."
msgstr ""

#: ../source/overview.rst:379
#: 6d43b7cc64b44185b791e0fbdb0b0525
msgid "Embed your code on an `Adafruit <https://github.com/adafruit/circuitpython#adafruit-circuitpython>`_, `MicroPython <https://micropython.org/>`_, or more-powerful hardware running Python, then ship it to the datacenter or your users' homes. They plug and play, and you can call it a day."
msgstr ""

#: ../source/overview.rst:389
#: 514a463af48a49ce8cc87427bb633406
msgid "A summary of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:389
#: b13109c354224c14a94ce780675a93b3
msgid "The simplified gamut of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:392
#: ce623ec113fd444eae7aa5bc6400391e
msgid "What about..."
msgstr ""

#: ../source/overview.rst:394
#: 424dac825de94e2cb624305331d52f72
msgid "The sections above can only summarize so much, and you might be wondering about some of the more conspicuous gaps."
msgstr ""

#: ../source/overview.rst:398
#: 7f043c18883a416c90eb7d51b6f59f16
msgid "Operating system packages"
msgstr ""

#: ../source/overview.rst:400
#: b8d170c834f94454b14c7b0d951ea5c0
msgid "As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some operating systems have package managers of their own. If you're very sure of the operating system you're targeting, you can depend directly on a format like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ (for Red Hat, Fedora, etc.), and use that built-in package manager to take care of installation, and even deployment. You can even use `FPM <https://fpm.readthedocs.io/en/latest/source/virtualenv.html>`_ to generate both deb and RPMs from the same source."
msgstr ""

#: ../source/overview.rst:411
#: 092a91013c144fa98887c874fc9bb77b
msgid "In most deployment pipelines, the OS package manager is just one piece of the puzzle."
msgstr ""

#: ../source/overview.rst:415
#: 0f3ff1a0289c473297d8706e4c8e46ac
msgid "virtualenv"
msgstr ""

#: ../source/overview.rst:417
#: 4d131466aaf445a389f648180f95f185
msgid "`Virtualenvs <http://python-guide.readthedocs.io/en/latest/dev/virtualenvs/>`_ have been an indispensable tool for multiple generations of Python developer, but are slowly fading from view, as they are being wrapped by higher-level tools. With packaging in particular, virtualenvs are used as a primitive in `the dh-virtualenv tool <http://dh-virtualenv.readthedocs.io/en/1.0/tutorial.html>`_ and `osnap <https://github.com/jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""

#: ../source/overview.rst:427
#: 3b7a07a6517c49688d83b935e5fe643a
msgid "For production deployments, do not rely on running ``python -m pip install`` from the Internet into a virtualenv, as one might do in a development environment. The overview above is full of much better solutions."
msgstr ""

#: ../source/overview.rst:432
#: 3a42db44cb67424081152053041c406b
msgid "Security"
msgstr ""

#: ../source/overview.rst:434
#: 9526c48ce61945959c2da24181e49a47
msgid "The further down the gradient you come, the harder it gets to update components of your package. Everything is more tightly bound together."
msgstr ""

#: ../source/overview.rst:437
#: 2a0242a93688464e9905b1342d57d7a0
msgid "For example, if a kernel security issue emerges, and you're deploying containers, the host system's kernel can be updated without requiring a new build on behalf of the application. If you deploy VM images, you'll need a new build. Whether or not this dynamic makes one option more secure is still a bit of an old debate, going back to the still-unsettled matter of `static versus dynamic linking <https://www.google.com/search?channel=fs&q=static+vs+dynamic+linking>`_."
msgstr ""

#: ../source/overview.rst:446
#: e225ae55cfe64823ba4055a85018392d
msgid "Wrap up"
msgstr ""

#: ../source/overview.rst:448
#: a94893e5ae694d398617475106c4bc99
msgid "Packaging in Python has a bit of a reputation for being a bumpy ride. This impression is mostly a byproduct of Python's versatility. Once you understand the natural boundaries between each packaging solution, you begin to realize that the varied landscape is a small price Python programmers pay for using one of the most balanced, flexible languages available."
msgstr ""
