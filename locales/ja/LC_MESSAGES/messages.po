# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# moto kawasaki <moto@kawasaki3.org>, 2021, 2022, 2023.
# tsutsu3 <tsutsu3prog@gmail.com>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-20 12:09+0000\n"
"PO-Revision-Date: 2023-05-30 06:08+0000\n"
"Last-Translator: moto kawasaki <moto@kawasaki3.org>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/pypa/"
"packaging-python-org/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.18-dev\n"

#: ../source/contribute.rst:5
msgid "Contribute to this guide"
msgstr "このガイドに貢献するには"

#: ../source/contribute.rst:7
msgid ""
"The |PyPUG| welcomes contributors! There are lots of ways to help out, "
"including:"
msgstr "|PyPUG|は貢献者を歓迎します！さまざまな貢献方法があります。例えば："

#: ../source/contribute.rst:10
msgid "Reading the guide and giving feedback"
msgstr "このガイドを読んでフィードバックを伝えること"

#: ../source/contribute.rst:11
msgid "Reviewing new contributions"
msgstr "新しい貢献文書を査読すること"

#: ../source/contribute.rst:12
msgid "Revising existing content"
msgstr "既存の文書を修正すること"

#: ../source/contribute.rst:13
msgid "Writing new content"
msgstr "新しく文書を書くこと"

#: ../source/contribute.rst:14
msgid "Translate the guide"
msgstr "このガイドを翻訳する"

#: ../source/contribute.rst:16
msgid ""
"Most of the work on the |PyPUG| takes place on the `project's GitHub "
"repository`__. To get started, check out the list of `open issues`__ and "
"`pull requests`__. If you're planning to write or edit the guide, please "
"read the :ref:`style guide <contributing_style_guide>`."
msgstr ""
"|PyPUG|のほとんどの作業は`プロジェクトのGitHubリポジトリ <project's GitHub "
"repository>`__で行われます。手始めに`未解決の問題 <open issues>`__のリストを"
"チェックアウトして(改善策の)`プルリクエスト <pull requests>`__を送ってくださ"
"い。もしあなたがこのガイドに何かを書き加えたり編集したりするつもりなら、:ref:"
"`スタイルガイド <contributing_style_guide>`__を読みましょう。"

#: ../source/contribute.rst:25
msgid ""
"By contributing to the |PyPUG|, you're expected to follow the PSF's `Code of "
"Conduct`__."
msgstr ""
"|PyPUG|に貢献を行うのであれば、あなたがPSFの`行動規範 <Code of Conduct>`__に"
"従うことが期待されています。"

#: ../source/contribute.rst:32
msgid "Documentation types"
msgstr "文書の類型"

#: ../source/contribute.rst:34
msgid ""
"This project consists of four distinct documentation types with specific "
"purposes. When proposing new additions to the project please pick the "
"appropriate documentation type."
msgstr ""
"本プロジェクトは、特定の目的に合わせた四つの別個の文書類型で成り立っていま"
"す。新たに追加することを提案する場合には、いずれかの適切な文書類型を選択して"
"ください。"

#: ../source/contribute.rst:39 ../source/tutorials/index.rst:2
msgid "Tutorials"
msgstr "チュートリアル型文書"

#: ../source/contribute.rst:41
msgid ""
"Tutorials are focused on teaching the reader new concepts by accomplishing a "
"goal. They are opinionated step-by-step guides. They do not include "
"extraneous warnings or information. `example tutorial-style document`_."
msgstr ""
"チュートリアルは目標を達成することで読者に新しい概念を教えることに注力してい"
"ます。こうするべきだという意見に従ったステップバイステップのガイドになってい"
"ます。大筋に無関係な警告や情報は省略されています。`チュートリアル型文書の例 "
"<example tutorial-style document>`_."

#: ../source/contribute.rst:48 ../source/guides/index.rst:2
msgid "Guides"
msgstr "ガイド型文書"

#: ../source/contribute.rst:50
msgid ""
"Guides are focused on accomplishing a specific task and can assume some "
"level of pre-requisite knowledge. These are similar to tutorials, but have a "
"narrow and clear focus and can provide lots of caveats and additional "
"information as needed. They may also discuss multiple approaches to "
"accomplishing the task. :doc:`example guide-style document <guides/packaging-"
"namespace-packages>`."
msgstr ""
"ガイドは特定のタスクを達成することに力点を置いていて、前提となる知識のレベル"
"をある程度仮定することができます。ガイドはチュートリアルと似ていますが、しか"
"しガイドはもっと狭い分野に明確に焦点を当てるものであり、必要に応じて多数の注"
"意書きを行ったり追加的な情報を盛り込んだりすることができます。ガイドでは、そ"
"のタスクを達成するための複数のやり方を議論することもできます。:doc:`ガイド型"
"文書の例 <guides/packaging-namespace-packages>`."

#: ../source/contribute.rst:57 ../source/discussions/index.rst:2
msgid "Discussions"
msgstr "議論型文書"

#: ../source/contribute.rst:59
msgid ""
"Discussions are focused on understanding and information. These explore a "
"specific topic without a specific goal in mind. :doc:`example discussion-"
"style document <discussions/install-requires-vs-requirements>`."
msgstr ""
"議論型文書では、理解促進と情報提供に重点を置きます。議論型文書では、特定の"
"ゴールを念頭に置くことなく、ある特定の話題について深く探求します。:doc:`議論"
"型文書の例 <discussions/install-requires-vs-requirements>`."

#: ../source/contribute.rst:64
msgid "Specifications"
msgstr "仕様型文書"

#: ../source/contribute.rst:66
msgid ""
"Specifications are reference documention focused on comprehensively "
"documenting an agreed-upon interface for interoperability between packaging "
"tools. :doc:`example specification-style document <specifications/core-"
"metadata>`."
msgstr ""
"仕様型文書は、パッケージングツール間で相互運用のためのインターフェイスとして"
"合意された事項について網羅的に文書化することに重点を置く参照用の文書です。:"
"doc:`仕様型文書の例 <specifications/core-metadata>`."

#: ../source/contribute.rst:72
msgid "Translations"
msgstr "翻訳"

#: ../source/contribute.rst:74
msgid ""
"We use `Weblate`_ to manage translations of this project. Please visit the "
"`packaging.python.org`_ project on Weblate to contribute."
msgstr ""
"我々は本プロジェクトの翻訳を管理するために `Weblate`_ を使用しています。 翻訳"
"で貢献するには、Weblate上の`packaging.python.org`_ プロジェクトをご覧くださ"
"い。"

#: ../source/contribute.rst:77
msgid ""
"If you are experiencing issues while you are working on translations, please "
"open an issue on `Github`_."
msgstr ""
"翻訳作業中になにか問題を感じたら、`Github`_ で issue を新規登録してください。"

#: ../source/contribute.rst:82
msgid ""
"Any translations of this project should follow `reStructuredText syntax`_."
msgstr ""
"本プロジェクトの翻訳はすべて、 `reStructuredText 文法 <reStructuredText "
"syntax`_ に従わなければなりません。"

#: ../source/contribute.rst:90
msgid "Adding a language"
msgstr "言語を追加する"

#: ../source/contribute.rst:92
msgid ""
"If your language is not listed on `packaging.python.org`_, click the button :"
"guilabel:`Start new translation` at the bottom of the language list and add "
"the language you want to translate."
msgstr ""
"もしあなたの使う言語が `packaging.python.org`_ のリストに掲載されていなけれ"
"ば、言語一覧の下にある :guilabel:`新しい翻訳を始める <Start new "
"translation>` ボタンをクリックして、あなたが翻訳したい言語を追加してくださ"
"い。"

#: ../source/contribute.rst:97
msgid "Following reStructuredText syntax"
msgstr "reStructuredText文法に従う"

#: ../source/contribute.rst:99
msgid ""
"If you are not familiar with reStructuredText (RST) syntax, please read "
"`this guide`_ before translating on Weblate."
msgstr ""
"もしあなたがreStructuredText(RST)の書き方に慣れていないのであれば、Weblateで"
"翻訳作業をする前に `このガイド <this guide>`_ を読んでください。"

#: ../source/contribute.rst:102
msgid "**Do not translate the text in reference directly**"
msgstr "**参照リンクのテキストをそのまま翻訳することはやめてください**"

#: ../source/contribute.rst:104
msgid ""
"When translating the text in reference, please do not translate them "
"directly."
msgstr ""
"参照リンクのテキストを翻訳する時、単純に翻訳文で置き換えることはやめて下さ"
"い。"

#: ../source/contribute.rst:0
msgid "Wrong: Translate the following text directly:"
msgstr "誤: 次のテキストを単純に翻訳する:"

#: ../source/contribute.rst:0
msgid ""
"Right: Translate the following text with your own language and add the "
"original reference:"
msgstr ""
"正: 次のテキストをあなた自身の言語に翻訳して、さらに元の参照リンクを残す:"

#: ../source/contribute.rst:121
msgid "Building the guide locally"
msgstr "この文書を手元でビルドするには"

#: ../source/contribute.rst:123
msgid ""
"Though not required to contribute, it may be useful to build this guide "
"locally in order to test your changes. In order to build this guide locally, "
"you'll need:"
msgstr ""
"貢献寄与をするために必須というわけではありませんが、この文書を手元でビルドす"
"ることはあなたが行った変更をテストするのに役に立ちます。この文書を手元でビル"
"ドするには："

#: ../source/contribute.rst:127
msgid ":doc:`Nox <nox:index>`. You can install or upgrade nox using ``pip``:"
msgstr ""
":doc:`Nox <nox:index>` 。 ``pip`` を用いてnoxをインストールまたはアップグレー"
"ドできます:"

#: ../source/contribute.rst:134
msgid ""
"Python 3.8. Our build scripts are usually tested with Python 3.8 only. See "
"the :doc:`Hitchhiker's Guide to Python installation instructions <python-"
"guide:starting/installation>` to install Python 3.8 on your operating system."
msgstr ""
"Python 3.8。我々のビルドスクリプトは、通常、Python 3.8でのみ試験されている。"
"あなたの使っているOSにPython 3.8をインストールする方法については、 :doc:"
"`Python のインストール指南のためのヒッチハッカーズガイド <python-guide:"
"starting/installation>` を見てほしい。"

#: ../source/contribute.rst:138
msgid ""
"To build the guide, run the following shell command in the project's root "
"folder:"
msgstr ""
"この文書をビルドするには、以下のシェルコマンドをプロジェクトのルートディレク"
"トリで実行してください:"

#: ../source/contribute.rst:144
msgid ""
"After the process has completed you can find the HTML output in the ``./"
"build/html`` directory. You can open the ``index.html`` file to view the "
"guide in web browser, but it's recommended to serve the guide using an HTTP "
"server."
msgstr ""
"処理が終わると、``./build/html``の下にHTMLの出力ファイルが見つかるはずです。"
"ここの``index.html``をブラウザで開くことでこの文書を閲覧することができます"
"が、HTTPサーバを使って文書を提供する方がお勧めです。"

#: ../source/contribute.rst:149
msgid ""
"You can build the guide and serve it via an HTTP server using the following "
"command:"
msgstr "HTTPサーバを用いてこの文書を提供するには、以下のコマンドを使います。:"

#: ../source/contribute.rst:156
msgid "The guide will be browsable via http://localhost:8000."
msgstr "この文書は、http://localhost:8000から閲覧できます。"

#: ../source/contribute.rst:160
msgid "Where the guide is deployed"
msgstr "この文書が展開される場所"

#: ../source/contribute.rst:162
msgid ""
"The guide is deployed via ReadTheDocs and the configuration lives at https://"
"readthedocs.org/projects/python-packaging-user-guide/. It's served from a "
"custom domain and fronted by Fast.ly."
msgstr ""
"この文書はReadTheDocsを通じて展開されていて、https://readthedocs.org/"
"projects/python-packaging-user-guide/から読めるようになっています。また、"
"Fast.lyから独自のドメイン名から提供されるようになっています(第二文はここだけ"
"では意味が取れない)。"

#: ../source/contribute.rst:168
msgid "Style guide"
msgstr "スタイルガイド"

#: ../source/contribute.rst:170
msgid ""
"This style guide has recommendations for how you should write the |PyPUG|. "
"Before you start writing, please review it. By following the style guide, "
"your contributions will help add to a cohesive whole and make it easier for "
"your contributions to be accepted into the project."
msgstr ""
"このスタイルガイドは、あなたがどのように|PyPUG|を書くべきかについて推奨事項を"
"与えます。あなたが書き始める前に目を通してください。スタイルガイドに従うこと"
"であなたの貢献がまとまりのある全体の中の一部として追加され、あなたの貢献がプ"
"ロジェクトによって受け入れられやすくなります。"

#: ../source/contribute.rst:177
msgid "Purpose"
msgstr "目的"

#: ../source/contribute.rst:179
msgid ""
"The purpose of the |PyPUG| is to be the authoritative resource on how to "
"package, publish, and install Python projects using current tools."
msgstr ""
"|PyPUG|の目的は、現在のツール群を用いてPythonプロジェクトをパッケージし、公開"
"し、インストールする方法に関して権威ある参照先となることです。"

#: ../source/contribute.rst:184
msgid "Scope"
msgstr "スコープ"

#: ../source/contribute.rst:186
msgid ""
"The guide is meant to answer questions and solve problems with accurate and "
"focused recommendations."
msgstr ""
"この文書は、正確で的を射た推奨事項を添えた形で疑問に答え問題を解決することを"
"意図しています。"

#: ../source/contribute.rst:189
msgid ""
"The guide isn't meant to be comprehensive and it's not meant to replace "
"individual projects' documentation. For example, pip has dozens of commands, "
"options, and settings. The pip documentation describes each of them in "
"detail, while this guide describes only the parts of pip that are needed to "
"complete the specific tasks described in this guide."
msgstr ""
"この文書は網羅的であることを目指してはおらず、それぞれのプロジェクトのドキュ"
"メントを置き換えることも意図していません。例えば、pipにはたくさんのコマンドや"
"オプションや設定事項があります。pipのドキュメントはその一つ一つについて詳細に"
"記述していますが、この文書ではこの文書に記述されたタスクを完了するために必要"
"となる部分に限ってpipに触れています。"

#: ../source/contribute.rst:197
msgid "Audience"
msgstr "想定される読者"

#: ../source/contribute.rst:199
msgid "The audience of this guide is anyone who uses Python with packages."
msgstr "この文書の読者として想定されるのは、Pythonのパッケージを扱う方です。"

#: ../source/contribute.rst:201
msgid ""
"Don't forget that the Python community is big and welcoming. Readers may not "
"share your age, gender, education, culture, and more, but they deserve to "
"learn about packaging just as much as you do."
msgstr ""
"Pythonコミュニティが巨大で温かいコミュニティであることを忘れないでください。"
"読者は年齢・性別・教育程度・文化やその他諸々の点であなたと同じではないかもし"
"れませんが、しかし、あなたがあなたにできる限りパッケージングについて学ぶこと"
"を称賛します。"

#: ../source/contribute.rst:205
msgid ""
"In particular, keep in mind that not all people who use Python see "
"themselves as programmers. The audience of this guide includes astronomers "
"or painters or students as well as professional software developers."
msgstr ""
"とりわけ、Pythonを使う人なら誰でも自分をプログラマーだと思っているというわけ"
"ではないことを覚えておいてください。この文書の想定される読者には、ソフトウェ"
"ア開発を職業としているプロだけでなく、宇宙飛行士や画家あるいは学生も含まれる"
"のです。"

#: ../source/contribute.rst:211
msgid "Voice and tone"
msgstr "口調や語調"

#: ../source/contribute.rst:213
msgid ""
"When writing this guide, strive to write with a voice that's approachable "
"and humble, even if you have all the answers."
msgstr ""
"この文書を書く時には、たとえあなたが答えを全部わかっていたとしても親しみやす"
"く控えめな語調で書くように努力してください。"

#: ../source/contribute.rst:216
msgid ""
"Imagine you're working on a Python project with someone you know to be smart "
"and skilled. You like working with them and they like working with you. That "
"person has asked you a question and you know the answer. How do you respond? "
"*That* is how you should write this guide."
msgstr ""
"頭が良くてスキルのある人たちと一緒にPythonのプロジェクトをやるところを思い描"
"いてください。あなたは彼らと働くのが好きだし、彼らもあなたと働くのが好きなの"
"です。そんな人があなたに質問をして、あなたが答えを知っていたとしましょう。あ"
"なたはどんな風に応対しますか？*それ*こそが、あなたがこの文書を書く時のやり方"
"なのです。"

#: ../source/contribute.rst:221
msgid ""
"Here's a quick check: try reading aloud to get a sense for your writing's "
"voice and tone. Does it sound like something you would say or does it sound "
"like you're acting out a part or giving a speech? Feel free to use "
"contractions and don't worry about sticking to fussy grammar rules. You are "
"hereby granted permission to end a sentence in a preposition, if that's what "
"you want to end it with."
msgstr ""
"簡単な確認方法：あなたが書いたものを声に出して読めば、その口調や語調の感じが"
"わかります。それはあなたが言いたかった感じに響きましたか、それとも、演説の一"
"部みたいに聞こえましたか？短縮形を使っても構いませんし、曖昧な文法規則に固執"
"することはありません。あなたはここに、もしそうしたいのならば前置詞で文を終"
"わっても構わないと言う権限を与えられました。"

#: ../source/contribute.rst:228
msgid ""
"When writing the guide, adjust your tone for the seriousness and difficulty "
"of the topic. If you're writing an introductory tutorial, it's OK to make a "
"joke, but if you're covering a sensitive security recommendation, you might "
"want to avoid jokes altogether."
msgstr ""
"ガイド文書を書くときは、論題の深刻さや難しさに合った語調に調整してください。"
"もしあなたが入門篇のようなチュートリアルを書くときには冗談を挟んでも構いませ"
"んが、繊細な注意を必要とするセキュリティ上の推奨事項をカバーするなら冗談を全"
"く入れないようにしたいと思うかもしれません。"

#: ../source/contribute.rst:235
msgid "Conventions and mechanics"
msgstr "慣例と手順"

#: ../source/contribute.rst:243
msgid "**Write to the reader**"
msgstr "**読者に向けて書く**"

#: ../source/contribute.rst:238
msgid ""
"When giving recommendations or steps to take, address the reader as *you* or "
"use the imperative mood."
msgstr ""
"推奨事項や実行すべきステップを与えるときは、読者に*あなた*と呼びかけるか、ま"
"たは、命令法を用いて欲しい。"

#: ../source/contribute.rst:0
msgid "Wrong: To install it, the user runs…"
msgstr "誤：それをインストールするために、ユーザは...を実行します。"

#: ../source/contribute.rst:0
msgid "Right: You can install it by running…"
msgstr "正：...を実行することであなたはそれをインストールすることができます。"

#: ../source/contribute.rst:0
msgid "Right: To install it, run…"
msgstr "正：それをインストールするには、...を実行してください。"

#: ../source/contribute.rst:249
msgid "**State assumptions**"
msgstr "**前提条件の明示**"

#: ../source/contribute.rst:246
msgid ""
"Avoid making unstated assumptions. Reading on the web means that any page of "
"the guide may be the first page of the guide that the reader ever sees. If "
"you're going to make assumptions, then say what assumptions that you're "
"going to make."
msgstr ""
"暗黙のうちに前提条件を仮定することのないようにしましょう。Webページとして提供"
"するということは、この文書のどのページであってもそれが読者にとっての初めての"
"ページになるかもしれないということです。"

#: ../source/contribute.rst:254
msgid "**Cross-reference generously**"
msgstr "**豊富な相互参照**"

#: ../source/contribute.rst:252
msgid ""
"The first time you mention a tool or practice, link to the part of the guide "
"that covers it, or link to a relevant document elsewhere. Save the reader a "
"search."
msgstr ""
"あるツールや行為にあなたが初めて言及するときには、ガイドのそれを説明している"
"部分へのリンク、または、どこか他の場所であっても適切な説明文書へのリンクも提"
"供してください。"

#: ../source/contribute.rst:264
msgid "**Respect naming practices**"
msgstr "**命名慣習を尊重すること**"

#: ../source/contribute.rst:257
msgid ""
"When naming tools, sites, people, and other proper nouns, use their "
"preferred capitalization."
msgstr ""
"ツールやサイト、登場人物や他の適切な名詞に名前を付けるときには、大文字小文字"
"などそれぞれが好んで使っている書き方を尊重してください。"

#: ../source/contribute.rst:0
msgid "Wrong: Pip uses…"
msgstr "誤：Pipは…"

#: ../source/contribute.rst:0
msgid "Right: pip uses…"
msgstr "正：pipは…"

#: ../source/contribute.rst:0
msgid "Wrong: …hosted on github."
msgstr "誤：...はgithubにホストされている。"

#: ../source/contribute.rst:0
msgid "Right: …hosted on GitHub."
msgstr "正：...はGitHubにホストされている。"

#: ../source/contribute.rst:273
msgid "**Use a gender-neutral style**"
msgstr "**ジェンダー中立なスタイルを使う**"

#: ../source/contribute.rst:267
msgid ""
"Often, you'll address the reader directly with *you*, *your* and *yours*. "
"Otherwise, use gender-neutral pronouns *they*, *their*, and *theirs* or "
"avoid pronouns entirely."
msgstr ""
"あなたが読者に直接呼びかけるときは「あなた」「あなたの」「あなたのもの」を"
"使ってください。そうできない場合は代名詞として「彼ら」「彼らの」「彼らのも"
"の」を使う(訳註：従来なら\"he\", \"she\"を用いた場所に\"they\"を使うことで"
"ジェンダーへの配慮を示す場合がある)か、または、代名詞をまったく使わないように"
"しましょう。"

#: ../source/contribute.rst:0
msgid "Wrong: A maintainer uploads the file. Then he…"
msgstr "誤：メンテナンス担当者がファイルをアップロードする。それから、彼は…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then they…"
msgstr "正：メンテナンス担当者がファイルをアップロードする。それから、彼らは…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then the maintainer…"
msgstr ""
"正：メンテナンス担当者がファイルをアップロードする。それから、メンテナンス担"
"当者は…"

#: ../source/contribute.rst:285
msgid "**Headings**"
msgstr "**見出しの付け方**"

#: ../source/contribute.rst:276
msgid ""
"Write headings that use words the reader is searching for. A good way to do "
"this is to have your heading complete an implied question. For example, a "
"reader might want to know *How do I install MyLibrary?* so a good heading "
"might be *Install MyLibrary*."
msgstr ""
"見出しには読者が検索で使うような単語を使いましょう。質問の意図に答える形で見"
"出しを書くのは良い方法です。読者が例えば*MyLibraryをインストールするにはどう"
"すれば良いの？*ということを知りたいとすれば、適切な見出しとしては*MyLibraryを"
"インストールするには*のようになるでしょう。"

#: ../source/contribute.rst:281
msgid ""
"In section headings, use sentence case. In other words, write headings as "
"you would write a typical sentence."
msgstr ""
"見出し部分では通常の文章のように大文字小文字を使いましょう。言い換えるなら、"
"ごく普通の文を書く時のように見出しを書きましょう。"

#: ../source/contribute.rst:0
msgid "Wrong: Things You Should Know About Python"
msgstr ""
"誤：Pythonについてあなたが知っておくべき事柄 (訳註：日本語には大文字小文字の"
"区別がないので誤例にならないのではないか)"

#: ../source/contribute.rst:0
msgid "Right: Things you should know about Python"
msgstr "正：Pythonについてあなたが知っておくべき事柄"

#: ../source/contribute.rst:288
msgid "**Numbers**"
msgstr "**数値の書き方**"

#: ../source/contribute.rst:288
msgid ""
"In body text, write numbers one through nine as words. For other numbers or "
"numbers in tables, use numerals."
msgstr ""
"地の文では一から九までの数字を単語で書きましょう(訳註：日本語では漢数字にする"
"よりもアラビア数字の方が適切かもしれません)。表の中ではアラビア数字で書きま"
"しょう。"

#: ../source/discussions/deploying-python-applications.rst:4
msgid "Deploying Python applications"
msgstr "Pythonで書かれたアプリケーションを配置(deploy)する"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/migrating-to-pypi-org.rst:0
#: ../source/guides/multi-version-installs.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Page Status"
msgstr "ページステイタス"

#: ../source/discussions/deploying-python-applications.rst:6
#: ../source/guides/index-mirrors-and-caches.rst:7
#: ../source/guides/installing-using-linux-tools.rst:7
#: ../source/guides/packaging-binary-extensions.rst:7
msgid "Incomplete"
msgstr "未完了"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Last Reviewed"
msgstr "最終査読日"

#: ../source/discussions/deploying-python-applications.rst:7
msgid "2021-8-24"
msgstr "2021-8-24"

#: ../source/discussions/deploying-python-applications.rst:11
#: ../source/discussions/install-requires-vs-requirements.rst:9
#: ../source/guides/analyzing-pypi-package-downloads.rst:12
#: ../source/guides/distributing-packages-using-setuptools.rst:24
#: ../source/guides/index-mirrors-and-caches.rst:12
#: ../source/guides/installing-scientific-packages.rst:9
#: ../source/guides/installing-using-linux-tools.rst:11
#: ../source/guides/packaging-binary-extensions.rst:17
#: ../source/guides/supporting-multiple-python-versions.rst:14
#: ../source/guides/supporting-windows-using-appveyor.rst:17
#: ../source/overview.rst:23 ../source/specifications/core-metadata.rst:41
#: ../source/specifications/direct-url.rst:14
#: ../source/specifications/direct-url-data-structure.rst:17
#: ../source/tutorials/installing-packages.rst:23
msgid "Contents"
msgstr "内容"

#: ../source/discussions/deploying-python-applications.rst:14
#: ../source/specifications/platform-compatibility-tags.rst:21
msgid "Overview"
msgstr "概要"

#: ../source/discussions/deploying-python-applications.rst:18
msgid "Supporting multiple hardware platforms"
msgstr "複数のハードウェアプラットフォームをサポートする"

#: ../source/discussions/deploying-python-applications.rst:40
msgid "OS packaging & installers"
msgstr "OSパッケージングとインストーラ"

#: ../source/discussions/deploying-python-applications.rst:52
#: ../source/discussions/deploying-python-applications.rst:89
msgid "Windows"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:61
msgid "Pynsist"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:63
msgid ""
"`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python "
"programs together with the Python-interpreter into a single installer based "
"on NSIS. In most cases, packaging only requires the user to choose a version "
"of the Python-interpreter and declare the dependencies of the program. The "
"tool downloads the specified Python-interpreter for Windows and packages it "
"with all the dependencies in a single Windows-executable installer."
msgstr ""
"`Pynsist <https://pypi.org/project/pynsist>`__は、Pythonで書かれたプログラム"
"群をNSISベースのPythonインタープリタ付きの単体インストーラにまとめるツールで"
"す。ほとんどの場合、パッケージング作業ではユーザがPythonインタープリタのバー"
"ジョンを選択することとプログラムの依存関係を宣言することしか求められません。"
"このツールは、指定されたWindows版のPythonインタープリタをダウンロードして、依"
"存関係にあるすべてをWindows上で実行可能な単体インストーラにまとめます。"

#: ../source/discussions/deploying-python-applications.rst:70
msgid ""
"The installed program can be started from a shortcut that the installer adds "
"to the start-menu. It uses a Python interpreter installed within its "
"application directory, independent of any other Python installation on the "
"computer."
msgstr ""
"インストーラがスタートメニューに追加したショートカットから、インストールされ"
"たプログラムを起動することができます。プログラムは、そのアプリケーション用の"
"ディレクトリの中にインストールされたPythonインタープリタで同じコンピュータ内"
"にある他のPythonからは独立したをものを使います。"

#: ../source/discussions/deploying-python-applications.rst:74
msgid ""
"A big advantage of Pynsist is that the Windows packages can be built on "
"Linux. There are several examples for different kinds of programs (console, "
"GUI) in the `documentation <pynsist:index>`. The tool is released under the "
"MIT-licence."
msgstr ""
"Pynsistを使う大きな利点は、Windows用のパッケージをLinux上で作成することができ"
"るということです。 `説明文書 <pynsist:index>` には異なる種類のプログラム(コン"
"ソール用やGUIを使うものなど)の例がいくつかあります。このツールはMITライセンス"
"のもとに公開されています。"

#: ../source/discussions/deploying-python-applications.rst:80
msgid "Application bundles"
msgstr "アプリケーションバンドル"

#: ../source/discussions/deploying-python-applications.rst:92
msgid "py2exe"
msgstr "py2exe"

#: ../source/discussions/deploying-python-applications.rst:94
msgid ""
"`py2exe <https://pypi.org/project/py2exe/>`__ is a distutils extension which "
"allows to build standalone Windows executable programs (32-bit and 64-bit) "
"from Python scripts. Python versions included in the official development "
"cycle are supported (refers to `Status of Python branches`__). py2exe can "
"build console executables and windows (GUI) executables. Building windows "
"services, and DLL/EXE COM servers might work but it is not actively "
"supported. The distutils extension is released under the MIT-licence and "
"Mozilla Public License 2.0."
msgstr ""
"`py2exe <https://pypi.org/project/py2exe/>`__ はdistutilsの拡張パッケージで、"
"Pythonのスクリプトから単独で動作するWindowsの実行プログラム(32ビット版または"
"64ビット版)を作成することができます。公式の開発サイクルに含まれるバージョンの"
"Pythonがすべてサポートされています(`Pythonのブランチの状況 <Status of Python "
"branches>`__を参照して下さい)。py2exeはコンソールで動作する実行可能ファイル"
"も、Windowsの(GUIの)実行ファイルも作成することができます。Windowsサービスや"
"DLL/EXE COMサーバを作成することもできるかもしれませんが、これらは活発にサポー"
"トされているとは言えません。distutilsの拡張パッケージは、MITライセンスと"
"Mozilla Publicライセンス2.0の下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:106
msgid "macOS"
msgstr "macOS"

#: ../source/discussions/deploying-python-applications.rst:109
msgid "py2app"
msgstr "py2app"

#: ../source/discussions/deploying-python-applications.rst:111
msgid ""
"`py2app <https://pypi.org/project/py2app/>`__ is a Python setuptools command "
"which will allow you to make standalone macOS application bundles and "
"plugins from Python scripts. Note that py2app MUST be used on macOS to build "
"applications, it cannot create Mac applications on other platforms. py2app "
"is released under the MIT-license."
msgstr ""
"`py2app <https://pypi.org/project/py2app/>`__ はPythonのsetuptoolsのコマンド"
"で、単独で動作するmacOSアプリケーションバンドルやプラグインをPythonスクリプト"
"から作成することができます。アプリケーションを作成する時はmacOS上でpy2appを使"
"わなければならず、他のプラットフォーム上ではMacアプリを作成することができない"
"点に留意して下さい。py2appはMITライセンスの下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:118
msgid "Unix (including Linux and macOS)"
msgstr "Unix (LinuxとmacOSを含む)"

#: ../source/discussions/deploying-python-applications.rst:121
#: ../source/key_projects.rst:497 ../source/key_projects.rst:495
msgid "pex"
msgstr "pex"

#: ../source/discussions/deploying-python-applications.rst:123
msgid ""
"`pex <https://pypi.org/project/pex/>`__ is  a library for generating .pex "
"(Python EXecutable) files which are executable Python environments in the "
"spirit of virtualenvs. pex is an expansion upon the ideas outlined in :pep:"
"`441` and makes the deployment of Python applications as simple as cp. pex "
"files may even include multiple platform-specific Python distributions, "
"meaning that a single pex file can be portable across Linux and macOS. pex "
"is released under the Apache License 2.0."
msgstr ""
"`pex <https://pypi.org/project/pex/>`__ は、.pex (Python EXecutable)ファイ"
"ル、つまり、virtualenvを利用した実行可能なPython環境を含んだファイルを生成す"
"るライブラリです。pexは :pep:`441` で概要が示されたアイデアに基づく拡張で、単"
"純にファイルをコピーするだけでPythonアプリケーションを配置(デプロイ)すること"
"ができるようにします。複数のプラットフォーム依存なPython配布物でもpexファイル"
"に内包することができますので、単一のpexファイルがLinuxでもmacOSでも動作可能と"
"いうことになります。pexはApacheライセンス2.0の下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:132
msgid "Configuration management"
msgstr "設定管理"

#: ../source/discussions/index.rst:4
msgid ""
"**Discussions** are focused on providing comprehensive information about a "
"specific topic. If you're just trying to get stuff done, see :doc:`/guides/"
"index`."
msgstr ""
"**議論型文書**は、特定の話題について網羅的な情報を提供することに重点を置いて"
"います。もしあなたがとにかく何かを終わらせようとしているだけなら、:doc:`/"
"guides/index`を見た方が良いでしょう。"

#: ../source/discussions/install-requires-vs-requirements.rst:5
msgid "install_requires vs requirements files"
msgstr "install_requiresかrequirementsか"

#: ../source/discussions/install-requires-vs-requirements.rst:12
msgid "install_requires"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:14
msgid ""
"``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that "
"should be used to specify what a project **minimally** needs to run "
"correctly. When the project is installed by :ref:`pip`, this is the "
"specification that is used to install its dependencies."
msgstr ""
"``install_requires``は:ref:`setuptools` :file:`setup.py`のキーワードで、その"
"プロジェクトが正しく動作するために必要な最小限のものを指定するものです。プロ"
"ジェクトが:ref:`pip`でインストールされた場合には、プロジェクトが依存するパッ"
"ケージをインストールするのに用いられます。"

#: ../source/discussions/install-requires-vs-requirements.rst:19
msgid ""
"For example, if the project requires A and B, your ``install_requires`` "
"would be like so:"
msgstr ""
"例えば、プロジェクトがAとBに依存しているなら、``install_requires``は次のよう"
"になるでしょう："

#: ../source/discussions/install-requires-vs-requirements.rst:29
msgid ""
"Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""
"さらに、下限や上限がわかっているなら、それを示しておくことがベストプラクティ"
"スです。"

#: ../source/discussions/install-requires-vs-requirements.rst:31
msgid ""
"For example, it may be known, that your project requires at least v1 of 'A', "
"and v2 of 'B', so it would be like so:"
msgstr ""
"例えば、あなたのプロジェクトが少なくともv1の'A'と少なくともv2の'B'を必要とす"
"るとわかっているなら、次のようになるでしょう："

#: ../source/discussions/install-requires-vs-requirements.rst:41
msgid ""
"It may also be known that project 'A' introduced a change in its v2 that "
"breaks the compatibility of your project with v2 of 'A' and later, so it "
"makes sense to not allow v2:"
msgstr ""
"また、プロジェクト 'A' が v2 になる時にある変更を行なったために、あなたのプロ"
"ジェクトと 'A' の v2 以降のバージョンとの間の互換性が失われるであろうという場"
"合には、 v2 を許容しないことが筋の通ったことになるでしょう。"

#: ../source/discussions/install-requires-vs-requirements.rst:52
#: ../source/discussions/install-requires-vs-requirements.rst:51
msgid ""
"It is not considered best practice to use ``install_requires`` to pin "
"dependencies to specific versions, or to specify sub-dependencies (i.e. "
"dependencies of your dependencies).  This is overly-restrictive, and "
"prevents the user from gaining the benefit of dependency upgrades."
msgstr ""
"依存関係にあるものを特定のバージョンに固定するために、あるいは、さらなる依存"
"関係(すなわち、あなたの依存先が依存するもの)を指定するために"
"``install_requires``を使うことはベストプラクティスとは考えられていません。こ"
"れは過剰に制限的であり、依存関係にあるものをまとめて更新することからユーザが"
"得られる利益を阻害するものと考えられています。"

#: ../source/discussions/install-requires-vs-requirements.rst:57
#: ../source/discussions/install-requires-vs-requirements.rst:56
msgid ""
"Lastly, it's important to understand that ``install_requires`` is a listing "
"of \"Abstract\" requirements, i.e just names and version restrictions that "
"don't determine where the dependencies will be fulfilled from (i.e. from "
"what index or source).  The where (i.e. how they are to be made \"Concrete"
"\") is to be determined at install time using :ref:`pip` options. [1]_"
msgstr ""
"最後に、``install_requires``が必要事項の「要約」のリスト、つまり、単に必要事"
"項の名前とバージョンが要求されるだけあって、どこから(すなわち、どんな索引や情"
"報源から)充当するのかについては要求していないのだということを理解することは重"
"要です。どこから(すなわち、どのようにして「具体化」されるのか)という点につい"
"ては、:ref:`pip`のオプションを使ってインストール時に決定されるのです。[1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:65
#: ../source/tutorials/installing-packages.rst:468
#: ../source/discussions/install-requires-vs-requirements.rst:64
msgid "Requirements files"
msgstr "Requirementsファイル"

#: ../source/discussions/install-requires-vs-requirements.rst:67
#: ../source/discussions/install-requires-vs-requirements.rst:66
msgid ""
":ref:`Requirements Files <pip:Requirements Files>` described most simply, "
"are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""
":ref:`Requirementsファイル <pip:Requirements Files>`は、一番簡単にいうなら"
"ば、:ref:`pip:pip install`の引数のリストをファイルに書いただけのものです。"

#: ../source/discussions/install-requires-vs-requirements.rst:70
#: ../source/discussions/install-requires-vs-requirements.rst:69
msgid ""
"Whereas ``install_requires`` defines the dependencies for a single project, :"
"ref:`Requirements Files <pip:Requirements Files>` are often used to define "
"the requirements for a complete Python environment."
msgstr ""
"``install_requires``が単一のプロジェクトにおける依存関係を定義する一方で、:"
"ref:`Requirements Files <pip:Requirements Files>`はPython環境全体に対する要求"
"事項を定義するのにしばしば用いられます。"

#: ../source/discussions/install-requires-vs-requirements.rst:74
#: ../source/discussions/install-requires-vs-requirements.rst:73
msgid ""
"Whereas ``install_requires`` requirements are minimal, requirements files "
"often contain an exhaustive listing of pinned versions for the purpose of "
"achieving :ref:`repeatable installations <pip:Repeatability>` of a complete "
"environment."
msgstr ""
"``install_requires``での要求事項が最小限のものである一方で、requirementsファ"
"イルは再現可能な形で環境全体をインストールできるようにする:ref:`repeatable "
"installations <pip:Repeatability>`という目的に沿って限定されたバージョンの網"
"羅的なリストを含むことがしばしばです。"

#: ../source/discussions/install-requires-vs-requirements.rst:79
#: ../source/discussions/install-requires-vs-requirements.rst:78
msgid ""
"Whereas ``install_requires`` requirements are \"Abstract\", i.e. not "
"associated with any particular index, requirements files often contain pip "
"options like ``--index-url`` or ``--find-links`` to make requirements "
"\"Concrete\", i.e. associated with a particular index or directory of "
"packages. [1]_"
msgstr ""
"``install_requires``での要求事項が「要約」、すなわち特定の索引には紐づけられ"
"ていないのに対して、requirementsファイルではしばしば``--index-url``や``--"
"find-links``のようなpipのオプションが含まれていて特定の索引やパッケージ登録簿"
"に紐づけられた「具体的な」要求事項になっています。[1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:85
#: ../source/discussions/install-requires-vs-requirements.rst:84
msgid ""
"Whereas ``install_requires`` metadata is automatically analyzed by pip "
"during an install, requirements files are not, and only are used when a user "
"specifically installs them using ``python -m pip install -r``."
msgstr ""
"``install_requires``では、メタデータがインストール中にpipによって自動的に解析"
"される一方、requirementsファイルではそうではなく、``python -m pip install -"
"r``を使ってユーザが明示的にインストールする時に使われるだけです。"

#: ../source/discussions/install-requires-vs-requirements.rst:91
#: ../source/discussions/install-requires-vs-requirements.rst:90
msgid ""
"For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad."
"io/posts/2013/07/setup-vs-requirement/."
msgstr ""
"要求事項が「要約」か「具体的」かの議論についてもっと知りたい場合は、https://"
"caremad.io/posts/2013/07/setup-vs-requirement/をご覧ください。"

#: ../source/discussions/pip-vs-easy-install.rst:6
msgid "pip vs easy_install"
msgstr "pip対easy_install"

#: ../source/discussions/pip-vs-easy-install.rst:9
msgid ""
":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 "
"as part of :ref:`setuptools`. It was notable at the time for installing :"
"term:`packages <Distribution Package>` from :term:`PyPI <Python Package "
"Index (PyPI)>` using requirement specifiers, and automatically installing "
"dependencies."
msgstr ""
":ref:`easy_install <easy_install>`は、現在では`非推奨`とされていますが、2004"
"年に:ref:`setuptools`の一部として公開されました。requirementsファイルを利用し"
"て自動的に依存関係にあるパッケージも併せて:term:`PyPI <Python Package Index "
"(PyPI)>`から:term:`packages <Distribution Package>`をインストールすることがで"
"きるというのは当時としては画期的でした。"

#: ../source/discussions/pip-vs-easy-install.rst:14
msgid ""
":ref:`pip` came later in 2008, as alternative to :ref:`easy_install "
"<easy_install>`, although still largely built on top of :ref:`setuptools` "
"components.  It was notable at the time for *not* installing packages as :"
"term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' "
"packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and "
"introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, "
"which gave users the power to easily replicate environments."
msgstr ""
"依然として:ref:`setuptools`を部品に使ってビルドされてはいますが、:ref:"
"`easy_install <easy_install>`を置き換えるものとして:ref:`pip`が2008年に後から"
"やってきました。当時はパッケージを(かなり単純に:term:`sdists <Source "
"Distribution (or \"sdist\")>`から「フラット」なパッケージとしてインストールす"
"るものであって):term:`Eggs <Egg>`の形でインストールするものでも、:term:`Eggs "
"<Egg>`からインストールするものでも*なかった*こと、そして、簡単に環境を再現す"
"る力をユーザに与える:ref:`Requirements Files <pip:Requirements Files>`の考え"
"方を導入したことは注目に値します。"

#: ../source/discussions/pip-vs-easy-install.rst:22
msgid ""
"Here's a breakdown of the important differences between pip and the "
"deprecated easy_install:"
msgstr ""
"pipと非推奨となったeasy_installの重要な違いをおさらいしておきましょう："

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**pip**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**easy_install**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr ":term:`Wheels <Wheel>`からのインストール"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Yes"
msgstr "はい"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:30
#: ../source/discussions/pip-vs-easy-install.rst:32
#: ../source/discussions/pip-vs-easy-install.rst:35
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:51
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "No"
msgstr "いいえ"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Uninstall Packages"
msgstr "パッケージのアンインストール"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Yes (``python -m pip uninstall``)"
msgstr "はい (``python -m pip uninstall``)"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Dependency Overrides"
msgstr "依存関係を上書きする"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr "はい (:ref:`Requirementsファイル <pip:Requirements Files>`"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "List Installed Packages"
msgstr "インストールされたパッケージのリスト"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr "はい (``python -m pip list`` and ``python -m pip freeze``)"

#: ../source/discussions/pip-vs-easy-install.rst:38
msgid ":pep:`438` Support"
msgstr ":pep:`438` サポート"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Installation format"
msgstr "インストールフォーマット"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr ":file:`egg-info`のメタデータを伴った「フラット」なパッケージ。"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Encapsulated Egg format"
msgstr "カプセル化されたEggフォーマット"

#: ../source/discussions/pip-vs-easy-install.rst:44
msgid "sys.path modification"
msgstr "sys.pathの変更"

#: ../source/discussions/pip-vs-easy-install.rst:48
msgid "Installs from :term:`Eggs <Egg>`"
msgstr ":term:`Eggs <Egg>`からのインストール"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "`pylauncher support`_"
msgstr "`pylauncherサポート <pylauncher support>`_"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "Yes [1]_"
msgstr "はい [1]_"

#: ../source/discussions/pip-vs-easy-install.rst:54
msgid ":ref:`Multi-version Installs`"
msgstr ":ref:`複数バージョンのインストール <Multi-version Installs>`"

#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Exclude scripts during install"
msgstr "インストール中にスクリプトを除外する"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "per project index"
msgstr "プロジェクトごとの索引"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Only in virtualenv"
msgstr "virtualenvの中のみ"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Yes, via setup.cfg"
msgstr "はい、setup.cfgを通じて"

#: ../source/discussions/pip-vs-easy-install.rst:68
msgid ""
"https://setuptools.readthedocs.io/en/latest/deprecated/easy_install."
"html#natural-script-launcher"
msgstr ""
"https://setuptools.readthedocs.io/en/latest/deprecated/easy_install."
"html#natural-script-launcher"

#: ../source/discussions/src-layout-vs-flat-layout.rst:3
msgid "src layout vs flat layout"
msgstr "src レイアウト対フラットレイアウト"

#: ../source/discussions/src-layout-vs-flat-layout.rst:5
msgid ""
"The \"flat layout\" refers to organising a project's files in a folder or "
"repository, such that the various configuration files and :term:`import "
"packages <Import Package>` are all in the top-level directory."
msgstr ""
"「フラットレイアウト」とは、さまざまな設定ファイルや :term:`インポートパッ"
"ケージ <Import Package>` をすべてトップレベルのディレクトリに置くようなやり方"
"で、プロジェクトのファイル群をひとつのフォルダまたはリポジトリに配置すること"
"です。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:23
msgid ""
"The \"src layout\" deviates from the flat layout by moving the code that is "
"intended to be importable (i.e. ``import awesome_package``, also known as :"
"term:`import packages <Import Package>`) into a subdirectory. This "
"subdirectory is typically named ``src/``, hence \"src layout\"."
msgstr ""
"「src レイアウト」は、インポート可能 (すなわち ``import awesome_package`` 、"
"別名 :term:`インポートパッケージ <Import Package>`) にするつもりのソースコー"
"ドをサブディレクトリに置く点でフラットレイアウトとは異なります。このサブディ"
"レクトリは、典型的には ``src/`` と命名されるので、「src レイアウト」と呼ばれ"
"るのです。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:43
msgid ""
"Here's a breakdown of the important behaviour differences between the src "
"layout and the flat layout:"
msgstr ""
"ここで、src レイアウトとフラットレイアウトの動作の違いで重要なものを掲出して"
"おきましょう:"

#: ../source/discussions/src-layout-vs-flat-layout.rst:46
msgid ""
"The src layout requires installation of the project to be able to run its "
"code, and the flat layout does not."
msgstr ""
"src レイアウトではそのソースコードを走らせるためにプロジェクトのインストール"
"が要求されますが、フラットレイアウトではそのようなことはありません。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:49
msgid ""
"This means that the src layout involves an additional step in the "
"development workflow of a project (typically, an :doc:`editable installation "
"<setuptools:userguide/development_mode>` is used for development and a "
"regular installation is used for testing)."
msgstr ""
"これが意味するところは、src レイアウトの場合にはプロジェクトの開発ワークフ"
"ローに追加的なステップ (典型的には、開発には :doc:`編集可能なインストール "
"<setuptools:userguide/development_mode>` を使い、テストには通常のインストール"
"を用いる) が必要になるということです。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:54
msgid ""
"The src layout helps prevent accidental usage of the in-development copy of "
"the code."
msgstr ""
"src レイアウトを採用することは、今まさに開発中のソースコードを使ってしまうと"
"いう事故を防ぐことを助けます。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:57
msgid ""
"This is relevant since the Python interpreter includes the current working "
"directory as the first item on the import path. This means that if an import "
"package exists in the current working directory with the same name as an "
"installed import package, the variant from the current working directory "
"will be used. This can lead to subtle  misconfiguration of the project's "
"packaging tooling, which could result in files not being included in a "
"distribution."
msgstr ""
"Python インタープリタはカレントワーキングディレクトリをインポートパスの先頭に"
"含むので、これは妥当なことです。これが意味するところは、もしインストール済み"
"のパッケージと同名のものがカレントワーキングディレクトリに存在するならば、カ"
"レントワーキングディレクトリにあるものが使われるであろうということです。これ"
"によって、配布物に一部ファイル群が含まれない結果に終わるという、プロジェクト"
"のパッケージングツールの微妙な誤設定をもたらしかねません。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:64
msgid ""
"The src layout helps avoid this by keeping import packages in a directory "
"separate from the root directory of the project, ensuring that the installed "
"copy is used."
msgstr ""
"src レイアウトを使えば、パッケージ群をプロジェクトのルートディレクトリとは異"
"なるディレクトリに置くので、インストール済みのパッケージの方を使用することが"
"保証され、このような誤設定を避ける助けになります。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:68
msgid ""
"The src layout helps enforce that an :doc:`editable installation <setuptools:"
"userguide/development_mode>` is only able to import files that were meant to "
"be importable."
msgstr ""
"src レイアウトを使うことで、インポートしようと意図した :doc:`編集可能なインス"
"トール <setuptools:userguide/development_mode>` だけをインポートするように強"
"制することを助けます。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:72
msgid ""
"This is especially relevant when the editable installation is implemented "
"using a `path configuration file <https://docs.python.org/3/library/site."
"html#index-2>`_ that adds the directory to the import path."
msgstr ""
"これは、編集可能なインストール (のパッケージ) がインポートパスにそのディレク"
"トリを追加するように動く `パス設定ファイル <https://docs.python.org/3/"
"library/site.html#index-2>`_ を使って実装されている場合に、特に適切です。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:76
msgid ""
"The flat layout would add the other project files (eg: ``README.md``, ``tox."
"ini``) and packaging/tooling configuration files (eg: ``setup.py``, "
"``noxfile.py``) on the import path. This would make certain imports work in "
"editable installations but not regular installations."
msgstr ""
"フラットレイアウトでは、インポートパスに他のプロジェクトファイル群 (例えば "
"``README.md`` や ``tox.ini``) や、パッケージング/ツール使用の設定ファイル (例"
"えば ``setup.py`` や ``noxfile.py``) を追加します。こうすることによって、ある"
"インポートが、通常のインストールではなくて編集可能なインストールの側を使うこ"
"とを確実にするでしょう。"

#: ../source/discussions/wheel-vs-egg.rst:5
msgid "Wheel vs Egg"
msgstr "Wheel対Egg"

#: ../source/discussions/wheel-vs-egg.rst:7
msgid ""
":term:`Wheel` and :term:`Egg` are both packaging formats that aim to support "
"the use case of needing an install artifact that doesn't require building or "
"compilation, which can be costly in testing and production workflows."
msgstr ""
":term:`Wheel`と :term:`Egg`は、どちらも、試験目的の場合や本番環境の場合にはコ"
"ストが高すぎるビルドやコンパイルをしなくてもプログラムをインストールするとい"
"うユースケースに対応することを目指したパッケージングのフォーマットです。"

#: ../source/discussions/wheel-vs-egg.rst:11
msgid ""
"The :term:`Egg` format was introduced by :ref:`setuptools` in 2004, whereas "
"the :term:`Wheel` format was introduced by :pep:`427` in 2012."
msgstr ""
":term:`Egg`のフォーマットは、2004年に:ref:`setuptools`によって、また、:term:"
"`Wheel`のフォーマットは2012年に:pep:`427`によって導入されました。"

#: ../source/discussions/wheel-vs-egg.rst:14
msgid ""
":term:`Wheel` is currently considered the standard for :term:`built <Built "
"Distribution>` and :term:`binary <Binary Distribution>` packaging for Python."
msgstr ""
":term:`Wheel`は、現在、Pythonにおける :term:`ビルド済配布物 <Built "
"Distribution>`および :term:`バイナリ配布物 <Binary Distribution>`の標準である"
"とみなされています。"

#: ../source/discussions/wheel-vs-egg.rst:17
msgid ""
"Here's a breakdown of the important differences between :term:`Wheel` and :"
"term:`Egg`."
msgstr ":term:`Wheel`と :term:`Egg`の重要な差異について以下にまとめます。"

#: ../source/discussions/wheel-vs-egg.rst:20
msgid ""
":term:`Wheel` has an :doc:`official standard specification </specifications/"
"binary-distribution-format>`. :term:`Egg` did not."
msgstr ""
":term:`Wheel`には :doc:`公式の標準仕様 </specifications/binary-distribution-"
"format>` が存在します。 :term:`Egg`には対応するPEPがありません。"

#: ../source/discussions/wheel-vs-egg.rst:24
#: ../source/discussions/wheel-vs-egg.rst:22
msgid ""
":term:`Wheel` is a :term:`distribution <Distribution Package>` format, i.e a "
"packaging format. [1]_ :term:`Egg` was both a distribution format and a "
"runtime installation format (if left zipped), and was designed to be "
"importable."
msgstr ""
":term:`Wheel`は :term:`配布物 <Distribution Package>`のフォーマット、つまり、"
"パッケージのフォーマットです。[1]_ :term:`Egg`は配布物のフォーマットでもあ"
"り、かつ、(もし圧縮されたままであれば)実行時のインストールフォーマットであっ"
"てimportができるように設計されています。"

#: ../source/discussions/wheel-vs-egg.rst:28
#: ../source/discussions/wheel-vs-egg.rst:26
msgid ""
":term:`Wheel` archives do not include .pyc files. Therefore, when the "
"distribution only contains Python files (i.e. no compiled extensions), and "
"is compatible with Python 2 and 3, it's possible for a wheel to be "
"\"universal\", similar to an :term:`sdist <Source Distribution (or \"sdist"
"\")>`."
msgstr ""
":term:`Wheel`形式のファイルには.pycファイルが含まれていません。従って、配布物"
"には(コンパイル済のファイル抜きの)Pythonファイルのみ(含み、Pythonのバージョン"
"2と3で使用可能ですので、 :term:`sdist <Source Distribution (or \"sdist\")>`と"
"同様にwheelは「汎用」であると言うことができます。"

#: ../source/discussions/wheel-vs-egg.rst:33
#: ../source/discussions/wheel-vs-egg.rst:31
msgid ""
":term:`Wheel` uses :pep:`PEP376-compliant <376>` ``.dist-info`` directories. "
"Egg used ``.egg-info``."
msgstr ""
":term:`Wheel`は :pep:`PEP376-compliant <376>`に従って ``.dist-info`` ディレク"
"トリを用います。Eggは ``.egg-info`` を用います。"

#: ../source/discussions/wheel-vs-egg.rst:36
#: ../source/discussions/wheel-vs-egg.rst:34
msgid ""
":term:`Wheel` has a :pep:`richer file naming convention <425>`. A single "
"wheel archive can indicate its compatibility with a number of Python "
"language versions and implementations, ABIs, and system architectures."
msgstr ""
":term:`Wheel`には:pep:`richer file naming convention <425>`が存在します。単独"
"のwheelアーカイブはPython言語のバージョンや実装、ABI、そしてシステムのアーキ"
"テクチャとの互換性を表示することができます。"

#: ../source/discussions/wheel-vs-egg.rst:40
#: ../source/discussions/wheel-vs-egg.rst:38
msgid ""
":term:`Wheel` is versioned. Every wheel file contains the version of the "
"wheel specification and the implementation that packaged it."
msgstr ""
":term:`Wheel`はバージョン付けされています。それぞれのwheelファイルは、それを"
"パッケージしたwheelの仕様や実装のバージョンを保持しています。"

#: ../source/discussions/wheel-vs-egg.rst:43
#: ../source/discussions/wheel-vs-egg.rst:41
msgid ""
":term:`Wheel` is internally organized by `sysconfig path type <https://docs."
"python.org/2/library/sysconfig.html#installation-paths>`_, therefore making "
"it easier to convert to other formats."
msgstr ""
":term:`Wheel`は内部では`sysconfigパスの型 <https://docs.python.org/2/library/"
"sysconfig.html#installation-paths>`_で整理されているので、他のフォーマットに"
"変換するのがより簡単になっています。"

#: ../source/discussions/wheel-vs-egg.rst:49
msgid ""
"Circumstantially, in some cases, wheels can be used as an importable runtime "
"format, although :ref:`this is not officially supported at this time <binary-"
"distribution-format-import-wheel>`."
msgstr ""
"状況としては、 :ref:`現時点で公式にはサポートされていません <binary-"
"distribution-format-import-wheel>` が、 一部のケースで wheel ファイルをイン"
"ポート可能な稼働時(runtime)フォーマットとして使うことが可能です。"

#: ../source/flow.rst:3
msgid "The Packaging Flow"
msgstr "パッケージングの流れ"

#: ../source/flow.rst:5
msgid ""
"The document aims to outline the flow involved in publishing/distributing a :"
"term:`distribution package <Distribution Package>`, usually to the `Python "
"Package Index (PyPI)`_. It is written for package publishers, who are "
"assumed to be the package author."
msgstr ""
"文書は、大抵は `Python パッケージインデックス (PyPI) <Python Package Index "
"(PyPI)>`_ への :term:`配布パッケージ <Distribution Package>` の公開や配布に必"
"要な作業の流れをおおまかに描き出すことを目的としています。パッケージの作者と"
"目される、パッケージを公開する人向けに書かれました。"

#: ../source/flow.rst:12
msgid ""
"While the :doc:`tutorial <tutorials/packaging-projects>` walks through the "
"process of preparing a simple package for release, it does not fully "
"enumerate what steps and files are required, and for what purpose."
msgstr ""
":doc:`チュートリアル <tutorials/packaging-projects>` ではシンプルなプロジェク"
"トについてリリースの準備を行うプロセスを一通り実行しますが、どのステップでど"
"のようなファイルが必要になり、その目的は何かという部分については必ずしも完全"
"に列挙はしていません。"

#: ../source/flow.rst:16
msgid ""
"Publishing a package requires a flow from the author's source code to an end "
"user's Python environment. The steps to achieve this are:"
msgstr ""
"パッケージを公開するには、作者のソースコードからエンドユーザの Python 環境に"
"至る流れが必要とされます。これを実現するためのステップとしては:"

#: ../source/flow.rst:19
msgid ""
"Have a source tree containing the package. This is typically a checkout from "
"a version control system (VCS)."
msgstr ""
"パッケージを含むソースツリーを入手します。これは、典型的にはバージョン管理シ"
"ステム (VCS) からのチェックアウトのことです。"

#: ../source/flow.rst:22
msgid ""
"Prepare a configuration file describing the package metadata (name, version "
"and so forth) and how to create the build artifacts. For most packages, this "
"will be a :file:`pyproject.toml` file, maintained manually in the source "
"tree."
msgstr ""
"パッケージのメタデータ (名前・バージョン・その他) とビルド成果物を作成するた"
"めの方法を記述した設定ファイルを用意してください。ほとんどのパッケージ向けに"
"は、これは、ソースツリー内で手動で維持管理される :file:`pyproject.toml` ファ"
"イルを準備するということになるでしょう。"

#: ../source/flow.rst:27
msgid ""
"Create build artifacts to be sent to the package distribution service "
"(usually PyPI); these will normally be a :term:`source distribution (\"sdist"
"\") <Source Distribution (or \"sdist\")>` and one or more :term:`built "
"distributions (\"wheels\") <Built Distribution>`. These are made by a build "
"tool using the configuration file from the previous step. Often there is "
"just one generic wheel for a pure Python package."
msgstr ""
"パッケージ配布サービス (通常は PyPI) へ送るビルド成果物を作成してください; 普"
"通ならこれらは :term:`ソースコード配布物 (\"sdist\") <Source Distribution "
"(or \"sdist\")>` と、ひとつまたはそれ以上の :term:`ビルド済配布物 (\"wheels"
"\") <Built Distribution>` ということになるでしょう。これらは、前のステップで"
"作成した設定ファイルを使ってビルドツールによって作成されます。純 Python パッ"
"ケージの場合には、共通の wheel がひとつだけ存在するということもしばしばありま"
"す。"

#: ../source/flow.rst:35
msgid "Upload the build artifacts to the package distribution service."
msgstr "ビルド成果物をパッケージ配布サービスへアップロードしてください。"

#: ../source/flow.rst:37
msgid ""
"At that point, the package is present on the package distribution service. "
"To use the package, end users must:"
msgstr ""
"その時点で、パッケージがパッケージ配布サービス上に存在することになります。そ"
"のパッケージを使うためにエンドユーザは次のことをしなければなりません:"

#: ../source/flow.rst:40
msgid ""
"Download one of the package's build artifacts from the package distribution "
"service."
msgstr ""
"そのパッケージのビルド成果物をパッケージ配布サービスからダウンロードしてくだ"
"さい。"

#: ../source/flow.rst:43
msgid ""
"Install it in their Python environment, usually in its ``site-packages`` "
"directory. This step may involve a build/compile step which, if needed, must "
"be described by the package metadata."
msgstr ""
"それをエンドユーザの Python 環境の通常であれば ``site-packages`` ディレクトリ"
"にインストールしてください。もしそれが必要ならパッケージのメタデータにその方"
"法が記述されていなければなりませんが、このステップにはビルド/コンパイルのス"
"テップを含むことがあります。"

#: ../source/flow.rst:47
msgid ""
"These last 2 steps are typically performed by :ref:`pip` when an end user "
"runs ``pip install``."
msgstr ""
"これら最後のふたつのステップは、典型的な場合には、エンドユーザが ``pip "
"install`` を走らせた時に :ref:`pip` によって実行されます。"

#: ../source/flow.rst:50
msgid "The steps above are described in more detail below."
msgstr "上記のステップについては、以下にもっと詳しく記述してあります。"

#: ../source/flow.rst:53
msgid "The source tree"
msgstr "ソースコードツリー"

#: ../source/flow.rst:55
msgid ""
"The source tree contains the package source code, usually a checkout from a "
"VCS. The particular version of the code used to create the build artifacts "
"will typically be a checkout based on a tag associated with the version."
msgstr ""
"ソースコードツリーには、パッケージのソースコード (通常なら VCS からのチェック"
"アウト) が含まれます。"

#: ../source/flow.rst:60
msgid "The configuration file"
msgstr "設定ファイル"

#: ../source/flow.rst:62
msgid ""
"The configuration file depends on the tool used to create the build "
"artifacts. The standard practice is to use a :file:`pyproject.toml` file in "
"the `TOML format`_."
msgstr ""
"ビルド成果物を作成するのに用いるツールによって設定ファイルは変わります。"
"`TOML フォーマット <TOML format>`_ で書かれた `pyproject.toml` ファイルを使う"
"のが標準的な慣習です。"

#: ../source/flow.rst:68
msgid ""
"At a minimum, the :file:`pyproject.toml` file needs a ``[build-system]`` "
"table specifying your build tool. There are many build tools available, "
"including but not limited to :ref:`flit`, :ref:`hatch`, :ref:`pdm`, :ref:"
"`poetry`, :ref:`setuptools`, `trampolim`_, and `whey`_. Each tool's "
"documentation will show what to put in the ``[build-system]`` table."
msgstr ""
":file:`pyproject.toml` ファイルには、少なくとも、採用したビルドツールを指定す"
"る ``[build-system]`` テーブルがなければなりません。ビルドツールとして使える"
"ものには、 :ref:`flit` ・ :ref:`hatch` ・ :ref:`pdm` ・ :ref:`poetry` ・ :"
"ref:`setuptools` ・ `trample`_ ・ `whey`_ を含めて他にもさまざまなものがあり"
"ます。それぞれのツールの説明文書には、 ``[build-system]`` に何を書けば良いか"
"が示されていることでしょう。"

#: ../source/flow.rst:77
msgid "For example, here is a table for using :ref:`hatch`:"
msgstr "例えば、 :ref:`hatch` を使う場合のテーブルは次のようになります:"

#: ../source/flow.rst:85
msgid ""
"With such a table in the :file:`pyproject.toml` file, a \"frontend\" tool "
"like :ref:`build` can run your chosen build tool's \"backend\" to create the "
"build artifacts. Your build tool may also provide its own frontend. An "
"install tool like :ref:`pip` also acts as a frontend when it runs your build "
"tool's backend to install from a source distribution."
msgstr ""
":file:`pyproject.toml` ファイルの中のそのようなテーブルを用いることで、 :ref:"
"`build` のような \"フロントエンド\" のツールが、ビルド成果物を作成するために"
"あなたが選んだビルドツールの \"バックエンド\" を実行することができます。あな"
"たが選んだビルドツールは、独自のフロントエンドを提供しても構いません。 :ref:"
"`pip` のようなインストールツールもまた、ソースコード配布物からインストールす"
"る時にあなたのビルドツールバックエンドを走らせることで、フロントエンドとして"
"振る舞うことができます。"

#: ../source/flow.rst:91
msgid ""
"The particular build tool you choose dictates what additional information is "
"required in the :file:`pyproject.toml` file. For example, you might specify:"
msgstr ""
"あなたが選択した特定のビルドツールに応じてどんな追加の情報を :file:"
"`pyproject.toml` ファイルに記述しなければならないかがきまります。例えば、以下"
"のように指定することができます:"

#: ../source/flow.rst:94
msgid ""
"a ``[project]`` table containing project :doc:`Core Metadata </"
"specifications/core-metadata/>` (name, version, author and so forth); see :"
"doc:`Declaring project metadata </specifications/declaring-project-metadata/"
">` for more detail"
msgstr ""
"プロジェクトの :doc:`コアとなるメタデータ </specifications/core-metadata/>` "
"(名前・バージョン・作者・その他) を含む ``[project]`` テーブル; 詳しくは、 :"
"doc:`プロジェクトのメタデータを宣言する </specifications/declaring-project-"
"metadata/>` を見てください"

#: ../source/flow.rst:100
msgid "a ``[tool]`` table containing tool-specific configuration options"
msgstr "ツール特有の設定オプションを含んだ ``[tool]`` テーブル"

#: ../source/flow.rst:103
msgid "Build artifacts"
msgstr "ビルド成果物"

#: ../source/flow.rst:106
msgid "The source distribution (sdist)"
msgstr ""
"`ソースコード配布物 (またはsdist) <Source Distribution (or \"sdist\")>`"

#: ../source/flow.rst:108
msgid ""
"A source distribution contains enough to install the package from source in "
"an end user's Python environment. As such, it needs the package source, and "
"may also include tests and documentation. These are useful for end users "
"wanting to develop your sources, and for end user systems where some local "
"compilation step is required (such as a C extension)."
msgstr ""
"ソースコード配布物には、エンドユーザの Python 環境でソースコードからパッケー"
"ジをインストールするのに十分なものが含まれています。そのためには、パッケージ"
"のソースコードが必要であり、テストや説明文書が含まれているかもしれません。こ"
"れらは、自身でソースコードを開発したいと考えるエンドユーザにとっては便利であ"
"り、ローカルでコンパイルを行うステップが必要とされる (C 拡張など) エンドユー"
"ザのシステムで役に立つことでしょう。"

#: ../source/flow.rst:114 ../source/flow.rst:138
msgid ""
"The :ref:`build` package knows how to invoke your build tool to create one "
"of these:"
msgstr ""
":ref:`build` パッケージは、次のうちのいずれかを生成するためにあなたの選んだビ"
"ルドツールをどのように呼び出すのかを知っています:"

#: ../source/flow.rst:121
msgid ""
"Or, your build tool may provide its own interface for creating an sdist."
msgstr ""
"あるいは、あなたの選んだツールが、 sdist を生成するためのツール独自のインタ"
"フェースを提供しているかもしれません。"

#: ../source/flow.rst:125
msgid "The built distributions (wheels)"
msgstr "ビルド済み配布物 (wheels)"

#: ../source/flow.rst:127
msgid ""
"A built distribution contains only the files needed for an end user's Python "
"environment. No compilation steps are required during the install, and the "
"wheel file can simply be unpacked into the ``site-packages`` directory. This "
"makes the install faster and more convenient for end users."
msgstr ""
"ビルド済配布物は、エンドユーザの Python 環境に必要とされるファイル群だけを含"
"んでいます。インストールの際にコンパイル工程は不要で、 wheel ファイルの内容"
"を ``site-packages`` ディレクトリに単純に展開することができます。これによって"
"インストールが素早く行われ、エンドユーザにとってより便利であると言えるでしょ"
"う。"

#: ../source/flow.rst:132
msgid ""
"A pure Python package typically needs only one \"generic\" wheel. A package "
"with compiled binary extensions needs a wheel for each supported combination "
"of Python interpreter, operating system, and CPU architecture that it "
"supports. If a suitable wheel file is not available, tools like :ref:`pip` "
"will fall back to installing the source distribution."
msgstr ""
"純 Python パッケージでは、典型的には、ひとつの \"万能型\" の wheel さえあれば"
"十分です。コンパイル済みのバイナリ拡張を伴うパッケージでは、そのパッケージが"
"サポートする Python インタプリタ・オペレーティングシステム・ CPU アーキテク"
"チャの組み合わせのそれぞれについて wheel ファイルが必要になります。適切な "
"wheel ファイルが利用できない場合には、 :ref:`pip` のようなツールはソースコー"
"ド配布物からのインストールにフォールバックします。"

#: ../source/flow.rst:145
msgid "Or, your build tool may provide its own interface for creating a wheel."
msgstr ""
"あるいは、あなたの選んだビルドツールが wheel を生成するための独自のインタ"
"フェースを提供しているかもしれません。"

#: ../source/flow.rst:149
msgid ""
"The default behaviour of :ref:`build` is to make both an sdist and a wheel "
"from the source in the current directory; the above examples are "
"deliberately specific."
msgstr ""
":ref:`build` のデフォルトの動作は、カレントディレクトリにあるソースコードか"
"ら sdist と wheel の両方を作成することです; 上記の例は意図的に特定の動作をさ"
"せています。"

#: ../source/flow.rst:154
msgid "Upload to the package distribution service"
msgstr "パッケージ配布サービスへアップロードする"

#: ../source/flow.rst:156
msgid ""
"The :ref:`twine` tool can upload build artifacts to PyPI for distribution, "
"using a command like:"
msgstr ""
"ツールの :ref:`twine` の以下のようなコマンドを使って、配布のためにビルド成果"
"物を PyPI へアップロードすることができます:"

#: ../source/flow.rst:163
msgid "Or, your build tool may provide its own interface for uploading."
msgstr ""
"あるいは、あなたの選んだビルドツールにアップロードのための独自のインタフェー"
"スが備わっているかもしれません。"

#: ../source/flow.rst:166
msgid "Download and install"
msgstr "ダウンロードとインストール"

#: ../source/flow.rst:168
msgid ""
"Now that the package is published, end users can download and install the "
"package into their Python environment. Typically this is done with :ref:"
"`pip`, using a command like:"
msgstr ""
"今やパッケージが公開されたので、エンドユーザがそのパッケージをダウンロードし"
"て自分の Python 環境へインストールすることができるようになりました。典型的に"
"は、これは、次のようなコマンドを使って :ref:`pip` で行われます:"

#: ../source/flow.rst:176
msgid ""
"End users may also use other tools like :ref:`pipenv`, :ref:`poetry`, or :"
"ref:`pdm`."
msgstr ""
"エンドユーザは、 :ref:`pipenv` ・ :ref:`poetry` ・ :ref:`ppm` のような他の"
"ツールを使うことも可能です。"

#: ../source/glossary.rst:3
msgid "Glossary"
msgstr "用語集"

#: ../source/glossary.rst:8
msgid "Binary Distribution"
msgstr "バイナリ配布物"

#: ../source/glossary.rst:11
msgid ""
"A specific kind of :term:`Built Distribution` that contains compiled "
"extensions."
msgstr ""
"`ビルド済配布物 <Built Distribution>`の特定の種類で、コンパイル済みの拡張部分"
"を含むもの。"

#: ../source/glossary.rst:14
msgid "Built Distribution"
msgstr "ビルド済配布物"

#: ../source/glossary.rst:17
msgid ""
"A :term:`Distribution <Distribution Package>` format containing files and "
"metadata that only need to be moved to the correct location on the target "
"system, to be installed. :term:`Wheel` is such a format, whereas distutil's :"
"term:`Source Distribution <Source Distribution (or \"sdist\")>` is not, in "
"that it requires a build step before it can be installed.  This format does "
"not imply that Python files have to be precompiled (:term:`Wheel` "
"intentionally does not include compiled Python files)."
msgstr ""
":term:`配布物 <Distribution Package>`とは、ターゲットとなるシステムの適切な位"
"置に移動することでインストールされるファイルやメタデータを内包したフォーマッ"
"トです。:term:`Wheel`はそのようなフォーマットですが、他方で、distutilの :"
"term:`ソースコード配布物 <Source Distribution`(\"sdist\"とも)はそうではなく、"
"インストール可能になる前にビルドする段階が必要です。このフォーマットを念頭に"
"置くと、Pythonファイルが必ずしも予めコンパイルされている必要はないことがわか"
"ります(:term:`Wheel`は意図的にコンパイル済みのPythonファイルを含まないように"
"しています)。"

#: ../source/glossary.rst:26
msgid "Distribution Package"
msgstr "配布パッケージ"

#: ../source/glossary.rst:29
msgid ""
"A versioned archive file that contains Python :term:`packages <Import "
"Package>`, :term:`modules <Module>`, and other resource files that are used "
"to distribute a :term:`Release`. The archive file is what an end-user will "
"download from the internet and install."
msgstr ""
":term:`モジュール <Module>`すなわちPythonの :term:`パッケージ <Import "
"Package>`や、ある :term:`Release`を配布するために使われるその他のリソースファ"
"イルを内部に含むバージョン付きアーカイブファイル。アーカイブファイルはエンド"
"ユーザがインターネットからダウンロードしてインストールするものです。"

#: ../source/glossary.rst:34
msgid ""
"A distribution package is more commonly referred to with the single words "
"\"package\" or \"distribution\", but this guide may use the expanded term "
"when more clarity is needed to prevent confusion with an :term:`Import "
"Package` (which is also commonly called a \"package\") or another kind of "
"distribution (e.g. a Linux distribution or the Python language "
"distribution), which are often referred to with the single term "
"\"distribution\"."
msgstr ""
"配布物パッケージは単語ひとつで「パッケージ」や「配布物」と呼ばれることもしば"
"しばですが、 :term:`Import Package`(これも通常は単に「パッケージ」と呼ばれま"
"す)や他の種類の配布物(例えばLinuxディストリビューションやPython言語の配布物)"
"でよく単語ひとつの「配布物」と呼ばれるものとの混同を避けるために明確に述べる"
"必要がある場合には、本ガイドでは長い方の呼び方を用いることがあります。"

#: ../source/glossary.rst:41
msgid "Egg"
msgstr "卵"

#: ../source/glossary.rst:44
msgid ""
"A :term:`Built Distribution` format introduced by :ref:`setuptools`, which "
"is being replaced by :term:`Wheel`.  For details, see :doc:`The Internal "
"Structure of Python Eggs <setuptools:deprecated/python_eggs>` and `Python "
"Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""
":term:`ビルド済配布物 <Built Distribution>`フォーマットは :ref:`setuptools`に"
"よって導入されましたが、 :term:`Wheel`によって置き換えられつつあります。詳細"
"については、 :doc:`Python Eggsの内部構造 <setuptools:deprecated/"
"python_eggs>` や `Python Eggs <http://peak.telecommunity.com/DevCenter/"
"PythonEggs>`_ を参照してください。"

#: ../source/glossary.rst:48
msgid "Extension Module"
msgstr "拡張モジュール"

#: ../source/glossary.rst:51
msgid ""
"A :term:`Module` written in the low-level language of the Python "
"implementation: C/C++ for Python, Java for Jython. Typically contained in a "
"single dynamically loadable pre-compiled file, e.g.  a shared object (.so) "
"file for Python extensions on Unix, a DLL (given the .pyd extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""
":term:`モジュール <Module>`とは、Pythonの実装のうちの低レベル言語で書かれた部"
"分で、C/C++で書かれたCythonやJavaで書かれたJythonが該当する。典型的には動的に"
"ロードできるコンパイル済みのファイルをひとつ含んでいて、Unix上では共有オブ"
"ジェクトファイル(.so)、Windows上ではDLL(拡張子.pydを与えられる)のPython拡張、"
"Jython拡張ではJavaのクラスファイルの形を取る。"

#: ../source/glossary.rst:58
msgid "Known Good Set (KGS)"
msgstr "既知の良好なセット"

#: ../source/glossary.rst:61
msgid ""
"A set of distributions at specified versions which are compatible with each "
"other. Typically a test suite will be run which passes all tests before a "
"specific set of packages is declared a known good set. This term is commonly "
"used by frameworks and toolkits which are comprised of multiple individual "
"distributions."
msgstr ""
"(KGSとは)相互に互換性のある特定のバージョンの配布物の集合。典型的には、テスト"
"スイートで全てのテストに合格して実行できるようなパッケージの特定の組み合わせ"
"が既知の良好なセット(KGS)であると宣言されます。この用語は、個々の配布物を複数"
"組み合わせて構成されるフレームワークやツールキットで共通して用いられます。"

#: ../source/glossary.rst:67
msgid "Import Package"
msgstr "パッケージ"

#: ../source/glossary.rst:70
msgid ""
"A Python module which can contain other modules or recursively, other "
"packages."
msgstr ""
"直接に、あるいは何段階になっても良いが、他のパッケージを組み込んで使うような"
"Pythonモジュール。"

#: ../source/glossary.rst:73
msgid ""
"An import package is more commonly referred to with the single word \"package"
"\", but this guide will use the expanded term when more clarity is needed to "
"prevent confusion with a :term:`Distribution Package` which is also commonly "
"called a \"package\"."
msgstr ""
"インポートパッケージは、より普通には「パッケージ」という用語で呼ばれますが、"
"本ガイドでは、同様に単に「パッケージ」と呼ばれることが普通である :term:`配布"
"物パッケージ <Distribution Package>`との混同を避けるために必要な場合には、長"
"い方の用語を用いることにします。"

#: ../source/glossary.rst:77
msgid "Module"
msgstr "モジュール"

#: ../source/glossary.rst:80
msgid ""
"The basic unit of code reusability in Python, existing in one of two types: :"
"term:`Pure Module`, or :term:`Extension Module`."
msgstr ""
"Pythonにおけるソースコード再利用の基本的な単位で、 :term:`Pure Module`か :"
"term:`Extension Module`の二つのタイプのうちのいずれか。"

#: ../source/glossary.rst:83
msgid "Package Index"
msgstr "パッケージインデックス"

#: ../source/glossary.rst:86
msgid ""
"A repository of distributions with a web interface to automate :term:"
"`package <Distribution Package>` discovery and consumption."
msgstr ""
":term:`パッケージ <Distribution Package>`の発見・消費(訳註、意訳になるが検"
"索・ダウンロードが適切か)を自動化するwebインターフェイスを伴った配布物のリポ"
"ジトリ。"

#: ../source/glossary.rst:89
msgid "Per Project Index"
msgstr "プロジェクト単位の索引"

#: ../source/glossary.rst:92
msgid ""
"A private or other non-canonical :term:`Package Index` indicated by a "
"specific :term:`Project` as the index preferred or required to resolve "
"dependencies of that project."
msgstr ""
"ある :term:`プロジェクト <Project>`が嗜好するか要求する依存関係を解決するため"
"に、:term:`プロジェクト <Project>`の単位で示された仲間内または非公式の :term:"
"`パッケージ索引 <Package Index>`。"

#: ../source/glossary.rst:96
msgid "Project"
msgstr "プロジェクト"

#: ../source/glossary.rst:99
msgid ""
"A library, framework, script, plugin, application, or collection of data or "
"other resources, or some combination thereof that is intended to be packaged "
"into a :term:`Distribution <Distribution Package>`."
msgstr ""
"ライブラリ、フレームワーク、スクリプト、プラグイン、アプリケーション、ないし"
"一連のデータもしくはその他のリソース、または、これらの組み合わせで :term:`配"
"布物 <Distribution Package>`として意図的にパッケージされたもの。"

#: ../source/glossary.rst:103
msgid ""
"Since most projects create :term:`Distributions <Distribution Package>` "
"using either :pep:`518` ``build-system``, :ref:`distutils` or :ref:"
"`setuptools`, another practical way to define projects currently is "
"something that contains a :term:`pyproject.toml`, :term:`setup.py`, or :term:"
"`setup.cfg` file at the root of the project source directory."
msgstr ""
"ほとんどのプロジェクトで :pep:`518` ``build-system``として :ref:`distutils`"
"か :ref:`setuptools`を用いて :term:`配布物 <Distribution Package>`を作成しま"
"すので、現時点でプロジェクトを定義するもうひとつの実践的な方法は、プロジェク"
"トのソースコードの一番上のディレクトリに :term:`pyproject.toml`や :term:"
"`setup.py`または :term:`setup.cfg`のファイルを含む何ものかというものです。"

#: ../source/glossary.rst:109
msgid ""
"Python projects must have unique names, which are registered on :term:`PyPI "
"<Python Package Index (PyPI)>`. Each project will then contain one or more :"
"term:`Releases <Release>`, and each release may comprise one or more :term:"
"`distributions <Distribution Package>`."
msgstr ""
"Pythonにおけるプロジェクトは、 :term:`PyPI <Python Package Index (PyPI)>`に登"
"録される一意の名前を持っていなければなりません。そして、プロジェクトはそれぞ"
"れひとつまたはより多くの :term:`リリース <Release>`を含んでいて、各リリースは"
"ひとつまたはより多くの :term:`配布物 <Distribution Package>`を内包していま"
"す。"

#: ../source/glossary.rst:114
msgid ""
"Note that there is a strong convention to name a project after the name of "
"the package that is imported to run that project. However, this doesn't have "
"to hold true. It's possible to install a distribution from the project 'foo' "
"and have it provide a package importable only as 'bar'."
msgstr ""
"そのプロジェクトを稼働させるためにインポートされるパッケージの名前に因んでプ"
"ロジェクトに名前をつけるのが普通であるという強い慣習があることを覚えておいて"
"ください。しかしながら、常にそうしなければならないわけではありません。「なん"
"とか」というプロジェクトから配布物をインストールしていながらも、「かんとか」"
"(訳註、「なんとか」とは無関係の別の名前の例)という名前でのみインポート可能な"
"パッケージを提供することは可能です。"

#: ../source/glossary.rst:120
msgid "Pure Module"
msgstr "純粋なモジュール"

#: ../source/glossary.rst:123
msgid ""
"A :term:`Module` written in Python and contained in a single ``.py`` file "
"(and possibly associated ``.pyc`` and/or ``.pyo`` files)."
msgstr ""
"Pythonで書かれていて単一の``.py``ファイル(とおそらくは対応する``.pyc``ファイ"
"ルや``.pyo``ファイル)に収められた :term:`モジュール <Module>`。"

#: ../source/glossary.rst:126
msgid "Python Packaging Authority (PyPA)"
msgstr "Pythonパッケージングオーソリティ(PyPA)"

#: ../source/glossary.rst:129
msgid ""
"PyPA is a working group that maintains many of the relevant projects in "
"Python packaging. They maintain a site at :doc:`pypa.io <pypa:index>`, host "
"projects on `GitHub <https://github.com/pypa>`_ and `Bitbucket <https://"
"bitbucket.org/pypa>`_, and discuss issues on the `distutils-sig mailing list "
"<https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ and "
"`the Python Discourse forum <https://discuss.python.org/c/packaging>`__."
msgstr ""
"PyPAは、Pythonのパッケージングに関係する多くのプロジェクトを維持管理する作業"
"グループです。その活動の一環として :doc:`papa.io <pypa:index>` を維持管理して"
"おり、 `GitHub <https://github.com/pypa>`_ と `Bitbucket <https://bitbucket."
"org/pypa>`_ に関連プロジェクトを置くとともに、 `distutils-sig メーリングリス"
"ト <https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ と "
"`Python談話フォーラム <https://discuss.python.org/c/packaging>`__ で議論を進"
"めています。"

#: ../source/glossary.rst:138
msgid "Python Package Index (PyPI)"
msgstr "Pythonパッケージインデックス (PyPI)"

#: ../source/glossary.rst:141
msgid ""
"`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the "
"Python community. It is open to all Python developers to consume and "
"distribute their distributions."
msgstr ""
"`PyPI <https://pypi.org>`_ は、Pythonコミュニティにとってデフォルトの :term:"
"`Package Index`です。ここから配布物を取り出し、また、配布するためにすべての"
"Python開発者に開かれています。"

#: ../source/glossary.rst:144
msgid "pypi.org"
msgstr "pypi.org"

#: ../source/glossary.rst:147
msgid ""
"`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python "
"Package Index (PyPI)`. It replaced the legacy index domain name, ``pypi."
"python.org``, in 2017. It is powered by :ref:`warehouse`."
msgstr ""
"`pypi.org <https://pypi.org>`_ は、 :term:`Python パッケージインデックス"
"(PyPI)` のためのドメイン名です。2017年にそれまでのドメイン名である ``pypi."
"python.org`` を置き換えました。 :ref:`warehouse`を使っています。"

#: ../source/glossary.rst:151
msgid "pyproject.toml"
msgstr "pyproject.toml"

#: ../source/glossary.rst:154
msgid ""
"The tool-agnostic :term:`Project` specification file. Defined in :pep:`518`."
msgstr ""
"ツール不可知論者の :term:`プロジェクト <Project>` 仕様を示すファイル。 :pep:"
"`518` で定義。"

#: ../source/glossary.rst:156
msgid "Release"
msgstr "リリース"

#: ../source/glossary.rst:159
msgid ""
"A snapshot of a :term:`Project` at a particular point in time, denoted by a "
"version identifier."
msgstr ""
"ある特定の時点における :term:`プロジェクト <Project>`のスナップショットで、"
"バージョン識別子付きのもの。"

#: ../source/glossary.rst:162
msgid ""
"Making a release may entail the publishing of multiple :term:`Distributions "
"<Distribution Package>`.  For example, if version 1.0 of a project was "
"released, it could be available in both a source distribution format and a "
"Windows installer distribution format."
msgstr ""
"リリースを作成することは、複数の :term:`配布物 <Distribution Package>` を公開"
"することを伴います。例えば、あるプロジェクトのバージョン1.0がリリースされたな"
"らば、ソースコード配布物とWindowsインストーラ付配布物の両方が利用可能となって"
"いるという具合です。"

#: ../source/glossary.rst:167
msgid "Requirement"
msgstr "要求事項"

#: ../source/glossary.rst:170
msgid ""
"A specification for a :term:`package <Distribution Package>` to be "
"installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` "
"recommended installer, allows various forms of specification that can all be "
"considered a \"requirement\". For more information, see the :ref:`pip:pip "
"install` reference."
msgstr ""
"インストールされる :term:`パッケージ <Distribution Package>` の仕様。 :term:"
"`PYPA <Python Packaging Authority (PyPA)>` が推奨するインストーラである :ref:"
"`pip` では、「要求事項」とも解釈できる仕様を様々な様式で書くことを許容してい"
"ます。詳細については、 :ref:`pip:pip install` の項を参照してください。"

#: ../source/glossary.rst:176
msgid "Requirement Specifier"
msgstr "要求事項識別子"

#: ../source/glossary.rst:179
msgid ""
"A format used by :ref:`pip` to install packages from a :term:`Package "
"Index`. For an EBNF diagram of the format, see the `pkg_resources."
"Requirement <https://setuptools.readthedocs.io/en/latest/pkg_resources."
"html#requirement-objects>`_ entry in the :ref:`setuptools` docs. For "
"example, \"foo>=1.3\" is a requirement specifier, where \"foo\" is the "
"project name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""
":term:`パッケージインデックス <Package Index>`からパッケージをインストールす"
"るために :ref:`pip` で用いられる様式。この様式の EBNF 文法構造については :"
"ref:`setuptools` のドキュメントにある <`pkg_resources.Requirement <https://"
"setuptools.readthedocs.io/en/latest/pkg_resources.html#requirement-"
"objects>`_ の項をご覧ください。例えば、\"foo>=1.3\"は要求事項識別子であ"
"り、\"foo\"の部分がプロジェクトの名称、\">=1.3\"の部分が :term:`バージョン識"
"別子 <Version Specifier>` に該当します。"

#: ../source/glossary.rst:186
msgid "Requirements File"
msgstr "Requirementsファイル"

#: ../source/glossary.rst:189
msgid ""
"A file containing a list of :term:`Requirements <Requirement>` that can be "
"installed using :ref:`pip`. For more information, see the :ref:`pip` docs "
"on :ref:`pip:Requirements Files`."
msgstr ""
":ref:`pip`を用いてインストールできるように :term:`要求事項 <Requirement>` を"
"記したファイル。詳しい情報は、 :ref:`pip` のドキュメントの :ref:`pip:"
"Requirementsファイル <pip:Requirements Files>` をみてください。"

#: ../source/glossary.rst:193
#: ../source/guides/distributing-packages-using-setuptools.rst:58
msgid "setup.py"
msgstr "setup.py"

#: ../source/glossary.rst:194
#: ../source/guides/distributing-packages-using-setuptools.rst:79
msgid "setup.cfg"
msgstr "setup.cfg"

#: ../source/glossary.rst:197
msgid ""
"The project specification files for :ref:`distutils` and :ref:`setuptools`. "
"See also :term:`pyproject.toml`."
msgstr ""
":ref:`distutils`や :ref:`setuptools` で使われるプロジェクトの仕様を記したファ"
"イル。 :term:`pyproject.toml`も見てください。"

#: ../source/glossary.rst:200
msgid "Source Archive"
msgstr "ソースコードアーカイブ"

#: ../source/glossary.rst:203
msgid ""
"An archive containing the raw source code for a :term:`Release`, prior to "
"creation of a :term:`Source Distribution <Source Distribution (or \"sdist"
"\")>` or :term:`Built Distribution`."
msgstr ""
":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` や :term:`ビ"
"ルド配布物 <Built Distribution>` という用語を作る前には、:term:`リリース "
"<Release>`向けに生のソースコードを収めたアーカイブのことをこう呼んでいた。"

#: ../source/glossary.rst:207
msgid "Source Distribution (or \"sdist\")"
msgstr ""
"`ソースコード配布物 (またはsdist) <Source Distribution (or \"sdist\")>`"

#: ../source/glossary.rst:210
msgid ""
"A :term:`distribution <Distribution Package>` format (usually generated "
"using ``python setup.py sdist``) that provides metadata and the essential "
"source files needed for installing by a tool like :ref:`pip`, or for "
"generating a :term:`Built Distribution`."
msgstr ""
":ref:`pip`のようなツールでインストールするか :term:`ビルド配布物 <Build "
"Distribution>` を生成するのに必要なメタデータと必須ソースコードを提供する :"
"term:`配布物 <Distribution Package>` フォーマット。"

#: ../source/glossary.rst:215
msgid "System Package"
msgstr "システムパッケージ"

#: ../source/glossary.rst:218
msgid ""
"A package provided in a format native to the operating system, e.g. an rpm "
"or dpkg file."
msgstr ""
"rpmやdpkgのように、オペレーティングシステムに固有のフォーマットで提供される"
"パッケージ。"

#: ../source/glossary.rst:221
msgid "Version Specifier"
msgstr "バージョン指定子"

#: ../source/glossary.rst:224
msgid ""
"The version component of a :term:`Requirement Specifier`. For example, the "
"\">=1.3\" portion of \"foo>=1.3\".  :pep:`440` contains a :pep:`full "
"specification <440#version-specifiers>` of the specifiers that Python "
"packaging currently supports.  Support for PEP440 was implemented in :ref:"
"`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""
":term:`要求事項指定子 <Requirement Specifier>` のバージョン部分。例え"
"ば、\"foo>=1.3\"の中の\">=1.3\"の部分。:pep:`440`には、Pythonパッケージングが"
"現在サポートしている指定子の :pep:`完全な仕様 <440#version-specifiers>` が含"
"まれています。 :ref:`setuptools` v8.0や :ref:`pip` v6.0はPEP440への対応を実装"
"しています。"

#: ../source/glossary.rst:230
msgid "Virtual Environment"
msgstr "仮想環境"

#: ../source/glossary.rst:233
msgid ""
"An isolated Python environment that allows packages to be installed for use "
"by a particular application, rather than being installed system wide. For "
"more information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"システム全体からではなく、ある特定のアプリケーションだけから使えるようにパッ"
"ケージをインストールすることができる、隔離されたPython環境。詳細は :ref:`仮想"
"環境の生成と使用 <Creating and using Virtual Environments`を参照してくださ"
"い。"

#: ../source/glossary.rst:237
msgid "Wheel"
msgstr "Wheel"

#: ../source/glossary.rst:240
msgid ""
"A :term:`Built Distribution` format introduced by an official :doc:`standard "
"specification </specifications/binary-distribution-format/>`, which is "
"intended to replace the :term:`Egg` format.  Wheel is currently supported "
"by :ref:`pip`."
msgstr ""
":term:`ビルド済配布物 <Built Distribution>` フォーマットは、 :term:`Egg` "
"フォーマットを置換することを意図して、公式の :doc:`標準仕様 </specifications/"
"binary-distribution-format/>` で導入されました。Wheel は、現時点では、 :ref:"
"`pip` によってサポートされています。"

#: ../source/glossary.rst:245 ../source/glossary.rst:243
msgid "Working Set"
msgstr "動作可能セット"

#: ../source/glossary.rst:248 ../source/glossary.rst:246
msgid ""
"A collection of :term:`distributions <Distribution Package>` available for "
"importing. These are the distributions that are on the `sys.path` variable. "
"At most, one :term:`Distribution <Distribution Package>` for a project is "
"possible in a working set."
msgstr ""
"一連のインポート可能な :term:`配布物 <Distribution Package>`。これらは `sys."
"path` 変数から検索できる配布物です。あるプロジェクトには、高々(訳註、at most"
"ではなくat least、すくなくとも、か。)ひとつの :term:`配布物 <Distribution "
"Package>` が動作可能セットにあります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:3
msgid "Analyzing PyPI package downloads"
msgstr "PyPIパッケージのダウンロード状況の解析"

#: ../source/guides/analyzing-pypi-package-downloads.rst:5
msgid ""
"This section covers how to use the public PyPI download statistics dataset "
"to learn more about downloads of a package (or packages) hosted on PyPI. For "
"example, you can use it to discover the distribution of Python versions used "
"to download a package."
msgstr ""
"この節では、公開のPyPIダウンロードデータセットを用いて、PyPIにホストされてい"
"るパッケージ(あるいはパッケージ群)のダウンロード状況を詳しく見ていくことを記"
"述しています。例えば、ダウンロードに使われたPythonのバージョンの分布を発見す"
"ることができます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:15
#: ../source/guides/supporting-windows-using-appveyor.rst:20
msgid "Background"
msgstr "背景"

#: ../source/guides/analyzing-pypi-package-downloads.rst:17
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr "PyPIはいくつもの理由からダウンロード統計を表示しません。:[#]_"

#: ../source/guides/analyzing-pypi-package-downloads.rst:19
msgid ""
"**Inefficient to make work with a Content Distribution Network (CDN):** "
"Download statistics change constantly. Including them in project pages, "
"which are heavily cached, would require invalidating the cache more often, "
"and reduce the overall effectiveness of the cache."
msgstr ""
"**コンテンツデリバリネットワーク(CDN)と一緒に動かす時の効率の悪さ** ダウン"
"ロード用系は常に変動します。プロジェクトのページでのダウンロードは強烈に"
"キャッシュされていますが、(訳註、統計を正しく取ろうとするなら)より頻繁に"
"キャッシュし直さなければならず、これはキャッシュの効率性を損ねます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:24
msgid ""
"**Highly inaccurate:** A number of things prevent the download counts from "
"being accurate, some of which include:"
msgstr ""
"**非常に不正確** 次に挙げるものを含め、いくつもの要因でダウンロード数が正確と"
"は言えないものになります："

#: ../source/guides/analyzing-pypi-package-downloads.rst:27
msgid "``pip``'s download cache (lowers download counts)"
msgstr "``pip``のダウンロードキャッシュ (ダウンロード数を小さくする)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:28
msgid ""
"Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""
"内部の、または、非公式のミラーサイト (ダウンロード数を大きくする要因にも小さ"
"くする要因にもなる)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:29
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr "PyPIにホストされていないパッケージ (比較することの妥当性を損ねる)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:30
msgid ""
"Unofficial scripts or attempts at download count inflation (raises download "
"counts)"
msgstr ""
"ダウンロード数を増やす非公式のスクリプトまたは試行 (ダウンロード数を大きくす"
"る)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:32
msgid "Known historical data quality issues (lowers download counts)"
msgstr "過去のデータ品質における既知の問題 (ダウンロード数を小さくする)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:34
msgid ""
"**Not particularly useful:** Just because a project has been downloaded a "
"lot doesn't mean it's good; Similarly just because a project hasn't been "
"downloaded a lot doesn't mean it's bad!"
msgstr ""
"**とりわけ利用価値があるというわけではない** プロジェクト(の配布物、訳註。)が"
"たくさんダウンロードされたからといってそれだけで良いことだと決まったわけでは"
"ありませんし、あまりダウンロードされなかったとしてもそれだけで悪いことだと決"
"めつけることもできません！"

#: ../source/guides/analyzing-pypi-package-downloads.rst:38
msgid ""
"In short, because it's value is low for various reasons, and the tradeoffs "
"required to make it work are high, it has been not an effective use of "
"limited resources."
msgstr ""
"まとめると、様々な理由からそれ(訳註、ダウンロード統計)の価値が低い上、動作さ"
"せるために犠牲になるものが多いので、限られた資源の効率的な利用にはならないの"
"です。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:43
msgid "Public dataset"
msgstr "公開データセット"

#: ../source/guides/analyzing-pypi-package-downloads.rst:45
msgid ""
"As an alternative, the `Linehaul project <https://github.com/pypa/linehaul-"
"cloud-function/>`__ streams download logs from PyPI to `Google BigQuery`_ "
"[#]_, where they are stored as a public dataset."
msgstr ""
"別の方法としては、 `Linehaulプロジェクト <https://github.com/pypa/linehaul-"
"cloud-function/>`__ がダウンロードのログをPyPIから `Google BigQuery`_ [#]_ へ"
"連続的に取り出して、公開のデータセットとして保管しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:50
msgid "Getting set up"
msgstr "セットアップのやり方"

#: ../source/guides/analyzing-pypi-package-downloads.rst:52
msgid ""
"In order to use `Google BigQuery`_ to query the `public PyPI download "
"statistics dataset`_, you'll need a Google account and to enable the "
"BigQuery API on a Google Cloud Platform project. You can run up to 1TB of "
"queries per month `using the BigQuery free tier without a credit card "
"<https://cloud.google.com/blog/products/data-analytics/query-without-a-"
"credit-card-introducing-bigquery-sandbox>`__"
msgstr ""
"`Google BigQuery`_ を使って `PyPIダウンロード統計の公開データセット <public "
"PyPI download statistics dataset>`_ に問い合わせを行うためには、まずGoogleア"
"カウントが必要で、Google Cloud Platform (GCP)でBigQuery APIを有効にしておく必"
"要があります。`クレジットカード登録なしのBigQuery 無料枠 <https://cloud."
"google.com/blog/products/data-analytics/query-without-a-credit-card-"
"introducing-bigquery-sandobox>`__ を使うと一ヶ月当たり1TBまでのクエリを走らせ"
"ることができます"

#: ../source/guides/analyzing-pypi-package-downloads.rst:58
msgid "Navigate to the `BigQuery web UI`_."
msgstr "`BigQuery ウェブ UI <BigQuery web UI>`_ への道案内。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:59
msgid "Create a new project."
msgstr "新しいプロジェクトを作成する。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:60
msgid ""
"Enable the `BigQuery API <https://console.developers.google.com/apis/library/"
"bigquery-json.googleapis.com>`__."
msgstr ""
"`BigQuery API <https://console.developers.google.com/apis/library/bigquery-"
"json.googleapis.com>`__ を有効にする。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:63
msgid ""
"For more detailed instructions on how to get started with BigQuery, check "
"out the `BigQuery quickstart guide <https://cloud.google.com/bigquery/docs/"
"quickstarts/quickstart-web-ui>`__."
msgstr ""
"BigQueryの始め方についてさらに詳しい指南が欲しい場合は、`Cloud Console を使用"
"したクイックスタート <https://cloud.google.com/bigquery/docs/quickstarts/"
"quickstart-web-ui>`__ を参照してください。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:69
msgid "Data schema"
msgstr "データ構造"

#: ../source/guides/analyzing-pypi-package-downloads.rst:71
msgid ""
"Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` "
"table for each download. The table contains information about what file was "
"downloaded and how it was downloaded. Some useful columns from the `table "
"schema <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-"
"data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""
"それぞれのダウンロードの情報を格納した ``bigquery-public-data.pypi."
"file_downloads``テーブルについての説明をLinehaulが書きました。このテーブル"
"は、どのファイルがどのようにダウンロードされたかに関する情報を格納していま"
"す。`テーブル構造 <https://console.cloud.google.com/bigquery?"
"pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__ から役に"
"立つカラムをいくつか挙げると："

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
msgid "Column"
msgstr "カラム"

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/guides/using-manifest-in.rst:67
#: ../source/specifications/core-metadata.rst:192
msgid "Description"
msgstr "説明"

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/specifications/dependency-specifiers.rst:27
#: ../source/specifications/direct-url-data-structure.rst:236
msgid "Examples"
msgstr "例"

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
msgid "timestamp"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
msgid "Date and time"
msgstr "日付と時刻"

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
msgid "file.project"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
msgid "Project name"
msgstr "プロジェクト名"

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
msgid "``pipenv``, ``nose``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
msgid "file.version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
msgid "Package version"
msgstr "パッケージのバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
msgid "``0.1.6``, ``1.4.2``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
msgid "details.installer.name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
msgid "Installer"
msgstr "インストーラ"

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
msgid "pip, :ref:`bandersnatch`"
msgstr "pip、 :ref:`bandersnatch`"

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
msgid "details.python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
msgid "Python version"
msgstr "Pythonバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:93
msgid "Useful queries"
msgstr "役に立つクエリ"

#: ../source/guides/analyzing-pypi-package-downloads.rst:95
msgid ""
"Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" "
"button."
msgstr ""
"「クエリを新規作成」ボタンをクリックすることで `BigQuery web UI`_ 内でクエリ"
"を走らせましょう。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:97
msgid ""
"Note that the rows are stored in a partitioned table, which helps limit the "
"cost of queries. These example queries analyze downloads from recent history "
"by filtering on the ``timestamp`` column."
msgstr ""
"クエリのコストを削減するためにデータベースの行がパーティションされた状態で格"
"納されていることを覚えておいてください。これらの例では、``timestamp`` カラム"
"を使って絞り込むことで最近のダウンロード履歴を分析しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:102
msgid "Counting package downloads"
msgstr "パッケージのダウンロードを数える"

#: ../source/guides/analyzing-pypi-package-downloads.rst:104
msgid ""
"The following query counts the total number of downloads for the project "
"\"pytest\"."
msgstr "次のクエリは\"pytest\"プロジェクトのダウンロード総数を数えています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:119
#: ../source/guides/analyzing-pypi-package-downloads.rst:140
#: ../source/guides/analyzing-pypi-package-downloads.rst:168
#: ../source/guides/analyzing-pypi-package-downloads.rst:205
msgid "num_downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:121
msgid "26190085"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:124
msgid ""
"To count downloads from pip only, filter on the ``details.installer.name`` "
"column."
msgstr ""
"pipを通じてダウンロードされた数だけを数えるには、``details.installer.name``カ"
"ラムを使って抽出してください。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:142
msgid "24334215"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:146
msgid "Package downloads over time"
msgstr "時系列のパッケージダウンロード数"

#: ../source/guides/analyzing-pypi-package-downloads.rst:148
msgid ""
"To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also "
"filtering by this column reduces corresponding costs."
msgstr ""
"月毎のダウンロード数を数えるには、``TIMESTAMP_TRUNC``関数を使います。このカラ"
"ムを使って抽出することは、通信量を抑えることにもなります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:168
msgid "month"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
msgid "1956741"
msgstr "1956741"

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
msgid "2018-01-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
msgid "2344692"
msgstr "2344692"

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
msgid "2017-12-01"
msgstr "2017-12-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
msgid "1730398"
msgstr "1730398"

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
msgid "2017-11-01"
msgstr "2017-11-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
msgid "2047310"
msgstr "2047310"

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
msgid "2017-10-01"
msgstr "2017-10-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
msgid "1744443"
msgstr "1744443"

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
msgid "2017-09-01"
msgstr "2017-09-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
msgid "1916952"
msgstr "1916952"

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
msgid "2017-08-01"
msgstr "2017-08-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:184
msgid "Python versions over time"
msgstr "時系列で見たPythonバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:186
msgid ""
"Extract the Python version from the ``details.python`` column. Warning: This "
"query processes over 500 GB of data."
msgstr ""
"``details.python``カラムからPythonのバージョンを取り出します。警告：このクエ"
"リは500GB以上のデータを処理します。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:205
msgid "python"
msgstr "python"

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
msgid "3.7"
msgstr "3.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
msgid "18051328726"
msgstr "18051328726"

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
msgid "3.6"
msgstr "3.6"

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
msgid "9635067203"
msgstr "9635067203"

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
msgid "3.8"
msgstr "3.8"

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
msgid "7781904681"
msgstr "7781904681"

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
msgid "2.7"
msgstr "2.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
msgid "6381252241"
msgstr "6381252241"

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
msgid "null"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
msgid "2026630299"
msgstr "2026630299"

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
msgid "3.5"
msgstr "3.5"

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
msgid "1894153540"
msgstr "1894153540"

#: ../source/guides/analyzing-pypi-package-downloads.rst:222
msgid "Getting absolute links to artifacts"
msgstr "アーティファクトへの完全なリンクを得る"

#: ../source/guides/analyzing-pypi-package-downloads.rst:224
msgid ""
"It's sometimes helpful to be able to get the absolute links to download "
"artifacts from PyPI based on their hashes, e.g. if a particular project or "
"release has been deleted from PyPI. The metadata table includes the ``path`` "
"column, which includes the hash and artifact filename."
msgstr ""
"例えばあるプロジェクトやリリースが PyPI から削除されてしまったような場合に、"
"ハッシュ値に基づいて PyPI からアーティファクト(訳注、そのようなプロジェクトや"
"リリース)をダウンロードすることができる完全なリンクがあれば便利な時もあるで"
"しょう。メタデータテーブルには ``path`` 列があって、ハッシュ値とアーティファ"
"クトのファイル名を保持しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:230
msgid ""
"The URL generated here is not guaranteed to be stable, but currently aligns "
"with the URL where PyPI artifacts are hosted."
msgstr ""
"ここで生成された URL はいつまでも存在するとは限りませんが、しかし、その時点"
"で PyPI のアーティファクトがどこに保存されているかを示す URL を含んでいます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:243
msgid "url"
msgstr "url"

#: ../source/guides/analyzing-pypi-package-downloads.rst:245
msgid ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:247
msgid ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:249
msgid ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:251
msgid ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:253
msgid ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:258
msgid "Caveats"
msgstr "注意書き"

#: ../source/guides/analyzing-pypi-package-downloads.rst:260
msgid ""
"In addition to the caveats listed in the background above, Linehaul suffered "
"from a bug which caused it to significantly under-report download statistics "
"prior to July 26, 2018. Downloads before this date are proportionally "
"accurate (e.g. the percentage of Python 2 vs. Python 3 downloads) but total "
"numbers are lower than actual by an order of magnitude."
msgstr ""
"上記の背景に列挙した注意書きに加えて、Linehaulは、極端に過小報告されていたダ"
"ウンロード統計の原因となったバグに2018年7月26日まで悩まされていました。この日"
"より前のダウンロード数については、比率の点(例えばPython2とPython3の百分率)で"
"は正確ですが、絶対数の点では桁が異なるほどに過小です。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:268
msgid "Additional tools"
msgstr "その他のツール"

#: ../source/guides/analyzing-pypi-package-downloads.rst:270
msgid ""
"Besides using the BigQuery console, there are some additional tools which "
"may be useful when analyzing download statistics."
msgstr ""
"BigQueryコンソールを用いる他に、ダウンロード統計を分析する際に役に立つと思わ"
"れるツールがいくつかあります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:274
msgid "``google-cloud-bigquery``"
msgstr "``google-cloud-bigquery``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:276
msgid ""
"You can also access the public PyPI download statistics dataset "
"programmatically via the BigQuery API and the `google-cloud-bigquery`_ "
"project, the official Python client library for BigQuery."
msgstr ""
"BigQuery APIとBigQuery用の公式Pythonクライアントである `google-cloud-"
"bigquery`_ プロジェクトを使って、プログラムからPyPIの公開ダウンロード統計デー"
"タセットにアクセスすることもできます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:304
msgid "``pypinfo``"
msgstr "``pypinfo``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:306
msgid ""
"`pypinfo`_ is a command-line tool which provides access to the dataset and "
"can generate several useful queries. For example, you can query the total "
"number of download for a package with the command ``pypinfo package_name``."
msgstr ""
"`pypinfo`_ はデータセットにアクセスして、役に立つクエリをいくつか生成する機能"
"を提供するコマンドラインツールです。例えば、``pypinfo package_name``を実行す"
"れば、そのパッケージのダウンロード総数を問い合わせることができます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:310
msgid "Install `pypinfo`_ using pip."
msgstr "pipを用いて `pypinfo`_ をインストール。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:316
msgid "Usage:"
msgstr "使い方："

#: ../source/guides/analyzing-pypi-package-downloads.rst:332
msgid "``pandas-gbq``"
msgstr "``pandas-gbq``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:334
msgid ""
"The `pandas-gbq`_ project allows for accessing query results via `Pandas`_."
msgstr ""
"`pandas-bbq`_ プロジェクトを使えば `Pandas`_ 経由でクエリ結果を参照することが"
"できます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:338
#: ../source/specifications/binary-distribution-format.rst:465
#: ../source/specifications/dependency-specifiers.rst:480
#: ../source/specifications/binary-distribution-format.rst:463
msgid "References"
msgstr "参考文献"

#: ../source/guides/analyzing-pypi-package-downloads.rst:340
msgid ""
"`PyPI Download Counts deprecation email <https://mail.python.org/pipermail/"
"distutils-sig/2013-May/020855.html>`__"
msgstr ""
"`PyPI ダウンロード統計を非推奨とするメール (PyPI Download Counts deprecation "
"email) <https://mail.python.org/pipermail/distutils-sig/2013-May/020855."
"html>`__"

#: ../source/guides/analyzing-pypi-package-downloads.rst:341
msgid ""
"`PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/"
"distutils-sig/2016-May/028986.html>`__"
msgstr ""
"`PyPI BigQueryデータセットをアナウンスするメール (PyPI BigQuery dataset "
"announcement email) <https://mail.python.org/pipermail/distutils-sig/2016-"
"May/028986.html>`__"

#: ../source/guides/creating-and-discovering-plugins.rst:3
msgid "Creating and discovering plugins"
msgstr "プラグイン作成と発見"

#: ../source/guides/creating-and-discovering-plugins.rst:5
msgid ""
"Often when creating a Python application or library you'll want the ability "
"to provide customizations or extra features via **plugins**. Because Python "
"packages can be separately distributed, your application or library may want "
"to automatically **discover** all of the plugins available."
msgstr ""
"Pythonのアプリケーションまたはライブラリを作成する時には、カスタマイズができ"
"るようにしたり **プラグイン** を通じて機能を追加できるようにしたりすることが"
"しばしばあります。Pythonのパッケージは別々に配布できますので、あなたのアプリ"
"ケーションまたはライブラリが利用可能なすべてのプラグインを自動的に **探し出す"
"** ようにしたくなるかもしれません。"

#: ../source/guides/creating-and-discovering-plugins.rst:10
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr "プラグインの自動検出には大きく分けて３個の実現方法があります。"

#: ../source/guides/creating-and-discovering-plugins.rst:12
msgid "`Using naming convention`_."
msgstr "`命名規則を用いるやり方 <Using naming convention>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:13
msgid "`Using namespace packages`_."
msgstr "`namespaceパッケージを用いるやり方 <Using namespace packages>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:14
msgid "`Using package metadata`_."
msgstr "`パッケージのメタデータを用いるやり方 <Using package metadata>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:18
msgid "Using naming convention"
msgstr "命名規則を用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:20
msgid ""
"If all of the plugins for your application follow the same naming "
"convention, you can use :func:`pkgutil.iter_modules` to discover all of the "
"top-level modules that match the naming convention. For example, `Flask`_ "
"uses the naming convention ``flask_{plugin_name}``. If you wanted to "
"automatically discover all of the Flask plugins installed:"
msgstr ""
"あなたのアプリケーション用のすべてのプラグインが命名規則に従うのであれば、 :"
"func:`pkgutil.iter_modules` を用いて命名規則に合致するトップレベルのすべての"
"モジュールを発見することができます。例えば、 `Flask`_ は命名規則として "
"``flask_{plugin_name}`` を使います。もし、すべてのインストール済みFlask用プラ"
"グインを発見したいのであれば："

#: ../source/guides/creating-and-discovering-plugins.rst:38
msgid ""
"If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins "
"installed then ``discovered_plugins`` would be:"
msgstr ""
"もしあなたが `Flask-SQLAlchemy`_ と `Flask-Talisman`_ のふたつのプラグインを"
"インストールしてあるなら、 ``discovered_plugins`` は次のようになるでしょう："

#: ../source/guides/creating-and-discovering-plugins.rst:48
msgid ""
"Using naming convention for plugins also allows you to query the Python "
"Package Index's `simple API`_ for all packages that conform to your naming "
"convention."
msgstr ""
"プラグインの命名規則を用いることで、あなたの命名規則に従うすべてのパッケージ"
"についてPython パッケージインデックスの `simple API`_ から検索することもでき"
"るようになります。"

#: ../source/guides/creating-and-discovering-plugins.rst:59
#: ../source/guides/creating-and-discovering-plugins.rst:58
msgid "Using namespace packages"
msgstr "namespaceパッケージを用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:61
#: ../source/guides/creating-and-discovering-plugins.rst:60
msgid ""
":doc:`Namespace packages <packaging-namespace-packages>` can be used to "
"provide a convention for where to place plugins and also provides a way to "
"perform discovery. For example, if you make the sub-package ``myapp."
"plugins`` a namespace package then other :term:`distributions <Distribution "
"Package>` can provide modules and packages to that namespace. Once "
"installed, you can use :func:`pkgutil.iter_modules` to discover all modules "
"and packages installed under that namespace:"
msgstr ""
":doc:`Namespace パッケージ <packaging-namespace-packages>` を使えば、プラグイ"
"ンをどこに配置するかに関する規則や、発見するための方法も提供できます。例え"
"ば、あなたが名前空間を決めるサブパッケージ ``myapp.plugins`` を作成したら、そ"
"の名前空間に他の :term:`配布物 <Distribution Package>` がモジュールやパッケー"
"ジを配置することができます。インストールが終われば、あなたは :func:`pkgutil."
"iter_modules` を用いてインストール済みの全てのモジュールやパッケージをその名"
"前空間で発見できるでしょう。"

#: ../source/guides/creating-and-discovering-plugins.rst:89
#: ../source/guides/creating-and-discovering-plugins.rst:88
msgid ""
"Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` "
"causes it to only look for the modules directly under that namespace. For "
"example, if you have installed distributions that provide the modules "
"``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` in "
"this case would be:"
msgstr ""
":func:`~pkgutil.iter_modules` に ``myapp.plugins.__path__`` を指定すると、そ"
"の名前空間の直下にあるモジュールだけを探索するようになります。例えば、あなた"
"がモジュールの ``myapp.plugins.a`` と ``myapp.plugins.b`` を提供する配布物を"
"インストールしているとしたら、 ``discovered_plugins`` は次のようになるでしょ"
"う："

#: ../source/guides/creating-and-discovering-plugins.rst:101
#: ../source/guides/creating-and-discovering-plugins.rst:100
msgid ""
"This sample uses a sub-package as the namespace package (``myapp.plugins``), "
"but it's also possible to use a top-level package for this purpose (such as "
"``myapp_plugins``). How to pick the namespace to use is a matter of "
"preference, but it's not recommended to make your project's main top-level "
"package (``myapp`` in this case) a namespace package for the purpose of "
"plugins, as one bad plugin could cause the entire namespace to break which "
"would in turn make your project unimportable. For the \"namespace sub-package"
"\" approach to work, the plugin packages must omit the :file:`__init__.py` "
"for your top-level package directory (``myapp`` in this case) and include "
"the namespace-package style :file:`__init__.py` in the namespace sub-package "
"directory (``myapp/plugins``).  This also means that plugins will need to "
"explicitly pass a list of packages to :func:`setup`'s ``packages`` argument "
"instead of using :func:`setuptools.find_packages`."
msgstr ""
"この例ではサブパッケージを名前空間を決めるパッケージ(``myapp.plugins``)として"
"使っていますが、トップレベルのパッケージをこの(``myapp_plugins``のような)目的"
"に用いることも可能です。名前空間をどのようにして決めるかは好みの問題ですが、"
"あなたのプロジェクトのトップレベルのパッケージ(この場合では``myapp``)をプラグ"
"インの名前空間を決めるために用いると、全体の名前空間を破壊するようなプラグイ"
"ンがひとつあるだけで、あなたのプロジェクトをインポートすることができなくなる"
"のでお勧めしません。「名前空間を決めるサブパッケージ」の手法がうまく動作する"
"ためには、プラグインパッケージ側のトップレベルパッケージのディレクトリ(この場"
"合には``myapp``)に :file:`__init__.py` が存在してはいけませんし、名前空間を決"
"めるサブパッケージのディレクトリ(``myapp/plugins``)にある :file:`__init__.py`"
"をプラグインパッケージ側でインクルードしなければなりません。これはまた、 プラ"
"グインの側で:func:`setuptools.find_packages` を使うのではなく、パッケージの名"
"前を :func:`setup`の ``packages`` 引数に明示的に渡す必要がある、ということを"
"意味しています。"

#: ../source/guides/creating-and-discovering-plugins.rst:115
#: ../source/guides/creating-and-discovering-plugins.rst:114
msgid ""
"Namespace packages are a complex feature and there are several different "
"ways to create them. It's highly recommended to read the :doc:`packaging-"
"namespace-packages` documentation and clearly document which approach is "
"preferred for plugins to your project."
msgstr ""
"名前空間を決めるパッケージは込み入った機能で、いくつかの異なる作成方法があり"
"ます。 :doc:`packaging-namespace-packages` 文書を読むとともに、あなたのプロ"
"ジェクト用のプラグインとしてはどちらの手法が好ましいのかを明白に文書化してお"
"くことを強くお勧めします。"

#: ../source/guides/creating-and-discovering-plugins.rst:121
#: ../source/guides/creating-and-discovering-plugins.rst:120
msgid "Using package metadata"
msgstr "パッケージのメタデータを用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:123
#: ../source/guides/creating-and-discovering-plugins.rst:122
msgid ""
"Packages can have metadata for plugins described in the :ref:`entry-points`. "
"By specifying them, a package announces that it contains a specific kind of "
"plugin. Another package supporting this kind of plugin can use the metadata "
"to discover that plugin."
msgstr ""
"パッケージは、 :ref:`entry-points` に記述されたプラグインのためのメタデータを"
"持つことができます。それを指定することで、パッケージが特定の種類のプラグイン"
"を含んでいることをアナウンスします。そのメタデータを使って、同じ種類のプラグ"
"インをサポートする別のパッケージがそのプラグインを検出するのに使うことができ"
"ます。"

#: ../source/guides/creating-and-discovering-plugins.rst:127
#: ../source/guides/creating-and-discovering-plugins.rst:126
msgid ""
"For example if you have a package named ``myapp-plugin-a`` and it includes "
"the following in its ``pyproject.toml``:"
msgstr ""
"例えば、``myapp-plugin-a`` という名前のパッケージが存在して、その "
"``pyproject.toml`` に次のものを含む場合："

#: ../source/guides/creating-and-discovering-plugins.rst:135
#: ../source/guides/creating-and-discovering-plugins.rst:134
msgid ""
"Then you can discover and load all of the registered entry points by using :"
"func:`importlib.metadata.entry_points` (or the backport_ "
"``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""
"そして、 :func:`import lib.metadata.entry_points` (あるいはPython 3.6-3.9用"
"の backport_``import lib_metadata>=3.6``)を使うことで、登録されたエントリポイ"
"ントを全て検出することができます。"

#: ../source/guides/creating-and-discovering-plugins.rst:150
#: ../source/guides/creating-and-discovering-plugins.rst:149
msgid ""
"In this example, ``discovered_plugins`` would be a collection of type :class:"
"`importlib.metadata.EntryPoint`:"
msgstr ""
"この例では、 ``discovered_plugins`` は :class:`import lib.metadata."
"EntryPoint` 型の(オブジェクトの)集合となるでしょう。"

#: ../source/guides/creating-and-discovering-plugins.rst:159
#: ../source/guides/creating-and-discovering-plugins.rst:158
msgid ""
"Now the module of your choice can be imported by executing "
"``discovered_plugins['a'].load()``."
msgstr ""
"今や、``discovered_plugins['a'].load()`` を実行することで、あなたが選んだモ"
"ジュールをインポートすることができます。"

#: ../source/guides/creating-and-discovering-plugins.rst:162
#: ../source/guides/creating-and-discovering-plugins.rst:161
msgid ""
"The ``entry_point`` specification in :file:`setup.py` is fairly flexible and "
"has a lot of options. It's recommended to read over the entire section on :"
"doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""
":file:`setup.py` における ``entry_points`` の指定はかなり自由度が高く、オプ"
"ションがたくさんあります。 :doc:`entry_point <setuptools:userguide/"
"entry_point>` の全部のセクションに目を通すことをお勧めします。"

#: ../source/guides/creating-and-discovering-plugins.rst:166
#: ../source/guides/creating-and-discovering-plugins.rst:165
msgid ""
"Since this specification is part of the :doc:`standard library <python:"
"library/importlib.metadata>`, most packaging tools other than setuptools "
"provide support for defining entry points."
msgstr ""
"この仕様は :doc:`標準ライブラリ <python:library/importlib.metadata>` の一部な"
"ので、setuptools以外のほとんどのパッケージングツールでもエントリポイントを定"
"義できる機能を提供しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:5
msgid "Packaging and distributing projects"
msgstr "パッケージングとプロジェクトの配布"

#: ../source/guides/distributing-packages-using-setuptools.rst:7
msgid ""
"This section covers some additional details on configuring, packaging and "
"distributing Python projects with ``setuptools`` that aren't covered by the "
"introductory tutorial in :doc:`/tutorials/packaging-projects`.  It still "
"assumes that you are already familiar with the contents of the :doc:`/"
"tutorials/installing-packages` page."
msgstr ""
"この節では、 ``setuptools`` を使ったPythonパッケージの設定・パッケージング・"
"配布方法について、 :doc:`/tutorials/packaging-projects`_ の入門的なチュートリ"
"アルでは触れていないような追加的な詳細を説明します。あなたが既に :doc:`/"
"tutorials/installing-packages` ページの内容については慣れ親しんでいるものと仮"
"定して進めます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:13
msgid ""
"The section does *not* aim to cover best practices for Python project "
"development as a whole.  For example, it does not provide guidance or tool "
"recommendations for version control, documentation, or testing."
msgstr ""
"この節は、Pythonプロジェクトの開発についての全体的なベストプラクティスを説明"
"しているわけではありません。例えば、バージョン管理や文書化、あるいは試験につ"
"いて、手引きとなったりツールを推奨するようなことはありません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:17
msgid ""
"For more reference material, see :std:doc:`Building and Distributing "
"Packages <userguide/index>` in the :ref:`setuptools` docs, but note that "
"some advisory content there may be outdated. In the event of conflicts, "
"prefer the advice in the Python Packaging User Guide."
msgstr ""
"より詳しい参考文献としては、:ref:`setuptools` の説明文書の中の :std:doc:`パッ"
"ケージのビルドと配布 <userguide/index>` を挙げておきますが、推奨事項のいくつ"
"かはもはや古くなっているかもしれません。喰い違いがあった場合には、Python パッ"
"ケージングユーザガイドの推奨事項を優先してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:27
msgid "Requirements for packaging and distributing"
msgstr "パッケージングと配布に対する要求事項"

#: ../source/guides/distributing-packages-using-setuptools.rst:28
msgid ""
"First, make sure you have already fulfilled the :ref:`requirements for "
"installing packages <installing_requirements>`."
msgstr ""
"最初に、あなたが既に :ref:`パッケージをインストールする際の要求事項 "
"<installing_requirements>` を満たしていることを確実にしてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:31
msgid "Install \"twine\" [1]_:"
msgstr "\"twine\"をインストールする [1]_:"

#: ../source/guides/distributing-packages-using-setuptools.rst:45
msgid ""
"You'll need this to upload your project :term:`distributions <Distribution "
"Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below "
"<Uploading your Project to PyPI>`)."
msgstr ""
"あなたのプロジェクトの :term:`配布物 <Distribution Package>` を :term:`PyPI "
"<Python Package Index (PyPI)>` にアップロードする( :ref:`後述 <Uploading "
"your Project to PyPI>` )ためにこれが必要になるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:51
msgid "Configuring your project"
msgstr "あなたのプロジェクトを設定する"

#: ../source/guides/distributing-packages-using-setuptools.rst:55
msgid "Initial files"
msgstr "最初に必要なファイル群"

#: ../source/guides/distributing-packages-using-setuptools.rst:60
msgid ""
"The most important file is :file:`setup.py` which exists at the root of your "
"project directory. For an example, see the `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
"最重要のファイルは、あなたのプロジェクトのディレクトリの一番上(ルート)にあ"
"る :file:`setup.py` です。`PyPA サンプルプロジェクト <https://github.com/"
"pypa/sampleproject>`_ の `setup.py <https://github.com/pypa/sampleproject/"
"blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ に具体例がありま"
"す。"

#: ../source/guides/distributing-packages-using-setuptools.rst:65
msgid ":file:`setup.py` serves two primary functions:"
msgstr ":file:`setup.py` はふたつの主要な機能を提供します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:67
msgid ""
"It's the file where various aspects of your project are configured. The "
"primary feature of :file:`setup.py` is that it contains a global ``setup()`` "
"function.  The keyword arguments to this function are how specific details "
"of your project are defined.  The most relevant arguments are explained in :"
"ref:`the section below <setup() args>`."
msgstr ""
"まず、あなたのプロジェクトをさまざまな角度から設定するためのファイルです。 :"
"file:`setup.py` の主要な機能は、グローバルな ``setup()`` 関数を含んでいること"
"です。この関数にキーワード引数を渡すことで、あなたのプロジェクトの特定の細部"
"を定義することができます。適切な引数のほとんどについて :ref:`次節 <setup() "
"args>` で説明します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:73
msgid ""
"It's the command line interface for running various commands that relate to "
"packaging tasks. To get a listing of available commands, run ``python3 setup."
"py --help-commands``."
msgstr ""
"それは、パッケージングする上での作業項目に関連したさまざまなコマンドを走らせ"
"るためのコマンドラインインタフェイスです。使用可能なコマンドを一覧するには、 "
"``python setup.py --help-commands`` を実行してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:81
msgid ""
":file:`setup.cfg` is an ini file that contains option defaults for :file:"
"`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup."
"cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
":file:`setup.cfg` は :file:`setup.py` のコマンド群に対するオプションの既定値"
"を含む初期化ファイルです。 `PyPA サンプルプロジェクト <https://github.com/"
"pypa/sampleproject>`_ の中の `setup.cfg <https://github.com/pypa/"
"sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.cfg>`_ に使"
"用例が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:88
msgid "README.rst / README.md"
msgstr "README.rstとREADME.md"

#: ../source/guides/distributing-packages-using-setuptools.rst:90
msgid ""
"All projects should contain a readme file that covers the goal of the "
"project. The most common format is `reStructuredText <https://docutils."
"sourceforge.io/rst.html>`_ with an \"rst\" extension, although this is not a "
"requirement; multiple variants of `Markdown <https://daringfireball.net/"
"projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:"
"`long_description_content_type <description>` argument)."
msgstr ""
"すべてのプロジェクトは、プロジェクトのゴールを記したreadmeファイルを備えるべ"
"きです。一番良くあるフォーマットは拡張子が \"rst\" の `reStructuredText "
"<https://docutils.sourceforge.io/rst.html>`_ ですが、これは(訳註、必須の)要求"
"事項というわけではありません。他にも複数の種類の `マークダウン <https://"
"daringfireball.net/projects/markdown/>`_ フォーマットがサポートされています"
"(``setup()`` の :ref:`long_description_content_type <description>` 引数を見て"
"ください)。"

#: ../source/guides/distributing-packages-using-setuptools.rst:97
msgid ""
"For an example, see `README.md <https://github.com/pypa/sampleproject/blob/"
"main/README.md>`_ from the `PyPA sample project <https://github.com/pypa/"
"sampleproject>`_."
msgstr ""
"`PyPA sample project <https://github.com/pypa/sampleproject>`_ の中の "
"`README.md <https://github.com/pypa/sampleproject/blob/main/README.md>`_ に例"
"が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:101
msgid ""
"Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:"
"`README.rst`, :file:`README.txt`, or :file:`README`) included in source "
"distributions by default. The built-in :ref:`distutils` library adopts this "
"behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ "
"will include a :file:`README.md` if found. If you are using setuptools, you "
"don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, "
"include it to be explicit."
msgstr ""
":ref:`setuptools`の0.6.27およびそれ以降のバージョンを使っているプロジェクトで"
"は、標準のreadmeファイル(:file:`README.rst`、 :file:`README.txt`、または :"
"file:`README`)がデフォルトでソースコード配布物に含まれるようになっています。"
"標準ライブラリの :ref:`distutils` では、Python 3.7からこの動作を採用しまし"
"た。さらに、:ref:`setuptools` の36.4.0およびそれ以降のバージョンでは、もし見"
"つかれば :file:`README.md` を含めるようになっています。もしあなたがsetuptools"
"を使っているのであれば、あなたはreadmeファイルを :file:`MANIFEST.in` に明記す"
"る必要はありません。そうでないなら、明示的に書いてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:110
msgid "MANIFEST.in"
msgstr "MANIFEST.in"

#: ../source/guides/distributing-packages-using-setuptools.rst:112
msgid ""
"A :file:`MANIFEST.in` is needed when you need to package additional files "
"that are not automatically included in a source distribution.  For details "
"on writing a :file:`MANIFEST.in` file, including a list of what's included "
"by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""
"自動的に追加されるファイル以外のファイルをソースコード配布物に追加したい場合"
"には、 :file:`MANIFEST.in` が必要になります。 どんなファイルがデフォルトで自"
"動的に追加されるのかも含めて、 :file:`MANIFEST.in` の書き方の詳細については"
"「 :ref:`MANIFEST.in の使い方 <Using MANIFEST.in>`」を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:117
msgid ""
"However, you may not have to use a :file:`MANIFEST.in`. For an example, the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_ has removed "
"its manifest file, since all the necessary files have been included by :ref:"
"`setuptools` 43.0.0 and newer."
msgstr ""
"しかしながら、あなたは必ずしも :file:`MANIFEST.in` を使わなくても構いません。"
"一つの例として`PyPA サンプルプロジェクト <https://github.com/pypa/"
"sampleproject>`_ では、必要なファイルがすべて 43.0.0およびこれ以降の:ref:"
"`setuptools`に含まれているので、マニフェストファイルを削除しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:122
msgid ""
":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""
":file:`MANIFEST.in` は、wheelなどのバイナリ配布物には影響を与えません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:125
msgid "LICENSE.txt"
msgstr "LICENSE.txt"

#: ../source/guides/distributing-packages-using-setuptools.rst:127
msgid ""
"Every package should include a license file detailing the terms of "
"distribution. In many jurisdictions, packages without an explicit license "
"can not be legally used or distributed by anyone other than the copyright "
"holder. If you're unsure which license to choose, you can use resources such "
"as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a "
"lawyer."
msgstr ""
"各パッケージは、配布の条件を指定するライセンスファイルを含んでいるべきです。"
"多くの司法管轄区域(訳註、大雑把にいうと「多くの国」)では、明示的なライセンス"
"条項がないと、著作権保持者でなければ誰も適法にパッケージを使用したり配布した"
"りすることができません。どのライセンスを選択すればよいか分からない場合には、"
"`GitHubの「オープンソースライセンスを選ぶには」 <https://choosealicense.com/"
">`_ などのリソースを見ることも、弁護士に相談することもできます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:133
msgid ""
"For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/"
"blob/main/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/"
"pypa/sampleproject>`_."
msgstr ""
"`PyPAサンプルプロジェクト <https://github.com/pypa/sampleproject>`_ の "
"`LICENSE.txt <https://github.com/pypa/sampleproject/blob/master/LICENSE."
"txt>`_ に例がでています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:138
msgid "<your package>"
msgstr "<あなたのパッケージ>"

#: ../source/guides/distributing-packages-using-setuptools.rst:140
msgid ""
"Although it's not required, the most common practice is to include your "
"Python modules and packages under a single top-level package that has the "
"same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""
"必ずそうしなければならないというわけではありませんが、あなたのプロジェクトと"
"同じか非常に近い :ref:`名前 <setup() name>` の単一のプロジェクトをPythonのモ"
"ジュールやパッケージのトップレベルに配置するということが共通の慣習になってい"
"ます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:144
msgid ""
"For an example, see the `sample <https://github.com/pypa/sampleproject/tree/"
"main/src/sample>`_ package that's included in the `PyPA sample project "
"<https://github.com/pypa/sampleproject>`_."
msgstr ""
"`PyPAサンプルプロジェクト <https://github.com/pypa/sampleproject>`_ に含まれ"
"る `サンプル <https://github.com/pypa/sampleproject/blob/main/src/sample>`_ "
"パッケージに例が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:152
msgid "setup() args"
msgstr "setup() の引数"

#: ../source/guides/distributing-packages-using-setuptools.rst:154
msgid ""
"As mentioned above, the primary feature of :file:`setup.py` is that it "
"contains a global ``setup()`` function.  The keyword arguments to this "
"function are how specific details of your project are defined."
msgstr ""
"上述の通り、:file:`setup.py` の第一の機能は、グローバルスコープの "
"``setup()`` 関数を含むことです。この関数に与えるキーワード引数は、あなたのプ"
"ロジェクトの特定の細部がどのように定義されているかを示すものです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:158
msgid ""
"The most relevant arguments are explained below. Most of the snippets given "
"are taken from the `setup.py <https://github.com/pypa/sampleproject/blob/"
"db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ contained in the `PyPA "
"sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
"もっともよく使われる引数についてこの後解説します。ほとんどのソースコード断片"
"(スニペット)は、`PyPA サンプルプロジェクト <https://github.com/pypa/"
"sampleproject>`_ の中の `setup.py <https://github.com/pypa/sampleproject/"
"blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ から取られたもので"
"す。"

#: ../source/guides/distributing-packages-using-setuptools.rst:167
#: ../source/specifications/declaring-project-metadata.rst:35
#: ../source/specifications/declaring-project-metadata.rst:57
#: ../source/specifications/declaring-project-metadata.rst:67
msgid "``name``"
msgstr "``名称``"

#: ../source/guides/distributing-packages-using-setuptools.rst:173
msgid ""
"This is the name of your project, determining how your project is listed on :"
"term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid project "
"names must:"
msgstr ""
"これは、あなたのプロジェクトが :term:`PyPI <Python Package Index (PyPI)>` で"
"どこに並べられるかを決めるプロジェクトの名前です。 :pep:`508` に従えば、正当"
"なプロジェクト名は以下の条件を満たさなければなりません："

#: ../source/guides/distributing-packages-using-setuptools.rst:177
msgid ""
"Consist only of ASCII letters, digits, underscores (``_``), hyphens (``-``), "
"and/or periods (``.``), and"
msgstr ""
"ASCII文字・数字・アンダースコア(``_``)・ハイフン(``-``)・ピリオド(``.``)だけ"
"を含むこと、かつ、"

#: ../source/guides/distributing-packages-using-setuptools.rst:179
msgid "Start & end with an ASCII letter or digit."
msgstr "先頭と最後の文字がASCII文字ないし数字であること。"

#: ../source/guides/distributing-packages-using-setuptools.rst:181
msgid ""
"Comparison of project names is case insensitive and treats arbitrarily-long "
"runs of underscores, hyphens, and/or periods as equal.  For example, if you "
"register a project named ``cool-stuff``, users will be able to download it "
"or declare a dependency on it using any of the following spellings::"
msgstr ""
"プロジェクト名の比較では、大文字小文字を区別せず、また、アンダースコア・ハイ"
"フン・ピリオドは何文字連続していても同じものとして扱います。例えば、あなたが "
"``cool-stuff`` という名前のプロジェクトを登録したなら、利用者がダウンロードし"
"たり依存関係を宣言したりするのに、次に挙げる綴りのどれでも使うことができま"
"す::"

#: ../source/guides/distributing-packages-using-setuptools.rst:193
#: ../source/specifications/declaring-project-metadata.rst:40
#: ../source/specifications/declaring-project-metadata.rst:63
#: ../source/specifications/declaring-project-metadata.rst:84
msgid "``version``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:199
msgid ""
"This is the current version of your project, allowing your users to "
"determine whether or not they have the latest version, and to indicate which "
"specific versions they've tested their own software against."
msgstr ""
"これはあなたのプロジェクトの現在のバージョンで、これがあることであなたのプロ"
"ジェクトのユーザたちが自分が最新版を使っているのかどうかを判断したり、彼ら自"
"身のソフトウェアと組み合わせて試験を行ったバージョンがどれなのかを示したりす"
"ることができるようになります。"

#: ../source/guides/distributing-packages-using-setuptools.rst:203
msgid ""
"Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for "
"each release if you publish your project."
msgstr ""
"バージョンは、あなたが自分のプロジェクトをリリースする度に :term:`PyPI "
"<Python Package Index (PyPI)>` 上に表示されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:206
msgid ""
"See :ref:`Choosing a versioning scheme` for more information on ways to use "
"versions to convey compatibility information to your users."
msgstr ""
"あなたのユーザへ互換性情報を伝える方法としてバージョン番号を使うやり方につい"
"ては、 :ref:`バージョンをつける規則を選択するには <Choosing a versioning "
"scheme>` をご覧ください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:209
msgid ""
"If the project code itself needs run-time access to the version, the "
"simplest way is to keep the version in both :file:`setup.py` and your code. "
"If you'd rather not duplicate the value, there are a few ways to manage "
"this. See the \":ref:`Single sourcing the version`\" Advanced Topics section."
msgstr ""
"プログラムが動作している間に自分自身のバージョンを知る必要があるのであれば、"
"バージョン番号を :file:`setup.py` とあなたのソースコードの両方に格納しておく"
"のがもっとも単純な方法です。値を複数箇所に書きたくないのであれば、やり方が2,3"
"種類あります。「 :ref:`バージョンを一箇所で管理するには <Single sourcing the "
"version>` 」の「高度な話題」の節を見て下さい。"

#: ../source/guides/distributing-packages-using-setuptools.rst:217
#: ../source/specifications/declaring-project-metadata.rst:50
#: ../source/specifications/declaring-project-metadata.rst:100
msgid "``description``"
msgstr "``説明``"

#: ../source/guides/distributing-packages-using-setuptools.rst:225
msgid "Give a short and long description for your project."
msgstr "あなたのプロジェクトについて、短い説明と長い説明を与えて下さい。"

#: ../source/guides/distributing-packages-using-setuptools.rst:227
msgid ""
"These values will be displayed on :term:`PyPI <Python Package Index (PyPI)>` "
"if you publish your project. On ``pypi.org``, the user interface displays "
"``description`` in the grey banner and ``long_description`` in the section "
"named \"Project Description\"."
msgstr ""
"これらの値は、あなたのプロジェクトを公開したときに :term:`PyPI <Python "
"Package Index (PyPI)>` に表示されます。 ``pypi.org`` のユーザインタフェイスで"
"は、灰色のバナーに ``description`` を表示し、「プロジェクトの説明」と名付けら"
"れたセクションに ``long_description`` を表示します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:232
msgid ""
"``description`` is also displayed in lists of projects. For example, it's "
"visible in the search results pages such as https://pypi.org/search/?"
"q=jupyter, the front-page lists of trending projects and new releases, and "
"the list of projects you maintain within your account profile (such as "
"https://pypi.org/user/jaraco/)."
msgstr ""
"``description`` は、プロジェクト一覧にも表示されます。例えば、https://pypi."
"org/search/?q=jupyter のような検索結果のページや、フロントページの流行プロ"
"ジェクトや新規リリースプロジェクトの一覧や、あなたのアカウントのプロファイル"
"ページ(例えば https://pypi.org/user/jaraco/)の中のあなたがメンテナンスしてい"
"るプロジェクトの一覧に表示されるということです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:238
msgid ""
"A `content type <https://packaging.python.org/specifications/core-metadata/"
"#description-content-type-optional>`_ can be specified with the "
"``long_description_content_type`` argument, which can be one of ``text/"
"plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no "
"formatting, `reStructuredText (reST) <https://docutils.sourceforge.io/docs/"
"ref/rst/restructuredtext.html#reference-names>`_, and the Github-flavored "
"Markdown dialect of `Markdown <https://daringfireball.net/projects/markdown/"
">`_ respectively."
msgstr ""
"``long_description_content_type`` 引数に特に整形しない ``text/plain`` 、"
"`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
"restructuredtext.html#reference-names>`_ として解釈される ``text/x-rst`` 、"
"`Markdown <https://daringfireball.net/projects/markdown/>`_ の中でもGithub方"
"言のものとして解釈される ``text/markdown`` のうちのいずれかを与えることで、`"
"コンテンツタイプ <https://packaging.python.org/specifications/core-metadata/"
"#description-content-type-optional>`_ を指定することができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:248
msgid "``url``"
msgstr "``url``"

#: ../source/guides/distributing-packages-using-setuptools.rst:255
msgid "Give a homepage URL for your project."
msgstr "あなたのプロジェクトのホームページのURLを与えてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:259
msgid "``author``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:266
msgid "Provide details about the author."
msgstr "著者について詳しい情報を提供してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:270
#: ../source/specifications/declaring-project-metadata.rst:55
#: ../source/specifications/declaring-project-metadata.rst:174
msgid "``license``"
msgstr "``ライセンス``"

#: ../source/guides/distributing-packages-using-setuptools.rst:276
msgid ""
"The ``license`` argument doesn't have to indicate the license under which "
"your package is being released, although you may optionally do so if you "
"want.  If you're using a standard, well-known license, then your main "
"indication can and should be via the ``classifiers`` argument. Classifiers "
"exist for all major open-source licenses."
msgstr ""
"``license`` 引数には、あなたのパッケージがどのライセンスの下で公開されたかを"
"示すこともできますが、これは必須ではなくオプションです。あなたが一般的でよく"
"知られたライセンスを採用するのであれば、 ``分類詞 <classifiers>`` を指定する"
"だけで済ませることができると同時に済ませるべきです。メジャーなオープンソース"
"ライセンスであればどれでも、それを指し示す分類詞が用意されています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:282
msgid ""
"The ``license`` argument is more typically used to indicate differences from "
"well-known licenses, or to include your own, unique license. As a general "
"rule, it's a good idea to use a standard, well-known license, both to avoid "
"confusion and because some organizations avoid software whose license is "
"unapproved."
msgstr ""
"``license`` 引数は、よく知られたライセンスとの違いを示すために使われたり、あ"
"なた自身の独自のライセンスを取り込むために使われたりすることの方がより典型的"
"です。混乱を避けるために、また、組織によってはそのライセンスが認可されていな"
"いためにソフトウェアの使用を避けることがあるので、一般論としては、一般的なよ"
"く知られたライセンスを採用することは良い考えです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:290
#: ../source/specifications/declaring-project-metadata.rst:48
#: ../source/specifications/declaring-project-metadata.rst:264
msgid "``classifiers``"
msgstr "``分類詞 <classifiers>``"

#: ../source/guides/distributing-packages-using-setuptools.rst:319
msgid ""
"Provide a list of classifiers that categorize your project. For a full "
"listing, see https://pypi.org/classifiers/."
msgstr ""
"あなたのプロジェクトを特徴付ける分類詞(classifier)を設定してください。"
"https://pypi.org/classifiers に全部の一覧が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:322
msgid ""
"Although the list of classifiers is often used to declare what Python "
"versions a project supports, this information is only used for searching & "
"browsing projects on PyPI, not for installing projects.  To actually "
"restrict what Python versions a project can be installed on, use the :ref:"
"`python_requires` argument."
msgstr ""
"そのプロジェクトがどのPythonバージョンをサポートしているのかを分類詞リスト"
"(classifiers)で告知することが往々にしてあるのですが、この欄はPyPIでプロジェク"
"トを検索・閲覧する時に使われるためにだけ用意されているのであって、プロジェク"
"トをインストールする時のためのものではありません。本当にPythonのバージョンに"
"制約を付けたい場合には、 :ref:`python_requires`引数を使ってください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:328
msgid ""
"To prevent a package from being uploaded to PyPI, use the special "
"``'Private :: Do Not Upload'`` classifier. PyPI will always reject packages "
"with classifiers beginning with ``\"Private ::'``."
msgstr ""
"パッケージが (誤って) PyPI にアップロードされるのを防ぐには、 ``'Private :: "
"Do Not Upload'`` 分類子を使いましょう。``\"Private ::'`` で始まる分類子を付け"
"られたパッケージを PyPI は常に拒否します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:334
#: ../source/specifications/declaring-project-metadata.rst:54
#: ../source/specifications/declaring-project-metadata.rst:250
msgid "``keywords``"
msgstr "``keywords``"

#: ../source/guides/distributing-packages-using-setuptools.rst:340
msgid "List keywords that describe your project."
msgstr "あなたのプロジェクトを説明するキーワードを列挙してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:344
msgid "``project_urls``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:356
msgid ""
"List additional relevant URLs about your project. This is the place to link "
"to bug trackers, source repositories, or where to support package "
"development. The string of the key is the exact text that will be displayed "
"on PyPI."
msgstr ""
"あなたのプロジェクトに関係する追加的なURLを列挙してください。これは、バグ追跡"
"システムやソースコードリポジトリ、あるいは、パッケージ開発をサポートする場所"
"などをリンクするための場所です。キー文字列をそのままテキストとしてPyPI上に表"
"示されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:362
msgid "``packages``"
msgstr "``packages``"

#: ../source/guides/distributing-packages-using-setuptools.rst:368
msgid ""
"Set ``packages`` to a list of all :term:`packages <Import Package>` in your "
"project, including their subpackages, sub-subpackages, etc.  Although the "
"packages can be listed manually, ``setuptools.find_packages()`` finds them "
"automatically.  Use the ``include`` keyword argument to find only the given "
"packages.  Use the ``exclude`` keyword argument to omit packages that are "
"not intended to be released and installed."
msgstr ""
"``packages`` には、あなたのプロジェクトにある :term:`パッケージ <Import "
"Package>` を子パッケージや孫パッケージなども含めてすべて列挙してください。"
"パッケージは手動で列挙することもできますが、 ``setuptools.find_packages()`` "
"を使えば自動で列挙することができます。 ``include`` キーワード引数を使うと、こ"
"こに与えられた特定のパッケージだけを探索することができます。 ``exclude`` キー"
"ワード引数を使うと、公開したりインストールしたりする意図のないパッケージを除"
"外することができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:377
msgid "``py_modules``"
msgstr "``py_modules``"

#: ../source/guides/distributing-packages-using-setuptools.rst:383
msgid ""
"If your project contains any single-file Python modules that aren't part of "
"a package, set ``py_modules`` to a list of the names of the modules (minus "
"the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""
"あなたのプロジェクトに、プロジェクトの一部ではない単一ファイルのPythonモ"
"ジュールがあるなら、 :ref:`setuptools` に知らせるために、そのようなモジュール"
"の(拡張子``.py``を削除した)名前を ``py_modules`` に列挙してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:389
msgid "``install_requires``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:395
msgid ""
"\"install_requires\" should be used to specify what dependencies a project "
"minimally needs to run. When the project is installed by :ref:`pip`, this is "
"the specification that is used to install its dependencies."
msgstr ""
"``install_requires`` は、プロジェクトが動作するために最低限必要な依存関係を指"
"定するのに使われます。プロジェクトが :ref:`pip` でインストールされる場合に"
"は、この指定を見て依存関係(訳註、にある他パッケージ)をインストールするために"
"用いられます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:399
msgid ""
"For more on using \"install_requires\" see :ref:`install_requires vs "
"Requirements files`."
msgstr ""
"さらなる ``install_requires`` の使い方については :ref:`install_requires対"
"Requirementsファイル <install_requires vs Requirements files>` を参照してくだ"
"さい。"

#: ../source/guides/distributing-packages-using-setuptools.rst:405
msgid "``python_requires``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:407
msgid ""
"If your project only runs on certain Python versions, setting the "
"``python_requires`` argument to the appropriate :pep:`440` version specifier "
"string will prevent :ref:`pip` from installing the project on other Python "
"versions.  For example, if your package is for Python 3+ only, write::"
msgstr ""
"あなたのプロジェクトが特定のバージョンのPythonでないと動作しないのであれば、"
"適切な :pep:`440` バージョン特定文字列で ``python_requires`` 引数を設定してお"
"くことで :ref:`pip` が他のバージョンの `Python` なのに当該プロジェクトをイン"
"ストールしてしまうことがなくなります。例えば、あなたのパッケージが Python 3+ "
"向けのものであれば、このように書いてください："

#: ../source/guides/distributing-packages-using-setuptools.rst:414
msgid ""
"If your package is for Python 2.6, 2.7, and all versions of Python 3 "
"starting with 3.3, write::"
msgstr "Python 2.6と2.7、そして3.3以上のPython 3用であればこのように書きます::"

#: ../source/guides/distributing-packages-using-setuptools.rst:419
msgid "And so on."
msgstr "等々。"

#: ../source/guides/distributing-packages-using-setuptools.rst:423
msgid ""
"Support for this feature is relatively recent.  Your project's source "
"distributions and wheels (see :ref:`Packaging Your Project`) must be built "
"using at least version 24.2.0 of :ref:`setuptools` in order for the "
"``python_requires`` argument to be recognized and the appropriate metadata "
"generated."
msgstr ""
"この機能がサポートされたのは比較的最近のことです。 ``python_requires`` 引数が"
"認識されて適切なメタデータが生成されるためには、あなたのプロジェクトのソース"
"コード配布物やwheels (:ref:`あなたのプロジェクトをパッケージする <Packaging "
"Your Project>` 参照)を24.2.0かそれ以降のバージョンの :ref:`setuptools` でビル"
"ドしなければなりません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:429
msgid ""
"In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the "
"``python_requires`` metadata.  Users with earlier versions of pip will be "
"able to download & install projects on any Python version regardless of the "
"projects' ``python_requires`` values."
msgstr ""
"さらに、 :ref:`pip` のバージョン9.0.0かそれ以降のものでなければ "
"``python_requires`` のメタデータを認識しません。これより前のバージョンのpipを"
"使っている場合は、 ``python_requires`` の設定に関わりなくどんなバージョンの"
"Pythonを使っていてもダウンロードやインストールが可能です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:438
msgid "``package_data``"
msgstr "``package_data``"

#: ../source/guides/distributing-packages-using-setuptools.rst:447
msgid ""
"Often, additional files need to be installed into a :term:`package <Import "
"Package>`. These files are often data that’s closely related to the "
"package’s implementation, or text files containing documentation that might "
"be of interest to programmers using the package. These files are called "
"\"package data\"."
msgstr ""
"追加のファイルを :term:`パッケージ <Import Package>` にインストールする必要が"
"ある、というのはよくあることです。このようなファイルは、しばしば、そのパッ"
"ケージの実装に深く関係していたり、パッケージを利用するプログラマの利益になる"
"ような説明を含んだテキストファイルであったりします。このようなファイルは"
"「パッケージデータ」と呼ばれます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:452
msgid ""
"The value must be a mapping from package name to a list of relative path "
"names that should be copied into the package. The paths are interpreted as "
"relative to the directory containing the package."
msgstr ""
"この引数に渡す値は、パッケージ名から、そのパッケージ内にコピーされるべきファ"
"イルの相対パス名を列挙したもののマッピングになっていなければなりません。パス"
"名はパッケージを含むディレクトリからの相対パスとして解釈されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:456
msgid ""
"For more information, see :std:doc:`Including Data Files <setuptools:"
"userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""
"詳しくは、 :std:doc:`setuptools説明文書 <setuptools:index>` の中の :std:doc:`"
"データファイルを追加するには <1setuptools:userguide/datafiles>` を見てくださ"
"い。"

#: ../source/guides/distributing-packages-using-setuptools.rst:464
msgid "``data_files``"
msgstr "``data_files``"

#: ../source/guides/distributing-packages-using-setuptools.rst:470
msgid ""
"Although configuring :ref:`Package Data` is sufficient for most needs, in "
"some cases you may need to place data files *outside* of your :term:"
"`packages <Import Package>`.  The ``data_files`` directive allows you to do "
"that. It is mostly useful if you need to install files which are used by "
"other programs, which may be unaware of Python packages."
msgstr ""
":ref:`パッケージデータ <Package Data>` を設定すればほとんどの需要に応えられま"
"すが、あなたの :term:`パッケージ <Import Package>` の *外側* にデータファイル"
"を置きたいこともあるでしょう。 ``data_files`` ディレクティブでそれができま"
"す。大抵は、Pythonのパッケージを認識しないような他のプログラムから利用する"
"ファイルをインストールする必要がある時に、これが役に立つでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:476
msgid ""
"Each ``(directory, files)`` pair in the sequence specifies the installation "
"directory and the files to install there. The ``directory`` must be a "
"relative path (although this may change in the future, see `wheel Issue #92 "
"<https://github.com/pypa/wheel/issues/92>`_), and it is interpreted relative "
"to the installation prefix (Python’s ``sys.prefix`` for a default "
"installation; ``site.USER_BASE`` for a user installation). Each file name in "
"``files`` is interpreted relative to the :file:`setup.py` script at the top "
"of the project source distribution."
msgstr ""
"設定値の中の ``(ディレクトリ, ファイル)`` の組は、それぞれインストール先の"
"ディレクトリとそこにインストールされるべきファイル(群)を指定しています。 ``"
"ディレクトリ <directory>`` は相対パスでなければならず (これは将来変更されるか"
"もしれません。 `wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_ "
"を見てください)、インストール先プレフィクス(デフォルトではPythonの ``sys."
"prefix``、ないし、ユーザインストールでは ``site.USER_BASE`` )に対する相対パス"
"として解釈されます。 ``files`` 内のファイル名は、プロジェクトのソースコード配"
"布物の最上位にある :file:`setup.py` スクリプトに対する相対パスとして解釈され"
"ます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:486
msgid ""
"For more information see the distutils section on :ref:`Installing "
"Additional Files <python:distutils-additional-files>`."
msgstr ""
"さらに詳しくは、 :ref:`追加的なファイルをインストールするには <python:"
"distutils-additional-files>` の中のdistutilsの節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:491
msgid ""
"When installing packages as egg, ``data_files`` is not supported. So, if "
"your project uses :ref:`setuptools`, you must use ``pip`` to install it. "
"Alternatively, if you must use ``python setup.py``, then you need to pass "
"the ``--old-and-unmanageable`` option."
msgstr ""
"パッケージをeggとしてインストールする時には、 ``data_files`` はサポートされて"
"いません。だから、もしあなたのプロジェクトで :ref:`setuptools` を使っているな"
"らば ``pip`` でインストールしなければなりません。あるいは、 ``--old-and-"
"unmanageable`` オプション付きの ``python setup.py`` を使わなければなりませ"
"ん。"

#: ../source/guides/distributing-packages-using-setuptools.rst:498
#: ../source/specifications/declaring-project-metadata.rst:61
msgid "``scripts``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:500
msgid ""
"Although ``setup()`` supports a :ref:`scripts <python:distutils-installing-"
"scripts>` keyword for pointing to pre-made scripts to install, the "
"recommended approach to achieve cross-platform compatibility is to use :ref:"
"`console_scripts` entry points (see below)."
msgstr ""
"``setup()`` はあらかじめ作成されたスクリプトをインストールするために :ref:"
"`scripts <python:distutils-installing-scripts>` キーワードをサポートしていま"
"すが、異機種間の互換性を取るためのアプローチとして推奨されるのは :ref:"
"`console_scripts` エントリーポイント(後述)を使うことです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:507
msgid "``entry_points``"
msgstr "``entry_points``"

#: ../source/guides/distributing-packages-using-setuptools.rst:516
msgid ""
"Use this keyword to specify any plugins that your project provides for any "
"named entry points that may be defined by your project or others that you "
"depend on."
msgstr ""
"あなたのプロジェクト内か依存先のプロジェクトで定義された名前付きのエントリー"
"ポイントをあなたのプロジェクトが提供しているようなプラグインがあればこのキー"
"ワード引数を使って指定してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:519
msgid ""
"For more information, see the section on :ref:`Advertising Behavior "
"<setuptools:dynamic discovery of services and plugins>` from the :ref:"
"`setuptools` docs."
msgstr ""
"詳しくは、:ref:`setup tools` 文書の :ref:`広報する動作 <setuptools:dynamic "
"discovery of services and plugins>` の節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:523
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""
"よくあるエントリーポイントとしては、\"console_scipts\" (後述)が挙げられます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:528
msgid "``console_scripts``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:538
msgid ""
"Use ``console_script`` :ref:`entry points <setuptools:dynamic discovery of "
"services and plugins>` to register your script interfaces. You can then let "
"the toolchain handle the work of turning these interfaces into actual "
"scripts [2]_.  The scripts will be generated during the install of your :"
"term:`distribution <Distribution Package>`."
msgstr ""
"``console_script`` :ref:`エントリーポイント <setuptools:dynamic discovery of "
"services and plugins>` は、スクリプトインターフェイスを登録するために使ってく"
"ださい。そうすれば、ツールチェーンがそのようなインターフェイスを実際のスクリ"
"プトに変換する作業を肩代わりしてくれます[2]_ 。あなたの :term:`配布物 "
"<Distribution Package>` をインストールする途中でスクリプトが生成されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:545
msgid ""
"For more information, see :doc:`Entry Points <setuptools:userguide/"
"entry_point>` from the :doc:`setuptools docs <setuptools:index>`."
msgstr ""
"詳しくは、 :doc:`setuptools 説明文書 <setuptools:index>` の中の :doc:`エント"
"リポイント <setuptools:userguide/entry_point>` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:551
msgid "Choosing a versioning scheme"
msgstr "バージョン体系を選択する"

#: ../source/guides/distributing-packages-using-setuptools.rst:554
msgid "Standards compliance for interoperability"
msgstr "相互互換性のための標準的な取り決め"

#: ../source/guides/distributing-packages-using-setuptools.rst:556
msgid ""
"Different Python projects may use different versioning schemes based on the "
"needs of that particular project, but all of them are required to comply "
"with the flexible :pep:`public version scheme <440#public-version-"
"identifiers>` specified in :pep:`440` in order to be supported in tools and "
"libraries like ``pip`` and ``setuptools``."
msgstr ""
"相異なるPythonプロジェクトがそれぞれの事情に合わせて異なるバージョン体系を採"
"用することは構いませんが、しかし、いずれにしても、``pip`` や ``setuptools`` "
"のようなツールやライブラリにサポートされるためには、:pep:`440` で指定された :"
"pep:`公式のバージョン体系 <440#public-version-identifiers>` の自由度の高い規"
"定に合致していなければなりません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:562
msgid "Here are some examples of compliant version numbers::"
msgstr "規定に合致したバージョン番号の例を次に示す::"

#: ../source/guides/distributing-packages-using-setuptools.rst:573
msgid ""
"To further accommodate historical variations in approaches to version "
"numbering, :pep:`440` also defines a comprehensive technique for :pep:"
"`version normalisation <440#normalization>` that maps variant spellings of "
"different version numbers to a standardised canonical form."
msgstr ""
"過去の様々なバージョン番号付与方法を規定内に包含するために、 :pep:`440` は"
"様々なバージョン番号の変種的書き方を網羅する :pep:`バージョンの正規化 "
"<440#normalization>` のテクニックも定義しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:579
msgid "Scheme choices"
msgstr "方法論の選択"

#: ../source/guides/distributing-packages-using-setuptools.rst:582
msgid "Semantic versioning (preferred)"
msgstr "意味を伴ったバージョン付与 (推奨)"

#: ../source/guides/distributing-packages-using-setuptools.rst:584
msgid ""
"For new projects, the recommended versioning scheme is based on `Semantic "
"Versioning <https://semver.org/>`_, but adopts a different approach to "
"handling pre-releases and build metadata."
msgstr ""
"新しいプロジェクトには、 `意味あるバージョン付与方法 <https://semver.org/>` "
"に従うことが推奨されていますが、リリース前やビルド時のメタデータとしては異な"
"るやり方を採用しても良いでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:588
msgid ""
"The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE "
"numbering scheme, where the project author increments:"
msgstr ""
"意味あるバージョン付与方法の真髄は、MAJOR.MINOR.MAINTENANCE の３段階のバー"
"ジョン付与方法で、プロジェクトの作者は以下のように各段階の数字を増やします:"

#: ../source/guides/distributing-packages-using-setuptools.rst:591
msgid "MAJOR version when they make incompatible API changes,"
msgstr "APIの変更で互換性を失う時には MAJOR 番号、"

#: ../source/guides/distributing-packages-using-setuptools.rst:592
msgid ""
"MINOR version when they add functionality in a backwards-compatible manner, "
"and"
msgstr "後方互換性を保ったままで新機能を追加する場合には MINOR を、そして"

#: ../source/guides/distributing-packages-using-setuptools.rst:593
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""
"後方互換性を維持したままのバグ修正の場合には MAINTENANCE を増加させます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:595
msgid ""
"Adopting this approach as a project author allows users to make use of :pep:`"
"\"compatible release\" <440#compatible-release>` specifiers, where ``name ~= "
"X.Y`` requires at least release X.Y, but also allows any later release with "
"a matching MAJOR version."
msgstr ""
"プロジェクトの作者としてこのやり方を採用すれば、ユーザが :pep:`互換性のあるリ"
"リース <440#compatible-release>` の指定、つまり、``name ~= X.Y`` と指定してあ"
"るなら少なくともリリース X.Y が必要だが同じMAJORバージョンを持つならその後の"
"リリースでも構わないという書き方を利用することができるようになります。"

#: ../source/guides/distributing-packages-using-setuptools.rst:600
msgid ""
"Python projects adopting semantic versioning should abide by clauses 1-8 of "
"the `Semantic Versioning 2.0.0 specification <https://semver.org/>`_."
msgstr ""
"セマンティックバージョニングを採用しているPythonプロジェクトでは、 `セマン"
"ティックバージョニング 2.0.0 仕様書 <https://semver.org/>`_ の第１節から第８"
"節までに従うべきです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:604
msgid "Date based versioning"
msgstr "日付ベースのバージョン付与"

#: ../source/guides/distributing-packages-using-setuptools.rst:606
msgid ""
"Semantic versioning is not a suitable choice for all projects, such as those "
"with a regular time based release cadence and a deprecation process that "
"provides warnings for a number of releases prior to removal of a feature."
msgstr ""
"セマンティックバージョニングはすべてのプロジェクト向きと言うわけではなく、例"
"えば定期的なリリースサイクルに従う場合や、ある機能を削除する前に何世代にもわ"
"たるリリースで非推奨(deprecation)の警告を出すような場合には適していないかもし"
"れません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:610
msgid ""
"A key advantage of date based versioning is that it is straightforward to "
"tell how old the base feature set of a particular release is given just the "
"version number."
msgstr ""
"日付ベースのバージョン付与の最大の利点は、バージョン番号を見ただけで基盤に"
"なっている機能セットがどれほど古いのかが直截にわかることです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:613
msgid ""
"Version numbers for date based projects typically take the form of YEAR."
"MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""
"日付ベースのバージョン番号は、YEAR.MONTHの形(例えば ``12.04``や``15.10``)をと"
"るのが普通です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:617
msgid "Serial versioning"
msgstr "一連番号によるバージョン付与"

#: ../source/guides/distributing-packages-using-setuptools.rst:619
msgid ""
"This is the simplest possible versioning scheme, and consists of a single "
"number which is incremented every release."
msgstr ""
"これは最も単純なバージョン付与方法で、リリースのたびに増加する単一の番号で構"
"成します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:622
msgid ""
"While serial versioning is very easy to manage as a developer, it is the "
"hardest to track as an end user, as serial version numbers convey little or "
"no information regarding API backwards compatibility."
msgstr ""
"一連番号によるバージョン付与は開発者にとってはとても管理しやすい反面、一連番"
"号によるバージョン番号を見てもAPIの後方互換性に関する情報がほとんど又は全くわ"
"からないので、ユーザにとっては追跡するのが最も困難です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:627
msgid "Hybrid schemes"
msgstr "混成型の方法"

#: ../source/guides/distributing-packages-using-setuptools.rst:629
msgid ""
"Combinations of the above schemes are possible. For example, a project may "
"combine date based versioning with serial versioning to create a YEAR.SERIAL "
"numbering scheme that readily conveys the approximate age of a release, but "
"doesn't otherwise commit to a particular release cadence within the year."
msgstr ""
"上に述べた方式を組み合わせて用いることもできます。例えば、日付ベースのバー"
"ジョン付与と一連番号によるバージョン付与を組み合わせて YEAR.SERIAL型のバー"
"ジョン番号付与方式を作り出して、バージョン番号がリリース年を示すけれどもその"
"年の中のどのリリースサイクルかを特定することについてはあまり気にしていないと"
"いうプロジェクトもあるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:635
msgid "Pre-release versioning"
msgstr "リリース前のバージョン付与方式"

#: ../source/guides/distributing-packages-using-setuptools.rst:637
msgid ""
"Regardless of the base versioning scheme, pre-releases for a given final "
"release may be published as:"
msgstr ""
"どのバージョン付与方式を採用するとしても、ある特定の最終的なリリースの前のリ"
"リースが次のような形で公開されることもあるでしょう:"

#: ../source/guides/distributing-packages-using-setuptools.rst:640
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr "零またはそれ以上の dev リリース (\".devN\"という拡張子をつけて表示)"

#: ../source/guides/distributing-packages-using-setuptools.rst:641
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr "零またはそれ以上のalphaリリース (\".aN\"という拡張子をつけて表示)"

#: ../source/guides/distributing-packages-using-setuptools.rst:642
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr "零またはそれ以上のbetaリリース (\".bN\"という拡張子をつけて表示)"

#: ../source/guides/distributing-packages-using-setuptools.rst:643
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr "零またはそれ以上のリリース候補 (\".rcN\"という拡張子をつけて表示)"

#: ../source/guides/distributing-packages-using-setuptools.rst:645
msgid ""
"``pip`` and other modern Python package installers ignore pre-releases by "
"default when deciding which versions of dependencies to install."
msgstr ""
"``pip``や最近のPythonパッケージインストーラでは、依存関係にあるパッケージをイ"
"ンストールする際にリリース前のものを無視して含めないのが規定の動作です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:650
msgid "Local version identifiers"
msgstr "ローカルのバージョン指定子"

#: ../source/guides/distributing-packages-using-setuptools.rst:652
msgid ""
"Public version identifiers are designed to support distribution via :term:"
"`PyPI <Python Package Index (PyPI)>`. Python's software distribution tools "
"also support the notion of a :pep:`local version identifier <440#local-"
"version-identifiers>`, which can be used to identify local development "
"builds not intended for publication, or modified variants of a release "
"maintained by a redistributor."
msgstr ""
"公的バージョン識別子は、 :term:`PyPI <Python Package Index (PyPI)>` を通じた"
"配布をサポートするように設計されています。Pythonのソフトウェア配布ツール群"
"は、ローカルでの開発でビルドごとの識別子や再配布者が維持管理している変種のリ"
"リースの識別子として用いるような :pep:`局所的バージョン識別子 <440#local-"
"version-identifiers>` の考え方もサポートします。"

#: ../source/guides/distributing-packages-using-setuptools.rst:659
msgid ""
"A local version identifier takes the form ``<public version identifier>"
"+<local version label>``. For example::"
msgstr ""
"ローカルバージョン識別子は、 ``<公的バージョン識別子>+<ローカルバージョンラベ"
"ル>`` の形を取ります。例えば::"

#: ../source/guides/distributing-packages-using-setuptools.rst:667
msgid "Working in \"development mode\""
msgstr "開発モードで作業する"

#: ../source/guides/distributing-packages-using-setuptools.rst:669
msgid ""
"You can install a project in \"editable\" or \"develop\" mode while you're "
"working on it. When installed as editable, a project can be edited in-place "
"without reinstallation: changes to Python source files in projects installed "
"as editable will be reflected the next time an interpreter process is "
"started."
msgstr ""
"あなたがまだ作業している途中なら、プロジェクトを「編集可能」または「開発」"
"モードでインストールすることができます。編集可能な状態でインストールされる"
"と、再インストールしなくてもプロジェクトをその場で編集することができます: 編"
"集可能状態でインストールされたプロジェクトのPythonソースコードに変更を加える"
"と、次にインタープリターのプロセスが開始された時に反映されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:675
msgid ""
"To install a Python package in \"editable\"/\"development\" mode Change "
"directory to the root of the project directory and run:"
msgstr ""
"Pythonのパッケージを「編集可能」/「開発」モードでインストールするには、そのプ"
"ロジェクトのルートディレクトリへ移動して、次のコマンドを走らせてください:"

#: ../source/guides/distributing-packages-using-setuptools.rst:683
msgid ""
"The pip command-line flag ``-e`` is short for ``--editable``, and ``.`` "
"refers to the current working directory, so together, it means to install "
"the current directory (i.e. your project) in editable mode.  This will also "
"install any dependencies declared with ``install_requires`` and any scripts "
"declared with ``console_scripts``.  Dependencies will be installed in the "
"usual, non-editable mode."
msgstr ""
"pip のコマンドラインオプションの ``-e`` は ``--editable`` の省略形で、 ``.`` "
"は現在作業をしているディレクトリのことですので、まとめると「現在のディレクト"
"リ(つまりあなたのプロジェクト)に編集可能モードでインストールせよ」ということ"
"になります。また、このコマンドによって ``install_requires`` に宣言された依存"
"先のパッケージや ``console_scripts`` に書かれたスクリプトもインストールされま"
"す。"

#: ../source/guides/distributing-packages-using-setuptools.rst:690
msgid ""
"You may want to install some of your dependencies in editable mode as well. "
"For example, supposing your project requires \"foo\" and \"bar\", but you "
"want \"bar\" installed from VCS in editable mode, then you could construct a "
"requirements file like so::"
msgstr ""
"依存先のプロジェクトも同様に編集可能モードでインストールしたい時があるかもし"
"れません。例えば、あなたのプロジェクトが \"foo\" と \"bar\" というパッケージ"
"を要求していて、 \"bar\" についてはVCS (バージョンコントロールシステム) から"
"編集可能モードでインストールしたい場合には、requirements ファイルを次のように"
"構成すれば良いでしょう::"

#: ../source/guides/distributing-packages-using-setuptools.rst:698
msgid ""
"The first line says to install your project and any dependencies. The second "
"line overrides the \"bar\" dependency, such that it's fulfilled from VCS, "
"not PyPI."
msgstr ""
"最初の行ではあなたのプロジェクトとその依存先をインストールするように指示して"
"います。２行目で、 \"bar\" についてPyPIではなくVCSから充当するようにと依存関"
"係を上書きしています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:702
msgid ""
"If, however, you want \"bar\" installed from a local directory in editable "
"mode, the requirements file should look like this, with the local paths at "
"the top of the file::"
msgstr ""
"そうではなくて、 \"bar\" をローカルディレクトリから編集可能モードでインストー"
"ルしたい場合には、 requirements ファイルの先頭にローカルのディレクトリパスを"
"置いて次のようになるでしょう::"

#: ../source/guides/distributing-packages-using-setuptools.rst:707
msgid ""
"Otherwise, the dependency will be fulfilled from PyPI, due to the "
"installation order of the requirements file.  For more on requirements "
"files, see the :ref:`Requirements File <pip:Requirements Files>` section in "
"the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS "
"Support>` section of the pip docs."
msgstr ""
"さもなければ requirements ファイルに書かれた順にインストールされてしまうの"
"で、依存先のパッケージが PyPI から充当されてしまいます。 requirements ファイ"
"ルについてさらに詳しく知りたい場合は、 pipの解説文書の :ref:`Requirements "
"ファイル <pip:Requirements Files>` の節を見てください。VCSからのインストール"
"については、同書の :ref:`VCSサポート <pip:VCS Support>` の節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:711
msgid ""
"Lastly, if you don't want to install any dependencies at all, you can run:"
msgstr ""
"最後に、もし依存先パッケージは何もインストールしたくないのであれば、このよう"
"にします:"

#: ../source/guides/distributing-packages-using-setuptools.rst:718
msgid ""
"For more information, see the :doc:`Development Mode <setuptools:userguide/"
"development_mode>` section of the :doc:`setuptools docs <setuptools>`."
msgstr ""
"さらに詳しいことを知りたい場合は、 :doc:`setuptools解説文書 <setuptools>` "
"の :doc:`開発モード <setuptools:userguide/development_mode>` の節を見てくださ"
"い。"

#: ../source/guides/distributing-packages-using-setuptools.rst:725
msgid "Packaging your project"
msgstr "プロジェクトをパッケージングする"

#: ../source/guides/distributing-packages-using-setuptools.rst:727
msgid ""
"To have your project installable from a :term:`Package Index` like :term:"
"`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:"
"`Distribution <Distribution Package>` (aka \":term:`Package <Distribution "
"Package>`\") for your project."
msgstr ""
"あなたのプロジェクトを :term:`PyPI <Python Package Index (PyPI)>` のような :"
"term:`パッケージインデックス <Package Index>` からインストールできるようにす"
"るには、 :term:`配布物 <Distribution Package>` (:term:`パッケージ "
"<Distribution Package>`の名前でも知られる) を作成しなければならないでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:732
msgid ""
"Before you can build wheels and sdists for your project, you'll need to "
"install the ``build`` package:"
msgstr ""
"あなたのプロジェクトでwheelsやsdistsをビルドする前に、 ``build`` パッケージを"
"インストールする必要があります。"

#: ../source/guides/distributing-packages-using-setuptools.rst:749
msgid "Source distributions"
msgstr "ソースコード配布物"

#: ../source/guides/distributing-packages-using-setuptools.rst:751
msgid ""
"Minimally, you should create a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>`:"
msgstr ""
"少なくとも、 :term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` "
"を作成するべきです:"

#: ../source/guides/distributing-packages-using-setuptools.rst:767
msgid ""
"A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built "
"Distribution`), and requires a build step when installed by pip.  Even if "
"the distribution is pure Python (i.e. contains no extensions), it still "
"involves a build step to build out the installation metadata from :file:"
"`setup.py` and/or :file:`setup.cfg`."
msgstr ""
"ソースコード配布物はビルドされていない (すなわち、 :term:`ビルド済み配布物 "
"<Built Distribution>` ではない) ので、pip でインストールする際にビルドする段"
"階が必要になります。配布物が純Python (つまり (訳注、多言語で書かれた) 拡張を"
"含まない) であったとしても、 :file:`setup.py` や :file:`setup.cfg` からインス"
"トール用メタデータを取り出してビルドする段階を必要とするのです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:775
msgid "Wheels"
msgstr "Wheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:777
msgid ""
"You should also create a wheel for your project. A wheel is a :term:`built "
"package <Built Distribution>` that can be installed without needing to go "
"through the \"build\" process. Installing wheels is substantially faster for "
"the end user than installing from a source distribution."
msgstr ""
"あなたのプロジェクトでは、wheelも作成するべきです。wheel は、インストールする"
"のにビルド処理を行う必要がない :term:`ビルド済み配布物 <Built Distribution>` "
"です。wheelを使えば、ソースコード配布物からのインストールに比べてエンドユーザ"
"にとって相当素早くインストールすることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:782
msgid ""
"If your project is pure Python then you'll be creating a :ref:`\"Pure Python "
"Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""
"あなたのプロジェクトが純Pythonなら、きっとあなたは:ref:`\"純PythonのWheel"
"\" (後述) <Pure Python Wheels>`を作成することになるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:785
msgid ""
"If your project contains compiled extensions, then you'll be creating what's "
"called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""
"もしあなたのプロジェクトにコンパイル済の拡張が含まれているなら、 :ref:`*プ"
"ラットフォーム Wheel* (後述) <Platform Wheels>` を作成することになるでしょ"
"う。"

#: ../source/guides/distributing-packages-using-setuptools.rst:788
msgid ""
"If your project also supports Python 2 *and* contains no C extensions, then "
"you should create what's called a *Universal Wheel* by adding the following "
"to your :file:`setup.cfg` file:"
msgstr ""
"あなたのプロジェクトが Python 2をさぽーとしていて、かつ、C言語拡張を含むので"
"あれば、次のものをあなたの :file:`setup.cfg` ファイルに追加して *ユニバーサ"
"ル Wheel* と呼ばれるものを作成するべきです:"

#: ../source/guides/distributing-packages-using-setuptools.rst:797
msgid ""
"Only use this setting if your project does not have any C extensions *and* "
"supports Python 2 and 3."
msgstr ""
"あなたのプロジェクトにC言語拡張がなく、かつ、Python 2 および3をサポートしてい"
"る場合に限って、この設定を使ってください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:804
msgid "Pure Python Wheels"
msgstr "純Python Wheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:806
msgid ""
"*Pure Python Wheels* contain no compiled extensions, and therefore only "
"require a single Python wheel."
msgstr ""
"*純Python Wheels* は、コンパイル済拡張を含んでおらず、従って単独のPython "
"wheelを要求するだけです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:809
#: ../source/guides/distributing-packages-using-setuptools.rst:838
msgid "To build the wheel:"
msgstr "wheelをビルドするには:"

#: ../source/guides/distributing-packages-using-setuptools.rst:823
msgid ""
"The ``wheel`` package will detect that the code is pure Python, and build a "
"wheel that's named such that it's usable on any Python 3 installation.  For "
"details on the naming of wheel files, see :pep:`425`."
msgstr ""
"``wheel`` パッケージは、ソースコードが純Pythonであることを検出して、Python 3 "
"へのインストールであればどこでも使えるのでそのように名付けられたwheelをビルド"
"します。wheelファイルの名称について詳しいことは :pep:`425` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:827
msgid ""
"If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both "
"files for you; this is useful when you don't need multiple wheels."
msgstr ""
"``--wheel`` か ``--sdist`` を付けずに ``build`` を実行すると、両方のファイル"
"が作成されます; 複数のwheelファイルにしたくないときにはこれが便利です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:833
msgid "Platform Wheels"
msgstr "プラットフォームWheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:835
msgid ""
"*Platform Wheels* are wheels that are specific to a certain platform like "
"Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""
"*プラットフォームWheels* は、LinuxやmacOSあるいはWindowsのような特定のプラッ"
"トフォーム向けのwheelで、大抵の場合は(訳注、特定のプラットフォーム向けにコン"
"パイルされた)コンパイル済み拡張を含むためです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:853
msgid ""
"The ``wheel`` package will detect that the code is not pure Python, and "
"build a wheel that's named such that it's only usable on the platform that "
"it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""
"``wheel`` パッケージは、ソースコードが純Pythonで書かれていないと判断すると、"
"ビルドされたプラットフォーム上でのみ利用可能であるように命名されたwheelを作成"
"します。wheelファイルの命名規則については、 :pep:`425` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:859
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of "
"platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. "
"Details of the latter are defined in :pep:`513`."
msgstr ""
"現在、 :term:`PyPI <<Python Package Index (PyPI)>` は、Windows向けとmacOS向"
"け、そして複数のLinuxディストリビューションに対応した ``manylinux*`` のABI向"
"けのプラットフォームWheelsをアップロードすることに対応しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:867
msgid "Uploading your Project to PyPI"
msgstr "プロジェクトをPyPIにアップロードする"

#: ../source/guides/distributing-packages-using-setuptools.rst:869
msgid ""
"When you ran the command to create your distribution, a new directory ``dist/"
"`` was created under your project's root directory. That's where you'll find "
"your distribution file(s) to upload."
msgstr ""
"配布物を作成するコマンドを走らせると、あなたのプロジェクトのルートディレクト"
"リに ``dist/`` という新しいディレクトリが作成されます。ここに配布物のファイル"
"(群)が置かれます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:873
msgid ""
"These files are only created when you run the command to create your "
"distribution. This means that any time you change the source of your project "
"or the configuration in your :file:`setup.py` file, you will need to rebuild "
"these files again before you can distribute the changes to PyPI."
msgstr ""
"これらのファイルは、配布物作成のコマンドを走らせたときにだけ作成されます。と"
"いうことは、プロジェクトのソースコードや :file:`setup.py` の中の設定を変更し"
"たときにはいつでも、PyPIへ送る前に配布物のファイルを再作成する必要があるとい"
"うことです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:878
msgid ""
"Before releasing on main PyPI repo, you might prefer training with the `PyPI "
"test site <https://test.pypi.org/>`_ which is cleaned on a semi regular "
"basis. See :ref:`using-test-pypi` on how to setup your configuration in "
"order to use it."
msgstr ""
"PyPIの主リポジトリでリリースをする前に、半定期的に消去される `PyPI 試験サイ"
"ト <https://test.pypi.org/>`_ で練習する方が良いかもしれません。どのように設"
"定すれば試験サイトを使えるかについては、 :ref:`using-test-pypi` を見てくださ"
"い。"

#: ../source/guides/distributing-packages-using-setuptools.rst:883
msgid ""
"In other resources you may encounter references to using ``python setup.py "
"register`` and ``python setup.py upload``. These methods of registering and "
"uploading a package are **strongly discouraged** as it may use a plaintext "
"HTTP or unverified HTTPS connection on some Python versions, allowing your "
"username and password to be intercepted during transmission."
msgstr ""
"他のリソースでは、 ``python setup.py register`` と ``python setup.py "
"upload`` に遭遇するかもしれません。これらのメソッドはパッケージを登録ないし"
"アップロードするものですが、 いくつかのバージョンのPythonで使うと平文のHTTPか"
"検証しないHTTPSを用いるのであなたのユーザ名とパスワードが 通信経路上で横取り"
"される恐れがあって **強く非推奨** の状態になっています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:889
msgid ""
"The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to "
"ensure safety of all users, certain kinds of URLs and directives are "
"forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** "
"trying to upload your distribution, you should check to see if your brief / "
"long descriptions provided in :file:`setup.py` are valid.  You can do this "
"by running :std:doc:`twine check <index>` on your package files:"
msgstr ""
"PyPIで使っている reStructuredText パーサは Sphinx **ではありません！** その"
"上、全ユーザの安全を確保するためにある種の URL やディレクティブ(例えば ``.. "
"raw::`` ディレクティブ)は禁止されていたり削除されたりしています。あなたの配布"
"物をアップロードしてみる **前に** :file:`setup.py` の中の brief/long "
"description が文法的に妥当かどうかを確かめるべきです。あなたのパッケージの"
"ファイル群に対して :std:doc:`twine check <index>` を走らせれば、それを確かめ"
"ることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:902
msgid "Create an account"
msgstr "アカウントを作成する"

#: ../source/guides/distributing-packages-using-setuptools.rst:904
msgid ""
"First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. "
"You can create an account `using the form on the PyPI website <https://pypi."
"org/account/register/>`_."
msgstr ""
"まず、 :term:`PyPI <Python Package Index (PyPI)>` のユーザアカウントが必要で"
"す。 `PyPIウェブサイトにあるフォームを使えば <https://pypi.org/account/"
"register/>`_ アカウントを作成することができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:908
msgid ""
"Now you'll create a PyPI `API token`_ so you will be able to securely upload "
"your project."
msgstr ""
"次に PyPI の `API トークン <API token>`_ を作成して、プロジェクトを安全にアッ"
"プロードできるようにしましょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:911
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_; don't limit its scope to a particular project, since you are "
"creating a new project."
msgstr ""
"https://pypi.org/manage/account/#api-tokens and create へ行って、新しい `API "
"トークン <API token>`_ を作成してください; これから新しいプロジェクトを作成す"
"るわけですから、スコープを特定のプロジェクトに限定しないようにしてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:915
msgid ""
"**Don't close the page until you have copied and saved the token — you won't "
"see that token again.**"
msgstr ""
"**トークンをコピーして保存するまではページを閉じないでください -- トークンは"
"二度と表示されることがありません。**"

#: ../source/guides/distributing-packages-using-setuptools.rst:918
msgid ""
"To avoid having to copy and paste the token every time you upload, you can "
"create a :file:`$HOME/.pypirc` file:"
msgstr ""
":file:`$HOME/.pypirc` ファイルを作っておくことで、アップロードするたびにトー"
"クンをコピー・ペーストする手間を省くことができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:927
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""
"**このファイルにはトークンが平文で保存されていることに注意してください。**"

#: ../source/guides/distributing-packages-using-setuptools.rst:929
#: ../source/guides/migrating-to-pypi-org.rst:74
#: ../source/guides/migrating-to-pypi-org.rst:113
#: ../source/guides/using-testpypi.rst:83
msgid ""
"For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""
":file:`.pypirc` についてさらに詳しく知りたい場合は :ref:`specification "
"<pypirc>` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:935
msgid "Upload your distributions"
msgstr "配布物をアップロードする"

#: ../source/guides/distributing-packages-using-setuptools.rst:937
msgid ""
"Once you have an account you can upload your distributions to :term:`PyPI "
"<Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""
"アカウントが入手できれば、 :ref:`twine` を使ってあなたの配布物を :term:`PyPI "
"<Python Package Index (PyPI)>` へアップロードすることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:940
msgid ""
"The process for uploading a release is the same regardless of whether or not "
"the project already exists on PyPI - if it doesn't exist yet, it will be "
"automatically created when the first release is uploaded."
msgstr ""
"リリースをアップロードする手続きは、そのプロジェクトがPyPIに既に存在していて"
"も存在していなくても同じです - もしまだ存在していなければ、最初にリリースが"
"アップロードされたときに自動的に作成されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:944
msgid ""
"For the second and subsequent releases, PyPI only requires that the version "
"number of the new release differ from any previous releases."
msgstr ""
"２回目やそれ以降のリリースで PyPI が要求するのは、新しいリリースのバージョン"
"番号が先行するすべてのリリースとは異なるものであることだけです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:951
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is "
"the name of your project that you uploaded. It may take a minute or two for "
"your project to appear on the site."
msgstr ""
"``sampleproject`` のところをアップロードしているプロジェクトの名前に置き換え"
"るとして、 ``https://pypi.org/project/<sampleproject>`` に誘導されれば、あな"
"たのパッケージのアップロードは成功です。あなたのプロジェクトがサイト上に表示"
"されるまでには1,2分の時間がかかるかもしれません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:958
#: ../source/tutorials/installing-packages.rst:674
msgid ""
"Depending on your platform, this may require root or Administrator access. :"
"ref:`pip` is currently considering changing this by `making user installs "
"the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""
"あなたのプラットフォームに依りますが、これにはrootまたはAdministratorの権限で"
"アクセスしなければならないかもしれません。 :ref:`pip` は現在、 `一般ユーザで"
"のインストールを規定動作にする案 <https://github.com/pypa/2pip/"
"issues/1668>`_ にあるように、この部分の変更を検討しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:964
msgid ""
"Specifically, the \"console_script\" approach generates ``.exe`` files on "
"Windows, which are necessary because the OS special-cases ``.exe`` files. "
"Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher for "
"Windows <397>` allow scripts to be used in many cases, but not all."
msgstr ""
"特に、\"console_script\" を使うと Windows では ``.exe`` ファイルを生成します"
"が、これはOSが特別なケースとして ``.exe`` ファイルを必要とするからです。 "
"``PATHEXT`` や :pep:`Windows向けPythonランチャー <397>` のようなスクリプトを"
"実行する機能によって多くの場合にスクリプトが使われますが、しかし、いつでも使"
"えるわけではありません。"

#: ../source/guides/dropping-older-python-versions.rst:5
msgid "Dropping support for older Python versions"
msgstr "古いバージョンのPython へのサポートをやめる"

#: ../source/guides/dropping-older-python-versions.rst:7
msgid ""
"Dropping support for older Python versions is supported by the standard :ref:"
"`core-metadata` 1.2 specification via a \"Requires-Python\" attribute."
msgstr ""
"古いバージョンのPythonへのサポート取りやめは、標準的な :ref:`core-metadata` "
"1.2 仕様の \"Requires-Python\" アトリビュートでサポートされています。"

#: ../source/guides/dropping-older-python-versions.rst:9
msgid ""
"Metadata 1.2+ clients, such as Pip 9.0+, will adhere to this specification "
"by matching the current Python runtime and comparing it with the required "
"version in the package metadata. If they do not match, it will attempt to "
"install the last package distribution that supported that Python runtime."
msgstr ""
"Pip 9.0+ のような Metadata 1.2+ のクライアントは、動作中の Python ランタイム"
"のバージョンとパッケージのメタデータで要求されているバージョンを比較突合する"
"ことで、この仕様を遵守しようとします。もし両者が一致しなければ、その Python "
"ランタイムでサポートされているパッケージ配布物の中で最新のものをインストール"
"しようと試みます。"

#: ../source/guides/dropping-older-python-versions.rst:12
msgid ""
"This mechanism can be used to drop support for older Python versions, by "
"amending the \"Requires-Python\" attribute in the package metadata."
msgstr ""
"パッケージのメタデータにある \"Requires-Python\" 属性を修正することで、古い"
"バージョンの Python へのサポートを削除するのにこのメカニズムを利用することが"
"できます。"

#: ../source/guides/dropping-older-python-versions.rst:14
msgid ""
"This guide is specifically for users of :ref:`setuptools`, other packaging "
"tools such as ``flit`` may offer similar functionality but users will need "
"to consult relevant documentation."
msgstr ""
"このガイドは特に :ref:`setuptools` のユーザに向けて書かれていますので、同様の"
"機能を提供する ``flit`` のような他のパッケージングツールのユーザは適切な文書"
"を参照する必要があるでしょう。"

#: ../source/guides/dropping-older-python-versions.rst:17
msgid "Requirements"
msgstr "要求事項"

#: ../source/guides/dropping-older-python-versions.rst:19
msgid "This workflow requires that:"
msgstr "このワークフローは、以下を要求します:"

#: ../source/guides/dropping-older-python-versions.rst:21
msgid "The publisher is using the latest version of :ref:`setuptools`,"
msgstr ""
"(パッケージを)公開しようとするものが最新版の :ref:`setuptools` を使っていて、"

#: ../source/guides/dropping-older-python-versions.rst:22
msgid "The latest version of :ref:`twine` is used to upload the package,"
msgstr "最新版の :ref:`twine` を使ってパッケージのアップロードを行い、"

#: ../source/guides/dropping-older-python-versions.rst:23
msgid ""
"The user installing the package has at least Pip 9.0, or a client that "
"supports the Metadata 1.2 specification."
msgstr ""
"パッケージをインストールしようとするユーザが、少なくとも Pip 9.0 か、または、"
"Metadata 1.2 の仕様を満足するクライアントを使っていること。"

#: ../source/guides/dropping-older-python-versions.rst:26
msgid "Dealing with the universal wheels"
msgstr "universal wheelsの取り扱い"

#: ../source/guides/dropping-older-python-versions.rst:28
msgid ""
"Traditionally, projects providing Python code that is semantically "
"compatible with both Python 2 and Python 3, produce :term:`wheels <Wheel>` "
"that have a ``py2.py3`` tag in their names. When dropping support for Python "
"2, it is important not to forget to change this tag to just ``py3``. It is "
"often configured within :file:`setup.cfg` under the ``[bdist_wheel]`` "
"section by setting ``universal = 1`` if they use setuptools."
msgstr ""
"伝統的には、Python 2 と Python 3 の両方で文法的に互換性のある Python ソース"
"コードを提供するプロジェクトは、 ``py2.py3`` というタグをその名前の中に持つ :"
"term:`wheels <Wheel>` を生成しています。 Python 2 へのサポートをやめる時に"
"は、このタグをただの ``py3`` に変更するのを忘れないことが重要です。 "
"setuptools を使っているのであれば、 :file:`setup.cfg` の中の "
"``[bdist_wheel]`` セクションで ``universal=1`` として設定されています。"

#: ../source/guides/dropping-older-python-versions.rst:36
msgid ""
"If you use this method, either remove this option or section, or explicitly "
"set ``universal`` to ``0``:"
msgstr ""
"このメソッドを使うのであれば、このオプションないしセクションを削除するか、ま"
"たは、明示的に ``universal`` を ``0`` に設定してください。"

#: ../source/guides/dropping-older-python-versions.rst:48
msgid ""
"Since it is possible to override the :file:`setup.cfg` settings via CLI "
"flags, make sure that your scripts don't have ``--universal`` in your "
"package creation scripts."
msgstr ""
"CLIでオプションを指定することで :file:`setup.cfg` ファイルでの設定を上書きす"
"ることができるので、あなたのパッケージ生成スクリプトが ``--universal`` オプ"
"ションを指定していないことを確実にしてください。"

#: ../source/guides/dropping-older-python-versions.rst:53
msgid "Defining the Python version required"
msgstr "要求する Python のバージョンを定義する"

#: ../source/guides/dropping-older-python-versions.rst:56
msgid "1. Download the newest version of Setuptools"
msgstr "1. Setuptools の最新版をダウンロードする"

#: ../source/guides/dropping-older-python-versions.rst:58
msgid ""
"Ensure that before you generate source distributions or binary "
"distributions, you update Setuptools and install twine."
msgstr ""
"ソースコード配布物を生成するにせよ、バイナリ配布物を生成するにせよ、 "
"Setuptools を更新し twine をインストールするようにしてください。"

#: ../source/guides/dropping-older-python-versions.rst:60
msgid "Steps:"
msgstr "手順:"

#: ../source/guides/dropping-older-python-versions.rst:74
msgid "`setuptools` version should be above 24.0.0."
msgstr "`setuptools` のバージョンが 24.0.0 以上であること。"

#: ../source/guides/dropping-older-python-versions.rst:77
msgid "2. Specify the version ranges for supported Python distributions"
msgstr "2. サポートする Python 配布物のバージョンの範囲を指定する"

#: ../source/guides/dropping-older-python-versions.rst:79
msgid ""
"You can specify version ranges and exclusion rules, such as at least Python "
"3. Or, Python 2.7, 3.4 and beyond."
msgstr ""
"「少なくとも Python 3」や「Python 2.7 か Python 3.5 とそれ以上」などというよ"
"うに、バージョンの範囲や除外のルールを指定することができます。"

#: ../source/guides/dropping-older-python-versions.rst:81
#: ../source/specifications/core-metadata.rst:146
#: ../source/specifications/core-metadata.rst:467
#: ../source/specifications/core-metadata.rst:491
#: ../source/specifications/core-metadata.rst:532
#: ../source/specifications/core-metadata.rst:555
#: ../source/specifications/core-metadata.rst:588
#: ../source/specifications/core-metadata.rst:720
#: ../source/specifications/core-metadata.rst:749
msgid "Examples::"
msgstr "例::"

#: ../source/guides/dropping-older-python-versions.rst:86
msgid ""
"The way to set those values is within the call to ``setup`` within your :"
"file:`setup.py` script. This will insert the ``Requires-Python`` metadata "
"values based on the argument you provide in ``python_requires``."
msgstr ""
"このような値の設定は、 :file:`setup.py` スクリプトの中の ``setup`` の呼び出し"
"の中で行えます。 ``python_requires`` 引数に設定した内容に基づいて ``Requires-"
"Python`` メタデータの値が挿入されます。"

#: ../source/guides/dropping-older-python-versions.rst:101
msgid "3. Validating the Metadata before publishing"
msgstr "3. 公開の前にメタデータを検証する"

#: ../source/guides/dropping-older-python-versions.rst:103
msgid ""
"Within a Python source package (the zip or the tar-gz file you download) is "
"a text file called PKG-INFO."
msgstr ""
"Python のソースコードパッケージ (あなたがダウンロードしたzipファイルやtar.gz"
"ファイル) の中には、PKG-INFO という名前のテキストファイルがあります。"

#: ../source/guides/dropping-older-python-versions.rst:105
msgid ""
"This file is generated by Distutils or :ref:`setuptools` when it generates "
"the source package. The file contains a set of keys and values, the list of "
"keys is part of the PyPa standard metadata format."
msgstr ""
"このファイルは Distutils や :ref:`setuptools` でソースコードパッケージを作成"
"する時に一緒に作成されます。その内容は、一連のキーと値の組み合わせで、キーは "
"Pypa 標準メタデータフォーマットの一部です。"

#: ../source/guides/dropping-older-python-versions.rst:108
msgid "You can see the contents of the generated file like this:"
msgstr "生成されたファイルの内容はこのようになっています:"

#: ../source/guides/dropping-older-python-versions.rst:114
msgid "Validate that the following is in place, before publishing the package:"
msgstr "パッケージを公開する前に、以下のことが適切かどうかを検証してください。"

#: ../source/guides/dropping-older-python-versions.rst:116
msgid ""
"If you have upgraded correctly, the Metadata-Version value should be 1.2 or "
"higher."
msgstr ""
"アップグレードが正しく終われば、Metadata-Version の値が 1.2 かそれ以上になっ"
"ているはずです。"

#: ../source/guides/dropping-older-python-versions.rst:117
msgid ""
"The Requires-Python field is set and matches your specification in setup.py."
msgstr ""
"Requires-Python フィールドが設定されていて、setup.py でのあなたの指定に一致し"
"ているはずです。"

#: ../source/guides/dropping-older-python-versions.rst:120
msgid "4. Using Twine to publish"
msgstr "4. Twineを使って公開する"

#: ../source/guides/dropping-older-python-versions.rst:122
msgid ""
"Twine has a number of advantages, apart from being faster it is now the "
"supported method for publishing packages."
msgstr ""
"動作が速いことを別にしてもTwineには数多くの利点があり、今ではパッケージを公開"
"するためのメソッドとしてサポートされています。"

#: ../source/guides/dropping-older-python-versions.rst:124
msgid "Make sure you are using the newest version of Twine, at least 1.9."
msgstr "少なくとも1.9以上の最新のTwineを使うようにしてください。"

#: ../source/guides/dropping-older-python-versions.rst:127
msgid "Dropping a Python release"
msgstr "Pythonリリースをサポートから外す"

#: ../source/guides/dropping-older-python-versions.rst:129
msgid ""
"Once you have published a package with the Requires-Python metadata, you can "
"then make a further update removing that Python runtime from support."
msgstr ""
"Requires-Python メタデータ付きでパッケージを公開しさえすれば、次回以降の更新"
"の際にPython ランタイムをサポートから外すことができるようになります。"

#: ../source/guides/dropping-older-python-versions.rst:131
msgid "It must be done in this order for the automated fallback to work."
msgstr ""
"自動フォールバックが正しく動作するためには、この順番で行わなければなりませ"
"ん。"

#: ../source/guides/dropping-older-python-versions.rst:133
msgid ""
"For example, you published the Requires-Python: \">=2.7\" as version 1.0.0 "
"of your package."
msgstr ""
"例えば、 Requires-Python: \">=2.7\" の状態であなたのパッケージのバージョン "
"1.0.0 を公開したとしましよう。"

#: ../source/guides/dropping-older-python-versions.rst:135
msgid ""
"If you were then to update the version string to \">=3.5\", and publish a "
"new version 2.0.0 of your package, any users running Pip 9.0+ from version "
"2.7 will have version 1.0.0 of the package installed, and any >=3.5 users "
"will receive version 2.0.0."
msgstr ""
"その後、バージョン文字列を \">=3.5\" に修正した新しいバージョン 2.0.0 のパッ"
"ケージを公開すれば、Pip 9.0+ を 2.7 で使っているユーザはバージョン 1.0.0. の"
"パッケージをインストールし、>=3.5 のユーザはバージョン 2.0.0 を受け取ることに"
"なるでしょう。"

#: ../source/guides/hosting-your-own-index.rst:5
msgid "Hosting your own simple repository"
msgstr "あなた自身の単純なリポジトリをホストする"

#: ../source/guides/hosting-your-own-index.rst:8
msgid ""
"If you wish to host your own simple repository [1]_, you can either use a "
"software package like :doc:`devpi <devpi:index>` or you can use simply "
"create the proper directory structure and use any web server that can serve "
"static files and generate an autoindex."
msgstr ""
"あなた自身の単純なリポジトリ [1]_ をホストしたいのであれば、 :doc:`devpi "
"<devpi:index>` のようなソフトウェアパッケージを使うこともできますし、単にウェ"
"ブサーバ上に適当なディレクトリを作成して静的ファイルをそこに置き、自動でイン"
"デックスを生成させることも可能です。"

#: ../source/guides/hosting-your-own-index.rst:13
msgid ""
"In either case, since you'll be hosting a repository that is likely not in "
"your user's default repositories, you should instruct them in your project's "
"description to configure their installer appropriately. For example with pip:"
msgstr ""
"どちらの場合でも、ユーザとしての既定のリポジトリではない場所をあなたのリポジ"
"トリにしようとしているのでしょうから、あなたのプロジェクトの説明にインストー"
"ラを適切に設定するように指図しておくべきでしょう。例えば pip なら:"

#: ../source/guides/hosting-your-own-index.rst:29
msgid ""
"In addition, it is **highly** recommended that you serve your repository "
"with valid HTTPS. At this time, the security of your user's installations "
"depends on all repositories using a valid HTTPS setup."
msgstr ""
"加えて、あなたのリポジトリを公開する場合はHTTPSで公開することが強く推奨されま"
"す。この時、ユーザがあなたのパッケージをインストールする際のセキュリティは、"
"すべてのリポジトリが適切なHTTPS設定であるか否かに依存します。"

#: ../source/guides/hosting-your-own-index.rst:35
msgid "\"Manual\" repository"
msgstr "\"手動\"リポジトリ"

#: ../source/guides/hosting-your-own-index.rst:37
msgid ""
"The directory layout is fairly simple, within a root directory you need to "
"create a directory for each project. This directory should be the :ref:"
"`normalized name <name-normalization>` of the project. Within each of these "
"directories simply place each of the downloadable files. If you have the "
"projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" (with the "
"version 0.1) You should end up with a structure that looks like::"
msgstr ""
"ディレクトリ構造は極めて単純で、ルートディレクトリ内に各プロジェクトを納めた"
"ディレクトリを作成する必要があります。このディレクトリは、プロジェクトの :"
"ref:`標準化された名前 <name-normalization>` になっているべきです。各プロジェ"
"クトのディレクトリには、それぞれダウンロード可能なファイルを置くだけで"
"す。\"Foo\" というプロジェクト (のバージョン 1.0 と 2.0) と \"bar\" というプ"
"ロジェクト (のバージョン 0.1) があるなら、ディレクトリ構造はこんなふうになる"
"でしょう::"

#: ../source/guides/hosting-your-own-index.rst:50
msgid ""
"Once you have this layout, simply configure your webserver to serve the root "
"directory with autoindex enabled. For an example using the built in Web "
"server in `Twisted`_, you would simply run ``twistd -n web --path .`` and "
"then instruct users to add the URL to their installer's configuration."
msgstr ""
"この配置ができあがったら、あとはルートディレクトリを自動インデックス付きで"
"ウェブサーバから提供するように設定するだけです。 `Twisted`_ の組み込みウェブ"
"サーバを使う例では、単に ``twisted -n web --path.`` を走らせておいて、ユーザ"
"に対してこのURLをインストーラの設定に加えるように指示するだけです。"

#: ../source/guides/hosting-your-own-index.rst:57
msgid ""
"For complete documentation of the simple repository protocol, see :pep:`503`."
msgstr ""
"単純なリポジトリプロトコルの完全な説明文書としては、 :pep:`503` を見てくださ"
"い。"

#: ../source/guides/index.rst:8
msgid "Installing Packages:"
msgstr "パッケージをインストールする:"

#: ../source/guides/index.rst:19
msgid "Building and Publishing Projects:"
msgstr "プロジェクトをビルドして公開する:"

#: ../source/guides/index.rst:34
msgid "Miscellaneous:"
msgstr "種々の事柄:"

#: ../source/guides/index.rst:4
msgid ""
"**Guides** are focused on accomplishing a specific task and assume that you "
"are already familiar with the basics of Python packaging. If you're looking "
"for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""
"**ガイド文書** は特定のタスクを達成することに重点を置くもので、読者が Python "
"のパッケージングの基礎について既に馴染みがあるものと仮定しています。パッケー"
"ジングの導入的な説明を探しているのであれば :doc:`/tutorials/index` を見てくだ"
"さい。"

#: ../source/guides/index-mirrors-and-caches.rst:5
msgid "Package index mirrors and caches"
msgstr "パッケージインデックスのミラーとキャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:10
msgid "2014-12-24"
msgstr "2014-12-24"

#: ../source/guides/index-mirrors-and-caches.rst:14
msgid ""
"Mirroring or caching of PyPI can be used to speed up local package "
"installation, allow offline work, handle corporate firewalls or just plain "
"Internet flakiness."
msgstr ""
"PyPIのミラーやキャッシュがあると、手元でパッケージをインストールするのが速く"
"なったり、オフラインでインストールできたり、会社のファイアウォール経由でもで"
"きたり、あるいは、単純にインターネットがあてにならなくてもインストールできた"
"りします。"

#: ../source/guides/index-mirrors-and-caches.rst:17
msgid "Three options are available in this area:"
msgstr "この分野には３個のやり方があります:"

#: ../source/guides/index-mirrors-and-caches.rst:19
msgid "pip provides local caching options,"
msgstr "pip はローカルキャッシュのオプションを提供し、"

#: ../source/guides/index-mirrors-and-caches.rst:20
msgid ""
"devpi provides higher-level caching option, potentially shared amongst many "
"users or machines, and"
msgstr ""
"devpi は、潜在的には多数のユーザやマシンをまたがって共有できるような高レベル"
"のキャッシュのオプションを提供し、"

#: ../source/guides/index-mirrors-and-caches.rst:22
msgid ""
"bandersnatch provides a local complete mirror of all PyPI :term:`packages "
"<Distribution Package>`."
msgstr ""
"bandersnatch は、PyPIのすべての :term:`パッケージ <Distribution Package>` の"
"完全なミラー(複製)を手元に置くオプションを提供します。"

#: ../source/guides/index-mirrors-and-caches.rst:27
msgid "Caching with pip"
msgstr "pipによるキャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:29
msgid ""
"pip provides a number of facilities for speeding up installation by using "
"local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""
"pip は、 :term:`パッケージ <Distribution Package>` のローカルキャッシュを使っ"
"て素早くインストールするためのいくつもの機能を提供します。"

#: ../source/guides/index-mirrors-and-caches.rst:32
msgid ""
":ref:`Fast & local installs <pip:installing from local packages>` by "
"downloading all the requirements for a project and then pointing pip at "
"those downloaded files instead of going to PyPI."
msgstr ""
"あるプロジェクトの依存先パッケージをすべてダウンロードし、 pip を PyPI の代わ"
"りにそれらダウンロード済みファイルに向けることによる :ref:`速くてローカルなイ"
"ンストール <pip:installing from local packages>` 。"

#: ../source/guides/index-mirrors-and-caches.rst:35
msgid ""
"A variation on the above which pre-builds the installation files for the "
"requirements using :ref:`python3 -m pip wheel <pip:pip wheel>`:"
msgstr ""
":ref:`python -m pip wheel <pip:pip wheel>` を用いて依存先パッケージのインスト"
"ール用ファイルをあらかじめビルドしておくという上記のバリエーション:"

#: ../source/guides/index-mirrors-and-caches.rst:45
msgid "Caching with devpi"
msgstr "devpiでのキャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:47
msgid ""
"devpi is a caching proxy server which you run on your laptop, or some other "
"machine you know will always be available to you. See the `devpi "
"documentation for getting started`__."
msgstr ""
"devpi は、キャッシュ機能付きのプロクシサーバで、あなたのラップトップやあなた"
"がいつでも使えるとわかっているどこかの機体の上で動作させます。 `devpi の始め"
"方 <devpi documentation for getting started>`__ を見てください。"

#: ../source/guides/index-mirrors-and-caches.rst:55
msgid "Complete mirror with bandersnatch"
msgstr "bandersnatch で完全なミラーを作る"

#: ../source/guides/index-mirrors-and-caches.rst:57
msgid ""
"bandersnatch will set up a complete local mirror of all PyPI :term:`packages "
"<Distribution Package>` (externally-hosted packages are not mirrored). See "
"the `bandersnatch documentation for getting that going`__."
msgstr ""
"bandersnatch は、すべての PyPI :term:`パッケージ <Distribution Package>` (外"
"部にホストされているパッケージはミラーされません)の完全なローカルミラーを構築"
"します。 `bandersnatch を走らせるには <bandersnatch documentation for "
"getting that going>`__ を見てください。"

#: ../source/guides/index-mirrors-and-caches.rst:63
msgid ""
"A benefit of devpi is that it will create a mirror which includes :term:"
"`packages <Distribution Package>` that are external to PyPI, unlike "
"bandersnatch which will only cache :term:`packages <Distribution Package>` "
"hosted on PyPI."
msgstr ""
"devpi の利点は、 PyPI の外部にある :term:`パッケージ <Distribution Package>` "
"を含むミラーを作成できることで、これはPyPI にホストされている :term:`パッケー"
"ジ <Distribution Package>` だけをキャッシュする bandersnatch とは異なる点で"
"す。"

#: ../source/guides/installing-scientific-packages.rst:5
msgid "Installing scientific packages"
msgstr "科学分野のパッケージをインストールする"

#: ../source/guides/installing-scientific-packages.rst:11
msgid ""
"Scientific software tends to have more complex dependencies than most, and "
"it will often have multiple build options to take advantage of different "
"kinds of hardware, or to interoperate with different pieces of external "
"software."
msgstr ""
"科学分野のソフトウェアは、他のほとんどのものよりも複雑な依存関係を持つことが"
"多く、異なる種類のハードウェアの利点を引き出すためや外部のソフトウェアのさま"
"ざまな部分と協調動作するためのオプションが複数存在することもしばしばです。"

#: ../source/guides/installing-scientific-packages.rst:16
msgid ""
"In particular, `NumPy <https://numpy.org/>`__, which provides the basis for "
"most of the software in the `scientific Python stack <https://scientific-"
"python.org>`_ can be configured to interoperate with different FORTRAN "
"libraries, and can take advantage of different levels of vectorised "
"instructions available in modern CPUs."
msgstr ""
"とりわけ `科学分野のPythonソフトウェア群 <https://scientific-python.org>`_ の"
"ほとんどのソフトウェアに基盤を提供する`NumPy <https://numpy.org/>`__ は、他"
"の FORTRAN ライブラリと協調動作したり現代的なCPUで利用可能なさまざまなレベル"
"のベクター演算命令を活用できるように構成可能です。"

#: ../source/guides/installing-scientific-packages.rst:22
msgid ""
"Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-built "
"32-bit and 64-bit binaries in the ``wheel`` format are available for all "
"major operating systems (Windows, macOS, and Linux) on PyPI. Note, however, "
"that on Windows, NumPy binaries are linked against the `ATLAS <http://www."
"netlib.org/atlas/>`__ BLAS/LAPACK library, restricted to SSE2 instructions, "
"so they may not provide optimal linear algebra performance."
msgstr ""
"Numpy のバージョン 1.10.4 および SciPy のバージョン 1.0.0 以降は、 主要なオペ"
"レーティングシステム (WindowsとmacOSとLinux)向けに32 ビットと 64 ビットのビル"
"ド済みバイナリが ``wheel`` 形式でPyPIに準備されています。ただ、Windowsでは、"
"SSE2命令セットに限定された `ATLAS <http://www.netlib.org/atlas/>`__ BLAS/"
"LAPACK ライブラリに NumPy がリンクされているので、線形代数のパフォーマンスが"
"最適化されていない可能性があります。"

#: ../source/guides/installing-scientific-packages.rst:29
msgid ""
"There are a number of alternative options for obtaining scientific Python "
"libraries (or any other Python libraries that require a compilation "
"environment to install from source and don't provide pre-built wheel files "
"on PyPI)."
msgstr ""
"科学分野の Python ライブラリ (または、ソースコードからインストールする際にコ"
"ンパイル環境を必要とするが、 PyPI にビルド済みの wheel ファイルが用意されてい"
"ないような、他の全ての Python ライブラリ) を手に入れるには他にも数多くの代替"
"方法があります。"

#: ../source/guides/installing-scientific-packages.rst:35
msgid "Building from source"
msgstr "ソースコードからビルドする"

#: ../source/guides/installing-scientific-packages.rst:37
msgid ""
"The same complexity which makes it difficult to distribute NumPy (and many "
"of the projects that depend on it) as wheel files also make them difficult "
"to build from source yourself. However, for intrepid folks that are willing "
"to spend the time wrangling compilers and linkers for both C and FORTRAN, "
"building from source is always an option."
msgstr ""
"NumPy (およびそれに依存するプロジェクトの多く) を wheel ファイルとして配布す"
"ることを難しくする同じ複雑さが、自分でソースコードから作成することをも困難に"
"しています。しかしながら、C言語やFORTRAN言語のコンパイラやリンカを説得するの"
"に喜んで時間を費やそうという勇敢な人々にとっては、ソースコードからビルドする"
"ことは常にひとつの選択肢です。"

#: ../source/guides/installing-scientific-packages.rst:45
msgid "Linux distribution packages"
msgstr "Linux 配布パッケージ"

#: ../source/guides/installing-scientific-packages.rst:47
msgid ""
"For Linux users, the system package manager will often have pre-compiled "
"versions of various pieces of scientific software, including NumPy and other "
"parts of the scientific Python stack."
msgstr ""
"Linux のユーザなら、システムのパッケージマネージャを使えば NumPy やその他の科"
"学分野のPythonソフトウェア群のコンパイル済みのパッケージが準備されていること"
"も多々あります。"

#: ../source/guides/installing-scientific-packages.rst:51
msgid ""
"If using versions which may be several months old is acceptable, then this "
"is likely to be a good option (just make sure to allow access to "
"distributions installed into the system Python when using virtual "
"environments)."
msgstr ""
"もし数ヶ月遅れでも構わないのであれば、これは良い選択肢でしょう (仮想環境を"
"使っている場合はシステムの Python にインストールされた配布物にアクセスできる"
"ようにしておくのを忘れないでください) 。"

#: ../source/guides/installing-scientific-packages.rst:57
msgid "Windows installers"
msgstr "Windows 版インストーラ"

#: ../source/guides/installing-scientific-packages.rst:59
msgid ""
"Many Python projects that don't (or can't) currently publish wheel files at "
"least publish Windows installers, either on PyPI or on their project "
"download page. Using these installers allows users to avoid the need to set "
"up a suitable environment to build extensions locally."
msgstr ""
"現時点で wheel ファイルを公開していない(または公開できない)多くの Python プロ"
"ジェクトでも、 PyPI 上か、または、そのプロジェクトのダウンロードページで、少"
"なくとも Windows 版インストーラを公開しています。このようなインストーラを使え"
"ば、(他言語)拡張をローカルでビルドするための適切な環境を準備する手間を省くこ"
"とができます。"

#: ../source/guides/installing-scientific-packages.rst:64
msgid ""
"The extensions provided in these installers are typically compatible with "
"the CPython Windows installers published on python.org."
msgstr ""
"このようなインストーラで用意されている(他言語)拡張は、たいてい、 python.org "
"で公開されている CPython Windows インストーラと互換性のある形で公開されていま"
"す。"

#: ../source/guides/installing-scientific-packages.rst:67
msgid ""
"As with Linux system packages, the Windows installers will only install into "
"a system Python installation - they do not support installation in virtual "
"environments. Allowing access to distributions installed into the system "
"Python when using virtual environments is a common approach to working "
"around this limitation."
msgstr ""
"Linux のシステムパッケージの時と同じく、Windows 版インストーラはシステムワイ"
"ドの Python 環境にしかインストールしません -- つまり、仮想環境へのインストー"
"ルはサポートしていないのです。この制約を回避するよくあるやり方は、仮想環境を"
"使っている時にシステムワイドの Python 環境にインストールされた配布物へのアク"
"セスを許可することです。"

#: ../source/guides/installing-scientific-packages.rst:73
msgid ""
"The :term:`Wheel` project also provides a :command:`wheel convert` "
"subcommand that can convert a Windows :command:`bdist_wininst` installer to "
"a wheel."
msgstr ""
":term:`Wheel` プロジェクトは、Windows :command:`bdist_wininst` インストーラ"
"を wheel に変換するサブコマンド :command:`wheel convert` も提供しています。"

#: ../source/guides/installing-scientific-packages.rst:80
msgid "macOS installers and package managers"
msgstr "macOS インストーラとパッケージマネージャ"

#: ../source/guides/installing-scientific-packages.rst:82
msgid ""
"Similar to the situation on Windows, many projects (including NumPy) publish "
"macOS installers that are compatible with the macOS CPython binaries "
"published on python.org."
msgstr ""
"Windows での状況と同様に、 (NumPy を含む) 多数のプロジェクトは、 python.org "
"で公開される macOS版の Python バイナリと互換性のある macOS 版インストーラを公"
"開しています。"

#: ../source/guides/installing-scientific-packages.rst:86
msgid ""
"macOS users also have access to Linux distribution style package managers "
"such as ``Homebrew``. The SciPy site has more details on using Homebrew to "
"`install SciPy on macOS <https://scipy.org/install/#macos>`_."
msgstr ""
"macOS のユーザは、 ``Homebrew`` のような Linux ディストロスタイルのパッケージ"
"マネージャも使うことができます。ScyPy サイトには、もっと詳しい Homebrew を"
"使って `SciPy を macOS にインストールする <https://scipy.org/install/"
"#macos>`_ 方法の説明があります。"

#: ../source/guides/installing-scientific-packages.rst:92
msgid "SciPy distributions"
msgstr "SciPy 配布物"

#: ../source/guides/installing-scientific-packages.rst:94
msgid ""
"The SciPy site lists `several distributions <https://scipy.org/install/"
"#distributions>`_ that provide the full SciPy stack to end users in an easy "
"to use and update format."
msgstr ""
"SciPy サイトには、利用・更新が簡単なフォーマットでエンドユーザ向けの SciPy の"
"全機能を提供する `いくつかの配布物 <https://scipy.org/install/"
"#distributions>`_ のリストがあります。"

#: ../source/guides/installing-scientific-packages.rst:99
msgid ""
"Some of these distributions may not be compatible with the standard ``pip`` "
"and ``virtualenv`` based toolchain."
msgstr ""
"これらの配布物の内のいくつかは、標準的な ``pip`` や ``virtualenv`` を基礎にし"
"たツールチェーンと互換性がないかもしれません。"

#: ../source/guides/installing-scientific-packages.rst:103
#: ../source/key_projects.rst:627 ../source/key_projects.rst:625
msgid "Spack"
msgstr "Spack"

#: ../source/guides/installing-scientific-packages.rst:104
msgid ""
"`Spack <https://github.com/spack/spack>`_ is a flexible package manager "
"designed to support multiple versions, configurations, platforms, and "
"compilers. It was built to support the needs of large supercomputing centers "
"and scientific application teams, who must often build software many "
"different ways. Spack is not limited to Python; it can install packages for "
"``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It is non-"
"destructive; installing a new version of one package does not break existing "
"installations, so many configurations can coexist on the same system."
msgstr ""
"`Spack <https://github.com/spack/spack>`_ は、複数のバージョン・設定・プラッ"
"トフォーム・コンパイラをサポートできるように設計されたパッケージマネージャで"
"す。大規模スーパーコンピュータセンタや科学分野のアプリケーションチームではあ"
"るソフトウェアを異なる方法でビルドする必要が多々ありますが、そのようなニーズ"
"を満たすように作られています。Spack は Python に限らず、 ``C`` ・ ``C++`` ・ "
"``Fortran`` ・ ``R`` やその他のプログラミング言語でも利用できます。Spackは破"
"壊的ではありません; というのは、あるパッケージの新しいバージョンをインストー"
"ルしても先にインストールされたものを壊すことはなく、非常に多くの設定(でインス"
"トールされたもの)が同一システム上で共存できるのです。"

#: ../source/guides/installing-scientific-packages.rst:113
msgid ""
"Spack offers a simple but powerful syntax that allows users to specify "
"versions and configuration options concisely. Package files are written in "
"pure Python, and they are templated so that it is easy to swap compilers, "
"dependency implementations (like MPI), versions, and build options with a "
"single package file.  Spack also generates *module* files so that packages "
"can be loaded and unloaded from the user's environment."
msgstr ""
"Spack は、ユーザがバージョンや設定のオプションを簡潔に表現する単純で力強い文"
"法を提供します。パッケージファイルは純 Python で書かれていて、コンパイラ・ "
"(MPI のような) 依存先の実装・バージョン・ビルドオプションをひとつのパッケージ"
"ファイルの中で容易に入れ替えられるようにテンプレート化されています。Spack "
"は、また、ユーザ環境からあるパッケージをロードしたりしなかったりできるように "
"*modules* ファイルを生成します。"

#: ../source/guides/installing-scientific-packages.rst:122
msgid "The conda cross-platform package manager"
msgstr "conda クロスプラットフォームパッケージマネージャ"

#: ../source/guides/installing-scientific-packages.rst:124
msgid ""
"`Anaconda <https://www.anaconda.com/products/individual/>`_ is a Python "
"distribution published by Anaconda, Inc. It is a stable collection of Open "
"Source packages for big data and scientific use.  As of the 5.0 release of "
"Anaconda, about 200 packages are installed by default, and a total of "
"400-500 can be installed and updated from the Anaconda repository."
msgstr ""
"`Anaconda <https://www.anaconda.com/products/individual/>`_ は Anaconda 社が"
"公開した Python 配布物です。Anaconda は、ビッグデータや科学分野で使用する一連"
"のオープンソースソフトウェアの安定版を集めたものです。Anaconda のバージョン "
"5.0 では、デフォルトで約 200 のパッケージがインストールされていて、全部で "
"400-500 が Anaconda リポジトリからインストール可能です。"

#: ../source/guides/installing-scientific-packages.rst:130
msgid ""
"``conda`` is an open source (BSD licensed) package management system and "
"environment management system included in Anaconda that allows users to "
"install multiple versions of binary software packages and their "
"dependencies, and easily switch between them. It is a cross-platform tool "
"working on Windows, macOS, and Linux. Conda can be used to package up and "
"distribute all kinds of packages, it is not limited to just Python packages. "
"It has full support for native virtual environments. Conda makes "
"environments first-class citizens, making it easy to create independent "
"environments even for C libraries. It is written in Python, but is Python-"
"agnostic. Conda manages Python itself as a package, so that :command:`conda "
"update python` is possible, in contrast to pip, which only manages Python "
"packages. Conda is available in Anaconda and Miniconda (an easy-to-install "
"download with just Python and conda)."
msgstr ""
"``conda`` は、複数のバージョンのソフトウェアのバイナリパッケージやその依存先"
"パッケージをインストールして容易に切り替えて使えるようにする Anaconda に含ま"
"れる (BSDライセンスの) オープンソースのパッケージマネジメントシステム兼環境管"
"理システムです。(これは) Windows・MacOS・Linuxで動作するクロスプラットフォー"
"ムのツールです。conda を使えば、Python のパッケージに限らず、あらゆる種類の"
"パッケージをまとめたり配布したりできます。Python に組み込まれた仮想環境を完全"
"にサポートしています。 C 言語で書かれたライブラリさえも容易に独立した環境を生"
"成できるようにすることで、conda は(仮想)環境を制限なく使えるもの(第１級オブ"
"ジェクト)にしています。Python で書かれていていますが、Pythonに依存しているわ"
"けではありません。conda は Python そのものをパッケージのひとつとして扱うた"
"め :command:`conda update python` とすることが可能で、Python のパッケージだけ"
"を扱う pip とは対照的です。conda は Anaconda や Miniconda (Python と conda が"
"動作するだけの最小版のAnacoda) から手に入ります。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:2
msgid "Installing stand alone command line tools"
msgstr "スタンドアローンのコマンドラインツールをインストールする"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:4
msgid ""
"Many packages provide command line applications. Examples of such packages "
"are `mypy <https://github.com/python/mypy>`_, `flake8 <https://github.com/"
"PyCQA/flake8>`_, `black <https://github.com/psf/black>`_, and :ref:`pipenv`."
msgstr ""
"多くのパッケージは、コマンドラインアプリケーションを提供しています。そのよう"
"なパッケージの例としては、 `mypy <https://github.com/python/mypy>`_ ・ "
"`flake8 <https://github.com/PyCQA/flake8>`_ ・ `black <https://github.com/"
"psf/black>`_ ・ :ref:`pipenv` が挙げられます。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:10
msgid ""
"Usually you want to be able to access these applications from anywhere on "
"your system, but installing packages and their dependencies to the same "
"global environment can cause version conflicts and break dependencies the "
"operating system has on Python packages."
msgstr ""
"通常ならシステムのどこからでもこれらのアプリケーションにアクセスできるように"
"したいと思うでしょうが、パッケージとその依存先パッケージを同じグローバル環境"
"にインストールすると、バージョンの衝突を起こしてオペレーティングシステムが"
"持っている Python パッケージ間の依存関係を破壊してしまうかもしれません。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:15
msgid ""
":ref:`pipx` solves this by creating a virtual environment for each package, "
"while also ensuring that its applications are accessible through a directory "
"that is on your ``$PATH``. This allows each package to be upgraded or "
"uninstalled without causing conflicts with other packages, and allows you to "
"safely run the applications from anywhere."
msgstr ""
":ref:`pipx` は、 ``$PATH`` に含まれるディレクトリを通してアプリケーションにア"
"クセスできるようにしつつ各パッケージに仮想環境を作成することでこの問題を解決"
"します。こうすることで、各パッケージの更新や削除をしても他のパッケージには影"
"響を与えず、どこからでもアプリケーションを安全に走らせることができるようにで"
"きます。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:21
msgid "pipx only works with Python 3.6+."
msgstr "pipx は Python 3.6+ でのみ動作します。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:23
msgid "pipx is installed with pip:"
msgstr "pipx は pip と一緒にインストールされています:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:41
msgid ""
"``ensurepath`` ensures that the application directory is on your ``$PATH``. "
"You may need to restart your terminal for this update to take effect."
msgstr ""
"``ensurepath `` は、アプリケーションのあるディレクトリが ``$PATH`` に含まれる"
"ようにすることを保証します。この更新(訳注、``$PATH``の修正のこと)が効果を持つ"
"ようにするためにターミナルを再起動する必要があるかもしれません。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:44
msgid ""
"Now you can install packages with ``pipx install`` and run the package's "
"applications(s) from anywhere."
msgstr ""
"これで、 ``pipx install`` を使ってパッケージをインストールすることができるよ"
"うになり、どこからでもそのパッケージのアプリケーションを起動することができる"
"ようになりました。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:52
msgid "For example:"
msgstr "例:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:74
#: ../source/guides/installing-stand-alone-command-line-tools.rst:72
msgid ""
"To see a list of packages installed with pipx and which applications are "
"available, use ``pipx list``:"
msgstr ""
"pipx でインストールされたパッケージのリストやどんなアプリケーションが使用可能"
"かを見るためには、 ``pipx list`` を使ってください:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:95
#: ../source/guides/installing-stand-alone-command-line-tools.rst:93
msgid "To upgrade or uninstall a package:"
msgstr "パッケージを更新またはアンインストールするには:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:102
#: ../source/guides/installing-stand-alone-command-line-tools.rst:100
msgid "pipx can be upgraded or uninstalled with pip:"
msgstr "pipx は pip を使って更新やアンインストールができます:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:118
#: ../source/guides/installing-stand-alone-command-line-tools.rst:116
msgid ""
"pipx also allows you to install and run the latest version of an application "
"in a temporary, ephemeral environment. For example:"
msgstr ""
"また、pipx ならアプリケーションの最新版を一時的で短命の環境にインストールして"
"動作させることができます。例えば:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:125
#: ../source/guides/installing-stand-alone-command-line-tools.rst:123
msgid "To see the full list of commands pipx offers, run:"
msgstr ""
"pipx で使える(サブ)コマンドの完全なリストを見たければ、次のようにしてくださ"
"い:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:131
#: ../source/guides/installing-stand-alone-command-line-tools.rst:129
msgid "You can learn more about pipx at https://pypa.github.io/pipx/."
msgstr "pipx については、 https://pypa.github.io/pipx/ でもっと学べます。"

#: ../source/guides/installing-using-linux-tools.rst:5
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr ""
"Linux パッケージマネージャを使って pip/setuptools/wheel をインストールする"

#: ../source/guides/installing-using-linux-tools.rst:8
msgid "2021-07-26"
msgstr "2021-07-26"

#: ../source/guides/installing-using-linux-tools.rst:13
msgid ""
"This section covers how to install :ref:`pip`, :ref:`setuptools`, and :ref:"
"`wheel` using Linux package managers."
msgstr ""
"この節では、Linux のパッケージマネージャを使って :ref:`pip` ・ :ref:"
"`setuptools` ・ :ref:`wheel` をインストールする方法について説明します。"

#: ../source/guides/installing-using-linux-tools.rst:16
msgid ""
"If you're using a Python that was downloaded from `python.org <https://www."
"python.org>`_, then this section does not apply.  See the :ref:"
"`installing_requirements` section instead."
msgstr ""
"`python.org <https://www.python.org>`_ からダウンロードした Python を使ってい"
"るなら、この節の議論はあてはまりません。代わりに :ref:"
"`installing_requirements` 節を見てください。"

#: ../source/guides/installing-using-linux-tools.rst:20
msgid ""
"Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, "
"and :ref:`wheel` supported by a specific Linux Distribution to be outdated "
"by the time it's released to the public, and updates generally only occur "
"for security reasons, not for feature updates.  For certain Distributions, "
"there are additional repositories that can be enabled to provide newer "
"versions.  The repositories we know about are explained below."
msgstr ""
"特定の Linux ディストロでサポートされているバージョンの :ref:`pip` ・ :ref:"
"`setuptools` ・ :ref:`wheel` が公開時点で既に旧バージョンになってしまっている"
"のに、更新されるのはセキュリティが理由の時だけで機能追加があっても更新されな"
"い、というのはよくあることです。ディストロの中にはより新しいバージョンを提供"
"することができる追加のリポジトリが存在する場合もあります。以下では、そのよう"
"なリポジトリのうちの既知のものを説明します。"

#: ../source/guides/installing-using-linux-tools.rst:27
msgid ""
"Also note that it's somewhat common for Distributions to apply patches for "
"the sake of security and normalization to their own standards.  In some "
"cases, this can lead to bugs or unexpected behaviors that vary from the "
"original unpatched versions.  When this is known, we will make note of it "
"below."
msgstr ""
"また、ディストロがセキュリティ上の理由やディストロ自身の標準に合致させる目的"
"でパッチを適用することはそれなりによくあります。いくつかのケースでは、オリジ"
"ナルの未パッチのバージョンとは異なるバグや期待に反した動きにつながることもあ"
"ります。わかっているものについては、以下に注記します。"

#: ../source/guides/installing-using-linux-tools.rst:34
msgid "Fedora"
msgstr "Fedora"

#: ../source/guides/installing-using-linux-tools.rst:40
msgid ""
"To learn more about Python in Fedora, please visit the `official Fedora "
"docs`_, `Python Classroom`_ or `Fedora Loves Python`_."
msgstr ""
"Fedora における Python についてもっと学ぶには、 `official Fedora docs`_ ・ "
"`Python Classroom`_ ・ `Fedora Loves Python`_ を見てください。"

#: ../source/guides/installing-using-linux-tools.rst:48
msgid "CentOS/RHEL"
msgstr "CentOS/RHEL"

#: ../source/guides/installing-using-linux-tools.rst:50
msgid ""
"CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core "
"repositories, although :ref:`setuptools` is installed by default."
msgstr ""
"CentOS と RHEL は、そのコアリポジトリでは :ref:`pip` や :ref:`wheel` を提供し"
"ていませんが、 :ref:`setuptools` はデフォルトでインストールされます。"

#: ../source/guides/installing-using-linux-tools.rst:53
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr ""
"システムに付属の Python 用に pip や wheel をインストールするには、二つのやり"
"方があります:"

#: ../source/guides/installing-using-linux-tools.rst:55
msgid ""
"Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using "
"`these instructions <https://docs.fedoraproject.org/en-US/epel/"
"#how_can_i_use_these_extra_packages>`__. On EPEL 7, you can install pip and "
"wheel like so:"
msgstr ""
"`これらの指示 <https://docs.fedoraproject.org/en-US/epel/"
"#how_can_i_use_these_extra_packages>`__ に従って `EPEL リポジトリ <https://"
"fedoraproject.org/wiki/EPEL>`_ を有効にしてください。 EPEL 7 では、pip と "
"wheel をこんなふうにインストールできます:"

#: ../source/guides/installing-using-linux-tools.rst:64
msgid ""
"Since EPEL only offers extra, non-conflicting packages, EPEL does not offer "
"setuptools, since it's in the core repository."
msgstr ""
"EPEL はシステムに欠けていて衝突しないパッケージだけを提供しているので、コアリ"
"ポジトリに入っている setuptools は EPEL にはありません。"

#: ../source/guides/installing-using-linux-tools.rst:68
msgid ""
"Enable the `PyPA Copr Repo <https://copr.fedorainfracloud.org/coprs/pypa/"
"pypa/>`_ using `these instructions <https://fedoraproject.org/wiki/"
"Infrastructure/Fedorahosted-retirement>`__ [1]_. You can install pip and "
"wheel like so:"
msgstr ""
"`これらの指示 <https://fedoraproject.org/wiki/Infrastructure/Fedorahosted-"
"retirement>`__ [1]_ に従って `PyPA Copr Repo <https://copr.fedorainfracloud."
"org/coprs/pypa/pypa/>`_ を有効にしてください。 pip と wheel はこうやってイン"
"ストールできます:"

#: ../source/guides/installing-using-linux-tools.rst:77
msgid "To additionally upgrade setuptools, run:"
msgstr "さらに setuptools を更新するには、次のようにしてください:"

#: ../source/guides/installing-using-linux-tools.rst:84
msgid ""
"To install pip, wheel, and setuptools, in a parallel, non-system environment "
"(using yum) then there are two options:"
msgstr ""
"システムの環境とは別に (yum を使って) pip ・ wheel ・ setuptools をインストー"
"ルするには、ふたつのやり方があります:"

#: ../source/guides/installing-using-linux-tools.rst:88
msgid ""
"Use the \"Software Collections\" feature to enable a parallel collection "
"that includes pip, setuptools, and wheel."
msgstr ""
"pip ・ setuptools ・ wheel を含むコレクションを (システムとは) 並行に有効化し"
"て \"ソフトウェアコレクション\" 機能を使ってください。"

#: ../source/guides/installing-using-linux-tools.rst:91
msgid ""
"For Redhat, see here: https://developers.redhat.com/products/"
"softwarecollections/overview"
msgstr ""
"Red Hat についてはこちらを見てください: https://developers.redhat.com/"
"products/softwarecollections/overview"

#: ../source/guides/installing-using-linux-tools.rst:93
msgid "For CentOS, see here: https://github.com/sclorg"
msgstr "CentOS の場合は、こちらを見てください: https://github.com/sclorg"

#: ../source/guides/installing-using-linux-tools.rst:95
msgid "Be aware that collections may not contain the most recent versions."
msgstr ""
"コレクションに含まれているバージョンが最新版であるとは限らない点に注意してく"
"ださい。"

#: ../source/guides/installing-using-linux-tools.rst:97
msgid ""
"Enable the `IUS repository <https://ius.io/setup>`_ and install one of the "
"`parallel-installable <https://ius.io/usage#parallel-installable-packages>`_ "
"Pythons, along with pip, setuptools, and wheel, which are kept fairly up to "
"date."
msgstr ""
"`IUS リポジトリ <https://ius.io/setup>`_ を有効にして、かなり最新版に近い状態"
"に維持されている pip ・ setuptools ・ wheel と一緒に `並列インストール可能 "
"<https://ius.io/usage#parallel-installable-packages>`_ な Python の内のひとつ"
"をインストールしてください。"

#: ../source/guides/installing-using-linux-tools.rst:103
msgid "For example, for Python 3.4 on CentOS7/RHEL7:"
msgstr "例えば、CentOS7/RHEL7 での Python 3.4 については:"

#: ../source/guides/installing-using-linux-tools.rst:111
msgid "openSUSE"
msgstr "openSUSE"

#: ../source/guides/installing-using-linux-tools.rst:121
msgid "Debian/Ubuntu and derivatives"
msgstr "Debian/Ubuntu とその派生物"

#: ../source/guides/installing-using-linux-tools.rst:123
#: ../source/guides/installing-using-linux-tools.rst:120
msgid "Firstly, update and refresh repository lists by running this command:"
msgstr ""
"第一に、このコマンドを実行してリポジトリリストを更新し情報を新しくしてくださ"
"い。"

#: ../source/guides/installing-using-linux-tools.rst:132
#: ../source/guides/installing-using-linux-tools.rst:129
msgid ""
"Recent Debian/Ubuntu versions have modified pip to use the `\"User Scheme\" "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by default, "
"which is a significant behavior change that can be surprising to some users."
msgstr ""
"最近のバージョンの Debian/Ubuntu は、 pip がデフォルトで `\"User Scheme\" "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を使うように修正"
"されていますが、これはユーザの一部を驚かせるような重要な動作の変更に当たるで"
"しょう。"

#: ../source/guides/installing-using-linux-tools.rst:138
#: ../source/guides/installing-using-linux-tools.rst:135
msgid "Arch Linux"
msgstr "Arch Linux"

#: ../source/guides/installing-using-linux-tools.rst:146
#: ../source/guides/installing-using-linux-tools.rst:143
msgid ""
"Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so the "
"only option is to manually place the repo files as described."
msgstr ""
"現時点では、 CentOS/RHEL には yum プラグインの \"copr\" が存在しないので、後"
"述するように手動でリポジトリファイルを配置するしかありません。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:2
msgid "Installing packages using pip and virtual environments"
msgstr "pip と仮想環境を使ってパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:4
msgid ""
"This guide discusses how to install packages using :ref:`pip` and a virtual "
"environment manager: either :ref:`venv` for Python 3 or :ref:`virtualenv` "
"for Python 2. These are the lowest-level tools for managing Python packages "
"and are recommended if higher-level tools do not suit your needs."
msgstr ""
"このガイドでは、 :ref:`pip` と仮想環境マネージャ、つまり Python 3 での :ref:"
"`venv` か Python 2 での :ref:`virtualenv` を使ってパッケージをインストールす"
"る方法について議論します。これらは、Python のパッケージを管理する最も低レベル"
"のツールで、高レベルのツールがあなたのニーズに合わない時に推奨される方法で"
"す。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:9
msgid ""
"This doc uses the term **package** to refer to a :term:`Distribution "
"Package`  which is different from an :term:`Import Package` that which is "
"used to import modules in your Python source code."
msgstr ""
"この文書では **パッケージ** という用語を :term:`配布パッケージ <Distribution "
"Package>` の意味で使いますが、これは Python ソースコードでモジュールをイン"
"ポートするという意味で使われる :term:`パッケージインポート <Import Package>` "
"とは異なります。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:15
msgid "Installing pip"
msgstr "pip をインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:17
msgid ""
":ref:`pip` is the reference Python package manager. It's used to install and "
"update packages. You'll need to make sure you have the latest version of pip "
"installed."
msgstr ""
":ref:`pip` は Python の参照モデルとなるパッケージマネージャです。それはパッ"
"ケージのインストールや更新に用いられます。常に pip の最新版をインストールして"
"おくように気をつけましょう。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:24
msgid ""
"Debian and most other distributions include a `python-pip`_ package; if you "
"want to use the Linux distribution-provided versions of pip, see :doc:`/"
"guides/installing-using-linux-tools`."
msgstr ""
"Debian や他のほとんどのディストロは `python-pip`_ パッケージを含んでいます; "
"Linuxのディストロが準備したバージョンの pip を使いたい場合は、 :doc:`/guides/"
"installing-using-linux-tools` を見てください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:28
msgid ""
"You can also install pip yourself to ensure you have the latest version. "
"It's recommended to use the system pip to bootstrap a user installation of "
"pip:"
msgstr ""
"pip の最新版を使っていることを担保するために、自分自身でインストールすること"
"もできます。ユーザ側で pip をインストールするためにシステム側で準備した pip "
"をブートストラップとして使うことが推奨されています。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:36
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:37
msgid ""
"Afterwards, you should have the latest version of pip installed in your user "
"site:"
msgstr ""
"それから、ユーザサイトには最新版の pip がインストールされているべきです。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:47
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:48
msgid ""
"The Python installers for Windows include pip. You can make sure that pip is "
"up-to-date by running:"
msgstr ""
"Windows 用の Python インストーラは pip を含んでいます。次のようにすると pip "
"が最新版であることを確実にすることができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:55
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:57
msgid "Afterwards, you should have the latest version of pip:"
msgstr "その後、pip が最新版になっているはずです:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:64
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:66
msgid "Installing virtualenv"
msgstr "virtualenv をインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:66
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:68
msgid ""
"If you are using Python 3.3 or newer, the :mod:`venv` module is the "
"preferred way to create and manage virtual environments. venv is included in "
"the Python standard library and requires no additional installation. If you "
"are using venv, you may skip this section."
msgstr ""
"Python 3.3 またはそれ以降のものを使っているなら、 :mod:`venv` モジュールの方"
"が仮想環境を作成・管理するのに好ましいです。 venv は Python の標準ライブラリ"
"に含まれていて、追加で何かをインストールしなければならないということがありま"
"せん。venv を使っているのであれば、この節を飛ばして構いません。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:72
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:74
msgid ""
":ref:`virtualenv` is used to manage Python packages for different projects. "
"Using virtualenv allows you to avoid installing Python packages globally "
"which could break system tools or other projects. You can install virtualenv "
"using pip."
msgstr ""
":ref:`virtualenv` は、異なるプロジェクトで使う Python パッケージを管理するた"
"めに使われていました。Python パッケージを大域的にインストールするとシステム"
"ツールや他のプロジェクトを壊してしまいかねないのですが、 virtualenv を用いる"
"ことでこれを避けることができます。virtualenv は pip でインストールできます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:93
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:95
msgid "Creating a virtual environment"
msgstr "仮想環境を作成する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:95
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:97
msgid ""
":ref:`venv` (for Python 3) and :ref:`virtualenv` (for Python 2) allow you to "
"manage separate package installations for different projects. They "
"essentially allow you to create a \"virtual\" isolated Python installation "
"and install packages into that virtual installation. When you switch "
"projects, you can simply create a new virtual environment and not have to "
"worry about breaking the packages installed in the other environments. It is "
"always recommended to use a virtual environment while developing Python "
"applications."
msgstr ""
":ref:`venv` (Python 3 用) や :ref:`virtualenv` (Python 2 用) を使うと、異なる"
"プロジェクトにそれぞれ別のパッケージをインストールして管理できます。これらの"
"ツールによって、基本的に、「仮想的に」分離された Python をインストールして、"
"その仮想環境の中に各種のパッケージをインストールすることができます。別のプロ"
"ジェクトに移る時には単純に新しい仮想環境を作成すればよく、他の環境にインス"
"トールされているパッケージを壊してしまわないかと心配する必要はありません。"
"Python のアプリケーションを開発している間は、常に仮想環境を用いることが推奨さ"
"れています。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:104
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:106
msgid ""
"To create a virtual environment, go to your project's directory and run "
"venv. If you are using Python 2, replace ``venv`` with ``virtualenv`` in the "
"below commands."
msgstr ""
"仮想環境を作成するには、あなたのプロジェクトのディレクトリへ行って venv コマ"
"ンドを走らせてください。Python 2 を使っているなら、下のコマンドの ``venv`` の"
"代わりに ``virtualenv`` を使ってください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:120
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:122
msgid ""
"The second argument is the location to create the virtual environment. "
"Generally, you can just create this in your project and call it ``env``."
msgstr ""
"二つ目の引数は、仮想環境を作成するべき場所の指定です。一般的には、プロジェク"
"トのルートディレクトリに ``env`` という名前で作成します。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:123
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:125
msgid "venv will create a virtual Python installation in the ``env`` folder."
msgstr ""
"venv は仮想的な Python を ``env`` ディレクトリの中にインストールするでしょ"
"う。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:125
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:127
msgid ""
"You should exclude your virtual environment directory from your version "
"control system using ``.gitignore`` or similar."
msgstr ""
"仮想環境のディレクトリは、 ``.gitignore`` やその類似物を使ってバージョン管理"
"システムから除外しておくべきです。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:130
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
msgid "Activating a virtual environment"
msgstr "仮想環境を活性化する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:134
msgid ""
"Before you can start installing or using packages in your virtual "
"environment you'll need to *activate* it. Activating a virtual environment "
"will put the virtual environment-specific ``python`` and ``pip`` executables "
"into your shell's ``PATH``."
msgstr ""
"仮想環境に (依存先の) パッケージをインストールして使用できるようにするには、"
"まず *仮想環境* を活性化しなければなりません。仮想環境を活性化すると、その仮"
"想環境に特有の ``python`` と ``pip`` の実行ファイルがシェルの ``PATH`` 変数に"
"追加されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:149
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:151
msgid ""
"You can confirm you're in the virtual environment by checking the location "
"of your Python interpreter:"
msgstr ""
"仮想環境内に入ったことを確認するには、どの Python インタープリタを使っている"
"かを確かめればよいでしょう:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:164
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:166
msgid "It should be in the ``env`` directory:"
msgstr "``env`` ディレクトリの中のものを使っているはずです。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:179
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:181
msgid ""
"As long as your virtual environment is activated pip will install packages "
"into that specific environment and you'll be able to import and use packages "
"in your Python application."
msgstr ""
"仮想環境の中で作業する限り、pip はパッケージをその仮想環境内にインストール"
"し、Python アプリケーションはそのパッケージをインポートして使用することができ"
"ます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:185
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:187
msgid "Leaving the virtual environment"
msgstr "仮想環境から離脱する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:187
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:189
msgid ""
"If you want to switch projects or otherwise leave your virtual environment, "
"simply run:"
msgstr ""
"プロジェクトを切り替えるなどで仮想環境から離脱したい時は、このようにしてくだ"
"さい:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:193
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:195
msgid ""
"If you want to re-enter the virtual environment just follow the same "
"instructions above about activating a virtual environment. There's no need "
"to re-create the virtual environment."
msgstr ""
"もう一度仮想環境に入りたい場合は、仮想環境の活性化に関する上述のやり方に従う"
"だけです。仮想環境を再作成する必要はありません。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:198
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:200
msgid "Installing packages"
msgstr "パッケージのインストール"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:200
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:202
msgid ""
"Now that you're in your virtual environment you can install packages. Let's "
"install the `Requests`_ library from the :term:`Python Package Index (PyPI)`:"
msgstr ""
"これであなたは仮想環境内に居て、パッケージをインストールすることができるよう"
"になりました。 :term:`Python パッケージインデックス (PyPI)` から `Requests`_ "
"ライブラリをインストールしましょう:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:215
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:217
msgid ""
"pip should download requests and all of its dependencies and install them:"
msgstr ""
"pip が requests とその依存先パッケージをすべてダウンロードしてインストールす"
"るはずです:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:236
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:238
msgid "Installing specific versions"
msgstr "特定のバージョンをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:238
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:240
msgid ""
"pip allows you to specify which version of a package to install using :term:"
"`version specifiers <Version Specifier>`. For example, to install a specific "
"version of ``requests``:"
msgstr ""
":term:`バージョン指定子 <VersionSpecifire>` を使えば、 pip でパッケージのバー"
"ジョンを指定してインストールすることができます。例えば、 ``requests`` の特定"
"のバージョンをインストールするなら:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:254
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:256
msgid "To install the latest ``2.x`` release of requests:"
msgstr "requests の最新の ``2.x`` リリースをインストールするには:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:268
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:270
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""
"``--pre`` フラグを使ってパッケージのリリース前のバージョンをインストールする"
"には:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:284
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:286
msgid "Installing extras"
msgstr "パッケージの extra 部分をインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:286
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:288
msgid ""
"Some packages have optional `extras`_. You can tell pip to install these by "
"specifying the extra in brackets:"
msgstr ""
"必須ではない `extra`_ 部分を持つものがパッケージの中にはあります。extra の名"
"前を角括弧([, ])の中に書くことで pip にインストールするように指示することがで"
"きます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:306
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:308
msgid "Installing from source"
msgstr "ソースコードからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:308
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:310
msgid "pip can install a package directly from source, for example:"
msgstr ""
"pip はソースコードから直接にパッケージをインストールすることができます。例え"
"ば:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:324
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:326
msgid ""
"Additionally, pip can install packages from source in :doc:`development mode "
"<setuptools:userguide/development_mode>`, meaning that changes to the source "
"directory will immediately affect the installed package without needing to "
"re-install:"
msgstr ""
"さらに、 pip は :doc:`開発モード <setuptools:userguide/development_mode>` で"
"ソースコードからパッケージをインストールすることができます。つまり、ソース"
"コードを修正すると、再インストールしなくても、すぐにインストール済みのパッ"
"ケージに反映されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:343
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:345
msgid "Installing from version control systems"
msgstr "バージョン管理システムからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:345
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:347
msgid ""
"pip can install packages directly from their version control system. For "
"example, you can install directly from a git repository:"
msgstr ""
"pip は、バージョン管理システムから直接に、パッケージをインストールすることが"
"できます。例えば、git リポジトリから直接にインストールするには:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:352
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:354
msgid ""
"For more information on supported version control systems and syntax, see "
"pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"サポートされているバージョン管理システムや文法について、詳しくは :ref:`VCS サ"
"ポート <pip:VCS Support>` の pip の説明文書を見てください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:357
#: ../source/tutorials/installing-packages.rst:577
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:359
msgid "Installing from local archives"
msgstr "ローカルアーカイブからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:359
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:361
msgid ""
"If you have a local copy of a :term:`Distribution Package`'s archive (a zip, "
"wheel, or tar file) you can install it directly with pip:"
msgstr ""
"もし :term:`配布パッケージ <Distribution Package>` のアーカイブ ( zip や "
"wheel や tar ファイル) をローカルに持っているなら、 pip でそこから直接にイン"
"ストールすることができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:374
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:376
msgid ""
"If you have a directory containing archives of multiple packages, you can "
"tell pip to look for packages there and not to use the :term:`Python Package "
"Index (PyPI)` at all:"
msgstr ""
"複数のパッケージのアーカイブを置いたディレクトリを pip に探索させるようにし"
"て、:term:`Python パッケージインデックス <Python Package Index (PyPI)>` を全"
"く利用しないということも可能です:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:390
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:392
msgid ""
"This is useful if you are installing packages on a system with limited "
"connectivity or if you want to strictly control the origin of distribution "
"packages."
msgstr ""
"この機能は、限定的なインターネット接続しか得られないシステムでパッケージをイ"
"ンストールする際や、配布物パッケージの出自を厳密に管理したい時には便利です。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:396
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:398
msgid "Using other package indexes"
msgstr "他のパッケージインデックスを使う"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:398
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:400
msgid ""
"If you want to download packages from a different index than the :term:"
"`Python Package Index (PyPI)`, you can use the ``--index-url`` flag:"
msgstr ""
":term:`Python パッケージインデックス <Python Package Index (PyPI)>` 以外のと"
"ころからパッケージをダウンロードしたいのであれば、 ``--index-url`` オプション"
"でできます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:413
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:415
msgid ""
"If you want to allow packages from both the :term:`Python Package Index "
"(PyPI)` and a separate index, you can use the ``--extra-index-url`` flag "
"instead:"
msgstr ""
":term:`Python パッケージインデックス <Python Package Index (PyPI)>` と別のイ"
"ンデックスを同時に使いたいのであれば、 ``--extra-index-url`` オプションででき"
"ます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:430
#: ../source/tutorials/installing-packages.rst:397
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:432
msgid "Upgrading packages"
msgstr "パッケージを更新する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:432
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:434
msgid ""
"pip can upgrade packages in-place using the ``--upgrade`` flag. For example, "
"to install the latest version of ``requests`` and all of its dependencies:"
msgstr ""
"pip に ``--upgrade`` オプションを与えるとパッケージの入れ替え更新ができます。"
"例えば、 ``requests`` とその依存先パッケージの最新版をインストールしたいのな"
"ら:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:448
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:450
msgid "Using requirements files"
msgstr "requirements ファイルを使う"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:450
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:452
msgid ""
"Instead of installing packages individually, pip allows you to declare all "
"dependencies in a :ref:`Requirements File <pip:Requirements Files>`. For "
"example you could create a :file:`requirements.txt` file containing:"
msgstr ""
"パッケージをひとつひとつインストールする代わりに、pip では :ref:"
"`Requirements ファイル <pip:Requirements Files>` にすべての依存先パッケージを"
"列挙しておくことができます。例えば、 :file:`requirements.txt` を下記を含むよ"
"うに作成しておいて:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:459
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:461
msgid ""
"And tell pip to install all of the packages in this file using the ``-r`` "
"flag:"
msgstr ""
"このファイルに書いてあるパッケージを全てインストールするようにと、 ``-r`` オ"
"プションを与えることで pip に指示します:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:474
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:476
msgid "Freezing dependencies"
msgstr "依存関係を凍結する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:476
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:478
msgid ""
"Pip can export a list of all installed packages and their versions using the "
"``freeze`` command:"
msgstr ""
"Pip では、 ``freeze`` コマンドを使うことで、インストール済みの全パッケージの"
"バージョン付きのリストを取り出すことができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:491
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:493
msgid "Which will output a list of package specifiers such as:"
msgstr "それは、次に挙げるようなパッケージ指定子のリストを出力します:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:507
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:509
msgid ""
"This is useful for creating :ref:`pip:Requirements Files` that can re-create "
"the exact versions of all packages installed in an environment."
msgstr ""
"これは、ある環境にインストールされているパッケージを正確にそのバージョンで再"
"作成することができる :ref:`pip:Requirements ファイル <pip:Requirements "
"Files>` を作るのに便利です。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:2
msgid "Making a PyPI-friendly README"
msgstr "PyPI によく合う README を作る"

#: ../source/guides/making-a-pypi-friendly-readme.rst:4
msgid ""
"README files can help your users understand your project and can be used to "
"set your project's description on PyPI. This guide helps you create a README "
"in a PyPI-friendly format and include your README in your package so it "
"appears on PyPI."
msgstr ""
"README ファイルは、あなたのパッケージのユーザがプロジェクトを理解するのを助"
"け、プロジェクトの説明をするのに使われています。このガイドでは、PyPI によく合"
"う形で README を作成するのを助け、あなたのパッケージの README が PyPI で表示"
"されるようにします。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:9
msgid "Creating a README file"
msgstr "README ファイルを作成する"

#: ../source/guides/making-a-pypi-friendly-readme.rst:11
msgid ""
"README files for Python projects are often named ``README``, ``README.txt``, "
"``README.rst``, or ``README.md``."
msgstr ""
"Python プロジェクトにおける READMEファイルは、しばしば ``README`` ・ "
"``README.txt`` ・ ``README.rst`` ・ ``README.md`` などと命名されます。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:13
msgid ""
"For your README to display properly on PyPI, choose a markup language "
"supported by PyPI. Formats supported by `PyPI's README renderer <https://"
"github.com/pypa/readme_renderer>`_ are:"
msgstr ""
"あなたの README を PyPI で正しく表示するためには、PyPI がサポートするマーク"
"アップ言語を選択する必要があります。 `PyPI の README レンダラ <https://"
"github.com/pypa/readme_renderer>`_ としてサポートされているのは:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:16
msgid "plain text"
msgstr "プレーンテキスト"

#: ../source/guides/making-a-pypi-friendly-readme.rst:17
msgid ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (without "
"Sphinx extensions)"
msgstr ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (Sphinx 拡張な"
"し)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:18
msgid ""
"Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by "
"default, or `CommonMark <https://commonmark.org/>`_)"
msgstr ""
"マークダウン (デフォルトでは `GitHub Flavored Markdown <https://github."
"github.com/gfm/>`_ 、あるいは `CommonMark <https://commonmark.org/>`_)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:21
msgid ""
"It's customary to save your README file in the root of your project, in the "
"same directory as your :file:`setup.py` file."
msgstr ""
"README ファイルについては、 :file:`setup.py` ファイルと同様にプロジェクトの"
"ルートディレクトリに置くのが慣習になっています。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:25
msgid "Including your README in your package's metadata"
msgstr "README にパッケージのメタデータを含ませる"

#: ../source/guides/making-a-pypi-friendly-readme.rst:27
msgid ""
"To include your README's contents as your package description, set your "
"project's ``Description`` and ``Description-Content-Type`` metadata, "
"typically in your project's :file:`setup.py` file."
msgstr ""
"README の内容をパッケージの説明として引用させるには、典型的にはプロジェクト"
"の :file:`setup.py` ファイルに、プロジェクトの ``Description`` と "
"``Description-Content-Type`` のふたつのメタデータを設定しておきましょう。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:33
msgid ":ref:`description-optional`"
msgstr ":ref:`description-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:34
msgid ":ref:`description-content-type-optional`"
msgstr ":ref:`description-content-type-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:36
msgid ""
"For example, to set these values in a package's :file:`setup.py` file, use "
"``setup()``'s ``long_description`` and ``long_description_content_type``."
msgstr ""
"例えば、これらの値をパッケージの :file:`setup.py` ファイルに設定するために"
"は、 ``setup()`` の ``long_description`` と "
"``long_description_content_type`` を使ってください。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:39
msgid ""
"Set the value of ``long_description`` to the contents (not the path) of the "
"README file itself. Set the ``long_description_content_type`` to an accepted "
"``Content-Type``-style value for your README file's markup, such as ``text/"
"plain``, ``text/x-rst`` (for reStructuredText), or ``text/markdown``."
msgstr ""
"``long_desctription`` には README ファイルの内容それ自体 (パスではなく) を設"
"定してください。 ``long_description_content_type`` には、README ファイルの"
"マークアップの型を受け入れ可能な ``Content-Type`` 風の書き方、すなわち "
"``text/plain`` ・ ``text/x-rst`` (reStructuredText の場合) ・ ``text/"
"markdown`` から選んで設定してください。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:45
msgid ""
"If you're using GitHub-flavored Markdown to write a project's description, "
"ensure you upgrade the following tools:"
msgstr ""
"プロジェクトの説明を GitHub 方言のマークダウンで書くのであれば、以下のツール"
"を更新しておくことを忘れないでください:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:60
msgid "The minimum required versions of the respective tools are:"
msgstr "各ツールは少なくとも次のバージョンでなければなりません:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:62
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:63
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:64
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:66
msgid ""
"It's recommended that you use ``twine`` to upload the project's distribution "
"packages:"
msgstr ""
"プロジェクトの配布物パッケージをアップロードする時は ``twine`` を使うことを推"
"奨します。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:72
msgid ""
"For example, see this :file:`setup.py` file, which reads the contents of :"
"file:`README.md` as ``long_description`` and identifies the markup as GitHub-"
"flavored Markdown:"
msgstr ""
"例えば、この :file:`setup.py` ファイルでは、 :file:`README.md` の内容を読み"
"取って ``long_description`` としていて、マークアップ方式は GitHub 方言のマー"
"クダウンを指定しています:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:94
msgid "Validating reStructuredText markup"
msgstr "reStructuredText マークアップを検証する"

#: ../source/guides/making-a-pypi-friendly-readme.rst:96
msgid ""
"If your README is written in reStructuredText, any invalid markup will "
"prevent it from rendering, causing PyPI to instead just show the README's "
"raw source."
msgstr ""
"README を reStructuredText で書いている場合、無効なマークアップがひとつでもあ"
"ると描画できないので、PyPI 上では README の生のソースコードを表示するだけに"
"なってしまいます。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:99
msgid ""
"Note that Sphinx extensions used in docstrings, such as :doc:`directives "
"<sphinx:usage/restructuredtext/directives>` and :doc:`roles <sphinx:usage/"
"restructuredtext/roles>` (e.g., \"``:py:func:`getattr```\" or \"``:ref:`my-"
"reference-label```\"), are not allowed here and will result in error "
"messages like \"``Error: Unknown interpreted text role \"py:func\".``\"."
msgstr ""
":doc:`ディレクティブ <sphinx:usage/restructuredtext/directives>` と :doc:`"
"ロール <sphinx:usage/restructuredtext/roles>` (例えば \"``:py:func:"
"`getattr```\" や \"``:ref:`my-reference-label```\") のように docstrings 内で"
"使われる Sphinx 拡張はこの場所では使用を許されず、 ``Error: テキストロール "
"\"py:func\" が見つかりません。<Unknown interpreted text role \"py:func\".>`` "
"といったエラーメッセージを出すことになります。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:104
msgid ""
"You can check your README for markup errors before uploading as follows:"
msgstr ""
"README ファイルのマークアップに関するエラーをアップロードする前に確認するに"
"は、次のようにします:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:106
msgid ""
"Install the latest version of `twine <https://github.com/pypa/twine>`_; "
"version 1.12.0 or higher is required:"
msgstr ""
"最新版の `twine <https://github.com/pypa/twine>`_ をインストールします; バー"
"ジョン 1.12.0 またはそれ以上のものが必須です:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:121
msgid ""
"Build the sdist and wheel for your project as described under :ref:"
"`Packaging Your Project`."
msgstr ""
":ref:`あなたのプロジェクトをパッケージする <Packaging Your Project>` に記述さ"
"れているように、プロジェクトの sdist と wheel をビルドします。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:124
msgid "Run ``twine check`` on the sdist and wheel:"
msgstr "sdist と wheel に対して ``twine check`` を実行します:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:130
msgid ""
"This command will report any problems rendering your README.  If your markup "
"renders fine, the command will output ``Checking distribution FILENAME: "
"Passed``."
msgstr ""
"このコマンドは README のレンダリングに関する問題があれば報告するでしょう。"
"マークアップのレンダリングに問題がなければ、 ``配布物を検査しています "
"FILENAME: 合格 <Checking distribution FILENAME: Passed>`` と出力するでしょ"
"う。"

#: ../source/guides/migrating-to-pypi-org.rst:6
msgid "Migrating to PyPI.org"
msgstr "PyPI.org へ移設する"

#: ../source/guides/migrating-to-pypi-org.rst:8
#: ../source/guides/multi-version-installs.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:9
#: ../source/guides/supporting-windows-using-appveyor.rst:7
msgid "Obsolete"
msgstr "古い情報"

#: ../source/guides/migrating-to-pypi-org.rst:10
msgid ""
":term:`pypi.org` is the new, rewritten version of PyPI that has replaced the "
"legacy PyPI code base. It is the default version of PyPI that people are "
"expected to use. These are the tools and processes that people will need to "
"interact with ``PyPI.org``."
msgstr ""
":term:`pypi.org` は、新しくて書き直されたバージョンの PyPI で、以前の PyPI "
"コードベースを置き換えるものです。みなさんが普通はこれを使うものと期待されて"
"いるバージョンの PyPI です。 ``PyPI.org`` とやり取りするためのツールや手順が"
"あります。"

#: ../source/guides/migrating-to-pypi-org.rst:16
msgid "Publishing releases"
msgstr "リリースを公開する"

#: ../source/guides/migrating-to-pypi-org.rst:18
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""
"2016年9月以降、 ``pypi.org`` がデフォルトのアップロードプラットフォームです。"

#: ../source/guides/migrating-to-pypi-org.rst:20
msgid ""
"Uploads through ``pypi.python.org`` were *switched off* on **July 3, 2017**. "
"As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""
"``pypi.python.org`` を通じたアップロードは **2017年7月3日** に使用不可能にな"
"りました。2018年4月13日以降は、``pypi.org`` が PyPI のURLです。"

#: ../source/guides/migrating-to-pypi-org.rst:23
msgid ""
"The recommended way to migrate to PyPI.org for uploading is to ensure that "
"you are using a new enough version of your upload tool."
msgstr ""
"PyPI.org へ移行するためのアップロードでは、アップロードに使うツールが十分に新"
"しいバージョンのものであることを確実にしておくことが推奨されます。"

#: ../source/guides/migrating-to-pypi-org.rst:26
msgid ""
"The default upload settings switched to ``pypi.org`` in the following "
"versions:"
msgstr ""
"``pypi.org`` に転換するためのデフォルトのアップロード設定は次のようなバージョ"
"ンです:"

#: ../source/guides/migrating-to-pypi-org.rst:28
msgid "``twine`` 1.8.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:29
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:30
msgid "Python 2.7.13 (``distutils`` update)"
msgstr "Python 2.7.13 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:31
msgid "Python 3.4.6 (``distutils`` update)"
msgstr "Python 3.4.6 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:32
msgid "Python 3.5.3 (``distutils`` update)"
msgstr "Python 3.5.3 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:33
msgid "Python 3.6.0 (``distutils`` update)"
msgstr "Python 3.6.0 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:35
msgid ""
"In addition to ensuring you're on a new enough version of the tool for the "
"tool's default to have switched, you must also make sure that you have not "
"configured the tool to override its default upload URL. Typically this is "
"configured in a file located at :file:`$HOME/.pypirc`. If you see a file "
"like:"
msgstr ""
"ツールのデフォルト設定が切り替わっている程に十分に新しいツールを使っているこ"
"とを確認するのに加えて、そのデフォルトのアップロード先 URL を上書きするような"
"設定をしていないことを確実にしてください。これは典型的には file:`$HOME/."
"pypirc` で設定されています。もしこんなファイルを目にするようであれば:"

#: ../source/guides/migrating-to-pypi-org.rst:52
msgid ""
"Then simply delete the line starting with ``repository`` and you will use "
"your upload tool's default URL."
msgstr ""
"その時は、 ``repository`` で始まる行を削除するだけで、アップロードツールのデ"
"フォルト URL を使うようになります。"

#: ../source/guides/migrating-to-pypi-org.rst:55
msgid ""
"If for some reason you're unable to upgrade the version of your tool to a "
"version that defaults to using PyPI.org, then you may edit :file:`$HOME/."
"pypirc` and include the ``repository:`` line, but use the value ``https://"
"upload.pypi.org/legacy/`` instead:"
msgstr ""
"なんらかの事情でPyPI.orgをデフォルトで使うところまでアップロードツールのバー"
"ジョンを上げられないのであれば、 :file:`$HOME/.pypirc` で ``repository:`` 行"
"が ``https://upload.pypi.org/legacy/`` を指すように編集しても構いません。"

#: ../source/guides/migrating-to-pypi-org.rst:71
msgid ""
"(``legacy`` in this URL refers to the fact that this is the new server "
"implementation's emulation of the legacy server implementation's upload API.)"
msgstr ""
"(この URL の中の ``legacy`` は、新しいサーバ実装が、以前のサーバ実装のアップ"
"ロード API をエミュレートしているという事実を示しています。)"

#: ../source/guides/migrating-to-pypi-org.rst:77
msgid "Registering package names & metadata"
msgstr "パッケージの名前とメタデータを登録する"

#: ../source/guides/migrating-to-pypi-org.rst:79
msgid ""
"Explicit pre-registration of package names with the ``setup.py register`` "
"command prior to the first upload is no longer required, and is not "
"currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""
"初回のアップロードに先立って ``setup.py register`` コマンドでパッケージの名前"
"を明示的に先行登録する必要がなくなり、PyPI.org における以前のアップロード "
"API のエミュレーションではサポートされなくなりました。"

#: ../source/guides/migrating-to-pypi-org.rst:83
msgid ""
"As a result, attempting explicit registration after switching to using PyPI."
"org for uploads will give the following error message::"
msgstr ""
"その結果、アップロードに PyPI.org を使うように切り替えた後は明示的な登録の試"
"行は次のエラーメッセージを返すでしょう::"

#: ../source/guides/migrating-to-pypi-org.rst:88
msgid ""
"The solution is to skip the registration step, and proceed directly to "
"uploading artifacts."
msgstr ""
"解決方法は登録の段階を飛ばしていきなり作品のアップロードへと進むことです。"

#: ../source/guides/migrating-to-pypi-org.rst:93
#: ../source/guides/using-testpypi.rst:5
msgid "Using TestPyPI"
msgstr "TestPyPI を使う"

#: ../source/guides/migrating-to-pypi-org.rst:95
msgid ""
"Legacy TestPyPI (testpypi.python.org) is no longer available; use `test.pypi."
"org <https://test.pypi.org>`_ instead. If you use TestPyPI, you must update "
"your :file:`$HOME/.pypirc` to handle TestPyPI's new location, by replacing "
"``https://testpypi.python.org/pypi`` with ``https://test.pypi.org/legacy/``, "
"for example:"
msgstr ""
"以前からの TestPyPI (testpypi.python.org) はもはや利用できませんので、代わり"
"に `test.pypi.org <https://test.pypi.org>`_ を使ってください。 TestPyPI を使"
"うのであれば、 :file:`$HOME/.pypirc` で ``https://testpypi.python.org/pypi`` "
"を ``https://test.pypi.org/legacy/`` に置き換えるなどして、 TestPyPI の新しい"
"場所を使うように設定しなければなりません。例えば:"

#: ../source/guides/migrating-to-pypi-org.rst:117
msgid "Registering new user accounts"
msgstr "新しいユーザアカウントを登録する"

#: ../source/guides/migrating-to-pypi-org.rst:119
msgid ""
"In order to help mitigate spam attacks against PyPI, new user registration "
"through ``pypi.python.org`` was *switched off* on **February 20, 2018**. New "
"user registrations at ``pypi.org`` are open."
msgstr ""
"PyPI に対するスパム攻撃を緩和する補助するために、 ``pypi.python.org`` におけ"
"る新規ユーザ登録は **2018年2月20日** に *終了* しました。 ``pypi.org`` での新"
"規ユーザ登録が始まっています。"

#: ../source/guides/migrating-to-pypi-org.rst:125
msgid "Browsing packages"
msgstr "パッケージを一覧する"

#: ../source/guides/migrating-to-pypi-org.rst:127
msgid ""
"While ``pypi.python.org`` is may still be used in links from other PyPA "
"documentation, etc, the default interface for browsing packages is ``pypi."
"org``. The domain pypi.python.org now redirects to pypi.org, and may be "
"disabled sometime in the future."
msgstr ""
"``pypi.python.org`` が他の PyPA 説明文書などからのリンクに使われているとして"
"も、パッケージを一覧するデフォルトのインタフェイスは ``pypi.org`` です。pupi."
"python.org ドメイン名は今は pypi.org へリダイレクトされていて、いつか将来の時"
"点で無効にされるでしょう。"

#: ../source/guides/migrating-to-pypi-org.rst:134
msgid "Downloading packages"
msgstr "パッケージをダウンロードする"

#: ../source/guides/migrating-to-pypi-org.rst:136
msgid "``pypi.org`` is the default host for downloading packages."
msgstr ""
"``pypi.org`` が、パッケージをダウンロードする際のデフォルトのホストです。"

#: ../source/guides/migrating-to-pypi-org.rst:139
msgid "Managing published packages and releases"
msgstr "公開済みパッケージとリリースを管理する"

#: ../source/guides/migrating-to-pypi-org.rst:141
msgid ""
"``pypi.org`` provides a fully functional interface for logged in users to "
"manage their published packages and releases."
msgstr ""
"``pypi.org`` では、ログインしたユーザが自分が公開したプロジェクトやリリースに"
"ついて管理するための全機能を提供しています。"

#: ../source/guides/multi-version-installs.rst:6
msgid "Multi-version installs"
msgstr "複数バージョンのインストール"

#: ../source/guides/multi-version-installs.rst:11
msgid ""
"easy_install allows simultaneous installation of different versions of the "
"same project into a single environment shared by multiple programs which "
"must ``require`` the appropriate version of the project at run time (using "
"``pkg_resources``)."
msgstr ""
"easy_install を使えば、異なるバージョンの同一プロジェクトをひとつの環境に同時"
"にインストールして、なおかつ、それぞれ動作時にプロジェクトの特定のバージョン"
"を (``pkg_resources`` での指定を通じて) ``要求 <require>`` する複数のプログラ"
"ムをその環境で動作させることができます。"

#: ../source/guides/multi-version-installs.rst:16
msgid ""
"For many use cases, virtual environments address this need without the "
"complication of the ``require`` directive. However, the advantage of "
"parallel installations within the same environment is that it works for an "
"environment shared by multiple applications, such as the system Python in a "
"Linux distribution."
msgstr ""
"多くのユースケースでは、 ``require`` ディレクティブを混乱させる事なく、仮想環"
"境がこのような需要を満たします。しかしながら、同一環境内に(複数バージョンを)"
"並行してインストールすることの利点は、Linux 配布物におけるシステム側の "
"Python のように、複数のアプリケーションによって共有される環境で動作することで"
"す。"

#: ../source/guides/multi-version-installs.rst:22
msgid ""
"The major limitation of ``pkg_resources`` based parallel installation is "
"that as soon as you import ``pkg_resources`` it locks in the *default* "
"version of everything which is already available on sys.path. This can cause "
"problems, since ``setuptools`` created command line scripts use "
"``pkg_resources`` to find the entry point to execute. This means that, for "
"example, you can't use ``require`` tests invoked through ``nose`` or a WSGI "
"application invoked through ``gunicorn`` if your application needs a non-"
"default version of anything that is available on the standard ``sys.path`` - "
"the script wrapper for the main application will lock in the version that is "
"available by default, so the subsequent ``require`` call in your own code "
"fails with a spurious version conflict."
msgstr ""
"並行インストールに立脚した ``pkg_resources`` の主要な制限事項は、 "
"``pkg_resources`` をインポートするや否や、sys.path 上で既に利用可能なものはす"
"べてそのバージョンに *デフォルト* バージョンが固定されてしまうことです。コマ"
"ンドラインスクリプトで生成された ``setuptools`` が ``pkg_resources`` を使って"
"プログラム実行のためのエントリポイントを探索するので、これは問題を引き起こす"
"かもしれません。これが意味するところは、例えば、そのアプリケーションが、標準"
"の ``sys.path`` 上に存在するものなら何であれ、それとは異なるバージョンを必要"
"とする場合に、 ``nose`` を通じて ``require`` テストを使ったり ``gunicorn`` を"
"通じて WSGI アプリケーションを呼び出したりすることができない - メインのアプリ"
"ケーションのためのスクリプトラッパがデフォルトで利用可能なバージョンに固定さ"
"れてしまって、各アプリケーションの引き続く ``require`` 呼び出しが見せかけの"
"バージョン衝突によって失敗してしまう、ということです。"

#: ../source/guides/multi-version-installs.rst:34
msgid ""
"This can be worked around by setting all dependencies in ``__main__."
"__requires__`` before importing ``pkg_resources`` for the first time, but "
"that approach does mean that standard command line invocations of the "
"affected tools can't be used - it's necessary to write a custom wrapper "
"script or use ``python3 -c '<command>'`` to invoke the application's main "
"entry point directly."
msgstr ""
"最初に ``pkg_resources`` をインポートするよりも前に ``__main__.__requires__``"
" の中のすべての依存関係を設定しておくことでこの問題を回避することができますが"
"、このアプローチでは影響を受けるツールを標準のコマンドラインからの呼び出しで"
"使うことができないことになります - つまり、独自のラッパスクリプトを書くか、"
"アプリケーションの main エントリポイントを直接に呼び出すための ``python -c "
"'<command>'`` を使うかしなければなりません。"

#: ../source/guides/multi-version-installs.rst:41
msgid ""
"Refer to the `pkg_resources documentation <https://setuptools.readthedocs.io/"
"en/latest/pkg_resources.html#workingset-objects>`__ for more details."
msgstr ""
"さらに詳しい情報については、 `pkg_resources 説明文書 <https://setuptools."
"readthedocs.io/en/latest/pkg_resources.html#workingset-objects>`__ を参照して"
"ください。"

#: ../source/guides/packaging-binary-extensions.rst:5
msgid "Packaging binary extensions"
msgstr "バイナリ拡張をパッケージングする"

#: ../source/guides/packaging-binary-extensions.rst:8
msgid "2013-12-08"
msgstr "2013-12-08"

#: ../source/guides/packaging-binary-extensions.rst:10
msgid ""
"One of the features of the CPython reference interpreter is that, in "
"addition to allowing the execution of Python code, it also exposes a rich C "
"API for use by other software. One of the most common uses of this C API is "
"to create importable C extensions that allow things which aren't always easy "
"to achieve in pure Python code."
msgstr ""
"CPython の参照インタープリタの機能の一つは、Python のコードを実行することに加"
"えて、他のソフトウェアによる利用のために豊富な C の API を露出することです。"
"この C の API の最もよくある利用方法は、純粋な Python のコードでは必ずしも簡"
"単には達成できないようなことをインポート可能な C 拡張として作成することです。"

#: ../source/guides/packaging-binary-extensions.rst:20
msgid "An overview of binary extensions"
msgstr "バイナリ拡張の概要"

#: ../source/guides/packaging-binary-extensions.rst:23
msgid "Use cases"
msgstr "ユースケース"

#: ../source/guides/packaging-binary-extensions.rst:25
msgid ""
"The typical use cases for binary extensions break down into just three "
"conventional categories:"
msgstr ""
"バイナリ拡張の典型的なユースケースは、たった３個の伝統的なカテゴリに分類され"
"ます:"

#: ../source/guides/packaging-binary-extensions.rst:28
msgid ""
"**accelerator modules**: these modules are completely self-contained, and "
"are created solely to run faster than the equivalent pure Python code runs "
"in CPython. Ideally, accelerator modules will always have a pure Python "
"equivalent to use as a fallback if the accelerated version isn't available "
"on a given system. The CPython standard library makes extensive use of "
"accelerator modules. *Example*: When importing ``datetime``, Python falls "
"back to the `datetime.py <https://github.com/python/cpython/blob/main/Lib/"
"datetime.py>`_ module if the C implementation ( `_datetimemodule.c <https://"
"github.com/python/cpython/blob/main/Modules/_datetimemodule.c>`_) is not "
"available."
msgstr ""
"**アクセラレータモジュール**: これらのモジュールは完全に自己完結型で、"
"CPython で同機能の純粋なPython コードを走らせるよりも速く動作するためにだけ作"
"成されます。アクセラレートされたバージョンが当該システム上で動作しなかった時"
"のために、アクセラレータモジュールには同機能の純粋なPythonのコードを予備品と"
"して同梱していることが理想的です。CPython の標準ライブラリはアクセラレータモ"
"ジュールを多用しています。*例*: ``datetime`` をインポートする際、C での実装 "
"(`_datetimemodule.c <https://github.com/python/cpython/blob/main/Modules/"
"_datetimemodule.c>`_) が使えない時には、`datetime.py <https://github.com/"
"python/cpython/blob/main/Lib/datetime.py>`_ にフォールバックします。"

#: ../source/guides/packaging-binary-extensions.rst:39
msgid ""
"**wrapper modules**: these modules are created to expose existing C "
"interfaces to Python code. They may either expose the underlying C interface "
"directly, or else expose a more \"Pythonic\" API that makes use of Python "
"language features to make the API easier to use. The CPython standard "
"library makes extensive use of wrapper modules. *Example*: `functools.py "
"<https://github.com/python/cpython/blob/main/Lib/functools.py>`_ is a Python "
"module wrapper for `_functoolsmodule.c <https://github.com/python/cpython/"
"blob/main/Modules/_functoolsmodule.c>`_."
msgstr ""
"**ラッパモジュール**: これらのモジュールは、既存の C のインタフェースを "
"Python に見せるために作られます。それらは C のインタフェースを直接に見せる"
"か、または、Python 言語の機能を使ってAPI をより使いやすくするようなもっと "
"\"Pythonic\" なやり方で見せるかします。CPython の標準ライブラリでは、ラッパモ"
"ジュールを多用しています。 *例*: `functools.py <https://github.com/python/"
"cpython/blob/main/Lib/functools.py>`_ は、 `_functoolsmodule.c <https://"
"github.com/python/cpython/blob/main/Modules/_functoolsmodule.c>`_ のための"
"ラッパモジュールです。"

#: ../source/guides/packaging-binary-extensions.rst:47
msgid ""
"**low-level system access**: these modules are created to access lower level "
"features of the CPython runtime, the operating system, or the underlying "
"hardware. Through platform specific code, extension modules may achieve "
"things that aren't possible in pure Python code. A number of CPython "
"standard library modules are written in C in order to access interpreter "
"internals that aren't exposed at the language level. *Example*: ``sys``, "
"which comes from `sysmodule.c <https://github.com/python/cpython/blob/main/"
"Python/sysmodule.c>`_."
msgstr ""
"**低レベルシステムアクセス**: これらのモジュールは、CPython ランタイムやオペ"
"レーティングシステム、あるいはさらに下層のハードウェアの低レベルの機能にアク"
"セスするために作成されています。プラットフォームに固有のコードを通して、純粋"
"な Python コードでは不可能なことを拡張モジュールが達成できるかもしれません。"
"結構な数の CPython の標準ライブラリモジュールが C で書かれていて、言語のレベ"
"ルには提供されていないようなインタープリタの内部にアクセスできるようになって"
"います。 *例*: ``sys`` は `sysmodule.c <https://github.com/python/cpython/"
"blob/main/Python/sysmodule.c>`_ から来ています。"

#: ../source/guides/packaging-binary-extensions.rst:56
msgid ""
"One particularly notable feature of C extensions is that, when they don't "
"need to call back into the interpreter runtime, they can release CPython's "
"global interpreter lock around long-running operations (regardless of "
"whether those operations are CPU or IO bound)."
msgstr ""
"C 言語拡張の特筆すべき機能は、インタプリタランタイムにコールバックする必要の"
"ない時には、 (CPU制約であろうとIO制約であろうと関わりなく) 長時間走り続ける操"
"作を包む CPython グローバルインタプリタロックを解放することができるということ"
"です。"

#: ../source/guides/packaging-binary-extensions.rst:61
msgid ""
"Not all extension modules will fit neatly into the above categories. The "
"extension modules included with NumPy, for example, span all three use cases "
"- they move inner loops to C for speed reasons, wrap external libraries "
"written in C, FORTRAN and other languages, and use low level system "
"interfaces for both CPython and the underlying operation system to support "
"concurrent execution of vectorised operations and to tightly control the "
"exact memory layout of created objects."
msgstr ""
"必ずしも全ての拡張モジュールが上記のカテゴリにぴたりと当て嵌まる訳ではありま"
"せん。例えば NumPy に含まれる拡張モジュールは３個のカテゴリのすべてにまたがっ"
"ています - 動作速度上の理由から内側のループを C 言語に移しているし、C 言語や "
"FORTRAN 言語その他で書かれた外部のライブラリをラップしているし、また、ベクタ"
"演算の並列実行や生成したオブジェクトのメモリレイアウトを正確な管理のために、 "
"CPython とその下にあるオペレーティングシステムの両方の低レベルなシステムイン"
"ターフェイスを利用しています。"

#: ../source/guides/packaging-binary-extensions.rst:71
msgid "Disadvantages"
msgstr "欠点"

#: ../source/guides/packaging-binary-extensions.rst:73
msgid ""
"The main disadvantage of using binary extensions is the fact that it makes "
"subsequent distribution of the software more difficult. One of the "
"advantages of using Python is that it is largely cross platform, and the "
"languages used to write extension modules (typically C or C++, but really "
"any language that can bind to the CPython C API) typically require that "
"custom binaries be created for different platforms."
msgstr ""
"バイナリ拡張を使うことの主たる欠点は、引き続くソフトウェア配布がより難しくな"
"ることです。Python を使う利点のひとつは非常に広範囲のクロスプラットフォームで"
"ある (訳注、同一の Python コードが広範囲の異種プラットフォームで動作する) こ"
"とですが、拡張モジュールを書くのに使われる言語 (典型的には C 言語や C++ だ"
"が、実際にはどんな言語でも CPython の C 言語 API にバインドできる) は異なるプ"
"ラットフォームには異なるバイナリを作成しなければならないのが普通なのです。"

#: ../source/guides/packaging-binary-extensions.rst:80
msgid "This means that binary extensions:"
msgstr "これが意味するところは、バイナリ拡張は:"

#: ../source/guides/packaging-binary-extensions.rst:82
msgid ""
"require that end users be able to either build them from source, or else "
"that someone publish pre-built binaries for common platforms"
msgstr ""
"エンドユーザがソースコードからビルドできるか、または、誰かが共通のプラット"
"フォーム向けにビルド済みのバイナリを公開するか、のいずれかでなければなりませ"
"ん"

#: ../source/guides/packaging-binary-extensions.rst:85
msgid ""
"may not be compatible with different builds of the CPython reference "
"interpreter"
msgstr "CPython 参照インタプリタのビルドが異なると互換性がないかもしれません"

#: ../source/guides/packaging-binary-extensions.rst:88
msgid ""
"often will not work correctly with alternative interpreters such as PyPy, "
"IronPython or Jython"
msgstr ""
"PyPy ・ IronPython ・ Jython のような代替インタプリタ上では動作しないことがし"
"ばしばです"

#: ../source/guides/packaging-binary-extensions.rst:91
msgid ""
"if handcoded, make maintenance more difficult by requiring that maintainers "
"be familiar not only with Python, but also with the language used to create "
"the binary extension, as well as with the details of the CPython C API."
msgstr ""
"もしハードコードされているなら、メンテナンス担当者が Python のみならずそのバ"
"イナリ拡張を作成するために使われている言語についてもCPython の C 言語 API に"
"ついても慣れ親しんでいることが要求されるので、メンテナンスがより難しくなるで"
"しょう。"

#: ../source/guides/packaging-binary-extensions.rst:96
msgid ""
"if a pure Python fallback implementation is provided, make maintenance more "
"difficult by requiring that changes be implemented in two places, and "
"introducing additional complexity in the test suite to ensure both versions "
"are always executed."
msgstr ""
"純粋な Python で書かれた退避先実装が用意されているなら、変更を実装するべき場"
"所が２箇所になるのと、両方の実装が常に実行されることを保証するテストスイート"
"を準備するために複雑さが増加することになるので、メンテナンスがより一層困難に"
"なります。"

#: ../source/guides/packaging-binary-extensions.rst:101
msgid ""
"Another disadvantage of relying on binary extensions is that alternative "
"import mechanisms (such as the ability to import modules directly from "
"zipfiles) often won't work for extension modules (as the dynamic loading "
"mechanisms on most platforms can only load libraries from disk)."
msgstr ""
"バイナリ拡張に依存することによるさらなる欠点は、 (例えば zip ファイルから直接"
"にインポートする能力など) 通常とは異なるインポート機構が、しばしば拡張モ"
"ジュールでは動作しない (ほとんどのプラットフォームでは動的ロード機構はディス"
"クからライブラリを読み込むことしかできないため) ということです。"

#: ../source/guides/packaging-binary-extensions.rst:108
msgid "Alternatives to handcoded accelerator modules"
msgstr "ハードコードされたアクセラレータモジュールの代わりとなるもの"

#: ../source/guides/packaging-binary-extensions.rst:110
msgid ""
"When extension modules are just being used to make code run faster (after "
"profiling has identified the code where the speed increase is worth "
"additional maintenance effort), a number of other alternatives should also "
"be considered:"
msgstr ""
"拡張モジュールが単純にプログラムを速く走らせるためだけに使われてい (て、プロ"
"ファイリングの結果、メンテナンス工数が増えることを甘受しても速度を上げること"
"に価値があると判断され) る時には、他の複数の選択肢も検討しておくべきです:"

#: ../source/guides/packaging-binary-extensions.rst:115
msgid ""
"look for existing optimised alternatives. The CPython standard library "
"includes a number of optimised data structures and algorithms (especially in "
"the builtins and the ``collections`` and ``itertools`` modules). The Python "
"Package Index also offers additional alternatives. Sometimes, the "
"appropriate choice of standard library or third party module can avoid the "
"need to create your own accelerator module."
msgstr ""
"既存の最適化された代替策を探す。CPython の標準ライブラリには、最適化された"
"データ構造やアルゴリズム (特に組み込み済みのものや ``collections`` および "
"``itertools`` モジュール) が多数含まれています。Python パッケージインデックス"
"にも他の代替となるパッケージがあります。時には、標準ライブラリや第三パーティ"
"のモジュールから適切なものを選択することで、自分自身でアクセラレータパッケー"
"ジを作成する必要に迫られないで済むでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:122
msgid ""
"for long running applications, the JIT compiled `PyPy interpreter <https://"
"www.pypy.org/>`__ may offer a suitable alternative to the standard CPython "
"runtime. The main barrier to adopting PyPy is typically reliance on other "
"binary extension modules - while PyPy does emulate the CPython C API, "
"modules that rely on that cause problems for the PyPy JIT, and the emulation "
"layer can often expose latent defects in extension modules that CPython "
"currently tolerates (frequently around reference counting errors - an object "
"having one live reference instead of two often won't break anything, but no "
"references instead of one is a major problem)."
msgstr ""
"長時間に渡って走り続けるアプリケーションに対しては、標準の CPython ランタイム"
"の代わりに JIT コンパイルされた `PyPy インタープリタ <https://www.pypy.org/"
">`__ を使うことが適切な代替策となるかもしれません。 PyPy を適用しようとする"
"時、典型的には他のバイナリ拡張モジュールへの依存が主たる障害になります - "
"PyPy が CPython の C 言語 API をエミュレートする一方で、その API に依存するモ"
"ジュールの側が PyPy の JIT に問題を引き起こし、また、エミュレーション層が "
"CPython では現在は許容されているような拡張モジュール側の潜在的な瑕疵 (参照カ"
"ウントに関係するエラーであることが多い - あるオブジェクトへの参照が２個あるは"
"ずのところが１個しかないという状態は何も悪さをしませんが、１個の参照のはずが"
"参照なしとなる場合が主な問題になります) をしばしば暴露してしまうのです。"

#: ../source/guides/packaging-binary-extensions.rst:132
msgid ""
"`Cython <https://cython.org/>`__ is a mature static compiler that can "
"compile most Python code to C extension modules. The initial compilation "
"provides some speed increases (by bypassing the CPython interpreter layer), "
"and Cython's optional static typing features can offer additional "
"opportunities for speed increases. Using Cython still carries the "
"`disadvantages`_ associated with using binary extensions, but has the "
"benefit of having a reduced barrier to entry for Python programmers "
"(relative to other languages like C or C++)."
msgstr ""
"`Cython <https://cython.org/>`__ は、ほとんどの Python コードを C 言語の拡張"
"モジュールに変換できる成熟した静的コンパイラです。当初のコンパイルでは、"
"(CPython のインタプリタ層をバイパスすることによって) いくらかの速度向上が見込"
"めるとともに、 Cython のオプション扱いの静的型付け機能によってさらに速度向上"
"の機会があるかもしれません。Cython の使用には、バイナリ拡張の使用に関連した `"
"欠点`_ がまだ残っていますが、Python プログラマにとって (C 言語や C++ のような"
"他言語に比べると) 参入障壁が低いという利点があります。"

#: ../source/guides/packaging-binary-extensions.rst:141
msgid ""
"`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members of "
"the scientific Python community, that aims to leverage LLVM to allow "
"selective compilation of pieces of a Python application to native machine "
"code at runtime. It requires that LLVM be available on the system where the "
"code is running, but can provide significant speed increases, especially for "
"operations that are amenable to vectorisation."
msgstr ""
"`Numba <http://numba.pydata.org/>`__ は新しめのツールで、LLVM を活用して "
"Python アプリケーションの一部分をランタイムに選択的にネイティブの機械コードに"
"コンパイルできるようにすることを目指している科学分野の Python コミュニティに"
"よって作成されました。この取り組みでは、コードが動作するシステムに LLVM が存"
"在していなければなりませんが、特にベクトル化が容易な操作について顕著な速度増"
"加を提供することができます。"

#: ../source/guides/packaging-binary-extensions.rst:150
msgid "Alternatives to handcoded wrapper modules"
msgstr "ハードコードされたラッパモジュールに対する代替策"

#: ../source/guides/packaging-binary-extensions.rst:152
msgid ""
"The C ABI (Application Binary Interface) is a common standard for sharing "
"functionality between multiple applications. One of the strengths of the "
"CPython C API (Application Programming Interface) is allowing Python users "
"to tap into that functionality. However, wrapping modules by hand is quite "
"tedious, so a number of other alternative approaches should be considered."
msgstr ""
"C 言語 ABI (アプリケーションバイナリインタフェイス <Application Binary "
"Interface>)は、複数のアプリケーションの間で機能を共有する上での一般的な標準で"
"す。CPython の C 言語 API (アプリケーションプログラミングインタフェイス "
"<Application Programming Interface>) を使えば Python のユーザがその機能に入り"
"込むことができます。しかしながら、手動でモジュールごとにラッピングしていくの"
"はうんざりするような作業なので、いくつもの代替アプローチが検討されるべきで"
"す。"

#: ../source/guides/packaging-binary-extensions.rst:158
msgid ""
"The approaches described below don't simplify the distribution case at all, "
"but they *can* significantly reduce the maintenance burden of keeping "
"wrapper modules up to date."
msgstr ""
"以下に記述するアプローチは、単に配布物での事例ということは全くなく、むしろ"
"ラッパモジュールを最新に保つというメンテナンス上の重荷を大いに軽減することが"
"できるものです。"

#: ../source/guides/packaging-binary-extensions.rst:162
msgid ""
"In addition to being useful for the creation of accelerator modules, `Cython "
"<https://cython.org/>`__ is also widely used for creating wrapper modules "
"for C or C++ APIs. It involves wrapping the interfaces by hand, which gives "
"a wide range of freedom in designing and optimising the wrapper code, but "
"may not be a good choice for wrapping very large APIs quickly. See the `list "
"of third-party tools <https://github.com/cython/cython/wiki/AutoPxd>`_ for "
"automatic wrapping with Cython. It also supports performance-oriented Python "
"implementations that provide a CPython-like C-API, such as PyPy and Pyston."
msgstr ""
"アクセラレータモジュールの作成に役に立つことに加えて、 `Cython <https://"
"cython.org/>`__ は C 言語や C++ の API で書かれたものをラップするモジュールを"
"作成することにも役立ちます。インターフェイスを手動でラップする作業が必要であ"
"り、それはラッパーのソースコードを設計し最適化する上では大きな自由度を与えは"
"しますが、大規模な API を素早くラップするためにはあまり良い選択ではないかもし"
"れません。Cython を用いた自動ラッピングについては `サードパーティが提供する"
"ツールのリスト <https://github.com/cython/cython/wiki/AutoPxd>`_ を見てくださ"
"い。これらは、 PyPy や Pyston のような CPython に類似した C-API を提供する性"
"能重視の Python 実装をもサポートしています。"

#: ../source/guides/packaging-binary-extensions.rst:173
msgid ""
":doc:`pybind11 <pybind11:index>` is a pure C++11 library that provides a "
"clean C++ interface to the CPython (and PyPy) C API. It does not require a "
"pre-processing step; it is written entirely in templated C++. Helpers are "
"included for Setuptools or CMake builds. It was based on `Boost.Python "
"<https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/index.html>`__, "
"but doesn't require the Boost libraries or BJam."
msgstr ""
":doc:`pybind11 <pybind11:index>` は純粋な C++11 で書かれたライブラリで、綺麗"
"な C++ インタフェイスを CPython (および PyPy) の C 言語 API に提供します。事"
"前処理 (pre-processing) の段階が不要で、全体がテンプレート化された C++ で書か"
"れています。ヘルパーツールが Setuptools や CMake ビルドに含まれています。 "
"`Boost.Python <https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/"
"index.html>`__ を基礎にしていますが、Boost ライブラリや BJam がなくてはダメと"
"いうことはありません。"

#: ../source/guides/packaging-binary-extensions.rst:180
msgid ""
":doc:`cffi <cffi:index>` is a project created by some of the PyPy developers "
"to make it straightforward for developers that already know both Python and "
"C to expose their C modules to Python applications. It also makes it "
"relatively straightforward to wrap a C module based on its header files, "
"even if you don't know C yourself."
msgstr ""
":doc:`cffi <cffi:index>` は、 Python と C 言語の両方を知っている開発者が C 言"
"語で書いたモジュールを Python アプリケーションから単刀直入に使えるようにと何"
"人かの PyPy 開発者たちが作成しました。たとえ C 言語を知らなくても、 C 言語の"
"モジュールをそのヘッダファイルに基づいてラップすることもいくらか簡単になりま"
"した。"

#: ../source/guides/packaging-binary-extensions.rst:186
msgid ""
"One of the key advantages of ``cffi`` is that it is compatible with the PyPy "
"JIT, allowing CFFI wrapper modules to participate fully in PyPy's tracing "
"JIT optimisations."
msgstr ""
"``cffi`` の最も重要な利点のひとつはPyPy JIT と一緒に使えることで、CFFI ラッパ"
"モジュールが PyPy の実行中の JIT 最適化に同居できるのです。"

#: ../source/guides/packaging-binary-extensions.rst:190
msgid ""
"`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that allows "
"a variety of programming languages, including Python, to interface with C "
"and C++ code."
msgstr ""
"`SWIG <http://www.swig.org/>`__ は、 Python を含むさまざまなプログラミング言"
"語から C 言語や C++ のコードへのインタフェースを生成できるラッパインタフェー"
"ス生成ツールです。"

#: ../source/guides/packaging-binary-extensions.rst:194
msgid ""
"The standard library's ``ctypes`` module, while useful for getting access to "
"C level interfaces when header information isn't available, suffers from the "
"fact that it operates solely at the C ABI level, and thus has no automatic "
"consistency checking between the interface actually being exported by the "
"library and the one declared in the Python code. By contrast, the above "
"alternatives are all able to operate at the C *API* level, using C header "
"files to ensure consistency between the interface exported by the library "
"being wrapped and the one expected by the Python wrapper module. While "
"``cffi`` *can* operate directly at the C ABI level, it suffers from the same "
"interface inconsistency problems as ``ctypes`` when it is used that way."
msgstr ""
"標準ライブラリの ``ctypes`` モジュールは、ヘッダの情報が得られない時でも C 言"
"語レベルのインタフェイスにアクセスできる点が役に立つ一方で、 C 言語の ABI の"
"レベルでのみ動作するため実際にエクスポートされているインタフェースと Python "
"コード側での宣言との間の一貫性を自動的に確認する仕組みがないという点が弊害を"
"引き起こすかもしれません。対照的に、上記の代替策はすべて C 言語の *API* のレ"
"ベルで動作するので、 C 言語のヘッダファイルを使ってライブラリからエクスポート"
"されラップされるインタフェイスと Python 側のラッパモジュールが期待しているイ"
"ンタフェースとの間の一貫性を保証することができます。 ``cffi`` は C 言語の "
"ABI のレベルで直接に動作する *ことができる* 一方で、そのように使った場合には "
"``ctypes`` と同じく一貫性を欠いたインタフェースの問題を孕みます。"

#: ../source/guides/packaging-binary-extensions.rst:208
msgid "Alternatives for low level system access"
msgstr "低レベルのシステムアクセスを行う代替策"

#: ../source/guides/packaging-binary-extensions.rst:210
msgid ""
"For applications that need low level system access (regardless of the "
"reason), a binary extension module often *is* the best way to go about it. "
"This is particularly true for low level access to the CPython runtime "
"itself, since some operations (like releasing the Global Interpreter Lock) "
"are simply invalid when the interpreter is running code, even if a module "
"like ``ctypes`` or ``cffi`` is used to obtain access to the relevant C API "
"interfaces."
msgstr ""
"(理由を問わず) 低レベルのシステムにアクセスする必要のあるアプリケーションに"
"とって、バイナリ拡張モジュールはしばしば *進むべき最良の道* です。これは、 "
"``ctypes`` や ``cffi`` といったモジュールが適切な C 言語の API インタフェース"
"へのアクセスを取得するために使われている場合であってさえも、 (グローバルイン"
"タプリタロックの解除のような) いくつかの操作がインタプリタがコードを実行して"
"いる時には無効であるということだけを見ても、CPython ランタイム自身の低レベル"
"部分にアクセスする際によく当てはまると言えます。"

#: ../source/guides/packaging-binary-extensions.rst:218
msgid ""
"For cases where the extension module is manipulating the underlying "
"operating system or hardware (rather than the CPython runtime), it may "
"sometimes be better to just write an ordinary C library (or a library in "
"another systems programming language like C++ or Rust that can export a C "
"compatible ABI), and then use one of the wrapping techniques described above "
"to make the interface available as an importable Python module."
msgstr ""
"拡張モジュールが (CPythonのランタイムではなく) 下層のオペレーティングシステム"
"やハードウェアを操作しようとする場合には、単純に通常の C 言語 (または C++ や "
"Rust のような別のシステム言語で C 言語と互換性のある ABI をエクスポートできる"
"もの) でライブラリを書いて、それを上述のようなインポート可能な Python のモ"
"ジュールとしてインタフェースを構築できるラッピングテクニックを使う方が良いと"
"いう場合もあるでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:227
msgid "Implementing binary extensions"
msgstr "バイナリ拡張を実装する"

#: ../source/guides/packaging-binary-extensions.rst:229
msgid ""
"The CPython :doc:`Extending and Embedding <python:extending/index>` guide "
"includes an introduction to writing a :doc:`custom extension module in C "
"<python:extending/extending>`."
msgstr ""
"CPython の :doc:`拡張と埋め込み <python:extending/index>` のガイドには、 :"
"doc:`C 言語による独自の拡張モジュール <python:extending/extending>` を書くた"
"めの導入的な説明があります。"

#: ../source/guides/packaging-binary-extensions.rst:235
#: ../source/guides/packaging-binary-extensions.rst:318
msgid "FIXME"
msgstr "FIXME (ここを修正してください)"

#: ../source/guides/packaging-binary-extensions.rst:237
msgid "mention the stable ABI (3.2+, link to the CPython C API docs)"
msgstr "安定な ABI (3.2+ のこと。 CPython C API 説明文書にリンクすること)"

#: ../source/guides/packaging-binary-extensions.rst:238
msgid "mention the module lifecycle"
msgstr "モジュールのライフサイクルに言及してください"

#: ../source/guides/packaging-binary-extensions.rst:239
msgid "mention the challenges of shared static state and subinterpreters"
msgstr "shared static state やサブインタプリタの試みについて言及すること"

#: ../source/guides/packaging-binary-extensions.rst:240
msgid "mention the implications of the GIL for extension modules"
msgstr "拡張モジュール向けの GIL 実装について言及すること"

#: ../source/guides/packaging-binary-extensions.rst:241
msgid "mention the memory allocation APIs in 3.4+"
msgstr "3.4+ におけるメモリ割り当てについて言及すること"

#: ../source/guides/packaging-binary-extensions.rst:243
msgid ""
"mention again that all this is one of the reasons why you probably *don't* "
"want to handcode your extension modules :)"
msgstr ""
"まさにこれが拡張モジュールを支援ツールなしで書きたいと *思わない* であろうと"
"いう理由のひとつであることに言及すること :)"

#: ../source/guides/packaging-binary-extensions.rst:248
msgid "Building binary extensions"
msgstr "バイナリ拡張をビルドする"

#: ../source/guides/packaging-binary-extensions.rst:251
msgid "Building extensions for multiple platforms"
msgstr "複数のプラットフォーム向けに拡張モジュールをビルドする"

#: ../source/guides/packaging-binary-extensions.rst:253
msgid ""
"If you plan to distribute your extension, you should provide :term:`wheels "
"<Wheel>` for all the platforms you intend to support. For most extensions, "
"this is at least one package per Python version times the number of OS and "
"architectures you support.  These are usually built on continuous "
"integration (CI) systems. There are tools to help you build highly "
"redistributable binaries from CI; these include :ref:`cibuildwheel` and :ref:"
"`multibuild`."
msgstr ""
"あなたが自分の書いた拡張モジュールを配布するつもりがあるなら、あたながサポー"
"トしようと思うすべてのプラットフォーム向けに :term:`wheels <Wheel>` を準備す"
"るべきでしょう。ほとんどの拡張モジュールにおいて、Python のバージョン毎にサ"
"ポートする予定の OS とアーキテクチャの数を掛け算した分に少なくともひとつの"
"パッケージが必要であるということになります。通常はこれらを継続的インテグレー"
"ション (CI) システム上でビルドします。:ref:`cibuildwheel` や :ref:"
"`multibuild` のような CI から再配布が非常にやりやすいバイナリをビルドするのを"
"補助するツールの存在が知られています。"

#: ../source/guides/packaging-binary-extensions.rst:263
msgid "Binary extensions for Windows"
msgstr "Windows 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:265
msgid ""
"Before it is possible to build a binary extension, it is necessary to ensure "
"that you have a suitable compiler available. On Windows, Visual C is used to "
"build the official CPython interpreter, and should be used to build "
"compatible binary extensions.  To set up a build environment for binary "
"extensions, install `Visual Studio Community Edition <https://visualstudio."
"microsoft.com/downloads/>`__ - any recent version is fine."
msgstr ""
"バイナリ拡張をびるどできるようになる前に、適切なコンパイラが利用できるように"
"なっていることを保証しなければなりません。Windows 上でCPython インタプリタを"
"ビルドするのに Visual C が使われていますが、互換性のあるバイナリ拡張をビルド"
"する時にも同じコンパイラを使うべきです。バイナリ拡張のためのビルド環境を構築"
"するためには、 `Visual Studio コミュニティエディション <https://visualstudio."
"microsoft.com/downloads/>`__ をインストールしてください - 最近のバージョンな"
"らどれでも構いません。"

#: ../source/guides/packaging-binary-extensions.rst:272
msgid ""
"One caveat: if you use Visual Studio 2019 or later, your extension will "
"depend on an \"extra\" file, ``VCRUNTIME140_1.dll``, in addition to the "
"``VCRUNTIME140.dll`` that all previous versions back to 2015 depend on. This "
"will add an extra requirement to using your extension on versions of CPython "
"that do not include this extra file. To avoid this, you can add the compile-"
"time argument ``/d2FH4-``. Recent versions of Python may include this file."
msgstr ""
"注意: Visual Studio 2019 またはこれ以降のバージョンを使う場合には、あなたの拡"
"張モジュールは、2015 までのそれ以前のバージョンで依存していた `VCRUNTIME140."
"dll`` に加えて、\"追加的な\" ファイルである ``VCRUNTIME140_1.dll`` にも依存す"
"るでしょう。この追加のファイルを同梱していないバージョンの CPython 上であなた"
"の拡張モジュールを使う場合には、要求事項が追加されることになります。コンパイ"
"ル時に引数 ``/d2FH4`` を追加しておくことで、これを避けることができます。最近"
"のバージョンの Python ならこのファイルを同梱しているかもしれません。"

#: ../source/guides/packaging-binary-extensions.rst:280
msgid ""
"Building for Python prior to 3.5 is discouraged, because older versions of "
"Visual Studio are no longer available from Microsoft. If you do need to "
"build for older versions, you can set ``DISTUTILS_USE_SDK=1`` and "
"``MSSdk=1`` to force a the currently activated version of MSVC to be found, "
"and you should exercise care when designing your extension not to malloc/"
"free memory across different libraries, avoid relying on changed data "
"structures, and so on. Tools for generating extension modules usually avoid "
"these things for you."
msgstr ""
"Visual Studio の古いバージョンがもはや Microsoft 社から入手できないので、3.5"
"より古いバージョンの Python 向けにビルドすることは推奨されません。どうしても"
"古いバージョン向けにビルドする必要がある場合には、 ``DISTUTILS_USE_SDK=1`` お"
"よび ``MSSdk=1`` をセットすることで現在も使用可能なバージョンの MSVC が見つか"
"るようにすることと、あなたの拡張モジュールの中でライブラリを跨いでメモリを "
"malloc/free することのないように設計を見直すこと、また、修正されたデータ構造"
"に依存しないようにすることなどが必要です。拡張モジュールを生成するツール群"
"は、通常はこのようなことが起こらないようにしてくれています。"

#: ../source/guides/packaging-binary-extensions.rst:291
msgid "Binary extensions for Linux"
msgstr "Linux 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:293
msgid ""
"Linux binaries must use a sufficiently old glibc to be compatible with older "
"distributions. The `manylinux <https://github.com/pypa/manylinux>`_ Docker "
"images provide a build environment with a glibc old enough to support most "
"current Linux distributions on common architectures."
msgstr ""
"Linux のバイナリは、古い配布物と互換性を保つために十分に古い glibc を使わなけ"
"ればなりません。 `manylinux <https://github.com/pypa/manylinux>`_ の Docker "
"イメージを使えば、よくあるアーキテクチャのほとんどの現行版 Linux 配布物をサ"
"ポートするのに十分なほど古い glibc を伴ったビルド環境を準備できるでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:299
msgid "Binary extensions for macOS"
msgstr "macOS 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:301
msgid ""
"Binary compatibility on macOS is determined by the target minimum deployment "
"system, e.g. *10.9*, which is often specified with the "
"``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building binaries "
"on macOS. When building with setuptools / distutils, the deployment target "
"is specified with the flag ``--plat-name``, e.g. ``macosx-10.9-x86_64``. For "
"common deployment targets for macOS Python distributions, see the `MacPython "
"Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/Spinning-"
"wheels>`_."
msgstr ""
"macOS におけるバイナリ互換性は、 macOS のバイナリをビルドする際にしばしば "
"``MACOSX_DEPLOYMENT_TARGET`` 環境変数で指定される例えば *10.9* のようなター"
"ゲットの最小デプロイメントシステムで決まります。 setuptools や distutils でビ"
"ルドする時には、デプロイメントターゲットは ``--plat-name`` フラグを使って、例"
"えば ``macosx-10.9-x86_64`` のように指定されます。 macOS 上の Python 配布物向"
"けのよくあるデプロイメントターゲットについては、 `MacPython スピンニングホ"
"イール wiki <https://github.com/MacPython/wiki/wiki/Spinning-wheels>`_ を見て"
"ください。"

#: ../source/guides/packaging-binary-extensions.rst:311
msgid "Publishing binary extensions"
msgstr "バイナリ拡張を公開する"

#: ../source/guides/packaging-binary-extensions.rst:313
msgid ""
"For interim guidance on this topic, see the discussion in :issue:`this issue "
"<284>`."
msgstr ""
"この話題に関する暫定的なガイダンスが :issue:`この課題 <284>` にあります。"

#: ../source/guides/packaging-binary-extensions.rst:320
msgid "cover publishing as wheel files on PyPI or a custom index server"
msgstr ""
"PyPI やその他のインデックスサーバに wheel ファイルを公開することについて書く"
"こと"

#: ../source/guides/packaging-binary-extensions.rst:321
msgid "cover creation of Windows and macOS installers"
msgstr "Windows 向けや macOS 向けのインストーラの作り方について書くこと"

#: ../source/guides/packaging-binary-extensions.rst:322
msgid "cover weak linking"
msgstr "weak linking について書くこと"

#: ../source/guides/packaging-binary-extensions.rst:323
msgid ""
"mention the fact that Linux distros have a requirement to build from source "
"in their own build systems, so binary-only releases are strongly discouraged"
msgstr ""
"Linux のディストロ群ではそれぞれのビルドシステムでソースコードからビルドでき"
"ることを要求するので、バイナリのみのリリースは強い非推薦の状態にあるという事"
"実について書くこと"

#: ../source/guides/packaging-binary-extensions.rst:329
msgid "Additional resources"
msgstr "追加のリソース"

#: ../source/guides/packaging-binary-extensions.rst:331
msgid ""
"Cross-platform development and distribution of extension modules is a "
"complex topic, so this guide focuses primarily on providing pointers to "
"various tools that automate dealing with the underlying technical "
"challenges. The additional resources in this section are instead intended "
"for developers looking to understand more about the underlying binary "
"interfaces that those systems rely on at runtime."
msgstr ""
"拡張モジュールのプラットフォームを跨ぐ開発・配布は込み入った話題なので、この"
"ガイドでは主として背景にある技術的な課題の取り扱いを自動化するさまざまなツー"
"ルへのポインタを提供することに重点を置くことにします。代わりに、この節のその"
"他の部分では、そのようなシステムが実行時に依存するような下層のバイナリインタ"
"フェースについて開発者が理解を深めるために見ることを意図しています。"

#: ../source/guides/packaging-binary-extensions.rst:338
msgid "Cross-platform wheel generation with scikit-build"
msgstr "sckit-build を用いたクロスプラットフォームな wheel の生成"

#: ../source/guides/packaging-binary-extensions.rst:340
msgid ""
"The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ package "
"helps abstract cross-platform build operations and provides additional "
"capabilities when creating binary extension packages. Additional "
"documentation is also available on the `C runtime, compiler, and build "
"system generator <https://scikit-build.readthedocs.io/en/latest/generators."
"html>`_ for Python binary extension modules."
msgstr ""
"`scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ は、抽象的な"
"ビルド作業を補助し、バイナリ拡張のパッケージを作成する時に必要な追加的な能力"
"を提供します。 Python のバイナリ拡張モジュールに関するさらなる説明文書は、 "
"`C 言語におけるランタイム・コンパイラ・ビルドシステム生成器 <https://scikit-"
"build.readthedocs.io/en/latest/generators.html>`_ にあります。"

#: ../source/guides/packaging-binary-extensions.rst:348
msgid "Introduction to C/C++ extension modules"
msgstr "C/C++ による拡張モジュールの紹介"

#: ../source/guides/packaging-binary-extensions.rst:350
msgid ""
"For a more in depth explanation of how extension modules are used by CPython "
"on a Debian system, see the following articles:"
msgstr ""
"Debian システム上で CPython がどのようにして拡張モジュールを使うのかについ"
"て、もっと深掘りした説明が次の記事に出ています:"

#: ../source/guides/packaging-binary-extensions.rst:353
msgid ""
"`What are (c)python extension modules? <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"
msgstr ""
"`(c)python の拡張モジュールとはどんなものか？ <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:354
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr ""
"`gil をリリースする <https://thomasnyberg.com/releasing_the_gil.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:355
msgid ""
"`Writing cpython extension modules using C++ <https://thomasnyberg.com/"
"cpp_extension_modules.html>`_"
msgstr ""
"`C++ で cpython の拡張モジュールを書く <https://thomasnyberg.com/"
"cpp_extension_modules.html>`_"

#: ../source/guides/packaging-namespace-packages.rst:3
msgid "Packaging namespace packages"
msgstr "名前空間パッケージをパッケージする"

#: ../source/guides/packaging-namespace-packages.rst:5
msgid ""
"Namespace packages allow you to split the sub-packages and modules within a "
"single :term:`package <Import Package>` across multiple, separate :term:"
"`distribution packages <Distribution Package>` (referred to as "
"**distributions** in this document to avoid ambiguity). For example, if you "
"have the following package structure:"
msgstr ""
"名前空間 (Namespace) パッケージは、複数かつ個別の :term:`パッケージ <Import "
"Package>` (曖昧にならないようにこの文書では **配布物** と呼ぶことにする) を越"
"えて、単一の :term:`パッケージ <Import Package>` の中のサブパッケージやモ"
"ジュールを分離できるようにすることができます。例えば、下に示すようなパッケー"
"ジ構造であれば:"

#: ../source/guides/packaging-namespace-packages.rst:24
msgid "And you use this package in your code like so::"
msgstr "そして、このパッケージを自分のソースコード中で使うにはこのようにする::"

#: ../source/guides/packaging-namespace-packages.rst:29
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""
"そうすることで、これらのサブパッケージ群を別々のふたつの配布物に分割すること"
"ができます:"

#: ../source/guides/packaging-namespace-packages.rst:46
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""
"それぞれのサブパッケージは、今や、個別にインストール・使用・バージョン管理す"
"ることができます。"

#: ../source/guides/packaging-namespace-packages.rst:48
msgid ""
"Namespace packages can be useful for a large collection of loosely-related "
"packages (such as a large corpus of client libraries for multiple products "
"from a single company). However, namespace packages come with several "
"caveats and are not appropriate in all cases. A simple alternative is to use "
"a prefix on all of your distributions such as ``import "
"mynamespace_subpackage_a`` (you could even use ``import "
"mynamespace_subpackage_a as subpackage_a`` to keep the import object short)."
msgstr ""
"名前空間パッケージは、 (単独の会社から出ている複数の製品向けのクライアントラ"
"イブラリの巨大な集積のような) 緩やかに関連したパッケージが多数含まれるコレク"
"ションに役立つでしょう。しかしながら、名前空間パッケージにはいくつかの注意書"
"きがあって、全ての場合に適切と言うわけではありません。単純明快な代替策は、あ"
"なたの配布物のすべてについて ``import mynamespace_subpackage_a`` のような接頭"
"語を使うことです (インポートするオブジェクトの名前を短く保つために ``import "
"mynamespace_subpackage_a as subpackage_a`` のようにインポートすることさえでき"
"ます) 。"

#: ../source/guides/packaging-namespace-packages.rst:58
msgid "Creating a namespace package"
msgstr "名前空間パッケージを作成する"

#: ../source/guides/packaging-namespace-packages.rst:60
msgid ""
"There are currently three different approaches to creating namespace "
"packages:"
msgstr "現在、名前空間パッケージを作るには３個の異なる手法があります:"

#: ../source/guides/packaging-namespace-packages.rst:62
msgid ""
"Use `native namespace packages`_. This type of namespace package is defined "
"in :pep:`420` and is available in Python 3.3 and later. This is recommended "
"if packages in your namespace only ever need to support Python 3 and "
"installation via ``pip``."
msgstr ""
"`組み込みの名前空間パッケージ <native namespace packages>`_ を用いる方法。こ"
"の種の名前空間パッケージは :pep:`420` で定義されていて、 Python 3.3 およびそ"
"れ以降で利用することができます。パッケージ中の名前空間が Python 3 だけをサ"
"ポートすればよくて ``pip`` でインストールするのであれば、これが推奨される方法"
"です。"

#: ../source/guides/packaging-namespace-packages.rst:66
msgid ""
"Use `pkgutil-style namespace packages`_. This is recommended for new "
"packages that need to support Python 2 and 3 and installation via both "
"``pip`` and ``python setup.py install``."
msgstr ""
"`pkgutil 型の名前空間パッケージ <pkgutil-style namespace packages>`_ を用いる"
"方法。 Python 2 および 3 をサポートする必要があって ``pip`` でも ``python "
"setup.py install`` でもインストールできるようにしたいなら、これが推奨される方"
"法です。"

#: ../source/guides/packaging-namespace-packages.rst:69
msgid ""
"Use `pkg_resources-style namespace packages`_. This method is recommended if "
"you need compatibility with packages already using this method or if your "
"package needs to be zip-safe."
msgstr ""
"`pkg_resources 型の名前空間パッケージ <pkg_resources-style namespace "
"packages>`_ を使う方法。この手法を採用した既存のパッケージとの互換性を保つ必"
"要がある場合か、あなたのパッケージに zip 耐性を持つ必要がある場合に推奨されま"
"す。"

#: ../source/guides/packaging-namespace-packages.rst:73
msgid ""
"While native namespace packages and pkgutil-style namespace packages are "
"largely compatible, pkg_resources-style namespace packages are not "
"compatible with the other methods. It's inadvisable to use different methods "
"in different distributions that provide packages to the same namespace."
msgstr ""
"組み込みの名前空間パッケージや pkgutil 型の名前空間パッケージは多くの点で互換"
"性がありますが、 pkg_resources 型の名前空間パッケージは他の手法とは互換性があ"
"りません。同じ名前空間向けにパッケージを提供するような複数の配布物で、異なる"
"手法を用いることは推奨されません。"

#: ../source/guides/packaging-namespace-packages.rst:80
msgid "Native namespace packages"
msgstr "組み込みの名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:82
msgid ""
"Python 3.3 added **implicit** namespace packages from :pep:`420`. All that "
"is required to create a native namespace package is that you just omit :file:"
"`__init__.py` from the namespace package directory. An example file "
"structure:"
msgstr ""
"Python 3.3 では :pep:`420` から **暗黙の** 名前空間パッケージを追加しました。"
"組み込みの名前空間パッケージを作成するのに必要なことは、名前空間パッケージの"
"ディレクトリから :file:`__init__.py` を取り除くことだけです。ファイル構造の例"
"はこちら:"

#: ../source/guides/packaging-namespace-packages.rst:97
msgid ""
"It is extremely important that every distribution that uses the namespace "
"package omits the :file:`__init__.py` or uses a pkgutil-style :file:"
"`__init__.py`. If any distribution does not, it will cause the namespace "
"logic to fail and the other sub-packages will not be importable."
msgstr ""
"名前空間パッケージを用いる各配布物で :file:`__init__.py` を省くこと、また"
"は、 pkgutil 型の :file:`__init__.py` を使用することが極めて重要です。もしい"
"ずれかの配布物でこれを忘れると、名前空間の論理が破綻して、他のサブパッケージ"
"をインポートすることができなくなります。"

#: ../source/guides/packaging-namespace-packages.rst:102
msgid ""
"Because ``mynamespace`` doesn't contain an :file:`__init__.py`, :func:"
"`setuptools.find_packages` won't find the sub-package. You must use :func:"
"`setuptools.find_namespace_packages` instead or explicitly list all packages "
"in your :file:`setup.py`. For example:"
msgstr ""
"``my namespace`` が :file:`__init__.py` を含まないので、 :func:`setuptools."
"find_packages` はサブパッケージを検出しようとしません。代わりに :func:"
"`setuptools.find_namespace_packages` を使うか、または、 :file:`setup.py` にす"
"べてのパッケージを明示的に列挙してください。例えば:"

#: ../source/guides/packaging-namespace-packages.rst:117
msgid ""
"A complete working example of two native namespace packages can be found in "
"the `native namespace package example project`_."
msgstr ""
"ふたつの名前空間パッケージの完全な動作例は、 `組み込みの名前空間パッケージの"
"使用例プロジェクト <native namespace package example project>`_ にあります。"

#: ../source/guides/packaging-namespace-packages.rst:123
msgid ""
"Because native and pkgutil-style namespace packages are largely compatible, "
"you can use native namespace packages in the distributions that only support "
"Python 3 and pkgutil-style namespace packages in the distributions that need "
"to support Python 2 and 3."
msgstr ""
"組み込み名前空間パッケージと pkgutil 型の名前空間パッケージは、多くの部分で互"
"換性があるので、 Python 3 しかサポートしない配布物では組み込み名前空間パッ"
"ケージを使用し、 Python 2 と Python 3 の両方をサポートしなければならない配布"
"物では pkgutil型名前空間パッケージを使うことが可能です。"

#: ../source/guides/packaging-namespace-packages.rst:129
msgid "pkgutil-style namespace packages"
msgstr "pkgutil 型名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:131
msgid ""
"Python 2.3 introduced the :doc:`pkgutil <python:library/pkgutil>` module and "
"the :py:func:`python:pkgutil.extend_path` function. This can be used to "
"declare namespace packages that need to be compatible with both Python 2.3+ "
"and Python 3. This is the recommended approach for the highest level of "
"compatibility."
msgstr ""
"Python 2.3 で :doc:`pkgutil <python:library/pkgutil>` モジュールと :py:func:"
"`python:pkgutil.extend_path` 関数が導入されました。Python 2.3+ と Python 3 の"
"両方に互換性を持つ必要がある名前空間パッケージを宣言するのにこれが使えるかも"
"しれません。これは、互換性のレベルが最も高くなるアプローチとして推奨されてい"
"ます。"

#: ../source/guides/packaging-namespace-packages.rst:136
msgid ""
"To create a pkgutil-style namespace package, you need to provide an :file:"
"`__init__.py` file for the namespace package:"
msgstr ""
"pkgutil 型の名前空間パッケージを作成するには、その名前空間パッケージ用に :"
"file:`__init__.py` ファイルを準備する必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:148
#: ../source/guides/packaging-namespace-packages.rst:193
msgid ""
"The :file:`__init__.py` file for the namespace package needs to contain "
"**only** the following:"
msgstr ""
"名前空間パッケージ用の :file:`__init__.py` ファイルは、次に示すもの **だけ** "
"を含んでいる必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:155
#: ../source/guides/packaging-namespace-packages.rst:200
msgid ""
"**Every** distribution that uses the namespace package must include an "
"identical :file:`__init__.py`. If any distribution does not, it will cause "
"the namespace logic to fail and the other sub-packages will not be "
"importable.  Any additional code in :file:`__init__.py` will be inaccessible."
msgstr ""
"名前空間パッケージを用いる **すべての** 配布物は、同一の :file:`__init__.py` "
"を持たなければなりません。もしいずれかの配布物で異なっていれば、名前空間の論"
"理破綻を招き、他のサブパッケージをインポートすることができなくなるでしょ"
"う。 :file:`__init__.py` に他のコードを追加しても、それはアクセスできないもの"
"となるでしょう。"

#: ../source/guides/packaging-namespace-packages.rst:160
msgid ""
"A complete working example of two pkgutil-style namespace packages can be "
"found in the `pkgutil namespace example project`_."
msgstr ""
"pkgutil 型の名前空間パッケージのふたつの動作例が `pkgutil 型名前空間を例示す"
"るプロジェクト <pkgutil namespace example project>`_ にあります。"

#: ../source/guides/packaging-namespace-packages.rst:170
msgid "pkg_resources-style namespace packages"
msgstr "pkg_resources 型名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:172
msgid ""
":doc:`Setuptools <setuptools:index>` provides the `pkg_resources."
"declare_namespace`_ function and the ``namespace_packages`` argument to :"
"func:`~setuptools.setup`. Together these can be used to declare namespace "
"packages. While this approach is no longer recommended, it is widely present "
"in most existing namespace packages. If you are creating a new distribution "
"within an existing namespace package that uses this method then it's "
"recommended to continue using this as the different methods are not cross-"
"compatible and it's not advisable to try to migrate an existing package."
msgstr ""
":doc:`Setuptools <setuptools:index>` は、 `pkg_resources.declare_namespace`_ "
"関数と :func:`~setuptools.setup` に渡す ``namespace_packages`` 引数を提供しま"
"す。これらを一緒に使うことで名前空間パッケージを宣言することができます。この"
"手法はもはや推奨されていませんが、既存の名前空間パッケージのほとんどで使われ"
"ています。この手法を採用している既存の名前空間パッケージの中に新しい配布物を"
"作成する時には、異なる手法が相互に互換ではないために既存パッケージを移植しよ"
"うとすることが推奨されていないので、この手法を採用し続けることを推奨します。"

#: ../source/guides/packaging-namespace-packages.rst:181
msgid ""
"To create a pkg_resources-style namespace package, you need to provide an :"
"file:`__init__.py` file for the namespace package:"
msgstr ""
"pkg_resources 型名前空間パッケージを作成するには、名前空間パッケージ用の :"
"file:`__init__.py` を準備する必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:205
msgid ""
"Some older recommendations advise the following in the namespace package :"
"file:`__init__.py`:"
msgstr ""
"いくつかの古めの推奨では、次のような名前空間パッケージ用 :file:`__init__.py` "
"を使うように言っています:"

#: ../source/guides/packaging-namespace-packages.rst:215
msgid ""
"The idea behind this was that in the rare case that setuptools isn't "
"available packages would fall-back to the pkgutil-style packages. This isn't "
"advisable because pkgutil and pkg_resources-style namespace packages are not "
"cross-compatible. If the presence of setuptools is a concern then the "
"package should just explicitly depend on setuptools via ``install_requires``."
msgstr ""
"背景にあるアイデアとしては、 setuptools を使えないような稀な場合には、パッ"
"ケージを pkgutil 型パッケージに切り戻したいと言うことがあるかもしれません。 "
"pkgutil 型と pkg_resources 型の名前空間パッケージは互いに非互換なので、これは"
"推奨できるものではありません。 setuptool が存在するか否かが問題なのであれば、"
"パッケージとしては ``install_requires`` を通じて setuptools に明示的に依存す"
"ると示しておくべきです。"

#: ../source/guides/packaging-namespace-packages.rst:222
msgid ""
"Finally, every distribution must provide the ``namespace_packages`` argument "
"to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""
"最後に、それぞれの配布物は :file:`setup.py` の :func:`~setuptools.setup` 向け"
"に ``namespace_packages`` 引数を準備しておく必要があります。例えば:"

#: ../source/guides/packaging-namespace-packages.rst:236
msgid ""
"A complete working example of two pkg_resources-style namespace packages can "
"be found in the `pkg_resources namespace example project`_."
msgstr ""
"pkg_resources 型の名前空間パッケージの動作可能な二つの例が `pkg_resources 型"
"名前空間例示プロジェクト <pkg_resources namespace example project>`_ で見つか"
"るはずです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:3
msgid ""
"Publishing package distribution releases using GitHub Actions CI/CD workflows"
msgstr ""
"GitHub Actions CI/CD ワークフローを用いてパッケージ配布物のリリースを公開する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
msgid ""
"`GitHub Actions CI/CD`_ allows you to run a series of commands whenever an "
"event occurs on the GitHub platform. One popular choice is having a workflow "
"that's triggered by a ``push`` event. This guide shows you how to publish a "
"Python distribution whenever a tagged commit is pushed. It will use the "
"`pypa/gh-action-pypi-publish GitHub Action`_."
msgstr ""
"`GitHub Actions CI/CD`_ を使うと、 GitHub プラットフォームで何かイベントが発"
"生するたびに一連のコマンドを実行することができます。よくある選択は、 "
"``push`` イベントを引き金にしてあるワークフローを行うというものです。このガイ"
"ドでは、タグ付きのコミットが push されるたびに Python 配布物を公開するやり方"
"をお見せします。それには `pypa/gh-action-pypi-publish GitHub Action`_ を使い"
"ます。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:15
msgid ""
"This guide *assumes* that you already have a project that you know how to "
"build distributions for and *it lives on GitHub*.  This guide also avoids "
"details of building platform specific projects. If you have binary "
"components, check out :ref:`cibuildwheel`'s GitHub Action examples."
msgstr ""
"このガイドでは、配布物をビルドするやり方を知っているプロジェクトが既にそんざ"
"いして、それが *GitHub に置いてある* ことを *前提* にしています。このガイド"
"は、また、特定のプロジェクトをビルドするプラットフォームの詳細に立ち入ること"
"はしません。もしあなたがバイナリのコンポーネントを持っているなら、 :ref:"
"`cibuildwheel` にある GitHub Action の例を調べてみてください。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:21
msgid "Saving credentials on GitHub"
msgstr "GitHub に認証情報を保存する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:23
msgid ""
"In this guide, we'll demonstrate uploading to both PyPI and TestPyPI, "
"meaning that we'll have two separate sets of credentials. And we'll need to "
"save them in the GitHub repository settings."
msgstr ""
"このガイドでは、 PyPI と TestPyPI の両方へのアップロードを実演するので、二組"
"の別々の認証情報を持つことになります。そして、それらを GitHub のリポジトリ設"
"定の中に保存する必要があります。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:28
msgid "Let's begin! 🚀"
msgstr "始めましょう! 🚀"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:30
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_. If you have the project on PyPI already, limit the token scope to "
"just that project. You can call it something like ``GitHub Actions CI/CD — "
"project-org/project-repo`` in order for it to be easily distinguishable in "
"the token list. **Don't close the page just yet — you won't see that token "
"again.**"
msgstr ""
"https://pypi.org/manage/account/#api-tokens へ行って新しい `APIトークン <API "
"token>`_ を作成してください。もう PyPI に自分のプロジェクトを持っているのであ"
"れば、トークンのスコープをそのプロジェクトだけに限定してください。トークンの"
"リストの中で容易に見分けがつくように、何か ``GitHub Actions CI/CD — project-"
"org/project-repo`` のような名前にしましょう。 **まだページを閉じないで -- "
"トークンを再び見る機会はないですよ。**"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:39
msgid ""
"In a separate browser tab or window, go to the ``Settings`` tab of your "
"target repository and then click on `Secrets`_ in the left sidebar."
msgstr ""
"ブラウザで別のタブかウィンドウを開いて、対象になっているリポジトリの "
"``Settings`` タブへ行き、左側のサイドバーにある `Secrets`_ の部分をクリックし"
"てください。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:42
msgid ""
"Create a new secret called ``PYPI_API_TOKEN`` and copy-paste the token from "
"the first step."
msgstr ""
"``PYPI_API_TOKEN`` と言う名前で新しい secret を作成し、先ほど作成したトークン"
"をコピーしましょう。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:44
msgid ""
"Now, go to https://test.pypi.org/manage/account/#api-tokens and repeat the "
"steps. Save that TestPyPI token on GitHub as ``TEST_PYPI_API_TOKEN``."
msgstr ""
"ここで https://test.pypi.org/manage/account/#api-tokens へ行って同様のステッ"
"プを繰り返してください。ここではテスト用の PyPI トークンを GitHub 上で "
"``TEST_PYPI_API_TIKEN`` として保存します。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:50
msgid ""
"If you don't have a TestPyPI account, you'll need to create it. It's not the "
"same as a regular PyPI account."
msgstr ""
"TestPyPI のアカウントを持っていなければ、新たに作成する必要があります。これは"
"通常の PyPI のアカウントとは別のものです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:55
msgid "Creating a workflow definition"
msgstr "ワークフロー定義を作成する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:57
msgid ""
"GitHub CI/CD workflows are declared in YAML files stored in the ``.github/"
"workflows/`` directory of your repository."
msgstr ""
"GitHub CI/CD ワークフローは、リポジトリの ``.github/workflows/`` ディレクトリ"
"に置かれた YAML ファイルで宣言されます。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:60
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr ""
"``.github/workflows/publish-to-test-pypi.yml`` ファイルを作成しましょう。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:63
msgid ""
"Start it with a meaningful name and define the event that should make GitHub "
"run this workflow:"
msgstr ""
"意味のある名前で始めて、 GitHub がこのワークフローを走らせるべきイベントを定"
"義しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
msgid "Defining a workflow job environment"
msgstr "ワークフローのジョブ環境を定義する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:74
msgid ""
"Now, let's add initial setup for our job. It's a process that will execute "
"commands that we'll define later. In this guide, we'll use the latest stable "
"Ubuntu LTS version provided by GitHub Actions:"
msgstr ""
"さて、我々のジョブについて最初の設定を追加しましょう。それは、我々が後で定義"
"するであろうコマンドを実行するようなプロセスです。このガイドでは、GitHub "
"Actions で提供される Ubuntu LTS の最新版を使います:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:86
msgid "Checking out the project and building distributions"
msgstr "プロジェクトをチェックアウトして配布物をビルドする"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:88
msgid "Then, add the following under the ``build-n-publish`` section:"
msgstr "それから、以下のものを ``build-n-publish`` 節に追加しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:95
msgid ""
"This will download your repository into the CI runner and then install and "
"activate the newest available Python 3 release."
msgstr ""
"これによって、あなたのリポジトリを CI ランナーにダウンロードして、"
"利用可能な最新の Python 3 "
"リリースをインストールしアクティベートすることになります。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:98
msgid ""
"And now we can build dists from source. In this example, we'll use ``build`` "
"package."
msgstr ""
"そして、今や我々はソースコードから配布物をビルドすることができます。この例で"
"は、パッケージを ``build`` します。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:103
msgid ""
"You can use any other method for building distributions as long as it "
"produces ready-to-upload artifacts saved into the ``dist/`` folder. You can "
"even use ``actions/upload-artifact`` and ``actions/download-artifact`` to "
"tranfer files between jobs or make them accessable for download from the web "
"CI interface."
msgstr ""
"アップロードできる状態の創作物を ``dist/`` ディレクトリに保存するという条件を"
"満たすのであれば、他のどのような方法で配布物をビルドしても構いません。ジョブ"
"からジョブへファイルを転送するのに ``actions/upload-artifact`` や ``actions/"
"download-artifact`` を使ったり、ウェブの CI インタフェースからダウンロードで"
"きるようにすることでそれらにアクセスすることを可能にしたりすることさえできま"
"す。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:109
msgid "So add this to the steps list:"
msgstr "そこでこれを手順のリストに追加しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:118
msgid "Publishing the distribution to PyPI and TestPyPI"
msgstr "PyPI と TestPyPI へ配布物を公開する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:120
msgid "Finally, add the following steps at the end:"
msgstr "最後に、次の手続きを末尾に追加しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:126
msgid ""
"These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the "
"first one uploads contents of the ``dist/`` folder into TestPyPI "
"unconditionally and the second does that to PyPI, but only if the current "
"commit is tagged. It is recommended you use the latest release tag; a tool "
"like GitHub's dependabot can keep these updated regularly."
msgstr ""
"これらふたつの手順は、 `pypa/gh-action-pypi-publich`_ GitHub アクションを使い"
"ます: 一つ目は ``dist/`` ディレクトリの中身を無条件に TestPyPI にアップロード"
"する時で、二つ目はそのコミットがタグ付けされている場合に限って PyPI へ送る時"
"です。最新のリリースタグを用いることが推奨されています; GitHub のdependabot "
"のようなツールが恒常的に更新されている状態を保つことができるのです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:135
msgid "That's all, folks!"
msgstr "これでできましたよ、皆さん!"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:137
msgid ""
"Now, whenever you push a tagged commit to your Git repository remote on "
"GitHub, this workflow will publish it to PyPI. And it'll publish any push to "
"TestPyPI which is useful for providing test builds to your alpha users as "
"well as making sure that your release pipeline remains healthy!"
msgstr ""
"これで、手元の Git リポジトリをリモートの GitHub にタグ付きのコミットをプッ"
"シュする時はいつでも、このワークフローがそれを PyPI へ公開します。そして、"
"プッシュしさえすればいつでも TestPyPI で公開されますので、アルファ版のユーザ"
"にテストビルドを提供するためにも、あなたのリリースパイプラインが健全な状態に"
"保たれていることを確認するためにも役に立ちます!"

#: ../source/guides/single-sourcing-package-version.rst:5
msgid "Single-sourcing the package version"
msgstr "パッケージのバージョンを１箇所で管理する"

#: ../source/guides/single-sourcing-package-version.rst:8
msgid ""
"There are many techniques to maintain a single source of truth for the "
"version number of your project:"
msgstr ""
"プロジェクトのバージョン番号をたったひとつの真実の場所で管理するテクニックは"
"たくさん存在しています:"

#: ../source/guides/single-sourcing-package-version.rst:11
msgid ""
"Read the file in :file:`setup.py` and get the version. Example (from `pip "
"setup.py <https://github.com/pypa/pip/blob/main/setup.py#L11>`_)::"
msgstr ""
":file:`setup.py` に書かれたファイルを読み込んでバージョンを得ましょう。"
"( `pip setup.py <https://github.com/pypa/pip/blob/main/setup.py#L11>`_ での) "
"例はこちら::"

#: ../source/guides/single-sourcing-package-version.rst:38
msgid ""
"As of the release of setuptools 46.4.0, one can accomplish the same thing by "
"instead placing the following in the project's :file:`setup.cfg` file "
"(replacing \"package\" with the import name of the package):"
msgstr ""
"setuptools 46.4.0 のリリースでは、代わりに次のものを file:`setup.cfg` ファイ"
"ルに置くことで同じことを達成できています (\"package\" をパッケージをインポー"
"トする際の名前で置き換えてください) :"

#: ../source/guides/single-sourcing-package-version.rst:48
msgid ""
"As of the release of setuptools 61.0.0, one can specify the version "
"dynamically in the project's :file:`pyproject.toml` file."
msgstr ""
"setuptools 61.0.0 のリリースの時点では、プロジェクトの :file:`pyproject."
"toml` ファイルの中にバージョンを動的に指定することができます。"

#: ../source/guides/single-sourcing-package-version.rst:60
msgid ""
"Please be aware that declarative config indicators, including the ``attr:`` "
"directive, are not supported in parameters to :file:`setup.py`."
msgstr ""
"``attr:`` ディレクティブを含む装飾的な設定指示子が、 :file:`setup.py` 向けの"
"パラメータとしてはサポートされていないことに注意してください。"

#: ../source/guides/single-sourcing-package-version.rst:64
msgid ""
"Use an external build tool that either manages updating both locations, or "
"offers an API that both locations can use."
msgstr ""
"外部のビルドツールを使う場合は、両方の場所(ロケーション)を更新できるようなも"
"の、あるいは、両方のサイトから使える API を提供しているものを使いましょう。"

#: ../source/guides/single-sourcing-package-version.rst:67
msgid ""
"Few tools you could use, in no particular order, and not necessarily "
"complete: `bump2version <https://pypi.org/project/bump2version>`_, `changes "
"<https://pypi.org/project/changes>`_, `commitizen <https://pypi.org/project/"
"commitizen>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_."
msgstr ""
"使えるかもしれない外部のビルドツールのリスト、ただし、順不同で、ここに挙げら"
"れていなくても使えるものがあるかもしれません: `bump2version <https://pypi."
"org/project/bump2version>`_, `changes <https://pypi.org/project/changes>`_, "
"`commitizen <https://pypi.org/project/commitizen>`_, `zest.releaser <https://"
"pypi.org/project/zest.releaser>`_."

#: ../source/guides/single-sourcing-package-version.rst:74
msgid ""
"Set the value to a ``__version__`` global variable in a dedicated module in "
"your project (e.g. :file:`version.py`), then have :file:`setup.py` read and "
"``exec`` the value into a variable."
msgstr ""
"プロジェクト内にグローバル変数の ``__version__`` に値を設定した専用のモジュー"
"ル (例えば :file:`version.py`) を作って :file:`setup.py` からそれを読み取っ"
"て ``exec`` で値を変数に取り込むと良いでしょう。"

#: ../source/guides/single-sourcing-package-version.rst:85
msgid ""
"Example using this technique: `warehouse <https://github.com/pypa/warehouse/"
"blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_."
msgstr ""
"このテクニックを使っている例: `warehouse <https://github.com/pypa/warehouse/"
"blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_ 。"

#: ../source/guides/single-sourcing-package-version.rst:87
msgid ""
"Place the value in a simple ``VERSION`` text file and have both :file:`setup."
"py` and the project code read it."
msgstr ""
"単純に ``VERSION`` という名前のテキストファイルに値を書いておいて、 :file:"
"`setup.py` とプロジェクトのソースコードの両方から読み込みます。"

#: ../source/guides/single-sourcing-package-version.rst:95
msgid ""
"An advantage with this technique is that it's not specific to Python.  Any "
"tool can read the version."
msgstr ""
"このテクニックを使う利点は、Python に限定されたやり方ではないということです。"
"どんなツールでもバージョン番号を読み取ることができます。"

#: ../source/guides/single-sourcing-package-version.rst:100
msgid ""
"With this approach you must make sure that the ``VERSION`` file is included "
"in all your source and binary distributions (e.g. add ``include VERSION`` to "
"your :file:`MANIFEST.in`)."
msgstr ""
"このやり方を採用するなら、 ``VERSION`` ファイルがすべてのソースコードとバイナ"
"リの配布物に含まれているように気を付けてください (例えば :file:`MANIFEST.in` "
"に ``include VERSION`` を追加しておくなど)。"

#: ../source/guides/single-sourcing-package-version.rst:104
msgid ""
"Set the value in :file:`setup.py`, and have the project code use the "
"``importlib.metadata`` API to fetch the value at runtime. (``importlib."
"metadata`` was introduced in Python 3.8 and is available to older versions "
"as the ``importlib-metadata`` project.)  An installed project's version can "
"be fetched with the API as follows::"
msgstr ""
":file:`setup.py` に値を保存して、プロジェクトのソースコードが ``importlib."
"metadata`` API を使ってその値を動作中に取得するようにしましょう。 "
"(``importlib.metadata`` は Python 3.8 で導入されていて、それより古いバージョ"
"ンでは ``importlib-metadata`` プロジェクトとして利用可能になっています) イン"
"ストール済みのプロジェクトのバージョン番号をこの API で取り込むには次のように"
"します::"

#: ../source/guides/single-sourcing-package-version.rst:119
msgid ""
"Be aware that the ``importlib.metadata`` API only knows about what's in the "
"installation metadata, which is not necessarily the code that's currently "
"imported."
msgstr ""
"``importlib.metadata`` API が知っているのはインストールされたパッケージのメタ"
"データだけであって、現在インポートされているソースコードについて知っていると"
"は限らないことに注意してください。"

#: ../source/guides/single-sourcing-package-version.rst:123
msgid ""
"If a project uses this method to fetch its version at runtime, then its "
"``install_requires`` value needs to be edited to install ``importlib-"
"metadata`` on pre-3.8 versions of Python like so::"
msgstr ""
"あるプロジェクトで動作中にバージョン番号を取得する方法を使っているのであれ"
"ば、Python 3.8 よりも古いバージョンを使う場合はそのプロジェクトの "
"``install_requires`` に ``importlib-metadata`` を書いておかなければなりませ"
"ん::"

#: ../source/guides/single-sourcing-package-version.rst:137
msgid ""
"An older (and less efficient) alternative to ``importlib.metadata`` is the "
"``pkg_resources`` API provided by ``setuptools``::"
msgstr ""
"``importlib.metadata`` に対するもっと古い (かつ、より非効率な) 代替策は、 "
"``setuptools`` が提供する ``pkg_resources`` API です::"

#: ../source/guides/single-sourcing-package-version.rst:143
msgid ""
"If a project uses ``pkg_resources`` to fetch its own version at runtime, "
"then ``setuptools`` must be added to the project's ``install_requires`` list."
msgstr ""
"あるプロジェクトで自分自身のバージョン番号を動作中に取得するために "
"``pkg_resources`` を使っているなら、プロジェクトの ``install_requires`` のリ"
"ストには必ず ``setuptools`` が入っていないといけません。"

#: ../source/guides/single-sourcing-package-version.rst:147
msgid ""
"Example using this technique: `setuptools <https://github.com/pypa/"
"setuptools/blob/main/setuptools/version.py>`_."
msgstr ""
"このテクニックを使っている例: `setuptools <https://github.com/pypa/"
"setuptools/blob/main/setuptools/version.py>`_."

#: ../source/guides/single-sourcing-package-version.rst:150
msgid ""
"Set the value to ``__version__`` in ``sample/__init__.py`` and import "
"``sample`` in :file:`setup.py`."
msgstr ""
"``sample/__init__.py`` で ``__version__`` に値を設定して、 :file:`setup.py` "
"から ``sample`` をインポートしましょう。"

#: ../source/guides/single-sourcing-package-version.rst:164
msgid ""
"Although this technique is common, beware that it will fail if ``sample/"
"__init__.py`` imports packages from ``install_requires`` dependencies, which "
"will very likely not be installed yet when :file:`setup.py` is run."
msgstr ""
"このテクニックはよく知られたものだが、 ``install_requires`` で定義された依存"
"先パッケージを ``sample/__init__.py`` がインポートしている場合には、そのよう"
"なパッケージは :file:`setup.py` が実行される時点ではまだインストールされてい"
"ない可能性が高いので、失敗するであろうということに注意してください。"

#: ../source/guides/single-sourcing-package-version.rst:170
msgid ""
"Keep the version number in the tags of a version control system (Git, "
"Mercurial, etc) instead of in the code, and automatically extract it from "
"there using `setuptools_scm <https://pypi.org/project/setuptools-scm/>`_."
msgstr ""
"ソースコード内ではなくバージョンコントロールシステム (Git, Mercurialなど) の"
"タグの中にバージョン番号を保持して、そこから `setuptools_scm <https://pypi."
"org/project/setuptools-scm/>`_ を使って取り出しましょう。"

#: ../source/guides/supporting-multiple-python-versions.rst:7
msgid "Supporting multiple Python versions"
msgstr "複数の Python バージョンをサポートする"

#: ../source/guides/supporting-multiple-python-versions.rst:39
msgid ""
"In addition to the work required to create a Python package, it is often "
"necessary that the package must be made available on different versions of "
"Python.  Different Python versions may contain different (or renamed) "
"standard library packages, and the changes between Python versions 2.x and 3."
"x include changes in the language syntax."
msgstr ""
"Python パッケージを作成するのに必要とされる仕事に加えて、しばしばそのパッケー"
"ジが異なるバージョンの Python に対応することが求められます。 Python のバー"
"ジョンが異なると、異なる (または名称を変更した) 標準ライブラリパッケージを含"
"むことがあり、 Python 2.x と 3.x の間には言語の文法に違いがあります。"

#: ../source/guides/supporting-multiple-python-versions.rst:45
msgid ""
"Performed manually, all the testing required to ensure that the package "
"works correctly on all the target Python versions (and OSs!) could be very "
"time-consuming. Fortunately, several tools are available for dealing with "
"this, and these will briefly be discussed here."
msgstr ""
"パッケージが対象となる Python バージョン (および OS 群！) で正しく動作するこ"
"とを確認するために要求されるテストを全て手動でやるとなると、大変に時間がかか"
"るでしょう。幸いなことに、このようなテストを扱ういくつかのツールを利用するこ"
"とができますので、ここで簡単に議論しておきましょう。"

#: ../source/guides/supporting-multiple-python-versions.rst:51
msgid "Automated testing and continuous integration"
msgstr "自動化されたテストと継続的インテグレーション"

#: ../source/guides/supporting-multiple-python-versions.rst:53
msgid ""
"Several hosted services for automated testing are available. These services "
"will typically monitor your source code repository (e.g. at `Github <https://"
"github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your "
"project's test suite every time a new commit is made."
msgstr ""
"自動化されたテスト用のオンラインサービスがいくつか利用可能です。典型的には、"
"これらのサービスがあなたのソースコードリポジトリ (例えば `Github <https://"
"github.com>`_ や `Bitbucket <https://bitbucket.org>`_) を監視していて、新しい"
"コミットが為されるたびにテストスイートを実行します。"

#: ../source/guides/supporting-multiple-python-versions.rst:58
msgid ""
"These services also offer facilities to run your project's test suite on "
"*multiple versions of Python*, giving rapid feedback about whether the code "
"will work, without the developer having to perform such tests themselves."
msgstr ""
"これらのサービスは、また、あなたのプロジェクトのテストスイートを *複数のバー"
"ジョンの Python* で走らせる機能を提供しているので、開発者がそのようなテストを"
"自分でやらなくてもソースコードが動作するか否かについて素早くフィードバックを"
"返してくれます。"

#: ../source/guides/supporting-multiple-python-versions.rst:62
msgid ""
"Wikipedia has an extensive `comparison <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ of many continuous-"
"integration systems. There are two hosted services which when used in "
"conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""
"Wikipedia には、数多くの継続的インテグレーションシステムを多方面から比較した "
"`比較ページ <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ があります。その中には、両方"
"を一緒に使うことで Linux ・ Mac ・ Windows を跨いだ自動化されたテストを実行で"
"きるようなふたつのオンラインサービスもあります。"

#: ../source/guides/supporting-multiple-python-versions.rst:68
msgid ""
"`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS "
"environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit "
"while the macOS is 10.9.2 at the time of writing."
msgstr ""
"`Travis CI <https://travis-ci.org>`_ は Linux と macOS の両方の環境を提供しま"
"す。原稿執筆時点で、 Linux 環境は Ubuntu 12.04 LTS Server Edition 64 bit "
"で、 macOS 環境は 10.9.2 です。"

#: ../source/guides/supporting-multiple-python-versions.rst:71
msgid ""
"`Appveyor <https://www.appveyor.com/>`_ provides a Windows environment "
"(Windows Server 2012)."
msgstr ""
"`Appveyor <https://www.appveyor.com/>`_ は、Windows 環境 (Windows Server "
"2012) を提供します。"

#: ../source/guides/supporting-multiple-python-versions.rst:82
msgid ""
"Both `Travis CI`_ and Appveyor_ require a `YAML <https://yaml.org>`_-"
"formatted file as specification for the instructions for testing. If any "
"tests fail, the output log for that specific configuration can be inspected."
msgstr ""
"`Travis CI`_ も Appveyor_ も、 `YAML <https://yaml.org>`_ 形式のテスト仕様書"
"を必要とします。いずれかのテストが失敗したら、そのテスト指示設定に関するログ"
"出力を調査することができます。"

#: ../source/guides/supporting-multiple-python-versions.rst:87
msgid ""
"For Python projects that are intended to be deployed on both Python 2 and 3 "
"with a single-source strategy, there are a number of options."
msgstr ""
"単一のソースコードを Python 2 と 3 の両方で稼働させる戦略を目指す Python プロ"
"ジェクトには、いくつかの方法論があります。"

#: ../source/guides/supporting-multiple-python-versions.rst:91
msgid "Tools for single-source Python packages"
msgstr "単一ソースコード Python パッケージのためのツール"

#: ../source/guides/supporting-multiple-python-versions.rst:93
msgid ""
"`six <https://pypi.org/project/six/>`_ is a tool developed by Benjamin "
"Peterson for wrapping over the differences between Python 2 and Python 3. "
"The six_ package has enjoyed widespread use and may be regarded as a "
"reliable way to write a single-source Python module that can be use in both "
"Python 2 and 3. The six_ module can be used from as early as Python 2.5. A "
"tool called `modernize <https://pypi.org/project/modernize>`_, developed by "
"Armin Ronacher, can be used to automatically apply the code modifications "
"provided by six_."
msgstr ""
"`six <https://pypi.org/project/six/>`_ は、ベンジャミン・ピーターソン "
"(Benjamin Peterson) が開発した Python 2 と Python 3 の間の差異を吸収するため"
"のツールです。 six_ パッケージは広範囲に受け入れられていて、単一ソースコード"
"の Python パッケージが Python 2 と Python 3 の両方で使えるようにするための信"
"頼できる方法であるとみなされています。 six_ モジュールは早くも Python 2.5 か"
"ら使えます。アーミン・ロンチャー (Armin Ronacher) が開発した `modernize "
"<https://pypi.org/project/modernize>`_ という名前のツールは、 six_ が提供する"
"修正を自動的にソースコードに適用するために使うことができます。"

#: ../source/guides/supporting-multiple-python-versions.rst:102
msgid ""
"Similar to six_, `python-future <http://python-future.org/overview.html>`_ "
"is a package that provides a compatibility layer between Python 2 and Python "
"3 source code; however, unlike six_, this package aims to provide "
"interoperability between Python 2 and Python 3 with a language syntax that "
"matches one of the two Python versions: one may use"
msgstr ""
"six_ と同様に、`python-future <http://python-future.org/overview.html>`_ も"
"ソースコード上で Python 2 と Python 3 の間の互換を保つ層を提供するパッケージ"
"です; しかしながら、 six_ とは異なり、このパッケージでは、ふたつの Python "
"バージョンのうちの片方の言語文法で Python 2 と Python 3 の間の相互互換性を提"
"供しようとしています: 片方しか使えません"

#: ../source/guides/supporting-multiple-python-versions.rst:109
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr "Python 3 のプロジェクトにおける Python 2 (文法による) モジュール。"

#: ../source/guides/supporting-multiple-python-versions.rst:110
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""
"*Python 2* で書かれたプロジェクトにおける、 Python 3 (文法による) モジュー"
"ル。"

#: ../source/guides/supporting-multiple-python-versions.rst:112
msgid ""
"Because of the bi-directionality, python-future_ offers a pathway to "
"converting a Python 2 package to Python 3 syntax module-by-module. However, "
"in contrast to six_, python-future_ is supported only from Python 2.6. "
"Similar to modernize_ for six_, python-future_ comes with two scripts called "
"``futurize`` and ``pasteurize`` that can be applied to either a Python 2 "
"module or a Python 3 module respectively."
msgstr ""
"双方向性の故に、 python-future_ は Python 2 で書かれたパッケージをモジュール"
"毎に Python 3 の文法に変換する通路を提供します。しかしながら、 six_ とは異な"
"り、 python-future_ は Python 2.6 からしかサポートされていません。 six_ に対"
"する modernize_ と同様に、 python-future_ は、Python 2 のモジュールに適用でき"
"る ``futurize`` と Python 3 モジュールに適用できる ``pasteurize`` と呼ばれる"
"ふたつのスクリプトを備えています。"

#: ../source/guides/supporting-multiple-python-versions.rst:119
msgid ""
"Use of six_ or python-future_ adds an additional runtime dependency to your "
"package: with python-future_, the ``futurize`` script can be called with the "
"``--stage1`` option to apply only the changes that Python 2.6+ already "
"provides for forward-compatibility to Python 3. Any remaining compatibility "
"problems would require manual changes."
msgstr ""
"six_ ないし python-future_ を使用すると、追加的な動作時依存性がパッケージに追"
"加されます: python-future_ では ``futurist`` スクリプトを ``--stage1`` オプ"
"ションとともに呼び出すことで Python 2.6 以降に既に備えられた Python 3 との前"
"方互換性を用いる修正だけを行うことができます。残りの互換性問題は、手作業で修"
"正しなければなりません。"

#: ../source/guides/supporting-multiple-python-versions.rst:126
msgid "What's in which Python?"
msgstr "どの Python に何がある？"

#: ../source/guides/supporting-multiple-python-versions.rst:128
msgid ""
"Ned Batchelder provides a list of changes in each Python release for `Python "
"2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder."
"com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used "
"to check whether any changes between Python versions may affect your package."
msgstr ""
"Ned Batchelder は、Python の各リリースのそれぞれに一連の修正、つまり、 "
"`Python 2 <https://nedbatchelder.com/blog/201109/whats_in_which_python."
"html>`__、 `Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__、 そして `Python 3.4-3.6 <https://"
"nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__ を加えるこ"
"とができます。これらのリストは、 Python のバージョン間の変更が特定のパッケー"
"ジに影響を与えるか否かを確認するためにも使えることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:5
msgid "Supporting Windows using Appveyor"
msgstr "Appveyor を用いて Windows をサポートする"

#: ../source/guides/supporting-windows-using-appveyor.rst:8
msgid "2015-12-03"
msgstr "2015-12-03"

#: ../source/guides/supporting-windows-using-appveyor.rst:10
msgid ""
"This section covers how to use the free `Appveyor`_ continuous integration "
"service to provide Windows support for your project. This includes testing "
"the code on Windows, and building Windows-targeted binaries for projects "
"that use C extensions."
msgstr ""
"この節では、無料の `Appveyor`_ 継続的インテグレーションサービスを使ってあなた"
"のプロジェクトで Windows をサポートする方法について議論します。これには、 "
"Windows におけるソースコードのテストや、 C 言語拡張を含むプロジェクトの "
"Windows 向けのバイナリへのビルドを含みます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:22
msgid ""
"Many projects are developed on Unix by default, and providing Windows "
"support can be a challenge, because setting up a suitable Windows test "
"environment is non-trivial, and may require buying software licenses."
msgstr ""
"多くのプロジェクトが当然のように Unix 上で開発されており、適切なWindows のテ"
"スト環境を準備することが簡単ではないこととソフトウェアライセンスを購入しなけ"
"ればならないであろうことから Windows へのサポートを提供することはある種のチャ"
"レンジになっています。"

#: ../source/guides/supporting-windows-using-appveyor.rst:26
msgid ""
"The Appveyor service is a continuous integration service, much like the "
"better-known `Travis`_ service that is commonly used for testing by projects "
"hosted on `Github`_. However, unlike Travis, the build workers on Appveyor "
"are Windows hosts and have the necessary compilers installed to build Python "
"extensions."
msgstr ""
"Appveyor サービスは継続的インテグレーションのサービスであり、 `GitHub`_ にホ"
"ストされたプロジェクトをテストするのによく使われよりよく知られている "
"`Travis`_ サービスによく似ています。しかし、 Travis とは異なり、 Appveyor の"
"ビルドワーカーは Windows であり、 Python の拡張モジュールをビルドするために必"
"要なコンパイラもインストール済みです。"

#: ../source/guides/supporting-windows-using-appveyor.rst:32
msgid ""
"Windows users typically do not have access to a C compiler, and therefore "
"are reliant on projects that use C extensions distributing binary wheels on "
"PyPI in order for the distribution to be installable via ``python -m pip "
"install <dist>``. By using Appveyor as a build service (even if not using it "
"for testing) it is possible for projects without a dedicated Windows "
"environment to provide Windows-targeted binaries."
msgstr ""
"Windows のユーザは C 言語のコンパイラを持っていないのが普通で、従って、C 言語"
"拡張を使うプロジェクトについては PyPI でバイナリ wheel を配布していなければ "
"``python -m pip install <dist>`` 経由で配布物をインスールすることができませ"
"ん。 (たとえテスト目的では利用しなかったとしても) Appveyor をビルドサービスと"
"して利用することで、専用の Windows 環境がなくても Windows 上で動作するバイナ"
"リを準備することができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:40
msgid "Setting up"
msgstr "設定する"

#: ../source/guides/supporting-windows-using-appveyor.rst:42
msgid ""
"In order to use Appveyor to build Windows wheels for your project, you must "
"have an account on the service. Instructions on setting up an account are "
"given in `the Appveyor documentation <https://www.appveyor.com/docs/>`__. "
"The free tier of account is perfectly adequate for open source projects."
msgstr ""
"Appveyor を用いてプロジェクトの Windows 向けの wheel をビルドするためには、こ"
"のサービスのアカウントを持っていなければなりません。アカウントの設定に関する"
"説明は `the Appveyor documentation <https://www.appveyor.com/docs/>`__ にあり"
"ます。オープンソースプロジェクトには無料アカウントで十分です。"

#: ../source/guides/supporting-windows-using-appveyor.rst:47
msgid ""
"Appveyor provides integration with `Github`_ and `Bitbucket`_, so as long as "
"your project is hosted on one of those two services, setting up Appveyor "
"integration is straightforward."
msgstr ""
"Appveyor では `GitHub`_ や `BitBucket`_ との統合運用ができるので、プロジェク"
"トがこれらのうちのいずれかにホストされている限りは Appveyor から統合運用する"
"設定は簡単にできます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:51
msgid ""
"Once you have set up your Appveyor account and added your project, Appveyor "
"will automatically build your project each time a commit occurs. This "
"behaviour will be familiar to users of Travis."
msgstr ""
"Appveyor のアカウントの設定とプロジェクトの追加が終われば、コミットが発生する"
"たびに Appveyor が自動的にプロジェクトをビルドするようになります。Travis の"
"ユーザはこのような動作に慣れていることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:56
msgid "Adding Appveyor support to your project"
msgstr "プロジェクトに Appveyor サポートを追加する"

#: ../source/guides/supporting-windows-using-appveyor.rst:58
msgid ""
"In order to define how Appveyor should build your project, you need to add "
"an :file:`appveyor.yml` file to your project. The full details of what can "
"be included in the file are covered in the Appveyor documentation. This "
"guide will provide the details necessary to set up wheel builds."
msgstr ""
"Appveyor がプロジェクトをビルドする方法を定義するためには、 :file:`appveyor."
"yml` ファイルをプロジェクトに追加する必要があります。このファイルに書くことが"
"できる項目の完全な細部は、 Appveyor の説明文書で説明されています。このガイド"
"では、wheel のビルドに必要な部分に限って細部を説明します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:63
msgid ""
"Appveyor includes by default all of the compiler toolchains needed to build "
"extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of 3.3 and "
"3.4, the tools work out of the box. But for 64-bit versions of Python 3.3 "
"and 3.4, there is a small amount of additional configuration needed to let "
"distutils know where to find the 64-bit compilers. (From 3.5 onwards, the "
"version of Visual Studio used includes 64-bit compilers with no additional "
"setup)."
msgstr ""
"Appveyor は、Python 向けの拡張モジュールをビルドするために必要なすべてのコン"
"パイラ・ツールチェーンをデフォルトで含んでいます。 Python 2.7 ・ 3.5+ 、およ"
"び 32 ビット版の 3.3 と 3.4 向けであれば、このツールはそのままで動作します。"
"しかし、 64 ビット版の 3.3 と 3.4 では、 distutils が 64 ビット版のコンパイラ"
"を検出できるように少量の追加的な設定が必要です。( 3.5 以降については、追加の"
"設定をしなくても Visual Studio の各バージョンに含まれている 64 ビット版コンパ"
"イラを使います)。"

#: ../source/guides/supporting-windows-using-appveyor.rst:71
msgid "appveyor.yml"
msgstr "appveyor.yml"

#: ../source/guides/supporting-windows-using-appveyor.rst:77
msgid ""
"This file can be downloaded from `here <https://raw.githubusercontent.com/"
"pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/"
"appveyor.yml>`__."
msgstr ""
"このファイルは `ここ <https://raw.githubusercontent.com/pypa/python-"
"packaging-user-guide/master/source/guides/appveyor-sample/appveyor.yml>`__ か"
"らダウンロードすることができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:79
msgid ""
"The :file:`appveyor.yml` file must be located in the root directory of your "
"project. It is in ``YAML`` format, and consists of a number of sections."
msgstr ""
":file:`appveyor.yml` ファイルは、プロジェクトのルートディレクトリに置かなけれ"
"ばなりません。このファイルは ``YAML`` フォーマットで書かれていて、数多くのセ"
"クションから構成されています。"

#: ../source/guides/supporting-windows-using-appveyor.rst:82
msgid ""
"The ``environment`` section is the key to defining the Python versions for "
"which your wheels will be created. Appveyor comes with Python 2.6, 2.7, 3.3, "
"3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The example file "
"builds for all of these environments except Python 2.6. Installing for "
"Python 2.6 is more complex, as it does not come with pip included. We don't "
"support 2.6 in this document (as Windows users still using Python 2 are "
"generally able to move to Python 2.7 without too much difficulty)."
msgstr ""
"``environment`` は、どのバージョンの Python 向けに wheel を生成するかを定義す"
"る鍵となるセクションです。 Appveyor には 32 ビット版と 64 ビット版の両方の "
"Python 2.6, 2.7, 3.3, 3.4, 3.5 が予めインストールされています。例示したファイ"
"ルでは、 Python 2.6 を除くこれらすべての環境向けにビルドするようになっていま"
"す。 Python 2.6 は pip を含まないので、これをインストールすることはより複雑で"
"す。このドキュメントでは、 Python 2.6 はサポートしません (Windows ユーザでま"
"だ Python 2 を使っているユーザであれば、大抵は大した困難に遭遇せずに Python "
"2.7 へ移行できるからです) 。"

#: ../source/guides/supporting-windows-using-appveyor.rst:90
msgid ""
"The ``install`` section uses pip to install any additional software that the "
"project may require. The only requirement for building wheels is the "
"``wheel`` project, but projects may wish to customise this code in certain "
"circumstances (for example, to install additional build packages such as "
"``Cython``, or test tools such as ``tox``)."
msgstr ""
"``install`` セクションは、プロジェクトが必要とする追加的なソフトウェアを pip "
"を使ってインストールするのに使われます。 wheel をビルドするために必要なもの"
"は ``wheel`` プロジェクトだけですが、プロジェクトによっては特定の環境下ではこ"
"の項をカスタマイズしたいと思うかもしれません (例えば、 ``Cython`` のような追"
"加的なビルド用パッケージないし ``tox`` のようなテストツールをインストールする"
"ために)。"

#: ../source/guides/supporting-windows-using-appveyor.rst:96
msgid ""
"The ``build`` section simply switches off builds - there is no build step "
"needed for Python, unlike languages like ``C#``."
msgstr ""
"``build`` セクションでは単純にビルドのスイッチを切りましょう - ``C#`` のよう"
"な言語とは異なり、Python にはビルドする段階は不要なのです。"

#: ../source/guides/supporting-windows-using-appveyor.rst:99
msgid ""
"The main sections that will need to be tailored to your project are "
"``test_script`` and ``after_test``."
msgstr ""
"個々のプロジェクト向けに整える必要のある主なセクションは、 ``test_script`` "
"と ``after_test`` です。"

#: ../source/guides/supporting-windows-using-appveyor.rst:102
msgid ""
"The ``test_script`` section is where you will run your project's tests. The "
"supplied file runs your test suite using ``setup.py test``. If you are only "
"interested in building wheels, and not in running your tests on Windows, you "
"can replace this section with a dummy command such as ``echo Skipped "
"Tests``. You may wish to use another test tool, such as ``nose`` or :file:"
"`py.test`.  Or you may wish to use a test driver like ``tox`` - however if "
"you are using ``tox`` there are some additional configuration changes you "
"will need to consider, which are described below."
msgstr ""
"``test_script`` セクションは、プロジェクトのテストを走らせる場所です。与えら"
"れたファイルを使って ``setup.py test`` を走らせることで一連のテストを行いま"
"す。wheel ファイルをビルドすることだけに興味があるのであれば、そして、 "
"Windows でテストをしないのであれば、このセクションに ``echo Skipped Tests`` "
"のようなダミーコマンドを書いておけば良いでしょう。 ``nose`` や :file:`py."
"test` のような他のテストツールを使いたい場合があるかもしれません。あるいは、 "
"``tox`` のようなテストドライバを使いたいと思うかもしれません - しかしなが"
"ら、 ``tox`` を使う場合には、後述の通り、もう少し追加の設定変更を検討する必要"
"があることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:111
msgid ""
"The ``after_test`` runs once your tests have completed, and so is where the "
"wheels should be built. Assuming your project uses the recommended tools "
"(specifically, ``setuptools``) then the ``setup.py bdist_wheel`` command "
"will build your wheels."
msgstr ""
"``after_test`` は、テストが完了したあとに一度だけ走り、したがって、ここで "
"wheel ファイルを生成するべきです。あなたのプロジェクトで推奨ツール (とりわけ "
"``setuptools``) を使っているなら、 ``setup.py bdist_wheel`` コマンドで wheel "
"ファイルを生成できます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:116
msgid ""
"Note that wheels will only be built if your tests succeed. If you expect "
"your tests to fail on Windows, you can skip them as described above."
msgstr ""
"テストが成功した場合にだけ wheel ファイルが生成されるという点に留意してくださ"
"い。 Windows ではテストが失敗するとわかっているなら、前述の通り、それを省略す"
"ることができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:121
msgid "Support script"
msgstr "サポートスクリプト"

#: ../source/guides/supporting-windows-using-appveyor.rst:123
msgid ""
"The :file:`appveyor.yml` file relies on a single support script, which sets "
"up the environment to use the SDK compiler for 64-bit builds on Python 3.3 "
"and 3.4.  For projects which do not need a compiler, or which don't support "
"3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml` file is needed."
msgstr ""
":file:`appveyor.yml` ファイルは、Python 3.3 と 3.4 上で 64 ビットでのビルドを"
"行うために SDK のコンパイラを使う環境を構築するためのひとつのサポートスクリプ"
"トに依存しています。コンパイラを必要としないプロジェクトや64 ビット版の "
"Windows 上の 3.3 や 3.4 をサポートしないプロジェクトでは、 :file:`appveyor."
"yml` ファイルさえあれば良いことになります。"

#: ../source/guides/supporting-windows-using-appveyor.rst:128
msgid ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows batch "
"script that runs a single command in an environment with the appropriate "
"compiler for the selected Python version. All you need to do is to set the "
"single environment variable ``DISTUTILS_USE_SDK`` to a value of ``1`` and "
"the script does the rest. It sets up the SDK needed for 64-bit builds of "
"Python 3.3 or 3.4, so don't set the environment variable for any other "
"builds."
msgstr ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ は、選択されたバー"
"ジョンの Python 用の適切なコンパイラが存在する環境内で単一のコマンドを実行す"
"るような Windows のバッチスクリプトです。やらなければならないことはたった一個"
"の環境変数 ``DISTUTILS_USE_SDK`` の値を ``1`` に設定することだけで、残りはす"
"べてこのスクリプトがやってくれます。スクリプトが Python 3.3 ないし 3.4 を 64 "
"ビットでビルドするのに必要な SDK 環境を構築するので、他のビルドに使う環境変数"
"を設定してはいけません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:135
msgid ""
"You can simply download the batch file and include it in your project "
"unchanged."
msgstr ""
"このバッチファイルは単純にダウンロードして修正なしにプロジェクト内に置くこと"
"ができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:139
msgid "Access to the built wheels"
msgstr "ビルドされたwheelファイルへのアクセス"

#: ../source/guides/supporting-windows-using-appveyor.rst:141
msgid ""
"When your build completes, the built wheels will be available from the "
"Appveyor control panel for your project. They can be found by going to the "
"build status page for each build in turn. At the top of the build output "
"there is a series of links, one of which is \"Artifacts\". That page will "
"include a list of links to the wheels for that Python version / "
"architecture. You can download those wheels and upload them to PyPI as part "
"of your release process."
msgstr ""
"ビルドが終わると、出来上がった wheel ファイルは Appveyor のコントロールパネル"
"の当該プロジェクトのページから取り出せるでしょう。ビルドのたびに生成されるビ"
"ルド状況のページからも取り出せます。ビルド結果の出力ページの先頭には一連のリ"
"ンクがあって、そのうちの \"Artifacts\" がそれです。そのページに行くと該当する"
"バージョンの Python / アーキテクチャに応じた wheel ファイルへのリンクがあるは"
"ずです。ここから wheel ファイルをダウンロードして、あなたのリリース作業の一環"
"として PyPI へアップロードすることができるでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:149
msgid "Additional notes"
msgstr "補遺"

#: ../source/guides/supporting-windows-using-appveyor.rst:152
msgid "Testing with tox"
msgstr "tox を用いてテストする"

#: ../source/guides/supporting-windows-using-appveyor.rst:154
msgid ""
"Many projects use the :doc:`Tox <tox:index>` tool to run their tests. It "
"ensures that tests are run in an isolated environment using the exact files "
"that will be distributed by the project."
msgstr ""
"多くのプロジェクトで :doc:`Tox <tox:index>` ツールを用いてテストを行っていま"
"す。これを使えば、プロジェクトで配布するであろうファイル群そのものを使った独"
"立した環境下でテストを実行することができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:158
msgid ""
"In order to use ``tox`` on Appveyor there are a couple of additional "
"considerations (in actual fact, these issues are not specific to Appveyor, "
"and may well affect other CI systems)."
msgstr ""
"Appveyor 上で ``tox`` を使うためには、(実際のところは、Appveyor に限ったこと"
"ではなく、他の CI システムにも影響します) いくつかの追加的な事項を検討しなけ"
"ればなりません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:162
msgid ""
"By default, ``tox`` only passes a chosen subset of environment variables to "
"the test processes. Because ``distutils`` uses environment variables to "
"control the compiler, this \"test isolation\" feature will cause the tests "
"to use the wrong compiler by default."
msgstr ""
"デフォルトでは ``tox`` は、環境変数のうちのいくつかの選択されたサブセットだけ"
"をテストプロセスに渡します。 ``distutils`` がコンパイラを制御するのに環境変数"
"を用いるので、この \"テスト環境分離\" の機能がデフォルトではテストに誤ったコ"
"ンパイラを使ってしまう問題を引き起こすでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:167
msgid ""
"To force ``tox`` to pass the necessary environment variables to the "
"subprocess, you need to set the ``tox`` configuration option ``passenv`` to "
"list the additional environment variables to be passed to the subprocess. "
"For the SDK compilers, you need"
msgstr ""
"``tox`` がサブプロセスに必要な環境変数を渡すように強制するためには、 ``tox`` "
"の設定オプションである ``passenv`` に追加的にサブプロセスに渡すべき環境変数の"
"リストを設定する必要があります。SDK コンパイラを使うのであれば、このような設"
"定が必要です"

#: ../source/guides/supporting-windows-using-appveyor.rst:172
msgid "``DISTUTILS_USE_SDK``"
msgstr "``DISTUTILS_USE_SDK``"

#: ../source/guides/supporting-windows-using-appveyor.rst:173
msgid "``MSSdk``"
msgstr "``MSSdk``"

#: ../source/guides/supporting-windows-using-appveyor.rst:174
msgid "``INCLUDE``"
msgstr "``INCLUDE``"

#: ../source/guides/supporting-windows-using-appveyor.rst:175
msgid "``LIB``"
msgstr "``LIB``"

#: ../source/guides/supporting-windows-using-appveyor.rst:177
msgid ""
"The ``passenv`` option can be set in your :file:`tox.ini`, or if you prefer "
"to avoid adding Windows-specific settings to your general project files, it "
"can be set by setting the ``TOX_TESTENV_PASSENV`` environment variable. The "
"supplied :file:`build.cmd` script does this by default whenever "
"``DISTUTILS_USE_SDK`` is set."
msgstr ""
"``passenv`` オプションは、 :file:`tox.ini` ファイルでも設定可能で、あるいは、"
"Windows 特有の設定をプロジェクト全体のファイル群に追加したくなければ "
"``TOX_TESTENV_PASSENV`` 環境変数でも設定できます。 ``DISTUTILS_USE_SDK`` が設"
"定されていればいつでも、与えられた :file:`build.cmd` スクリプトがこの動作をデ"
"フォルトで実行します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:183
msgid ""
"When used interactively, ``tox`` allows you to run your tests against "
"multiple environments (often, this means multiple Python versions). This "
"feature is not as useful in a CI environment like Travis or Appveyor, where "
"all tests are run in isolated environments for each configuration. As a "
"result, projects often supply an argument ``-e ENVNAME`` to ``tox`` to "
"specify which environment to use (there are default environments for most "
"versions of Python)."
msgstr ""
"``tox`` を対話的に使うと、複数の環境 (これはしばしば複数のバージョンの "
"Python を意味します) でテストを実行することができます。設定ごとに独立した環境"
"ですべてのテストを実行する Travis や Appveyor のような CI 環境で見られるほど"
"には、この機能は有用ではありません。結果として、しばしばプロジェクト側から "
"``-e ENVNAME`` 引数を ``tox`` に与えてどの環境を使うべきか (ほとんどのバー"
"ジョンの Python に対応したデフォルトの環境群があります) を指定します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:190
msgid ""
"However, this does *not* work well with a Windows CI system like Appveyor, "
"where there are (for example) two installations of Python 3.4 (32-bit and 64-"
"bit) available, but only one ``py34`` environment in ``tox``."
msgstr ""
"しかしながら、このやり方は、 Appveyor のような Windows 上の CI システムでは "
"(例えば) Python 3.4 の (32 版ビットと64ビット版の) ふたつの実装が利用できるの"
"に、 ``tox`` では ``py34`` 環境がひとつしかないので、うまく動きません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:194
msgid ""
"In order to run tests using ``tox``, therefore, projects should probably use "
"the default ``py`` environment in ``tox``, which uses the Python interpreter "
"that was used to run ``tox``. This will ensure that when Appveyor runs the "
"tests, they will be run with the configured interpreter."
msgstr ""
"``tox`` を使ってテストを実行するためには、したがって、プロジェクトがおそらく"
"は ``tox`` のデフォルトの ``py`` 環境、ここでは ``tox`` を実行するために使わ"
"れた Python インタープリタを使うことになりますが、その環境を使うべきでしょ"
"う。"

#: ../source/guides/supporting-windows-using-appveyor.rst:199
msgid ""
"In order to support running under the ``py`` environment, it is possible "
"that projects with complex ``tox`` configurations might need to modify "
"their :file:`tox.ini` file. Doing so is, however, outside the scope of this "
"document."
msgstr ""
"``py`` 環境下での動作をサポートするためには、複雑な ``tox`` 設定を持つプロ"
"ジェクトでは :file:`tox.ini` を修正する必要があるかもしれません。そのようにす"
"ることは、しかしながら、この文書の範囲を越えます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:205
msgid "Automatically uploading wheels"
msgstr "自動的に wheel ファイルをアップロードする"

#: ../source/guides/supporting-windows-using-appveyor.rst:207
msgid ""
"It is possible to request Appveyor to automatically upload wheels. There is "
"a ``deployment`` step available in :file:`appveyor.yml` that can be used to "
"(for example) copy the built artifacts to a FTP site, or an Amazon S3 "
"instance. Documentation on how to do this is included in the Appveyor guides."
msgstr ""
"Appveyor に自動的に wheel ファイルをアップロードさせることができます。 :file:"
"`appveyor.yml` ファイルの中に ``deployment`` 段階があって、(例えば) ビルドし"
"た生成物を FTP サイトや Amazon S3 インスタンスへコピーするために使うことがで"
"きます。これをやるにはどうすれば良いかについては、 Appveyor ガイドに説明があ"
"ります。"

#: ../source/guides/supporting-windows-using-appveyor.rst:212
msgid ""
"Alternatively, it would be possible to add a ``twine upload`` step to the "
"build.  The supplied :file:`appveyor.yml` does not do this, as it is not "
"clear that uploading new wheels after every commit is desirable (although "
"some projects may wish to do this)."
msgstr ""
"別のやり方としては、ビルドの際に ``twine upload`` 段階を追加することができる"
"でしょう。 (プロジェクトによってはそうしたいかもしれませんが) コミットのたび"
"に新しい wheel ファイルをアップロードすることが望ましいかどうかがはっきりしな"
"いので、先ほどの :file:`appveyor.yml` ファイルはこれをやりません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:218
msgid "External dependencies"
msgstr "外部への依存関係"

#: ../source/guides/supporting-windows-using-appveyor.rst:220
msgid ""
"The supplied scripts will successfully build any distribution that does not "
"rely on 3rd party external libraries for the build."
msgstr ""
"提供されたスクリプトを使えば、ビルド時にサードパーティの外部ライブラリに依存"
"しない配布物ならどれでもビルドに成功するでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:223
msgid ""
"It is possible to add steps to the :file:`appveyor.yml` configuration "
"(typically in the \"install\" section) to download and/or build external "
"libraries needed by the distribution. And if needed, it is possible to add "
"extra configuration for the build to supply the location of these libraries "
"to the compiler. However, this level of configuration is beyond the scope of "
"this document."
msgstr ""
":file:`appveyor.yml` ファイルでの設定 (典型的には \"install\" 段階) を加え"
"て、配布物に必要な外部ライブラリをダウンロードないしビルドすることは可能で"
"す。そして、もし必要なら、このようなライブラリの位置ををコンパイラに伝えるた"
"めの余分の設定を追加することもできます。しかしながら、このレベルの設定はこの"
"文書の範囲を超えます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:232
msgid "Support scripts"
msgstr "サポートスクリプト"

#: ../source/guides/supporting-windows-using-appveyor.rst:234
msgid "For reference, the SDK setup support script is listed here:"
msgstr "参照用に SDK を構築するサポートスクリプトをここに挙げておきます:"

#: ../source/guides/supporting-windows-using-appveyor.rst:236
msgid "``appveyor-sample/build.cmd``"
msgstr "``appveyor-sample/build.cmd``"

#: ../source/guides/tool-recommendations.rst:5
msgid "Tool recommendations"
msgstr "オススメのツール"

#: ../source/guides/tool-recommendations.rst:7
msgid ""
"If you're familiar with Python packaging and installation, and just want to "
"know what tools are currently recommended, then here it is."
msgstr ""
"もしあなたが Python のパッケージングやインストールに慣れていて、今どんなツー"
"ルが推奨されているかを知りたいだけなら、ここを見てください。"

#: ../source/guides/tool-recommendations.rst:12
msgid "Application dependency management"
msgstr "アプリケーションの依存先管理"

#: ../source/guides/tool-recommendations.rst:14
msgid ""
"Use :ref:`pip` in a `secure manner`_ to install a Python application and its "
"dependencies during deployment."
msgstr ""
"デプロイメントの間に Python アプリケーションとその依存先をインストールするに"
"は、:ref:`pip` を `secure manner`_ で使ってください。"

#: ../source/guides/tool-recommendations.rst:17
msgid ""
"Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
"application-specific dependencies from a shared Python installation. [4]_"
msgstr ""
"共有された Python のインストール環境からアプリケーションに特有の依存関係を独"
"立させるためには、 :ref:`virtualenv` ないし :doc:`venv <python:library/"
"venv>` を使いましょう。 [4]_"

#: ../source/guides/tool-recommendations.rst:20
msgid ""
"Use `pip-tools`_, :ref:`pipenv`, or `poetry`_ to generate the fully-"
"specified application-specific dependencies, when developing Python "
"applications."
msgstr ""
"Python アプリケーションを開発するときに、完全に指定されたアプリケーション特有"
"の依存関係を満たす環境を作るには `pip-tools`_ や :ref:`pipenv` 、あるいは "
"`poetry`_ を使ってください。"

#: ../source/guides/tool-recommendations.rst:28
msgid "Installation tool recommendations"
msgstr "推奨ツールのインストール"

#: ../source/guides/tool-recommendations.rst:30
msgid ""
"Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
"from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on how :"
"ref:`pip` is installed, you may need to also install :ref:`wheel` to get the "
"benefit of wheel caching. [3]_"
msgstr ""
":term:`PyPI <Python Package Index (PyPI)>` から :term:`パッケージ "
"<Distribution Package>` をインストールするには :ref:`pip` を使いましょう。 "
"[1]_ [2]_ :ref:`pip` がどのようにインストールされているかによっては、wheel の"
"キャッシュの利益を得るために :ref:`wheel` を追加でインストールする必要がある"
"かもしれません。 [3]_"

#: ../source/guides/tool-recommendations.rst:35
msgid ""
"Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
"project-specific dependencies from a shared Python installation. [4]_"
msgstr ""
"共有された Python のインストール環境からプロジェクトに特有の依存関係を独立さ"
"せるためには、 :ref:`virtualenv` ないし :doc:`venv <python:library/venv>` を"
"使いましょう。 [4]_"

#: ../source/guides/tool-recommendations.rst:38
msgid ""
"If you're looking for management of fully integrated cross-platform software "
"stacks, consider:"
msgstr ""
"完全に統合されたクロスプラットフォームなソフトウェアスタックの管理ツールを探"
"しているのであれば、以下を検討してください:"

#: ../source/guides/tool-recommendations.rst:41
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ":ref:`buildout`: 主としてweb開発コミュニティに焦点を合わせている"

#: ../source/guides/tool-recommendations.rst:43
msgid ""
":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
"scientific community."
msgstr ""
":ref:`spack` ・ :ref:`hashdist` ・ :ref:`conda`: 主として科学計算分野のコミュ"
"ニティに焦点を合わせている。"

#: ../source/guides/tool-recommendations.rst:48
msgid "Packaging tool recommendations"
msgstr "推奨するパッケージングツール"

#: ../source/guides/tool-recommendations.rst:50
msgid "Use :ref:`setuptools` to define projects. [5]_ [6]_"
msgstr "プロジェクトを定義するために :ref:`setuptools` を用いる。[5]_ [6]_"

#: ../source/guides/tool-recommendations.rst:52
msgid ""
"Use :ref:`build` to create :term:`Source Distributions <Source Distribution "
"(or \"sdist\")>` and :term:`wheels <Wheel>`."
msgstr ""
":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` や :term:"
"`wheels <Wheel>` を生成するためには、 :ref:`build` を使いましょう。"

#: ../source/guides/tool-recommendations.rst:55
msgid ""
"If you have binary extensions and want to distribute wheels for multiple "
"platforms, use :ref:`cibuildwheel` as part of your CI setup to build "
"distributable wheels."
msgstr ""
"もし、バイナリ拡張を使っていて複数のプラットフォーム向けに wheel ファイルを配"
"布したいと考えているなら、配布可能な wheel ファイルをビルドする CI 環境の一部"
"として :ref:`cibuildwheel` を使いましょう。"

#: ../source/guides/tool-recommendations.rst:59
msgid ""
"Use `twine <https://pypi.org/project/twine>`_ for uploading distributions "
"to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""
"配布物を :term:`PyPI <Python Package Index (PyPI)>` へアップロードするには、 "
"`twine <https://pypi.org/project/twine>`_ を使いましょう。"

#: ../source/guides/tool-recommendations.rst:64
msgid "Publishing platform migration"
msgstr "プラットフォームの移行を公開する"

#: ../source/guides/tool-recommendations.rst:66
msgid ""
"The original Python Package Index implementation (previously hosted at `pypi."
"python.org <https://pypi.python.org>`_) has been phased out in favour of an "
"updated implementation hosted at `pypi.org <https://pypi.org>`_."
msgstr ""
"元々の Python パッケージインデックスの実装 (以前は `pypi.python.org <https://"
"pypi.python.org>`_ にホストされていました) は、更新された実装が `pypi.org "
"<https://pypi.org>`_ にホストされたので、すでに停止されています。"

#: ../source/guides/tool-recommendations.rst:70
msgid ""
"See :ref:`Migrating to PyPI.org` for more information on the status of the "
"migration, and what settings to change in your clients."
msgstr ""
"この移行の状態に関する詳細やクライアント側での設定変更については、 :ref:"
"`PyPI.org への移行 <Migrating to PyPI.org>` を見てください。"

#: ../source/guides/tool-recommendations.rst:75
msgid ""
"There are some cases where you might choose to use ``easy_install`` (from :"
"ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` "
"(which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs "
"easy_install`."
msgstr ""
"例えば (pip がサポートしていない) :term:`Eggs <Eggs>` からインストールする必"
"要がある場合など、 (:ref:`setuptools` 由来の) ``easy_install``を使いたくなる"
"場合もあるでしょう、どちらを使うべきかの詳細については、 :ref:`pip vs "
"easy_install` を見てください。"

#: ../source/guides/tool-recommendations.rst:80
msgid ""
"The acceptance of :pep:`453` means that :ref:`pip` will be available by "
"default in most installations of Python 3.4 or later.  See the :pep:"
"`rationale section <453#rationale>` from :pep:`453` as for why pip was "
"chosen."
msgstr ""
":pep:`453` を受け入れるということは、Python 3.4 やそれ以降がインストールされ"
"ていればほとんどの場合にデフォルトで :ref:`pip` が使えるはずだということにな"
"ります。なぜ pip が選ばれたのかについては、 :pep:`453` のページの :pep:`根拠"
"の節 <453#rationale>` を見てください。"

#: ../source/guides/tool-recommendations.rst:85
msgid ""
"`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and :ref:"
"`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:`venv "
"<venv>` do not currently.  Also, the common \"python-pip\" package that's "
"found in various linux distros, does not depend on \"python-wheel\" "
"currently."
msgstr ""
"`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ および :ref:"
"`virtualenv` install :ref:`wheel` の場合は必要、他方で :ref:`ensurepip` と :"
"ref:`venv <venv>` は現時点では依存していません。また、さまざまな linux ディス"
"トロに含まれる通常の \"python-pip\" パッケージは、現時点では \"python-wheel"
"\" に依存していません。"

#: ../source/guides/tool-recommendations.rst:91
msgid ""
"Beginning with Python 3.4, ``venv`` will create virtualenv environments with "
"``pip`` installed, thereby making it an equal alternative to :ref:"
"`virtualenv`. However, using :ref:`virtualenv` will still be recommended for "
"users that need cross-version consistency."
msgstr ""
"Python 3.4 以降では、 ``venv`` は ``pip`` がインストール済みの virtualenv 環"
"境を生成するので、 :ref:`virtualenv` の代替物となっています。しかしながら、"
"バージョンまたぎの一貫性を必要とするユーザ向けには依然として :ref:"
"`virtualenv` を使うことを推奨します。"

#: ../source/guides/tool-recommendations.rst:96
msgid ""
"Although you can use pure ``distutils`` for many projects, it does not "
"support defining dependencies on other projects and is missing several "
"convenience utilities for automatically populating distribution metadata "
"correctly that are provided by ``setuptools``. Being outside the standard "
"library, ``setuptools`` also offers a more consistent feature set across "
"different versions of Python, and (unlike ``distutils``), recent versions of "
"``setuptools`` support all of the modern metadata fields described in :ref:"
"`core-metadata`."
msgstr ""
"多くのプロジェクトでは ``distutils`` をそのままの状態で使うことができますが、"
"このツールは他のプロジェクトへの依存関係を定義できず、また、``setuptools`` に"
"よって提供されるメタデータを配布物中に自動で正しく配置するための便利なユー"
"ティリティがいくつか不足しています。標準ライブラリではありませんが、 "
"``setuptools`` は、また、Python の異なるバージョンを跨ぐ形でずっと一貫性のあ"
"る機能を提供しますし、(``distutils`` とは異なって) 最近のバージョンの "
"``setuptools`` は :ref:`core-metadata` に記述されているような近代的なメタデー"
"タ記入項目をすべてサポートしています。"

#: ../source/guides/tool-recommendations.rst:105
msgid ""
"Even for projects that do choose to use ``distutils``, when :ref:`pip` "
"installs such projects directly from source (rather than installing from a "
"prebuilt :term:`wheel <Wheel>` file), it will actually build your project "
"using :ref:`setuptools` instead."
msgstr ""
"``distutils`` を使うことを選択したプロジェクトでさえも、(ビルド済みの :term:"
"`wheel <Wheel>` ファイルからインストールするのではなく) :ref:`pip` でソース"
"コードから直接にインストールした場合には、実際には代わりに :ref:`setuptools` "
"を使ってプロジェクトをビルドしています。"

#: ../source/guides/tool-recommendations.rst:110
msgid ""
"`distribute`_ (a fork of setuptools) was merged back into :ref:`setuptools` "
"in June 2013, thereby making setuptools the default choice for packaging."
msgstr ""
"(setuptools から分岐した) `distribute`_ は、2013年6月に :ref:`setuptools` へ"
"再合流し、それ以来デフォルトのパッケージングにはデフォルトで setuptools を使"
"うようになっています。"

#: ../source/guides/using-manifest-in.rst:5
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr "``MANIFEST.in`` を使ってソースコード配布物にファイルを含める"

#: ../source/guides/using-manifest-in.rst:7
msgid ""
"When building a :term:`source distribution <Source Distribution (or \"sdist"
"\")>` for your package, by default only a minimal set of files are "
"included.  You may find yourself wanting to include extra files in the "
"source distribution, such as an authors/contributors file, a :file:`docs/` "
"directory, or a directory of data files used for testing purposes.  There "
"may even be extra files that you *need* to include; for example, if your :"
"file:`setup.py` computes your project's ``long_description`` by reading from "
"both a README and a changelog file, you'll need to include both those files "
"in the sdist so that people that build or install from the sdist get the "
"correct results."
msgstr ""
"パッケージの :term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` "
"をビルドする際、配布物には必要最低限のファイルだけが配布物に含まれるのがデ"
"フォルトです。ソースコード配布物に、例えば authors/contributors ファイル"
"や、 :file:`docs/` ディレクトリや、テストに使う目的のデータファイルを収めた"
"ディレクトリなどの追加のファイルを含めたくなる時もあるかと思います。また、追"
"加のファイルを含める *必要がある* 場合さえあるでしょう; 例えば :file:`setup."
"py` が README ファイルと改変履歴ファイルを読み込んでプロジェクトの "
"``long_description`` を計算するようになっている場合には、これら両方のファイル"
"を sdist に含めることで人々が sdist からビルドなりインストールなりを行う際に"
"も正しく動作するようにする必要があります。"

#: ../source/guides/using-manifest-in.rst:17
msgid ""
"Adding & removing files to & from the source distribution is done by writing "
"a :file:`MANIFEST.in` file at the project root."
msgstr ""
"プロジェクトのルートディレクトリにある :file:`MANIFEST.in` ファイルを書けば、"
"ソースコード配布物に対してファイルの追加・削除を行うことができます。"

#: ../source/guides/using-manifest-in.rst:22
msgid "How files are included in an sdist"
msgstr "ファイルは sdist にどのように含まれるのか"

#: ../source/guides/using-manifest-in.rst:24
msgid "The following files are included in a source distribution by default:"
msgstr ""
"次に掲げるファイル群は、デフォルトでソースコード配布物に取り込まれます:"

#: ../source/guides/using-manifest-in.rst:26
msgid ""
"all Python source files implied by the ``py_modules`` and ``packages`` "
"``setup()`` arguments"
msgstr ""
"``setup()`` の引数である ``py_modules`` と ``packages`` で暗示されるすべての "
"Python ソースファイル"

#: ../source/guides/using-manifest-in.rst:28
msgid ""
"all C source files mentioned in the ``ext_modules`` or ``libraries`` "
"``setup()`` arguments"
msgstr ""
"``setup()`` の引数である ``ext_modules`` や ``libraries`` で言及されたすべて"
"の C 言語のソースファイル"

#: ../source/guides/using-manifest-in.rst:30
msgid "scripts specified by the ``scripts`` ``setup()`` argument"
msgstr "``setup()`` の ``scripts`` 引数で指定されたスクリプト群"

#: ../source/guides/using-manifest-in.rst:31
msgid ""
"all files specified by the ``package_data`` and ``data_files`` ``setup()`` "
"arguments"
msgstr ""
"``setup()`` の引数である ``package_data`` と ``data_files`` で指定されるすべ"
"てのファイル群"

#: ../source/guides/using-manifest-in.rst:33
msgid ""
"the file specified by the ``license_file`` option in :file:`setup.cfg` "
"(setuptools 40.8.0+)"
msgstr ""
":file:`setup.cfg` ファイル (setuptools 40.8.0 以降) 内の ``license_file`` オ"
"プションで指定されるファイル"

#: ../source/guides/using-manifest-in.rst:35
msgid ""
"all files specified by the ``license_files`` option in :file:`setup.cfg` "
"(setuptools 42.0.0+)"
msgstr ""
":file:`setup.cfg` ファイル (setuptools 42.0.0 以降) の ``license_files`` オプ"
"ションで指定される全てのファイル"

#: ../source/guides/using-manifest-in.rst:37
msgid "all files matching the pattern :file:`test/test*.py`"
msgstr ":file:`test/test*.py` にマッチする全てのファイル"

#: ../source/guides/using-manifest-in.rst:38
msgid ":file:`setup.py` (or whatever you called your setup script)"
msgstr ""
":file:`setup.py` ファイル (または、名前がなんであろうとセットアップスクリプ"
"ト)"

#: ../source/guides/using-manifest-in.rst:39
msgid ":file:`setup.cfg`"
msgstr ":file:`setup.cfg` ファイル"

#: ../source/guides/using-manifest-in.rst:40
msgid ":file:`README`"
msgstr ":file:`README` ファイル"

#: ../source/guides/using-manifest-in.rst:41
msgid ":file:`README.txt`"
msgstr ":file:`README.txt` ファイル"

#: ../source/guides/using-manifest-in.rst:42
msgid ":file:`README.rst` (Python 3.7+ or setuptools 0.6.27+)"
msgstr ""
":file:`README.rst` ファイル (Python 3.7 以降、または setuptools 0.6.27 以降)"

#: ../source/guides/using-manifest-in.rst:43
msgid ":file:`README.md` (setuptools 36.4.0+)"
msgstr ":file:`README.md` ファイル (setuptools 36.4.0 以降)"

#: ../source/guides/using-manifest-in.rst:44
msgid ":file:`pyproject.toml` (setuptools 43.0.0+)"
msgstr ":file:`pyproject.toml` ファイル (setuptools 43.0.0 以降)"

#: ../source/guides/using-manifest-in.rst:45
msgid ":file:`MANIFEST.in`"
msgstr ":file:`MANIFEST.in` ファイル"

#: ../source/guides/using-manifest-in.rst:47
msgid ""
"After adding the above files to the sdist, the commands in :file:`MANIFEST."
"in` (if such a file exists) are executed in order to add and remove further "
"files to and from the sdist.  Default files can even be removed from the "
"sdist with the appropriate :file:`MANIFEST.in` command."
msgstr ""
"sdist に上記のファイル群を追加した後、sdist へのさらなるファイルの追加・削除"
"を行うために (もしそのファイルが存在すれば) :file:`MANIFEST.in` ファイルの中"
"のコマンドが実行されます。 :file:`MANIFEST.in` に適切にコマンドを記述すれば、"
"デフォルトで含まれるファイルであっても削除することができます。"

#: ../source/guides/using-manifest-in.rst:52
msgid ""
"After processing the :file:`MANIFEST.in` file, setuptools removes the :file:"
"`build/` directory as well as any directories named :file:`RCS`, :file:"
"`CVS`, or :file:`.svn` from the sdist, and it adds a :file:`PKG-INFO` file "
"and an :file:`*.egg-info` directory.  This behavior cannot be changed with :"
"file:`MANIFEST.in`."
msgstr ""
":file:`MANIFEST.in` ファイルに従って処理をした後、 setuptools は :file:"
"`build/` ディレクトリと同様に :file:`RCS` ・ :file:`CVS` ・ :file:`.svn` とい"
"う名前のディレクトリ群を sdist から削除し、:file:`PKG-INFO` ファイルと :file:"
"`*.egg-info` ディレクトリを追加します。この動作は :file:`MANIFEST.in` ファイ"
"ルでは変更することができません。"

#: ../source/guides/using-manifest-in.rst:60
msgid ":file:`MANIFEST.in` commands"
msgstr ":file:`MANIFEST.in` コマンド"

#: ../source/guides/using-manifest-in.rst:62
msgid ""
"A :file:`MANIFEST.in` file consists of commands, one per line, instructing "
"setuptools to add or remove some set of files from the sdist.  The commands "
"are:"
msgstr ""
":file:`MANIFEST.in` ファイルは一行にひとつのコマンドで構成されており、"
"setuptools に対して sdist に関するファイル追加・削除を指示します。コマンドと"
"して使えるのは次のものです:"

#: ../source/guides/using-manifest-in.rst:67
msgid "Command"
msgstr "コマンド"

#: ../source/guides/using-manifest-in.rst:69
msgid ":samp:`include {pat1} {pat2} ...`"
msgstr ":samp:`include {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:69
msgid ""
"Add all files matching any of the listed patterns (Files must be given as "
"paths relative to the root of the project)"
msgstr ""
"列挙されたパターンのいずれかに合致するすべてのファイルを追加する (ファイルは"
"プロジェクトのルートディレクトリに対する相対パスの形で指定されなければなりま"
"せん)"

#: ../source/guides/using-manifest-in.rst:71
msgid ":samp:`exclude {pat1} {pat2} ...`"
msgstr ":samp:`exclude {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:71
msgid ""
"Remove all files matching any of the listed patterns (Files must be given as "
"paths relative to the root of the project)"
msgstr ""
"列挙されたパターンのいずれかに合致するすべてのファイルを削除する (ファイルは"
"プロジェクトのルートディレクトリに対する相対パスの形で指定されなければなりま"
"せん)"

#: ../source/guides/using-manifest-in.rst:73
msgid ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"
msgstr ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:73
msgid ""
"Add all files under directories matching ``dir-pattern`` that match any of "
"the listed patterns"
msgstr ""
"``dir-pattern`` に合致するディレクトリの下にあって、かつ、列挙されたパターン"
"のいずれかに合致するファイルをすべて追加する"

#: ../source/guides/using-manifest-in.rst:74
msgid ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"
msgstr ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:74
msgid ""
"Remove all files under directories matching ``dir-pattern`` that match any "
"of the listed patterns"
msgstr ""
"``dir-pattern`` に合致するディレクトリの下にあって、かつ、列挙されたパターン"
"のいずれかに合致するファイルをすべて削除する"

#: ../source/guides/using-manifest-in.rst:75
msgid ":samp:`global-include {pat1} {pat2} ...`"
msgstr ":samp:`global-include {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:75
msgid ""
"Add all files anywhere in the source tree matching any of the listed patterns"
msgstr ""
"ソースコードツリーのどこにあろうとも、列挙されたパターンのいずれかに合致する"
"ファイルを追加する"

#: ../source/guides/using-manifest-in.rst:76
msgid ":samp:`global-exclude {pat1} {pat2} ...`"
msgstr ":samp:`global-exclude {pat1} {pat2} ...`"

#: ../source/guides/using-manifest-in.rst:76
msgid ""
"Remove all files anywhere in the source tree matching any of the listed "
"patterns"
msgstr ""
"ソースコードツリーのどこにあろうとも、列挙されたパターンのいずれかに合致する"
"ファイルを削除する"

#: ../source/guides/using-manifest-in.rst:77
msgid ":samp:`graft {dir-pattern}`"
msgstr ":samp:`graft {dir-pattern}`"

#: ../source/guides/using-manifest-in.rst:77
msgid "Add all files under directories matching ``dir-pattern``"
msgstr ""
"``dir-pattern`` に合致するディレクトリの下にある全てのファイルを追加する"

#: ../source/guides/using-manifest-in.rst:78
msgid ":samp:`prune {dir-pattern}`"
msgstr ":samp:`prune {dir-pattern}`"

#: ../source/guides/using-manifest-in.rst:78
msgid "Remove all files under directories matching ``dir-pattern``"
msgstr ""
"``dir-pattern`` に合致するディレクトリの下にあるすべてのファイルを削除する"

#: ../source/guides/using-manifest-in.rst:81
msgid ""
"The patterns here are glob-style patterns: ``*`` matches zero or more "
"regular filename characters (on Unix, everything except forward slash; on "
"Windows, everything except backslash and colon); ``?`` matches a single "
"regular filename character, and ``[chars]`` matches any one of the "
"characters between the square brackets (which may contain character ranges, "
"e.g., ``[a-z]`` or ``[a-fA-F0-9]``).  Setuptools also has undocumented "
"support for ``**`` matching zero or more characters including forward slash, "
"backslash, and colon."
msgstr ""
"ここでのパターンは glob スタイルのもの: ``*`` はファイル名に使われる通常の文"
"字 (UNIX ではスラッシュを除くすべて; Windows ではコロンを除くすべて) の 0 個"
"またはそれ以上の並びに合致; ``?`` はファイル名に使われる通常の文字 1 個に合致"
"し、 ``[chars]`` は角括弧の間にある文字 (文字範囲を含んでも構いません。例え"
"ば ``[a-z]`` や ``[a-fA-F0-9]``) の内のいずれかひとつに合致します。ドキュメン"
"ト化されていませんが、スラッシュかバックスラッシュかコロンだけの 0 個またはそ"
"れ以上の並びに合致する ``**`` を Setuptools はサポートしています。"

#: ../source/guides/using-manifest-in.rst:89
msgid ""
"Directory patterns are relative to the root of the project directory; e.g., "
"``graft example*`` will include a directory named :file:`examples` in the "
"project root but will not include :file:`docs/examples/`."
msgstr ""
"ディレクトリ向けのパターンはプロジェクトのルートディレクトリに対する相対パス"
"です; 例えば、 ``graft example*`` は、プロジェクトルートの直下にある :file:"
"`examples` という名前のディレクトリを追加しますが、 :file:`docs/examples/` に"
"ついては追加しません。"

#: ../source/guides/using-manifest-in.rst:93
msgid ""
"File & directory names in :file:`MANIFEST.in` should be ``/``-separated; "
"setuptools will automatically convert the slashes to the local platform's "
"appropriate directory separator."
msgstr ""
":file:`MANIFEST.in` 内のファイルやディレクトリの名前は、 ``/`` で区切られてい"
"なければなりません; setuptools がスラッシュをローカルのプラットフォームに適切"
"なディレクトリ分離子に置換してくれます。"

#: ../source/guides/using-manifest-in.rst:97
msgid ""
"Commands are processed in the order they appear in the :file:`MANIFEST.in` "
"file.  For example, given the commands:"
msgstr ""
"コマンドは :file:`MANIFEST.in` ファイルに登場する順に実行されます。例えば、以"
"下のようなコマンドが与えられると:"

#: ../source/guides/using-manifest-in.rst:105
msgid ""
"the contents of the directory tree :file:`tests` will first be added to the "
"sdist, and then after that all files in the sdist with a ``.pyc``, ``.pyo``, "
"or ``.pyd`` extension will be removed from the sdist.  If the commands were "
"in the opposite order, then ``*.pyc`` files etc. would be only be removed "
"from what was already in the sdist before adding :file:`tests`, and if :file:"
"`tests` happened to contain any ``*.pyc`` files, they would end up included "
"in the sdist because the exclusion happened before they were included."
msgstr ""
":file:`tests` ディレクトリ以下のコンテンツは、まず全てが sdist に追加された後"
"に、 ``.pyc`` ・ ``.pyo`` ・ ``.pyd`` の拡張子を持ったファイルがすべて sdist "
"から削除されます。逆順でコマンドを与えると、 ``*.pyc`` その他のファイルについ"
"ては、 :file:`tests` を追加する前に sdist に存在していたものだけが取り除かれ"
"ることになり、削除が追加の前に行われているので :file:`tests` に ``*.pyc`` "
"ファイルなどがあれば最終的な sdist に含まれることになります。"

#: ../source/guides/using-testpypi.rst:7
msgid ""
"``TestPyPI`` is a separate instance of the :term:`Python Package Index "
"(PyPI)` that allows you to try out the distribution tools and process "
"without worrying about affecting the real index. TestPyPI is hosted at `test."
"pypi.org <https://test.pypi.org>`_"
msgstr ""
"``TestPyPI`` は :term:`Python パッケージインデックス <Python Package Index "
"(PyPI)>` とは別のインスタンスで、本番環境に影響を与えてしまう心配をせずに配布"
"ツールやプロセスを試してみることができます。 TestPyPI は `test.pypi.org "
"<https://test.pypi.org>`_ にホストされています"

#: ../source/guides/using-testpypi.rst:13
msgid "Registering your account"
msgstr "アカウントを登録する"

#: ../source/guides/using-testpypi.rst:15
msgid ""
"Because TestPyPI has a separate database from the live PyPI, you'll need a "
"separate user account specifically for TestPyPI. Go to https://test.pypi.org/"
"account/register/ to register your account."
msgstr ""
"TestPyPI は PyPI とは別のデータベースで運用されているので、 TestPyPI 専用の"
"ユーザアカウントを作成する必要があります。 https://test.pypi.org/account/"
"register/ へ行ってアカウントを登録しましょう。"

#: ../source/guides/using-testpypi.rst:19
msgid ""
"The database for TestPyPI may be periodically pruned, so it is not unusual "
"for user accounts to be deleted."
msgstr ""
"TestPyPI 用のデータベースは定期的に刈り込まれるので、往々にしてユーザアカウン"
"トが削除されることがあります。"

#: ../source/guides/using-testpypi.rst:24
msgid "Using TestPyPI with Twine"
msgstr "Twine を使って TestPyPI を使う"

#: ../source/guides/using-testpypi.rst:26
msgid ""
"You can upload your distributions to TestPyPI using :ref:`twine` by "
"specifying the ``--repository`` flag:"
msgstr ""
":ref:`twine` に ``--repository`` フラグを指定して使うことで、配布物を "
"TestPyPI にアップロードすることができます:"

#: ../source/guides/using-testpypi.rst:33
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://test.pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may take "
"a minute or two for your project to appear on the site."
msgstr ""
"``https://test.pypi.org/project/<sampleproject>`` の ``sample project`` の部"
"分をあなたがアップロードしたプロジェクトの名前に置き換えた URL を参照すれば、"
"あなたのパッケージがうまくアップロードできたかどうかを確認することができま"
"す。サイトにあなたのプロジェクトが反映されるまでには 1,2 分かかるかもしれませ"
"ん。"

#: ../source/guides/using-testpypi.rst:39
msgid "Using TestPyPI with pip"
msgstr "pip で TestPyPI を使う"

#: ../source/guides/using-testpypi.rst:41
msgid ""
"You can tell :ref:`pip` to download packages from TestPyPI instead of PyPI "
"by specifying the ``--index-url`` flag:"
msgstr ""
":ref:`pip` で PyPI の代わりに TestPyPI からパッケージをダウンロードするに"
"は、 ``--index-url`` フラグを指定しましょう:"

#: ../source/guides/using-testpypi.rst:56
msgid ""
"If you want to allow pip to also download packages from PyPI, you can "
"specify ``--extra-index-url`` to point to PyPI. This is useful when the "
"package you're testing has dependencies:"
msgstr ""
"pip が PyPI からもパッケージをダウンロードできるようにしたいのであれば、 ``--"
"extra-index-url`` に PyPI を指定しましょう。テストしようとしているパッケージ"
"が依存関係を持つ場合にこれが役に立ちます:"

#: ../source/guides/using-testpypi.rst:73
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr ":file:`.pypirc` ファイルで TestPyPI を設定する"

#: ../source/guides/using-testpypi.rst:75
msgid ""
"If you want to avoid entering your username, you can configure TestPyPI in "
"your :file:`$HOME/.pypirc`:"
msgstr ""
"(毎回 TestPyPI の) ユーザ名を入力するのが面倒なら、 :file:`$HOME/.pypirc` "
"ファイルに TestPyPI 関連の設定をしておくことができます:"

#: ../source/index.rst:3 ../source/key_projects.rst:216
msgid "Python Packaging User Guide"
msgstr "Pythonパッケージユーザーガイド（Python Packaging User Guide）"

#: ../source/index.rst:5
msgid ""
"The Python Packaging User Guide (PyPUG) is a collection of tutorials and "
"guides for packaging Python software."
msgstr ""
"Python パッケージングユーザガイド (PyPUG) は、Python ソフトウェアのパッケージ"
"ングに関するチュートリアルやガイドを集めたものです。"

#: ../source/index.rst:5
msgid "python, packaging, guide, tutorial"
msgstr "python ・ パッケージング・ガイド・チュートリアル"

#: ../source/index.rst:25
msgid ""
"Welcome to the *Python Packaging User Guide*, a collection of tutorials and "
"references to help you distribute and install Python packages with modern "
"tools."
msgstr ""
"*Python パッケージングユーザガイド* へようこそ、チュートリアルとリファレンス"
"であなたが近代的なツールを使ってパッケージを配布・インストールするのをお手伝"
"いします。"

#: ../source/index.rst:29
msgid ""
"This guide is maintained on `GitHub`_ by the :doc:`Python Packaging "
"Authority <pypa:index>`. We happily accept any :doc:`contributions and "
"feedback <contribute>`. 😊"
msgstr ""
"このガイドは、:doc:`Python パッケージングオーソリティ <pypa:index>` によって "
"`GitHub`_ 上で維持管理されています。:doc:`貢献とフィードバック <contribute>` "
"を大いに歓迎します。😊"

#: ../source/index.rst:36
msgid "Get started"
msgstr "はじめましょう"

#: ../source/index.rst:38
msgid ""
"Essential tools and concepts for working within the Python development "
"ecosystem are covered in our :doc:`tutorials/index` section:"
msgstr ""
"Python での開発に関わるエコシステム内で使われる基本的なツールや概念について"
"は、 :doc:`チュートリアル <tutorials/index>` 節に記述しています:"

#: ../source/index.rst:41
msgid ""
"To get an overview of the flow used to publish your code, see the :doc:"
"`packaging flow <flow>`"
msgstr ""
"あなたのソースコードを公開するために用いられるフローの概要を得たければ、 :"
"doc:`パッケージングフロー <flow>` を見てください"

#: ../source/index.rst:43
msgid ""
"To learn how to install packages, see the :doc:`tutorial on installing "
"packages <tutorials/installing-packages>`"
msgstr ""
"パッケージをインストールする方法について学ぶには、 :doc:`パッケージをインス"
"トールするためのチュートリアル <tutorials/installing-packages>` を見てくださ"
"い"

#: ../source/index.rst:45
msgid ""
"To learn how to manage dependencies in a version controlled project, see "
"the :doc:`tutorial on managing application dependencies <tutorials/managing-"
"dependencies>`"
msgstr ""
"バージョン管理をしているプロジェクトで依存関係を管理する方法を学ぶには、 :"
"doc:`アプリケーションの依存関係を管理するためのチュートリアル <tutorials/"
"managing-dependencies>` を見てください"

#: ../source/index.rst:47
msgid ""
"To learn how to package and distribute your projects, see the :doc:`tutorial "
"on packaging and distributing <tutorials/packaging-projects>`"
msgstr ""
"プロジェクトをパッケージ化し配布する方法について学ぶには、 :doc:`パッケージン"
"グと配布のためのチュートリアル <tutorials/packaging-projects>` を見てください"

#: ../source/index.rst:49
msgid ""
"To get an overview of packaging options for Python libraries and "
"applications, see the :doc:`Overview of Python Packaging <overview>`"
msgstr ""
"Python ライブラリとアプリケーション向けのパッケージングオプションの概要を得る"
"には、 :doc:`Python におけるパッケージングの概要 <overview>` を見てください"

#: ../source/index.rst:54
msgid "Learn more"
msgstr "さらに学ぶ"

#: ../source/index.rst:56
msgid ""
"Beyond our :doc:`tutorials/index`, this guide has several other resources:"
msgstr ""
":doc:`tutorials/index` を越える話題については、このガイドには他にいくつかのリ"
"ソースがあります:"

#: ../source/index.rst:58
msgid ""
"The :doc:`guides/index` section for walk throughs, such as :doc:`guides/"
"installing-using-linux-tools` or :doc:`guides/packaging-binary-extensions`."
msgstr ""
"一通り通して知るには :doc:`ガイド <guides/index>` の :doc:`linux のツールを"
"使ってインストールする <guides/installing-using-linux-tools>` や :doc:`バイナ"
"リ拡張をパッケージ化する <guides/packaging-binary-extensions>` など。"

#: ../source/index.rst:60
msgid ""
"The :doc:`discussions/index` section for in-depth references on topics such "
"as :doc:`discussions/deploying-python-applications` or :doc:`discussions/pip-"
"vs-easy-install`."
msgstr ""
":doc:`python アプリケーションを配置する <discussions/deploying-python-"
"applications>` や :doc:`pip 対 easy-install <discussions/pip-vs-easy-"
"install>` のような詳細に渡る議論を参照するには :doc:`議論 <discussions/"
"index>` の節を見てください。"

#: ../source/index.rst:62
msgid ""
"The :doc:`specifications/index` section for packaging interoperability "
"specifications."
msgstr ""
"パッケージングに関する相互運用性の仕様については、 :doc:`仕様 "
"<specifications/index>` を見てください。"

#: ../source/index.rst:64
msgid ""
"Additionally, there is a list of :doc:`other projects <key_projects>` "
"maintained by members of the Python Packaging Authority."
msgstr ""
"さらに、Python パッケージングオーソリティのメンバーが維持管理している :doc:`"
"他のプロジェクト群 <key_projects>` のリストがあります。"

#: ../source/key_projects.rst:6
msgid "Project Summaries"
msgstr "プロジェクト概要"

#: ../source/key_projects.rst:8
msgid ""
"Summaries and links for the most relevant projects in the space of Python "
"installation and packaging."
msgstr ""
"Python の実装やパッケージングの領域で最も関連があるプロジェクト群へのまとめと"
"リンク。"

#: ../source/key_projects.rst:14
msgid "PyPA Projects"
msgstr "PyPA プロジェクト群"

#: ../source/key_projects.rst:19
msgid "bandersnatch"
msgstr "bandersnatch"

#: ../source/key_projects.rst:21
msgid ""
"`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://"
"github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/project/"
"bandersnatch>`__"
msgstr ""
"`課題リスト <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub "
"<https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/project/"
"bandersnatch>`__"

#: ../source/key_projects.rst:25
msgid ""
"``bandersnatch`` is a PyPI mirroring client designed to efficiently create a "
"complete mirror of the contents of PyPI. Organizations thus save bandwidth "
"and latency on package downloads (especially in the context of automated "
"tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN)."
msgstr ""
"``bandersnatch`` は、PyPI をミラーリングするクライアントで、PyPI のコンテンツ"
"の完全なコピーを効率よく作成するように設計されています。組織から見ると、これ"
"によってパッケージのダウンロードに必要な帯域幅とレイテンシーを (とりわけ自動"
"化されたテストの文脈で) 節約することができ、PyPI のコンテンツデリバリネット"
"ワーク (CDN) への負荷を軽減します。"

#: ../source/key_projects.rst:35
msgid "build"
msgstr "ビルド"

#: ../source/key_projects.rst:37
msgid ""
"`Docs <build:index>` | `Issues <https://github.com/pypa/build/issues>`__ | "
"`GitHub <https://github.com/pypa/build>`__ | `PyPI <https://pypi.org/project/"
"build>`__"
msgstr ""
"`説明文書 <build:index>` | `課題リスト <https://github.com/pypa/build/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/build>`__"

#: ../source/key_projects.rst:42
msgid ""
"``build`` is a :pep:`517` compatible Python package builder. It provides a "
"CLI to build packages, as well as a Python API."
msgstr ""
"``build`` は :pep:`517` 互換の Python パッケージビルダです。Python API と同様"
"に、パッケージをビルドする CLI を提供します。"

#: ../source/key_projects.rst:49
msgid "cibuildwheel"
msgstr "cibuildwheel"

#: ../source/key_projects.rst:51
msgid ""
"`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github."
"com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | "
"`Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | "
"`Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""
"`説明文書 <https://cibuildwheel.readthedocs.io/>`__ | `課題リスト <https://"
"github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | `議論 "
"<https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord "
"#cibuildwheel <https://discord.com/invite/pypa>`__"

#: ../source/key_projects.rst:58
msgid ""
"``cibuildwheel`` is a Python package that builds :term:`wheels <Wheel>` for "
"all common platforms and Python versions on most CI systems. Also see :ref:"
"`multibuild`."
msgstr ""
"``cibuildwheel`` は、プラットフォーム・ Python バージョン・ CIシステムのよく"
"ある組み合わせの全部について :term:`wheels <Wheel>` をビルドする Python パッ"
"ケージです。"

#: ../source/key_projects.rst:64
msgid "distlib"
msgstr "distlib"

#: ../source/key_projects.rst:66
msgid ""
":doc:`Docs <distlib:index>` | `Issues <https://github.com/pypa/distlib/"
"issues>`__ | `GitHub <https://github.com/pypa/distlib>`__ | `PyPI <https://"
"pypi.org/project/distlib>`__"
msgstr ""
":doc:`文書 <distlib:index>` | `課題リスト <https://github.com/pypa/distlib/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/distlib>`__"

#: ../source/key_projects.rst:71
msgid ""
"``distlib`` is a library which implements low-level functions that relate to "
"packaging and distribution of Python software.  ``distlib`` implements "
"several relevant PEPs (Python Enhancement Proposal standards) and is useful "
"for developers of third-party packaging tools to make and upload binary and "
"source :term:`distributions <Distribution Package>`, achieve "
"interoperability, resolve dependencies, manage package resources, and do "
"other similar functions."
msgstr ""
"``distlib`` は、 Python ソフトウェアのパッケージングや配布に関係する低レベル"
"の機能を実装しているライブラリです。 ``distlib`` はいくつかの関連する PEP "
"(Python Enhancement Proposal standards) を実装していて、サードパーティのパッ"
"ケージングツールの開発者にとってバイナリやソースコードの :term:`配布物 "
"<Distribution Package>` を作成・アップロードしたり、相互運用性を確保したり、"
"依存関係を解決したり、パッケージリソースを管理したり、その他の類似の機能を実"
"行したりするのに便利です。"

#: ../source/key_projects.rst:80
msgid ""
"Unlike the stricter :ref:`packaging` project (below), which specifically "
"implements modern Python packaging interoperability standards, ``distlib`` "
"also attempts to provide reasonable fallback behaviours when asked to handle "
"legacy packages and metadata that predate the modern interoperability "
"standards and fall into the subset of packages that are incompatible with "
"those standards."
msgstr ""
"近代的な Python パッケージングにおける相互運用性標準に特に気を配って実装され"
"た、より厳格な :ref:`packaging` プロジェクト (後述) とは異なり、 ``distlib`` "
"は近代的な相互運用性標準ができる前の昔ながらのパッケージやメタデータで今と"
"なってはその標準に外れたことになっているものを扱うように言われた時には合理的"
"なフォールバック動作も提供しようとしています。"

#: ../source/key_projects.rst:90
msgid "flit"
msgstr "flit"

#: ../source/key_projects.rst:92
msgid ""
"`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""
"`説明文書 <https://flit.readthedocs.io/en/latest/>`__ | `課題リスト <https://"
"github.com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"

#: ../source/key_projects.rst:96
msgid ""
"Flit provides a simple way to create and upload pure Python packages and "
"modules to PyPI.  It focuses on `making the easy things easy <flit-"
"rationale_>`_ for packaging.  Flit can generate a configuration file to "
"quickly set up a simple project, build source distributions and wheels, and "
"upload them to PyPI."
msgstr ""
"Flit は、純 Python のパッケージやモジュールを作成して PyPI へアップロードする"
"簡単な手段を提供します。パッケージングに関して `簡単なことを簡単に実現する "
"<flit-rationale_>`_ ことに注力しています。これを使えば単純なプロジェクトや"
"ソースコード配布物とwheelsについて素早くセットアップするための設定ファイルを"
"生成し、PyPI にアップロードすることができます。"

#: ../source/key_projects.rst:101
msgid ""
"Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on "
"tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to "
"upload them to PyPI. Flit requires Python 3, but you can use it to "
"distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""
"Flit は、 ``pyproject.toml`` を使ってプロジェクトの設定を行います。Flit は、"
"配布物をビルドする :ref:`setuptools` やそれを PyPI へアップロードする :ref:"
"`twine` のようなツールには依存していません。 Flit は Python 3 を要求します"
"が、Python 3 上にインポートできるものであれば Python 2 向けのモジュールでも配"
"布することが可能です。"

#: ../source/key_projects.rst:111
msgid "hatch"
msgstr "hatch"

#: ../source/key_projects.rst:113
msgid ""
"`Docs <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/pypa/"
"hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""
"`説明文書 <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/"
"pypa/hatch>`__ | `PyPI <https://pypi.org/project/hatch/>`__"

#: ../source/key_projects.rst:117
msgid ""
"Hatch is a unified command-line tool meant to conveniently manage "
"dependencies and environment isolation for Python developers. Python package "
"developers use Hatch and its build backend Hatchling to configure, version, "
"specify dependencies for, and publish packages to PyPI. Its plugin system "
"allows for easily extending functionality."
msgstr ""
"Hatch は、 Python での開発者向けに依存関係の管理や環境の分離を便利に行うため"
"の統合されたコマンドラインツールです。 Python パッケージ開発者は Hatch とその"
"ビルド用のバックエンドである Hatchling を使って、パッケージの設定を実施し、"
"バージョン管理を行い、依存関係を指定し、そして PyPI で公開することができま"
"す。プラグインシステムがあるので、容易に機能を拡張することができます。"

#: ../source/key_projects.rst:126
msgid "packaging"
msgstr "packaging ライブラリ"

#: ../source/key_projects.rst:128
msgid ""
":doc:`Docs <packaging:index>` | `Issues <https://github.com/pypa/packaging/"
"issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://"
"pypi.org/project/packaging>`__"
msgstr ""
":doc:`説明文書 <packaging:index>` | `課題リスト <https://github.com/pypa/"
"packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | "
"`PyPI <https://pypi.org/project/packaging>`__"

#: ../source/key_projects.rst:133
msgid ""
"Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""
"(packaging ライブラリには) :ref:`pip` や :ref:`setuptools` で使われる Python "
"パッケージングのための中核的なユーティリティ (としての core utilities があり"
"ます)。"

#: ../source/key_projects.rst:135
msgid ""
"The core utilities in the packaging library handle version handling, "
"specifiers, markers, requirements, tags, and similar attributes and tasks "
"for Python packages. Most Python users rely on this library without needing "
"to explicitly call it; developers of the other Python packaging, "
"distribution, and installation tools listed here often use its functionality "
"to parse, discover, and otherwise handle dependency attributes."
msgstr ""
"packaging ライブラリの core utilities は、バージョンの取り扱い、識別子、マー"
"カ、依存先パッケージ、タグ、その他これに類似した属性やタスクを取り扱います。 "
"Python ユーザのほとんどは、明示的に呼び出す必要に迫られることはなくともこのラ"
"イブラリに依存しています; ここにリストされているような Python のパッケージン"
"グや配布やインストールを扱う他のパッケージを開発する者は、パースしたり検出し"
"たりそうでなければ依存関係の属性を取り扱うようなこのライブラリの機能をしばし"
"ば利用しています。"

#: ../source/key_projects.rst:143
msgid ""
"This project specifically focuses on implementing the modern Python "
"packaging interoperability standards defined at :ref:`packaging-"
"specifications`, and will report errors for sufficiently old legacy packages "
"that are incompatible with those standards. In contrast, the :ref:`distlib` "
"project is a more permissive library that attempts to provide a plausible "
"reading of ambiguous metadata in cases where :ref:`packaging` will instead "
"report on error."
msgstr ""
"このプロジェクトは、 :ref:`パッケージング仕様 <packaging-specifications` で定"
"義された近代的な Python パッケージング相互運用性標準を実装することに焦点を当"
"てており、この標準と互換性が取れないほど古いレガシーパッケージについてエラー"
"を報告します。対照的に、 :ref:`distlib` プロジェクトはもっと寛容なライブラリ"
"で、 :ref:`packaging` ならばエラーを報告するような場合であっても曖昧なメタ"
"データをもっともらしく読み込もうと試みます。"

#: ../source/key_projects.rst:155
#: ../source/specifications/platform-compatibility-tags.rst:161
msgid "pip"
msgstr "pip"

#: ../source/key_projects.rst:157
msgid ""
"`Docs <https://pip.pypa.io/>`__ | `Issues <https://github.com/pypa/pip/"
"issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi."
"org/project/pip/>`__"
msgstr ""
"`説明文書 <https://pip.pypa.io/>`__ | `課題リスト <https://github.com/pypa/"
"pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://"
"pypi.org/project/pip/>`__"

#: ../source/key_projects.rst:162
msgid ""
"The most popular tool for installing Python packages, and the one included "
"with modern versions of Python."
msgstr ""
"Python パッケージをインストールするに当たっての最もよく知られたツールで、"
"Python の新しめのバージョンには同梱されているもの。"

#: ../source/key_projects.rst:165
msgid ""
"It provides the essential core features for finding, downloading, and "
"installing packages from PyPI and other Python package indexes, and can be "
"incorporated into a wide range of development workflows via its command-line "
"interface (CLI)."
msgstr ""
"PyPI やその他の Python パッケージインデックスのパッケージを探索・ダウンロー"
"ド・インストールするための基本的な機能を提供するとともに、コマンドラインイン"
"タフェイス (CLI) を通じて広範囲の開発ワークフローに組み込むことができます。"

#: ../source/key_projects.rst:173
msgid "Pipenv"
msgstr "Pipenv"

#: ../source/key_projects.rst:175
msgid ""
":doc:`Docs <pipenv:index>` | `Source <https://github.com/pypa/pipenv>`__ | "
"`Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/"
"project/pipenv>`__"
msgstr ""
":doc:`説明文書 <pipenv:index>` | `ソースコード <https://github.com/pypa/"
"pipenv>`__ | `課題リスト <https://github.com/pypa/pipenv/issues>`__ | `PyPI "
"<https://pypi.org/project/pipenv>`__"

#: ../source/key_projects.rst:180
msgid ""
"Pipenv is a project that aims to bring the best of all packaging worlds to "
"the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:"
"`virtualenv` into one single toolchain. It can autoimport ``requirements."
"txt`` and also check for CVEs in `Pipfile` using `safety <https://pyup.io/"
"safety>`_."
msgstr ""
"Pipenv は、全てのパッケージング世界の最良のものを Python 世界に持ち込むことを"
"目的とするプロジェクトです。 :ref:`Pipfile` ・ :ref:`pip` ・ :ref:"
"`virtualenv` を単一のツールチェーンにまとめ上げるものです。 ``requirements."
"txt`` を自動的にインポートすることができ、また、 `safety <https://pyup.io/"
"safety>`_ を使って `Pipfile` 中の CVE を確認することができます。"

#: ../source/key_projects.rst:185
msgid ""
"Pipenv aims to help users manage environments, dependencies, and imported "
"packages on the command line. It also works well on Windows (which other "
"tools often underserve), makes and checkes file hashes, to ensure compliance "
"with hash-locked dependency specifiers, and eases uninstallation of packages "
"and dependencies."
msgstr ""
"Pipenv は、ユーザがコマンドラインで環境・依存関係・インポートされたパッケージ"
"を管理することを補助することを目的としています。 (他のツールが往々にしてうま"
"く動かない) Windows 上でもきちんと動作し、ファイルのハッシュ値を計算し確認す"
"ることでハッシュ値による依存関係識別子との互換性を確保し、パッケージの依存関"
"係先のアンインストールを容易にします。"

#: ../source/key_projects.rst:194
msgid "Pipfile"
msgstr "Pipfile"

#: ../source/key_projects.rst:196
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr "`ソースコード <https://github.com/pypa/pipfile>`__"

#: ../source/key_projects.rst:198
msgid ""
":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level "
"application-centric alternative to :ref:`pip`'s lower-level :file:"
"`requirements.txt` file."
msgstr ""
":file:`Pipfile` とその姉妹 :file:`Pipfile.lock` は、 :ref:`pip` における低レ"
"ベルの :file:`requirements.txt` ファイルに代わる高レベルのアプリケーション中"
"心のファイルです。"

#: ../source/key_projects.rst:205
msgid "pipx"
msgstr "pipx"

#: ../source/key_projects.rst:207
msgid ""
"`Docs <https://pypa.github.io/pipx/>`__ | `GitHub <https://github.com/pypa/"
"pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""
"`説明文書 <https://pypa.github.io/pipx/>`__ | `GitHub <https://github.com/"
"pypa/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"

#: ../source/key_projects.rst:211
msgid ""
"pipx is a tool to install and run Python command-line applications without "
"causing dependency conflicts with other packages installed on the system."
msgstr ""
"pipx は、システムにインストール済みの他のパッケージとの間に依存関係の衝突を起"
"こすことなく Python のコマンドラインアプリケーションをインストールし動作させ"
"るためのツールです。"

#: ../source/key_projects.rst:218
msgid ""
":doc:`Docs <packaging.python.org:index>` | `Issues <https://github.com/pypa/"
"packaging.python.org/issues>`__ | `GitHub <https://github.com/pypa/packaging."
"python.org>`__"
msgstr ""
":doc:`説明文書 <packaging.python.org:index>` | `課題リスト <https://github."
"com/pypa/packaging.python.org/issues>`__ | `GitHub <https://github.com/pypa/"
"packaging.python.org>`__"

#: ../source/key_projects.rst:222
msgid "This guide!"
msgstr "このガイド!"

#: ../source/key_projects.rst:227
msgid "readme_renderer"
msgstr "readme_renderer"

#: ../source/key_projects.rst:229
msgid ""
"`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"
msgstr ""
"`GitHub および説明文書 <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"

#: ../source/key_projects.rst:232
msgid ""
"``readme_renderer`` is a library that package developers use to render their "
"user documentation (README) files into HTML from markup languages such as "
"Markdown or reStructuredText. Developers call it on its own or via :ref:"
"`twine`, as part of their release management process, to check that their "
"package descriptions will properly display on PyPI."
msgstr ""
"``readme_renderer`` は、Markdown や reStructuredText のようなマークアップ言語"
"で書かれたユーザ向け説明ファイル (README) を HTML に展開するためにパッケージ"
"開発者が用いるライブラリです。開発者は、リリース管理プロセスの一環として直接"
"または :ref:`twine` 経由でこれを呼び出し、そのパッケージに関する説明がきちん"
"と PyPI に表示されることを確認します。"

#: ../source/key_projects.rst:243
msgid "setuptools"
msgstr "setuptools"

#: ../source/key_projects.rst:245
msgid ""
"`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://"
"github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/"
"setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""
"`説明文書 <https://setuptools.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/"
"pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"

#: ../source/key_projects.rst:250
msgid ""
"setuptools (which includes ``easy_install``) is a collection of enhancements "
"to the Python distutils that allow you to more easily build and distribute "
"Python :term:`distributions <Distribution Package>`, especially ones that "
"have dependencies on other packages."
msgstr ""
"(``easy_install`` を含む) setuptools は Python の distutils への拡張を集めた"
"もので、特に他のパッケージに依存関係がある場合に、より簡単に Python の :term:"
"`配布物 <Distribution Package>` をビルドし配布することが可能となります。"

#: ../source/key_projects.rst:255
msgid ""
"`distribute`_ was a fork of setuptools that was merged back into setuptools "
"(in v0.7), thereby making setuptools the primary choice for Python packaging."
msgstr ""
"`distribute`_ は setuptools から分岐したもので、 setuptools に (v0.7 で) 再合"
"流し、その時からは setuptools が Python のパッケージングにおける第一の選択肢"
"となりました。"

#: ../source/key_projects.rst:262
msgid "trove-classifiers"
msgstr "trove-classifiers"

#: ../source/key_projects.rst:264
msgid ""
"`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"
msgstr ""
"`課題リスト <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"

#: ../source/key_projects.rst:268
msgid ""
"trove-classifiers is the canonical source for `classifiers on PyPI <https://"
"pypi.org/classifiers/>`_, which project maintainers use to `systematically "
"describe their projects <https://packaging.python.org/specifications/core-"
"metadata/#classifier-multiple-use>`_ so that users can better find projects "
"that match their needs on the PyPI."
msgstr ""
"trove-classifiers は、`PyPI における分類子 <https://pypi.org/classifiers/>`_ "
"の正統な源泉で、ユーザがそのニーズに即したプロジェクトを PyPI でよりうまく探"
"し出せるように、プロジェクトの管理者が `プロジェクトを体系的に表現する "
"<https://packaging.python.org/specifications/core-metadata/#classifier-"
"multiple-use>`_ のに使います。"

#: ../source/key_projects.rst:274
msgid ""
"The trove-classifiers package contains a list of valid classifiers and "
"deprecated classifiers (which are paired with the classifiers that replace "
"them).  Use this package to validate classifiers used in packages intended "
"for uploading to PyPI. As this list of classifiers is published as code, you "
"can install and import it, giving you a more convenient workflow compared to "
"referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. "
"The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for "
"the project hosts discussions on proposed classifiers and requests for new "
"classifiers."
msgstr ""
"trove-classifiers パッケージには、正当な分類子および (それを置き換えた分類子"
"と一組で) 非推奨になった分類子のリストが含まれています。 PyPI にアップロード"
"しようとしているパッケージで使われている分類子の正当性を確認するために、この"
"パッケージを使いましょう。この分類子リストがソースコードの形で公開されている"
"ので、それをインストールしてインポートすれば、 `PyPI で公開されているリスト "
"<https://pypi.org/classifiers/>`_ を参照するよりももっと便利なワークフローを"
"構築することができます。本プロジェクトの `課題リスト <https://github.com/"
"pypa/trove-classifiers/issues>`_ に、提案された分類子に関する議論や新しい分類"
"子が欲しいという要求に関する議論が公開されています。"

#: ../source/key_projects.rst:288
msgid "twine"
msgstr "twine"

#: ../source/key_projects.rst:290
msgid ""
"`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | "
"`PyPI <https://pypi.org/project/twine>`__"
msgstr ""
"`説明文書 <https://twine.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/"
"twine>`__ | `PyPI <https://pypi.org/project/twine>`__"

#: ../source/key_projects.rst:295
msgid ""
"Twine is the primary tool developers use to upload packages to the Python "
"Package Index or other Python package indexes. It is a command-line program "
"that passes program files and metadata to a web API. Developers use it "
"because it's the official PyPI upload tool, it's fast and secure, it's "
"maintained, and it reliably works."
msgstr ""
"Twine は、開発者がパッケージをPython パッケージインデックス (PyPI) や他の "
"Python 用パッケージインデックスへアップロードするのに使う最初の選択肢です。こ"
"れはコマンドラインプログラムで、プログラムのファイルやメタデータを web API へ"
"渡します。開発者がこれを使うのは、公式の PyPI へのアップロードツールであるか"
"らであり、動作が速く安全であるからであり、保守されているからであり、動作が信"
"頼できるからです。"

#: ../source/key_projects.rst:305 ../source/overview.rst:412
msgid "virtualenv"
msgstr "virtualenv"

#: ../source/key_projects.rst:307
msgid ""
":doc:`Docs <virtualenv:index>` | `Issues <https://github.com/pypa/virtualenv/"
"issues>`__ | `GitHub <https://github.com/pypa/virtualenv>`__ | `PyPI "
"<https://pypi.org/project/virtualenv/>`__"
msgstr ""
":doc:`説明文書 <virtualenv:index>` | `課題リスト <https://github.com/pypa/"
"virtualenv/issues>`__ | `GitHub <https://github.com/pypa/virtualenv>`__ | "
"`PyPI <https://pypi.org/project/virtualenv/>`__"

#: ../source/key_projects.rst:312
msgid ""
"virtualenv is a tool which uses the command-line path environment variable "
"to create isolated Python :term:`Virtual Environments <Virtual "
"Environment>`, much as :ref:`venv` does. virtualenv provides additional "
"functionality, compared to :ref:`venv`, by supporting Python 2.7 and by "
"providing convenient features for configuring, maintaining, duplicating, and "
"troubleshooting the virtual environments. For more information, see the "
"section on :ref:`Creating and using Virtual Environments`."
msgstr ""
"virtualenv は、 :ref:`venv` とほとんど同様にコマンドラインのパス環境変数を"
"使って独立した Python :term:`仮想環境 <Virtual Environment>` を生成するツール"
"です。 virtualenv は、Python 2.7 をサポートすることや仮想環境の設定・保守・複"
"製・問題解決のための便利な機能を提供することで、 :ref:`venv` よりも多くの機能"
"を提供します。さらなる情報については、:ref:`仮想環境を作って使う <Creating "
"and using Virtual Environments>` の節を見てください。"

#: ../source/key_projects.rst:325
msgid "Warehouse"
msgstr "Warehouse"

#: ../source/key_projects.rst:327
msgid ""
"`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/"
"warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""
"`説明文書 <https://warehouse.pypa.io/>`__ | `課題リスト <https://github.com/"
"pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"

#: ../source/key_projects.rst:331
msgid ""
"The current codebase powering the :term:`Python Package Index (PyPI)`. It is "
"hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` "
"downloads."
msgstr ""
"現在の :term:`Python パッケージインデックス <Python Package Index (PyPI)>` を"
"構成しているコードベース。 `pypi.org <https://pypi.org/>`_ にホストされていま"
"す。 :ref:`pip` がダウンロードする際のデフォルトのソースです。"

#: ../source/key_projects.rst:339
msgid "wheel"
msgstr "wheel"

#: ../source/key_projects.rst:341
msgid ""
"`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | "
"`PyPI <https://pypi.org/project/wheel>`__"
msgstr ""
"`説明文書 <https://wheel.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/"
"wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"

#: ../source/key_projects.rst:346
msgid ""
"Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` "
"extension for creating :term:`wheel distributions <Wheel>`.  Additionally, "
"it offers its own command line utility for creating and installing wheels."
msgstr ""
"wheel は、主として :term:`wheel 配布物 <Wheel>` を作成するための :ref:"
"`setuptools` の拡張である ``bidet_wheel`` を提供するプロジェクトです。この他"
"にも、wheel ファイルを作成しインストールするためのコマンドラインユーティリ"
"ティを提供します。"

#: ../source/key_projects.rst:350
msgid ""
"See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that "
"package developers use to check and fix Python packages they are making in "
"the binary wheel format. It provides functionality to discover dependencies, "
"check metadata for compliance, and repair the wheel and metadata to properly "
"link and include external shared libraries in a package."
msgstr ""
"パッケージ開発者がバイナリの wheel フォーマットで開発中の Python パッケージを"
"チェックし問題を解決するためのツールである `auditwheel <https://github.com/"
"pypa/auditwheel>`__ も見てください。このツールは、依存関係を検出し、法令遵守"
"のためのメタデータを確認し、 wheel とメタデータがパッケージないの外部共有ライ"
"ブラリに正しくリンクしインクルードするように修正する機能を提供します。"

#: ../source/key_projects.rst:359
msgid "Non-PyPA Projects"
msgstr "非 PyPA プロジェクト"

#: ../source/key_projects.rst:364
msgid "buildout"
msgstr "buildout"

#: ../source/key_projects.rst:366
msgid ""
"`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs."
"launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""
"`説明文書 <http://www.buildout.org/en/latest/>`__ | `課題リスト <https://"
"bugs.launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"

#: ../source/key_projects.rst:371
msgid ""
"Buildout is a Python-based build system for creating, assembling and "
"deploying applications from multiple parts, some of which may be non-Python-"
"based.  It lets you create a buildout configuration and reproduce the same "
"software later."
msgstr ""
"Buildout は Python ベースのビルドシステムで、非 Python ベースのものを含む複数"
"の部品から構成されるアプリケーションの生成・組み立て・配置ができます。"
"buildout の設定を作っておけば、後で同じソフトウェアを再生成することができま"
"す。"

#: ../source/key_projects.rst:378
msgid "conda"
msgstr "conda"

#: ../source/key_projects.rst:380
msgid ":doc:`Docs <conda:index>`"
msgstr ":doc:`説明文書 <conda:index>`"

#: ../source/key_projects.rst:382
msgid ""
"conda is the package management tool for `Anaconda <https://docs.anaconda."
"com/anaconda/>`__ Python installations. Anaconda Python is a distribution "
"from `Anaconda, Inc <https://www.anaconda.com/products/individual>`__ "
"specifically aimed at the scientific community, and in particular on Windows "
"where the installation of binary extensions is often difficult."
msgstr ""
"conda は、 Python 実装である `Anaconda <https://docs.anaconda.com/anaconda/"
">`__ のためのパッケージ管理ツールです。Anaconda Python は、 `Anaconda, Inc "
"<https://www.anaconda.com/products/individual>`__ が特に科学計算の分野に向け"
"て配布している配布物で、とりわけ通常ならバイナリ拡張のインストールが難しいと"
"される Windows 用に配布しています。"

#: ../source/key_projects.rst:389
msgid ""
"Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, "
"but provides many of their combined features in terms of package management, "
"virtual environment management and deployment of binary extensions."
msgstr ""
"Conda は、 :ref:`pip` や virtualenv や wheel とは全く別のツールですが、パッ"
"ケージ管理・仮想環境管理・バイナリ拡張のデプロイメントの観点ではこれらのツー"
"ルを合わせたような機能を提供します。"

#: ../source/key_projects.rst:393
msgid ""
"Conda does not install packages from PyPI and can install only from the "
"official Anaconda repositories, or anaconda.org (a place for user-"
"contributed *conda* packages), or a local (e.g. intranet) package server.  "
"However, note that :ref:`pip` can be installed into, and work side-by-side "
"with conda for managing :term:`distributions <Distribution Package>` from "
"PyPI. Also, `conda skeleton <https://docs.conda.io/projects/conda-build/en/"
"latest/user-guide/tutorials/build-pkgs-skeleton.html>`__ is a tool to make "
"Python packages installable by conda by first fetching them from PyPI and "
"modifying their metadata."
msgstr ""
"Conda は PyPI からパッケージをインストールすることはなく、公式の Anaconda リ"
"ポジトリか、anaconda.org (ユーザが貢献した *conda* パッケージの置き場所) か、"
"または、ローカル (例えばイントラネット) にあるパッケージサーバからのみインス"
"トールすることができます。しかしながら、:ref:`pip` をインストールすることは可"
"能で、PyPI からの :term:`配布物 <Distribution Package>` の管理という点では "
"conda と平行して動作することができます。また、 `conda skeleton <https://docs."
"conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-"
"skeleton.html>`__ は、 PyPI から持ってきた Python パッケージのメタデータを修"
"正することで conda がインストールできるものにするためのツールです。"

#: ../source/key_projects.rst:406
msgid "devpi"
msgstr "devpi"

#: ../source/key_projects.rst:408
msgid ""
"`Docs <http://doc.devpi.net/latest/>`__ | :gh:`Issues <devpi/devpi/issues>` "
"| `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""
"`説明文書 <http://doc.devpi.net/latest/>`__ | :gh:`課題リスト <devpi/devpi/"
"issues>` | `PyPI <https://pypi.org/project/devpi>`__"

#: ../source/key_projects.rst:412
msgid ""
"devpi features a powerful PyPI-compatible server and PyPI proxy cache with a "
"complementary command line tool to drive packaging, testing and release "
"activities with Python. devpi also provides a browsable and searchable web "
"interface."
msgstr ""
"devpi は、 Python を使ったパッケージングやテスティングやリリース活動を推進す"
"るための補完的なコマンドラインツールを備えた PyPI 互換の強力なサーバと PyPI "
"プロクシキャッシュの機能を持ちます。devpi は閲覧と検索が可能なwebインタフェイ"
"スも備えています。"

#: ../source/key_projects.rst:420
msgid "enscons"
msgstr "enscons"

#: ../source/key_projects.rst:422
msgid ""
":gh:`Source <dholth/enscons>` | :gh:`Issues <dholth/enscons/issues>` | `PyPI "
"<https://pypi.org/project/enscons>`__"
msgstr ""
":gh:`ソースコード <dholth/enscons>` | :gh:`課題リスト <dholth/enscons/"
"issues>` | `PyPI <https://pypi.org/project/enscons>`__"

#: ../source/key_projects.rst:426
msgid ""
"Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-"
"compatible source distributions and wheels without using distutils or "
"setuptools, including distributions with C extensions. Enscons has a "
"different architecture and philosophy than :ref:`distutils`. Rather than "
"adding build features to a Python packaging system, enscons adds Python "
"packaging to a general purpose build system. Enscons helps you to build "
"sdists that can be automatically built by :ref:`pip`, and wheels that are "
"independent of enscons."
msgstr ""
"Enscons は、 `SCons`_ に基礎を置く Python パッケージングツールです。 C 言語拡"
"張を含む配布物であっても distutils や setuptools を使うことなく :ref:`pip` 互"
"換のソースコード配布物や wheel をビルドすることができます。 Enscons の構造と"
"哲学は :ref:`distutils` のものとは異なります。 Python パッケージングシステム"
"にビルド機能を追加するのではなく、 enscons では汎用のビルドシステムに Python "
"パッケージング機能を追加しています。 Enscons は、 :ref:`pip` で自動的にビルド"
"された sdist や、enscons から独立した wheel をビルドすることを支援します。"

#: ../source/key_projects.rst:441
msgid "Hashdist"
msgstr "Hashdist"

#: ../source/key_projects.rst:443
msgid ""
"`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/hashdist/hashdist/>`__"
msgstr ""
"`説明文書 <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/hashdist/hashdist/>`__"

#: ../source/key_projects.rst:446
msgid ""
"Hashdist is a library for building non-root software distributions. Hashdist "
"is trying to be “the Debian of choice for cases where Debian technology "
"doesn’t work”. The best way for Pythonistas to think about Hashdist may be a "
"more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed "
"at solving the problem of installing scientific software, and making package "
"distribution stateless, cached, and branchable. It is used by some "
"researchers but has been lacking in maintenance since 2016."
msgstr ""
"Hashdist は、非特権ユーザソフトウェアの配布物をビルドするためのライブラリで"
"す。 Hashdist は、「Debian 技術が動作していない場合の Debian のような選択肢」"
"になろうとしています。 Python 支持者 (Pythonista) にとっては、 :ref:"
"`virtualenv` と :ref:`buildout` のより強力な混合物が Hashdist だと考えるのが"
"一番でしょう。科学計算分野のソフトウェアをインストールする際の問題を解決し、"
"パッケージ配布物をステートレスでキャッシュ可能かつ分岐可能にすることを目指し"
"ています。一部の研究者が使っていますが、2016 年以降は保守されていません。"

#: ../source/key_projects.rst:458
msgid "meson-python"
msgstr "meson-python"

#: ../source/key_projects.rst:460
msgid ""
"`Docs <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/mesonbuild/meson-python>`__"
msgstr ""
"`説明文書 <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/mesonbuild/meson-python>`__"

#: ../source/key_projects.rst:463
msgid ""
"``meson-python`` is a build backend that uses the Meson_ build system. It "
"enables Python package authors to use Meson_ as the build system for their "
"package. It supports a wide variety of languages, including C, and is able "
"to fill the needs of most complex build configurations."
msgstr ""
"``meson-python`` は、 Meson_ ビルドシステムを使うビルドバックエンドです。これ"
"によって、 Python パッケージの作者が自分のパッケージ向けに Meson_ をビルドシ"
"ステムとして使うことを可能にします。これは C 言語を含む広範囲の言語をサポート"
"しており、最も複雑なビルド設定を記述することが可能になります。"

#: ../source/key_projects.rst:473
msgid "multibuild"
msgstr "multibuild"

#: ../source/key_projects.rst:475
msgid "`GitHub <https://github.com/matthew-brett/multibuild>`__"
msgstr "`GitHub <https://github.com/matthew-brett/multibuild>`__"

#: ../source/key_projects.rst:477
msgid ""
"Multibuild is a set of CI scripts for building and testing Python :term:"
"`wheels <Wheel>` for Linux, macOS, and (less flexibly) Windows. Also see :"
"ref:`cibuildwheel`."
msgstr ""
"Multibuild は、Linux ・ macOS 向けや (柔軟性は落ちるが) Windows 向けの "
"Python :term:`wheels <Wheel>` をビルドしテストする一揃いの CI スクリプトで"
"す。 :ref:`cibuildwheel` も見てください。"

#: ../source/key_projects.rst:483
msgid "pdm"
msgstr "pdm"

#: ../source/key_projects.rst:485
msgid ""
"`Docs <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-project/"
"pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"
msgstr ""
"`説明文書 <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-"
"project/pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"

#: ../source/key_projects.rst:489
msgid ""
"PDM is a modern Python package manager with :pep:`582` support. It installs "
"and manages packages in a similar way to ``npm`` that doesn't need to create "
"a :term:`virtual environment` at all. It also uses :term:`pyproject.toml` to "
"store project metadata as defined in :pep:`621`."
msgstr ""
"PDM は、近代的な Python パッケージ管理ソフトで、 :pep:`582` をサポートしてい"
"ます。 :term:`仮想環境 <virtual environment>` を作る必要が全くない ``npm`` と"
"似たやり方でパッケージをインストール・管理します。 :pep:`621` で定義されてい"
"るように、プロジェクトのメタデータを :term:`pyproject.toml` に保存します。"

#: ../source/key_projects.rst:499 ../source/key_projects.rst:497
msgid ""
"`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""
"`説明文書 <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"

#: ../source/key_projects.rst:503 ../source/key_projects.rst:501
msgid ""
"pex is both a library and tool for generating :file:`.pex` (Python "
"EXecutable) files, standalone Python environments in the spirit of :ref:"
"`virtualenv`. :file:`.pex` files are just carefully constructed zip files "
"with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are "
"designed to make deployment of Python applications as simple as ``cp``."
msgstr ""
"pex は、 :ref:`virtualenv` の精神に則ったスタンドアローンの Python 環境であ"
"る :file:`.pex` (実行可能な Python ファイル) ファイルを生成するツールでありラ"
"イブラリです。 :file:`.pex` ファイルは、 ``#!/usr/bin/env python`` と特別な :"
"file:`__main__.py` を伴う注意深く構築された zip ファイルであり、単に cp すれ"
"ば Python アプリケーションを配置 (deploy) できるように設計されています。"

#: ../source/key_projects.rst:512 ../source/key_projects.rst:510
msgid "pip-tools"
msgstr "pip-tools"

#: ../source/key_projects.rst:514 ../source/key_projects.rst:512
msgid ""
"`Docs <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-"
"tools/>`__"
msgstr ""
"`説明文書 <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/"
"project/pip-tools/>`__"

#: ../source/key_projects.rst:518 ../source/key_projects.rst:516
msgid ""
"pip-tools is a suite of tools meant for Python system administrators and "
"release managers who particularly want to keep their builds deterministic "
"yet stay up to date with new versions of their dependencies. Users can "
"specify particular release of their dependencies via hash, conveniently make "
"a properly formatted list of requirements from information in other parts of "
"their program, update all dependencies (a feature :ref:`pip` currently does "
"not provide), and create layers of constraints for the program to obey."
msgstr ""
"pip-tools は、Python システムの管理者やリリースマネージャで、特にビルドが必ず"
"できるように保ちたいけれども依存先の新バージョンに追随して最新の状態にもして"
"おきたいという人々のための一揃いのツール群です。ユーザはハッシュ値を与えるこ"
"とで依存先の特定のリリースを指定することや、そのプログラムの他の部分にある情"
"報から適切な書式の requirements を簡単に作成すること、すべての依存先を更新す"
"ること (これは現時点の :ref:`pip` にはない機能です) 、プログラムが従うべき制"
"約条件の層を作成することができます。"

#: ../source/key_projects.rst:530 ../source/key_projects.rst:528
msgid "piwheels"
msgstr "piwheels"

#: ../source/key_projects.rst:532 ../source/key_projects.rst:530
msgid ""
"`Website <https://www.piwheels.org/>`__ | :doc:`Docs <piwheels:index>` | "
"`GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""
"`Web サイト <https://www.piwheels.org/>`__ | :doc:`説明文書 <piwheels:"
"index>` | `GitHub <https://github.com/piwheels/piwheels/>`__"

#: ../source/key_projects.rst:536 ../source/key_projects.rst:534
msgid ""
"piwheels is a website, and software underpinning it, that fetches source "
"code distribution packages from PyPI and compiles them into binary wheels "
"that are optimized for installation onto Raspberry Pi computers. Raspberry "
"Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""
"piwheels は、ソースコード配布物パッケージを PyPI から取得して Raspberry Pi 計"
"算機へのインストールに最適化されたバイナリ wheel ファイルにコンパイルするよう"
"な Web サイトであり、それを支えるソフトウェアです。 Raspberry Pi OS では、 "
"pip が PyPI に加えて piwheel.org を追加のインデックスとして使うように予め設定"
"されています。"

#: ../source/key_projects.rst:545 ../source/key_projects.rst:543
msgid "poetry"
msgstr "poetry"

#: ../source/key_projects.rst:547 ../source/key_projects.rst:545
msgid ""
"`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-"
"poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""
"`説明文書 <https://python-poetry.org/>`__ | `GitHub <https://github.com/"
"python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"

#: ../source/key_projects.rst:551 ../source/key_projects.rst:549
msgid ""
"poetry is a command-line tool to handle dependency installation and "
"isolation as well as building and packaging of Python packages. It uses "
"``pyproject.toml`` and, instead of depending on the resolver functionality "
"within :ref:`pip`, provides its own dependency resolver. It attempts to "
"speed users' experience of installation and dependency resolution by locally "
"caching metadata about dependencies."
msgstr ""
"poetry は、 Python パッケージのビルドやパッケージングに加えて、依存先のインス"
"トールや隔離を取り扱うコマンドラインのツールです。 :ref:`pip` に含まれる解決"
"機能に依存する代わりに ``pyproject.toml`` を使って自分自身の依存関係解決機能"
"を提供します。依存関係に関するメタデータをローカルにキャッシュすることでイン"
"ストールや依存関係解決のユーザ体験を高速化しようとしています。"

#: ../source/key_projects.rst:561 ../source/key_projects.rst:559
msgid "pypiserver"
msgstr "pypiserver"

#: ../source/key_projects.rst:563 ../source/key_projects.rst:561
msgid ""
"`Docs <https://github.com/pypiserver/pypiserver/blob/master/README.rst>`__ | "
"`GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi."
"org/project/pypiserver/>`__"
msgstr ""
"`説明文書 <https://github.com/pypiserver/pypiserver/blob/master/README."
"rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI "
"<https://pypi.org/project/pypiserver/>`__"

#: ../source/key_projects.rst:567 ../source/key_projects.rst:565
msgid ""
"pypiserver is a minimalist application that serves as a private Python "
"package index within organizations, implementing a simple API and browser "
"interface. You can upload private packages using standard upload tools, and "
"users can download and install them with :ref:`pip`, without publishing them "
"publicly. Organizations who use pypiserver usually download packages both "
"from pypiserver and from PyPI."
msgstr ""
"pypiserver は、素朴な API とブラウザ向けのインタフェイスだけを実装したプライ"
"ベートの Python パッケージインデックスサーバとして振る舞う「小さいことは良い"
"ことだ」主義者のアプリケーションです。公衆向けに公開することなく標準のツール"
"を使って外部非公開のパッケージをアップロードすることもできますし、それを "
"`pip` でダウンロード・インストールすることもできます。 pypiserver を用いる組"
"織では、通常は pypiserver と PyPI の両方からパッケージをダウンロードします。"

#: ../source/key_projects.rst:577 ../source/key_projects.rst:575
msgid "PyScaffold"
msgstr "PyScaffold"

#: ../source/key_projects.rst:579 ../source/key_projects.rst:577
msgid ""
"`Docs <https://pyscaffold.org>`__ | `GitHub <https://github.com/pyscaffold/"
"pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"
msgstr ""
"`説明文書 <https://pyscaffold.org>`__ | `GitHub <https://github.com/"
"pyscaffold/pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"

#: ../source/key_projects.rst:583 ../source/key_projects.rst:581
msgid ""
"PyScaffold is a project generator for bootstrapping Python packages, ready "
"to be shared on PyPI and installable via :ref:`pip`. It relies on a set of "
"sane default configurations for established tools (such as :ref:"
"`setuptools`, pytest_ and Sphinx_) to provide a productive environment so "
"developers can start coding right away. PyScaffold can also be used with "
"existing projects to make packaging easier."
msgstr ""
"PyScaffold は、Python パッケージが PyPI で共有できて :ref:`pip` でインストー"
"ルできるように初期設定を行うプロジェクトジェネレータです。定評のあるツール (:"
"ref:`setuptools` や pytest_ や Sphinx_) 用に穏当なデフォルト設定を与えること"
"で、開発者がすぐにコードを書き始められるような生産的な環境を提供します。 "
"PyScaffold は、また、既存のプロジェクトにおいてもパッケージングをより簡単にす"
"るために使用することができます。"

#: ../source/key_projects.rst:595 ../source/key_projects.rst:593
msgid "scikit-build"
msgstr "scikit-build"

#: ../source/key_projects.rst:597 ../source/key_projects.rst:595
msgid ""
"`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/"
"scikit-build>`__"
msgstr ""
"`説明文書 <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/"
"project/scikit-build>`__"

#: ../source/key_projects.rst:601 ../source/key_projects.rst:599
msgid ""
"Scikit-build is an improved build system generator for CPython C/C++/Fortran/"
"Cython extensions that integrates with :ref:`setuptools`, :ref:`wheel` and :"
"ref:`pip`. It internally uses `cmake <https://pypi.org/project/cmake>`__ "
"(available on PyPI) to provide better support for additional compilers, "
"build systems, cross compilation, and locating dependencies and their "
"associated build requirements. To speed up and parallelize the build of "
"large projects, the user can install `ninja <https://pypi.org/project/"
"ninja>`__ (also available on PyPI)."
msgstr ""
"Scikit-build は、CPython C/C++/Fortran/Cython による拡張モジュールのため"
"の、 :ref:`setuptools` や :ref:`wheel` や :ref:`pip` を統合した改善されたビル"
"ドシステム生成機構です。追加のコンパイラ・ビルドシステム・クロスコンパイル・"
"依存先とビルド条件の特定のためのより良いサポートを提供するために、内部では "
"`cmake <https://pypi.org/project/cmake>`__ (PyPI から入手可能) を使います。巨"
"大プロジェクトのビルドを高速化し並列化するために、 `ninja <https://pypi.org/"
"project/ninja>`__ (これも PyPI から入手可能) をインストールすることも可能で"
"す。"

#: ../source/key_projects.rst:613 ../source/key_projects.rst:611
msgid "shiv"
msgstr "shiv"

#: ../source/key_projects.rst:615 ../source/key_projects.rst:613
msgid ""
"`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""
"`説明文書 <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"

#: ../source/key_projects.rst:619 ../source/key_projects.rst:617
msgid ""
"shiv is a command line utility for building fully self contained Python "
"zipapps as outlined in :pep:`441`, but with all their dependencies included. "
"Its primary goal is making distributing Python applications and command line "
"tools fast & easy."
msgstr ""
"shiv は、 :pep:`441` に概要が示されている完全自己完結型 Python zipapp である"
"が必要な依存先をすべて内包したものをビルドするためのコマンドラインユーティリ"
"ティです。このツールの第一の目標は、Python アプリケーションとコマンドライン"
"ツールを素早く簡便に配布できるようにすることです。"

#: ../source/key_projects.rst:629 ../source/key_projects.rst:627
msgid ""
":doc:`Docs <spack:index>` | `GitHub <https://github.com/spack/spack>`__ | "
"`Paper <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `Slides <https://tgamblin.github.io/files/"
"Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""
":doc:`説明文書 <spack:index>` | `GitHub <https://github.com/spack/spack>`__ "
"| `論文 <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `スライド <https://tgamblin.github.io/"
"files/Gamblin-Spack-SC15-Talk.pdf>`__"

#: ../source/key_projects.rst:634 ../source/key_projects.rst:632
msgid ""
"A flexible package manager designed to support multiple versions, "
"configurations, platforms, and compilers.  Spack is like Homebrew, but "
"packages are written in Python and parameterized to allow easy swapping of "
"compilers, library versions, build options, etc. Arbitrarily many versions "
"of packages can coexist on the same system. Spack was designed for rapidly "
"building high performance scientific applications on clusters and "
"supercomputers."
msgstr ""
"(spack は) 複数のバージョン・設定・プラットフォーム・コンパイラをサポートする"
"ように設計された自由度の高いパッケージマネージャです。 Spack は Homebrew に似"
"ていますが、Python で書かれていてコンパイラやライブラリのバージョン、ビルドオ"
"プションなどが簡単に入れ替えることができるようにパラメータ化されています。同"
"一のシステムの中に任意のバージョンのパッケージをいくつも同居させることができ"
"ます。 Spack は、元々はクラスタ構成のコンピュータ群やスーパーコンピュータの上"
"で科学分野の高パフォーマンスアプリケーションを素早くビルドするために設計され"
"ました。"

#: ../source/key_projects.rst:642 ../source/key_projects.rst:640
msgid ""
"Spack is not in PyPI (yet), but it requires no installation and can be used "
"immediately after cloning from GitHub."
msgstr ""
"Spack は (まだ) PyPI にありませんが、 GitHub からクローンした直後にインストー"
"ル作業なしで使用できます。"

#: ../source/key_projects.rst:648 ../source/key_projects.rst:646
msgid "zest.releaser"
msgstr "zest.releaser"

#: ../source/key_projects.rst:650 ../source/key_projects.rst:648
msgid ""
"`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/"
"zest.releaser/>`__"
msgstr ""
"`説明文書 <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi."
"org/project/zest.releaser/>`__"

#: ../source/key_projects.rst:654 ../source/key_projects.rst:652
msgid ""
"``zest.releaser`` is a Python package release tool providing an abstraction "
"layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to "
"automate incrementing package version numbers, updating changelogs, tagging "
"releases in source control, and uploading new packages to PyPI."
msgstr ""
"``zest.releaser`` は、 :ref:`twine` の上に抽象レイヤを提供する Python パッ"
"ケージのリリースツールです。 Python 開発者は ``zest.releaser`` を使ってパッ"
"ケージバージョンを増加させたり、変更履歴 (Changelog) を更新したり、ソースコー"
"ド管理の側でリリースタグを挿入したり、新しいパッケージを PyPI にアップロード"
"することを自動化することができます。"

#: ../source/key_projects.rst:661 ../source/key_projects.rst:659
msgid "Standard Library Projects"
msgstr "標準ライブラリ内のプロジェクト群"

#: ../source/key_projects.rst:666 ../source/key_projects.rst:664
msgid "ensurepip"
msgstr "ensurepip"

#: ../source/key_projects.rst:668 ../source/key_projects.rst:666
msgid ""
"`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues "
"<https://bugs.python.org/>`__"
msgstr ""
"`説明文書 <https://docs.python.org/3/library/ensurepip.html>`__ | `課題リス"
"ト <https://bugs.python.org/>`__"

#: ../source/key_projects.rst:671 ../source/key_projects.rst:669
msgid ""
"A package in the Python Standard Library that provides support for "
"bootstrapping :ref:`pip` into an existing Python installation or virtual "
"environment.  In most cases, end users won't use this module, but rather it "
"will be used during the build of the Python distribution."
msgstr ""
"このパッケージはPython の標準ライブラリ内のパッケージで、既存のインストール済"
"み Python 環境や仮想環境に :ref:`pip` を組み込むためのサポートを提供します。"
"ほとんどの場合にはエンドユーザがこのモジュールを使うことはなく、どちらかと言"
"えば Python 配布物のビルドの際に使われるでしょう。"

#: ../source/key_projects.rst:680 ../source/key_projects.rst:678
msgid "distutils"
msgstr "distutils"

#: ../source/key_projects.rst:682 ../source/key_projects.rst:680
msgid ""
"`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues "
"<https://bugs.python.org/>`__"
msgstr ""
"`説明文書 <https://docs.python.org/3/library/distutils.html>`__ | `課題リス"
"ト <https://bugs.python.org/>`__"

#: ../source/key_projects.rst:685 ../source/key_projects.rst:683
msgid ""
"The original Python packaging system, added to the standard library in "
"Python 2.0."
msgstr ""
"Python の元々のパッケージングシステムで、Python 2.0 の時点で標準ライブラリに"
"追加されました。"

#: ../source/key_projects.rst:688 ../source/key_projects.rst:686
msgid ""
"Due to the challenges of maintaining a packaging system where feature "
"updates are tightly coupled to language runtime updates, direct usage of :"
"ref:`distutils` is now actively discouraged, with :ref:`Setuptools` being "
"the preferred replacement. :ref:`Setuptools` not only provides features that "
"plain :ref:`distutils` doesn't offer (such as dependency declarations and "
"entry point declarations), it also provides a consistent build interface and "
"feature set across all supported Python versions."
msgstr ""
"パッケージングシステムを維持管理する際の難題には機能向上が言語ラインタイムの"
"更新と密接に結びついていることが挙げられますが、そのせいで :ref:`distutils` "
"を直接に使用することは現在では強い非推奨事項になっていて、代わりに :ref:"
"`Setuptools` を使うことが望ましいとされています。 :ref:`Setuptools` は、 :"
"ref:`distutils` そのものが提供していない機能 (例えば依存関係の宣言やエントリ"
"ポイントの宣言) を提供できるだけでなく、守備一貫したビルド用のインタフェイス"
"やサポートするすべてのバージョンの Python のすべてについて設定できる機能を提"
"供しています。"

#: ../source/key_projects.rst:701 ../source/key_projects.rst:699
msgid "venv"
msgstr "venv"

#: ../source/key_projects.rst:703 ../source/key_projects.rst:701
msgid ""
"`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <https://"
"github.com/python/cpython/issues>`__"
msgstr ""
"`説明文書 <https://docs.python.org/3/library/venv.html>`__ | `課題リスト "
"<https://github.com/python/cpython/issues>`__"

#: ../source/key_projects.rst:706 ../source/key_projects.rst:704
msgid ""
"A package in the Python Standard Library (starting with Python 3.3) for "
"creating :term:`Virtual Environments <Virtual Environment>`.  For more "
"information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"(Python 3.3 から始まる) Python の標準ライブラリに存在する :term:`仮想環境 "
"<Virtual Environment>` を生成するためのパッケージ。更なる情報については :ref:"
"`仮想環境を作って使う <Creating and using Virtual Environments>` を見てくださ"
"い。"

#: ../source/news.rst:2
msgid "News"
msgstr "ニュース"

#: ../source/news.rst:5
msgid "September 2019"
msgstr "2019年9月"

#: ../source/news.rst:6
msgid "Added a guide about publishing dists via GitHub Actions. (:pr:`647`)"
msgstr ""
"GitHub Actions を経由して配布物を公開するためのガイドを追加。 (:pr:`647`)"

#: ../source/news.rst:9
msgid "August 2019"
msgstr "2019年8月"

#: ../source/news.rst:10
msgid "Updated to use :file:`python3 -m` when installing pipx. (:pr:`631`)"
msgstr ""
"pipx をインストールする際に :file:`python3 -m` を使うように更新。 (:pr:`631`)"

#: ../source/news.rst:13
msgid "July 2019"
msgstr "2019年7月"

#: ../source/news.rst:14
msgid "Marked all PEP numbers with the :pep: role. (:pr:`629`)"
msgstr "すべての PEP 番号を :pep: 役割の形にした。 (:pr:`629`)"

#: ../source/news.rst:15
msgid "Upgraded Sphinx version and removed pypa.io intersphinx. (:pr:`625`)"
msgstr ""
"Sphinx のバージョンを上げ、papa.io の intersphinx を削除した。 (:pr:`625`)"

#: ../source/news.rst:16
msgid "Mentioned :file:`find_namespace_packages`. (:pr:`622`)"
msgstr ":file:`find_namespace_packages` に言及した。 (:pr:`622`)"

#: ../source/news.rst:17
msgid "Updated directory layout examples for consistency. (:pr:`611`)"
msgstr "一貫性確保のためにディレクトリ配置の例を更新した。 (:pr:`611`)"

#: ../source/news.rst:18
msgid "Updated Bandersnatch link to GitHub. (:pr:`623`)"
msgstr "Bandersnatch の GitHub へのリンクを更新した。 (:pr:`623`)"

#: ../source/news.rst:21
msgid "June 2019"
msgstr "2019年6月"

#: ../source/news.rst:22
msgid "Fixed some typos. (:pr:`620`)"
msgstr "いくつかの誤記を訂正した。 (:pr:`620`)"

#: ../source/news.rst:25
msgid "May 2019"
msgstr "2019年5月"

#: ../source/news.rst:26
msgid "Added :file:`python_requires` usage to packaging tutorial. (:pr:`613`)"
msgstr ""
":file:`python_requires` の使い方をパッケージングチュートリアルに追記した。 (:"
"pr:`613`)"

#: ../source/news.rst:27
msgid "Added a MANIFEST.in guide page. (:pr:`609`)"
msgstr "MANIFEST.in について説明するページを追加した。 (:pr:`609`)"

#: ../source/news.rst:30
msgid "April 2019"
msgstr "2019年4月"

#: ../source/news.rst:31
msgid ""
"Added a mention for :file:`shiv` in the key projects section. (:pr:`608`)"
msgstr ""
":file:`shiv` への言及を嗅ぎとなるプロジェクト群の節に追加した。 (:pr:`608`)"

#: ../source/news.rst:32
msgid "Reduced emphasis on virtualenv. (:pr:`606`)"
msgstr "virtualenv に関する強調を減少させた。 (:pr:`606`)"

#: ../source/news.rst:35
msgid "March 2019"
msgstr "2019年3月"

#: ../source/news.rst:36
msgid "Moved single-sourcing guide version option to Python 3. (:pr:`605`)"
msgstr ""
"「パッケージのバージョンを１箇所で管理する」の項を Python 3 側に移した。 (:"
"pr:`605`)"

#: ../source/news.rst:37
msgid "Covered RTD details for contributing. (:pr:`600`)"
msgstr "RTD の詳細について貢献方法のところでカバーした。 (:pr:`600`)"

#: ../source/news.rst:40
msgid "February 2019"
msgstr "2019年2月"

#: ../source/news.rst:41
msgid ""
"Elaborate upon the differences between the tutorial and the real packaging "
"process. (:pr:`602`)"
msgstr ""
"チュートリアルの内容と実際のパッケージングプロセスの間の差異について詳しく述"
"べた。 (:pr:`602`)"

#: ../source/news.rst:42
msgid "Added instructions to install Python CLI applications. (:pr:`594`)"
msgstr ""
"Python の CLI アプリケーションをインストールするための指示書きを追加した。 (:"
"pr:`594`)"

#: ../source/news.rst:45
msgid "January 2019"
msgstr "2019年1月"

#: ../source/news.rst:46
msgid "Added :file:`--no-deps` to the packaging tutorial. (:pr:`593`)"
msgstr ""
"パッケージングチュートリアルに :file:`--no-deps` を追加した。 (:pr:`593`)"

#: ../source/news.rst:47
msgid "Updated Sphinx and Nox. (:pr:`591`)"
msgstr "Sphinx と Nox について更新した。 (:pr:`591`)"

#: ../source/news.rst:48
msgid "Referenced Twine from Python3. (:pr:`581`)"
msgstr "Python 3 の項に Twine への言及を追加した。 (:pr:`581`)"

#: ../source/news.rst:51
msgid "December 2018"
msgstr "2018年12月"

#: ../source/news.rst:52
msgid "No programmers in the office!"
msgstr "事務所にプログラマが居ません！"

#: ../source/news.rst:55
msgid "November 2018"
msgstr "2018年11月"

#: ../source/news.rst:56
msgid "Removed landing page link to PyPI migration guide. (:pr:`575`)"
msgstr "PyPI 移行ガイドへのランディングページリンクを削除した。 (:pr:`575`)"

#: ../source/news.rst:57
msgid "Changed bumpversion to bump2version. (:pr:`572`)"
msgstr "bumpversion を bump2version に変更した。 (:pr:`572`)"

#: ../source/news.rst:58
msgid "Added single-sourcing package version example. (:pr:`573`)"
msgstr "パッケージバージョンの一元管理の例を追加した。 (:pr:`573`)"

#: ../source/news.rst:59
msgid "Added a guide for creating documentation. (:pr:`568`)"
msgstr "ドキュメント作成のためのガイドを追加した。 (:pr:`568`)"

#: ../source/news.rst:62
msgid "October 2018"
msgstr "2018年10月"

#: ../source/news.rst:63
msgid "Updated Nox package name. (:pr:`566`)"
msgstr "Nox パッケージの名称を更新した。 (:pr:`566`)"

#: ../source/news.rst:64
msgid "Mentioned Sphinx extensions in guides. (:pr:`562`)"
msgstr "ガイドの中で Sphinx 拡張について言及した。 (:pr:`562`)"

#: ../source/news.rst:67
msgid "September 2018"
msgstr "2018年9月"

#: ../source/news.rst:68
msgid "Added a section on checking RST markup. (:pr:`554`)"
msgstr "RST マークアップの検査に関する節を追加した。 (:pr:`554`)"

#: ../source/news.rst:69
msgid "Updated user installs page. (:pr:`558`)"
msgstr "ユーザによるインストールのページを更新した。 (:pr:`558`)"

#: ../source/news.rst:70
msgid "Updated Google BigQuery urls. (:pr:`556`)"
msgstr "Google BigQuery の url を更新した。 (:pr:`556`)"

#: ../source/news.rst:71
msgid "Replaced tar command with working command. (:pr:`552`)"
msgstr "tar コマンドについて動作するコマンドに置換した。 (:pr:`552`)"

#: ../source/news.rst:72
msgid ""
"Changed to double quotes in the pip install SomeProject==1.4. (:pr:`550`)"
msgstr ""
"pip インストールで SomeProject==1.4 と書くところをダブルクォーテーションマー"
"クに変更した。 (:pr:`550`)"

#: ../source/news.rst:75
msgid "August 2018"
msgstr "2018年8月"

#: ../source/news.rst:76
msgid "Removed the recommendation to store passwords in cleartext. (:pr:`546`)"
msgstr "パスワードを平文で保存することを推奨していたのを削除した。 (:pr:`546`)"

#: ../source/news.rst:77
msgid ""
"Moved the Overview to a task based lead in along with the others. (:pr:`540`)"
msgstr "他のものに加えて、概要をタスク別の見出しに移した。 (:pr:`540`)"

#: ../source/news.rst:78
msgid "Updated Python version supported by virtualenv. (:pr:`538`)"
msgstr "virtualenv がサポートする Python のバージョンを更新した。 (:pr:`538`)"

#: ../source/news.rst:79
msgid "Added outline/rough draft of new Overview page. (:pr:`519`)"
msgstr "新しい概要のページのあらまし/ラフな下書きを追加した。 (:pr:`519`)"

#: ../source/news.rst:82
msgid "July 2018"
msgstr "2018年7月"

#: ../source/news.rst:84
msgid "Improved binary extension docs. (:pr:`531`)"
msgstr "バイナリ拡張に関する説明文書を改善した。 (:pr:`531`)"

#: ../source/news.rst:85
msgid "Added scikit-build to key projects. (:pr:`530`)"
msgstr "scikit-build を主要プロジェクトに追加した。 (:pr:`530`)"

#: ../source/news.rst:88
msgid "June 2018"
msgstr "2018年6月"

#: ../source/news.rst:90
msgid "Fixed categories of interop PEP for pypa.io. (:pr:`527`)"
msgstr "pypa.io に関する相互運用性 PEP のカテゴリ分けを修正した。 (:pr:`527`)"

#: ../source/news.rst:91
msgid "Updated Markdown descriptions explanation. (:pr:`522`)"
msgstr "descriptions をマークダウンで書く場合の説明を更新した。 (:pr:`522`)"

#: ../source/news.rst:94
msgid "May 2018"
msgstr "2018年5月"

#: ../source/news.rst:96
msgid "Noted issues with Provides-Dist and Obsoletes-Dist. (:pr:`513`)"
msgstr "Provides-Diet と Obsolete-Diet の課題を注記した。 (:pr:`513`)"

#: ../source/news.rst:97
msgid ""
"Removed outdated warning about Python version mixing with Pipenv. (:pr:`501`)"
msgstr ""
"Pipenv で異なるバージョンの Python を使う場合の警告が古くなっていたので削除し"
"た。 (:pr:`501`)"

#: ../source/news.rst:98
msgid "Simplified packaging tutorial. (:pr:`498`)"
msgstr "パッケージングのチュートリアルを簡素にした。 (:pr:`498`)"

#: ../source/news.rst:99
msgid "Updated Windows users instructions for clarity. (:pr:`493`)"
msgstr "明確性のため、 Windows ユーザ向けの指示を更新した。 (:pr:`493`)"

#: ../source/news.rst:100
msgid "Updated the license section description for completeness. (:pr:`492`)"
msgstr "完全性のためにライセンスの節の記述を更新した。 (:pr:`492`)"

#: ../source/news.rst:101
msgid "Added specification-style document to contributing section. (:pr:`489`)"
msgstr "「貢献するには」の節に仕様のスタイルの記述を追加した。 (:pr:`489`)"

#: ../source/news.rst:102
msgid "Added documentation types to contributing guide. (:pr:`485`)"
msgstr "「貢献するには」ガイドにドキュメントのタイプを追記した。 (:pr:`485`)"

#: ../source/news.rst:105
msgid "April 2018"
msgstr "2018年4月"

#: ../source/news.rst:107
msgid "Added README guide. (:pr:`461`)"
msgstr "README ガイドを追加した。 (:pr:`461`)"

#: ../source/news.rst:108
msgid "Updated instructions and status for PyPI launch. (:pr:`475`)"
msgstr "PyPI の供用開始についてやり方と状態を更新した。 (:pr:`475`)"

#: ../source/news.rst:109
msgid "Added instructions for Warehouse. (:pr:`471`)"
msgstr "Warehouse についての指示を追加した。 (:pr:`471`)"

#: ../source/news.rst:110
msgid "Removed GPG references from publishing tutorial. (:pr:`466`)"
msgstr ""
"(パッケージを?) 公開するチュートリアルから GPG の参照情報を削除した。 (:pr:"
"`466`)"

#: ../source/news.rst:111
msgid "Added 'What’s in which Python 3.4–3.6?'. (:pr:`468`)"
msgstr "「Python 3.4-3.6 では何がどれに入ってる？」を追加した。 (:pr:`468`)"

#: ../source/news.rst:112
msgid "Added a guide for phasing out Python versions. (:pr:`459`)"
msgstr ""
"あるバージョンの Python を徐々に使わなくするガイドを追加した。 (:pr:`459`)"

#: ../source/news.rst:113
msgid "Made default Description-Content-Type variant GFM. (:pr:`462`)"
msgstr ""
"変種の GFM をデフォルトの Description-Content-Type とした。 (:pr:`462`)"

#: ../source/news.rst:116
msgid "March 2018"
msgstr "2018年3月"

#: ../source/news.rst:118
msgid "Updated \"installing scientific packages\". (:pr:`455`)"
msgstr "「科学計算分野のパッケージ群」を更新した。 (:pr:`455`)"

#: ../source/news.rst:119
msgid ""
"Added :file:`long_description_content_type` to follow PEP 556. (:pr:`457`)"
msgstr ""
"PEP 556 に従う :file:`long_description_content_type` を追加した。 (:pr:`457`)"

#: ../source/news.rst:120
msgid "Clarified a long description classifier on pypi.org. (:pr:`456`)"
msgstr ""
"pypi.org における long description 分類子について明確化した。 (:pr:`456`)"

#: ../source/news.rst:121
msgid "Updated Core Metadata spec to follw PEP 556. (:pr:`412`)"
msgstr "コアとなるメタデータ仕様が PEP 556 に従うように更新した。 (:pr:`412`)"

#: ../source/news.rst:124
msgid "February 2018"
msgstr "2018年2月"

#: ../source/news.rst:126
msgid ""
"Added python3-venv and python3-pip to Debian installation instructions. (:pr:"
"`445`)"
msgstr ""
"Debian でのインストール指示に python3-venv と python3-pip を追記した。 (:pr:"
"`445`)"

#: ../source/news.rst:127
msgid "Updated PyPI migration info. (:pr:`439`)"
msgstr "PyPI 移行情報を更新した。 (:pr:`439`)"

#: ../source/news.rst:128
msgid ""
"Added a warning about managing multiple versions with pipenv. (:pr:`430`)"
msgstr ""
"複数のバージョンの pipenv を取り扱う際の注意事項を追記した。 (:pr:`430`)"

#: ../source/news.rst:129
msgid "Added example of multiple emails to Core Metadata. (:pr:`429`)"
msgstr ""
"コアとなるメタデータの項に複数の電子メールアドレスの例を追加した。 (:pr:"
"`429`)"

#: ../source/news.rst:130
msgid "Added explanation of \"legacy\" in test.pypi.org/legacy. (:pr:`426`)"
msgstr "test.pypi.org/legacy に \"legacy\" の説明を加えた。 (:pr:`426`)"

#: ../source/news.rst:133
msgid "January 2018"
msgstr "2018年1月"

#: ../source/news.rst:135
msgid "Added a link to PyPI's list of classifiers. (:pr:`425`)"
msgstr "PyPI にある分類子のリストへのリンクを追加した。 (:pr:`425`)"

#: ../source/news.rst:136
msgid "Updated README.rst explanation. (:pr:`419`)"
msgstr "README.rst についての説明を更新した。 (:pr:`419`)"

#: ../source/news.rst:139
msgid "December 2017"
msgstr "2017年12月"

#: ../source/news.rst:141
msgid ""
"Replaced :file:`~` with :file:`$HOME` in guides and tutorials.  (:pr:`418`)"
msgstr ""
"ガイドやチュートリアルで :file:`~` を :file:`$HOME` に置き換えた。 (:pr:"
"`418`)"

#: ../source/news.rst:142
msgid "Noted which fields can be used with environment markers. (:pr:`416`)"
msgstr ""
"環境マーカとともにどのフィールドを使うことができるのかについて注記した。 (:"
"pr:`416`)"

#: ../source/news.rst:143
msgid "Updated Requires-Python section. (:pr:`414`)"
msgstr "Requires-Python の節を更新した。 (:pr:`414`)"

#: ../source/news.rst:144
msgid "Added news page. (:pr:`404`)"
msgstr "ニュースのページを追加した。 (:pr:`404`)"

#: ../source/news.rst:147
msgid "November 2017"
msgstr "2017年11月"

#: ../source/news.rst:149
msgid ""
"Introduced a new dependency management tutorial based on Pipenv. (:pr:`402`)"
msgstr ""
"Pipenv を基盤とした依存関係の管理に関するチュートリアルを新たに追加した。 (:"
"pr:`402`)"

#: ../source/news.rst:150
msgid ""
"Updated the *Single Sourcing Package Version* tutorial to reflect pip's "
"current strategy. (:pr:`400`)"
msgstr ""
"*パッケージバージョンの一元管理* のチュートリアルが pip の現在の戦略を反映す"
"るように更新した。 (:pr:`400`)"

#: ../source/news.rst:152
msgid ""
"Added documentation about the ``py_modules`` argument to ``setup``. (:pr:"
"`398`)"
msgstr ""
"``setup`` に対する ``py_modules`` 引数について説明を追加した。 (:pr:`398`)"

#: ../source/news.rst:153
msgid "Simplified the wording for the :file:`manifest.in` section. (:pr:`395`)"
msgstr ":file:`manifest.in` 節での用語を簡素化した。 (:pr:`395`)"

#: ../source/news.rst:156
msgid "October 2017"
msgstr "2017年10月"

#: ../source/news.rst:158
msgid ""
"Added a specification for the :file:`entry_points.txt` file. (:pr:`398`)"
msgstr ":file:`entry_points.txt` ファイルの仕様を追記した。 (:pr:`398`)"

#: ../source/news.rst:159
msgid ""
"Created a new guide for managing packages using ``pip`` and ``virtualenv``. "
"(:pr:`385`)"
msgstr ""
"``pip`` や ``virtualenv`` を用いてパッケージを管理するためのガイドを新設し"
"た。 (:pr:`385`)"

#: ../source/news.rst:160
msgid "Split the specifications page into multiple pages. (:pr:`386`)"
msgstr "仕様のページを複数ページに分割した。 (:pr:`386`)"

#: ../source/news.rst:163
msgid "September 2017"
msgstr "2017年9月"

#: ../source/news.rst:165
msgid ""
"Encouraged using ``readme_renderer`` to validate :file:`README.rst`. (:pr:"
"`379`)"
msgstr ""
":file:`README.rst` を検証するために ``readme_renderer`` を使用することを推奨"
"するようにした。 (:pr:`379`)"

#: ../source/news.rst:167
msgid "Recommended using the ``--user-base`` option. (:pr:`374`)"
msgstr "``--user-base`` オプションの使用を推奨するようにした。 (:pr:`374`)"

#: ../source/news.rst:170
msgid "August 2017"
msgstr "2017年8月"

#: ../source/news.rst:172
msgid ""
"Added a new, experimental tutorial on installing packages using ``Pipenv``. "
"(:pr:`369`)"
msgstr ""
"``Pipenv`` を用いてパッケージをインストールする方法について新たに試験的な"
"チュートリアルを追加した。 (:pr:`369`)"

#: ../source/news.rst:173
msgid "Added a new guide on how to use ``TestPyPI``. (:pr:`366`)"
msgstr "``TestPyPI`` を使う方法について新たにガイドを追加した。 (:pr:`366`)"

#: ../source/news.rst:174
msgid "Added :file:`pypi.org` as a term. (:pr:`365`)"
msgstr ":file:`pypi.org` を用語として追加した。 (:pr:`365`)"

#: ../source/news.rst:177
msgid "July 2017"
msgstr "2017年7月"

#: ../source/news.rst:179
msgid "Added ``flit`` to the key projects list. (:pr:`358`)"
msgstr "``flit`` を鍵となるプロジェクト群のリストに追加した。 (:pr:`358`)"

#: ../source/news.rst:180
msgid "Added ``enscons`` to the list of key projects. (:pr:`357`)"
msgstr "``enscons `` を鍵となるプロジェクト群のリストに追加した。 (:pr:`357`)"

#: ../source/news.rst:181
msgid ""
"Updated this guide's ``readme`` with instructions on how to build the guide "
"locally. (:pr:`356`)"
msgstr ""
"本ガイドの ``readme`` にローカル環境でこのガイドをビルドする方法を追加して更"
"新した。 (:pr:`356`)"

#: ../source/news.rst:182
msgid ""
"Made the new ``TestPyPI`` URL more visible, adding note to homepage about "
"pypi.org. (:pr:`354`)"
msgstr ""
"ホームページにpypi.org に関する注記を加えることで、新しい ``TestPyPI`` の "
"URL がより目立つようにした。 (:pr:`354`)"

#: ../source/news.rst:183
msgid ""
"Added a note about the removal of the explicit registration API. (:pr:`347`)"
msgstr "明示的な登録を行う API の削除について注記を追加した。 (:pr:`347`)"

#: ../source/news.rst:186
msgid "June 2017"
msgstr "2017年6月"

#: ../source/news.rst:188
msgid "Added a document on migrating uploads to :file:`PyPI.org`. (:pr:`339`)"
msgstr ""
":file:`PyPI.org` へのアップロード方法の変更について説明を追加した。 (:pr:"
"`339`)"

#: ../source/news.rst:189
msgid "Added documentation for ``python_requires``. (:pr:`338`)"
msgstr "``python_requires`` について説明を追加した。 (:pr:`338`)"

#: ../source/news.rst:190
msgid ""
"Added a note about PyPI migration in the *Tool Recommendations* tutorial. (:"
"pr:`335`)"
msgstr ""
"*推奨されるツール* のチュートリアル内で PyPI の移転に関する注記を追加した。 "
"(:pr:`335`)"

#: ../source/news.rst:191
msgid ""
"Added a note that :file:`manifest.in` does not affect wheels. (:pr:`332`)"
msgstr ""
":file:`manifest.in` が wheel には影響を与えないことを注記した。 (:pr:`332`)"

#: ../source/news.rst:192
msgid "Added a license section to the distributing guide. (:pr:`331`)"
msgstr "配布ガイドにライセンスの節を追加した。 (:pr:`331`)"

#: ../source/news.rst:193
msgid "Expanded the section on the ``name`` argument. (:pr:`329`)"
msgstr "``name`` 引数に関する節を拡充した。 (:pr:`329`)"

#: ../source/news.rst:194
msgid "Adjusted the landing page. (:pr:`327`, :pr:`326`, :pr:`324`)"
msgstr "ランディングページを調整した。 (:pr:`327`, :pr:`326`, :pr:`324`)"

#: ../source/news.rst:195
msgid "Updated to Sphinx 1.6.2. (:pr:`323`)"
msgstr "Sphinx 1.6.2 にバージョンを上げた。 (:pr:`323`)"

#: ../source/news.rst:196
msgid "Switched to the PyPA theme. (:pr:`305`)"
msgstr "PyPA のテーマに切り替えた。 (:pr:`305`)"

#: ../source/news.rst:197
msgid "Re-organized the documentation into the new structure. (:pr:`318`)"
msgstr "説明文書を新しい構造に再編成した。 (:pr:`318`)"

#: ../source/news.rst:200
msgid "May 2017"
msgstr "2017年5月"

#: ../source/news.rst:202
msgid ""
"Added documentation for the ``Description-Content-Type`` field. (:pr:`258`)"
msgstr "``Description-Content-Type`` 欄について説明を追加した。 (:pr:`258`)"

#: ../source/news.rst:203
msgid "Added contributor and style guide. (:pr:`307`)"
msgstr "貢献者向けのガイドとスタイルガイドを追加した。 (:pr:`307`)"

#: ../source/news.rst:204
msgid ""
"Documented ``pip`` and ``easy_install``'s differences for per-project "
"indexes. (:pr:`233`)"
msgstr ""
"プロジェクト単位の索引における ``pip`` と ``easy_install`` の差異について説明"
"した。 (:pr:`233`)"

#: ../source/news.rst:207
msgid "April 2017"
msgstr "2017年4月"

#: ../source/news.rst:209
msgid "Added travis configuration for testing pull requests. (:pr:`300`)"
msgstr "プルリクエストの試験のための travis 設定を追記した。 (:pr:`300`)"

#: ../source/news.rst:210
msgid ""
"Mentioned the requirement of the ``wheel`` package for creating wheels (:pr:"
"`299`)"
msgstr ""
"wheel ファイルを生成するための ``wheel`` パッケージへの要求条件に言及するよう"
"にした。 (:pr:`299`)"

#: ../source/news.rst:211
msgid ""
"Removed the ``twine register`` reference in the *Distributing Packages* "
"tutorial. (:pr:`271`)"
msgstr ""
"*パッケージを配布する* チュートリアルにおいて ``twine register`` への参照を削"
"除した。 (:pr:`271`)"

#: ../source/news.rst:212
msgid "Added a topic on plugin discovery. (:pr:`294`, :pr:`296`)"
msgstr "プラグインの検索に関する話題を追加した。 (:pr:`294`, :pr:`296`)"

#: ../source/news.rst:213
msgid "Added a topic on namespace packages. (:pr:`290`)"
msgstr "名前空間パッケージの話題を追加した。 (:pr:`290`)"

#: ../source/news.rst:214
msgid ""
"Added documentation explaining prominently how to install ``pip`` in ``/usr/"
"local``. (:pr:`230`)"
msgstr ""
"``pip`` を ``/usr/local`` にインストールする方法を目立つように説明する文書を"
"追加した。 (:pr:`230`)"

#: ../source/news.rst:215
msgid ""
"Updated development mode documentation to mention that order of local "
"packages matters. (:pr:`208`)"
msgstr ""
"開発モードの説明文書を更新して、ローカルパッケージの記入順に意味があることに"
"言及するようにした。 (:pr:`208`)"

#: ../source/news.rst:216
msgid ""
"Convert readthedocs link for their ``.org`` -> ``.io`` migration for hosted "
"projects (:pr:`239`)"
msgstr ""
"ホストしているプロジェクトのところで readthedocs の引っ越しに合わせてリンク"
"を ``.org`` から ``.io`` に変更した。 (:pr:`239`)"

#: ../source/news.rst:217
msgid ""
"Swaped order of :file:`setup.py` arguments for the upload command, as order "
"is significant. (:pr:`260`)"
msgstr ""
"順序が意味を持つので、アップロードコマンドの :file:`setup.py` の引数の順序を"
"入れ替えた。 (:pr:`260`)"

#: ../source/news.rst:219
msgid ""
"Explained how to install from unsupported sources using a helper "
"application. (:pr:`289`)"
msgstr ""
"サポートされていないソースからヘルパーアプリケーションを用いてインストールす"
"る方法について説明した。 (:pr:`289`)"

#: ../source/news.rst:223
msgid "March 2017"
msgstr "2017年3月"

#: ../source/news.rst:225
msgid "Covered ``manylinux1`` in *Platform Wheels*. (:pr:`283`)"
msgstr ""
"*プラットフォームWheels* の項で ``manylinux1`` をカバーした。 (:pr:`283`)"

#: ../source/news.rst:228
msgid "February 2017"
msgstr "2017年2月"

#: ../source/news.rst:230
msgid "Added :pep:`518`. (:pr:`281`)"
msgstr ":pep:`518` を追加した。 (:pr:`281`)"

#: ../source/overview.rst:3
msgid "An Overview of Packaging for Python"
msgstr "Python におけるパッケージングに関する概要"

#: ../source/overview.rst:7
msgid ""
"As a general-purpose programming language, Python is designed to be used in "
"many ways. You can build web sites or industrial robots or a game for your "
"friends to play, and much more, all using the same core technology."
msgstr ""
"汎用プログラミング言語として Python は数多くの用途に使えるように設計されてい"
"ます。ウェブサイト構築にも産業用ロボットにもあなたが友達と一緒に遊ぶゲームに"
"ももっと他の用途にも、同じコア技術が使えるのです。"

#: ../source/overview.rst:12
msgid ""
"Python's flexibility is why the first step in every Python project must be "
"to think about the project's audience and the corresponding environment "
"where the project will run. It might seem strange to think about packaging "
"before writing code, but this process does wonders for avoiding future "
"headaches."
msgstr ""
"Python は自由度が高いので、プロジェクトの利用者について、また、それに対応して"
"プロジェクトが動作するであろう環境について、すべての Python プロジェクトにお"
"いて最初に考えなければなりません。コードを書く前にパッケージングについて考え"
"ておくというのは奇妙に見えるかもしれませんが、この作業こそが将来の頭痛の種を"
"摘み取るという驚くべきことを起こすのです。"

#: ../source/overview.rst:18
msgid ""
"This overview provides a general-purpose decision tree for reasoning about "
"Python's plethora of packaging options. Read on to choose the best "
"technology for your next project."
msgstr ""
"この概要文書は、 Python の過剰とも言える多数のパッケージング手段からどれを選"
"択するかについての汎用の決定木を提供します。読み進めて、あなたの次のプロジェ"
"クトにとっての最適解を選んでください。"

#: ../source/overview.rst:26
msgid "Thinking about deployment"
msgstr "デプロイメントについて検討する"

#: ../source/overview.rst:28
msgid ""
"Packages exist to be installed (or *deployed*), so before you package "
"anything, you'll want to have some answers to the deployment questions below:"
msgstr ""
"パッケージはインストールされる(あるいは *配置* される)ために存在しているの"
"で、なにかをパッケージ化する前に次のような配置のための質問にいくらかの答えを"
"持っておきたいと思うでしょう:"

#: ../source/overview.rst:32
msgid ""
"Who are your software's users? Will your software be installed by other "
"developers doing software development, operations people in a datacenter, or "
"a less software-savvy group?"
msgstr ""
"あなたのソフトウェアのユーザはどんな人たちでしょうか？ソフトウェアを開発する"
"他の開発者たちがインストールするのでしょうか、データセンタでオペレーションを"
"する人々でしょうか、それとも、ソフトウェアを知り尽くしているとは言えないよう"
"な人たちでしょうか？"

#: ../source/overview.rst:35
msgid ""
"Is your software intended to run on servers, desktops, mobile clients "
"(phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""
"あなたのソフトウェアは、サーバ上で走らせることを想定していますか、それとも、"
"デスクトップ、モバイル端末 (携帯電話やタブレット端末等) 、あるいは、専用端末"
"に組み込む形で？"

#: ../source/overview.rst:37
msgid ""
"Is your software installed individually, or in large deployment batches?"
msgstr ""
"あなたのソフトウェアは、単独でインストールされるものですか、それとも、巨大な"
"デプロイメントバッチの一部として？"

#: ../source/overview.rst:39
msgid ""
"Packaging is all about target environment and deployment experience. There "
"are many answers to the questions above and each combination of "
"circumstances has its own solutions. With this information, the following "
"overview will guide you to the packaging technologies best suited to your "
"project."
msgstr ""
"パッケージングとは、インストール先となる環境と配置(デプロイ)経験に関わるすべ"
"てのことです。上に述べた質問には多くの回答があり、それぞれの事情の組み合わせ"
"ごとに解決策が存在します。この情報とともに、以下の概要説明の中で、あなたのプ"
"ロジェクトに最適なパッケージング技術についてご案内します。"

#: ../source/overview.rst:46
msgid "Packaging Python libraries and tools"
msgstr "Python のライブラリやツールをパッケージングする"

#: ../source/overview.rst:48
msgid ""
"You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are "
"just a few of the tools Python's ecosystem provides for distributing Python "
"code to developers, which you can read about in :doc:`guides/distributing-"
"packages-using-setuptools`."
msgstr ""
"PyPI や ``setup.py`` 、 ``wheel`` ファイルについて聞いたことがあるかもしれま"
"せん。これらは Python のソースコードを開発者に配布するための Python エコシス"
"テムのほんの一部で、これらについては :doc:`guides/distributing-packages-"
"using-setuptools` に説明があります。"

#: ../source/overview.rst:53
msgid ""
"The following approaches to packaging are meant for libraries and tools used "
"by technical audience in a development setting. If you're looking for ways "
"to package Python for a non-technical audience and/or a production setting, "
"skip ahead to :ref:`packaging-applications`."
msgstr ""
"パッケージングに関する以下のアプローチは、開発環境における技術に明るい聞き手"
"が用いるライブラリやツールを念頭に置いています。技術にあまり明るくない聞き手"
"向けに Python をパッケージする方法や、製品使用環境での方法を探している場合"
"は、 :ref:`アプリケーションをパッケージングする` まで飛ばしてください。"

#: ../source/overview.rst:59
msgid "Python modules"
msgstr "Python モジュール"

#: ../source/overview.rst:61
msgid ""
"A Python file, provided it only relies on the standard library, can be "
"redistributed and reused. You will also need to ensure it's written for the "
"right version of Python, and only relies on the standard library."
msgstr ""
"標準ライブラリだけに依存している Python のファイルは、再配布して再利用するこ"
"とができます。他には正しいバージョンの Python 用に書かれていることと、標準ラ"
"イブラリだけに依存していることを確実にしておけば良いでしょう。"

#: ../source/overview.rst:66
msgid ""
"This is great for sharing simple scripts and snippets between people who "
"both have compatible Python versions (such as via email, StackOverflow, or "
"GitHub gists). There are even some entire Python libraries that offer this "
"as an option, such as :doc:`bottle.py<bottle:tutorial>` and :doc:`boltons "
"<boltons:architecture>`."
msgstr ""
"この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python を"
"持っている人たちどうしで (電子メールや StackOverflow や GitHub gists などで) "
"共有するには優れた方法です。例えば :doc:`bottle.py <bottle:tutorial>` や :"
"doc:`boltons <boltons:architecture>` のように、 Python ライブラリ全体をこのや"
"り方で共有することをオプションの一つとして提供しているものさえあります。"

#: ../source/overview.rst:73
msgid ""
"However, this pattern won't scale for projects that consist of multiple "
"files, need additional libraries, or need a specific version of Python, "
"hence the options below."
msgstr ""
"しかしながら、複数のファイルで構成されるプロジェクトや追加のライブラリを必要"
"とするもの、また、特定バージョンの Python を必要とするものには適用できず、そ"
"の場合には下のようなやり方が選択肢になります。"

#: ../source/overview.rst:78
msgid "Python source distributions"
msgstr "Python ソースコード配布物"

#: ../source/overview.rst:80
msgid ""
"If your code consists of multiple Python files, it's usually organized into "
"a directory structure. Any directory containing Python files can comprise "
"an :term:`Import Package`."
msgstr ""
"あなたのソースコードが複数の Python ファイルでできているなら、ディレクトリ構"
"造の中に整理してあるのが普通です。 Python ファイルを置いてあるディレクトリな"
"らどれでも、 :term:`パッケージインポート <Import Package>` ができるはずです。"

#: ../source/overview.rst:84
msgid ""
"Because packages consist of multiple files, they are harder to distribute. "
"Most protocols support transferring only one file at a time (when was the "
"last time you clicked a link and it downloaded multiple files?). It's easier "
"to get incomplete transfers, and harder to guarantee code integrity at the "
"destination."
msgstr ""
"パッケージは複数のファイルで構成されるので、その配布がやや難しくなります。ほ"
"とんどのプロトコルではたった一個のファイルしか一度に送ることができません (リ"
"ンクをクリックしたら複数のファイルをダウンロードしたことあります？)。不完全な"
"転送になってしまうことは容易く、送り先でソースコードの完全性を保証することは"
"困難です。"

#: ../source/overview.rst:90
msgid ""
"So long as your code contains nothing but pure Python code, and you know "
"your deployment environment supports your version of Python, then you can "
"use Python's native packaging tools to create a *source* :term:`Distribution "
"Package`, or *sdist* for short."
msgstr ""
"あなたのソースコードが純粋な Python コード以外は何も含んでいない間は、そし"
"て、配置先の環境であなたが想定しているバージョンの Python が動作することを"
"知っていれば、 Python 由来のパッケージングツールを使って *ソースコード* :"
"term:`配布パッケージ <Distribution Package>` もしくは 短縮系で*sdist* を使え"
"ば良いでしょう。"

#: ../source/overview.rst:95
msgid ""
"Python's *sdists* are compressed archives (``.tar.gz`` files) containing one "
"or more packages or modules. If your code is pure-Python, and you only "
"depend on other Python packages, you can :doc:`go here to learn more <python:"
"distutils/sourcedist>`."
msgstr ""
"Python の *sdists* は圧縮済みのアーカイブ (``.tar.gz`` ファイル) で、ひとつか"
"それ以上のパッケージないしモジュールを内包しています。もしあなたのソースコー"
"ドが純粋に Python だけで書かれていて、他の Python パッケージに依存しているだ"
"けなら、 :doc:`こちらに詳しい説明があります <python:distutils/sourcedist>` 。"

#: ../source/overview.rst:100
msgid ""
"If you rely on any non-Python code, or non-Python packages (such as `libxml2 "
"<https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi."
"org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi."
"org/project/numpy>`_), you will need to use the format detailed in the next "
"section, which also has many advantages for pure-Python libraries."
msgstr ""
"もし非 Python のソースコード、あるいは、非 Python のパッケージ (`lxml "
"<https://pypi.org/project/lxml/>`_ における`libxml2 <https://en.wikipedia."
"org/wiki/Libxml2>`_ や、`numpy <https://pypi.org/project/numpy>`_ における "
"BLAS ライブラリなど) に依存しているなら、純 Python で書かれたライブラリにとっ"
"ても多くの利点がある、次の節で詳細に説明されるフォーマットを使う必要があるで"
"しょう。"

#: ../source/overview.rst:107
msgid ""
"Python and PyPI support multiple distributions providing different "
"implementations of the same package. For instance the unmaintained-but-"
"seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL "
"package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an "
"actively-maintained fork of PIL!"
msgstr ""
"Python と PyPI は、同一のパッケージの異なる実装を提供する複数の配布物をサポー"
"トしています。例えば、もはや保守されてはいないが先駆的で重要な `PIL 配布物 "
"<https://pypi.org/project/PIL/>`_ が PIL パッケージを提供しているし、 PIL か"
"らフォークして今も活発に保守されている `Pillow <https://pypi.org/project/"
"Pillow/>`_ も同様です！"

#: ../source/overview.rst:114
msgid ""
"This Python packaging superpower makes it possible for Pillow to be a drop-"
"in replacement for PIL, just by changing your project's ``install_requires`` "
"or ``requirements.txt``."
msgstr ""
"この Python パッケージングの素晴らしいパワーで、あなたのプロジェクトの "
"``install_requires`` か ``requirements.txt`` を変更するだけで Pillow が PIL "
"に対して単純に入れ替えるだけで済む代替物になっているのです。"

#: ../source/overview.rst:119
msgid "Python binary distributions"
msgstr "Python バイナリ配布物"

#: ../source/overview.rst:121
msgid ""
"So much of Python's practical power comes from its ability to integrate with "
"the software ecosystem, in particular libraries written in C, C++, Fortran, "
"Rust, and other languages."
msgstr ""
"Python の実際的な力の多くは、ソフトウェアのエコシステム、とりわけ C ・ C++ "
"・ Fortran ・ Rust ・その他の言語で書かれたライブラリと統合できる能力からもた"
"らされます。"

#: ../source/overview.rst:125
msgid ""
"Not all developers have the right tools or experiences to build these "
"components written in these compiled languages, so Python created the :term:"
"`Wheel`, a package format designed to ship libraries with compiled "
"artifacts. In fact, Python's package installer, ``pip``, always prefers "
"wheels because installation is always faster, so even pure-Python packages "
"work better with wheels."
msgstr ""
"このようなコンパイルを必要とする言語で書かれた部品をビルドするのに適切なツー"
"ルや経験をすべての開発者が持っているわけではないので、ライブラリをコンパイル"
"済みの状態で出荷するように設計された :term:`Wheel` を Python は作りました。実"
"際に、 Python のパッケージインストーラである ``pip`` は、インストールが素早く"
"できるので常に wheel ファイルを選好するし、純 Python のパッケージでさえも "
"wheel ファイルの方がうまく動作します。"

#: ../source/overview.rst:132
msgid ""
"Binary distributions are best when they come with source distributions to "
"match. Even if you don't upload wheels of your code for every operating "
"system, by uploading the sdist, you're enabling users of other platforms to "
"still build it for themselves. Default to publishing both sdist and wheel "
"archives together, *unless* you're creating artifacts for a very specific "
"use case where you know the recipient only needs one or the other."
msgstr ""
"バイナリ配布物は、対応するソースコード配布物と一緒に配布されるのが最良です。 "
"あらゆるオペレーティングシステム用のソースコードの wheel ファイルをアップロー"
"ドしていないとしても、sdist をアップロードすることで他のプラットフォームの"
"ユーザたちがビルドすることができるかもしれません。あなたが極めて特殊なユース"
"ケース向けにプログラムを作成していて、受け取る人たちがいずれか一方しか必要と"
"しないことを熟知しているので *ない限り* 、 sdist と wheel の両方を一緒に公開"
"することをデフォルトにしてください。"

#: ../source/overview.rst:140
msgid ""
"Python and PyPI make it easy to upload both wheels and sdists together. Just "
"follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""
"Python と PyPI を使えば、wheel ファイルと sdist ファイルを一緒にアップロード"
"するのが簡単になります。 :doc:`tutoeials/packaging-projects` のチュートリアル"
"に従うだけです。"

#: ../source/overview.rst:148
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr "ツールやライブラリ向けの Python のパッケージング機能の概要。"

#: ../source/overview.rst:148
msgid ""
"Python's recommended built-in library and tool packaging technologies. "
"Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?"
"v=iLVNWfPWAC8>`_."
msgstr ""
"Python が推奨するライブラリやツールをパッケージングする技術。`パッケージング"
"の変遷 (2017) <https://www.youtube.com/watch?v=iLVNWfPWAC8>`_ から抜粋。"

#: ../source/overview.rst:155
msgid "Packaging Python applications"
msgstr "Python アプリケーションをパッケージングする"

#: ../source/overview.rst:157
msgid ""
"So far we've only discussed Python's native distribution tools. Based on our "
"introduction, you would be correct to infer these built-in approaches only "
"target environments which have Python, and an audience who knows how to "
"install Python packages."
msgstr ""
"ここまで、 Python に元々組み込まれている配布ツールについてだけ議論してきまし"
"た。この導入部分に基づいて、これらのビルトインされたアプローチが Python のあ"
"る環境だけを対象にしたもので、聞き手は Python パッケージのインストール方法を"
"知っているものと推測するのは正しいでしょう。"

#: ../source/overview.rst:162
msgid ""
"With the variety of operating systems, configurations, and people out there, "
"this assumption is only safe when targeting a developer audience."
msgstr ""
"多様なオペレーティングシステム・設定・そこに居る人々を想定すると、聞き手が開"
"発者である場合にだけこの仮定が正当であると言えます。"

#: ../source/overview.rst:166
msgid ""
"Python's native packaging is mostly built for distributing reusable code, "
"called libraries, between developers. You can piggyback **tools**, or basic "
"applications for developers, on top of Python's library packaging, using "
"technologies like :doc:`setuptools entry_points <userguide/entry_point>`."
msgstr ""
"Python に元々組み込まれているパッケージング機能は、ほとんどの場合には、開発者"
"間で再利用可能なソースコードや呼び出されるライブラリを配布するために作られて"
"います。 :doc:`setuptools のエントリポイント <userguide/entry_point>` のよう"
"な技術を用いることで、 Python の packaging ライブラリの上に構築されている **"
"ツール類** や開発者向けの基本的なアプリケーションに便乗することができます。"

#: ../source/overview.rst:172
msgid ""
"Libraries are building blocks, not complete applications. For distributing "
"applications, there's a whole new world of technologies out there."
msgstr ""
"ライブラリは部品であって完成したアプリケーションではありません。アプリケー"
"ションを配布するには、全く新しい技術の世界が広がっています。"

#: ../source/overview.rst:176
msgid ""
"The next few sections organize these application packaging options according "
"to their dependencies on the target environment, so you can choose the right "
"one for your project."
msgstr ""
"ここからのいくつかの節では、ターゲットとなる環境への依存関係に従ってこのよう"
"なアプリケーションをパッケージングする選択肢を整理し、あなたのプロジェクトに"
"最適なものを選択できるようにしましょう。"

#: ../source/overview.rst:181
msgid "Depending on a framework"
msgstr "フレームワークに依存する"

#: ../source/overview.rst:183
msgid ""
"Some types of Python applications, like web site backends and other network "
"services, are common enough that they have frameworks to enable their "
"development and packaging. Other types of applications, like dynamic web "
"frontends and mobile clients, are complex enough to target that a framework "
"becomes more than a convenience."
msgstr ""
"ウェブサイトのバックエンドやその他のネットワークサービスのような、いくつかの"
"種類の Python アプリケーションでは、その開発とパッケージングを可能にするフ"
"レームワークが存在することは極めてありふれたことです。動的ウェブのフロントエ"
"ンドやモバイルクライアントのような他の種類のアプリケーションはとても複雑で、"
"フレームワークが単に便利という以上の存在になっています。"

#: ../source/overview.rst:189
msgid ""
"In all these cases, it makes sense to work backwards, from the framework's "
"packaging and deployment story. Some frameworks include a deployment system "
"which wraps the technologies outlined in the rest of the guide. In these "
"cases, you'll want to defer to your framework's packaging guide for the "
"easiest and most reliable production experience."
msgstr ""
"これら全てのケースで、フレームワークのパッケージングと配置の物語から振り返っ"
"てみるのが妥当でしょう。いくつかのフレームワークは、このガイドの残りの部分で"
"概要を描き出す技術を内包する配置システムを含んでいます。このような場合には、"
"最も簡単で最も信頼できる製品レベルの経験を積むまで、あなたのフレームワークの"
"パッケージングガイドを延期しておきたくなるでしょう。"

#: ../source/overview.rst:195
msgid ""
"If you ever wonder how these platforms and frameworks work under the hood, "
"you can always read the sections beyond."
msgstr ""
"このようなプラットフォームやフレームワークが内部でどのように動作しているのか"
"と不思議に思うのであれば、いつでもその先の節を読めば良いでしょう。"

#: ../source/overview.rst:199
msgid "Service platforms"
msgstr "サービスプラットフォーム"

#: ../source/overview.rst:201
msgid ""
"If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like Heroku "
"or Google App Engine, you are going to want to follow their respective "
"packaging guides."
msgstr ""
"Heroku や Google App Engine のような「プラットフォームアズアサービス」ないし"
"「PaaS」を使って開発をしているのであれば、各サービスのそれぞれのパッケージン"
"グガイドに従いたくなるでしょう。"

#: ../source/overview.rst:205
msgid ""
"`Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_"
msgstr ""
"`Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_"

#: ../source/overview.rst:206
msgid "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
msgstr "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"

#: ../source/overview.rst:207
msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
msgstr "`PythonAnywhere <https://www.pythonanywhere.com/>`_"

#: ../source/overview.rst:208
msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
msgstr "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"

#: ../source/overview.rst:209
msgid "\"Serverless\" frameworks like :gh:`Zappa <zappa/Zappa>`"
msgstr ":gh:`Zappa <zappa/Zappa>` のような「サーバレス」フレームワーク"

#: ../source/overview.rst:211
msgid ""
"In all these setups, the platform takes care of packaging and deployment, as "
"long as you follow their patterns. Most software does not fit one of these "
"templates, hence the existence of all the other options below."
msgstr ""
"これらすべての構成では、あなたが彼らのパターンに従っている限りはプラット"
"フォーム側がパッケージングと配置の世話をします。ほとんどのソフトウェアはこれ"
"らのテンプレートのうちの一つには合致しないので、下記のような他の選択肢が存在"
"することになります。"

#: ../source/overview.rst:216
msgid ""
"If you're developing software that will be deployed to machines you own, "
"users' personal computers, or any other arrangement, read on."
msgstr ""
"自分の機材やユーザのパーソナルコンピュータやその他の機材に配置することを想定"
"するソフトウェアを開発しているのであれば、このまま読み進めてください。"

#: ../source/overview.rst:220
msgid "Web browsers and mobile applications"
msgstr "ウェブブラウザとモバイルアプリケーション"

#: ../source/overview.rst:222
msgid ""
"Python's steady advances are leading it into new spaces. These days you can "
"write a mobile app or web application frontend in Python. While the language "
"may be familiar, the packaging and deployment practices are brand new."
msgstr ""
"Python は着実に前進して新しい世界に突入しています。最近では、モバイルアプリや"
"ウェブアプリケーションのフロントエンドを Python で書くことができるようになっ"
"ています。言語自体には慣れていても、パッケージングや配置の実務は全く新しいも"
"のになっています。"

#: ../source/overview.rst:227
msgid ""
"If you're planning on releasing to these new frontiers, you'll want to check "
"out the following frameworks, and refer to their packaging guides:"
msgstr ""
"このような新しい未開拓分野でリリースを計画しているのであれば、以下のフレーム"
"ワークに興味が湧いて、それぞれのパッケージングガイドを参照したくなるかもしれ"
"ません。"

#: ../source/overview.rst:231
msgid "`Kivy <https://kivy.org/>`_"
msgstr ""

#: ../source/overview.rst:232
msgid "`Beeware <https://pybee.org/>`_"
msgstr "`Beeware <https://pybee.org/>`_"

#: ../source/overview.rst:233
msgid "`Brython <https://brython.info/>`_"
msgstr "`Brython <https://brython.info/>`_"

#: ../source/overview.rst:234
msgid "`Flexx <https://flexx.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../source/overview.rst:236
msgid ""
"If you are *not* interested in using a framework or platform, or just wonder "
"about some of the technologies and techniques utilized by the frameworks "
"above, continue reading below."
msgstr ""
"フレームワークやプラットフォームに興味がなければ、あるいは、上記のフレーム"
"ワークが利用している技術や手練手管について不思議に思うのであれば、このまま読"
"み進めてください。"

#: ../source/overview.rst:241
msgid "Depending on a pre-installed Python"
msgstr "インストール済みの Python に依存する"

#: ../source/overview.rst:243
msgid ""
"Pick an arbitrary computer, and depending on the context, there's a very "
"good chance Python is already installed. Included by default in most Linux "
"and Mac operating systems for many years now, you can reasonably depend on "
"Python preexisting in your data centers or on the personal machines of "
"developers and data scientists."
msgstr ""
"任意のコンピュータを選んだ時に、もちろんその環境にもよりますが、 Python が既"
"にインストールされている確率は相当に高いでしょう。 Linux や Mac オペレーティ"
"ングシステムではもう多年にわたってデフォルトでインストールされているので、"
"データセンタの機材や、開発者やデータ科学者の個人用の機材には Python が入って"
"いるものと思っても構わないでしょう。"

#: ../source/overview.rst:249
msgid "Technologies which support this model:"
msgstr "このモデルを支える技術:"

#: ../source/overview.rst:251
msgid ":gh:`PEX <pantsbuild/pex#user-content-pex>` (Python EXecutable)"
msgstr ":gh:`PEX <pantsbuild/pex#user-content-pex>` (Python EXecutable)"

#: ../source/overview.rst:252
msgid ""
":doc:`zipapp <python:library/zipapp>` (does not help manage dependencies, "
"requires Python 3.5+)"
msgstr ""
":doc:`zipapp <python:library/zipapp>` (依存関係を管理する助けにはならない。"
"Python 3.5+ が必要。)"

#: ../source/overview.rst:253
msgid ":gh:`shiv <linkedin/shiv#user-content-shiv>` (requires Python 3)"
msgstr ":gh:`shiv <linkedin/shiv#user-content-shiv>` (Python 3 が必要)"

#: ../source/overview.rst:255
msgid ""
"Of all the approaches here, depending on a pre-installed Python relies the "
"most on the target environment. Of course, this also makes for the smallest "
"package, as small as single-digit megabytes, or even kilobytes."
msgstr ""
"ここでのすべてのアプローチでは、ほとんどのインストール先となる環境にインス"
"トール済みの Python があるものと当てにしています。もちろん、これは、一桁メガ"
"バイト規模やさらにはキロバイト規模の最小のパッケージを作ることになります。"

#: ../source/overview.rst:260
msgid ""
"In general, decreasing the dependency on the target system increases the "
"size of our package, so the solutions here are roughly arranged by "
"increasing size of output."
msgstr ""
"一般に、インストール先の環境に対する依存を減少させるとパッケージ側のサイズは"
"大きくなるので、ここで述べる解決策は、おおまかに出力となるパッケージのサイズ"
"の増える順番に整理しています。"

#: ../source/overview.rst:267
msgid "Depending on a separate software distribution ecosystem"
msgstr "個別のソフトウェア配布エコシステムに依存する"

#: ../source/overview.rst:269
msgid ""
"For a long time many operating systems, including Mac and Windows, lacked "
"built-in package management. Only recently did these OSes gain so-called "
"\"app stores\", but even those focus on consumer applications and offer "
"little for developers."
msgstr ""
"長い間、Mac や Windows を含むさまざまなオペレーティングシステムは、組み込みの"
"パッケージ管理システムを欠いてきました。ごく最近になって、これらの OS にも所"
"謂「アプリストア (app stores)」が追加されましたが、しかし、まだ消費者向けのア"
"プリケーションを扱っているだけであり、開発者の役に立つものは少ないのが現状で"
"す。"

#: ../source/overview.rst:274
msgid ""
"Developers long sought remedies, and in this struggle, emerged with their "
"own package management solutions, such as `Homebrew <https://brew.sh/>`_. "
"The most relevant alternative for Python developers is a package ecosystem "
"called `Anaconda <https://en.wikipedia.org/wiki/"
"Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is "
"increasingly common in academic, analytical, and other data-oriented "
"environments, even making its way `into server-oriented environments "
"<https://web.archive.org/web/20190403064038/https://www.paypal-engineering."
"com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""
"長い間、開発者が解決方法を探し求めてきており、この格闘の中から `Homebrew "
"<https://brew.sh/>`_ のような独自のパッケージ管理手法が勃興した。 Python 開発"
"者にとっての最も適切な代替方法は、 `Anaconda <https://en.wikipedia.org/wiki/"
"Anaconda_(Python_distribution)>`_ と呼ばれるパッケージエコシステムです。 "
"Anaconda は Python を中核として作成されており、学術や分析やデータ主導の環境で"
"より一層一般的になってきていて、`サーバ中心の環境に <https://web.archive.org/"
"web/20190403064038/https://www.paypal-engineering.com/2016/09/07/python-"
"packaging-at-paypal/>`_ さえ入り込んでいます。"

#: ../source/overview.rst:284
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr "Anaconda エコシステム向けにビルドし公開するための指示書き:"

#: ../source/overview.rst:286
msgid ""
"`Building libraries and applications with conda <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"
msgstr ""
"`conda でライブラリやアプリケーションをビルドする <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"

#: ../source/overview.rst:287
msgid ""
"`Transitioning a native Python package to Anaconda <https://conda.io/"
"projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton."
"html>`_"
msgstr ""
"`Python 由来のパッケージを Anaconda へ移行する <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`_"

#: ../source/overview.rst:289
msgid ""
"A similar model involves installing an alternative Python distribution, but "
"does not support arbitrary operating system-level packages:"
msgstr ""
"よく似たモデルが Python 配布物の代替物をインストールする際にも適用されます"
"が、オペレーティングシステムレベルのパッケージはサポートしていません。"

#: ../source/overview.rst:293
msgid ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"
msgstr ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"

#: ../source/overview.rst:294
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr "`WinPython <http://winpython.github.io/>`_"

#: ../source/overview.rst:299
msgid "Bringing your own Python executable"
msgstr "自分の Python 実行形式を持ち込む"

#: ../source/overview.rst:301
msgid ""
"Computing as we know it is defined by the ability to execute programs. Every "
"operating system natively supports one or more formats of programs they can "
"natively execute."
msgstr ""
"我々が知るところのコンピューティングは、プログラムを実行する能力として定義さ"
"れます。それぞれのオペレーティングシステムは、そのまま実行することが可能なひ"
"とつかもっと多くのプログラムフォーマットを元々サポートしています。"

#: ../source/overview.rst:305
msgid ""
"There are many techniques and technologies which turn your Python program "
"into one of these formats, most of which involve embedding the Python "
"interpreter and any other dependencies into a single executable file."
msgstr ""
"そのようなフォーマットにあなたの Python プログラムを変換する数多くの手練手管"
"や技術が存在していて、そのほとんどでは Python インタープリタやその他の依存先"
"を単一の実行形式のファイルに組み込むことになるでしょう。"

#: ../source/overview.rst:310
msgid ""
"This approach, called *freezing*, offers wide compatibility and seamless "
"user experience, though often requires multiple technologies, and a good "
"amount of effort."
msgstr ""
"*フリージング* と呼ばれるこの方法論は、しばしば複数の技術と共にかなりの努力を"
"要求しますが、幅広い互換性と継ぎ目のないユーザ経験を提供します。"

#: ../source/overview.rst:314
msgid "A selection of Python freezers:"
msgstr "Python フリーザの選択肢:"

#: ../source/overview.rst:316
msgid ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ - Cross-"
"platform"
msgstr ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ - クロスプラッ"
"トフォーム"

#: ../source/overview.rst:317
msgid ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - クロスプラット"
"フォーム"

#: ../source/overview.rst:318
msgid ""
"`constructor <https://github.com/conda/constructor>`_ - For command-line "
"installers"
msgstr ""
"`constructor <https://github.com/conda/constructor>`_ - コマンドラインインス"
"トーラ向け"

#: ../source/overview.rst:319
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr "`py2exe <http://www.py2exe.org/>`_ - Windows 限定"

#: ../source/overview.rst:320
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac 限定"

#: ../source/overview.rst:321
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr "`osnap <https://github.com/jamesabel/osnap>`_ - Windows と Mac"

#: ../source/overview.rst:322
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows 限定"

#: ../source/overview.rst:324
msgid ""
"Most of the above imply single-user deployments. For multi-component server "
"applications, see :gh:`Chef Omnibus <chef/omnibus#user-content--omnibus>`."
msgstr ""
"上記のものはほとんどが単独のユーザでの配置です。複数部分から構成されるサーバ"
"アプリケーション向けには :gh:`Chef Omnibus <chef/omnibus#user-content--"
"omnibus>` を見てください。"

#: ../source/overview.rst:330
msgid "Bringing your own userspace"
msgstr "自分自身のユーザスペースを持ち込む"

#: ../source/overview.rst:332
msgid ""
"An increasing number of operating systems -- including Linux, Mac OS, and "
"Windows -- can be set up to run applications packaged as lightweight images, "
"using a relatively modern arrangement often referred to as `operating-system-"
"level virtualization <https://en.wikipedia.org/wiki/Operating-system-"
"level_virtualization>`_, or *containerization*."
msgstr ""
"オペレーティングシステム -- Linux や Mac OS や Windows を含む -- で、しばし"
"ば `オペレーティングシステムレベルの仮想化 <https://en.wikipedia.org/wiki/"
"Operating-system-level_virtualization>`_ もしくは *コンテナ化* として参照され"
"る相対的に新しい手法を用いた、軽量のイメージとしてパッケージされたアプリケー"
"ションを走らせるように設定することができるものが数を増しています。"

#: ../source/overview.rst:339
msgid ""
"These techniques are mostly Python agnostic, because they package whole OS "
"filesystems, not just Python or Python packages."
msgstr ""
"このような手法は Python 単体もしくは Python パッケージではなく OS のファイル"
"システム全体をパッケージ化するので、ほとんどの場合には Python を直接にサポー"
"トしているわけではありません。"

#: ../source/overview.rst:342
msgid ""
"Adoption is most extensive among Linux servers, where the technology "
"originated and where the technologies below work best:"
msgstr ""
"(訳注、このような技術の) 取り入れが最も広範囲に渡るのは、この技術の発祥の地で"
"あり下に述べる技術が最もうまく動作する Linux サーバです:"

#: ../source/overview.rst:345
msgid "`AppImage <https://appimage.org/>`_"
msgstr "`AppImage <https://appimage.org/>`_"

#: ../source/overview.rst:346
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr "`Docker <https://www.fullstackpython.com/docker.html>`_"

#: ../source/overview.rst:347
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr "`Flatpak <https://flatpak.org/>`_"

#: ../source/overview.rst:348
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr "`Snapcraft <https://snapcraft.io/>`_"

#: ../source/overview.rst:351
msgid "Bringing your own kernel"
msgstr "自分自身のカーネルを持ち込む"

#: ../source/overview.rst:353
msgid ""
"Most operating systems support some form of classical virtualization, "
"running applications packaged as images containing a full operating system "
"of their own. Running these virtual machines, or VMs, is a mature approach, "
"widespread in data center environments."
msgstr ""
"ほとんどのオペレーティングシステムでは、何らかの形であるオペレーティングシス"
"テム全体を内包するイメージの形にパッケージされたアプリケーションを動作させる"
"ことができるような、古典的な仮想化がサポートされています。このような仮想マシ"
"ンもしくは VM を動作させることは枯れた方法論で、データセンタ環境に広く普及し"
"ています。"

#: ../source/overview.rst:358
msgid ""
"These techniques are mostly reserved for larger scale deployments in data "
"centers, though certain complex applications can benefit from this "
"packaging. The technologies are Python agnostic, and include:"
msgstr ""
"複雑なアプリケーションの中にはこのパッケージング方法から利益を得るものもあり"
"ますが、このような手法はたいていの場合はデータセンタにおけるかなり大規模な配"
"置のために使用します。技術としては Python を直接サポートしているわけではな"
"く、次のものを含みます:"

#: ../source/overview.rst:362
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr "`Vagrant <https://www.vagrantup.com/>`_"

#: ../source/overview.rst:363
msgid ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_, and :doc:`other formats "
"<openstack:user/formats>`"
msgstr ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_ や `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_ や :doc:`他のフォーマット "
"<openstack:user/formats>`"

#: ../source/overview.rst:364
msgid ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud "
"management system in Python, with extensive VM support"
msgstr ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - 大規模な VM サ"
"ポート機能がついていて Python で書かれたクラウド管理システム"

#: ../source/overview.rst:367
msgid "Bringing your own hardware"
msgstr "自分自身のハードウェアを持ち込む"

#: ../source/overview.rst:369
msgid ""
"The most all-encompassing way to ship your software would be to ship it "
"already-installed on some hardware. This way, your software's user would "
"require only electricity."
msgstr ""
"最もすべてを包含した方法は、あなたのソフトウェアを何らかのハードウェア上にイ"
"ンストールして出荷することです。この方法では、あなたのソフトウェアのユーザは"
"電力供給しか要求されません。"

#: ../source/overview.rst:373
msgid ""
"Whereas the virtual machines described above are primarily reserved for the "
"tech-savvy, you can find hardware appliances being used by everyone from the "
"most advanced data centers to the youngest children."
msgstr ""
"上で述べた仮想マシンがもっぱら技術に明るい人向けであるのに対し、ハードウェア"
"によるアプライアンス機器は最先端のデータセンタから最も若い子供たちまでの誰に"
"でも使えます。"

#: ../source/overview.rst:377
msgid ""
"Embed your code on an :gh:`Adafruit <adafruit/circuitpython>`, `MicroPython "
"<https://micropython.org/>`_, or more-powerful hardware running Python, then "
"ship it to the datacenter or your users' homes. They plug and play, and you "
"can call it a day."
msgstr ""
":gh:`Adafruit <adafruit/circuitpython>` や `MicroPython <https://micropython."
"org/>`_ 、あるいは、もっとパワーのあるハードウェアで Python が動作するものに"
"あなたのプログラムを組み込んで、データセンタやあなたのユーザの家に出荷しま"
"しょう。彼らはプラグアンドプレイで使うし、あなたはその日の仕事を終わりにでき"
"るでしょう。"

#: ../source/overview.rst:386
msgid "A summary of technologies used to package Python applications."
msgstr "Python アプリケーションをパッケージするのに使われる技術の概要。"

#: ../source/overview.rst:386
msgid ""
"The simplified gamut of technologies used to package Python applications."
msgstr ""
"Python アプリケーションをパッケージするのに使われる技術の単純化された全体像。"

#: ../source/overview.rst:389
msgid "What about..."
msgstr "これは何..."

#: ../source/overview.rst:391
msgid ""
"The sections above can only summarize so much, and you might be wondering "
"about some of the more conspicuous gaps."
msgstr ""
"上記の節ではかなり要約して書いているので、飛躍している点が目につくかもしれま"
"せん。"

#: ../source/overview.rst:395
msgid "Operating system packages"
msgstr "オペレーティングシステムレベルのパッケージ"

#: ../source/overview.rst:397
msgid ""
"As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some "
"operating systems have package managers of their own. If you're very sure of "
"the operating system you're targeting, you can depend directly on a format "
"like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, "
"Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ "
"(for Red Hat, Fedora, etc.), and use that built-in package manager to take "
"care of installation, and even deployment. You can even use `FPM <https://"
"fpm.readthedocs.io/en/latest/cli-reference.html#virtualenv>`_ to generate "
"both deb and RPMs from the same source."
msgstr ""
"上記の :ref:`depending-on-a-separate-ecosystem` で言及したように、オペレー"
"ティングシステムの中には独自のパッケージ管理機構を備えているものがあります。"
"あなたがターゲットにするオペレーティングシステムが非常にはっきりわかっている"
"なら、 `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (Debian や "
"Ubuntu その他向け。) か、 `RPM <https://en.wikipedia.org/wiki/"
"RPM_Package_Manager>`_ (Red Hat や Fedora その他向け。) のようなフォーマット"
"を直接利用して、インストールや配置さえもその面倒を見るのに組み込みのパッケー"
"ジ管理機構を活用することができます。 `FPM <https://fpm.readthedocs.io/en/"
"latest/cli-reference.html#virtualenv>`_ を使えば、同じソースコードから deb "
"と RPM の両方を生成することさえ可能です。"

#: ../source/overview.rst:408
msgid ""
"In most deployment pipelines, the OS package manager is just one piece of "
"the puzzle."
msgstr ""
"ほとんどの配置パイプラインでは、 OS パッケージ管理機構は全体から見ればほんの"
"一部です。"

#: ../source/overview.rst:414
msgid ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` have been an indispensable "
"tool for multiple generations of Python developer, but are slowly fading "
"from view, as they are being wrapped by higher-level tools. With packaging "
"in particular, virtualenvs are used as a primitive in :doc:`the dh-"
"virtualenv tool <dh-virtualenv:tutorial>` and `osnap <https://github.com/"
"jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` は、複数世代の Python 向け"
"に開発をする者にとっては以前から避けられないツールであり続けてきたが、高レベ"
"ルのツール群がラップするようになったので徐々に見えなくなりつつあります。特に"
"パッケージングの観点では、共に virtualenvs を内包する形でラップしている :doc:"
"`the dh-virtualenv tool <dh-virtualenv:tutorial>` や `osnap <https://github."
"com/jamesabel/osnap>`_ では virtualenvs はプリミティブとして使われています。"

#: ../source/overview.rst:423
msgid ""
"For production deployments, do not rely on running ``python -m pip install`` "
"from the Internet into a virtualenv, as one might do in a development "
"environment. The overview above is full of much better solutions."
msgstr ""
"開発環境ではありがちですが、商用環境への配置ではインターネットから "
"virtualenv への ``python -m pip install`` を走らせることに信用をおいてはなり"
"ません。上に述べた概要には、より良い解決策がたくさんあります。"

#: ../source/overview.rst:428
msgid "Security"
msgstr "セキュリティ"

#: ../source/overview.rst:430
msgid ""
"The further down the gradient you come, the harder it gets to update "
"components of your package. Everything is more tightly bound together."
msgstr ""
"あなたのパッケージの部品を更新することは、ここまで積み上げてきたものよりさら"
"に困難なものになるでしょう。あらゆるものがより緊密に互いに固着しているので"
"す。"

#: ../source/overview.rst:433
msgid ""
"For example, if a kernel security issue emerges, and you're deploying "
"containers, the host system's kernel can be updated without requiring a new "
"build on behalf of the application. If you deploy VM images, you'll need a "
"new build. Whether or not this dynamic makes one option more secure is still "
"a bit of an old debate, going back to the still-unsettled matter of `static "
"versus dynamic linking <https://www.google.com/search?channel=fs&q=static+vs"
"+dynamic+linking>`_."
msgstr ""
"例えば、仮にあなたがコンテナ型の仮想環境を配置していて、カーネルのセキュリ"
"ティ問題が発生したとすれば、アプリケーションに新たなビルドを要求することなく"
"ホスト側のカーネルが更新されるかもしれません。もしあなたが VM イメージを配置"
"しているなら、それを再ビルドする必要があるかもしれません。このような動的な挙"
"動をよりセキュアにするひとつのオプションは、以前から少々議論の的になっている"
"がまだ決着のついていない `静的リンク対動的リンク <https://www.google.com/"
"search?channel=fs&q=static+vs+dynamic+linking>`_ ということになります。"

#: ../source/overview.rst:442
msgid "Wrap up"
msgstr "まとめ"

#: ../source/overview.rst:444
msgid ""
"Packaging in Python has a bit of a reputation for being a bumpy ride. This "
"impression is mostly a byproduct of Python's versatility. Once you "
"understand the natural boundaries between each packaging solution, you begin "
"to realize that the varied landscape is a small price Python programmers pay "
"for using one of the most balanced, flexible languages available."
msgstr ""
"Python におけるパッケージングは、凸凹道を車で行くようなもので苦労が多いという"
"評判も少しあります。このような感想は、ほとんどの場合は Python が多用途に使え"
"ることの裏返しです。それぞれのパッケージング方法の間にある自然な境界線を理解"
"しさえすれば、さまざまに異なる風景が、もっともバランスが取れていて自由度の高"
"い言語を使うということのために Python プログラマが支払う小さな代償であること"
"に気づくことでしょう。"

#: ../source/specifications/binary-distribution-format.rst:6
msgid "Binary distribution format"
msgstr "バイナリ配布物のフォーマット"

#: ../source/specifications/binary-distribution-format.rst:8
msgid ""
"The binary distribution format (:term:`wheel <Wheel>`) was originally "
"defined in :pep:`427`. The current version of the specification is here."
msgstr ""
"バイナリ配布物のフォーマット (:term:`wheel <Wheel>`) は、元々は :pep:`427` で"
"定義されました。仕様の現在のバージョンはここにあります。"

#: ../source/specifications/binary-distribution-format.rst:13
msgid "Abstract"
msgstr "要約"

#: ../source/specifications/binary-distribution-format.rst:15
msgid "This PEP describes a built-package format for Python called \"wheel\"."
msgstr ""
"この PEP は、 Python 向けコンパイル済みパッケージの \"wheel\" と呼ばれる"
"フォーマットについて記述しています。"

#: ../source/specifications/binary-distribution-format.rst:17
msgid ""
"A wheel is a ZIP-format archive with a specially formatted file name and the "
"``.whl`` extension.  It contains a single distribution nearly as it would be "
"installed according to PEP 376 with a particular installation scheme.  "
"Although a specialized installer is recommended, a wheel file may be "
"installed by simply unpacking into site-packages with the standard 'unzip' "
"tool while preserving enough information to spread its contents out onto "
"their final paths at any later time."
msgstr ""
"wheel は、特別にフォーマットされたファイル名と ``.whl`` 拡張子を持った ZIP "
"フォーマットのアーカイブです。 PEP 376 にほぼ従ってインストールされる単一の配"
"布物を含んでいます。特別なインストーラを使うことが推奨されていますが、 wheel "
"ファイルは、いつでも後でその最終的なパス名の場所に内容物を展開するに足りる情"
"報を保存しつつ、サイトパッケージを置くべき場所に標準の 'unxip' ツールで単純に"
"アンパックすればインストールできます。"

#: ../source/specifications/binary-distribution-format.rst:27
msgid "PEP Acceptance"
msgstr "PEP の受諾"

#: ../source/specifications/binary-distribution-format.rst:29
msgid ""
"This PEP was accepted, and the defined wheel version updated to 1.0, by Nick "
"Coghlan on 16th February, 2013 [1]_"
msgstr ""
"この PEP は受諾され、定義された wheel のバージョンが 1.0 に2013年2月16日に "
"Nick Coghlan によって更新されました"

#: ../source/specifications/binary-distribution-format.rst:34
msgid "Rationale"
msgstr "理論的根拠"

#: ../source/specifications/binary-distribution-format.rst:36
msgid ""
"Python needs a package format that is easier to install than sdist. Python's "
"sdist packages are defined by and require the distutils and setuptools build "
"systems, running arbitrary code to build-and-install, and re-compile, code "
"just so it can be installed into a new virtualenv.  This system of "
"conflating build-install is slow, hard to maintain, and hinders innovation "
"in both build systems and installers."
msgstr ""
"Python には sdist よりも簡単にインストールすることができるパッケージフォー"
"マットが必要です。 Python の sdist パッケージは、ソースコードをビルドしたりイ"
"ンストールしたり再コンパイルしたりするために任意のコードを実行し、そうするこ"
"とで新しい virtualenv 環境にインストールできるように、 distutiles と "
"setuptools によるビルドシステムによって定義され、かつ、これらのツールを必要と"
"します。このようなビルドとインストールを合成したシステムは動作が遅く、維持管"
"理が困難であり、ビルドシステムとインストーラの双方における技術革新を阻害しま"
"す。"

#: ../source/specifications/binary-distribution-format.rst:43
msgid ""
"Wheel attempts to remedy these problems by providing a simpler interface "
"between the build system and the installer.  The wheel binary package format "
"frees installers from having to know about the build system, saves time by "
"amortizing compile time over many installations, and removes the need to "
"install a build system in the target environment."
msgstr ""
"Wheel は、ビルドシステムとインストーラの間により単純なインタフェイスを提供す"
"ることで、これらの問題を癒すことを試みます。 wheel バイナリパッケージのフォー"
"マットは、インストーラがビルドシステムについて知らなくても済むようにし、何度"
"もインストールするとしてもコンパイルにかかる時間を節約できるようにし、また、"
"インストール先の環境にビルドシステムをインストールする必要を取り除きます。"

#: ../source/specifications/binary-distribution-format.rst:52
#: ../source/specifications/platform-compatibility-tags.rst:46
msgid "Details"
msgstr "詳細"

#: ../source/specifications/binary-distribution-format.rst:55
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr "wheel の 'distribution-1.0-py32-none-any.whl' をインストールする"

#: ../source/specifications/binary-distribution-format.rst:57
msgid "Wheel installation notionally consists of two phases:"
msgstr "Wheel によるインストールは、概念上、ふたつの段階から構成されています:"

#: ../source/specifications/binary-distribution-format.rst:59
msgid "Unpack."
msgstr "アンパックする。"

#: ../source/specifications/binary-distribution-format.rst:61
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr "``distribution-1.0.dist-info/WHEEL`` をパースします。"

#: ../source/specifications/binary-distribution-format.rst:62
msgid ""
"Check that installer is compatible with Wheel-Version.  Warn if minor "
"version is greater, abort if major version is greater."
msgstr ""
"インストーラが Wheel のバージョンと互換であることを確認します。マイナーバー"
"ジョンが大きければ警告し、メジャーバージョンが大きければ処理を中断します。"

#: ../source/specifications/binary-distribution-format.rst:64
msgid ""
"If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""
"もし、 Root-Is-Purelib == 'true' であれば、アーカイブを purelib (site-"
"packages) へアンパックします。"

#: ../source/specifications/binary-distribution-format.rst:66
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""
"そうでなければ、アーカイブを platlib (site-packages) へアンパックします。"

#: ../source/specifications/binary-distribution-format.rst:68
msgid "Spread."
msgstr "広げる。"

#: ../source/specifications/binary-distribution-format.rst:70
msgid ""
"Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there is "
"data) ``distribution-1.0.data/``."
msgstr ""
"アンパックされたアーカイブは、 ``distribution-1.0.dist-info/`` と (データ部分"
"があれば) ``distribution-1.0.data/`` を含んでいます。"

#: ../source/specifications/binary-distribution-format.rst:72
msgid ""
"Move each subtree of ``distribution-1.0.data/`` onto its destination path. "
"Each subdirectory of ``distribution-1.0.data/`` is a key into a dict of "
"destination directories, such as ``distribution-1.0.data/(purelib|platlib|"
"headers|scripts|data)``. The initially supported paths are taken from "
"``distutils.command.install``."
msgstr ""
"``distribution-1.0.data/`` の下の全てのサブツリーを、その目的地となるディレク"
"トリパスに移動します。 ``distribution-1.0.data/(purelib|platlib|headers|"
"scripts|data)`` のような ``distribution-1.0.data/`` の下のそれぞれのサブディ"
"レクトリは、目的地となるディレクトリパスの辞書になっています。初期状態でサ"
"ポートされているパスは ``distutils.command.install`` から取り込まれます。"

#: ../source/specifications/binary-distribution-format.rst:78
msgid ""
"If applicable, update scripts starting with ``#!python`` to point to the "
"correct interpreter."
msgstr ""
"もし該当するならば、 ``#!python`` から始まるスクリプト群が適切なインタープリ"
"タを指し示すように更新します。"

#: ../source/specifications/binary-distribution-format.rst:80
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""
"``distribution-1.0.dist-info/RECORD`` をインストール先のディレクトリパスに更"
"新します。"

#: ../source/specifications/binary-distribution-format.rst:82
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr "空の ``distribution-1.0.data`` ディレクトリを削除します。"

#: ../source/specifications/binary-distribution-format.rst:83
msgid ""
"Compile any installed .py to .pyc. (Uninstallers should be smart enough to "
"remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""
"インストールされた .py のファイルを全て .pyc にコンパイルします。 (アンインス"
"トーラは、 RECORD で言及されていなくても .pyc ファイルを削除できるほどに賢く"
"あるべきです。)"

#: ../source/specifications/binary-distribution-format.rst:87
msgid "Recommended installer features"
msgstr "推奨されるインストーラの機能"

#: ../source/specifications/binary-distribution-format.rst:97
msgid "Rewrite ``#!python``."
msgstr "``#!python`` を書き換えます。"

#: ../source/specifications/binary-distribution-format.rst:90
msgid ""
"In wheel, scripts are packaged in ``{distribution}-{version}.data/scripts/"
"``.  If the first line of a file in ``scripts/`` starts with exactly ``b'#!"
"python'``, rewrite to point to the correct interpreter.  Unix installers may "
"need to add the +x bit to these files if the archive was created on Windows."
msgstr ""
"wheel では、スクリプトは ``{distribution}-{version}.data/scripts/`` にパッ"
"ケージされます。 ``scripts/`` ディレクトリにあるファイルの先頭行が正確に "
"``b'#!python'`` で始まっている場合には、正確なインタープリタを指し示すように"
"書き換えられます。アーカイブが Windows で作成されていれば、 Unix でのインス"
"トーラがこのようなファイルに +x ビットを追加設定する必要があるでしょう。"

#: ../source/specifications/binary-distribution-format.rst:96
msgid ""
"The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a GUI "
"script instead of a console script."
msgstr ""
"``b'#!pythonw'`` と書く慣習も許容されています。 ``b'#!pythonw'`` というのはコ"
"ンソール版ではなくて GUI 版のスクリプトであることを示します。"

#: ../source/specifications/binary-distribution-format.rst:102
msgid "Generate script wrappers."
msgstr "スクリプトラッパを生成します。"

#: ../source/specifications/binary-distribution-format.rst:100
msgid ""
"In wheel, scripts packaged on Unix systems will certainly not have "
"accompanying .exe wrappers.  Windows installers may want to add them during "
"install."
msgstr ""
"wheel では、 Unix システム上でパッケージされたスクリプトには .exe ラッパーが"
"随伴していないことが普通でしょう。 Windows インストーラは、インストールする際"
"にそれらを追加したくなるかもしれません。"

#: ../source/specifications/binary-distribution-format.rst:105
msgid "Recommended archiver features"
msgstr "推奨されるアーカイバの機能"

#: ../source/specifications/binary-distribution-format.rst:112
msgid "Place ``.dist-info`` at the end of the archive."
msgstr "アーカイブの末尾に ``.dist-info`` を置くこと。"

#: ../source/specifications/binary-distribution-format.rst:108
msgid ""
"Archivers are encouraged to place the ``.dist-info`` files physically at the "
"end of the archive.  This enables some potentially interesting ZIP tricks "
"including the ability to amend the metadata without rewriting the entire "
"archive."
msgstr ""
"アーカイバには、 ``.dist-info`` ファイルをアーカイブの物理的な末尾に置くこと"
"が推奨されています。こうすることで、アーカイブ全体を書き換えなくてもメタデー"
"タを修正することができる点を含む、 ZIP のいくつかの潜在的に興味深いトリックを"
"使うことができるようになります。"

#: ../source/specifications/binary-distribution-format.rst:115
msgid "File Format"
msgstr "ファイルフォーマット"

#: ../source/specifications/binary-distribution-format.rst:118
msgid "File name convention"
msgstr "ファイル名の慣習"

#: ../source/specifications/binary-distribution-format.rst:120
msgid ""
"The wheel filename is ``{distribution}-{version}(-{build tag})?-{python tag}-"
"{abi tag}-{platform tag}.whl``."
msgstr ""
"wheel のファイル名は(訳注、慣習として) ``{配布物}-{バージョン}(-{ビルドタ"
"グ})?-{python タグ}-{abi タグ}-{プラットフォームタグ}.whl <{distribution}-"
"{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl>`` です。"

#: ../source/specifications/binary-distribution-format.rst:124
msgid "distribution"
msgstr "配布物"

#: ../source/specifications/binary-distribution-format.rst:124
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr "配布物の名前、例えば 'django' や 'pyramid' 。"

#: ../source/specifications/binary-distribution-format.rst:127
msgid "version"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:127
msgid "Distribution version, e.g. 1.0."
msgstr "配布物のバージョン、例えば 1.0 。"

#: ../source/specifications/binary-distribution-format.rst:135
msgid "build tag"
msgstr "ビルドタグ"

#: ../source/specifications/binary-distribution-format.rst:130
msgid ""
"Optional build number.  Must start with a digit.  Acts as a tie-breaker if "
"two wheel file names are the same in all other respects (i.e. name, version, "
"and other tags).  Sort as an empty tuple if unspecified, else sort as a two-"
"item tuple with the first item being the initial digits as an ``int``, and "
"the second item being the remainder of the tag as a ``str``."
msgstr ""
"省略可能なビルドナンバー。数字で始まらなければなりません。ふたつの wheel ファ"
"イルのファイル名がこの部分を除いて (すなわち名称やバージョンやその他のタグ"
"が) 同一であった場合のタイブレーカ (訳注、いずれかに決めるための方法) として"
"働きます。指定されていれば先頭の数字を ``int`` として解釈して第１要素とし残り"
"を ``str`` として解釈して第２要素とするような要素数が２個のタプルとして解釈さ"
"れ、指定されていない場合には空欄のタプルとして解釈されます。"

#: ../source/specifications/binary-distribution-format.rst:138
msgid "language implementation and version tag"
msgstr "言語の実装とバージョンタグ"

#: ../source/specifications/binary-distribution-format.rst:138
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr "例えば、 'py27' ・ 'py2' ・ 'py3' 。"

#: ../source/specifications/binary-distribution-format.rst:141
#: ../source/specifications/platform-compatibility-tags.rst:27
msgid "abi tag"
msgstr "abi タグ"

#: ../source/specifications/binary-distribution-format.rst:141
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr "例えば、 'cp33m' ・ 'abi3' ・ 'none' 。"

#: ../source/specifications/binary-distribution-format.rst:144
#: ../source/specifications/platform-compatibility-tags.rst:30
msgid "platform tag"
msgstr "プラットフォームタグ"

#: ../source/specifications/binary-distribution-format.rst:144
msgid "E.g. 'linux_x86_64', 'any'."
msgstr "例えば、 'linux_x86_64' ・ 'any' 。"

#: ../source/specifications/binary-distribution-format.rst:146
msgid ""
"For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build of "
"a package called 'distribution', and is compatible with Python 2.7 (any "
"Python 2.7 implementation), with no ABI (pure Python), on any CPU "
"architecture."
msgstr ""
"例えば、 ``distribution-1.0.1-py27-none-any.whl`` とは、 'distribution' と呼"
"ばれるパッケージの最初のビルドであって、 Python 2.7 (任意の Python 2.7 実装) "
"で動作し、 ABI を持たず (即ち純 Python) 、任意の CPU アーキテクチャで動作する"
"ということです。"

#: ../source/specifications/binary-distribution-format.rst:151
msgid ""
"The last three components of the filename before the extension are called "
"\"compatibility tags.\"  The compatibility tags express the package's basic "
"interpreter requirements and are detailed in PEP 425."
msgstr ""
"ファイル名の拡張子を除いて最後の３個の構成要素は、\"互換性タグ\" と呼ばれま"
"す。互換性タグは、インタープリタに対するそのパッケージの基本的な要求事項を表"
"現しており、 PEP 425 に詳しく書かれています。"

#: ../source/specifications/binary-distribution-format.rst:156
msgid "Escaping and Unicode"
msgstr "エスケープとユニコード"

#: ../source/specifications/binary-distribution-format.rst:158
msgid ""
"As the components of the filename are separated by a dash (``-``, HYPHEN-"
"MINUS), this character cannot appear within any component. This is handled "
"as follows:"
msgstr ""
"ファイル名の構成要素がダッシュ (``-`` つまり HYPHEN-MINUS) で分離されているの"
"で、この文字は構成要素の中に出現してはなりません。これは次のように取り扱われ"
"ます:"

#: ../source/specifications/binary-distribution-format.rst:161
msgid ""
"In distribution names, any run of ``-_.`` characters (HYPHEN-MINUS, LOW LINE "
"and FULL STOP) should be replaced with ``_`` (LOW LINE), and uppercase "
"characters should be replaced with corresponding lowercase ones. This is "
"equivalent to regular :ref:`name normalization <name-normalization>` "
"followed by replacing ``-`` with ``_``. Tools consuming wheels must be "
"prepared to accept ``.`` (FULL STOP) and uppercase letters, however, as "
"these were allowed by an earlier version of this specification."
msgstr ""
"配布物の名前の部分では、 ``-_.`` (HYPHEN-MINUS ・ LOW LINE ・ FULL STOP) の文"
"字は、すべて ``_`` (LOW LINE) で置き換えられるべきで、かつ、大文字はすべて対"
"応する小文字に置き換えられるべきです。これは、通常の :ref:`名前の正規化 "
"<name-normalization>` の後に ``-`` を ``_`` で置き換えるのと同じです。 wheel "
"ファイルを入力とするツールは、 ``.`` (FULL STOP) や大文字を受け入れる準備がで"
"きていなければなりませんが、しかし、それはこの仕様の初期のバージョンで許され"
"ていたからです。"

#: ../source/specifications/binary-distribution-format.rst:168
msgid ""
"Version numbers should be normalised according to :pep:`440`. Normalised "
"version numbers cannot contain ``-``."
msgstr ""
"バージョン番号は、 :pep:`440` に従って正規化されなければなりません。正規化済"
"みのバージョン番号は ``-`` を含んでいてはなりません。"

#: ../source/specifications/binary-distribution-format.rst:170
msgid ""
"The remaining components may not contain ``-`` characters, so no escaping is "
"necessary."
msgstr ""
"残りの構成要素は、 ``-`` 文字を含んでいてはいけないので、エスケープ処理を行う"
"必要がありません。"

#: ../source/specifications/binary-distribution-format.rst:173
msgid ""
"Tools producing wheels should verify that the filename components do not "
"contain ``-``, as the resulting file may not be processed correctly if they "
"do."
msgstr ""
"wheel ファイルを生成するツールはファイル名部分の構成要素が ``-`` を含んでいな"
"いことを検証しなければなりませんが、これは、もし含んでいれば結果として生成さ"
"れたファイルが正しく処理されないかもしれないからです。"

#: ../source/specifications/binary-distribution-format.rst:176
msgid ""
"The archive filename is Unicode.  It will be some time before the tools are "
"updated to support non-ASCII filenames, but they are supported in this "
"specification."
msgstr ""
"アーカイブのファイル名は Unicode です。いくつかのツールでは非 ASCII 文字の"
"ファイル名をサポートするように更新されるまでに幾らかの時間がかかるかもしれま"
"せんが、しかし、この仕様ではサポートされているのです。"

#: ../source/specifications/binary-distribution-format.rst:180
msgid ""
"The filenames *inside* the archive are encoded as UTF-8.  Although some ZIP "
"clients in common use do not properly display UTF-8 filenames, the encoding "
"is supported by both the ZIP specification and Python's ``zipfile``."
msgstr ""
"アーカイブの *中にある* ファイルのファイル名は、 UTF-8 でエンコードされていま"
"す。 ZIP クライアントのいくつかは共通して UTF-8 のファイル名を正常に表示しま"
"せんが、このエンコーディングは ZIP の仕様でも Python の ``zipfile`` の仕様で"
"も、共にサポートされています。"

#: ../source/specifications/binary-distribution-format.rst:186
msgid "File contents"
msgstr "ファイルの内容"

#: ../source/specifications/binary-distribution-format.rst:188
msgid ""
"The contents of a wheel file, where {distribution} is replaced with the name "
"of the package, e.g. ``beaglevote`` and {version} is replaced with its "
"version, e.g. ``1.0.0``, consist of:"
msgstr ""
"{distribution} の部分を例えば ``beaglevote`` のようなパッケージ名で置き換"
"え、 {version} の部分を例えば `1.0.0`` のようなバージョン番号で置き換えた "
"wheel ファイルの内容は次のもので構成されています:"

#: ../source/specifications/binary-distribution-format.rst:192
msgid ""
"``/``, the root of the archive, contains all files to be installed in "
"``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and "
"``platlib`` are usually both ``site-packages``."
msgstr ""
"アーカイブのルートディレクトリに当たる ``/`` は、``WHEEL`` で指定されている通"
"り ``purelib`` または ``platlib`` にインストールされるファイルをすべて含んで"
"います。通常は、 ``purelib`` や ``platlib`` はいずれも ``site-packages`` で"
"す。"

#: ../source/specifications/binary-distribution-format.rst:195
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr "``{distribution}-{version}.dist-info/`` はメタデータを含んでいます。"

#: ../source/specifications/binary-distribution-format.rst:196
msgid ""
"``{distribution}-{version}.data/`` contains one subdirectory for each non-"
"empty install scheme key not already covered, where the subdirectory name is "
"an index into a dictionary of install paths (e.g. ``data``, ``scripts``, "
"``headers``, ``purelib``, ``platlib``)."
msgstr ""
"``{distribution}-{version}.data/`` は、すでにカバーされているものは別として、"
"サブディレクトリ名がインストールパスの辞書への (例えば、 ``data``, "
"``scripts``, ``headers``, ``purelib``, ``platlib`` のような) 指示子になってい"
"るような、空ではないそれぞれのインストールスキームに対応したディレクトリを含"
"みます。"

#: ../source/specifications/binary-distribution-format.rst:200
msgid ""
"Python scripts must appear in ``scripts`` and begin with exactly ``b'#!"
"python'`` in order to enjoy script wrapper generation and ``#!python`` "
"rewriting at install time.  They may have any or no extension."
msgstr ""
"Python スクリプトは ``scripts`` ディレクトリに置かなければならず、また、イン"
"ストール時のスクリプトラッパの生成や ``#!python`` 書き換えといった利点を活用"
"するために、正確に ``b'#!python'`` で始まっていなければなりません。"

#: ../source/specifications/binary-distribution-format.rst:204
msgid ""
"``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 or "
"greater format metadata."
msgstr ""
"``{distribution}-{version}.dist-info/METADATA`` は、バージョン 1.1 またはそれ"
"以上のフォーマットのメタデータです。"

#: ../source/specifications/binary-distribution-format.rst:206
msgid ""
"``{distribution}-{version}.dist-info/WHEEL`` is metadata about the archive "
"itself in the same basic key: value format::"
msgstr ""
"``{distribution}-{version}.dist-info/WHEEL`` は、同様のキー:バリュー形式で表"
"現されたアーカイブそのものに関するメタデータです::"

#: ../source/specifications/binary-distribution-format.rst:216
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr "``Wheel-Version`` は、Wheel の仕様のバージョン番号です。"

#: ../source/specifications/binary-distribution-format.rst:217
msgid ""
"``Generator`` is the name and optionally the version of the software that "
"produced the archive."
msgstr ""
"``Generator`` は、そのアーカイブを作成したソフトウェアの名前で、バージョン番"
"号を付加しても構いません。"

#: ../source/specifications/binary-distribution-format.rst:219
msgid ""
"``Root-Is-Purelib`` is true if the top level directory of the archive should "
"be installed into purelib; otherwise the root should be installed into "
"platlib."
msgstr ""
"``Root-Is-Purelib`` は、アーカイブの最上位のディレクトリが pure lib へインス"
"トールされるべきものであれば true で、そうでなければ platlib へインストールさ"
"れます。"

#: ../source/specifications/binary-distribution-format.rst:222
msgid ""
"``Tag`` is the wheel's expanded compatibility tags; in the example the "
"filename would contain ``py2.py3-none-any``."
msgstr ""
"``Tag`` は、 wheel の拡張互換性タグで、例の中ではファイル名の ``py2.py3-none-"
"any`` の部分です。"

#: ../source/specifications/binary-distribution-format.rst:224
msgid ""
"``Build`` is the build number and is omitted if there is no build number."
msgstr ""
"``Build`` は、ビルドナンバーで、もしビルドナンバーがなければ省略されます。"

#: ../source/specifications/binary-distribution-format.rst:225
msgid ""
"A wheel installer should warn if Wheel-Version is greater than the version "
"it supports, and must fail if Wheel-Version has a greater major version than "
"the version it supports."
msgstr ""
"wheel インストーラは、もし自身がサポートしているものより Wheel-Version が大き"
"ければ警告するべきですし、 Wheel-Version のメジャーバージョンがサポートしてい"
"るものより大きい場合にはフェイルするべきです。"

#: ../source/specifications/binary-distribution-format.rst:228
msgid ""
"Wheel, being an installation format that is intended to work across multiple "
"versions of Python, does not generally include .pyc files."
msgstr ""
"Wheel は複数のバージョンの Python を跨いでも動作するように意図されたインス"
"トール用のフォーマットですが、通常は .pyc ファイルを含みません。"

#: ../source/specifications/binary-distribution-format.rst:230
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr "Wheel は、 setup.py ないし setup.cfg を含みません。"

#: ../source/specifications/binary-distribution-format.rst:232
msgid ""
"This version of the wheel specification is based on the distutils install "
"schemes and does not define how to install files to other locations. The "
"layout offers a superset of the functionality provided by the existing "
"wininst and egg binary formats."
msgstr ""
"このバージョンの wheel 仕様は、distutils のインストール方法論に基づいていて、"
"ファイルを他の場所にインストールする方法については定義していません。既存の "
"wininst や egg バイナリフォーマットが提供する機能の上位互換のレイアウトを提案"
"します。"

#: ../source/specifications/binary-distribution-format.rst:239
#: ../source/specifications/recording-installed-packages.rst:37
msgid "The .dist-info directory"
msgstr ".dist-info ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:241
msgid ""
"Wheel .dist-info directories include at a minimum METADATA, WHEEL, and "
"RECORD."
msgstr ""
"Wheel の .dist-info ディレクトリは、最低限でも METADATA ・ WHEEL ・RECORD を"
"含みます。"

#: ../source/specifications/binary-distribution-format.rst:243
msgid ""
"METADATA is the package metadata, the same format as PKG-INFO as found at "
"the root of sdists."
msgstr ""
"METADATA はパッケージのメタデータで、 sdists のルートディレクトリにある PKG-"
"INFO と同じフォーマットで記述されます。"

#: ../source/specifications/binary-distribution-format.rst:245
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""
"WHEEL は、パッケージをビルドする部分に特化した wheel のメタデータです。"

#: ../source/specifications/binary-distribution-format.rst:246
msgid ""
"RECORD is a list of (almost) all the files in the wheel and their secure "
"hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a "
"hash of itself, must include its hash.  The hash algorithm must be sha256 or "
"better; specifically, md5 and sha1 are not permitted, as signed wheel files "
"rely on the strong hashes in RECORD to validate the integrity of the archive."
msgstr ""
"RECORD は、 wheel に含まれる (ほとんど) 全てのファイルとそのセキュアなハッ"
"シュ値のリストです。 PEP 376 とは異なり、自分自身のハッシュ値を内包することは"
"不可能な RECORD を除く各ファイルのハッシュ値が含まれていなければなりません。"
"署名済みの wheel ファイルがアーカイブの完全性を検証するのに RECORD 内の暗号学"
"的に強いハッシュ値に依存しているので、ハッシュ計算のアルゴリズムは sha256 以"
"上でなければならず、特に md5 とsha1 は許されません。"

#: ../source/specifications/binary-distribution-format.rst:252
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr "PEP 376 の INSTALLER と REQUESTED はアーカイブに含まれません。"

#: ../source/specifications/binary-distribution-format.rst:253
msgid ""
"RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""
"RECORD.jws は、デジタル署名のために使われます。これについては RECORD では触れ"
"られません。"

#: ../source/specifications/binary-distribution-format.rst:255
msgid ""
"RECORD.p7s is allowed as a courtesy to anyone who would prefer to use S/MIME "
"signatures to secure their wheel files.  It is not mentioned in RECORD."
msgstr ""
"自分の wheel ファイルを S/MIME 署名でセキュアにすることを好む人は、 RECORD."
"p7s を使うことができます。これについては RECORD では触れられません。"

#: ../source/specifications/binary-distribution-format.rst:258
msgid ""
"During extraction, wheel installers verify all the hashes in RECORD against "
"the file contents.  Apart from RECORD and its signatures, installation will "
"fail if any file in the archive is not both mentioned and correctly hashed "
"in RECORD."
msgstr ""
"展開中に wheel インストーラは RECORD 内のハッシュ値と実際のファイルの内容 (の"
"ハッシュ値) をすべて検証します。 RECORD とその署名による検証に加えて、アーカ"
"イブの中のいずれかのファイルが RECORD にリストされていないか、または、正しく"
"ハッシュされていない時にはインストールがフェイルするでしょう。"

#: ../source/specifications/binary-distribution-format.rst:265
msgid "The .data directory"
msgstr ".data ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:267
msgid ""
"Any file that is not normally installed inside site-packages goes into the ."
"data directory, named as the .dist-info directory but with the .data/ "
"extension::"
msgstr ""
"site-packages 内に通常通りにインストールされなかったファイルはどれでも、."
"dist-info ディレクトリと同様に命名されるが .data/ 拡張子をつけられて .data "
"ディレクトリに行きます::"

#: ../source/specifications/binary-distribution-format.rst:275
msgid ""
"The .data directory contains subdirectories with the scripts, headers, "
"documentation and so forth from the distribution.  During installation the "
"contents of these subdirectories are moved onto their destination paths."
msgstr ""
".data ディレクトリでは、配布物からのスクリプト・ヘッダー・説明文書などをサブ"
"ディレクトリに収めています。インストール中に、これらのサブディレクトリの内容"
"を行き先となるパスへ動かします。"

#: ../source/specifications/binary-distribution-format.rst:281
msgid "Signed wheel files"
msgstr "署名済み wheel ファイル"

#: ../source/specifications/binary-distribution-format.rst:283
msgid ""
"Wheel files include an extended RECORD that enables digital signatures.  PEP "
"376's RECORD is altered to include a secure hash "
"``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding with "
"no trailing = characters) as the second column instead of an md5sum.  All "
"possible entries are hashed, including any generated files such as .pyc "
"files, but not RECORD which cannot contain its own hash. For example::"
msgstr ""
"Wheel ファイルは、デジタル署名を可能にした拡張 RECORD ファイルを含みます。 "
"PEP 376 の RECORD は、 md5sum の代わりにセキュアなハッシュ値 "
"``digestname=urlsafe_b64encode_nopad(digest)`` (末尾に = 文字を追加しない "
"url セーフな base64 エンコード) を二つ目のカラムとするように修正されました。"
"生成された .pyc ファイルなども含むすべての可能なエントリにハッシュ値が付加さ"
"れていますが、 RECORD は自身のハッシュ値を含むことができないので例外です。例"
"えば::"

#: ../source/specifications/binary-distribution-format.rst:294
msgid ""
"The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in RECORD "
"at all since they can only be added after RECORD is generated. Every other "
"file in the archive must have a correct hash in RECORD or the installation "
"will fail."
msgstr ""
"署名用のファイルである RECORD.jws と RECORD.p7s は、 RECORD ファイルが作成さ"
"れた後にしか追加できないので、RECORD ファイル内で言及されることは全くありませ"
"ん。アーカイブの中の他のファイルはすべて、RECORD ファイル内に正しいハッシュ値"
"を持たなければならず、そうでなければインストールに失敗します。"

#: ../source/specifications/binary-distribution-format.rst:299
msgid ""
"If JSON web signatures are used, one or more JSON Web Signature JSON "
"Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent to "
"RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of RECORD "
"as the signature's JSON payload::"
msgstr ""
"JSON ウェブ署名が使われる場合には、ひとつかそれ以上の JSON Web Signature "
"JSON Serialization (JWS-JS) 署名が RECORD ファイルの隣にある RECORD.jws ファ"
"イルの中に保存されます。 RECORD ファイルの SHA-256 ハッシュ値を署名の JSON ペ"
"イロードに含むことで RECORD ファイルに署名するために JWS が使われます::"

#: ../source/specifications/binary-distribution-format.rst:306
msgid "(The hash value is the same format used in RECORD.)"
msgstr "(ハッシュ値の書き方のフォーマットは RECORD で使われるものと同じです。)"

#: ../source/specifications/binary-distribution-format.rst:308
msgid ""
"If RECORD.p7s is used, it must contain a detached S/MIME format signature of "
"RECORD."
msgstr ""
"RECORD.p7s を使う場合は、このファイルに RECORD ファイルに関する分離型の S/"
"MIME 署名を入れておかなければなりません。"

#: ../source/specifications/binary-distribution-format.rst:311
msgid ""
"A wheel installer is not required to understand digital signatures but MUST "
"verify the hashes in RECORD against the extracted file contents. When the "
"installer checks file hashes against RECORD, a separate signature checker "
"only needs to establish that RECORD matches the signature."
msgstr ""
"wheel インストーラはデジタル署名を理解することを要求されてはいませんが、 "
"RECORD ファイル内のハッシュ値が展開されたファイル内容に対して妥当であることを"
"検証しなければなりません。インストーラが RECORD ファイルに対するハッシュ値を"
"確認する際には、別途用意された署名検証プログラムは RECORD ファイルが署名に対"
"して妥当であることだけを確認すれば十分です。"

#: ../source/specifications/binary-distribution-format.rst:316
msgid "See"
msgstr "以下を参照のこと"

#: ../source/specifications/binary-distribution-format.rst:318
msgid "https://datatracker.ietf.org/doc/html/rfc7515"
msgstr "https://datatracker.ietf.org/doc/html/rfc7515"

#: ../source/specifications/binary-distribution-format.rst:319
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"

#: ../source/specifications/binary-distribution-format.rst:320
msgid "https://datatracker.ietf.org/doc/html/rfc7517"
msgstr "https://datatracker.ietf.org/doc/html/rfc7517"

#: ../source/specifications/binary-distribution-format.rst:321
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"

#: ../source/specifications/binary-distribution-format.rst:325
msgid "Comparison to .egg"
msgstr ".egg との比較"

#: ../source/specifications/binary-distribution-format.rst:327
msgid ""
"Wheel is an installation format; egg is importable.  Wheel archives do not "
"need to include .pyc and are less tied to a specific Python version or "
"implementation. Wheel can install (pure Python) packages built with previous "
"versions of Python so you don't always have to wait for the packager to "
"catch up."
msgstr ""
"Wheel はインストールするためのフォーマットのひとつですが、 egg はインポートす"
"ることができます。 Wheel アーカイブには .pyc が含まれている必要がないので、 "
"Python の特定のバージョンや実装に紐づく度合いがより小さくなります。 Wheel "
"は、以前のバージョンの Python でビルドされた (純 Python の) パッケージをイン"
"ストールすることができるので、必ずしもパッケージ制作者が追いつくのを待つ必要"
"がありません。"

#: ../source/specifications/binary-distribution-format.rst:332
msgid ""
"Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is compatible "
"with the new world of Python packaging and the new concepts it brings."
msgstr ""
"Wheel は .dist-info ディレクトリを使用するが、 egg は .egg-info を使います。 "
"Wheel は、 Python のパッケージングにおける新しい世界とそれがもたらす新しい概"
"念に適合しています。"

#: ../source/specifications/binary-distribution-format.rst:335
msgid ""
"Wheel has a richer file naming convention for today's multi-implementation "
"world.  A single wheel archive can indicate its compatibility with a number "
"of Python language versions and implementations, ABIs, and system "
"architectures.  Historically the ABI has been specific to a CPython release, "
"wheel is ready for the stable ABI."
msgstr ""
"Wheel は、今日の複数実装世界に合わせて、より表現力が高いファイル命名慣習を"
"持っています。単独の wheel アーカイブ (訳注、その名前) が、数々の Python 言語"
"のバージョンや実装、ABI やシステムアーキテクチャとの互換性を表示することがで"
"きるのです。歴史的には、 ABI は CPython のリリースに紐づいていましたが、 "
"wheel は安定な ABI に対応しています。"

#: ../source/specifications/binary-distribution-format.rst:341
msgid ""
"Wheel is lossless.  The first wheel implementation bdist_wheel always "
"generates egg-info, and then converts it to a .whl.  It is also possible to "
"convert existing eggs and bdist_wininst distributions."
msgstr ""
"Wheel はロスレスです。最初の wheel 実装である bdist_wheel は常に egg-info を"
"生成し、それを .whl ファイルへ変換します。既存の egg ファイルを "
"bdist_wininst 配布物に変換することも可能です。"

#: ../source/specifications/binary-distribution-format.rst:345
msgid ""
"Wheel is versioned.  Every wheel file contains the version of the wheel "
"specification and the implementation that packaged it. Hopefully the next "
"migration can simply be to Wheel 2.0."
msgstr ""
"Wheel はバージョン付けされています。各 wheel ファイルは wheel 仕様およびパッ"
"ケージングに使われた実装のバージョンを含んでいます。次のマイグレーションが単"
"純に Wheel 2.0 へのものになれば良いのですが。"

#: ../source/specifications/binary-distribution-format.rst:348
msgid "Wheel is a reference to the other Python."
msgstr "Wheel は、他の Python に対して参照するべきものとなっています。"

#: ../source/specifications/binary-distribution-format.rst:352
#: ../source/specifications/platform-compatibility-tags.rst:242
msgid "FAQ"
msgstr "FAQ"

#: ../source/specifications/binary-distribution-format.rst:356
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""
"Wheel は .data ディレクトリを定義します。すべてのデータをそこに入れるべきで"
"しょうか？"

#: ../source/specifications/binary-distribution-format.rst:358
msgid ""
"This specification does not have an opinion on how you should organize your "
"code.  The .data directory is just a place for any files that are not "
"normally installed inside ``site-packages`` or on the PYTHONPATH. In other "
"words, you may continue to use ``pkgutil.get_data(package, resource)`` even "
"though *those* files will usually not be distributed in *wheel's* ``.data`` "
"directory."
msgstr ""
"この仕様では、あなたがあなたのソースコードをどのように組織立てて置くべきかに"
"ついては特に意見を表明していません。 .data ディレクトリは、 ``site-"
"packages`` 内や PYTHONPATH 内に通常ならインストールされない全てのファイルを置"
"く場所というだけのことです。換言すれば、 *そのような* ファイル群が通常なら "
"*wheel の* ``.data`` ディレクトリに置く形で配布されない時でさえも、 "
"``pkgutil.get_data(package, resource)`` を使い続けても構わないのです。"

#: ../source/specifications/binary-distribution-format.rst:367
msgid "Why does wheel include attached signatures?"
msgstr "なぜ wheel は添付された署名を持つのか？"

#: ../source/specifications/binary-distribution-format.rst:369
msgid ""
"Attached signatures are more convenient than detached signatures because "
"they travel with the archive.  Since only the individual files are signed, "
"the archive can be recompressed without invalidating the signature or "
"individual files can be verified without having to download the whole "
"archive."
msgstr ""
"添付された署名は、アーカイブと一体のものとして転送されるので、分離署名よりも"
"便利です。個々のファイルが署名されているだけなので、アーカイブを圧縮し直して"
"も署名が無効にならず、また、アーカイブ全体をダウンロードしなくても個々のファ"
"イルの検証を行うことができます。"

#: ../source/specifications/binary-distribution-format.rst:377
msgid "Why does wheel allow JWS signatures?"
msgstr "なぜ wheel は JWS 署名を許容するのか？"

#: ../source/specifications/binary-distribution-format.rst:379
msgid ""
"The JOSE specifications of which JWS is a part are designed to be easy to "
"implement, a feature that is also one of wheel's primary design goals.  JWS "
"yields a useful, concise pure-Python implementation."
msgstr ""
"JWS がその一部を構成する JOSE の仕様は実装を容易にするように設計されており、"
"その性質は wheel の基本的な設計目標のひとつでもあります。 JWS は使いやすくて"
"簡潔な純 Python の実装をもたらします。"

#: ../source/specifications/binary-distribution-format.rst:385
msgid "Why does wheel also allow S/MIME signatures?"
msgstr "なぜ wheel は S/MIME 署名をも許容するのか？"

#: ../source/specifications/binary-distribution-format.rst:387
msgid ""
"S/MIME signatures are allowed for users who need or want to use existing "
"public key infrastructure with wheel."
msgstr ""
"S/MIME 署名は、既存の公開鍵基盤を wheel でも採用する必要があるか、または、採"
"用したいユーザのために許容されています。"

#: ../source/specifications/binary-distribution-format.rst:390
msgid ""
"Signed packages are only a basic building block in a secure package update "
"system.  Wheel only provides the building block."
msgstr ""
"署名されたパッケージは、セキュアなパッケージ更新システムを構成するひとつのビ"
"ルディングブロックであるというだけのものです。 Wheel としては、単にビルディン"
"グブロックを提供するだけです。"

#: ../source/specifications/binary-distribution-format.rst:395
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr "\"pure lib\" と \"plat lib\" って、どう扱えばいいの？"

#: ../source/specifications/binary-distribution-format.rst:397
msgid ""
"Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is "
"significant on some platforms. For example, Fedora installs pure Python "
"packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent "
"packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""
"Wheel は \"purelib\" と \"platlib\" を区別して扱いますが、これらはプラット"
"フォームによっては大きな違いがあります。例えば、 Fedora では純 Python のパッ"
"ケージを '/usr/lib/pythonX.Y/site-packages' にインストールし、プラットフォー"
"ムに依存しないパッケージを '/usr/lib64/pythonX.Y/site-packages' にインストー"
"ルします。"

#: ../source/specifications/binary-distribution-format.rst:402
msgid ""
"A wheel with \"Root-Is-Purelib: false\" with all its files in ``{name}-"
"{version}.data/purelib`` is equivalent to a wheel with \"Root-Is-Purelib: "
"true\" with those same files in the root, and it is legal to have files in "
"both the \"purelib\" and \"platlib\" categories."
msgstr ""
"``{name}-{version}.data/purelib`` 内の全てのファイルについて \"Root-Is-"
"Purelib: false\" という設定になっている wheel ファイルは、同じファイルがルー"
"トディレクトリ内にあって \"Root-Is-Purelib: true\" になっている wheel ファイ"
"ルと相同であり、 \"purelib\" と \"platlib\" の両カテゴリにファイル群が存在す"
"ることには問題がありません。"

#: ../source/specifications/binary-distribution-format.rst:407
msgid ""
"In practice a wheel should have only one of \"purelib\" or \"platlib\" "
"depending on whether it is pure Python or not and those files should be at "
"the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""
"実際のところ、 wheel は、それが純 Python なのかそうでないのかによって "
"\"purelib\" または \"platlib\" のいずれか一方しか持たず、 \"Root-Is-purelib"
"\" を適切に設定しつつファイル群をルートディレクトリに置くべきです。"

#: ../source/specifications/binary-distribution-format.rst:415
#: ../source/specifications/binary-distribution-format.rst:413
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""
"Python のソースコードを wheel ファイルから直接にインポートすることはできます"
"か？"

#: ../source/specifications/binary-distribution-format.rst:417
#: ../source/specifications/binary-distribution-format.rst:415
msgid ""
"Technically, due to the combination of supporting installation via simple "
"extraction and using an archive format that is compatible with "
"``zipimport``, a subset of wheel files *do* support being placed directly on "
"``sys.path``. However, while this behaviour is a natural consequence of the "
"format design, actually relying on it is generally discouraged."
msgstr ""
"技術的な話としては、単純に展開するだけでインストールできる機能と "
"``zipimport`` と互換性のあるアーカイブフォーマットの両方をサポートしているの"
"で、一部の wheel ファイルは ``sys.path`` に直接に置くことを *サポートしていま"
"す* 。しかし、このような動作はフォーマット設計の自然な結果とはいうものの、実"
"際にはこれに依存することは一般的には推奨されていません。"

#: ../source/specifications/binary-distribution-format.rst:423
#: ../source/specifications/binary-distribution-format.rst:421
msgid ""
"Firstly, wheel *is* designed primarily as a distribution format, so skipping "
"the installation step also means deliberately avoiding any reliance on "
"features that assume full installation (such as being able to use standard "
"tools like ``pip`` and ``virtualenv`` to capture and manage dependencies in "
"a way that can be properly tracked for auditing and security update "
"purposes, or integrating fully with the standard build machinery for C "
"extensions by publishing header files in the appropriate place)."
msgstr ""
"第一に、wheel は一義的に配布物のフォーマットとして *設計されている* ので、イ"
"ンストールの段階を省略するということは、完全なインストールがなされているもの"
"と仮定している機能 (例えば、正当性監査やセキュリティアップデートのために正し"
"く追跡することができるひとつの方法であるところの ``pip`` や ``virtualenv`` の"
"ような標準ツールを使った依存関係の捕捉や管理の機能、あるいは、ヘッダファイル"
"を適切な場所に公開することによって C 言語拡張をビルドする標準的な機構を完全に"
"統合する機能) への信頼を故意に避けることになります。"

#: ../source/specifications/binary-distribution-format.rst:432
#: ../source/specifications/binary-distribution-format.rst:430
msgid ""
"Secondly, while some Python software is written to support running directly "
"from a zip archive, it is still common for code to be written assuming it "
"has been fully installed. When that assumption is broken by trying to run "
"the software from a zip archive, the failures can often be obscure and hard "
"to diagnose (especially when they occur in third party libraries). The two "
"most common sources of problems with this are the fact that importing C "
"extensions from a zip archive is *not* supported by CPython (since doing so "
"is not supported directly by the dynamic loading machinery on any platform) "
"and that when running from a zip archive the ``__file__`` attribute no "
"longer refers to an ordinary filesystem path, but to a combination path that "
"includes both the location of the zip archive on the filesystem and the "
"relative path to the module inside the archive. Even when software correctly "
"uses the abstract resource APIs internally, interfacing with external "
"components may still require the availability of an actual on-disk file."
msgstr ""
"第二に、 Python のソフトウェアの中には zip アーカイブから直接に動作させること"
"をサポートするように書かれているものもありますが、やはり完全にインストールさ"
"れることを前提にして書かれたソースコードが今も普通です。 zip アーカイブからソ"
"フトウェアを走らせようと試みてこの仮定を崩すと、 (とりわけ失敗動作がサード"
"パーティのライブラリで起きる場合には) しばしば失敗動作がわかりにくく原因究明"
"が困難になるでしょう。この問題の最もありがちなふたつの根源は、 C 言語拡張を "
"zip アーカイブからインポートすることが CPython では *サポートされていない* こ"
"と (というのは、どんなプラットフォームの動的ローディング機構でもこのような動"
"作が直接にはサポートされていないから) 、および、 zip アーカイブから動作する際"
"には ``__file__`` 属性がもはや普通のファイルシステム上のファイルパスを参照し"
"ておらず、 zip アーカイブのファイルシステム上の置き場所のパスとアーカイブ内の"
"モジュールへの相対パスの両方を含んだ連結パスになることです。ソフトウェア内で"
"は抽象化された資源への API 群を正しく扱えたとしても、外部の部品とのインタフェ"
"イスは依然として実際にディスク上に存在するファイルがないと動作できないかもし"
"れません。"

#: ../source/specifications/binary-distribution-format.rst:449
#: ../source/specifications/binary-distribution-format.rst:447
msgid ""
"Like metaclasses, monkeypatching and metapath importers, if you're not "
"already sure you need to take advantage of this feature, you almost "
"certainly don't need it. If you *do* decide to use it anyway, be aware that "
"many projects will require a failure to be reproduced with a fully installed "
"package before accepting it as a genuine bug."
msgstr ""
"メタクラスと同様に、モンキーパッチングとメタパスからのインポートは、この機能"
"を使う利点をあなたが本当に必要としていると確信しているのでなければ、おそらく"
"あなたはこの機能を使う必要がないと思われます。兎にも角にもこれを使う *意思を"
"固めた* のであれば、 (訳注、この機能を使った時に生じた) ある動作不良を真性の"
"バグであると認めてもらう前に、多くのプロジェクトではそれを完全インストールの"
"状態で再現するように要求されるであろうということを認識しておいてください。"

#: ../source/specifications/binary-distribution-format.rst:456
#: ../source/specifications/binary-distribution-format.rst:454
msgid "Changes"
msgstr "変更点"

#: ../source/specifications/binary-distribution-format.rst:458
#: ../source/specifications/binary-distribution-format.rst:456
msgid "Since :pep:`427`, this specification has changed as follows:"
msgstr ":pep:`427` 以来、この仕様には次のような修正が加えられました:"

#: ../source/specifications/binary-distribution-format.rst:460
#: ../source/specifications/binary-distribution-format.rst:458
msgid ""
"The rules on escaping in wheel filenames were revised, to bring them into "
"line with what popular tools actually do (February 2021)."
msgstr ""
"他の普及しているツールが実際にやるのと同じやり方に合わせて、 wheel のファイル"
"名におけるエスケーピングの規則が修正されました。"

#: ../source/specifications/binary-distribution-format.rst:467
#: ../source/specifications/binary-distribution-format.rst:465
msgid ""
"PEP acceptance (https://mail.python.org/pipermail/python-dev/2013-"
"February/124103.html)"
msgstr ""
"PEP 受諾 (https://mail.python.org/pipermail/python-dev/2013-February/124103."
"html)"

#: ../source/specifications/binary-distribution-format.rst:472
#: ../source/specifications/binary-distribution-format.rst:470
msgid "Appendix"
msgstr "補遺"

#: ../source/specifications/binary-distribution-format.rst:474
#: ../source/specifications/binary-distribution-format.rst:472
msgid "Example urlsafe-base64-nopad implementation::"
msgstr "urlsafe-base64-nopad の実装の例::"

#: ../source/specifications/binary-distribution-format.rst:488
#: ../source/specifications/binary-distribution-format.rst:486
msgid "Copyright"
msgstr "著作権"

#: ../source/specifications/binary-distribution-format.rst:490
#: ../source/specifications/binary-distribution-format.rst:488
msgid "This document has been placed into the public domain."
msgstr "この文書はパブリックドメインに位置付けられる。"

#: ../source/specifications/core-metadata.rst:5
msgid "Core metadata specifications"
msgstr "コアとなるメタデータの仕様"

#: ../source/specifications/core-metadata.rst:7
msgid ""
"Fields defined in the following specification should be considered valid, "
"complete and not subject to change. The required fields are:"
msgstr ""
"この後の仕様の中で定義されるフィールドは、正当かつ完全であって、変更の可能性"
"がないものと見做されるべきです。必須のフィールドは以下の通り:"

#: ../source/specifications/core-metadata.rst:10
msgid "``Metadata-Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:11
msgid "``Name``"
msgstr "``Name``"

#: ../source/specifications/core-metadata.rst:12
msgid "``Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:14
msgid "All the other fields are optional."
msgstr "これら以外のすべてのフィールドは必須のものではありません。"

#: ../source/specifications/core-metadata.rst:16
msgid ""
"The standard file format for metadata (including in :doc:`wheels <binary-"
"distribution-format>` and :doc:`installed projects <recording-installed-"
"packages>`) is based on the format of email headers. However, email formats "
"have been revised several times, and exactly which email RFC applies to "
"packaging metadata is not specified. In the absence of a precise definition, "
"the practical standard is set by what the standard library :mod:`python:"
"email.parser` module can parse using the :data:`~.python:email.policy."
"compat32` policy."
msgstr ""
"(:doc:`wheels <binary-distribution-format>` および :doc:`インストール済みのプ"
"ロジェクト <recording-installed-packages>` の両文書に含まれる) メタデータのた"
"めの標準的なファイルフォーマットは、電子メールのヘッダーのフォーマットに基い"
"ています。しかしながら、電子メールのフォーマットは何度か修正が入っています"
"が、正確にはどの電子メールの RFC がパッケージングのメタデータに適用されるのか"
"については指定がありません。精密な定義が欠落しているので、標準ライブラリの :"
"mod:`python:email.parser` モジュールが :data:`~.python:email.policy."
"compat32` のポリシーを用いて読み込むことができるものを実務上の標準として設定"
"しています。"

#: ../source/specifications/core-metadata.rst:25
msgid ""
"Whenever metadata is serialised to a byte stream (for example, to save to a "
"file), strings must be serialised using the UTF-8 encoding."
msgstr ""
"メタデータをバイト列 (例えばファイルに保存するために) にシリアル化する際には"
"いつでも、文字列を UTF-8 エンコーディングを用いてシリアル化しなければなりませ"
"ん。"

#: ../source/specifications/core-metadata.rst:28
msgid ""
"Although :pep:`566` defined a way to transform metadata into a JSON-"
"compatible dictionary, this is not yet used as a standard interchange "
"format. The need for tools to work with years worth of existing packages "
"makes it difficult to shift to a new format."
msgstr ""
":pep:`566` でメタデータを JSON 互換の辞書型に変換する一つの方法を定義していま"
"すが、標準の交換フォーマットとしてはまだ使われていません。既に何年間も使われ"
"てきた既存のパッケージと共に動作するツールが必要なので、新しいフォーマットに"
"移行することは困難なのです。"

#: ../source/specifications/core-metadata.rst:33
msgid ""
"*Interpreting old metadata:* In :pep:`566`, the version specifier field "
"format specification was relaxed to accept the syntax used by popular "
"publishing tools (namely to remove the requirement that version specifiers "
"must be surrounded by parentheses). Metadata consumers may want to use the "
"more relaxed formatting rules even for metadata files that are nominally "
"less than version 2.1."
msgstr ""
"*古い形式のメタデータを翻訳する:* :pep:`566` では、バージョン指定子フィールド"
"のフォーマット仕様がよく用いられている公開ツール群で使われる構文を受け入れる "
"(正確にはバージョン指定子が丸括弧で囲まれていなければならないという要求事項を"
"削除することによって) ようにと緩められました。メタデータを使う側としては、メ"
"タデータファイルが名ばかりのものとなっている 2.1 よりも前のバージョンであって"
"さえも、もっと寛容なフォーマット規則を使いたいかもしれません。"

#: ../source/specifications/core-metadata.rst:44
msgid "Metadata-Version"
msgstr "Metadata-Version"

#: ../source/specifications/core-metadata.rst:48
msgid ""
"Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", "
"\"2.1\", \"2.2\", and \"2.3\"."
msgstr ""
"ファイルフォーマットのバージョン; 正しいものは \"1.0\", \"1.1\", \"1.2\", "
"\"2.1\", \"2.2\", と \"2.3\"。"

#: ../source/specifications/core-metadata.rst:51
msgid ""
"Automated tools consuming metadata SHOULD warn if ``metadata_version`` is "
"greater than the highest version they support, and MUST fail if "
"``metadata_version`` has a greater major version than the highest version "
"they support (as described in :pep:`440`, the major version is the value "
"before the first dot)."
msgstr ""
"メタデータを利用する自動化ツールは、 ``metadata_version`` が自身のサポートす"
"る最大のものより大きい場合には警告を行うべきであり、かつ、 "
"``metadata_version`` が自身のサポートする最大のメジャーバージョン (:pep:"
"`440` に記述されている通り、メジャーバージョンとはバージョンのうち最初のドッ"
"トよりも前の部分である) より大きいメジャーバージョンを持つ場合には異常終了す"
"るべきです。"

#: ../source/specifications/core-metadata.rst:57
msgid ""
"For broader compatibility, build tools MAY choose to produce distribution "
"metadata using the lowest metadata version that includes all of the needed "
"fields."
msgstr ""
"より広く互換性を保つために、ビルドツールは、必要なフィールドをすべて含む前提"
"で最も古いバージョンのメタデータ仕様を使って配布物のメタデータを生成するとい"
"う選択を行なっても構いません。"

#: ../source/specifications/core-metadata.rst:61
#: ../source/specifications/core-metadata.rst:83
#: ../source/specifications/core-metadata.rst:99
#: ../source/specifications/core-metadata.rst:162
#: ../source/specifications/core-metadata.rst:177
#: ../source/specifications/core-metadata.rst:215
#: ../source/specifications/core-metadata.rst:287
#: ../source/specifications/core-metadata.rst:291
#: ../source/specifications/core-metadata.rst:295
#: ../source/specifications/core-metadata.rst:299
#: ../source/specifications/core-metadata.rst:331
#: ../source/specifications/core-metadata.rst:351
#: ../source/specifications/core-metadata.rst:377
#: ../source/specifications/core-metadata.rst:395
#: ../source/specifications/core-metadata.rst:420
#: ../source/specifications/core-metadata.rst:442
#: ../source/specifications/core-metadata.rst:605
#: ../source/specifications/core-metadata.rst:636
#: ../source/specifications/core-metadata.rst:646
msgid "Example::"
msgstr "例::"

#: ../source/specifications/core-metadata.rst:69
msgid "Name"
msgstr ""

#: ../source/specifications/core-metadata.rst:72
msgid "Added additional restrictions on format from :pep:`508`"
msgstr ":pep:`508` から採ったフォーマットに追加的な制約を加える"

#: ../source/specifications/core-metadata.rst:75
msgid ""
"The name of the distribution. The name field is the primary identifier for a "
"distribution. A valid name consists only of ASCII letters and numbers, "
"period, underscore and hyphen. It must start and end with a letter or "
"number. Distribution names are limited to those which match the following "
"regex (run with ``re.IGNORECASE``)::"
msgstr ""
"配布物の名前。name フィールドは、配布物の一義的な識別子です。正当な名前は "
"ASCII 文字・数字・ピリオド・アンダースコア・ハイフンだけで構成されているもの"
"です。名前の先頭と末尾は文字か数字でなければなりません。配布物の名前は次の正"
"規表現に (``re.IGNORECASE`` 付きで) マッチするものに限られます::"

#: ../source/specifications/core-metadata.rst:87
msgid ""
"For comparison purposes, the names should be :ref:`normalized <name-"
"normalization>` before comparing."
msgstr ""
"比較の目的のためにも、名前は比較の前に :ref:`正規化 <name-normalization>` さ"
"れているべきです。"

#: ../source/specifications/core-metadata.rst:92
msgid "Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:96
msgid ""
"A string containing the distribution's version number.  This field  must be "
"in the format specified in :pep:`440`."
msgstr ""
"配布物のバージョン番号を格納する文字列。このフィールドは :pep:`440` で規定さ"
"れるフォーマットでなければなりません。"

#: ../source/specifications/core-metadata.rst:107
msgid "Dynamic (multiple use)"
msgstr "Dyanamic (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:111
msgid ""
"A string containing the name of another core metadata field. The field names "
"``Name``, ``Version``, and ``Metadata-Version`` may not be specified in this "
"field."
msgstr ""
"別のコアとなるメタデータのフィールドの名前を包含した文字列。フィールド名の "
"``Name`` ・ ``Version`` ・ ``Metadata-Version`` をこのフィールドに指定しては"
"なりません。"

#: ../source/specifications/core-metadata.rst:115
msgid ""
"When found in the metadata of a source distribution, the following rules "
"apply:"
msgstr ""
"ソースコード配布物のメタデータ中に見つかった場合には、以下の規則を適用します:"

#: ../source/specifications/core-metadata.rst:118
msgid ""
"If a field is *not* marked as ``Dynamic``, then the value of the field in "
"any wheel built from the sdist MUST match the value in the sdist. If the "
"field is not in the sdist, and not marked as ``Dynamic``, then it MUST NOT "
"be present in the wheel."
msgstr ""
"フィールドが ``Dynamic`` と *マークされていない* 場合は、 sdist からビルドさ"
"れたどの wheel であっても、そのフィールドの値が sdist での値と一致しなければ"
"なりません。そのフィールドが sdist には存在せず、かつ、 ``Dynamic`` とマーク"
"されていない場合には、そのようなフィールドは wheel に出現してはなりません。"

#: ../source/specifications/core-metadata.rst:122
msgid ""
"If a field is marked as ``Dynamic``, it may contain any valid value in a "
"wheel built from the sdist (including not being present at all)."
msgstr ""
"フィールドが ``Dynamic`` とマークされている場合、 (ひとつも存在しない場合も含"
"めて) sdist からビルドされた wheel 内のどんな正当な値を取っても構いません。"

#: ../source/specifications/core-metadata.rst:125
msgid ""
"If the sdist metadata version is older than version 2.2, then all fields "
"should be treated as if they were specified with ``Dynamic`` (i.e. there are "
"no special restrictions on the metadata of wheels built from the sdist)."
msgstr ""
"sdist のメタデータバージョンがバージョン 2.2 よりも古い場合には、すべての"
"フィールドが ``Dynamic`` であると指定されたかのように (つまり、その sdist か"
"らビルドされた wheel のメタデータに何も特別な制約がないかのように) 取り扱うべ"
"きです。"

#: ../source/specifications/core-metadata.rst:129
msgid ""
"In any context other than a source distribution, ``Dynamic`` is for "
"information only, and indicates that the field value was calculated at wheel "
"build time, and may not be the same as the value in the sdist or in other "
"wheels for the project."
msgstr ""
"ソースコード配布物を除くすべての文脈で、 ``Dynamic`` は情報提供の目的のみであ"
"り、そのフィールドの値がビルドの際に計算されたものであって、 sdist や同じプロ"
"ジェクトでも他の wheel ファイルでは異なる場合があることを示します。"

#: ../source/specifications/core-metadata.rst:134
msgid ""
"Full details of the semantics of ``Dynamic`` are described in :pep:`643`."
msgstr "``Dynamic`` の詳細かつ完全な意味は :pep:`643` に記述されています。"

#: ../source/specifications/core-metadata.rst:138
msgid "Platform (multiple use)"
msgstr "Platform (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:142
msgid ""
"A Platform specification describing an operating system supported by the "
"distribution which is not listed in the \"Operating System\" Trove "
"classifiers. See \"Classifier\" below."
msgstr ""
"Platform の仕様は、その配布物がサポートするオペレーティングシステムを記述した"
"もので、 \"Operating System\" Trove 分類子には記載されていないもの。後述の "
"\"分類子 <Classifier>\" を見てください。"

#: ../source/specifications/core-metadata.rst:153
msgid "Supported-Platform (multiple use)"
msgstr "Supported-Platform (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:157
msgid ""
"Binary distributions containing a PKG-INFO file will use the Supported-"
"Platform field in their metadata to specify the OS and CPU for which the "
"binary distribution was compiled.  The semantics of the Supported-Platform "
"field are not specified in this PEP."
msgstr ""
"PKG-INFO ファイルを含むバイナリ配布物は、内包するメタデータの中の Supported-"
"Platform フィールドを使って当該バイナリ配布物がどの OS や CPU 向けにコンパイ"
"ルされたかを指定することになるでしょう。 Supported-Platform フィールドのセマ"
"ンティクスは PEP には定義されたものがありません。"

#: ../source/specifications/core-metadata.rst:171
msgid "Summary"
msgstr "Summary"

#: ../source/specifications/core-metadata.rst:175
msgid "A one-line summary of what the distribution does."
msgstr "その配布物が何をするものかを１行で記述した要約。"

#: ../source/specifications/core-metadata.rst:195
msgid "This field may be specified in the message body instead."
msgstr "このフィールドの代わりにメッセージ本体で指定しても構いません。"

#: ../source/specifications/core-metadata.rst:198
msgid ""
"A longer description of the distribution that can run to several "
"paragraphs.  Software that deals with metadata should not assume any maximum "
"size for this field, though people shouldn't include their instruction "
"manual as the description."
msgstr ""
"配布物に関する長めの説明文で、いくつかの段落に渡ってもかまいません。取扱説明"
"書並みの記述をするべきではありませんが、メタデータを扱うソフトウェアはこの"
"フィールドに最大長さがあるものと仮定すべきではありません。"

#: ../source/specifications/core-metadata.rst:203
msgid ""
"The contents of this field can be written using reStructuredText markup "
"[1]_.  For programs that work with the metadata, supporting markup is "
"optional; programs can also display the contents of the field as-is.  This "
"means that authors should be conservative in the markup they use."
msgstr ""
"このフィールドの内容は、 reStructuredText マークアップ [1]_ を使って書いても"
"構いません。メタデータを取り扱うプログラムの側ではマークアップをサポートして"
"もしなくてもかまわず、サポートしない場合にはこのフィールドの内容をそのまま表"
"示することも可能です。つまり、作者の側は、自分が採用するマークアップ言語につ"
"いては保守的であるべきだということになります。"

#: ../source/specifications/core-metadata.rst:209
msgid ""
"To support empty lines and lines with indentation with respect to the RFC "
"822 format, any CRLF character has to be suffixed by 7 spaces followed by a "
"pipe (\"|\") char. As a result, the Description field is encoded into a "
"folded field that can be interpreted by RFC822 parser [2]_."
msgstr ""
"空行および RFC 822 に従う字下げをサポートするために、すべての CRLF 文字には７"
"個の空白文字と１個のパイプ文字 (\"|\") がこの順に並ぶ文字列が後続しなければな"
"りません。その結果として、Description フィールドが RFC 822 構文解析器 [2]_ で"
"解析可能な形の改行可能なフィールドにエンコードされます。"

#: ../source/specifications/core-metadata.rst:226
msgid ""
"This encoding implies that any occurrences of a CRLF followed by 7 spaces "
"and a pipe char have to be replaced by a single CRLF when the field is "
"unfolded using a RFC822 reader."
msgstr ""
"このエンコーディングが意味するところは、その折り畳まれたフィールドをRFC822 読"
"み取り器で読み取る時には、CRLF と７個の空白文字とそれに引き続くパイプ文字が出"
"現するたびにそれを単独の CRLF に置き換えなければならないということです。"

#: ../source/specifications/core-metadata.rst:230
msgid ""
"Alternatively, the distribution's description may instead be provided in the "
"message body (i.e., after a completely blank line following the headers, "
"with no indentation or other special formatting necessary)."
msgstr ""
"代替策として、配布物に関する説明を代わりにメッセージボディに書く (つまり、字"
"下げやその他の特別なフォーマットを使わずに、ヘッダの並びの後の完全な空行に続"
"けて書く) こともできます。"

#: ../source/specifications/core-metadata.rst:239
msgid "Description-Content-Type"
msgstr "Description-Content-Type"

#: ../source/specifications/core-metadata.rst:243
msgid ""
"A string stating the markup syntax (if any) used in the distribution's "
"description, so that tools can intelligently render the description."
msgstr ""
"配布物の説明で使われるマークアップ構文 (もしあれば) を述べる文字列で、ツール"
"の側が頭の良いやり方で説明を表示することができます。"

#: ../source/specifications/core-metadata.rst:246
msgid ""
"Historically, PyPI supported descriptions in plain text and "
"`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
"restructuredtext.html>`_, and could render reST into HTML. However, it is "
"common for distribution authors to write the description in `Markdown "
"<https://daringfireball.net/projects/markdown/>`_ (:rfc:`7763`) as many code "
"hosting sites render Markdown READMEs, and authors would reuse the file for "
"the description. PyPI didn't recognize the format and so could not render "
"the description correctly. This resulted in many packages on PyPI with "
"poorly-rendered descriptions when Markdown is left as plain text, or worse, "
"was attempted to be rendered as reST. This field allows the distribution "
"author to specify the format of their description, opening up the "
"possibility for PyPI and other tools to be able to render Markdown and other "
"formats."
msgstr ""
"歴史的には PyPI はプレーンテキストおよび `reStructuredText (reST) <https://"
"docutils.sourceforge.io/docs/ref/rst/restructuredtext.html>`_ での "
"description をサポートし、 reST を HTML として表示することができました。しか"
"しながら、多くのソースコード管理サイトが Markdown の README を表示するように"
"なったので、配布物の作者たちが description を `Markdown <https://"
"daringfireball.net/projects/markdown/>`_ (:rfc:`7763`) で書くことが普通にな"
"り、作者たちはそのファイルを description として再利用するようになってきまし"
"た。 PyPI はこのフォーマットを認識せず、従って description の内容を正しく表示"
"することができませんでした。その結果、 PyPI 上の多くのパッケージで Markdown "
"がプレーンテキストとして、もっと悪い場合には reST として解釈して、惨めな表示"
"になっていました。このフィールドは配布物の作者がその description のフォーマッ"
"トを指定できるようにしますので、 PyPI やその他のツールが Markdown やその他の"
"フォーマットを正しく表示できるようになる可能性を広げます。"

#: ../source/specifications/core-metadata.rst:259
msgid ""
"The format of this field is the same as the ``Content-Type`` header in HTTP "
"(i.e.: `RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type."
"html>`_). Briefly, this means that it has a ``type/subtype`` part and then "
"it can optionally have a number of parameters:"
msgstr ""
"このフィールドのフォーマットは HTTP (すなわち `RFC 1341 <https://www.w3.org/"
"Protocols/rfc1341/4_Content-Type.html>`_) における ``Content-Type`` ヘッダの"
"それと同じです。端的に言えば、これは ``type/subtype`` の部分を持っていて、オ"
"プションとしていくつかのパラメータを取ることができるというものです:"

#: ../source/specifications/core-metadata.rst:265
msgid "Format::"
msgstr "フォーマット::"

#: ../source/specifications/core-metadata.rst:269
msgid "The ``type/subtype`` part has only a few legal values:"
msgstr "``type/subtype`` 部分はいくつかの正当な値を取ります:"

#: ../source/specifications/core-metadata.rst:271
msgid "``text/plain``"
msgstr "``text/plain``"

#: ../source/specifications/core-metadata.rst:272
msgid "``text/x-rst``"
msgstr "``text/x-rst``"

#: ../source/specifications/core-metadata.rst:273
msgid "``text/markdown``"
msgstr "``text/markdown``"

#: ../source/specifications/core-metadata.rst:275
msgid ""
"The ``charset`` parameter can be used to specify the character encoding of "
"the description. The only legal value is ``UTF-8``. If omitted, it is "
"assumed to be ``UTF-8``."
msgstr ""
"``charset`` パラメータは、description のキャラクターのエンコーディングを指定"
"するために使われます。唯一の正当な値は ``UTF-8`` です。省略時には ``UTF-8`` "
"であるものと仮定します。"

#: ../source/specifications/core-metadata.rst:279
msgid ""
"Other parameters might be specific to the chosen subtype. For example, for "
"the ``markdown`` subtype, there is an optional ``variant`` parameter that "
"allows specifying the variant of Markdown in use (defaults to ``GFM`` if not "
"specified). Currently, two variants are recognized:"
msgstr ""
"サブタイプを選択するために他のパラメータが指定される場合もあります。例えば、 "
"``markdown`` サブタイプを指定する際に、使われている Markdown の異種 (指定がな"
"い場合にはデフォルトでは ``GFM``) を指定することができるオプションの "
"``variant`` パラメータが存在します。現時点ではふたつの異種が認識されます:"

#: ../source/specifications/core-metadata.rst:284
msgid "``GFM`` for :rfc:`Github-flavored Markdown <7764#section-3.2>`"
msgstr ":rfc:`Github 流の Markdown <7764#section-3.2>` を指定する ``GFM``"

#: ../source/specifications/core-metadata.rst:285
msgid "``CommonMark`` for :rfc:`CommonMark <7764#section-3.5>`"
msgstr ":rfc:`CommonMark <7764#section-3.5>` を指定する ``CommonMark``"

#: ../source/specifications/core-metadata.rst:303
msgid ""
"If a ``Description-Content-Type`` is not specified, then applications should "
"attempt to render it as ``text/x-rst; charset=UTF-8`` and fall back to "
"``text/plain`` if it is not valid rst."
msgstr ""
"``Description-Content-Type`` が指定されていない場合には、アプリケーションとし"
"ては、まず ``text/x-rst; charset=UTF-8`` として表示を試み、正当な rst ではな"
"い場合に ``text/plain`` にフォールバックするべきです。"

#: ../source/specifications/core-metadata.rst:307
msgid ""
"If a ``Description-Content-Type`` is an unrecognized value, then the assumed "
"content type is ``text/plain`` (Although PyPI will probably reject anything "
"with an unrecognized value)."
msgstr ""
"``Description-Content-Type`` が認識できない値である場合には、内容の型が "
"``text/plain`` であるものと仮定します (とはいえ、認識できない値であれば何で"
"あっても PyPI が拒否することになるでしょう) 。"

#: ../source/specifications/core-metadata.rst:311
msgid ""
"If the ``Description-Content-Type`` is ``text/markdown`` and ``variant`` is "
"not specified or is set to an unrecognized value, then the assumed "
"``variant`` is ``GFM``."
msgstr ""
"``Description-Content-Type`` が ``text/markdown`` で、 ``variant`` が指定され"
"ない場合や認識できない値が指定された場合には、 ``variant`` が ``GFM`` である"
"ものと仮定されます。"

#: ../source/specifications/core-metadata.rst:315
msgid ""
"So for the last example above, the ``charset`` defaults to ``UTF-8`` and the "
"``variant`` defaults to ``GFM`` and thus it is equivalent to the example "
"before it."
msgstr ""
"上記の最後の例を見ると ``charset`` はデフォルトでは ``UTF-8`` であり、 "
"``variant`` はデフォルトでは ``GFM`` ですので、それ以前の例と同等であるという"
"ことになります。"

#: ../source/specifications/core-metadata.rst:324
msgid "Keywords"
msgstr "キーワード"

#: ../source/specifications/core-metadata.rst:328
msgid ""
"A list of additional keywords, separated by commas, to be used to assist "
"searching for the distribution in a larger catalog."
msgstr ""
"より大きなカタログで配布物を検索する助けとなるべく使用される、コンマで区切ら"
"れた追加のキーワードのリスト。"

#: ../source/specifications/core-metadata.rst:337
msgid ""
"The specification previously showed keywords separated by spaces, but "
"distutils and setuptools implemented it with commas. These tools have been "
"very widely used for many years, so it was easier to update the "
"specification to match the de facto standard."
msgstr ""
"以前にお見せした仕様ではキーワードを区切るのに空白文字を使っていましたが、 "
"distutils と setuptools はコンマで区切ります。これらのツールは多年に渡って非"
"常に広く使われていますので、仕様をデファクト標準に合わせる形で更新する方が簡"
"単でした。"

#: ../source/specifications/core-metadata.rst:345
msgid "Home-page"
msgstr "Home-page"

#: ../source/specifications/core-metadata.rst:349
msgid "A string containing the URL for the distribution's home page."
msgstr "配布物のホームページを示す URL を含んだ文字列。"

#: ../source/specifications/core-metadata.rst:357
msgid "Download-URL"
msgstr "Download-URL"

#: ../source/specifications/core-metadata.rst:361
msgid ""
"A string containing the URL from which this version of the distribution can "
"be downloaded.  (This means that the URL can't be something like \".../"
"BeagleVote-latest.tgz\", but instead must be \".../BeagleVote-0.45.tgz\".)"
msgstr ""
"そこからこのバージョンの配布物をダウンロードすることができる URL を含んだ文字"
"列。 (これが意味するところは、 URL は何か \".../BeagleVote-latest.tgz\" のよ"
"うなものでは駄目で、 \".../BeagleVote-0.45.tgz\" のようにバージョンを含むもの"
"でなければならないということです。)"

#: ../source/specifications/core-metadata.rst:370
msgid "Author"
msgstr "Author"

#: ../source/specifications/core-metadata.rst:374
msgid ""
"A string containing the author's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"少なくとも作者の名前を含む文字列で、連絡先となる情報を追加しても構いません。"

#: ../source/specifications/core-metadata.rst:387
msgid "Author-email"
msgstr "Author-email"

#: ../source/specifications/core-metadata.rst:391
msgid ""
"A string containing the author's e-mail address.  It can contain a name and "
"e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"作者の電子メールアドレスを含む文字列。 RFC-822 の ``From:`` ヘッダの記述形式"
"として正当な形で名前と電子メールアドレスを含んでいても構いません。"

#: ../source/specifications/core-metadata.rst:399
#: ../source/specifications/core-metadata.rst:446
msgid ""
"Per RFC-822, this field may contain multiple comma-separated e-mail "
"addresses::"
msgstr ""
"RFC-822 によれば、このフィールドは、複数の電子メールアドレスをコンマで区切っ"
"て記述しても構いません::"

#: ../source/specifications/core-metadata.rst:409
msgid "Maintainer"
msgstr "メンテナ"

#: ../source/specifications/core-metadata.rst:413
msgid ""
"A string containing the maintainer's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"少なくともメンテナの名前を含む文字列で、連絡先となる情報を追加しても構いませ"
"ん。"

#: ../source/specifications/core-metadata.rst:416
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author``."
msgstr ""
"当該プロジェクトが元々の作者とは異なる誰かによって保守されている場合にこの"
"フィールドを使うことを想定しているということを覚えておいてください: もし "
"``Author`` と同一人物であれば、このフィールドを省略するべきです。"

#: ../source/specifications/core-metadata.rst:430
msgid "Maintainer-email"
msgstr "Maintainer-email"

#: ../source/specifications/core-metadata.rst:434
msgid ""
"A string containing the maintainer's e-mail address.  It can contain a name "
"and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"メンテナの電子メールアドレスを含む文字列。 RFC-822 の ``From:`` ヘッダの記述"
"形式として正当な形で名前と電子メールアドレスを含んでいても構いません。"

#: ../source/specifications/core-metadata.rst:438
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author-email``."
msgstr ""
"当該プロジェクトが元々の作者とは異なる誰かによって保守されている場合にこの"
"フィールドを使うことを想定しているということを覚えておいてください: もし "
"``Author-email`` と同一であれば、このフィールドを省略するべきです。"

#: ../source/specifications/core-metadata.rst:456
msgid "License"
msgstr "License"

#: ../source/specifications/core-metadata.rst:460
msgid ""
"Text indicating the license covering the distribution where the license is "
"not a selection from the \"License\" Trove classifiers. See :ref:`"
"\"Classifier\" <metadata-classifier>` below. This field may also be used to "
"specify a particular version of a license which is named via the "
"``Classifier`` field, or to indicate a variation or exception to such a "
"license."
msgstr ""
"\"License\" Trove 分類子から選択したものではないライセンスの場合は、配布物を"
"カバーするライセンスを示すテキスト。後述の :ref:`\"Classifier\" <metadata-"
"classifier>` を見てください。このフィールドは、 ``Classifier`` フィールドを経"
"由して名指しされたライセンスの特定のバージョンを指定したり、そのようなライセ"
"ンスに対する変種や例外事項を示したりするのに使っても構いません。"

#: ../source/specifications/core-metadata.rst:480
msgid "Classifier (multiple use)"
msgstr "Classifier (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:484
msgid ""
"Each entry is a string giving a single classification value for the "
"distribution.  Classifiers are described in :pep:`301`, and the Python "
"Package Index publishes a dynamic list of `currently defined classifiers "
"<https://pypi.org/classifiers/>`__."
msgstr ""
"それぞれのエントリは、当該配布物を分類する値をひとつ与える文字列です。分類子"
"については :pep:`301` に記述されていて、The Python Package Index は `現在定義"
"されている分類子 <https://pypi.org/classifiers/>`__ という動的なリストを公開"
"しています。"

#: ../source/specifications/core-metadata.rst:489
#: ../source/specifications/core-metadata.rst:579
#: ../source/specifications/core-metadata.rst:718
#: ../source/specifications/core-metadata.rst:742
msgid "This field may be followed by an environment marker after a semicolon."
msgstr "このフィールドでは、セミコロンの後に環境指標を続けても構いません。"

#: ../source/specifications/core-metadata.rst:500
msgid "Requires-Dist (multiple use)"
msgstr "Requires-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:503
#: ../source/specifications/core-metadata.rst:566
#: ../source/specifications/core-metadata.rst:690
#: ../source/specifications/core-metadata.rst:731
msgid ""
"The field format specification was relaxed to accept the syntax used by "
"popular publishing tools."
msgstr ""
"フィールドの仕様は、人気のある公開ツール群が用いる構文を許容するように緩めら"
"れました。"

#: ../source/specifications/core-metadata.rst:507
msgid ""
"Each entry contains a string naming some other distutils project required by "
"this distribution."
msgstr ""
"それぞれのエントリは、この配布物が要求する他の distutils のプロジェクトを名指"
"しする文字列を含みます。"

#: ../source/specifications/core-metadata.rst:510
msgid "The format of a requirement string contains from one to four parts:"
msgstr "要求事項を示す文字列のフォーマットは、１個から４個の部分を含みます:"

#: ../source/specifications/core-metadata.rst:512
msgid ""
"A project name, in the same format as the ``Name:`` field. The only "
"mandatory part."
msgstr ""
"``Name:`` フィールドと同じフォーマットのプロジェクト名。これだけが必須部分で"
"す。"

#: ../source/specifications/core-metadata.rst:514
msgid ""
"A comma-separated list of 'extra' names. These are defined by the required "
"project, referring to specific features which may need extra dependencies. "
"The names MUST conform to the restrictions specified by the ``Provides-Extra:"
"`` field."
msgstr ""
"コンマ区切りの '追加の' 名前のリスト。これらは、追加的な依存先を必要とする特"
"定の機能に応じて、要求されたプロジェクトによって定義されます。この名前は、 "
"``Provides-Extra:`` フィールドで指定された制約事項に従うものでなければなりま"
"せん。"

#: ../source/specifications/core-metadata.rst:518
msgid ""
"A version specifier. Tools parsing the format should accept optional "
"parentheses around this, but tools generating it should not use parentheses."
msgstr ""
"バージョン指定子。この部分をパースするツールはバージョンを囲む括弧を許容しな"
"ければならないが、生成する際には括弧を使ってはなりません。"

#: ../source/specifications/core-metadata.rst:521
msgid ""
"An environment marker after a semicolon. This means that the requirement is "
"only needed in the specified conditions."
msgstr ""
"セミコロンの後ろに環境マーカ。要求事項が必要となるのが指定された条件の時のみ"
"であることを示します。"

#: ../source/specifications/core-metadata.rst:524
msgid "See :pep:`508` for full details of the allowed format."
msgstr "許容されるフォーマットの詳細については :pep:`508` を見てください。"

#: ../source/specifications/core-metadata.rst:526
msgid ""
"The project names should correspond to names as found on the `Python Package "
"Index`_."
msgstr ""
"プロジェクト名は、 `Python パッケージインデックス <Python Package Index>`_ に"
"出現する名前に対応していなければなりません。"

#: ../source/specifications/core-metadata.rst:529
msgid ""
"Version specifiers must follow the rules described in :doc:`version-"
"specifiers`."
msgstr ""
"バージョン指定子は :doc:`version-specifiers` に記述された規則に従っていなけれ"
"ばなりません。"

#: ../source/specifications/core-metadata.rst:543
msgid "Requires-Python"
msgstr ""

#: ../source/specifications/core-metadata.rst:547
msgid ""
"This field specifies the Python version(s) that the distribution is "
"guaranteed to be compatible with. Installation tools may look at this when "
"picking which version of a project to install."
msgstr ""
"このフィールドは、配布物が動作すると補償された Python のバージョン (複数可) "
"を指定します。インストールツールは、プロジェクトのインストールするべきバー"
"ジョンを選択する時にこのフィールドを参照しても構いません。"

#: ../source/specifications/core-metadata.rst:551
msgid "The value must be in the format specified in :doc:`version-specifiers`."
msgstr ""
"値は、 :doc:`version-specifiers` で指定されたフォーマットでなければなりませ"
"ん。"

#: ../source/specifications/core-metadata.rst:553
msgid "This field cannot be followed by an environment marker."
msgstr "このフィールドでは、環境マーカを後ろに付けることはできません。"

#: ../source/specifications/core-metadata.rst:563
msgid "Requires-External (multiple use)"
msgstr "Requires-External (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:570
msgid ""
"Each entry contains a string describing some dependency in the system that "
"the distribution is to be used.  This field is intended to serve as a hint "
"to downstream project maintainers, and has no semantics which are meaningful "
"to the ``distutils`` distribution."
msgstr ""
"それぞれのエントリは、その配布物が使われるシステムにおける何らかの依存関係を"
"記述する文字列です。このフィールドは、ダウンストリームプロジェクトの維持管理"
"担当者向けにヒントを提供することを意図しており、 ``distutils`` 配布物にとって"
"は何ら意味を持ちません。"

#: ../source/specifications/core-metadata.rst:575
msgid ""
"The format of a requirement string is a name of an external dependency, "
"optionally followed by a version declaration within parentheses."
msgstr ""
"要求事項の文字列のフォーマットは外部の依存先の名前で、必須ではありませんが括"
"弧に入れたバージョンの宣言を後ろにつけても構いません。"

#: ../source/specifications/core-metadata.rst:581
msgid ""
"Because they refer to non-Python software releases, version numbers for this "
"field are **not** required to conform to the format specified in :pep:"
"`440`:  they should correspond to the version scheme used by the external "
"dependency."
msgstr ""
"非 Python のソフトウェアリリースを参照するものですので、このフィールドでの"
"バージョン番号は :pep:`440` で指定されたフォーマットに適合することを **要求さ"
"れていません** 。"

#: ../source/specifications/core-metadata.rst:586
msgid "Notice that there is no particular rule on the strings to be used."
msgstr "使用される文字列に対して特に規則がないという点に注意してください。"

#: ../source/specifications/core-metadata.rst:598
msgid "Project-URL (multiple-use)"
msgstr "Project-URL (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:602
msgid ""
"A string containing a browsable URL for the project and a label for it, "
"separated by a comma."
msgstr ""
"そのプロジェクトの閲覧可能な URL とラベルを含む文字列をコンマで区切ったもの。"

#: ../source/specifications/core-metadata.rst:609
msgid "The label is free text limited to 32 characters."
msgstr "このラベルは32 文字以内のフリーテキストです。"

#: ../source/specifications/core-metadata.rst:617
msgid "Provides-Extra (multiple use)"
msgstr "Provides-Extra (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:620
msgid ""
":pep:`685` restricted valid values to be unambiguous (i.e. no normalization "
"required). For older metadata versions, value restrictions were brought into "
"line with ``Name:`` and normalization rules were introduced."
msgstr ""
"曖昧さ (すなわち正規化が要求されていない) を避けるために :pep:`685` で制限さ"
"れた正当な値を。古めのメタデータのバージョンでは、 ``Name:`` を伴う行で値に制"
"限が導入され、正規化規則も導入されました。"

#: ../source/specifications/core-metadata.rst:625
msgid ""
"A string containing the name of an optional feature. A valid name consists "
"only of lowercase ASCII letters, ASCII numbers, and hyphen. It must start "
"and end with a letter or number. Hyphens cannot be followed by another "
"hyphen. Names are limited to those which match the following regex (which "
"guarantees unambiguity)::"
msgstr ""
"追加的な機能の名前を含む文字列。正当な名前は、 ASCII 小文字・ ASCII 数字・ハ"
"イフンからのみ構成されます。先頭と末尾は文字か数字でなければなりません。ハイ"
"フンは連続してはいけません。名前は次の正規表現にマッチしなければなりません "
"(そうすることで曖昧さを排除します)::"

#: ../source/specifications/core-metadata.rst:633
msgid ""
"The specified name may be used to make a dependency conditional on whether "
"the optional feature has been requested."
msgstr ""
"指定された名前は、追加的な機能が要求されたか否かに応じて依存関係を構築するた"
"めに使われます。"

#: ../source/specifications/core-metadata.rst:641
msgid ""
"A second distribution requires an optional dependency by placing it inside "
"square brackets, and can request multiple features by separating them with a "
"comma (,). The requirements are evaluated for each requested feature and "
"added to the set of requirements for the distribution."
msgstr ""
"２番目の配布物は、角括弧の中に書くことで追加の依存先を要求し、コンマ (,) で区"
"切ることで複数の機能を要求することができます。要求事項は、要求されたそれぞれ"
"の機能について評価され、配布物の要求する依存関係の組に追加されます。"

#: ../source/specifications/core-metadata.rst:651
msgid ""
"Two feature names ``test`` and ``doc`` are reserved to mark dependencies "
"that are needed for running automated tests and generating documentation, "
"respectively."
msgstr ""
"``test`` と ``doc`` という二つの名前は、順に自動化されたテストと説明文書の生"
"成のために必要な依存先として予約されています。"

#: ../source/specifications/core-metadata.rst:655
msgid ""
"It is legal to specify ``Provides-Extra:`` without referencing it in any "
"``Requires-Dist:``."
msgstr ""
"``Requires-Diet:`` のどこからも参照されていなくても、 ``Provides-Extra:`` を"
"指定しても構いません。"

#: ../source/specifications/core-metadata.rst:658
msgid ""
"When writing data for older metadata versions, names MUST be normalized "
"following the same rules used for the ``Name:`` field when performing "
"comparisons. Tools writing metadata MUST raise an error if two ``Provides-"
"Extra:`` entries would clash after being normalized."
msgstr ""
"古めのメタデータのバージョンでデータを書く時、比較を行う時には ``Name:`` "
"フィールドに使われるのと同じ規則に従って正規化されなければなりません。ふたつ"
"の ``Provides-Extra:`` エントリが正規化後に衝突する場合には、メタデータを書き"
"込むツールはエラーを発生させなければなりません。"

#: ../source/specifications/core-metadata.rst:663
msgid ""
"When reading data for older metadata versions, tools SHOULD warn when values "
"for this field would be invalid under newer metadata versions. If a value "
"would be invalid following the rules for ``Name:`` in any core metadata "
"version, the user SHOULD be warned and the value ignored to avoid ambiguity. "
"Tools MAY choose to raise an error when reading an invalid name for older "
"metadata versions."
msgstr ""
"メタデータの古めのバージョンから読み込む時、このフィールドの値が新しめのメタ"
"データバージョンとして正当でない場合にツールが警告するべきです。コアとなるメ"
"タデータのバージョンで ``Name:`` に対する規則に照らして値が正当ではないとすれ"
"ばユーザは警告されるべきで、その値は曖昧さを避けるために無視されるべきです。"
"古めのメタデータバージョンとして不当な名前を読み取った場合には、ツールはエ"
"ラーを発出することを選択しても構いません。"

#: ../source/specifications/core-metadata.rst:671
msgid "Rarely Used Fields"
msgstr "稀に使われるフィールド"

#: ../source/specifications/core-metadata.rst:673
msgid ""
"The fields in this section are currently rarely used, as their design was "
"inspired by comparable mechanisms in Linux package management systems, and "
"it isn't at all clear how tools should interpret them in the context of an "
"open index server such as `PyPI <https://pypi.org>`__."
msgstr ""
"この節のフィールドは、 Linux のパッケージ管理システムにおける類似の機構に触発"
"されて設計されましたが、 `PyPI <https://pypi.org>`__ のような開放的なインデッ"
"クスサーバの文脈でツールがどのように翻案するべきかが全く明らかではないので、"
"現在ではほとんど使われません。"

#: ../source/specifications/core-metadata.rst:678
msgid ""
"As a result, popular installation tools ignore them completely, which in "
"turn means there is little incentive for package publishers to set them "
"appropriately. However, they're retained in the metadata specification, as "
"they're still potentially useful for informational purposes, and can also be "
"used for their originally intended purpose in combination with a curated "
"package repository."
msgstr ""
"その結果として、人気のあるインストールツールでは完全に無視されていて、そのた"
"めに今度はパッケージを公開する側でもこれらのフィールドを適切に設定しておく誘"
"因がほとんどなくなっています。しかしながら、これらのフィールドは、情報提供の"
"目的ではまだ潜在的に役に立つことと、細かく注釈をつけるようなパッケージリポジ"
"トリと組み合わせれば本来意図された目的に用いることができることから、メタデー"
"タの仕様には残されています。"

#: ../source/specifications/core-metadata.rst:687
msgid "Provides-Dist (multiple use)"
msgstr "Provides-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:694
msgid ""
"Each entry contains a string naming a Distutils project which is contained "
"within this distribution.  This field *must* include the project identified "
"in the ``Name`` field, followed by the version : Name (Version)."
msgstr ""
"それぞれのエントリは、この配布物に含まれている Distutils プロジェクトの名前を"
"文字列で含みます。このフィールドは、プロジェクトを特定する ``Name`` フィール"
"ドと後続するバージョンを *含んでいなければなりません*: Name (Version) 。"

#: ../source/specifications/core-metadata.rst:699
msgid ""
"A distribution may provide additional names, e.g. to indicate that multiple "
"projects have been bundled together.  For instance, source distributions of "
"the ``ZODB`` project have historically included the ``transaction`` project, "
"which is now available as a separate distribution.  Installing such a source "
"distribution satisfies requirements for both ``ZODB`` and ``transaction``."
msgstr ""
"配布物は、複数のプロジェクトが一緒に束ねられている場合には、それを示す追加の"
"名前を持っていても構いません。例えば、 ``ZODB`` プロジェクトのソースコード配"
"布物は、歴史的に ``transaction`` プロジェクトを包含していましたが、今では個別"
"の配布物として利用可能です。そのようなソースコード配布物をインストールする"
"と、 ``ZODB`` と ``transaction`` の両方の要求事項を満たします。"

#: ../source/specifications/core-metadata.rst:706
msgid ""
"A distribution may also provide a \"virtual\" project name, which does not "
"correspond to any separately-distributed project:  such a name might be used "
"to indicate an abstract capability which could be supplied by one of "
"multiple projects.  E.g., multiple projects might supply RDBMS bindings for "
"use by a given ORM:  each project might declare that it provides ``ORM-"
"bindings``, allowing other projects to depend only on having at most one of "
"them installed."
msgstr ""
"配布物は、また、個別に配布されているどんなプロジェクトにも紐付かない \"仮想の"
"\" プロジェクト名を持っていても構いません: そのような名前は、複数のプロジェク"
"トのうちのひとつで供給される抽象的な能力を示すために使われるかもしれません。"
"例えば、複数のプロジェクトがとある ORM で使われる RDBMS バインディングを提供"
"していても構いません: それぞれのプロジェクトが、他のプロジェクトが依存する時"
"にはそのうちの高々１個だけがインストールされていれば十分な ``ORM-bindings`` "
"を提供すると宣言していても構わないのです。"

#: ../source/specifications/core-metadata.rst:714
msgid ""
"A version declaration may be supplied and must follow the rules described "
"in :doc:`version-specifiers`. The distribution's version number will be "
"implied if none is specified."
msgstr ""
"バージョンの宣言があっても構いませんが、 :doc:`バージョン指定子 <version-"
"specifiers>` に記述された規則に従ったものでなければなりません。もし指定されて"
"いなければ、配布物のバージョン番号が暗黙理に使われます。"

#: ../source/specifications/core-metadata.rst:728
msgid "Obsoletes-Dist (multiple use)"
msgstr "Obsoletes-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:735
msgid ""
"Each entry contains a string describing a distutils project's distribution "
"which this distribution renders obsolete, meaning that the two projects "
"should not be installed at the same time."
msgstr ""
"それぞれのエントリは、この配布物が出たことで旧式化した、従ってこれらふたつの"
"プロジェクトが同時にインストールされるべきではない distutils プロジェクトの配"
"布物を記述する文字列を含みます。"

#: ../source/specifications/core-metadata.rst:739
msgid ""
"Version declarations can be supplied.  Version numbers must be in the format "
"specified in :doc:`version-specifiers`."
msgstr ""
"バージョンの宣言があっても構いません。バージョン番号は :doc:`バージョン指定"
"子 <version-specifiers>` で指定されたフォーマットでなければなりません。"

#: ../source/specifications/core-metadata.rst:744
msgid ""
"The most common use of this field will be in case a project name changes, e."
"g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install "
"Torqued Python, the Gorgon distribution should be removed."
msgstr ""
"このフィールドの最もよくある使い方は、例えば Gorgon 2.3 が Torqued Python "
"1.0 の一部として組み込まれた時のように、プロジェクトの名前が変更された場合で"
"しょう。 Torqued Python をインストールするなら、 Gorgon 配布物は削除されるべ"
"きです。"

#: ../source/specifications/core-metadata.rst:757
msgid "reStructuredText markup: https://docutils.sourceforge.io/"
msgstr "reStructuredText マークアップ言語: https://docutils.sourceforge.io/"

#: ../source/specifications/core-metadata.rst:762
msgid "RFC 822 Long Header Fields: :rfc:`822#section-3.1.1`"
msgstr "RFC 822 長形式ヘッダフィールド: :rfc:`822#section-3.1.1`"

#: ../source/specifications/declaring-build-dependencies.rst:6
msgid "Declaring build system dependencies"
msgstr "ビルドシステムの依存関係を宣言する"

#: ../source/specifications/declaring-build-dependencies.rst:8
msgid ""
"`pyproject.toml` is a build system independent file format defined in :pep:"
"`518` that projects may provide in order to declare any Python level "
"dependencies that must be installed in order to run the project's build "
"system successfully."
msgstr ""
"`pyproject.toml` は :pep:`518` で定義されたビルドシステムとは独立したファイル"
"形式で、あるプロジェクトのビルドシステムが正常に動作するためにインストールさ"
"れていなければならない Python レベルの依存関係をすべて宣言するという目的のた"
"めにそのプロジェクトが提供するものです。"

#: ../source/specifications/declaring-project-metadata.rst:5
msgid "Declaring project metadata"
msgstr "プロジェクトのメタデータを宣言する"

#: ../source/specifications/declaring-project-metadata.rst:7
msgid ""
":pep:`621` specifies how to write a project's :ref:`core metadata <core-"
"metadata>` in a ``pyproject.toml`` file for packaging-related tools to "
"consume. It defines the following specification as the canonical source for "
"the format used."
msgstr ""
":pep:`621` では、パッケージング関連のツールが使用するために、あるプロジェクト"
"の :ref:`コアとなるメタデータ <core-metadata>` を ``pyproject.toml`` ファイル"
"にどのように書けば良いかを指定しています。使われるファイルフォーマットの基準"
"となる仕様として、以下のようなものを定義しています。"

#: ../source/specifications/declaring-project-metadata.rst:14
#: ../source/specifications/dependency-specifiers.rst:24
#: ../source/specifications/direct-url.rst:17
#: ../source/specifications/direct-url-data-structure.rst:20
msgid "Specification"
msgstr "仕様"

#: ../source/specifications/declaring-project-metadata.rst:16
msgid ""
"There are two kinds of metadata: *static* and *dynamic*. Static metadata is "
"specified in the ``pyproject.toml`` file directly and cannot be specified or "
"changed by a tool (this includes data *referred* to by the metadata, e.g. "
"the contents of files referenced by the metadata). Dynamic metadata is "
"listed via the ``dynamic`` key (defined later in this specification) and "
"represents metadata that a tool will later provide."
msgstr ""
"メタデータにはふたつの種類があります: *静的* なものと *動的* なものです。静的"
"なメタデータは ``pyproject.toml`` ファイルで直接指定されていて、ツール側では"
"指定したり変更したりできません (これは、例えばメタデータが参照するファイルの"
"内容のような、メタデータによって *参照* されるデータを含みます)。動的なメタ"
"データは ``dynamic`` キー (この仕様内で後で定義します) を経由して一覧化されて"
"いて、ツール側が後から提供することになるでしょう。"

#: ../source/specifications/declaring-project-metadata.rst:24
msgid ""
"The keys defined in this specification MUST be in a table named "
"``[project]`` in ``pyproject.toml``. No tools may add keys to this table "
"which are not defined by this specification. For tools wishing to store "
"their own settings in ``pyproject.toml``, they may use the ``[tool]`` table "
"as defined in the :ref:`build dependency declaration specification "
"<declaring-build-dependencies>`. The lack of a ``[project]`` table "
"implicitly means the build back-end will dynamically provide all keys."
msgstr ""
"この仕様で定義されるキーは、 ``pyproject.toml`` ファイルの中の ``[project]`` "
"という名前のテーブルに収容されていなければなりません。いかなるツールもこの"
"テーブルにこの仕様で定義されていないキーを追加してはなりません。自身の設定を "
"``pyproject.toml`` ファイルに記録しておきたいと願うツールは、 :ref:`ビルド時"
"の依存関係を宣言するための仕様 <declaring-build-dependencies>` で定義されてい"
"る通りに ``[tool]`` テーブルを使うことができます。 ``[project]`` テーブルが欠"
"落している場合は、ビルド用のバックエンドがすべてのキーを動的に提供するであろ"
"うということを暗黙理に意味しています。"

#: ../source/specifications/declaring-project-metadata.rst:33
msgid "The only keys required to be statically defined are:"
msgstr "必ず静的に定義しなければならない必須のキーは次の通り:"

#: ../source/specifications/declaring-project-metadata.rst:37
msgid ""
"The keys which are required but may be specified *either* statically or "
"listed as dynamic are:"
msgstr ""
"必須フィールドだが、静的に指定しても動的に指定しても *いずれでも構わない* "
"キーは以下の通り:"

#: ../source/specifications/declaring-project-metadata.rst:42
msgid ""
"All other keys are considered optional and may be specified statically, "
"listed as dynamic, or left unspecified."
msgstr ""
"他の全てのキーは必須ではないものと解釈され、これらは静的に指定しても動的にリ"
"ストしても未指定のままにしていても構いません。"

#: ../source/specifications/declaring-project-metadata.rst:45
msgid "The complete list of keys allowed in the ``[project]`` table are:"
msgstr "``[project]`` テーブルで許容されるキーの完全なリストは次のとおりです:"

#: ../source/specifications/declaring-project-metadata.rst:47
msgid "``authors``"
msgstr "``著者 <authors>``"

#: ../source/specifications/declaring-project-metadata.rst:49
msgid "``dependencies``"
msgstr "``依存関係 <dependencies``"

#: ../source/specifications/declaring-project-metadata.rst:51
#: ../source/specifications/declaring-project-metadata.rst:382
msgid "``dynamic``"
msgstr "``dynamic``"

#: ../source/specifications/declaring-project-metadata.rst:52
msgid "``entry-points``"
msgstr "``entry-points``"

#: ../source/specifications/declaring-project-metadata.rst:53
msgid "``gui-scripts``"
msgstr "``gui スクリプト <gui-scripts>``"

#: ../source/specifications/declaring-project-metadata.rst:56
msgid "``maintainers``"
msgstr "``保守者 <maintainers>``"

#: ../source/specifications/declaring-project-metadata.rst:58
msgid "``optional-dependencies``"
msgstr "``optional-dependencies``"

#: ../source/specifications/declaring-project-metadata.rst:59
#: ../source/specifications/declaring-project-metadata.rst:114
msgid "``readme``"
msgstr "``readme``"

#: ../source/specifications/declaring-project-metadata.rst:60
#: ../source/specifications/declaring-project-metadata.rst:160
msgid "``requires-python``"
msgstr "``requires-python``"

#: ../source/specifications/declaring-project-metadata.rst:62
#: ../source/specifications/declaring-project-metadata.rst:280
msgid "``urls``"
msgstr "``urls``"

#: ../source/specifications/declaring-project-metadata.rst:69
#: ../source/specifications/declaring-project-metadata.rst:86
#: ../source/specifications/declaring-project-metadata.rst:102
#: ../source/specifications/declaring-project-metadata.rst:162
msgid "TOML_ type: string"
msgstr "TOML_ 型: 文字列"

#: ../source/specifications/declaring-project-metadata.rst:70
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name <core-"
"metadata-name>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`名前 "
"<core-metadata-name>` フィールド"

#: ../source/specifications/declaring-project-metadata.rst:73
msgid "The name of the project."
msgstr "プロジェクトの名前。"

#: ../source/specifications/declaring-project-metadata.rst:75
msgid ""
"Tools SHOULD :ref:`normalize <name-normalization>` this name, as soon as it "
"is read for internal consistency."
msgstr ""
"内部的な一貫性を保つために、ツール側では読み取ったらすぐに、この名前を :ref:`"
"正規化 <name-normalization>` するべきです。"

#: ../source/specifications/declaring-project-metadata.rst:87
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Version "
"<core-metadata-version>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` に対応する: :ref:`バージョン "
"<core-metadata-version>`"

#: ../source/specifications/declaring-project-metadata.rst:90
msgid "The version of the project as supported by :pep:`440`."
msgstr ":pep:`440` でサポートされた通りのプロジェクトのバージョン。"

#: ../source/specifications/declaring-project-metadata.rst:92
msgid "Users SHOULD prefer to specify already-normalized versions."
msgstr "ユーザは正規化済みのバージョンを指定するようにするべきです。"

#: ../source/specifications/declaring-project-metadata.rst:103
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Summary "
"<core-metadata-summary>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`要約 "
"<core-metadata-summary>`"

#: ../source/specifications/declaring-project-metadata.rst:106
msgid "The summary description of the project."
msgstr "プロジェクトを要約する記述。"

#: ../source/specifications/declaring-project-metadata.rst:116
msgid "TOML_ type: string or table"
msgstr "TOML_ 型: 文字列またはテーブル"

#: ../source/specifications/declaring-project-metadata.rst:117
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Description "
"<core-metadata-description>` and :ref:`Description-Content-Type <core-"
"metadata-description-content-type>`"
msgstr ""
"対応する `コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Description <core-metadata-description>` and :ref:`Description-Content-Type "
"<core-metadata-description-content-type>`"

#: ../source/specifications/declaring-project-metadata.rst:121
msgid "The full description of the project (i.e. the README)."
msgstr "プロジェクトの説明全体 (すなわち README)。"

#: ../source/specifications/declaring-project-metadata.rst:123
msgid ""
"The key accepts either a string or a table. If it is a string then it is a "
"path relative to ``pyproject.toml`` to a text file containing the full "
"description. Tools MUST assume the file's encoding is UTF-8. If the file "
"path ends in a case-insensitive ``.md`` suffix, then tools MUST assume the "
"content-type is ``text/markdown``. If the file path ends in a case-"
"insensitive ``.rst``, then tools MUST assume the content-type is ``text/x-"
"rst``. If a tool recognizes more extensions than this PEP, they MAY infer "
"the content-type for the user without specifying this key as ``dynamic``. "
"For all unrecognized suffixes when a content-type is not provided, tools "
"MUST raise an error."
msgstr ""
"このキーは文字列かテーブルを受け付けます。もし文字列なら、完全な説明を含むテ"
"キストファイルの位置を ``pyproject.toml`` からの相対パスで示したものです。"
"ツールの側ではこのファイルが UTF-8 でエンコードされているものと想定しなければ"
"なりません。ファイルパスが大文字小文字を問わず ``.md`` 拡張子で終わっている場"
"合は、ツールはそのファイルの content-type が ``text/markdown`` であるものと仮"
"定しなければなりません。ファイルパスが大文字小文字を問わず ``.rst`` で終わっ"
"ている場合は、ツールは content-type が ``text/x-rst`` であるものと仮定しなけ"
"ればなりません。この PEP で指定するよりも多くの拡張子をツールが認識するなら、"
"そのようなツールは、このキーを ``dynamic`` であると指定していなくても、ユーザ"
"のために content-type を推測しても構いません。content-type が与えられていない"
"場合には、全ての認識できない拡張子についてツールはエラーを発生させなければな"
"りません。"

#: ../source/specifications/declaring-project-metadata.rst:134
msgid ""
"The ``readme`` key may also take a table. The ``file`` key has a string "
"value representing a path relative to ``pyproject.toml`` to a file "
"containing the full description. The ``text`` key has a string value which "
"is the full description. These keys are mutually-exclusive, thus tools MUST "
"raise an error if the metadata specifies both keys."
msgstr ""
"``readme`` キーはその値がテーブルでも構いません。 ``file`` キーは、完全な説明"
"を含むファイルへの ``pyproject.toml`` ファイルからの相対パスを表現する文字列"
"を値として持ちます。 ``text`` キーは、完全な説明そのものである文字列を値に持"
"ちます。これらのキーは排他的にいずれかひとつしか使えないので、もしメタデータ"
"がこれら両方のキーを同時に指定していたらツールはエラーを発生させなければなり"
"ません。"

#: ../source/specifications/declaring-project-metadata.rst:141
msgid ""
"A table specified in the ``readme`` key also has a ``content-type`` key "
"which takes a string specifying the content-type of the full description. A "
"tool MUST raise an error if the metadata does not specify this key in the "
"table. If the metadata does not specify the ``charset`` parameter, then it "
"is assumed to be UTF-8. Tools MAY support other encodings if they choose to. "
"Tools MAY support alternative content-types which they can transform to a "
"content-type as supported by the :ref:`core metadata <core-metadata>`. "
"Otherwise tools MUST raise an error for unsupported content-types."
msgstr ""
"``readme`` キーに指定されたテーブルには、完全な説明の content-type を指定する"
"文字列を値とする ``content-type`` キーも含まれています。メタデータがこのキー"
"をテーブルの中で指定していない場合には、ツールはエラーを発生させなければなり"
"ません。メタデータで ``charset`` パラメータが指定されていない場合には、 "
"UTF-8 であるものと想定されます。ツールは各ツールが独自に選択した他のエンコー"
"ディングをサポートしても構いません。 :ref:`コアとなるメタデータ <core-"
"metadata>` によってサポートされている content-type に変換することができるので"
"あれば、ツールはそのような代替 content-type をサポートしても構いません。そう"
"でなければ、ツールはサポートしていない content-type に対してエラーを発生させ"
"なければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:163
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Python <core-metadata-requires-python>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:"
"`Requires-Python <core-metadata-requires-python>`"

#: ../source/specifications/declaring-project-metadata.rst:166
msgid "The Python version requirements of the project."
msgstr "プロジェクトが要求する Python のバージョン。"

#: ../source/specifications/declaring-project-metadata.rst:176
msgid "TOML_ type: table"
msgstr "TOML_ 型: テーブル"

#: ../source/specifications/declaring-project-metadata.rst:177
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
"<core-metadata-license>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`License <core-metadata-license>`"

#: ../source/specifications/declaring-project-metadata.rst:180
msgid ""
"The table may have one of two keys. The ``file`` key has a string value that "
"is a file path relative to ``pyproject.toml`` to the file which contains the "
"license for the project. Tools MUST assume the file's encoding is UTF-8. The "
"``text`` key has a string value which is the license of the project.  These "
"keys are mutually exclusive, so a tool MUST raise an error if the metadata "
"specifies both keys."
msgstr ""
"テーブルには二つのキーのうちのいずれか一つを書くことができます。 ``file`` "
"キーは、 ``pyproject.toml`` からプロジェクトのライセンス情報を含むファイルへ"
"の相対パスを値とする文字列です。ツールの側では、そのファイルのエンコーディン"
"グが UTF-8 であるものと仮定しなければなりません。 ``text`` キーは、プロジェク"
"トのライセンス条項そのものである文字列を値に取ります。これらのキーは相互に排"
"他的で、従って、両方のキーが指定されているメタデータについてツールの側ではエ"
"ラーを発生させなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:195
msgid "``authors``/``maintainers``"
msgstr "``authors``/``maintainers``"

#: ../source/specifications/declaring-project-metadata.rst:197
msgid "TOML_ type: Array of inline tables with string keys and values"
msgstr "TOML_ 型: 文字列のキー・バリュー組を伴ったインラインテーブルの配列"

#: ../source/specifications/declaring-project-metadata.rst:198
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Author <core-"
"metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :ref:"
"`Maintainer <core-metadata-maintainer>`, and :ref:`Maintainer-email <core-"
"metadata-maintainer-email>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Author <core-metadata-author>` ・ :ref:`Author-email <core-metadata-author-"
"email>` ・ :ref:`Maintainer <core-metadata-maintainer>` ・ :ref:`Maintainer-"
"email <core-metadata-maintainer-email>`"

#: ../source/specifications/declaring-project-metadata.rst:204
msgid ""
"The people or organizations considered to be the \"authors\" of the project. "
"The exact meaning is open to interpretation — it may list the original or "
"primary authors, current maintainers, or owners of the package."
msgstr ""
"プロジェクトの \"作者\" であると考えられる人々ないし組織。正確な意味はさまざ"
"まに解釈可能です — 元々のまたは主要な作者でも構わないし、現在の保守者やパッ"
"ケージのオーナでも構いません。"

#: ../source/specifications/declaring-project-metadata.rst:209
msgid ""
"The \"maintainers\" key is similar to \"authors\" in that its exact meaning "
"is open to interpretation."
msgstr ""
"\"maintainers\" キーは \"authors\" キーに似ていて、その正確な意味はさまざまに"
"解釈可能です。"

#: ../source/specifications/declaring-project-metadata.rst:212
msgid ""
"These keys accept an array of tables with 2 keys: ``name`` and ``email``. "
"Both values must be strings. The ``name`` value MUST be a valid email name "
"(i.e. whatever can be put as a name, before an email, in :rfc:`822`) and not "
"contain commas. The ``email`` value MUST be a valid email address. Both keys "
"are optional, but at least one of the keys must be specified in the table."
msgstr ""
"これらのキーは、 ``name`` と ``email`` のふたつのキーを伴ったテーブルの配列を"
"受け入れます。両方の値は文字列でなければなりません。 ``name`` の値は、電子"
"メールアドレスにおける正当な名前 (すなわち、 :rfc:`822` における電子メールア"
"ドレスのアドレス部分に前置できる名前なら何でも可) で、コンマを含まないもので"
"なければなりません。 ``email`` の値は、正当な電子メールアドレスでなければなり"
"ません。これらのキーは共に必須ではありませんが、少なくともいずれかのキーが"
"テーブル内で指定されていなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:219
msgid ""
"Using the data to fill in :ref:`core metadata <core-metadata>` is as follows:"
msgstr ""
"データを使って :ref:`コアとなるメタデータ <core-metadata>` に書き込むやり方は"
"次の通りです:"

#: ../source/specifications/declaring-project-metadata.rst:222
msgid ""
"If only ``name`` is provided, the value goes in :ref:`Author <core-metadata-"
"author>` or :ref:`Maintainer <core-metadata-maintainer>` as appropriate."
msgstr ""
"``name`` だけが与えられた場合には、その値を :ref:`Author <core-metadata-"
"author>` なり :ref:`Maintainer <core-metadata-maintainer>` なりに書き込みま"
"す。"

#: ../source/specifications/declaring-project-metadata.rst:225
msgid ""
"If only ``email`` is provided, the value goes in :ref:`Author-email <core-"
"metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-"
"email>` as appropriate."
msgstr ""
"``email`` だけの場合には、その値を :ref:`Author-email <core-metadata-author-"
"email>` なり :ref:`Maintainer-email <core-metadata-maintainer-email>` なりに"
"書き込みます。"

#: ../source/specifications/declaring-project-metadata.rst:229
msgid ""
"If both ``email`` and ``name`` are provided, the value goes in :ref:`Author-"
"email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-"
"maintainer-email>` as appropriate, with the format ``{name} <{email}>``."
msgstr ""
"``email`` と ``name`` の両方が与えられた場合には、 ``{name} <{email}>`` の"
"フォーマットで :ref:`Author-email <core-metadata-author-email>` なり :ref:"
"`Maintainer-email <core-metadata-maintainer-email>` なりに書き込みます。"

#: ../source/specifications/declaring-project-metadata.rst:233
msgid "Multiple values should be separated by commas."
msgstr "複数の値がある場合はコンマで区切るべきです。"

#: ../source/specifications/declaring-project-metadata.rst:252
#: ../source/specifications/declaring-project-metadata.rst:266
msgid "TOML_ type: array of strings"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/declaring-project-metadata.rst:253
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Keywords "
"<core-metadata-keywords>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Keywords <core-metadata-keywords`"

#: ../source/specifications/declaring-project-metadata.rst:256
msgid "The keywords for the project."
msgstr "プロジェクトに関するキーワード。"

#: ../source/specifications/declaring-project-metadata.rst:267
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Classifier "
"<core-metadata-classifier>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Classifier <core-metadata-classifier>`"

#: ../source/specifications/declaring-project-metadata.rst:270
msgid "Trove classifiers which apply to the project."
msgstr "プロジェクトに適合する Trove 分類子。"

#: ../source/specifications/declaring-project-metadata.rst:282
msgid "TOML_ type: table with keys and values of strings"
msgstr "TOML_ 型: 文字列のキー・バリューを伴うテーブル"

#: ../source/specifications/declaring-project-metadata.rst:283
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Project-URL "
"<core-metadata-project-url>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Project-URL <core-metadata-project-url>`"

#: ../source/specifications/declaring-project-metadata.rst:286
msgid ""
"A table of URLs where the key is the URL label and the value is the URL "
"itself."
msgstr ""
"URL のテーブルで、 URL に付けられたラベルがキーで URL そのものが値になってい"
"るもの。"

#: ../source/specifications/declaring-project-metadata.rst:298
msgid "Entry points"
msgstr "エントリポイント"

#: ../source/specifications/declaring-project-metadata.rst:300
msgid ""
"TOML_ type: table (``[project.scripts]``, ``[project.gui-scripts]``, and "
"``[project.entry-points]``)"
msgstr ""
"TOML_ 型: table (``[project.scripts]`` ・ ``[project.gui-scripts]`` ・ "
"``[project.entry-points]``)"

#: ../source/specifications/declaring-project-metadata.rst:302
msgid ":ref:`Entry points specification <entry-points>`"
msgstr ":ref:`Entry points specification <entry-points>`"

#: ../source/specifications/declaring-project-metadata.rst:304
msgid ""
"There are three tables related to entry points. The ``[project.scripts]`` "
"table corresponds to the ``console_scripts`` group in the :ref:`entry points "
"specification <entry-points>`. The key of the table is the name of the entry "
"point and the value is the object reference."
msgstr ""
"みっつのテーブルがエントリポイントに関係しています。 ``[project.scripts]`` "
"テーブルは、 :ref:`エントリポイント仕様 <entry-points>` の中の "
"``console_scripts`` グループに対応しています。テーブル内のキーはエントリポイ"
"ントの名前であり、値は参照されるオブジェクトです。"

#: ../source/specifications/declaring-project-metadata.rst:310
msgid ""
"The ``[project.gui-scripts]`` table corresponds to the ``gui_scripts`` group "
"in the :ref:`entry points specification <entry-points>`. Its format is the "
"same as ``[project.scripts]``."
msgstr ""
"``[project.gui-scripts]`` テーブルは、 :ref:`エントリポイント仕様 <entry-"
"points>` の中の ``gui_scripts`` グループに対応します。そのフォーマットは "
"``[project.scripts]`` と同じです。"

#: ../source/specifications/declaring-project-metadata.rst:314
msgid ""
"The ``[project.entry-points]`` table is a collection of tables. Each sub-"
"table's name is an entry point group. The key and value semantics are the "
"same as ``[project.scripts]``. Users MUST NOT create nested sub-tables but "
"instead keep the entry point groups to only one level deep."
msgstr ""
"``[project.entry-points]`` テーブルは、テーブルの集合体です。それぞれのサブ"
"テーブルの名前は、ひとつのエントリポイントグループです。キーと値の意味すると"
"ころは ``[project.scripts]`` と同じです。ユーザはネストしたサブテーブルを作っ"
"てはならず、代わりにエントリポイントグループを１段階の深さに保つようにしなけ"
"ればなりません。"

#: ../source/specifications/declaring-project-metadata.rst:320
msgid ""
"Build back-ends MUST raise an error if the metadata defines a ``[project."
"entry-points.console_scripts]`` or ``[project.entry-points.gui_scripts]`` "
"table, as they would be ambiguous in the face of ``[project.scripts]`` and "
"``[project.gui-scripts]``, respectively."
msgstr ""
"メタデータの中に ``[project.entry-points.console_scripts]`` もしくは "
"``[project.entry-points.gui_scripts]`` というテーブルが定義されている場合は、"
"それぞれ ``[project.scripts]`` や ``[project.gui-scripts]`` と混同してしまう"
"といけないので、ビルド時のバックエンドがエラーを発生させなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:339
msgid "``dependencies``/``optional-dependencies``"
msgstr "``dependencies``/``optional-dependencies``"

#: ../source/specifications/declaring-project-metadata.rst:341
msgid ""
"TOML_ type: Array of :pep:`508` strings (``dependencies``), and a table with "
"values of arrays of :pep:`508` strings (``optional-dependencies``)"
msgstr ""
"TOML_ 型: :pep:`508` の文字列 (``dependencies``) の配列、および、 :pep:`508` "
"の文字列 (``optional-dependencies``) の配列の値を伴ったテーブル"

#: ../source/specifications/declaring-project-metadata.rst:344
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Dist <core-metadata-requires-dist>` and :ref:`Provides-Extra <core-metadata-"
"provides-extra>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Requires-Dist <core-metadata-requires-dist>` および :ref:`Provides-Extra "
"<core-metadata-provides-extra>`"

#: ../source/specifications/declaring-project-metadata.rst:348
msgid "The (optional) dependencies of the project."
msgstr "(必須ではない) プロジェクトの依存関係。"

#: ../source/specifications/declaring-project-metadata.rst:350
msgid ""
"For ``dependencies``, it is a key whose value is an array of strings. Each "
"string represents a dependency of the project and MUST be formatted as a "
"valid :pep:`508` string. Each string maps directly to a :ref:`Requires-Dist "
"<core-metadata-requires-dist>` entry."
msgstr ""
"``dependencies`` には、文字列の配列が値であるようなキーです。それぞれの文字列"
"がそのプロジェクトの依存関係を表現していて、正当な :pep:`508` の文字列として"
"フォーマットされていなければなりません。それぞれの文字列は、 :ref:`Requires-"
"Dist <core-metadata-requires-dist>` エントリに直接にマップしています。"

#: ../source/specifications/declaring-project-metadata.rst:355
msgid ""
"For ``optional-dependencies``, it is a table where each key specifies an "
"extra and whose value is an array of strings. The strings of the arrays must "
"be valid :pep:`508` strings. The keys MUST be valid values for :ref:"
"`Provides-Extra <core-metadata-provides-extra>`. Each value in the array "
"thus becomes a corresponding :ref:`Requires-Dist <core-metadata-requires-"
"dist>` entry for the matching :ref:`Provides-Extra <core-metadata-provides-"
"extra>` metadata."
msgstr ""
"``optional-dependencies`` は、それぞれのキーが追加物で、その値が文字列の配列"
"であるようなテーブルです。文字列の配列は正当な :pep:`508` の文字列でなければ"
"なりません。キーは :ref:`Provides-Extra <core-metadata-provides-extra>` とし"
"てみた時に正当な値でなければなりません。従って、配列の中のそれぞれの値は、一"
"致する :ref:`Provides-Extra <core-metadata-provides-extra>` メタデータに対応"
"する :ref:`Requires-Dist <core-metadata-requires-dist>` のエントリになりま"
"す。"

#: ../source/specifications/declaring-project-metadata.rst:384
msgid "TOML_ type: array of string"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/declaring-project-metadata.rst:385
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Dynamic "
"<core-metadata-dynamic>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`ダイ"
"ナミック <core-metadata-dynamic>` フィールド"

#: ../source/specifications/declaring-project-metadata.rst:388
msgid ""
"Specifies which keys listed by this PEP were intentionally unspecified so "
"another tool can/will provide such metadata dynamically. This clearly "
"delineates which metadata is purposefully unspecified and expected to stay "
"unspecified compared to being provided via tooling later on."
msgstr ""
"この PEP に列挙されたキーのどれを意図的に指定しないままにすることで他のツール"
"が動的にそのようなメタデータを準備することができる/しようとするかを規定しま"
"す。後述するツールによる設定に比較して、どのメタデータが目的を持って未指定に"
"されていて未指定のままであることを期待されているのかについて明確に描き出しま"
"す。"

#: ../source/specifications/declaring-project-metadata.rst:394
msgid ""
"A build back-end MUST honour statically-specified metadata (which means the "
"metadata did not list the key in ``dynamic``)."
msgstr ""
"ビルド用のバックエンドは、静的に指定されたメタデータ (つまり ``dynamic`` 内に"
"列挙されたキーではないメタデータ) を尊重しなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:396
msgid ""
"A build back-end MUST raise an error if the metadata specifies ``name`` in "
"``dynamic``."
msgstr ""
"メタデータで ``dynamic`` 内に ``name`` が指定されている場合には、ビルド用バッ"
"クエンドがエラーを発生させなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:398
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Required\", then the metadata MUST specify the key statically or list it "
"in ``dynamic`` (build back-ends MUST raise an error otherwise, i.e. it "
"should not be possible for a required key to not be listed somehow in the "
"``[project]`` table)."
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` の仕様において、あるキーが \"必須"
"である\" ものとして挙げられている場合には、メタデータはそのキーを静的に指定す"
"るか、または、 ``dynamic`` 内に指定するかしなければなりません (どちらでもない"
"場合にはビルドバックエンドがエラーを発生させなければなりません、すなわち、必"
"須のフィールドが ``[project]`` テーブルの中にどんな形でも存在していないという"
"ことは不可能であるべきです)。"

#: ../source/specifications/declaring-project-metadata.rst:403
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Optional\", the metadata MAY list it in ``dynamic`` if the expectation is "
"a build back-end will provide the data for the key later."
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` の仕様で、あるキーを \"必須ではな"
"い\" ものとして挙げている場合には、後でビルド用バックエンドがそのキー用のデー"
"タを提供するという期待が持てるのであればメタデータではそのキーを ``dynamic`` "
"の中に挙げても構いません。"

#: ../source/specifications/declaring-project-metadata.rst:407
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key "
"statically as well as being listed in ``dynamic``."
msgstr ""
"メタデータ内で、あるキーが静的に指定されていて、かつ、 ``dynamic`` にも挙げて"
"ある場合には、ビルド用バックエンドはエラーを発生させなければなりません。"

#: ../source/specifications/declaring-project-metadata.rst:409
msgid ""
"If the metadata does not list a key in ``dynamic``, then a build back-end "
"CANNOT fill in the requisite metadata on behalf of the user (i.e. "
"``dynamic`` is the only way to allow a tool to fill in metadata and the user "
"must opt into the filling in)."
msgstr ""
"メタデータ内で、あるキーを ``dynamic`` の中に挙げなかった場合は、ビルド用バッ"
"クエンドがユーザに代わって必要なメタデータを挿入することはできません (すなわ"
"ち、ツールがメタデータを挿入できるのは ``dynamic`` の中だけであり、かつ、ユー"
"ザがそうするようにオプトインしていなければならないということです) 。"

#: ../source/specifications/declaring-project-metadata.rst:413
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key in "
"``dynamic`` but the build back-end was unable to determine the data for it "
"(omitting the data, if determined to be the accurate value, is acceptable)."
msgstr ""
"あるキーが ``dynamic`` の中で指定されたメタデータで、しかし、ビルド用バックエ"
"ンドがそこに挿入するべきデータを決定することができない時は、ビルド用バックエ"
"ンドはエラーを発生させなければなりません (正確な値であると判断した場合はデー"
"タを省略することが許容されます) 。"

#: ../source/specifications/declaring-project-metadata.rst:424
msgid "Example"
msgstr "例"

#: ../source/specifications/dependency-specifiers.rst:5
msgid "Dependency specifiers"
msgstr "依存関係指定子"

#: ../source/specifications/dependency-specifiers.rst:7
msgid ""
"This document describes the dependency specifiers format as originally "
"specified in :pep:`508`."
msgstr ""
"元々は :pep:`508` で指定されていた依存関係指定子のフォーマットを、この説明文"
"書は記述します。"

#: ../source/specifications/dependency-specifiers.rst:10
msgid ""
"The job of a dependency is to enable tools like pip [#pip]_ to find the "
"right package to install. Sometimes this is very loose - just specifying a "
"name, and sometimes very specific - referring to a specific file to install. "
"Sometimes dependencies are only relevant in one platform, or only some "
"versions are acceptable, so the language permits describing all these cases."
msgstr ""
"依存関係 <dependency> の任務は、 pip [#pip]_ のようなツールがインストールする"
"べき正しいパッケージを探し出すことができるようにすることです。これは時には大"
"変に曖昧で名称を指定するだけであったり、別の時には非常に限定的でインストール"
"するべき特定のファイルを参照したりします。場合によっては、依存関係 "
"<dependency> がひとつのプラットフォームでのみ妥当であったり、いくつかのバー"
"ジョンだけが受け入れ可能であったりするので、(依存関係 <dependency> を記述す"
"る) 言語としてはこれらすべてのケースを記述できるものでなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:16
msgid ""
"The language defined is a compact line based format which is already in "
"widespread use in pip requirements files, though we do not specify the "
"command line option handling that those files permit. There is one caveat - "
"the URL reference form, specified in :pep:`440` is not actually implemented "
"in pip, but since :pep:`440` is accepted, we use that format rather than "
"pip's current native format."
msgstr ""
"定義された言語は、簡潔な行単位のフォーマットであって pip の requirements ファ"
"イルで既に広く使われているものですが、そのようなファイル群を書けるようなコマ"
"ンドラインオプションを指定することはしていません。ひとつ注意しなければならな"
"いのは、 :pep:`440` で指定されているような URL を参照するやり方は実は pip で"
"は実装されていないのに、 :pep:`440` が受け入れられている現状を鑑みて、今の "
"pip の本来のフォーマットよりもむしろそちらのフォーマットを使っているという点"
"です。"

#: ../source/specifications/dependency-specifiers.rst:29
msgid "All features of the language shown with a name based lookup::"
msgstr "この言語のすべての機能を、名前に基づいた参照とともに示します::"

#: ../source/specifications/dependency-specifiers.rst:33
msgid "A minimal URL based lookup::"
msgstr "最低限の URL に基づいた参照::"

#: ../source/specifications/dependency-specifiers.rst:38
msgid "Concepts"
msgstr "概念"

#: ../source/specifications/dependency-specifiers.rst:40
msgid ""
"A dependency specification always specifies a distribution name. It may "
"include extras, which expand the dependencies of the named distribution to "
"enable optional features. The version installed can be controlled using "
"version limits, or giving the URL to a specific artifact to install. Finally "
"the dependency can be made conditional using environment markers."
msgstr ""
"依存関係の指定では、常に、配布物の名前を指定します。名前で指定された配布物で"
"特定の追加機能を有効にするように依存関係を拡張するような追加物 <extra> を含ん"
"でいても構いません。インストールされたバージョンをバージョンリミットで制御す"
"ることもできますし、特定のアーティファクトをインストールするために URL を与え"
"ることもできます。依存関係は最終的に環境マーカを用いて条件別に作成することも"
"できます。"

#: ../source/specifications/dependency-specifiers.rst:47
msgid "Grammar"
msgstr "文法"

#: ../source/specifications/dependency-specifiers.rst:49
msgid ""
"We first cover the grammar briefly and then drill into the semantics of each "
"section later."
msgstr ""
"最初に文法について簡単に触れた後、それぞれの節の意味論 <semantics> について深"
"く掘り下げることにしましょう。"

#: ../source/specifications/dependency-specifiers.rst:52
msgid ""
"A distribution specification is written in ASCII text. We use a parsley "
"[#parsley]_ grammar to provide a precise grammar. It is expected that the "
"specification will be embedded into a larger system which offers framing "
"such as comments, multiple line support via continuations, or other such "
"features."
msgstr ""
"配布物の仕様は ASCII テキストで書かれています。厳密な文法としては parsley "
"[#parsley]_ の文法を使っています。この仕様は、コメントや継続による複数行サ"
"ポートやその他の機能の枠組みを与えるもっと大きなシステムの中に組み込まれるこ"
"とを期待しています。"

#: ../source/specifications/dependency-specifiers.rst:57
msgid ""
"The full grammar including annotations to build a useful parse tree is "
"included at the end of this document."
msgstr ""
"役に立つ構文解析ツリーを構成するための注釈機能を含む完全な文法は、この説明文"
"書の末尾に置きました。"

#: ../source/specifications/dependency-specifiers.rst:60
msgid ""
"Versions may be specified according to the :pep:`440` rules. (Note: URI is "
"defined in :rfc:`std-66 <3986>`)::"
msgstr ""
":pep:`440` の規則に従ってバージョンを指定しても構いません。(ノート: URI は :"
"rfc:`std-66 <3986>` で定義されています)::"

#: ../source/specifications/dependency-specifiers.rst:70
msgid ""
"Environment markers allow making a specification only take effect in some "
"environments::"
msgstr ""
"環境マーカを使うことで、ある仕様が特定の環境でのみ有効であることを示すことが"
"できます::"

#: ../source/specifications/dependency-specifiers.rst:99
msgid ""
"Optional components of a distribution may be specified using the extras "
"field::"
msgstr ""
"配布物のうちの必須ではない部分については extras フィールドを使って指定するこ"
"とができます::"

#: ../source/specifications/dependency-specifiers.rst:108
msgid "Restrictions on names for extras is defined in :pep:`685`."
msgstr "追加物の名前に対する制限事項は :pep:`685` で定義されています。"

#: ../source/specifications/dependency-specifiers.rst:110
msgid "Giving us a rule for name based requirements::"
msgstr "私たちに名前に基づいた要求仕様を与えてください::"

#: ../source/specifications/dependency-specifiers.rst:114
msgid "And a rule for direct reference specifications::"
msgstr "そして、直接参照に用いる要求仕様のための規則はこちら::"

#: ../source/specifications/dependency-specifiers.rst:118
msgid "Leading to the unified rule that can specify a dependency.::"
msgstr "依存関係を指定することができる統一規則への案内はこちら::"

#: ../source/specifications/dependency-specifiers.rst:123
msgid "Whitespace"
msgstr "空白文字 <Whitespace>"

#: ../source/specifications/dependency-specifiers.rst:125
msgid ""
"Non line-breaking whitespace is mostly optional with no semantic meaning. "
"The sole exception is detecting the end of a URL requirement."
msgstr ""
"行を分割するものではない空白文字には特に意味はなく、ほとんどの場合には必須で"
"はないものです。唯一の例外は、 URL による要求事項の末尾を検出するためのもので"
"す。"

#: ../source/specifications/dependency-specifiers.rst:129
msgid "Names"
msgstr "名前 <Names>"

#: ../source/specifications/dependency-specifiers.rst:131
msgid ""
"Python distribution names are currently defined in :pep:`345`. Names act as "
"the primary identifier for distributions. They are present in all dependency "
"specifications, and are sufficient to be a specification on their own. "
"However, PyPI places strict restrictions on names - they must match a case "
"insensitive regex or they won't be accepted. Accordingly, in this document "
"we limit the acceptable values for identifiers to that regex. A full "
"redefinition of name may take place in a future metadata PEP. The regex (run "
"with re.IGNORECASE) is::"
msgstr ""
"Python の配布物の名前は、現時点では :pep:`345` で定義されています。名前は配布"
"物の最も基本的な識別子として働きます。(名前は) あらゆる依存関係の指定に出現"
"し、それだけで十分に指定することができます。しかしながら、 PyPI では名前に厳"
"密な制約を課しています - 名前は大文字小文字を区別しない正規表現に合致しなけれ"
"ば受け入れられません。従って、この説明文書では、その正規表現に合致する識別子"
"だけを受け入れ可能な値として扱うことにしましょう。名前の完全な再定義はメタ"
"データ PEP として将来に出現するかもしれません。ここでいう (re.IGNORECASE とと"
"もに評価されるべき) 正規表現とは、次のようなものです::"

#: ../source/specifications/dependency-specifiers.rst:143
msgid "Extras"
msgstr "追加物 <Extras>"

#: ../source/specifications/dependency-specifiers.rst:145
msgid ""
"An extra is an optional part of a distribution. Distributions can specify as "
"many extras as they wish, and each extra results in the declaration of "
"additional dependencies of the distribution **when** the extra is used in a "
"dependency specification. For instance::"
msgstr ""
"追加物とは、配布物の必須ではない部分のことです。配布物では追加物を幾つでも指"
"定することができ、追加物が依存関係の指定場所で使われた **場合** には、それぞ"
"れの追加物が配布物の追加的な依存関係を宣言する結果になります。例えば::"

#: ../source/specifications/dependency-specifiers.rst:152
msgid ""
"Extras union in the dependencies they define with the dependencies of the "
"distribution they are attached to. The example above would result in "
"requests being installed, and requests own dependencies, and also any "
"dependencies that are listed in the \"security\" extra of requests."
msgstr ""
"追加物 <extras> の依存関係の合併とは、その追加物が添付されている配布物 "
"<distribution> の依存関係と一緒に定義されることです。上に示した例では、結果と"
"して requests がインストールされることになり、requests は自身の依存関係を持つ"
"ので requests の \"security\" 追加物 <extra> に列挙されたすべての依存関係 "
"(先) もインストールされることになります。"

#: ../source/specifications/dependency-specifiers.rst:157
msgid ""
"If multiple extras are listed, all the dependencies are unioned together."
msgstr ""
"複数の追加物 <extra> が列挙されている場合には、すべての依存関係の合併集合が依"
"存関係になります。"

#: ../source/specifications/dependency-specifiers.rst:160
msgid "Versions"
msgstr "バージョン指定子"

#: ../source/specifications/dependency-specifiers.rst:162
msgid ""
"See :pep:`440` for more detail on both version numbers and version "
"comparisons. Version specifications limit the versions of a distribution "
"that can be used. They only apply to distributions looked up by name, rather "
"than via a URL. Version comparison are also used in the markers feature. The "
"optional brackets around a version are present for compatibility with :pep:"
"`345` but should not be generated, only accepted."
msgstr ""
"バージョン番号やその比較方法について、詳しくは :pep:`440` をみてください。"
"バージョン仕様は、配布物のバージョンとして使うことができる範囲を定めていま"
"す。これは、名前によって参照される配布物にのみ適用されるのであって、URL を通"
"じて指定されるものには適用されません。バージョン番号の比較は、また、マーカー"
"機能においても使われます。バージョンの周囲にある必須でない括弧は :pep:`345` "
"との互換性を保つために存在していますが、そのようなものを生成すべきではなくて"
"受容するだけにとどめるべきです。"

#: ../source/specifications/dependency-specifiers.rst:170
msgid "Environment Markers"
msgstr "環境マーカ"

#: ../source/specifications/dependency-specifiers.rst:172
msgid ""
"Environment markers allow a dependency specification to provide a rule that "
"describes when the dependency should be used. For instance, consider a "
"package that needs argparse. In Python 2.7 argparse is always present. On "
"older Python versions it has to be installed as a dependency. This can be "
"expressed as so::"
msgstr ""
"環境マーカは、依存関係の指定においてその依存関係がいつ使われるべきであるかを"
"記述する規則を提供します。例えば、あるパッケージが argparse を必要とするとし"
"ましょう。Python 2.7 では argparse は常に存在します。もっと古いバージョンの "
"Python では依存関係としてインストールされなければなりません。これは次のように"
"表現することができます::"

#: ../source/specifications/dependency-specifiers.rst:179
msgid ""
"A marker expression evaluates to either True or False. When it evaluates to "
"False, the dependency specification should be ignored."
msgstr ""
"マーカ表現は評価されると真か偽に帰着します。偽と評価された場合には、その依存"
"関係の指定は無視されなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:182
msgid ""
"The marker language is inspired by Python itself, chosen for the ability to "
"safely evaluate it without running arbitrary code that could become a "
"security vulnerability. Markers were first standardised in :pep:`345`. This "
"document fixes some issues that were observed in the design described in :"
"pep:`426`."
msgstr ""
"マーカ言語は Python そのものに触発されたもので、セキュリティ上の脆弱性になり"
"かねない任意コードの実行を伴わずに安全に評価を行うことができるので選ばれまし"
"た。マーカは:pep:`345` で初めて標準化されました。この説明文書では、 :pep:"
"`426` に記述されたデザインに見られるいくつかの問題点を修正しています。"

#: ../source/specifications/dependency-specifiers.rst:187
msgid ""
"Comparisons in marker expressions are typed by the comparison operator.  The "
"<marker_op> operators that are not in <version_cmp> perform the same as they "
"do for strings in Python. The <version_cmp> operators use the :pep:`440` "
"version comparison rules when those are defined (that is when both sides "
"have a valid version specifier). If there is no defined :pep:`440` behaviour "
"and the operator exists in Python, then the operator falls back to the "
"Python behaviour. Otherwise an error should be raised. e.g. the following "
"will result in  errors::"
msgstr ""
"マーカ表現の比較は、比較の演算子によって分類されます。 <version_cmp> の中に"
"入っていない <marker_op> 演算子は、 Python における文字列でのそれと同様に動作"
"します。 <version_cmp> 演算子は、定義されている場合 (つまり両側に正当はバー"
"ジョン指定子を伴う場合) には、 :pep:`440` のバージョン比較規則を採用していま"
"す。演算子の動作が :pep:`440` で定義されておらず、かつ、その演算子が Python "
"に存在する場合には、当該演算子は Python での動作にフォールバックします。そう"
"でない場合にはエラーを発生させるべきです。例えば、次の表現はエラーを発生させ"
"る結果となるでしょう::"

#: ../source/specifications/dependency-specifiers.rst:199
msgid ""
"User supplied constants are always encoded as strings with either ``'`` or ``"
"\"`` quote marks. Note that backslash escapes are not defined, but existing "
"implementations do support them. They are not included in this specification "
"because they add complexity and there is no observable need for them today. "
"Similarly we do not define non-ASCII character support: all the runtime "
"variables we are referencing are expected to be ASCII-only."
msgstr ""
"ユーザ側から供給された定数は、常に ``'`` または ``\"`` なる引用記号を伴った文"
"字列として符号化されます。バックスラッシュによるエスケープは定義されていませ"
"んが、現存する実装ではサポートされているということを忘れないでください。この"
"仕様には (バックスラッシュエスケープは) 含まれていませんが、それは、複雑性を"
"増加させてしまうことと、現時点では目に見えるほどの必要性がないことが理由で"
"す。同様に、非 ASCII 文字のサポートも定義していません: 我々が参照するようなラ"
"ンタイムのすべての変数は、 ASCII 文字のみで構成されているものと期待されていま"
"す。"

#: ../source/specifications/dependency-specifiers.rst:206
msgid ""
"The variables in the marker grammar such as \"os_name\" resolve to values "
"looked up in the Python runtime. With the exception of \"extra\" all values "
"are defined on all Python versions today - it is an error in the "
"implementation of markers if a value is not defined."
msgstr ""
"\"os_name\" のようなマーカの文法内の変数は、 Python のランタイム内でルック"
"アップすることで値へと解決されます。 \"extra\" を例外として、すべての値は現在"
"のすべてのバージョンの Python で定義されています - もし値が定義されていなけれ"
"ば、それはマーカの実装のエラーです。"

#: ../source/specifications/dependency-specifiers.rst:211
msgid ""
"Unknown variables must raise an error rather than resulting in a comparison "
"that evaluates to True or False."
msgstr ""
"未知の変数は、評価して真 <True> か偽 <False> となる比較の結果を返すのではな"
"く、エラーを生成しなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:214
msgid ""
"Variables whose value cannot be calculated on a given Python implementation "
"should evaluate to ``0`` for versions, and an empty string for all other "
"variables."
msgstr ""
"特定の Python 実装で値を計算することができない変数は、バージョンについては "
"``0`` として、その他のすべての変数については空文字列として評価されるべきで"
"す。"

#: ../source/specifications/dependency-specifiers.rst:218
msgid ""
"The \"extra\" variable is special. It is used by wheels to signal which "
"specifications apply to a given extra in the wheel ``METADATA`` file, but "
"since the ``METADATA`` file is based on a draft version of :pep:`426`, there "
"is no current specification for this. Regardless, outside of a context where "
"this special handling is taking place, the \"extra\" variable should result "
"in an error like all other unknown variables."
msgstr ""
"\"extra\" 変数は、扱いが特別です。それは wheel ファイルにおいて、その wheel "
"の ``METADATA`` ファイル内の特定の追加物 <extra> にどの仕様を適用するべきであ"
"るかを知らせるために使われますが、 ``METADATA`` ファイルの様式が :pep:`426` "
"のドラフトバージョンに基づいているので、現時点ではその仕様が存在していないの"
"です。それにも関わらず、この特別な扱いが行われる場所ではない文脈においては、 "
"\"extra\" 変数はその他の未知の変数と同様にエラーに帰着するべきです。"

#: ../source/specifications/dependency-specifiers.rst:228
msgid "Marker"
msgstr "マーカ <Marker>"

#: ../source/specifications/dependency-specifiers.rst:229
msgid "Python equivalent"
msgstr "Python 同等物"

#: ../source/specifications/dependency-specifiers.rst:230
msgid "Sample values"
msgstr "値の例"

#: ../source/specifications/dependency-specifiers.rst:231
msgid "``os_name``"
msgstr "``OS の名称 <os_name>``"

#: ../source/specifications/dependency-specifiers.rst:232
msgid "``os.name``"
msgstr "``os.name``"

#: ../source/specifications/dependency-specifiers.rst:233
msgid "``posix``, ``java``"
msgstr "``posix``, ``java``"

#: ../source/specifications/dependency-specifiers.rst:234
msgid "``sys_platform``"
msgstr "``sys_platform``"

#: ../source/specifications/dependency-specifiers.rst:235
msgid "``sys.platform``"
msgstr "``sys.platform``"

#: ../source/specifications/dependency-specifiers.rst:236
msgid ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (note that \"linux\" is "
"from Python3 and \"linux2\" from Python2)"
msgstr ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (\"linux\" は Python3 か"
"ら、\"linux2\" は Python2 からであることに注意してください)"

#: ../source/specifications/dependency-specifiers.rst:238
msgid "``platform_machine``"
msgstr "``platform_machine``"

#: ../source/specifications/dependency-specifiers.rst:239
msgid "``platform.machine()``"
msgstr "``platform.machine()``"

#: ../source/specifications/dependency-specifiers.rst:240
msgid "``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/dependency-specifiers.rst:241
msgid "``platform_python_implementation``"
msgstr "``platform_python_implementation``"

#: ../source/specifications/dependency-specifiers.rst:242
msgid "``platform.python_implementation()``"
msgstr "``platform.python_implementation()``"

#: ../source/specifications/dependency-specifiers.rst:243
msgid "``CPython``, ``Jython``"
msgstr "``CPython``, ``Jython``"

#: ../source/specifications/dependency-specifiers.rst:244
msgid "``platform_release``"
msgstr "``platform_release``"

#: ../source/specifications/dependency-specifiers.rst:245
msgid "``platform.release()``"
msgstr "``platform.release()``"

#: ../source/specifications/dependency-specifiers.rst:246
msgid "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"
msgstr "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"

#: ../source/specifications/dependency-specifiers.rst:247
msgid "``platform_system``"
msgstr "``platform_system``"

#: ../source/specifications/dependency-specifiers.rst:248
msgid "``platform.system()``"
msgstr "``platform.system()``"

#: ../source/specifications/dependency-specifiers.rst:249
msgid "``Linux``, ``Windows``, ``Java``"
msgstr "``Linux``, ``Windows``, ``Java``"

#: ../source/specifications/dependency-specifiers.rst:250
msgid "``platform_version``"
msgstr "``platform_version``"

#: ../source/specifications/dependency-specifiers.rst:251
msgid "``platform.version()``"
msgstr "``platform.version()``"

#: ../source/specifications/dependency-specifiers.rst:252
msgid ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"
msgstr ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"

#: ../source/specifications/dependency-specifiers.rst:255
msgid "``python_version``"
msgstr "``python_version``"

#: ../source/specifications/dependency-specifiers.rst:256
msgid "``'.'.join(platform.python_version_tuple()[:2])``"
msgstr "``'.'.join(platform.python_version_tuple()[:2])``"

#: ../source/specifications/dependency-specifiers.rst:257
msgid "``3.4``, ``2.7``"
msgstr "``3.4``, ``2.7``"

#: ../source/specifications/dependency-specifiers.rst:258
msgid "``python_full_version``"
msgstr "``python_full_version``"

#: ../source/specifications/dependency-specifiers.rst:259
msgid "``platform.python_version()``"
msgstr "``platform.python_version()``"

#: ../source/specifications/dependency-specifiers.rst:260
#: ../source/specifications/dependency-specifiers.rst:266
msgid "``3.4.0``, ``3.5.0b1``"
msgstr "``3.4.0``, ``3.5.0b1``"

#: ../source/specifications/dependency-specifiers.rst:261
msgid "``implementation_name``"
msgstr "``implementation_name``"

#: ../source/specifications/dependency-specifiers.rst:262
msgid "``sys.implementation.name``"
msgstr "``sys.implementation.name``"

#: ../source/specifications/dependency-specifiers.rst:263
msgid "``cpython``"
msgstr "``cpython``"

#: ../source/specifications/dependency-specifiers.rst:264
msgid "``implementation_version``"
msgstr "``implementation_version``"

#: ../source/specifications/dependency-specifiers.rst:265
msgid "see definition below"
msgstr "下方の定義を見てください"

#: ../source/specifications/dependency-specifiers.rst:267
msgid "``extra``"
msgstr "``extra``"

#: ../source/specifications/dependency-specifiers.rst:268
msgid ""
"An error except when defined by the context interpreting the specification."
msgstr "仕様を通訳する文脈で定義された場合を除くエラー。"

#: ../source/specifications/dependency-specifiers.rst:270
msgid "``test``"
msgstr "``test``"

#: ../source/specifications/dependency-specifiers.rst:272
msgid ""
"The ``implementation_version`` marker variable is derived from ``sys."
"implementation.version``::"
msgstr ""
"マーカ変数の ``implementation_version`` は、 ``sys.implementation.version`` "
"から派生したものです ::"

#: ../source/specifications/dependency-specifiers.rst:287
msgid ""
"This environment markers section, initially defined through :pep:`508`, "
"supersedes the environment markers section in :pep:`345`."
msgstr ""
"この環境マーカの節は、当初は :pep:`508` を通して定義されましたが、 :pep:"
"`345` における環境マーカの節を置き換えます。"

#: ../source/specifications/dependency-specifiers.rst:291
msgid "Complete Grammar"
msgstr "完全な文法"

#: ../source/specifications/dependency-specifiers.rst:293
msgid "The complete parsley grammar::"
msgstr "完全な parsley 文法::"

#: ../source/specifications/dependency-specifiers.rst:400
msgid "A test program - if the grammar is in a string ``grammar``::"
msgstr "テストプログラム - もし ``grammar`` 文字列内に文法があれば::"

#: ../source/specifications/dependency-specifiers.rst:467
msgid "Summary of changes to PEP 508"
msgstr "PEP 508 に対する変更の要旨"

#: ../source/specifications/dependency-specifiers.rst:469
msgid ""
"The following changes were made based on feedback after its initial "
"implementation:"
msgstr ""
"以降の変更は、最初の実装 (ができた) 後に寄せられたフィードバックに基づくもの"
"です:"

#: ../source/specifications/dependency-specifiers.rst:472
msgid ""
"The definition of ``python_version`` was changed from ``platform."
"python_version()[:3]`` to ``'.'.join(platform.python_version_tuple()[:2])``, "
"to accommodate potential future versions of Python with 2-digit major and "
"minor versions (e.g. 3.10). [#future_versions]_"
msgstr ""
"``python_version`` の定義は、 Python の将来のバージョンが二桁のメジャーバー"
"ジョンやマイナーバージョンを持つ場合 (例えば 3.10) でもそれを収容できるよう"
"に、 ``platform.python_version()[:3]`` から ``'.'.join(platform."
"python_version_tuple()[:2])`` へと変更されました。 [#future_versions]_"

#: ../source/specifications/dependency-specifiers.rst:482
msgid ""
"pip, the recommended installer for Python packages (http://pip.readthedocs."
"org/en/stable/)"
msgstr ""
"Python のパッケージをインストールする際に推奨されるツールである pip (http://"
"pip.readthedocs.org/en/stable/)"

#: ../source/specifications/dependency-specifiers.rst:485
msgid "The parsley PEG library. (https://pypi.python.org/pypi/parsley/)"
msgstr "parsley PEG ライブラリ。 (https://pypi.python.org/pypi/parsley/)"

#: ../source/specifications/dependency-specifiers.rst:488
msgid ""
"Future Python versions might be problematic with the definition of "
"Environment Marker Variable ``python_version`` (https://github.com/python/"
"peps/issues/560)"
msgstr ""
"Python の将来のバージョンでは、環境マーカ変数の ``python_version`` の定義が問"
"題をはらむかもしれません。 (https://github.com/python/peps/issues/560)"

#: ../source/specifications/direct-url.rst:6
msgid "Recording the Direct URL Origin of installed distributions"
msgstr "インストールされた配布物の配布元へ直接アクセスする URL を記録する"

#: ../source/specifications/direct-url.rst:8
msgid ""
"This document specifies a :file:`direct_url.json` file in the ``*.dist-"
"info`` directory of an installed distribution, to record the Direct URL "
"Origin of the distribution. The general structure and usage of ``*.dist-"
"info`` directories is described in :ref:`recording-installed-packages`."
msgstr ""
"この説明文書では、インストール済みの配布物の `*.dist-info` ディレクトリにあ"
"る :file:`direct_url.json` ファイルによって配布物の配布元へ直接アクセスする "
"URL を記録する方法を指定します。 ``*.dist-info`` ディレクトリの一般的な構造と"
"使用方法は、 :ref:`インストール済みパッケージを記録する <recording-installed-"
"packages>` に記述されています。"

#: ../source/specifications/direct-url.rst:19
msgid ""
"The :file:`direct_url.json` file MUST be created in the :file:`*.dist-info` "
"directory by installers when installing a distribution from a requirement "
"specifying a direct URL reference (including a VCS URL)."
msgstr ""
":file:`direct_url.json` ファイルは、要求事項が指定するダイレクト (VCS の URL "
"を含む) 参照 URL からインストールしている時に、インストーラによって :file:`*."
"dist-info` ディレクトリに生成されなければなりません。"

#: ../source/specifications/direct-url.rst:23
#: ../source/specifications/recording-installed-packages.rst:222
msgid ""
"This file MUST NOT be created when installing a distribution from an other "
"type of requirement (i.e. name plus version specifier)."
msgstr ""
"他のタイプの要求事項 (すなわち、名前とバージョン指定子) から配布物をインス"
"トールする際には、このファイルを生成してはなりません。"

#: ../source/specifications/direct-url.rst:26
msgid ""
"This JSON file MUST be a UTF-8 encoded, :rfc:`8259` compliant, serialization "
"of the :doc:`direct-url-data-structure`."
msgstr ""
"この JSON ファイルは、 :rfc:`8259` に準拠するように UTF-8 で符号化されていな"
"ければならず、シリアル化の方法は :doc:`direct-url-data-structure` でなければ"
"なりません。"

#: ../source/specifications/direct-url.rst:31
msgid ""
"When the requested URL has the file:// scheme and points to a local "
"directory that happens to contain a VCS checkout, installers MUST NOT "
"attempt to infer any VCS information and therefore MUST NOT output any VCS "
"related information (such as ``vcs_info``) in :file:`direct_url.json`."
msgstr ""
"要求された URL が file:// スキームであって VCS からチェックアウトしたものを含"
"むローカルディレクトリを指し示している場合には、インストーラはいかなる VCS 情"
"報をも推定してはならず、従って、いかなる (``vcs_info`` のような) VCS 関連情報"
"をも :file:`direct_url.json` に出力してはなりません。"

#: ../source/specifications/direct-url.rst:38
msgid ""
"As a general rule, installers should as much as possible preserve the "
"information that was provided in the requested URL when generating :file:"
"`direct_url.json`. For example user:password environment variables should be "
"preserved and ``requested_revision`` should reflect the revision that was "
"provided in the requested URL as faithfully as possible. This information is "
"however *enriched* with more precise data, such as ``commit_id``."
msgstr ""
"一般的な規則として、 :file:`direct_url.json` を生成する際には、インストーラは"
"可能な限り要求された URL に含まれる情報を保存するべきです。例えば、 user:"
"password を環境変数から読み込むなら環境変数を参照するような URL として保存さ"
"れるべきであり、 ``requested_revision`` は要求された URL の中に出現するものを"
"極力そのまま反映するべきです。しかしながら、この情報は (``commit_id`` のよう"
"な) もっと精密なデータを使って *精製* されます。"

#: ../source/specifications/direct-url.rst:47
msgid "Example pip commands and their effect on direct_url.json"
msgstr "pip コマンドの例と direct_url.json に与える影響"

#: ../source/specifications/direct-url.rst:49
msgid "Commands that generate a ``direct_url.json``:"
msgstr "``direct_url.json`` を生成するコマンド:"

#: ../source/specifications/direct-url.rst:51
msgid "``pip install https://example.com/app-1.0.tgz``"
msgstr ""

#: ../source/specifications/direct-url.rst:52
msgid "``pip install https://example.com/app-1.0.whl``"
msgstr ""

#: ../source/specifications/direct-url.rst:53
msgid ""
"``pip install \"app @ git+https://example.com/repo/app.git#subdirectory=setup"
"\"``"
msgstr ""
"``pip install \"app @ git+https://example.com/repo/app.git#subdirectory=setup"
"\"``"

#: ../source/specifications/direct-url.rst:54
msgid "``pip install ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:55
msgid "``pip install file:///home/user/app``"
msgstr ""

#: ../source/specifications/direct-url.rst:56
msgid ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (in which case, ``url`` will be the local "
"directory where the git repository has been cloned to, and ``dir_info`` will "
"be present with ``\"editable\": true`` and no ``vcs_info`` will be set)"
msgstr ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (この場合、 ``url`` は git リポジトリのクローン先"
"のローカルディレクトリになり、 ``dir_info`` は ``\"editable\": true`` という"
"形で存在し、 ``vcs_info`` は設定されないということになるでしょう)"

#: ../source/specifications/direct-url.rst:60
msgid "``pip install -e ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:62
msgid "Commands that *do not* generate a ``direct_url.json``"
msgstr "``direct_url.json`` を *生成しない* コマンド"

#: ../source/specifications/direct-url.rst:64
msgid "``pip install app``"
msgstr ""

#: ../source/specifications/direct-url.rst:65
msgid "``pip install app --no-index --find-links https://example.com/``"
msgstr ""

#: ../source/specifications/direct-url.rst:68
#: ../source/specifications/direct-url-data-structure.rst:285
msgid "History"
msgstr "歴史"

#: ../source/specifications/direct-url.rst:70
msgid ""
"March 2020: the ``direct_url.json`` metadata file was originally specified "
"in :pep:`610` and is formally documented here."
msgstr ""
"2020年3月: ``direct_url.json`` メタデータファイルは、当初は :pep:`610` で仕様"
"を指定されていましたが、ここで正式に文書化されました。"

#: ../source/specifications/direct-url-data-structure.rst:6
msgid "Direct URL Data Structure"
msgstr "ダイレクト URL データ構造 <Direct URL Data Structure>"

#: ../source/specifications/direct-url-data-structure.rst:8
msgid ""
"This document specifies a JSON-serializable abstract data structure that can "
"represent URLs to python projects and distribution artifacts such as VCS "
"source trees, local source trees, source distributions and wheels."
msgstr ""
"この説明文書では、python プロジェクトや VCS 上のソースツリーやローカルのソー"
"スツリーやソースコード配布物や wheel ファイルのような配布物アーティファクトに"
"対してURLを表現することを可能とする、 JSON のシリアル化抽象データ構造の仕様を"
"定義します。"

#: ../source/specifications/direct-url-data-structure.rst:12
msgid ""
"The representation of the components of this data structure as a :rfc:`1738` "
"URL is not formally specified at time of writing. A common representation is "
"the pip URL format. Other examples are provided in :pep:`440`."
msgstr ""
"この :roc:`1738` URL としてのデータ構造の部分の表現方法は、本所執筆時点では、"
"公式に指定されていません。よくある表現方法は pip での URL フォーマットです。"
"他の例が :pep:`440` で提供されています。"

#: ../source/specifications/direct-url-data-structure.rst:22
msgid ""
"The Direct URL Data Structure MUST be a dictionary, serializable to JSON "
"according to :rfc:`8259`."
msgstr ""
"直接 URL データ構造は辞書でなければならず、 :rfc:`8259` に従って JSON にシリ"
"アライズできなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:25
msgid ""
"It MUST contain at least two fields. The first one is ``url``, with type "
"``string``. Depending on what ``url`` refers to, the second field MUST be "
"one of ``vcs_info`` (if ``url`` is a VCS reference), ``archive_info`` (if "
"``url`` is a source archives or a wheel), or ``dir_info`` (if ``url``  is a "
"local directory). These info fields have a (possibly empty) subdictionary as "
"value, with the possible keys defined below."
msgstr ""
"それは少なくともふたつのフィールドを含んでいなければなりません。第１のフィー"
"ルドは ``string`` 型の ``url`` です。 ``url`` が何を参照しているかによって、"
"第２のフィールドは、 (``url`` が VCS への参照であるなら) ``vcs_info`` である"
"か、 (``url`` がソースコードのアーカイブまたは wheel を参照しているなら) "
"``archive_info`` であるか、または、 (``url`` がローカルのディレクトリを参照し"
"ているなら) ``dir_info`` であるかのうちのひとつでなければなりません。これらの"
"情報フィールドは、 (空であることも可能ですが) 以下に定義するような取り得る"
"キーを持った下位の辞書を値に取ります。"

#: ../source/specifications/direct-url-data-structure.rst:32
msgid ""
"When persisted, ``url`` MUST be stripped of any sensitive authentication "
"information, for security reasons."
msgstr ""
"固持する場合には、``url`` は、セキュリティ上の理由から、機微に関わる認証情報"
"をすべて削除しておかなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:35
msgid ""
"The user:password section of the URL MAY however be composed of environment "
"variables, matching the following regular expression::"
msgstr ""
"しかしながら、次に述べる正規表現に合致する形で URL の user:password の部分を"
"環境変数から構成しても構いません::"

#: ../source/specifications/direct-url-data-structure.rst:41
msgid ""
"Additionally, the user:password section of the URL MAY be a well-known, non "
"security sensitive string. A typical example is ``git`` in the case of an "
"URL such as ``ssh://git@gitlab.com/user/repo``."
msgstr ""
"さらに、 URL の user:password 部分は、広く知られたセキュリティ的に問題のない"
"文字列であっても構いません。典型的な例としては、 ``ssh://git@gitlab.com/user/"
"repo`` のような URL における ``git`` を挙げることができます。"

#: ../source/specifications/direct-url-data-structure.rst:46
msgid "VCS URLs"
msgstr "VCS URL群"

#: ../source/specifications/direct-url-data-structure.rst:48
msgid ""
"When ``url`` refers to a VCS repository, the ``vcs_info`` key MUST be "
"present as a dictionary with the following keys:"
msgstr ""
"``url`` が VCS リポジトリを参照している場合、 以下のキー群を伴った "
"``vcs_info`` キーが辞書に存在していなければなりません:"

#: ../source/specifications/direct-url-data-structure.rst:51
msgid ""
"A ``vcs`` key (type ``string``) MUST be present, containing the name of the "
"VCS (i.e. one of ``git``, ``hg``, ``bzr``, ``svn``). Other VCS's SHOULD be "
"registered by writing a PEP to amend this specification. The ``url`` value "
"MUST be compatible with the corresponding VCS, so an installer can hand it "
"off without transformation to a checkout/download command of the VCS."
msgstr ""
"(``git`` ・ ``hg`` ・ ``bzr`` ・ ``svn`` のいずれかのような) VCS の名前を含ん"
"だ ``vcs`` キー (``string`` 型) が存在していなければなりません。その他の VCS "
"については、この仕様を修正するための PEP を書くことによって登録されるべきで"
"す。当該 VCS の checkout/download コマンドへの翻訳をしなくてもインストーラが "
"手を離してしまえるようにするために、 ``url`` の値は対応する VCS と齟齬のない"
"ものでなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:57
msgid ""
"A ``requested_revision`` key (type ``string``) MAY be present naming a "
"branch/tag/ref/commit/revision/etc (in a format compatible with the VCS)."
msgstr ""
"``requested_revision`` キー (``string`` 型) は、ブランチ・タグ・リファレン"
"ス・コミット・リビジョンその他を指定するために存在していても構いません (VCS "
"と互換性を持つフォーマットにて)。"

#: ../source/specifications/direct-url-data-structure.rst:59
msgid ""
"A ``commit_id`` key (type ``string``) MUST be present, containing the exact "
"commit/revision number that was/is to be installed. If the VCS supports "
"commit-hash based revision identifiers, such commit-hash MUST be used as "
"``commit_id`` in order to reference an immutable version of the source code."
msgstr ""
"``commit_id`` キー (``string`` 型) は、正確にどのコミットまたはリビジョンがイ"
"ンストールされた/されるかを示すもので、必須のキーです。 VCS がリビジョン識別"
"子に基づくコミットハッシュをサポートしているなら、インストールされたものの"
"ソースコードの不変のバージョンを指し示す目的で、そのようなコミットハッシュを "
"``commit_id`` として使わなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:67
msgid "Archive URLs"
msgstr "アーカイブ URL 群"

#: ../source/specifications/direct-url-data-structure.rst:69
msgid ""
"When ``url`` refers to a source archive or a wheel, the ``archive_info`` key "
"MUST be present as a dictionary with the following keys:"
msgstr ""
"``url`` がソースコードのアーカイブや wheel ファイルを指し示す場合には、 "
"``archive_info`` キーが次のようなキーを持つ辞書の形で存在しなければなりませ"
"ん:"

#: ../source/specifications/direct-url-data-structure.rst:72
msgid ""
"A ``hashes`` key SHOULD be present as a dictionary mapping a hash name to a "
"hex encoded digest of the file."
msgstr ""
"``hashes`` キーは、ハッシュ名から16進数表記のファイルハッシュ値への対応を保持"
"する辞書として存在するべきです。"

#: ../source/specifications/direct-url-data-structure.rst:75
msgid ""
"Multiple hashes can be included, and it is up to the consumer to decide what "
"to do with multiple hashes (it may validate all of them or a subset of them, "
"or nothing at all)."
msgstr ""
"複数のハッシュ値を含めることが可能で、そのような複数のハッシュ値を使って何を"
"するか (すべてのハッシュ値を検証しても一部だけを検証しても構いませんし、何も"
"しなくても構いません) については利用する側次第です。"

#: ../source/specifications/direct-url-data-structure.rst:79
msgid "These hash names SHOULD always be normalized to be lowercase."
msgstr "これらのハッシュの名前は、常に小文字に正規化されているべきです。"

#: ../source/specifications/direct-url-data-structure.rst:81
msgid ""
"Any hash algorithm available via ``hashlib`` (specifically any that can be "
"passed to ``hashlib.new()`` and do not require additional parameters) can be "
"used as a key for the hashes dictionary. At least one secure algorithm from "
"``hashlib.algorithms_guaranteed`` SHOULD always be included. At time of "
"writing, ``sha256`` specifically is recommended."
msgstr ""
"``hash lib`` 経由で利用可能なハッシュアルゴリズム (とりわけ、 ``hashlib."
"new()`` に渡すことができて、かつ、追加的なパラメータを必要としないもの) はど"
"れでも、ハッシュ値を格納する辞書のキーとして用いることができます。 ``hashlib."
"algorithms_garanteed`` から安全なアルゴリズムを少なくともひとつ選択して (訳"
"注、ハッシュ値格納用辞書に) 含めるべきです。執筆時点では、 ``sha256`` が特に"
"推奨されています。"

#: ../source/specifications/direct-url-data-structure.rst:87
msgid ""
"A deprecated ``hash`` key (type ``string``) MAY be present for backwards "
"compatibility purposes, with value ``<hash-algorithm>=<expected-hash>``."
msgstr ""
"非推奨となった ``hash`` キー (``string`` 型) は、後方互換性を保つ目的でなら "
"``<hash-algorithm>=<expected-hash>`` を値に取る形で存在していても構いません。"

#: ../source/specifications/direct-url-data-structure.rst:90
msgid ""
"Producers of the data structure SHOULD emit the ``hashes`` key whether one "
"or multiple hashes are available. Producers SHOULD continue to emit the "
"``hash`` key in contexts where they did so before, so as to keep backwards "
"compatibility for existing clients."
msgstr ""
"データ構造を生成する側では、ひとつまたは複数のハッシュが利用できるなら "
"``hashes`` キーを生成するべきです。以前からそうしていたので既存のクライアント"
"のために後方互換性を保つためなら、生成側は ``hash`` キーの生成を継続するべき"
"です。"

#: ../source/specifications/direct-url-data-structure.rst:94
msgid ""
"When both the ``hash`` and ``hashes`` keys are present, the hash represented "
"in the ``hash`` key MUST also be present in the ``hashes`` dictionary, so "
"consumers can consider the ``hashes`` key only if it is present, and fall "
"back to ``hash`` otherwise."
msgstr ""
"``hash`` と ``hashes`` の両方のキーが存在する時は、 ``hash`` キーの中に現れる"
"ハッシュは、 ``hashes`` の辞書の中にも存在しなければならず、そうすることで利"
"用する側では ``hashes`` キーがあればそれだけを考慮し、なければ ``hash`` に"
"フォールバックすることが可能になります。"

#: ../source/specifications/direct-url-data-structure.rst:99
msgid "Local directories"
msgstr "ローカルディレクトリ"

#: ../source/specifications/direct-url-data-structure.rst:101
msgid ""
"When ``url`` refers to a local directory, the ``dir_info`` key MUST be "
"present as a dictionary with the following key:"
msgstr ""
"``url`` がローカルのディレクトリを参照している場合には、以下のキーを含む辞書"
"として ``dir_info`` キーが存在していなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:104
msgid ""
"``editable`` (type: ``boolean``): ``true`` if the distribution was/is to be "
"installed in editable mode, ``false`` otherwise. If absent, default to "
"``false``."
msgstr ""
"配布物が編集可能モードでインストールされた/される場合には ``editable`` "
"(``boolean`` 型): ``true`` 、そうでなければ ``false`` 。存在していない場合の"
"デフォルトは ``false`` です。"

#: ../source/specifications/direct-url-data-structure.rst:107
msgid ""
"When ``url`` refers to a local directory, it MUST have the ``file`` scheme "
"and be compliant with :rfc:`8089`. In particular, the path component must be "
"absolute. Symbolic links SHOULD be preserved when making relative paths "
"absolute."
msgstr ""
"``url`` がローカルのディレクトリを参照している場合、 :rfc:``8089` に適合する "
"``file`` スキームが存在していなければなりません。特にパス部分は絶対パスでなけ"
"ればなりません。相対パスを絶対パスに変換する際には、シンボリックリンクはその"
"まま保存されているべきです。"

#: ../source/specifications/direct-url-data-structure.rst:113
msgid "Projects in subdirectories"
msgstr "サブディレクトリ内のプロジェクト群"

#: ../source/specifications/direct-url-data-structure.rst:115
msgid ""
"A top-level ``subdirectory`` field MAY be present containing a directory "
"path, relative to the root of the VCS repository, source archive or local "
"directory, to specify where ``pyproject.toml`` or ``setup.py`` is located."
msgstr ""
"トップレベルの ``subdirectory`` フィールドは、 ``pyproject.toml`` または "
"``setup.py`` が存在する場所を指定するために、 VCS リポジトリやソースコードの"
"アーカイブやローカルのディレクトリのルートディレクトリに対する相対パスとして"
"示したディレクトリパスを値とするものとして存在することが許されています。"

#: ../source/specifications/direct-url-data-structure.rst:120
msgid "Registered VCS"
msgstr "登録済みの VCS"

#: ../source/specifications/direct-url-data-structure.rst:122
msgid ""
"This section lists the registered VCS's; expanded, VCS-specific information "
"on how to use the ``vcs``, ``requested_revision``, and other fields of "
"``vcs_info``; and in some cases additional VCS-specific fields. Tools MAY "
"support other VCS's although it is RECOMMENDED to register them by writing a "
"PEP to amend this specification. The ``vcs`` field SHOULD be the command "
"name (lowercased). Additional fields that would be necessary to support such "
"VCS SHOULD be prefixed with the VCS command name."
msgstr ""
"この節では登録済み VCS; ``vcs`` や ``requested_revision`` やその他の "
"``vcs_info`` 内のフィールドや、さらにある場合には特定の VCS に特有のフィール"
"ドなどの使い方のような拡張された VCS 特有の情報 の一覧を示します。 PEP を書く"
"ことでこの仕様を修正する形で別の VCS を登録することが推奨されていますが、ツー"
"ルの側で他の VCS を (訳注、VCS 登録作業抜きで) サポートしても構いません。 "
"``vcs`` フィールドの値は、 (小文字の) コマンド名であるべきです。当該 VCS をサ"
"ポートするのに必要であると思われるその他のフィールドについては、当該 VCS のコ"
"マンド名で始まる名前にするべきです。"

#: ../source/specifications/direct-url-data-structure.rst:132
msgid "Git"
msgstr "Git"

#: ../source/specifications/direct-url-data-structure.rst:134
#: ../source/specifications/direct-url-data-structure.rst:166
#: ../source/specifications/direct-url-data-structure.rst:189
#: ../source/specifications/direct-url-data-structure.rst:212
msgid "Home page"
msgstr "ホームページ"

#: ../source/specifications/direct-url-data-structure.rst:136
msgid "https://git-scm.com/"
msgstr "https://git-scm.com/"

#: ../source/specifications/direct-url-data-structure.rst:138
#: ../source/specifications/direct-url-data-structure.rst:170
#: ../source/specifications/direct-url-data-structure.rst:193
#: ../source/specifications/direct-url-data-structure.rst:216
msgid "vcs command"
msgstr "vcs コマンド"

#: ../source/specifications/direct-url-data-structure.rst:140
#: ../source/specifications/direct-url-data-structure.rst:144
msgid "git"
msgstr "git"

#: ../source/specifications/direct-url-data-structure.rst:142
#: ../source/specifications/direct-url-data-structure.rst:174
#: ../source/specifications/direct-url-data-structure.rst:197
#: ../source/specifications/direct-url-data-structure.rst:220
msgid "``vcs`` field"
msgstr "``vcs`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:146
#: ../source/specifications/direct-url-data-structure.rst:178
#: ../source/specifications/direct-url-data-structure.rst:201
#: ../source/specifications/direct-url-data-structure.rst:224
msgid "``requested_revision`` field"
msgstr "``requested_revision`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:148
msgid ""
"A tag name, branch name, Git ref, commit hash, shortened commit hash, or "
"other commit-ish."
msgstr ""
"タグ名・ブランチ名・Git 参照・コミットハッシュ・短縮型コミットハッシュ・その"
"他のコミットハッシュ的なもの。"

#: ../source/specifications/direct-url-data-structure.rst:151
#: ../source/specifications/direct-url-data-structure.rst:182
#: ../source/specifications/direct-url-data-structure.rst:205
#: ../source/specifications/direct-url-data-structure.rst:229
msgid "``commit_id`` field"
msgstr "``commit_id`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:153
msgid "A commit hash (40 hexadecimal characters sha1)."
msgstr "コミットハッシュ (16進数で40文字のSHA1)。"

#: ../source/specifications/direct-url-data-structure.rst:157
msgid ""
"Tools can use the ``git show-ref`` and ``git symbolic-ref`` commands to "
"determine if the ``requested_revision`` corresponds to a Git ref. In turn, a "
"ref beginning with ``refs/tags/`` corresponds to a tag, and a ref beginning "
"with ``refs/remotes/origin/`` after cloning corresponds to a branch."
msgstr ""
"ツールは、 ``requested_revision`` が Git 参照に対応しているか否かを判断するた"
"めに ``git show-ref`` や ``git symbolic-ref`` コマンドを使うことができます。"
"さらに、 ``refs/tags/`` で始まる参照はタグに対応し、クローンした後に ``refs/"
"remotes/origin/`` で始まる参照はブランチに対応します。"

#: ../source/specifications/direct-url-data-structure.rst:164
msgid "Mercurial"
msgstr "Mercurial"

#: ../source/specifications/direct-url-data-structure.rst:168
msgid "https://www.mercurial-scm.org/"
msgstr "https://www.mercurial-scm.org/"

#: ../source/specifications/direct-url-data-structure.rst:172
#: ../source/specifications/direct-url-data-structure.rst:176
msgid "hg"
msgstr "hg"

#: ../source/specifications/direct-url-data-structure.rst:180
msgid "A tag name, branch name, changeset ID, shortened changeset ID."
msgstr "タグ名・ブランチ名・チェンジセット ID ・短縮型チェンジセット ID。"

#: ../source/specifications/direct-url-data-structure.rst:184
msgid "A changeset ID (40 hexadecimal characters)."
msgstr "チェンジセット ID (16 進数で 40 文字)。"

#: ../source/specifications/direct-url-data-structure.rst:187
msgid "Bazaar"
msgstr "Bazaar"

#: ../source/specifications/direct-url-data-structure.rst:191
msgid "_`https://bazaar.canonical.com` *(Not responding as of 5/2023)*"
msgstr "_`https://bazaar.canonical.com` *(2023年5月時点で応答しません)*"

#: ../source/specifications/direct-url-data-structure.rst:195
#: ../source/specifications/direct-url-data-structure.rst:199
msgid "bzr"
msgstr "bzr"

#: ../source/specifications/direct-url-data-structure.rst:203
msgid "A tag name, branch name, revision id."
msgstr "タグ名・ブランチ名・リビジョン id 。"

#: ../source/specifications/direct-url-data-structure.rst:207
msgid "A revision id."
msgstr "リビジョン id 。"

#: ../source/specifications/direct-url-data-structure.rst:210
msgid "Subversion"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:214
msgid "https://subversion.apache.org/"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:218
#: ../source/specifications/direct-url-data-structure.rst:222
msgid "svn"
msgstr "svn"

#: ../source/specifications/direct-url-data-structure.rst:226
msgid ""
"``requested_revision`` must be compatible with ``svn checkout`` ``--"
"revision`` option. In Subversion, branch or tag is part of ``url``."
msgstr ""
"``requested_revision`` は、 ``svn checkout`` ``--revision`` オプションと互換"
"でなければなりません。 Subversion では、ブランチまたはタグは ``url`` の一部で"
"す。"

#: ../source/specifications/direct-url-data-structure.rst:231
msgid ""
"Since Subversion does not support globally unique identifiers, this field is "
"the Subversion revision number in the corresponding repository."
msgstr ""
"Subversion は大域的にユニークな識別子をサポートしていないので、このフィールド"
"は当該リポジトリにおける Subversion のリビジョン番号です。"

#: ../source/specifications/direct-url-data-structure.rst:238
msgid "Source archive:"
msgstr "ソースコードアーカイブ:"

#: ../source/specifications/direct-url-data-structure.rst:251
msgid "Git URL with tag and commit-hash:"
msgstr "タグおよびコミットハッシュ付きの Git のURL:"

#: ../source/specifications/direct-url-data-structure.rst:264
msgid "Local directory:"
msgstr "ローカルディレクトリ:"

#: ../source/specifications/direct-url-data-structure.rst:273
msgid "Local directory in editable mode:"
msgstr "編集可能モード状態にあるローカルディレクトリ:"

#: ../source/specifications/direct-url-data-structure.rst:287
msgid ""
"March 2020: this data structure was originally specified as part of the "
"``direct_url.json`` metadata file in :pep:`610` and is formally documented "
"here."
msgstr ""
"2020年3月: このデータ構造は、当初は :pep:`610` で ``direct_url.json`` メタ"
"データファイルの一部として仕様を指定されていましたが、ここで正式に文書化され"
"ました。"

#: ../source/specifications/direct-url-data-structure.rst:289
msgid ""
"January 2023: Added the ``archive_info.hashes`` key ([discussion](https://"
"discuss.python.org/t/22299))."
msgstr ""
"2023年1月: ``archive_info.hashes`` キーを追加しました ([議論] (https://"
"discuss.python.org/t/22299)) 。"

#: ../source/specifications/entry-points.rst:5
msgid "Entry points specification"
msgstr "エントリポイントの仕様"

#: ../source/specifications/entry-points.rst:7
msgid ""
"*Entry points* are a mechanism for an installed distribution to advertise "
"components it provides to be discovered and used by other code. For example:"
msgstr ""
"*エントリポイント* は、インストールされた配布物が他のプログラムから発見され使"
"用されるように提供するコンポーネントを広報するためのメカニズムです。例えば:"

#: ../source/specifications/entry-points.rst:11
msgid ""
"Distributions can specify ``console_scripts`` entry points, each referring "
"to a function. When *pip* (or another console_scripts aware installer) "
"installs the distribution, it will create a command-line wrapper for each "
"entry point."
msgstr ""
"配布物では、それぞれが関数を参照するような ``console_scripts`` エントリポイン"
"トを指定することができます。 *pip* (または console_scripts を認識する他のイン"
"ストーラ) が配布物をインストールする際に、各エントリポイントのコマンドライン"
"ラッパを生成します。"

#: ../source/specifications/entry-points.rst:14
msgid ""
"Applications can use entry points to load plugins; e.g. Pygments (a syntax "
"highlighting tool) can use additional lexers and styles from separately "
"installed packages. For more about this, see :doc:`/guides/creating-and-"
"discovering-plugins`."
msgstr ""
"アプリケーションは、プラグインをロードするためにエントリポイントを用いること"
"ができます; 例えば、 Pygments (シンタックスハイライトを行うツール) は追加的な"
"字句解析器を使うことが可能であり、また、別にインストールされたパッケージから"
"提供されるスタイルを使うことができます。この件の詳細については、 :doc:`/"
"guides/creating-and-discovering-plugins` を見てください。"

#: ../source/specifications/entry-points.rst:19
msgid ""
"The entry point file format was originally developed to allow packages built "
"with setuptools to provide integration point metadata that would be read at "
"runtime with ``importlib.metadata``. It is now defined as a PyPA "
"interoperability specification in order to allow build tools other than "
"setuptools to publish ``importlib.metadata`` compatible entry point "
"metadata, and runtime libraries other than ``importlib.metadata`` to "
"portably read published entry point metadata (potentially with different "
"caching and conflict resolution strategies)."
msgstr ""
"エントリポイントのファイルフォーマットは、元々は、 setuptools でビルドされた"
"パッケージが、動作時 (ランタイム) に ``importlib.metadata`` で読み取られるで"
"あろうと思われるインテグレーションポイントメタデータを提供できるようにと開発"
"されました。現在では、 setuptools 以外のビルドツールが ``importlib."
"metadata`` と互換性のあるエントリポイントのメタデータを公開し、 ``importlib."
"metadata`` 以外のランタイムライブラリが移植可能な形で公開されているエントリポ"
"イントのメタデータを (潜在的には、たとえ異なるキャッシングと衝突回避の戦略を"
"採用していたとしても) 読み取ることができるようにと PyPA 相互互換性仕様におい"
"て定義されています。"

#: ../source/specifications/entry-points.rst:28
msgid "Data model"
msgstr "データモデル"

#: ../source/specifications/entry-points.rst:30
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr ""
"概念的に、エントリポイントは３個の属性を持たなければならないと定義されていま"
"す:"

#: ../source/specifications/entry-points.rst:32
msgid ""
"The **group** that an entry point belongs to indicates what sort of object "
"it provides. For instance, the group ``console_scripts`` is for entry points "
"referring to functions which can be used as a command, while ``pygments."
"styles`` is the group for classes defining pygments styles. The consumer "
"typically defines the expected interface. To avoid clashes, consumers "
"defining a new group should use names starting with a PyPI name owned by the "
"consumer project, followed by ``.``. Group names must be one or more groups "
"of letters, numbers and underscores, separated by dots (regex ``^\\w+(\\.\\w"
"+)*$``)."
msgstr ""
"エントリポイントが属する *group* は、それがどのような種類のオブジェクトを提供"
"するのかを示します。例えば、 ``console_scripts`` グループはコマンドとして使え"
"る関数を参照するエントリポイント用であり、一方、 ``pygments.styles`` は "
"pygments スタイルを定義するクラスを提供するグループです。利用する側 (コン"
"シューマ) は、通常、期待するインタフェースを定義しています。衝突を避けるため"
"に、新しいグループを定義するのであればコンシューマは自身の PyPI での名前の後"
"に ``.`` を後置したもので始まるグループ名を使うべきです。グループ名は、ひとつ"
"かそれ以上の文字・数字・アンダースコアをドット文字で区切ったもの (正規表現で "
"``^\\w+(\\.\\w)*$``) でなければなりません。"

#: ../source/specifications/entry-points.rst:42
msgid ""
"The **name** identifies this entry point within its group. The precise "
"meaning of this is up to the consumer. For console scripts, the name of the "
"entry point is the command that will be used to launch it. Within a "
"distribution, entry point names should be unique. If different distributions "
"provide the same name, the consumer decides how to handle such conflicts. "
"The name may contain any characters except ``=``, but it cannot start or end "
"with any whitespace character, or start with ``[``. For new entry points, it "
"is recommended to use only letters, numbers, underscores, dots and dashes "
"(regex ``[\\w.-]+``)."
msgstr ""
"グループ内では、エントリポイントを **name** で識別します。このことの正確な意"
"味は利用する側次第です。コンソールスクリプトでは、エントリポイントの名前はそ"
"のコマンドを起動するのに使われる名前です。配布物の内部では、エントリポイント"
"の名前は一意に決まるべきです。別の配布物が同じ名前を提供する場合には、利用す"
"る側でそのような衝突をどのように扱うのかを決めます。名前は ``=`` を除いてどん"
"な文字を含んでいても構いませんが、空白文字で始まったり終わったりすることはで"
"きず、 ``[`` で始まることもできません。エントリポイントをこれから作るのであれ"
"ば、文字・数字・アンダースコア・ドットとダッシュ (正規表現で言うと "
"``[\\w.-]+``) だけを用いることが推奨されています。"

#: ../source/specifications/entry-points.rst:51
msgid ""
"The **object reference** points to a Python object. It is either in the form "
"``importable.module``, or ``importable.module:object.attr``. Each of the "
"parts delimited by dots and the colon is a valid Python identifier. It is "
"intended to be looked up like this::"
msgstr ""
"**object reference** は Python のオブジェクトを指し示しています。 "
"``importable.module`` 、または、 ``importable.module:object.attr`` の形式のい"
"ずれかです。ドットやコロンで区切られた各部分は、 Python の正当な識別子です。"
"次のようにルックアップされることを意図したものです::"

#: ../source/specifications/entry-points.rst:64
msgid ""
"Some tools call this kind of object reference by itself an 'entry point', "
"for want of a better term, especially where it points to a function to "
"launch a program."
msgstr ""
"とりわけそれがプログラムを起動する関数を指し示している場合には、いくつかの"
"ツールはこの種のオブジェクトへの参照、もっと良い用語で言えば 'エントリポイン"
"ト' を自分自身で呼び出します。"

#: ../source/specifications/entry-points.rst:68
msgid ""
"There is also an optional property: the **extras** are a set of strings "
"identifying optional features of the distribution providing the entry point. "
"If these are specified, the entry point requires the dependencies of those "
"'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""
"さらに追加のプロパティがあります: **extras** は、エントリポイントを提供する配"
"布物の追加的な機能をを識別する１組みの文字列です。もし指定されていれば、その"
"ような 'extras' の依存関係をエントリポイントが要求しています。メタデータの"
"フィールド :ref:`metadata_provides_extra` を見てください。"

#: ../source/specifications/entry-points.rst:73
msgid ""
"Using extras for an entry point is no longer recommended. Consumers should "
"support parsing them from existing distributions, but may then ignore them. "
"New publishing tools need not support specifying extras. The functionality "
"of handling extras was tied to setuptools' model of managing 'egg' packages, "
"but newer tools such as pip and virtualenv use a different model."
msgstr ""
"エントリポイント用に extras を使うことはもはや推奨されていません。利用する側"
"は、既存の配布物からそれを取り出して解析することをサポートするべきですが、し"
"かし、無視しても構いません。新しい公開用ツールは、 extras を指定することをサ"
"ポートする必要はありません。 extras を扱う機能は setuptools が 'egg' パッケー"
"ジを管理するモデルに紐づいたものですが、しかし、 pip や virtualenv のような"
"もっと新しいツールでは異なるモデルを採用しています。"

#: ../source/specifications/entry-points.rst:80
msgid "File format"
msgstr "ファイルフォーマット"

#: ../source/specifications/entry-points.rst:82
msgid ""
"Entry points are defined in a file called :file:`entry_points.txt` in the :"
"file:`*.dist-info` directory of the distribution. This is the directory "
"described in :ref:`recording-installed-packages` for installed "
"distributions, and in :ref:`binary-distribution-format` for wheels. The file "
"uses the UTF-8 character encoding."
msgstr ""
"エントリポイントは、配布物の `*.dist-info` ディレクトリの中の :file:"
"`entry_points.txt` と呼ばれるファイル内で定義されます。これは、インストール済"
"みの配布物に関しては :ref:`インストール済みパッケージを記録する <recording-"
"installed-packages>` 、 wheels に関しては :ref:`バイナリ配布物のフォーマット "
"<binary-distribution-format>` に記述されます。このファイルでは UTF-8 エンコー"
"ディングを使います。"

#: ../source/specifications/entry-points.rst:88
msgid ""
"The file contents are in INI format, as read by Python's :mod:`configparser` "
"module. However, configparser treats names as case-insensitive by default, "
"whereas entry point names are case sensitive. A case-sensitive config parser "
"can be made like this::"
msgstr ""
"ファイルの内容は、 Python の :mod:`configparser` モジュールで読み取ることがで"
"きる INI フォーマットです。しかしながら、 configparser はデフォルトでは変数名"
"を大文字小文字の区別をせずに扱う一方で、エントリポイントでは区別をします。大"
"文字小文字の区別をする configparser はこのようにして作成できます::"

#: ../source/specifications/entry-points.rst:98
msgid ""
"The entry points file must always use ``=`` to delimit names from values "
"(whereas configparser also allows using ``:``)."
msgstr ""
"エントリポイントのファイルでは、名前と値を区切るのに常に ``=`` を使わなければ"
"なりません (他方で configparser は ``:`` で区切ることも許容します) 。"

#: ../source/specifications/entry-points.rst:101
msgid ""
"The sections of the config file represent entry point groups, the names are "
"names, and the values encode both the object reference and the optional "
"extras. If extras are used, they are a comma-separated list inside square "
"brackets."
msgstr ""
"設定ファイルの各セクションはエントリポイントの各グループを表していて、名前は"
"名前であり、値はオブジェクトへの参照と任意の extras の両方をエンコードしま"
"す。 extras が使われる場合には、角括弧の中にコンマ区切りで列挙します。"

#: ../source/specifications/entry-points.rst:105
msgid ""
"Within a value, readers must accept and ignore spaces (including multiple "
"consecutive spaces) before or after the colon, between the object reference "
"and the left square bracket, between the extra names and the square brackets "
"and colons delimiting them, and after the right square bracket. The syntax "
"for extras is formally specified as part of :pep:`508` (as ``extras``) and "
"restrictions on values specified in :pep:`685`. For tools writing the file, "
"it is recommended only to insert a space between the object reference and "
"the left square bracket."
msgstr ""
"値の内部では、読み取る側はコロンの前後・オブジェクト参照と左角括弧の間・extra"
"の名前と角括弧や区切り文字のコロンの間・右角括弧の後にある空白文字 (連続する"
"複数の空白文字を含む) を許容し無視しなければなりません。 extras の文法は公式"
"に :pep:`508` の一部 (の ``extras`` 部分) として指定されており、値に関する制"
"限事項は :pep:`685` で指定されています。ファイルを書き出すようなツールでは、"
"オブジェクト参照と左角括弧の間に限って空白文字を挿入することが推奨されていま"
"す。"

#: ../source/specifications/entry-points.rst:114
msgid "For example::"
msgstr "例えば::"

#: ../source/specifications/entry-points.rst:126
msgid "Use for scripts"
msgstr "スクリプト向けの使用法"

#: ../source/specifications/entry-points.rst:128
msgid ""
"Two groups of entry points have special significance in packaging: "
"``console_scripts`` and ``gui_scripts``. In both groups, the name of the "
"entry point should be usable as a command in a system shell after the "
"package is installed. The object reference points to a function which will "
"be called with no arguments when this command is run. The function may "
"return an integer to be used as a process exit code, and returning ``None`` "
"is equivalent to returning ``0``."
msgstr ""
"``console_scripts`` と ``gui_scripts``: エントリポイントのふたつのグループ"
"は、パッケージング全体の中で特別な重要性を持っています。このふたつのグループ"
"では、エントリポイントの名前は、パッケージがインストールされた後にシステムの"
"シェルでコマンドとして使えるものでなければなりません。オブジェクト参照は、こ"
"のコマンドが動作する際に引数なしで呼び出される関数を指し示しています。関数"
"は、プロセスの終了コードとして使われる整数を返しても構わず、 ``None`` を返す"
"と ``0`` を返したのと同じに扱われます。"

#: ../source/specifications/entry-points.rst:136
msgid ""
"For instance, the entry point ``mycmd = mymod:main`` would create a command "
"``mycmd`` launching a script like this::"
msgstr ""
"例えば、 ``micmd = memo:main`` というエントリポイントは、 ``micmd`` というコ"
"マンドを生成し、このようにスクリプトを起動することになるでしょう::"

#: ../source/specifications/entry-points.rst:143
msgid ""
"The difference between ``console_scripts`` and ``gui_scripts`` only affects "
"Windows systems. ``console_scripts`` are wrapped in a console executable, so "
"they are attached to a console and can use ``sys.stdin``, ``sys.stdout`` and "
"``sys.stderr`` for input and output. ``gui_scripts`` are wrapped in a GUI "
"executable, so they can be started without a console, but cannot use "
"standard streams unless application code redirects them. Other platforms do "
"not have the same distinction."
msgstr ""
"``console_scripts`` と ``gui_scripts`` の違いは、 Windows システムにだけ影響"
"を与えます。 ``console_scripts`` はコンソールで実行できるようにラップされるの"
"で、コンソールに接続されて 入出力に``sys.stdin`` ・ ``sys.stdout`` ・ ``sys."
"stderr`` を使えるようになります。 ``gui_scripts`` は GUI で実行可能となるよう"
"にラップされるので、コンソールなしで起動することができ、しかし、アプリケー"
"ション側でリダイレクトして置かない限りは標準入出力を使うことができません。他"
"のプラットフォームではこのような区別をしません。"

#: ../source/specifications/entry-points.rst:151
msgid ""
"Install tools are expected to set up wrappers for both ``console_scripts`` "
"and ``gui_scripts`` in the scripts directory of the install scheme. They are "
"not responsible for putting this directory in the ``PATH`` environment "
"variable which defines where command-line tools are found."
msgstr ""
"インストールツールは、 ``console_scripts`` と ``gui_scripts`` の両方につい"
"て、インストールスキームのスクリプト用ディレクトリにラッパをセットアップする"
"ものと期待されています。(しかし、インストールツールは) このディレクトリをコマ"
"ンドラインツールを探索するために定義される ``PATH`` 環境変数に入れることにつ"
"いては責任を持ちません。"

#: ../source/specifications/entry-points.rst:156
msgid ""
"As files are created from the names, and some filesystems are case-"
"insensitive, packages should avoid using names in these groups which differ "
"only in case. The behaviour of install tools when names differ only in case "
"is undefined."
msgstr ""
"名前からファイルが作られることと、いくつかのファイルシステムでは大文字小文字"
"を区別しないことから、パッケージはこれらのグループについては大文字か小文字か"
"の違いしかないような名前を使うことを避けるべきです。名前が大文字小文字しか違"
"わない場合のインストールツールの挙動は未定義です。"

#: ../source/specifications/externally-managed-environments.rst:6
msgid "Externally Managed Environments"
msgstr "外部から管理される環境"

#: ../source/specifications/externally-managed-environments.rst:8
msgid ""
"While some Python installations are entirely managed by the user that "
"installed Python, others may be provided and managed by another means (such "
"as the operating system package manager in a Linux distribution, or as a "
"bundled Python environment in an application with a dedicated installer)."
msgstr ""
"Python の導入方法の中には Python をインストールするユーザが全てを管理するもの"
"もある一方で、(Linux ディストリビューションのオペレーティングシステムが提供す"
"るパッケージマネージャや、専用のインストーラを伴うアプリケーションにおけるバ"
"ンドルされた Python 環境のような) 別の手段で準備され管理されるものもありま"
"す。"

#: ../source/specifications/externally-managed-environments.rst:13
msgid ""
"Attempting to use conventional Python packaging tools to manipulate such "
"environments can be confusing at best and outright break the entire "
"underlying operating system at worst. Documentation and interoperability "
"guides only go so far in resolving such problems."
msgstr ""
"そのような環境下で従来の Python のパッケージングツール類を使おうと試みること"
"は、最もうまくいったときでも混乱を招く結果になり、最悪の場合には根底にあるオ"
"ペレーティングシステム全体を完全に破壊してしまうことにもなりかねません。この"
"ような問題を解決する上では、説明文書と互換性ガイドだけが頼りになります。"

#: ../source/specifications/externally-managed-environments.rst:18
msgid ""
":pep:`668` defined an ``EXTERNALLY-MANAGED`` marker file that allows a "
"Python installation to indicate to Python-specific tools such as ``pip`` "
"that they neither install nor remove packages into the interpreter’s default "
"installation environment, and should instead guide the end user towards "
"using :ref:`virtual-environments`."
msgstr ""
":pep:`668` では ``EXTERNALLY-MANAGED`` マーカファイルを定義しており、これに"
"よって、Python をインストールする際に、 ``pip`` のような Python 特有のツール"
"に対してそのインタープリタのデフォルトのインストール環境にパッケージをインス"
"トールしたり削除したりしないように指示し、代わりにエンドユーザに対して :ref:`"
"仮想環境 <virtual-environment>` を使う方向に向かうべきであると促すことができ"
"るようになります。"

#: ../source/specifications/index.rst:4
msgid "PyPA specifications"
msgstr "PyPA 仕様"

#: ../source/specifications/index.rst:6
msgid ""
"This is a list of currently active interoperability specifications "
"maintained by the Python Packaging Authority. The process for updating these "
"standards, and for proposing new ones, is documented on `pypa.io <https://"
"www.pypa.io/en/latest/specifications.html>`__."
msgstr ""
"これは、 Python パッケージングオーソリティが維持管理している現時点で有効な相"
"互互換性の仕様です。これらの標準を更新し新たな標準を提案するプロセスは、 "
"`pypa.io <https://www.pypa.io/en/latest/specifications.html>`__ に文書化され"
"ています。"

#: ../source/specifications/index.rst:13
msgid "Package Distribution Metadata"
msgstr "パッケージ配布物のメタデータ"

#: ../source/specifications/index.rst:27
msgid "Package Installation Environment Metadata"
msgstr "パッケージのインストール環境のメタデータ"

#: ../source/specifications/index.rst:40
msgid "Package Distribution File Formats"
msgstr "パッケージ配布物のファイルフォーマット"

#: ../source/specifications/index.rst:50
msgid "Package Index Interfaces"
msgstr "パッケージインデックスのインタフェース"

#: ../source/specifications/name-normalization.rst:5
msgid "Package name normalization"
msgstr "パッケージ名の正規化"

#: ../source/specifications/name-normalization.rst:7
msgid ""
"Project names are \"normalized\" for use in various contexts. This document "
"describes how project names should be normalized."
msgstr ""
"プロジェクト名は、さまざまな文脈で使用するために \"正規化\" されます。この説"
"明文書では、プロジェクト名がどのように正規化されるべきかについて記述します。"

#: ../source/specifications/name-normalization.rst:10
msgid "Valid non-normalized names"
msgstr "正当な非正規化名"

#: ../source/specifications/name-normalization.rst:12
msgid ""
"A valid name consists only of ASCII letters and numbers, period, underscore "
"and hyphen. It must start and end with a letter or number. This means that "
"valid project names are limited to those which match the following regex "
"(run with ``re.IGNORECASE``)::"
msgstr ""
"正当な名前は ASCII 文字・数字・ピリオド・アンダースコア・ハイフンだけで構成さ"
"れているものです。名前の先頭と末尾は文字か数字でなければなりません。正当なプ"
"ロジェクト名は、次の正規表現に (``re.IGNORECASE`` 付きで) マッチするものに限"
"らるということになります::"

#: ../source/specifications/name-normalization.rst:20
msgid "Normalization"
msgstr "正規化"

#: ../source/specifications/name-normalization.rst:22
msgid ""
"The name should be lowercased with all runs of the characters ``.``, ``-``, "
"or ``_`` replaced with a single ``-`` character. This can be implemented in "
"Python with the re module:"
msgstr ""
"名前は、すべての文字を小文字にして、 ``.`` ・ ``,`` ・ ``_`` の文字が連続で１"
"個以上出現したらそれを単独の ``-`` の文字に置き換えるべきです。これは、 "
"Python の re モジュールを使って実装することができます:"

#: ../source/specifications/name-normalization.rst:31
msgid "This means that the following names are all equivalent:"
msgstr "次に挙げる名前はすべて同等ということになります:"

#: ../source/specifications/name-normalization.rst:33
msgid "``friendly-bard``  (normalized form)"
msgstr "``friendly-bard`` (正規化形式)"

#: ../source/specifications/name-normalization.rst:34
msgid "``Friendly-Bard``"
msgstr "``Friendly-Bard``"

#: ../source/specifications/name-normalization.rst:35
msgid "``FRIENDLY-BARD``"
msgstr "``FRIENDLY-BARD``"

#: ../source/specifications/name-normalization.rst:36
msgid "``friendly.bard``"
msgstr "``friendly.bard``"

#: ../source/specifications/name-normalization.rst:37
msgid "``friendly_bard``"
msgstr "``friendly_bard``"

#: ../source/specifications/name-normalization.rst:38
msgid "``friendly--bard``"
msgstr "``friendly--bard``"

#: ../source/specifications/name-normalization.rst:39
msgid ""
"``FrIeNdLy-._.-bArD`` (a _terrible_ way to write a name, but it is valid)"
msgstr "``FrIeNdLy-._.-bArD`` (ひどい書き方の名前の例だが、正当である)"

#: ../source/specifications/platform-compatibility-tags.rst:6
msgid "Platform compatibility tags"
msgstr "プラットフォームの互換性タグ"

#: ../source/specifications/platform-compatibility-tags.rst:8
msgid ""
"Platform compatibility tags allow build tools to mark distributions as being "
"compatible with specific platforms, and allows installers to understand "
"which distributions are compatible with the system they are running on."
msgstr ""
"プラットフォーム相互互換性タグは、特定のプラットフォームと互換であるとビルド"
"ツールが配布物に印を付けることができるようにし、インストーラが自身が動作して"
"いるシステムと互換であるのはどの配布物であるかを理解できるようにします。"

#: ../source/specifications/platform-compatibility-tags.rst:12
msgid "The following PEPs contributed to this spec:"
msgstr "この仕様に貢献する PEP 群を以下に示す:"

#: ../source/specifications/platform-compatibility-tags.rst:14
msgid ":pep:`425`"
msgstr ":pep:`425`"

#: ../source/specifications/platform-compatibility-tags.rst:15
msgid ":pep:`513`"
msgstr ":pep:`513`"

#: ../source/specifications/platform-compatibility-tags.rst:16
msgid ":pep:`571`"
msgstr ":pep:`571`"

#: ../source/specifications/platform-compatibility-tags.rst:17
msgid ":pep:`599`"
msgstr ":pep:`599`"

#: ../source/specifications/platform-compatibility-tags.rst:18
msgid ":pep:`600`"
msgstr ":pep:`600`"

#: ../source/specifications/platform-compatibility-tags.rst:23
msgid "The tag format is ``{python tag}-{abi tag}-{platform tag}``."
msgstr "タグの書式は、 ``{python tag}-{abi tag}-{platform tag}`` です。"

#: ../source/specifications/platform-compatibility-tags.rst:25
msgid "python tag"
msgstr "python タグ"

#: ../source/specifications/platform-compatibility-tags.rst:26
msgid "'py27', 'cp33'"
msgstr "'py27' ・ 'cp33'"

#: ../source/specifications/platform-compatibility-tags.rst:28
msgid "'cp32dmu', 'none'"
msgstr "'cp33dmu' ・ 'none'"

#: ../source/specifications/platform-compatibility-tags.rst:30
msgid "'linux_x86_64', 'any'"
msgstr "'linux_x86_64' ・ 'any'"

#: ../source/specifications/platform-compatibility-tags.rst:32
msgid ""
"For example, the tag ``py27-none-any`` indicates compatibility with Python "
"2.7 (any Python 2.7 implementation) with no abi requirement, on any platform."
msgstr ""
"例えば、``py27-none-any`` というタグは、abi に対する要求なしに任意のプラット"
"フォームで Python 2.7 (任意の Python 2.7 実装) との互換性を持つことを意味しま"
"す。"

#: ../source/specifications/platform-compatibility-tags.rst:36
#: ../source/specifications/platform-compatibility-tags.rst:168
msgid "Use"
msgstr "使い方"

#: ../source/specifications/platform-compatibility-tags.rst:38
msgid ""
"The ``wheel`` built package format includes these tags in its filenames, of "
"the form ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl``. Other package formats may have their own conventions."
msgstr ""
"``wheel`` ビルド済みパッケージのフォーマットは、ファイル名の中にこのようなタ"
"グを ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl`` の形で包含しています。他のパッケージフォーマットにはそれ"
"ぞれ独自の慣習があるかもしれません。"

#: ../source/specifications/platform-compatibility-tags.rst:43
msgid "Any potential spaces in any tag should be replaced with ``_``."
msgstr ""
"どのようなタグであれ、その中に潜在的に含まれる空白文字は ``_`` で置換されるべ"
"きです。"

#: ../source/specifications/platform-compatibility-tags.rst:49
msgid "Python Tag"
msgstr "Python タグ"

#: ../source/specifications/platform-compatibility-tags.rst:51
msgid ""
"The Python tag indicates the implementation and version required by a "
"distribution.  Major implementations have abbreviated codes, initially:"
msgstr ""
"Python タグは、配布物が必要とする実装やバージョンを示します。主要な実装には短"
"縮系のコードがあって、当初は:"

#: ../source/specifications/platform-compatibility-tags.rst:54
msgid "py: Generic Python (does not require implementation-specific features)"
msgstr "py: 一般的な Python (実装に特有な機能を要求しません)"

#: ../source/specifications/platform-compatibility-tags.rst:55
msgid "cp: CPython"
msgstr "cp: CPython"

#: ../source/specifications/platform-compatibility-tags.rst:56
msgid "ip: IronPython"
msgstr "ip: IronPython"

#: ../source/specifications/platform-compatibility-tags.rst:57
msgid "pp: PyPy"
msgstr "pp: PyPy"

#: ../source/specifications/platform-compatibility-tags.rst:58
msgid "jy: Jython"
msgstr "jy: Jython"

#: ../source/specifications/platform-compatibility-tags.rst:60
msgid "Other Python implementations should use ``sys.implementation.name``."
msgstr "ほかの Python 実装には ``sys.implementation.name`` を用いるべきです。"

#: ../source/specifications/platform-compatibility-tags.rst:62
msgid ""
"The version is ``py_version_nodot``.  CPython gets away with no dot, but if "
"one is needed the underscore ``_`` is used instead.  PyPy should probably "
"use its own versions here ``pp18``, ``pp19``."
msgstr ""
"バージョンは ``py_version_nodot`` です。 CPython は no dot にせずに済ませます"
"が、必要な場合には代わりにアンダースコア文字 ``_`` が使用されます。 PyPy は、"
"おそらく、ここに ``pp18`` や ``pp19`` といったそれ自身のバージョンを使いま"
"す。"

#: ../source/specifications/platform-compatibility-tags.rst:66
msgid ""
"The version can be just the major version ``2`` or ``3`` ``py2``, ``py3`` "
"for many pure-Python distributions."
msgstr ""
"多くの純 Python 配布物では、バージョンは ``2`` や ``3`` や ``py2`` ・ "
"``py3`` といったメジャーバージョンだけにしておくことができます。"

#: ../source/specifications/platform-compatibility-tags.rst:69
msgid ""
"Importantly, major-version-only tags like ``py2`` and ``py3`` are not "
"shorthand for ``py20`` and ``py30``.  Instead, these tags mean the packager "
"intentionally released a cross-version-compatible distribution."
msgstr ""
"重要なことは、 ``py2`` や ``py3`` のような major-version-only タグは "
"``py20`` や ``py30`` の短縮形であるわけではないということです。そうではなく"
"て、これらのタグは、パッケージ作成者がいくつものバージョンに互換性を持つ配布"
"物を意図的にリリースしたのです。"

#: ../source/specifications/platform-compatibility-tags.rst:73
msgid ""
"A single-source Python 2/3 compatible distribution can use the compound tag "
"``py2.py3``.  See `Compressed Tag Sets`_, below."
msgstr ""
"単一ソースで Python 2/3 に互換性を持つ配布物は、合成タグ ``py2.py3`` を用いる"
"ことができます。 後述の `タグの圧縮された組み合わせ <Compressed Tag Sets>`_ "
"を参照してください。"

#: ../source/specifications/platform-compatibility-tags.rst:77
msgid "ABI Tag"
msgstr "ABI タグ"

#: ../source/specifications/platform-compatibility-tags.rst:79
msgid ""
"The ABI tag indicates which Python ABI is required by any included extension "
"modules.  For implementation-specific ABIs, the implementation is "
"abbreviated in the same way as the Python Tag, e.g. ``cp33d`` would be the "
"CPython 3.3 ABI with debugging."
msgstr ""
"ABI タグは、いずれかの拡張モジュールによってどのような Python ABI が要求され"
"ているのかを示します。実装依存の ABI 群については、実装 (の名前) は、たとえ"
"ば ``cp33d`` がデバッグオプション付きの CPython 3.3 ABI のことを指すように、 "
"Python タグと同様のやり方で短縮したものを使います。"

#: ../source/specifications/platform-compatibility-tags.rst:84
msgid "The CPython stable ABI is ``abi3`` as in the shared library suffix."
msgstr ""
"CPython の安定版 ABI のことは、共有ライブラリの拡張子と同様に ``abi3`` と書き"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:86
msgid ""
"Implementations with a very unstable ABI may use the first 6 bytes (as 8 "
"base64-encoded characters) of the SHA-256 hash of their source code revision "
"and compiler flags, etc, but will probably not have a great need to "
"distribute binary distributions. Each implementation's community may decide "
"how to best use the ABI tag."
msgstr ""
"非常に不安定な ABI を持つ実装は、そのソースコードのリビジョンやコンパイラフラ"
"グその他の SHA-256 ハッシュ値の最初の６バイトを (BASE64にエンコードされた８文"
"字として) 用いても構いませんが、おそらくはバイナリ配布物を配布することには大"
"きな需要はないでしょう。それぞれの実装のコミュニティで ABI タグをどのように用"
"いるのが最適かを決定すればよいでしょう。"

#: ../source/specifications/platform-compatibility-tags.rst:93
msgid "Platform Tag"
msgstr "プラットフォームタグ"

#: ../source/specifications/platform-compatibility-tags.rst:95
msgid ""
"The platform tag is simply ``distutils.util.get_platform()`` with all "
"hyphens ``-`` and periods ``.`` replaced with underscore ``_``."
msgstr ""
"プラットフォームタグは、 ``distutils.util.get_platform()`` に出現するすべての"
"ハイフン ``-`` とピリオド ``.`` を アンダースコア ``_`` で置き換えただけのも"
"のです。"

#: ../source/specifications/platform-compatibility-tags.rst:98
msgid "win32"
msgstr "win32"

#: ../source/specifications/platform-compatibility-tags.rst:99
msgid "linux_i386"
msgstr "linux_i386"

#: ../source/specifications/platform-compatibility-tags.rst:100
msgid "linux_x86_64"
msgstr "linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:105
msgid "``manylinux``"
msgstr "``manylinux``"

#: ../source/specifications/platform-compatibility-tags.rst:108
msgid ""
"The scheme defined in :pep:`425` was insufficient for public distribution of "
"wheel files (and \\*nix wheel files in general) to Linux platforms, due to "
"the large ecosystem of Linux platforms and subtle differences between them."
msgstr ""
"Linux プラットフォームのエコシステムが巨大であることとそれらの間に微妙な差異"
"があることから、 :pep:`425` で定義されたスキームは、Linux プラットフォーム向"
"けの wheel ファイル (および、一般に \\*nix 向けの wheel ファイル) の公開配布"
"物としては不十分です。"

#: ../source/specifications/platform-compatibility-tags.rst:112
msgid ""
"Instead, :pep:`600` defines the ``manylinux`` standard, which represents a "
"common subset of Linux platforms, and allows building wheels tagged with the "
"``manylinux`` platform tag which can be used across most common Linux "
"distributions."
msgstr ""
"代わりに、 :pep:`600` で Linux プラットフォームの共通のサブセットを表現する"
"``manylinux`` 標準が定義されており、普通の Linux ディストロのほとんどで使え"
"る ``manylinux`` プラットフォームタグ付きの wheel をビルドできるようにしてい"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:117
msgid ""
"There were multiple iterations of the ``manylinux`` specification, each "
"representing the common subset of Linux platforms at a given point in time:"
msgstr ""
"``manylinux`` 仕様は複数回の改訂があり、それぞれの版がその時々の Linux の共通"
"のサブセットを表現しています:"

#: ../source/specifications/platform-compatibility-tags.rst:120
msgid ""
"``manylinux1`` (:pep:`513`) supports ``x86_64`` and ``i686`` architectures, "
"and is based on a compatible Linux platform from 2007."
msgstr ""
"``manylinux1`` (:pep:`513`) は、 ``x86_64`` および ``i686`` アーキテクチャを"
"サポートしていて、 2007 年から互換性のある Linux プラットフォームに基づいてい"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:122
msgid ""
"``manylinux2010`` (:pep:`571`) supports ``x86_64`` and ``i686`` "
"architectures. and updates the previous specification to be based on a "
"compatible Linux platform from 2010 instead."
msgstr ""
"``manylinux2010`` (:pep:`571`) は、 ``x86_64`` および ``i686`` アーキテクチャ"
"をサポートしており、以前の仕様を更新して、その代わりに 2010 年から互換性のあ"
"る Linux プラットフォームに基づいています。"

#: ../source/specifications/platform-compatibility-tags.rst:125
msgid ""
"``manylinux2014`` (:pep:`599`) adds support for a number of additional "
"architectures (``aarch64``, ``armv7l``, ``ppc64``, ``ppc64le``, and "
"``s390x``) and updates the base platform to a compatible Linux platform from "
"2014."
msgstr ""
"``manylinux2014`` (:pep:`599`) では、多数のアーキテクチャ (``aarch64``, "
"``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``) へのサポートを追加し、ま"
"た、2014 年以降の互換 Linux プラットフォームのベースを更新しました。"

#: ../source/specifications/platform-compatibility-tags.rst:130
msgid ""
"``manylinux_x_y`` (:pep:`600`) supersedes all previous PEPs to define a "
"future-proof standard. It defines ``x`` and ``y`` as glibc major an minor "
"versions supported (e.g. ``manylinux_2_24`` should work on any distro using "
"glibc 2.24+). Previous tags are still supported for backward compatibility."
msgstr ""
"``manylinux_x_y`` (:pep:`600`) では、それまでの PEP 群を全て代替する形で将来"
"を見据えた標準を定義しました。 ``x`` と ``y`` は、その標準がサポートする "
"glibc のメジャーバージョンとマイナーバージョンとして定義されています (例え"
"ば、 ``manylinux_2_24`` は glibc 2.24+ を使っているディストロならどれでも、そ"
"の上で動作するはずです) 。以前に使われたタグは広報互換性を保つために依然とし"
"てサポートされています。"

#: ../source/specifications/platform-compatibility-tags.rst:135
msgid ""
"In general, distributions built for older versions of the specification are "
"forwards-compatible (meaning that ``manylinux1`` distributions should "
"continue to work on modern systems) but not backwards-compatible (meaning "
"that ``manylinux2010`` distributions are not expected to work on platforms "
"that existed before 2010)."
msgstr ""
"一般に、古めのバージョンの仕様向けにビルドされた配布物には前方互換性がありま"
"す (というのは、 ``manylinux1`` の配布物はより新しいシステムでも同様に動作す"
"るはずだということです) が、後方互換性はありません (``manylinux2010`` の配布"
"物が 2010 年よりも前に存在していたプラットフォームで動作するとは想定されてい"
"ないということです) 。"

#: ../source/specifications/platform-compatibility-tags.rst:141
msgid ""
"Package maintainers should attempt to target the most compatible "
"specification possible, with the caveat that the provided build environment "
"for ``manylinux1`` and ``manylinux2010`` have reached end-of-life meaning "
"that these images will no longer receive security updates."
msgstr ""
"``manylinux1`` と ``manylinux2010`` は既に end-of-life に達していて、提供され"
"ているビルド環境にはもはやセキュリティアップデートが提供されることはないであ"
"ろうという警告されていることもあって、パッケージ保守者は最も互換性のある仕様"
"をターゲットにするように努力するべきです。"

#: ../source/specifications/platform-compatibility-tags.rst:147
msgid "Manylinux compatibility support"
msgstr "Manylinux 互換性サポート"

#: ../source/specifications/platform-compatibility-tags.rst:150
msgid ""
"The ``manylinux2014`` specification is relatively new and is not yet widely "
"recognised by install tools."
msgstr ""
"``manylinux2014`` 仕様は相対的に新しく、未だインストールツールに広く認識され"
"たと言える状況ではありません。"

#: ../source/specifications/platform-compatibility-tags.rst:152
msgid ""
"The ``manylinux_x_y`` specification is relatively new and is not yet widely "
"recognised by install tools."
msgstr ""
"``manylinux_x_y`` 仕様は相対的に新しく、未だインストールツールに広く認識され"
"たと言える状況ではありません。"

#: ../source/specifications/platform-compatibility-tags.rst:155
msgid ""
"The following table shows the minimum versions of relevant projects to "
"support the various ``manylinux`` standards:"
msgstr ""
"適切なプロジェクトがサポートするさまざまな ``manylinux`` 標準の最低限のバー"
"ジョンを次に掲げる表に示します:"

#: ../source/specifications/platform-compatibility-tags.rst:159
msgid "Tool"
msgstr "ツール"

#: ../source/specifications/platform-compatibility-tags.rst:159
msgid "``manylinux1``"
msgstr "``manylinux1``"

#: ../source/specifications/platform-compatibility-tags.rst:159
msgid "``manylinux2010``"
msgstr "``manylinux2010``"

#: ../source/specifications/platform-compatibility-tags.rst:159
msgid "``manylinux2014``"
msgstr "``manylinux2014``"

#: ../source/specifications/platform-compatibility-tags.rst:159
msgid "``manylinux_x_y``"
msgstr "``manylinux_x_y``"

#: ../source/specifications/platform-compatibility-tags.rst:161
msgid "``>=8.1.0``"
msgstr "``>=8.1.0``"

#: ../source/specifications/platform-compatibility-tags.rst:161
msgid "``>=19.0``"
msgstr "``>=19.0``"

#: ../source/specifications/platform-compatibility-tags.rst:161
msgid "``>=19.3``"
msgstr "``>=19.3``"

#: ../source/specifications/platform-compatibility-tags.rst:161
msgid "``>=20.3``"
msgstr "``>=20.3``"

#: ../source/specifications/platform-compatibility-tags.rst:162
msgid "auditwheel"
msgstr "auditwheel"

#: ../source/specifications/platform-compatibility-tags.rst:162
msgid "``>=1.0.0``"
msgstr "``>=1.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:162
msgid "``>=2.0.0``"
msgstr "``>=2.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:162
msgid "``>=3.0.0``"
msgstr "``>=3.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:162
msgid "``>=3.3.0`` [#]_"
msgstr "``>=3.3.0`` [#]_"

#: ../source/specifications/platform-compatibility-tags.rst:165
msgid "Only support for ``manylinux_2_24`` has been added in auditwheel 3.3.0"
msgstr ""
"audit wheel 3.3.0 では ``manylinux_2_24`` へのサポートだけが追加されました"

#: ../source/specifications/platform-compatibility-tags.rst:170
msgid ""
"The tags are used by installers to decide which built distribution (if any) "
"to download from a list of potential built distributions. The installer "
"maintains a list of (pyver, abi, arch) tuples that it will support.  If the "
"built distribution's tag is ``in`` the list, then it can be installed."
msgstr ""
"タグ類は、 (もしダウンロードが必要なら) 選択可能なビルド済配布物のリストの中"
"からどれをダウンロードするのかをインストーラが決定するために使われます。イン"
"ストーラは、自身がサポートする (pyver, abi, arch) タプルのリストを維持管理し"
"ています。ビルド済配布物のタグがリストに含まれて (``in`` ) いれば、それをイン"
"ストールすることができます。"

#: ../source/specifications/platform-compatibility-tags.rst:176
msgid ""
"It is recommended that installers try to choose the most feature complete "
"built distribution available (the one most specific to the installation "
"environment) by default before falling back to pure Python versions "
"published for older Python releases. Installers are also recommended to "
"provide a way to configure and re-order the list of allowed compatibility "
"tags; for example, a user might accept only the ``*-none-any`` tags to only "
"download built packages that advertise themselves as being pure Python."
msgstr ""
"古い Python リリース向けに発行された純 Python のバージョンにフォールバックす"
"るよりも前に、利用できる中で最も機能を網羅したビルド済配布物 (インストールす"
"る先の環境に最も適したもの) をインストーラがデフォルトで選択することが推奨さ"
"れています。インストーラは、また、受け入れ可能な互換性タグのリストを設定変更"
"したり順序を入れ替えたりする方法を持つことが推奨されています; 例えば、ユーザ"
"は、純 Python であると広報しているビルド済みパッケージだけをダウンロードする"
"ために、 ``*-none-any`` タグだけを受容しても構いません。"

#: ../source/specifications/platform-compatibility-tags.rst:184
msgid ""
"Another desirable installer feature might be to include \"re-compile from "
"source if possible\" as more preferable than some of the compatible but "
"legacy pre-built options."
msgstr ""
"互換性はあるがもはや古くなってしまったビルド済みのものを使う選択肢よりもより"
"好ましいという点で、インストーラに望まれるもうひとつの機能は \"可能ならソース"
"コードから再コンパイルする\" でしょう。"

#: ../source/specifications/platform-compatibility-tags.rst:188
msgid ""
"This example list is for an installer running under CPython 3.3 on a "
"linux_x86_64 system. It is in order from most-preferred (a distribution with "
"a compiled extension module, built for the current version of Python) to "
"least-preferred (a pure-Python distribution built with an older version of "
"Python):"
msgstr ""
"この事例集は、インストーラを linux_x86_64 システム上の CPython 3.3 のもとで走"
"らせるためのものです。最も好ましいもの (最新版の Python 向けにビルドされたコ"
"ンパイル済みの拡張モジュールが付属している配布物) から、最も好ましくはないも"
"の (古いバージョンの Python でビルドされた純 Python の配布物) へ、という順序"
"で並んでいます:"

#: ../source/specifications/platform-compatibility-tags.rst:194
msgid "cp33-cp33m-linux_x86_64"
msgstr "cp33-cp33m-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:195
msgid "cp33-abi3-linux_x86_64"
msgstr "cp33-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:196
msgid "cp3-abi3-linux_x86_64"
msgstr "cp3-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:197
msgid "cp33-none-linux_x86_64*"
msgstr "cp33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:198
msgid "cp3-none-linux_x86_64*"
msgstr "cp3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:199
msgid "py33-none-linux_x86_64*"
msgstr "py33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:200
msgid "py3-none-linux_x86_64*"
msgstr "py3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:201
msgid "cp33-none-any"
msgstr "cp33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:202
msgid "cp3-none-any"
msgstr "cp3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:203
msgid "py33-none-any"
msgstr "py33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:204
msgid "py3-none-any"
msgstr "py3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:205
msgid "py32-none-any"
msgstr "py32-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:206
msgid "py31-none-any"
msgstr "py31-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:207
msgid "py30-none-any"
msgstr "py30-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:209
msgid ""
"Built distributions may be platform specific for reasons other than C "
"extensions, such as by including a native executable invoked as a subprocess."
msgstr ""
"ビルド済み配布物は、サブプロセスとして起動されるネーティブの実行可能ファイル"
"を含んでいるなどのようなC 言語拡張以外の理由によって、特定のプラットフォーム"
"向けであっても構いません。"

#: ../source/specifications/platform-compatibility-tags.rst:213
msgid ""
"Sometimes there will be more than one supported built distribution for a "
"particular version of a package.  For example, a packager could release a "
"package tagged ``cp33-abi3-linux_x86_64`` that contains an optional C "
"extension and the same distribution tagged ``py3-none-any`` that does not. "
"The index of the tag in the supported tags list breaks the tie, and the "
"package with the C extension is installed in preference to the package "
"without because that tag appears first in the list."
msgstr ""
"時々、あるパッケージの特定のバージョンとして複数のビルド済み配布物が存在する"
"ことがあるでしょう。例えば、パッケージ製作者が、 ``cp33-abi3-linux_x86_64`` "
"というタグを付けて追加的な C 言語拡張を含むパッケージをリリースし、そのような"
"ものを含まない同じ配布物に ``py3-none-any`` というタグを付けてリリースするよ"
"うな場合です。(このような場合でも) サポートされるタグのリストで先に出現する方"
"を優先するという理由によって C 言語拡張付きのパッケージがそうでないパッケージ"
"よりも選好されてインストールされるという形で、インデックスによってどちらかに"
"決めることができます。"

#: ../source/specifications/platform-compatibility-tags.rst:222
msgid "Compressed Tag Sets"
msgstr "圧縮されたタグのセット"

#: ../source/specifications/platform-compatibility-tags.rst:224
msgid ""
"To allow for compact filenames of bdists that work with more than one "
"compatibility tag triple, each tag in a filename can instead be a '.'-"
"separated, sorted, set of tags.  For example, pip, a pure-Python package "
"that is written to run under Python 2 and 3 with the same source code, could "
"distribute a bdist with the tag ``py2.py3-none-any``. The full list of "
"simple tags is::"
msgstr ""
"bdists のコンパクトなファイル名で、互換性のあるタグトリプルが複数ある場合にも"
"きちんと動作するものを許容するためには、代わりにファイル名の中のそれぞれのタ"
"グが '.' で分割可能でありソート可能であるような一連のタグになっていることが可"
"能です。例えば、 pip は純 Python のパッケージで、同一のソースコードで Python "
"2 でも 3 でも動作するように書かれていますが、これは ``py2.py3-none-any`` とい"
"うタグを付けた bdist として配布することができるでしょう。単純なタグの完全なリ"
"ストは::"

#: ../source/specifications/platform-compatibility-tags.rst:236
msgid ""
"A bdist format that implements this scheme should include the expanded tags "
"in bdist-specific metadata.  This compression scheme can generate large "
"numbers of unsupported tags and \"impossible\" tags that are supported by no "
"Python implementation e.g. \"cp33-cp31u-win64\", so use it sparingly."
msgstr ""
"このスキームを実装する bdist フォーマットは、拡張されたタグ群を bdist に特有"
"のメタデータの中に含んでいるべきです。この圧縮スキームは、サポートされていな"
"いタグや例えば \"cp33-cp31u-win64\" のようにいかなる Python 実装においてもサ"
"ポートされていない \"不可能な\" タグを大量に生成すると思われるので、控えめに"
"使うようにしてください。"

#: ../source/specifications/platform-compatibility-tags.rst:249
msgid "What tags are used by default?"
msgstr "デフォルトではどんなタグが使われますか？"

#: ../source/specifications/platform-compatibility-tags.rst:245
msgid ""
"Tools should use the most-preferred architecture dependent tag e.g. ``cp33-"
"cp33m-win32`` or the most-preferred pure python tag e.g. ``py33-none-any`` "
"by default.  If the packager overrides the default it indicates that they "
"intended to provide cross-Python compatibility."
msgstr ""
"ツール類は、 ``cp33-cp33m-win32`` のようなアーキテクチャへの依存を示すタグや "
"``py33-none-any`` のような純 Python タグの中で最も好ましいものをデフォルトで"
"採用するべきです。パッケージ製作者がデフォルトをオーバーライドしていたとすれ"
"ば、それは彼らが異なる Python 間での互換性を提供しようという意図があったこと"
"を示しています。"

#: ../source/specifications/platform-compatibility-tags.rst:259
msgid ""
"What tag do I use if my distribution uses a feature exclusive to the newest "
"version of Python?"
msgstr ""
"自分の配布物が最新版の Python と相容れない機能を使っているとしたら、どんなタ"
"グを使いますか？"

#: ../source/specifications/platform-compatibility-tags.rst:252
msgid ""
"Compatibility tags aid installers in selecting the *most compatible* build "
"of a *single version* of a distribution. For example, when there is no "
"Python 3.3 compatible build of ``beaglevote-1.2.0`` (it uses a Python 3.4 "
"exclusive feature) it may still use the ``py3-none-any`` tag instead of the "
"``py34-none-any`` tag. A Python 3.3 user must combine other qualifiers, such "
"as a requirement for the older release ``beaglevote-1.1.0`` that does not "
"use the new feature, to get a compatible build."
msgstr ""
"互換性タグは、インストーラがある配布物の *単一のバージョン* の *最も互換性が"
"ある* ビルドを選択する際に助けとなります。例えば、 (Python 3.4 に特有の機能を"
"使っている) ``beaglevote-1.2.0``には Python 3.3 と互換性を持つビルドがひとつ"
"もないという場合でも、 ``py34-none-any`` タグの代わりに ``py3-none-any`` タグ"
"を使っても構いません。 Python 3.3 のユーザが互換性のあるビルドを得るために"
"は、新しい機能を使う前のリリースである ``beaglevote-1.1.0`` 用の要求 "
"(requirement) などを他の指定子を組み合わせなければなりません。"

#: ../source/specifications/platform-compatibility-tags.rst:264
msgid "Why isn't there a ``.`` in the Python version number?"
msgstr "Python のバージョン番号に ``.`` がないのはなぜですか?"

#: ../source/specifications/platform-compatibility-tags.rst:262
msgid ""
"CPython has lasted 20+ years without a 3-digit major release. This should "
"continue for some time.  Other implementations may use _ as a delimiter, "
"since both - and . delimit the surrounding filename."
msgstr ""
"CPython は、数字３個のメジャーリリースなしで 20 年以上にわたって存続してきま"
"した。これはしばらくの間は続くに違いありません。 - や . が周辺のファイル名を"
"区切る役割を果たしているので、他の実装では _ を区切り子として使っても構いませ"
"ん。"

#: ../source/specifications/platform-compatibility-tags.rst:270
msgid ""
"Why normalise hyphens and other non-alphanumeric characters to underscores?"
msgstr ""
"ハイフンやその他の英数字以外の文字をアンダースコアに正規化するのはなぜですか?"

#: ../source/specifications/platform-compatibility-tags.rst:267
msgid ""
"To avoid conflicting with the ``.`` and ``-`` characters that separate "
"components of the filename, and for better compatibility with the widest "
"range of filesystem limitations for filenames (including being usable in URL "
"paths without quoting)."
msgstr ""
"ファイル名の部分部分を区分けする ``.`` 文字や ``-`` 文字との干渉を避けるため"
"に、かつ、 (クォートすることなく URL パス内で使用可能であることを含む) 数多あ"
"るファイルシステムのファイル名に対する制限事項との間のより良い互換性のため"
"に。"

#: ../source/specifications/platform-compatibility-tags.rst:279
msgid "Why not use special character <X> rather than ``.`` or ``-``?"
msgstr "何故、 ``.`` や ``-`` の代わりに特殊な文字 <X> を使わないのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:273
msgid ""
"Either because that character is inconvenient or potentially confusing in "
"some contexts (for example, ``+`` must be quoted in URLs, ``~`` is used to "
"denote the user's home directory in POSIX), or because the advantages "
"weren't sufficiently compelling to justify changing the existing reference "
"implementation for the wheel format defined in :pep:`427` (for example, "
"using ``,`` rather than ``.`` to separate components in a compressed tag)."
msgstr ""
"それは、その文字が不便であるかコンテクストによっては潜在的に混乱を招きやすい "
"(例えば ``+`` は URL 内ではクォートしなければなりませんし、 ``~`` は POSIX "
"でユーザのホームディレクトリを示すために使われます) から、あるいは、 "
":pep:`427` で定義された wheel "
"フォーマットを参照して作成された既存の参照実装を変更すること (例えば、"
"圧縮タグで部分部分を分割するのに ``.`` ではなく ``,`` を使うようにすること) "
"を正当化するに足りるだけのアドバンテージがないから、のいずれかです。"

#: ../source/specifications/platform-compatibility-tags.rst:284
msgid "Who will maintain the registry of abbreviated implementations?"
msgstr "誰が実装に関する短縮形のレジストリの維持管理をしているのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:282
msgid ""
"New two-letter abbreviations can be requested on the python-dev mailing "
"list.  As a rule of thumb, abbreviations are reserved for the current 4 most "
"prominent implementations."
msgstr ""
"python-dev メーリングリストで要求することで、新しい２文字省略形の割り当てを受"
"けることができるでしょう。経験上は、その時点で最も卓越した４個の実装のために"
"省略形が予約されています。"

#: ../source/specifications/platform-compatibility-tags.rst:289
msgid "Does the compatibility tag go into METADATA or PKG-INFO?"
msgstr "互換性タグは METADATA に含まれるのか、あるいは PKG-INFO か？"

#: ../source/specifications/platform-compatibility-tags.rst:287
msgid ""
"No.  The compatibility tag is part of the built distribution's metadata.  "
"METADATA / PKG-INFO should be valid for an entire distribution, not a single "
"build of that distribution."
msgstr ""
"否。互換性タグはビルド済み配布物のメタデータの一部です。METADATA / PKG-INFO "
"は、その配布物の単一のビルドではなく配布物の全体にとって正当なものであるべき"
"です。"

#: ../source/specifications/platform-compatibility-tags.rst:295
msgid "Why didn't you mention my favorite Python implementation?"
msgstr "どうして私のお気に入りの Python 実装について言及しなかったの？"

#: ../source/specifications/platform-compatibility-tags.rst:292
msgid ""
"The abbreviated tags facilitate sharing compiled Python code in a public "
"index.  Your Python implementation can use this specification too, but with "
"longer tags. Recall that all \"pure Python\" built distributions just use "
"``py``."
msgstr ""
"省略形タグは、コンパイル済みの Python コードを公開のインデックスでシェアする"
"ことを促進します。あなたの Python 実装においてもこの仕様を使うことができます"
"が、しかしもっと長いタグになってしまうことでしょう。すべての \"純 Python\" な"
"ビルド済み配布物が単に ``py`` を使うだけであることを思い出してください。"

#: ../source/specifications/platform-compatibility-tags.rst:301
msgid ""
"Why is the ABI tag (the second tag) sometimes \"none\" in the reference "
"implementation?"
msgstr ""
"どうして参照実装における ABI タグ (第２のタグ) は時々 \"none\" なのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:298
msgid ""
"Since Python 2 does not have an easy way to get to the SOABI (the concept "
"comes from newer versions of Python 3) the reference implementation at the "
"time of writing guesses \"none\".  Ideally it would detect \"py27(d|m|u)\" "
"analogous to newer versions of Python, but in the meantime \"none\" is a "
"good enough way to say \"don't know\"."
msgstr ""
"Python 2 では SOABI (より新しい版の Python 3 から来た概念) を作成する簡単な方"
"法がないので、本稿執筆時点の参照実装は \"none\" なのです。理想的には、それは"
"もっと新しい版の Python に相似の \"py27(d|m|u)\" を検出するようになるでしょう"
"が、それまでの間は \"知られていない\" ことを示すのに \"none\" とすることが必"
"要十分な方法なのです。"

#: ../source/specifications/pypirc.rst:6
msgid "The :file:`.pypirc` file"
msgstr ":file:`.pypirc` ファイル"

#: ../source/specifications/pypirc.rst:8
msgid ""
"A :file:`.pypirc` file allows you to define the configuration for :term:"
"`package indexes <Package Index>` (referred to here as \"repositories\"), so "
"that you don't have to enter the URL, username, or password whenever you "
"upload a package with :ref:`twine` or :ref:`flit`."
msgstr ""
":file:`.pypirc` ファイルを使うと、 :term:`パッケージインデックス <Package "
"Index>` (ここでは \"リポジトリ\" と呼びます) 向けの設定を定義しておけば、 :"
"ref:`twine` や :ref:`flit` でパッケージをアップロードする際に URL ・ユーザ"
"名・パスワードなどの入力を省くことができます。"

#: ../source/specifications/pypirc.rst:13
msgid "The format (originally defined by the :ref:`distutils` package) is:"
msgstr "(元々は :ref:`distutils` パッケージで定義された) フォーマットは:"

#: ../source/specifications/pypirc.rst:32
msgid ""
"The ``distutils`` section defines an ``index-servers`` field that lists the "
"name of all sections describing a repository."
msgstr ""
"``distutils`` の節では、リポジトリを説明するようなすべての節の名前を列挙する "
"``index-servers`` フィールドを定義しています。"

#: ../source/specifications/pypirc.rst:35
msgid "Each section describing a repository defines three fields:"
msgstr "リポジトリを記述する各節では、３個のフィールドを定義しています:"

#: ../source/specifications/pypirc.rst:37
msgid "``repository``: The URL of the repository."
msgstr "``repository``: リポジトリの URL。"

#: ../source/specifications/pypirc.rst:38
msgid "``username``: The registered username on the repository."
msgstr "``username``: リポジトリで登録済みのユーザ名。"

#: ../source/specifications/pypirc.rst:39
msgid "``password``: The password that will used to authenticate the username."
msgstr "``password``: ユーザ名を認証するために使われるパスワード。"

#: ../source/specifications/pypirc.rst:43
msgid ""
"Be aware that this stores your password in plain text. For better security, "
"consider an alternative like `keyring`_, setting environment variables, or "
"providing the password on the command line."
msgstr ""
"あなたのパスワードが平文で保存されることに注意してください。より良いセキュリ"
"ティのために `キーリング <keyring>`_ ・環境変数での設定・コマンドラインでのパ"
"スワード供給のような代替策を検討してください。"

#: ../source/specifications/pypirc.rst:47
msgid ""
"Otherwise, set the permissions on :file:`.pypirc` so that only you can view "
"or modify it. For example, on Linux or macOS, run:"
msgstr ""
"そうでなければ、 :file:`.pypirc` のパーミッションを設定して、自分だけが閲覧や"
"修正を行えるようにしてください。例えば、 Linux や macOS では次のようにします:"

#: ../source/specifications/pypirc.rst:57
msgid "Common configurations"
msgstr "共通の設定"

#: ../source/specifications/pypirc.rst:61
msgid ""
"These examples apply to :ref:`twine`. Other projects (e.g. :ref:`flit`) also "
"use :file:`.pypirc`, but with different defaults. Please refer to each "
"project's documentation for more details and usage instructions."
msgstr ""
"これらの例は :ref:`twine` に当てはまります。他のプロジェクト (例えば :ref:"
"`flit`) でも :file:`.pypirc` ファイルを利用しますが、デフォルトの値が異なりま"
"す。もっと詳しい情報や使い方の指南については、それぞれのプロジェクトの説明文"
"書を参照してください。"

#: ../source/specifications/pypirc.rst:65
msgid ""
"Twine's default configuration mimics a :file:`.pypirc` with repository "
"sections for PyPI and TestPyPI:"
msgstr ""
"Twine のデフォルト設定は、 PyPI と TestPyPI のリポジトリ節を含んだ :file:`."
"pypirc` を真似ています:"

#: ../source/specifications/pypirc.rst:81
msgid ""
"Twine will add additional configuration from :file:`$HOME/.pypirc`, the "
"command line, and environment variables to this default configuration."
msgstr ""
"Twine は、 :file:`$HOME/.pypirc` からの設定に対して、コマンドラインや環境変数"
"といった追加の設定をデフォルト設定に追加するでしょう。"

#: ../source/specifications/pypirc.rst:85
msgid "Using a PyPI token"
msgstr "PyPI トークンを使う"

#: ../source/specifications/pypirc.rst:87
msgid ""
"To set your `API token`_ for PyPI, you can create a :file:`$HOME/.pypirc` "
"similar to:"
msgstr ""
"自分の PyPI 用 `API トークン <API token>`_ を設定するには、次のような :file:`"
"$HOME/.pypirc` を作れば良いでしょう:"

#: ../source/specifications/pypirc.rst:96
msgid ""
"For :ref:`TestPyPI <using-test-pypi>`, add a ``[testpypi]`` section, using "
"the API token from your TestPyPI account."
msgstr ""
":ref:`TestPyPI <using-test-pypi>` 用には、Test PyPI アカウントで作成した API"
"トークンを使った ``[testpypi]`` 節を追加してください。"

#: ../source/specifications/pypirc.rst:102
msgid "Using another package index"
msgstr "別のパッケージインデックスを使う"

#: ../source/specifications/pypirc.rst:104
msgid ""
"To configure an additional repository, you'll need to redefine the ``index-"
"servers`` field to include the repository name. Here is a complete example "
"of a :file:`$HOME/.pypirc` for PyPI, TestPyPI, and a private repository:"
msgstr ""
"追加のリポジトリの設定を行うには、 ``index-servers`` フィールドにそのリポジト"
"リの名前が含まれるように再定義する必要があるでしょう。PyPI と TestPyPI とプラ"
"イベートなリポジトリの設定をした :file:`$HOME/.pypirc` の完全な例を示します:"

#: ../source/specifications/pypirc.rst:131
msgid ""
"Instead of using the ``password`` field, consider saving your API tokens and "
"passwords securely using `keyring`_ (which is installed by Twine):"
msgstr ""
"``password`` フィールドを使う代わりに、 (Twineによってインストールされる) `"
"キーリング <keyring>`_ を使って API トークンやパスワードを安全に保存すること"
"を検討してください:"

#: ../source/specifications/recording-installed-packages.rst:5
msgid "Recording installed projects"
msgstr "インストール済みのプロジェクトを記録する"

#: ../source/specifications/recording-installed-packages.rst:7
msgid ""
"This document specifies a common format of recording information about "
"Python :term:`projects <Project>` installed in an environment. A common "
"metadata format allows tools to query, manage or uninstall projects, "
"regardless of how they were installed."
msgstr ""
"この説明文書では、ある環境にインストールされた Python :term:`プロジェクト "
"<Project>` に関する情報を記録するための共通フォーマットについて指定します。共"
"通メタデータフォーマットがあれば、プロジェクトがどのようにインストールされた"
"かに関わりなく、ツールがプロジェクトについて問い合わせを行い、管理し、あるい"
"はアンインストールすることが可能になります。"

#: ../source/specifications/recording-installed-packages.rst:12
msgid ""
"Almost all information is optional. This allows tools outside the Python "
"ecosystem, such as Linux package managers, to integrate with Python tooling "
"as much as possible. For example, even if an installer cannot easily provide "
"a list of installed files in a format specific to Python tooling, it should "
"still record the name and version of the installed project."
msgstr ""
"ほとんど全ての情報が必須ではないものです。これによって、Linux のパッケージ管"
"理機構のような Python のエコシステムの外にあるツールを Python のツールの使い"
"方と最大限に統合することができます。例えば、ある Python ツールに特化した"
"フォーマットで書かれたインストール済みファイルのリストをインストーラがすぐに"
"は提供できない場合でさえも、インストール済みのプロジェクトの名前とバージョン"
"を記録するべきです。"

#: ../source/specifications/recording-installed-packages.rst:21
msgid "History and change workflow"
msgstr "ワークフローの履歴と変更"

#: ../source/specifications/recording-installed-packages.rst:23
msgid ""
"The metadata described here was first specified in :pep:`376`, and later "
"amended in :pep:`627` (and other PEPs). It was formerly known as *Database "
"of Installed Python Distributions*. As with other PyPA specifications, "
"editorial amendments with no functional impact may be made through the "
"GitHub pull request workflow. Proposals for functional changes that would "
"require amendments to package building and/or installation tools must be "
"made through the PEP process (see :pep:`1`)."
msgstr ""
"ここで述べるメタデータは、 :pep:`376` で初めて定義されたもので、後に :pep:"
"`627` (およびその他の PEP 群) で改訂されました。以前は *インストール済みの "
"Python 配布物のデータベース* という名前で知られていました。他の PyPA 仕様と同"
"様に、 GitHab の Pull リクエストのワークフローを通じて、機能の面に影響しない"
"編集上の改訂を行うことが可能です。パッケージの作成やインストールツールを修正"
"するであろう機能面での変更提案は、 PEP のプロセス (:pep:`1` を見てください) "
"を通じて行わなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:31
msgid ""
"While this document is the normative specification, the PEPs that introduce "
"changes to it may include additional information such as rationales and "
"backwards compatibility considerations."
msgstr ""
"この説明文書が規範的な仕様書である一方で、その変更を導入するような PEP 群は、"
"理論的根拠や後方互換性を保つための考慮点のような追加的な情報を含んでいても構"
"いません。"

#: ../source/specifications/recording-installed-packages.rst:39
msgid ""
"Each project installed from a distribution must, in addition to files, "
"install a \"``.dist-info``\" directory located alongside importable modules "
"and packages (commonly, the ``site-packages`` directory)."
msgstr ""
"配布物からインストールされた各プロジェクトは、一連のファイルの他に、インポー"
"ト可能なモジュールやパッケージの隣に位置する \"``.dist-info``\" ディレクトリ"
"もインストールします (通常は ``site-packages`` ディレクトリ) 。"

#: ../source/specifications/recording-installed-packages.rst:43
msgid ""
"This directory is named as ``{name}-{version}.dist-info``, with ``name`` and "
"``version`` fields corresponding to :ref:`core-metadata`. Both fields must "
"be normalized (see :ref:`name-normalization` and :pep:`PEP 440 "
"<440#normalization>` for the definition of normalization for each field "
"respectively), and replace dash (``-``) characters with underscore (``_``) "
"characters, so the ``.dist-info`` directory always has exactly one dash (``-"
"``) character in its stem, separating the ``name`` and ``version`` fields."
msgstr ""
"このディレクトリは ``{name}-{version}.dist-info`` という名前で、 ``name`` と "
"``version`` のフィールドが :ref:`core-metadata` に対応しています。両方の"
"フィールドは正規化 (各フィールドにおける正規化の定義については、それぞれ :"
"ref:`名前の正規化 <name-normalization` と :pep:`PEP 440 <440#normalization>` "
"を見てください) されていなければならず、かつ、ダッシュ (``-``) の文字をアン"
"ダースコア (``_``) で置き換えることで ``.dist-info`` ディレクトリが常に正確に"
"ひとつだけのダッシュ (``-``) 文字をそのファイル名基幹部に持ち、それによって "
"``name`` と ``version`` フィールドを分割していなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:52
msgid ""
"Historically, tools have failed to replace dot characters or normalize case "
"in the ``name`` field, or not perform normalization in the ``version`` "
"field. Tools consuming ``.dist-info`` directories should expect those fields "
"to be unnormalized, and treat them as equivalent to their normalized "
"counterparts. New tools that write ``.dist-info`` directories MUST normalize "
"both ``name`` and ``version`` fields using the rules described above, and "
"existing tools are encouraged to start normalizing those fields."
msgstr ""
"歴史的には、ツール類はドット文字の置換や ``name`` フィールドにおける大文字小"
"文字の正規化に失敗すしたり、 ``version`` フィールドの正規化をしなかったり、と"
"いうことを繰り返してきました。 ``.dist-info`` ディレクトリを利用する側のツー"
"ルは、そのようなフィールドが正規化されていることを期待するべきではなく、それ"
"らを対応する正規化済みのものと同じものだと考えて取り扱うべきです。 ``.dist-"
"info`` ディレクトリに書き込むツールをこれから作るなら、そのツールは ``name`` "
"と ``version`` の両方のフィールドを上記の規則に従って正規化しなければならず、"
"既存のツールもこれらのフィールドの正規化を始めることが推奨されています。"

#: ../source/specifications/recording-installed-packages.rst:62
msgid ""
"The ``.dist-info`` directory's name is formatted to unambigiously represent "
"a distribution as a filesystem path. Tools presenting a distribution name to "
"a user should avoid using the normalized name, and instead present the "
"specified name (when needed prior to resolution to an installed package), or "
"read the respective fields in Core Metadata, since values listed there are "
"unescaped and accurately reflect the distribution. Libraries should provide "
"API for such tools to consume, so tools can have access to the unnormalized "
"name when displaying distrubution information."
msgstr ""
"``.dist-info`` ディレクトリの名前は、曖昧さのない形で配布物をファイルシステム"
"上のパスとして表現するためにフォーマットされています。配布物の名前をユーザに"
"提示するツールは、正規化された名前を使うのを避け、 (インストール済みパッケー"
"ジへの名前解決より前に必要な場合には) 代わりに指定された名前か、または、コア"
"となるメタデータの適切なフィールドの値はエスケープ処理もされておらず配布物を"
"正確に反映しているのでそこから読み取った名前を提示するべきです。ライブラリ"
"は、配布物の情報を表示する時にツールが正規化されていない名前にアクセスできる"
"ように、そのようなツール群が利用できるような API を提供するべきです。"

#: ../source/specifications/recording-installed-packages.rst:71
msgid ""
"This ``.dist-info`` directory may contain the following files, described in "
"detail below:"
msgstr ""
"この ``.dist-info`` ディレクトリには、以下に詳細を述べるこれらのファイルを置"
"くことができます:"

#: ../source/specifications/recording-installed-packages.rst:74
msgid "``METADATA``: contains project metadata"
msgstr "``METADATA``: プロジェクトのメタデータを含みます"

#: ../source/specifications/recording-installed-packages.rst:75
msgid "``RECORD``: records the list of installed files."
msgstr "``RECORD``: インストールされるファイルを列挙して記録します。"

#: ../source/specifications/recording-installed-packages.rst:76
msgid ""
"``INSTALLER``: records the name of the tool used to install the project."
msgstr ""
"``INSTALLER``: プロジェクトをインストールするのに使われるツールの名前を記録し"
"ます。"

#: ../source/specifications/recording-installed-packages.rst:77
msgid "``entry_points.txt``: see :ref:`entry-points` for details"
msgstr ""
"``entry_points.txt``: 詳細については :ref:`entry-points` を見てください"

#: ../source/specifications/recording-installed-packages.rst:78
msgid "``direct_url.json``: see :ref:`direct-url` for details"
msgstr "``direct_url.json``: 詳細については :ref:`direct-url` を見てください"

#: ../source/specifications/recording-installed-packages.rst:80
msgid ""
"The ``METADATA`` file is mandatory. All other files may be omitted at the "
"installing tool's discretion. Additional installer-specific files may be "
"present."
msgstr ""
"``METADATA`` ファイルは必須です。これ以外の全てのファイルは、インストールツー"
"ルの最良で省略可能です。インストーラ独自のファイルが他に存在しても構いませ"
"ん。"

#: ../source/specifications/recording-installed-packages.rst:86
msgid ""
"The :ref:`binary-distribution-format` specification describes additional "
"files that may appear in the ``.dist-info`` directory of a :term:`Wheel`. "
"Such files may be copied to the ``.dist-info`` directory of an installed "
"project."
msgstr ""
":ref:`binary-distribution-format` 仕様では、 :term:`Wheel` の ``.dist-info`` "
"ディレクトリに出現するかもしれない追加のファイルについて記述しています。その"
"ようなファイルをインストールされたプロジェクトの ``.dist-info`` ディレクトリ"
"にコピーしても構いません。"

#: ../source/specifications/recording-installed-packages.rst:91
msgid ""
"The previous versions of this specification also specified a ``REQUESTED`` "
"file. This file is now considered a tool-specific extension, but may be "
"standardized again in the future. See `PEP 376 <https://www.python.org/dev/"
"peps/pep-0376/#requested>`_ for its original meaning."
msgstr ""
"この仕様の以前のバージョンでは、 ``REQUESTED`` ファイルも指定していました。こ"
"のファイルは、現在ではツール特有の拡張であると見做されていますが、いつか再び"
"標準化されるかもしれません。その元々の意味するところについては、 `PEP 376 "
"<https://www.python.org/dev/peps/pep-0376/#requested>`_ を見てください。"

#: ../source/specifications/recording-installed-packages.rst:98
msgid "The METADATA file"
msgstr "METADATA ファイル"

#: ../source/specifications/recording-installed-packages.rst:100
msgid ""
"The ``METADATA`` file contains metadata as described in the :ref:`core-"
"metadata` specification, version 1.1 or greater."
msgstr ""
"``METADATA`` ファイルには、 :ref:`コアとなるメタデータ <core-metadata>` 仕様"
"のバージョン 1.1 またはそれ以降で記述されているようなメタデータを含みます。"

#: ../source/specifications/recording-installed-packages.rst:103
msgid ""
"The ``METADATA`` file is mandatory. If it cannot be created, or if required "
"core metadata is not available, installers must report an error and fail to "
"install the project."
msgstr ""
"``METADATA`` ファイルは必須のものです。このファイルを作成することができない場"
"合や、必須のコアとなるメタデータが入手できない場合には、インストーラはエラー"
"を発生させてプロジェクトのインストールを失敗させなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:109
msgid "The RECORD file"
msgstr "RECORD ファイル"

#: ../source/specifications/recording-installed-packages.rst:111
msgid ""
"The ``RECORD`` file holds the list of installed files. It is a CSV file "
"containing one record (line) per installed file."
msgstr ""
"``RECORD`` ファイルには、インストールされたファイル群を列挙します。CSV ファイ"
"ルで、インストールされたファイルを１行に一つずつ書き込みます。"

#: ../source/specifications/recording-installed-packages.rst:114
msgid ""
"The CSV dialect must be readable with the default ``reader`` of Python's "
"``csv`` module:"
msgstr ""
"CSV の亜種としては、 Python の ``csv`` モジュールの ``reader`` で読めるもので"
"なければなりません:"

#: ../source/specifications/recording-installed-packages.rst:117
msgid "field delimiter: ``,`` (comma),"
msgstr "フィールド区切り文字: ``,`` (コンマ)、"

#: ../source/specifications/recording-installed-packages.rst:118
msgid "quoting char: ``\"`` (straight double quote),"
msgstr "引用符: ``\"`` (ストレートダブルクォート)、"

#: ../source/specifications/recording-installed-packages.rst:119
msgid "line terminator: either ``\\r\\n`` or ``\\n``."
msgstr "行末文字: ``\\r\\n`` か ``\\n`` のいずれか一方。"

#: ../source/specifications/recording-installed-packages.rst:121
msgid ""
"Each record is composed of three elements: the file's **path**, the **hash** "
"of the contents, and its **size**."
msgstr ""
"各レコードは３個の要素から構成されます: ファイルの **パス** 、内容の **ハッ"
"シュ値** 、そして、その **サイズ** です。"

#: ../source/specifications/recording-installed-packages.rst:124
msgid ""
"The *path* may be either absolute, or relative to the directory containing "
"the ``.dist-info`` directory (commonly, the ``site-packages`` directory). On "
"Windows, directories may be separated either by forward- or backslashes (``/"
"`` or ``\\``)."
msgstr ""
"*パス* は ``.dist-info`` ディレクトリを含むディレクトリ (通常は ``site-"
"packages`` ディレクトリ) へのパスで、絶対パスでも相対パスでも構いません。 "
"Windows では、ディレクトリはスラッシュで区切ってもバックスラッシュで区切って"
"も構いません (``/`` または ``\\``) 。"

#: ../source/specifications/recording-installed-packages.rst:129
msgid ""
"The *hash* is either an empty string or the name of a hash algorithm from "
"``hashlib.algorithms_guaranteed``, followed by the equals character ``=`` "
"and the digest of the file's contents, encoded with the urlsafe-base64-nopad "
"encoding (``base64.urlsafe_b64encode(digest)`` with trailing ``=`` removed)."
msgstr ""
"*hash* は、空文字列または ``hashlib.algorithms_guaranteed`` から取ったハッ"
"シュアルゴリズムの名前の後ろに等号 ``=`` を付けて、ファイルの内容のハッシュ値"
"を urlsafe-base64-nopad エンコーディング (``base64."
"urlsafe_b64encode(digest)`` の結果から末尾の ``=`` を取り除いたもの) で記した"
"ものです。"

#: ../source/specifications/recording-installed-packages.rst:134
msgid ""
"The *size* is either the empty string, or file's size in bytes, as a base 10 "
"integer."
msgstr ""
"*size* は、空文字列か、または、ファイルサイズを 10 進数のバイト数で書いたもの"
"です。"

#: ../source/specifications/recording-installed-packages.rst:137
msgid ""
"For any file, either or both of the *hash* and *size* fields may be left "
"empty. Commonly, entries for ``.pyc`` files and the ``RECORD`` file itself "
"have empty *hash* and *size*. For other files, leaving the information out "
"is discouraged, as it prevents verifying the integrity of the installed "
"project."
msgstr ""
"どのファイルについても、 *hash* フィールドと *size* フィールドの片方もしくは"
"両方が空欄になっていても構いません。通常は、 ``.pyc`` ファイルと ``RECORDS`` "
"ファイル自身については *hash* フィールドと *size* フィールドの両方が空欄に"
"なっています。その他のファイルについては、インストールされたプロジェクトに関"
"する完全性を検証するために情報を与えておくことが推奨されています。"

#: ../source/specifications/recording-installed-packages.rst:143
msgid ""
"If the ``RECORD`` file is present, it must list all installed files of the "
"project, except ``.pyc`` files corresponding to ``.py`` files listed in "
"``RECORD``, which are optional. Notably, the contents of the ``.dist-info`` "
"directory (including the ``RECORD`` file itself) must be listed. Directories "
"should not be listed."
msgstr ""
"もし ``RECORD`` ファイルが存在するなら、 ``RECORD`` に記入された ``.py`` ファ"
"イルに対応する ``.pyc`` ファイルを記入することはオプションですが、それを除い"
"てそのプロジェクトからインストールされたファイルの全てについて列挙していなけ"
"ればなりません。特に、 ``.dist-info`` ディレクトリ の内容 (``RECORD`` ファイ"
"ル自身を含む) については、書いておかなければなりません。ディレクトリについて"
"は記入してはなりません。"

#: ../source/specifications/recording-installed-packages.rst:150
msgid ""
"To completely uninstall a package, a tool needs to remove all files listed "
"in ``RECORD``, all ``.pyc`` files (of all optimization levels) corresponding "
"to removed ``.py`` files, and any directories emptied by the uninstallation."
msgstr ""
"パッケージを完全にアンインストールするためには、ツールは、 ``RECORD`` に列挙"
"された全てのファイルと、 ``.py`` ファイルに対応する (あらゆる最適化状態の) "
"``.pyc`` ファイルと、アンインストールによって空になったすべてのディレクトリを"
"削除する必要があります。"

#: ../source/specifications/recording-installed-packages.rst:155
msgid "Here is an example snippet of a possible ``RECORD`` file::"
msgstr "ありうる ``RECORD`` ファイルの一部を切り出した例をここに掲げます::"

#: ../source/specifications/recording-installed-packages.rst:174
msgid ""
"If the ``RECORD`` file is missing, tools that rely on ``.dist-info`` must "
"not attempt to uninstall or upgrade the package. (This restriction does not "
"apply to tools that rely on other sources of information, such as system "
"package managers in Linux distros.)"
msgstr ""
"``RECORD`` ファイルが存在しない場合、 ``.dist-info`` に依存するツールは、アン"
"インストールやアップグレードを試みてはなりません。(この制約は、 Linux ディス"
"トロにおけるシステムのパッケージ管理機構のような、それ以外の情報源に依存する"
"ツールには適用されません。)"

#: ../source/specifications/recording-installed-packages.rst:181
msgid "The INSTALLER file"
msgstr "INSTALLER ファイル"

#: ../source/specifications/recording-installed-packages.rst:183
msgid ""
"If present, ``INSTALLER`` is a single-line text file naming the tool used to "
"install the project. If the installer is executable from the command line, "
"``INSTALLER`` should contain the command name. Otherwise, it should contain "
"a printable ASCII string."
msgstr ""
"もし存在するなら、 ``INSTALLER`` は、プロジェクトのインストールに使われたツー"
"ルを名指しする１行のテキストファイルです。インストーラがコマンドラインから起"
"動されるなら、 ``INSTALLER`` はそのコマンドの名前を含んでいるべきです。そうで"
"なければ印刷可能な ASCII 文字を含んでいるべきです。"

#: ../source/specifications/recording-installed-packages.rst:189
msgid "The file can be terminated by zero or more ASCII whitespace characters."
msgstr ""
"ファイルは、0個またはそれ以上の ASCII 空白文字で終端することができます。"

#: ../source/specifications/recording-installed-packages.rst:191
msgid "Here are examples of two possible ``INSTALLER`` files::"
msgstr "``INSTALLER`` ファイルについて、二つの可能な例を示します::"

#: ../source/specifications/recording-installed-packages.rst:199
msgid ""
"This value should be used for informational purposes only. For example, if a "
"tool is asked to uninstall a project but finds no ``RECORD`` file, it may "
"suggest that the tool named in ``INSTALLER`` may be able to do the "
"uninstallation."
msgstr ""
"この値は情報提供目的にのみ使用されるべきです。例えば、あるツールでプロジェク"
"トのアンインストールをしようとしたが ``RECORD`` ファイルを見つけられなかった"
"場合には、そのツールは ``INSTALLER`` ファイルに書いてある (別の) ツールを使え"
"ばアンインストールができるかもしれないと示唆しても構いません。"

#: ../source/specifications/recording-installed-packages.rst:206
msgid "The entry_points.txt file"
msgstr "entry_points.txt ファイル"

#: ../source/specifications/recording-installed-packages.rst:208
msgid ""
"This file MAY be created by installers to indicate when packages contain "
"components intended for discovery and use by other code, including console "
"scripts and other applications that the installer has made available for "
"execution."
msgstr ""
"インストーラが (他者から) 実行できる状態にするコンソールスクリプトや他のアプ"
"リケーションを含めて、 (他者から) 発見されたり他のソースコードから利用された"
"りすることを意図したコンポーネントを当該パッケージが含んでいる場合には、イン"
"ストーラがその由を表示するためにこのファイルを作っても構いません。"

#: ../source/specifications/recording-installed-packages.rst:213
msgid "Its detailed specification is at :ref:`entry-points`."
msgstr "その詳細な仕様は :ref:`entry-points` にあります。"

#: ../source/specifications/recording-installed-packages.rst:217
msgid "The direct_url.json file"
msgstr "direct_url.json ファイル"

#: ../source/specifications/recording-installed-packages.rst:219
msgid ""
"This file MUST be created by installers when installing a distribution from "
"a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""
"このファイルは、要求事項が指定するダイレクト URL (VCS の URL を含む) から配布"
"物をインストールする際に、インストーラによって生成されなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:225
msgid "Its detailed specification is at :ref:`direct-url`."
msgstr "その詳細な仕様は :ref:`direct-url` にあります。"

#: ../source/specifications/recording-installed-packages.rst:229
msgid "Intentionally preventing changes to installed packages"
msgstr "インストール済みのパッケージ群への変更を意図的に防ぐ"

#: ../source/specifications/recording-installed-packages.rst:231
msgid ""
"In some cases (such as when needing to manage external dependencies in "
"addition to Python ecosystem dependencies), it is desirable for a tool that "
"installs packages into a Python environment to ensure that other tools are "
"not used to uninstall or otherwise modify that installed package, as doing "
"so may cause compatibility problems with the wider environment."
msgstr ""
"(Python エコシステムでの依存関係に加えて外部の依存関係を管理する必要がある場"
"合など) いくつかの場合には、 Python 環境にパッケージをインストールするツール"
"が、そのインストール済みパッケージを他のツールがアンインストールも修正もして"
"いないことを、もしそんなことをしていればより広範な環境に互換性問題を引き起こ"
"しかねないので、しっかりと確認することが望ましいです。"

#: ../source/specifications/recording-installed-packages.rst:237
msgid "To achieve this, affected tools should take the folllowing steps:"
msgstr ""
"これを達成するために、影響を被るツール群は次のような段階を踏むべきです:"

#: ../source/specifications/recording-installed-packages.rst:239
msgid ""
"Rename or remove the ``RECORD`` file to prevent changes via other tools (e."
"g. appending a suffix to create a non-standard ``RECORD.tool`` file if the "
"tool itself needs the information, or omitting the file entirely if the "
"package contents are tracked and managed via other means)"
msgstr ""
"他のツール類を経由した変更を抑止するために、``RECORD`` ファイルを別の名前にす"
"るか、削除するか (このファイル内の情報が必要なら、例えば標準的でない名前の "
"``RECORD.tool`` というファイルを作成するために拡張子を追加すること、あるい"
"は、パッケージの内容物を他の手段で追跡・管理しているのであればファイルを完全"
"に除外しておくこと) してください。"

#: ../source/specifications/recording-installed-packages.rst:243
msgid ""
"Write an ``INSTALLER`` file indicating the name of the tool that should be "
"used to manage the package (this allows ``RECORD``-aware tools to provide "
"better error notices when asked to modify affected packages)"
msgstr ""
"そのパッケージを管理するのに使用されるべきツールの名前を示すように``INSTALLER"
"`` ファイルを書いてください (これによって、 ``RECORD`` を参照できるツール群が"
"影響を被るパッケージを修正するように言われた時により良いエラー通知を提供でき"
"ます)"

#: ../source/specifications/recording-installed-packages.rst:247
msgid ""
"Python runtime providers may also prevent inadvertent modification of "
"platform provided packages by modifying the default Python package "
"installation scheme to use a location other than that used by platform "
"provided packages (while also ensuring both locations appear on the default "
"Python import path)."
msgstr ""
"Python ランタイムの提供者は、デフォルトの Python パッケージのインストレーショ"
"ンスキームを修正してプラットフォームが提供するパッケージ群で使われるものとは"
"別の場所を使うようにすることで、プラットフォームが提供するパッケージ群を意図"
"せずに修正してしまうことを防いでも構いません。"

#: ../source/specifications/recording-installed-packages.rst:252
msgid ""
"In some circumstances, it may be desirable to block even installation of "
"additional packages via Python-specific tools. For these cases refer to :ref:"
"`externally-managed-environments`"
msgstr ""
"いくつかの環境では、 Python 特有のツール群を経由した追加パッケージのインスト"
"ールさえもブロックすることが望ましいかもしれません。"
"このようなケースについては :ref:`外部から管理される環境 <externally-managed-"
"environments>` を参照してください"

#: ../source/specifications/simple-repository-api.rst:6
msgid "Simple repository API"
msgstr "シンプルなリポジトリ API"

#: ../source/specifications/simple-repository-api.rst:8
msgid ""
"The current interface for querying available package versions and retrieving "
"packages from an index server is defined in :pep:`503`, with the addition of "
"\"yank\" support (allowing a kind of file deletion) in :pep:`592`, "
"specifying the interface version provided by an index server in :pep:`629`, "
"and providing package metadata independently from a package in :pep:`658`."
msgstr ""
"利用可能なパッケージのバージョンを問い合わせ、インデックスサーバからパッケー"
"ジを取り出すインタフェースは、現在、 :pep:`592` の \"yank\" サポート (ある種"
"の削除を可能とするもの) や、 :pep:`629` のインデックスサーバ側が提供している"
"インタフェースのバージョンを指定する機能や、 :pep:`658` のパッケージとは独立"
"にパッケージメタデータを提供する機能とともに、 :pep:`503` で定義されていま"
"す。"

#: ../source/specifications/source-distribution-format.rst:6
msgid "Source distribution format"
msgstr "ソースコード配布物のフォーマット"

#: ../source/specifications/source-distribution-format.rst:8
msgid ""
"The current standard format of source distribution format is identified by "
"the presence of a :file:`pyproject.toml` file in the distribution archive.  "
"The layout of such a distribution was originally specified in :pep:`517` and "
"is formally documented here."
msgstr ""
"ソースコード配布物のフォーマットに関する現在の標準フォーマットは、配布物の"
"アーカイブに :file:`pyproject.toml` ファイルが存在することで識別されます。そ"
"のような配布物のレイアウトは元々は :pep:`517` で指定され、ここに公式にドキュ"
"メント化されています。"

#: ../source/specifications/source-distribution-format.rst:13
msgid ""
"There is also the legacy source distribution format, implicitly defined by "
"the behaviour of ``distutils`` module in the standard library, when "
"executing :command:`setup.py sdist`. This document does not attempt to "
"standardise this format, except to note that if a legacy source distribution "
"contains a ``PKG-INFO`` file using metadata version 2.2 or later, then it "
"MUST follow the rules applicable to source distributions defined in the "
"metadata specification."
msgstr ""
"これとは別に従来のソースコード配布物のフォーマットが存在しており、それは標準"
"ライブラリの ``distutils`` モジュールが :command:`setup.py sdist` の形で実行"
"される時の動作によって暗黙裡に定義されています。この説明文書では、この従来の"
"ソースコード配布物がバージョン 2.2 およびそれ以降のバージョンのメタデータを"
"使った ``PKG-INFO`` ファイルを含んでいる場合には、メタデータの仕様で定義され"
"たルールが該当のソースコード配布物にも適用されなければならないことを注記する"
"以外には、このフォーマットの標準化を試みることはしません。"

#: ../source/specifications/source-distribution-format.rst:21
msgid "Source distributions are also known as *sdists* for short."
msgstr "ソースコード配布物は、短く *sdists* としても知られています。"

#: ../source/specifications/source-distribution-format.rst:24
msgid "Source trees"
msgstr "ソースコードツリー"

#: ../source/specifications/source-distribution-format.rst:26
msgid ""
"A *source tree* is a collection of files and directories -- like a version "
"control system checkout -- which contains a :file:`pyproject.toml` file that "
"can be use to build a source distribution from the contained files and "
"directories. :pep:`517` and :pep:`518` specify what is required to meet the "
"definition of what :file:`pyproject.toml` must contain for something to be "
"deemed a source tree."
msgstr ""
"*ソースツリー* は、 -- バージョン管理システムからのチェックアウトのような -- "
"ファイルとディレクトリの集合で、その中に書かれたファイルやディレクトリから"
"ソースコード配布物をビルドすることができるような :file:`pyproject.toml` ファ"
"イルを含んでいるものです。何かをソースコードツリーであると見做すために :file:"
"`pyproject.toml` ファイルが含んでいなければならないものが何であるかの定義に合"
"致するために要求されることは何であるかについては :pep:`517` と :pep:`518` が"
"指定しています。"

#: ../source/specifications/source-distribution-format.rst:34
msgid "Source distribution file name"
msgstr "ソースコード配布物のファイル名"

#: ../source/specifications/source-distribution-format.rst:36
msgid ""
"The file name of a sdist was standardised in :pep:`625`. The file name must "
"be in the form ``{name}-{version}.tar.gz``, where ``{name}`` is normalised "
"according to the same rules as for binary distributions (see :ref:`binary-"
"distribution-format`), and ``{version}`` is the canonicalized form of the "
"project version (see :ref:`version-specifiers`)."
msgstr ""
"sdist のファイル名は、 :pep:`625` で標準化されています。ファイル名は "
"``{name}-{version}.tar.gz`` の形をしていなければならず、この中の ``{name}`` "
"はバイナリ配布物のファイル名に関するルールと同様のルールに従って正規化されて"
"いなければならず (:ref:`バイナリ配布物のフォーマット <binray-distribution-"
"format>` を見てください) 、かつ、 ``{version}`` はプロジェクトのバージョンの"
"形に正規化されていなければなりません (:ref:`バージョン指定子 <version-"
"specifires>` を見てください) 。"

#: ../source/specifications/source-distribution-format.rst:42
msgid ""
"The name and version components of the filename MUST match the values stored "
"in the metadata contained in the file."
msgstr ""
"ファイル名の name と version の部分は、ファイル内のメタデータに保存されている"
"値に合致しなければなりません。"

#: ../source/specifications/source-distribution-format.rst:45
msgid ""
"Code that produces a source distribution file MUST give the file a name that "
"matches this specification. This includes the ``build_sdist`` hook of a "
"build backend."
msgstr ""
"ソースコード配布物を生成するソースコードは、この仕様に合致した名前をファイル"
"に与えなければなりません。これは、ビルドバックエンドの ``build_sdist`` フック"
"にも当てはまります。"

#: ../source/specifications/source-distribution-format.rst:48
msgid ""
"Code that processes source distribution files MAY recognise source "
"distribution files by the ``.tar.gz`` suffix and the presence of precisely "
"*one* hyphen in the filename. Code that does this may then use the "
"distribution name and version from the filename without further verification."
msgstr ""
"ソースコード配布物を生成するソースコードは、 ``.tar.gz`` 拡張子がついていて"
"ファイル名の中に正確に *ひとつ* のハイフンが存在していることを以て、ソース"
"コード配布物のファイルであると認識しても構いません。これを行うソースコード"
"は、この場合には、ファイル名から得た配布物の名前とバージョンをそれ以上の検証"
"をせずに使用しても構いません。"

#: ../source/specifications/source-distribution-format.rst:54
msgid "Source distribution file format"
msgstr "ソースコード配布物のファイルフォーマット"

#: ../source/specifications/source-distribution-format.rst:56
msgid ""
"A ``.tar.gz`` source distribution (sdist) contains a single top-level "
"directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the "
"source files of the package. The name and version MUST match the metadata "
"stored in the file. This directory must also contain a :file:`pyproject."
"toml` in the format defined in :ref:`declaring-build-dependencies`, and a "
"``PKG-INFO`` file containing metadata in the format described in the :ref:"
"`core-metadata` specification. The metadata MUST conform to at least version "
"2.2 of the metadata specification."
msgstr ""
"``.tar.gz`` ソースコード配布物 (sdist) には、 ``{name}-{version}`` (例えば "
"``foo-1.0``) と言う名前の単一のトップレベルディレクトリがあって、そこにパッ"
"ケージのソールファイル群を含んでいます。 name と version は、ファイル内のメタ"
"データと合致していなければなりません。このディレクトリは、 :ref:`declaring-"
"build-dependencies` の中で定義されたフォーマットで書かれた :file:`pyproject."
"toml` ファイルや、 :ref:`core-metadata` 仕様内に記述されたフォーマットで書か"
"れたメタデータを含んだ ``PKG-INFO`` ファイルも含んでいなければなりません。メ"
"タデータは、少なくともバージョン 2.2 のメタデータ仕様を満足するものでなければ"
"なりません。"

#: ../source/specifications/source-distribution-format.rst:64
msgid ""
"No other content of a sdist is required or defined. Build systems can store "
"whatever information they need in the sdist to build the project."
msgstr ""
"sdist の他の内容については必須でもなく定義もされていません。ビルドシステム"
"は、プロジェクトをビルドするのに必要なものであればどんな情報でも sdist 内に保"
"存しておくことができます。"

#: ../source/specifications/source-distribution-format.rst:67
msgid ""
"The tarball should use the modern POSIX.1-2001 pax tar format, which "
"specifies UTF-8 based file names. In particular, source distribution files "
"must be readable using the standard library tarfile module with the open "
"flag 'r:gz'."
msgstr ""
"tar ボールでは、ファイル名に UTF-8 を使える近代的な POSIX.1-2001 pax tar "
"フォーマットを使用するべきです。とりわけ、ソースコード配布物のファイル群は、"
"標準ライブラリの tarfile モジュールに open flag 'r:gz' を与えることで読み込め"
"るものでなければなりません。"

#: ../source/specifications/version-specifiers.rst:6
msgid "Version specifiers"
msgstr "バージョン指定子"

#: ../source/specifications/version-specifiers.rst:8
msgid ""
"Version numbering requirements and the semantics for specifying comparisons "
"between versions are defined in :pep:`440`."
msgstr ""
"バージョンの付け方に関する要求事項や、バージョン間での比較方法を指定する意味"
"づけは、 :pep:`440` に定義されています。"

#: ../source/specifications/version-specifiers.rst:11
msgid ""
"The version specifiers section in this PEP supersedes the version specifiers "
"section in :pep:`345`."
msgstr ""
"この PEP のバージョン指定子の節は、 :pep:`345` のバージョン指定子の節を置き換"
"えるものです。"

#: ../source/specifications/virtual-environments.rst:6
msgid "Python Virtual Environments"
msgstr "Python 仮想環境"

#: ../source/specifications/virtual-environments.rst:8
msgid ""
"For Python 3.3 and later versions, :pep:`405` introduced interpreter level "
"support for the concept of \"Python Virtual Environments\". Each virtual "
"environment has its own Python binary (allowing creation of environments "
"with various Python versions) and can have its own independent set of "
"installed Python packages in its site directories, but shares the standard "
"library with the base installed Python. While the concept of virtual "
"environments existed prior to this update, there was no previously "
"standardised mechanism for declaring or discovering them."
msgstr ""
"Python 3.3 およびそれ以降のバージョンでは、 :pep:`405` で \"Python 仮想環境 "
"<Python Virtual Environment>\" "
"の概念に対するサポートがインタープリタのレベルで導入されました。"
"それぞれの仮想環境が独自の Python バイナリを持ち ("
"従ってさまざまなバージョンの Python 環境を作成することが可能) 、"
"そのサイトディレクトリの中にそれぞれ独立した Python "
"パッケージ群をインストールすることができ、同時に、"
"ベースシステムにインストールされた Python と標準ライブラリを共有することがで"
"きます。仮想環境の概念はこのアップデートに先立って存在していましたが、(訳註、"
"仮想環境を) 宣言したり発見したりするための標準化されたメカニズムはそれまで存"
"在しなかったのです。"

#: ../source/specifications/virtual-environments.rst:18
msgid "Runtime detection of virtual environments"
msgstr "仮想環境のランタイムを識別する"

#: ../source/specifications/virtual-environments.rst:20
msgid ""
"At runtime, virtual environments can be identified by virtue of ``sys."
"prefix`` (the filesystem location of the running interpreter) having a "
"different value from ``sys.base_prefix`` (the default filesytem location of "
"the standard library directories)."
msgstr ""
"ランタイムには、仮想環境は ``sys.prefix`` "
"(動作中のインタープリタのファイルシステム上の場所) が ``sys.base_prefix`` "
"(標準ライブラリのディレクトリのデフォルトでのファイルシステム上の場所) "
"とは異なる値を持つおかげで識別可能です。"

#: ../source/specifications/virtual-environments.rst:25
msgid ""
":ref:`venv-explanation` in the Python standard library documentation for "
"the :py:mod:`venv` module covers this along with the concept of \"activating"
"\" a virtual environment in an interactive operating system shell (this "
"activation step is optional and hence the changes it makes can't be reliably "
"used to detect whether a Python program is running in a virtual environment "
"or not)."
msgstr ""
"Python 標準ライブラリの :py:mod:`venv` モジュールに関する説明文書の :ref"
":`venv-explanation` は、"

#: ../source/specifications/virtual-environments.rst:33
msgid "Declaring installation environments as Python virtual environments"
msgstr "インストール先の環境がPython 仮想環境であることを宣言する"

#: ../source/specifications/virtual-environments.rst:35
msgid ""
"As described in :pep:`405`, a Python virtual environment in its simplest "
"form consists of nothing more than a copy or symlink of the Python binary "
"accompanied by a ``site-packages`` directory and a ``pyvenv.cfg`` file with "
"a ``home`` key that indicates where to find the Python standard library "
"modules."
msgstr ""
":pep:`405` で述べられているように、最も単純な形式での Python 仮想環境は、 "
"Python バイナリのコピーかシンボリックリンクに、 ``site-packages`` "
"ディレクトリと、 Python "
"標準ライブラリのモジュール群がどこで見つかるかを指し示す ``home`` "
"キーを伴った ``pyvenv.cfg`` ファイルが随伴しているだけのもので構成されます。"

#: ../source/specifications/virtual-environments.rst:40
msgid ""
"While designed to meet the needs of the standard :py:mod:`venv` module, this "
"split installation and ``pyvenv.cfg`` file approach can be used by *any* "
"Python installation provider that desires Python-specific tools to be aware "
"that they are already operating in a virtual environment and no further "
"environment nesting is required or desired."
msgstr ""
"標準である :py:mod:`venv` "
"モジュールの要求するものに合うように設計されている一方で、この分割実装と "
"``pyvenv.cfg`` ファイルのアプローチは、Python "
"に特化したツール群が自身がすでに仮想環境の中で動作していて、それ以上の入れ子"
"環境は要求もされておらず望ましくもないことを認識するようにしたいと望む "
"Python 実装提供者なら *誰でも* 採用することができます。"

#: ../source/specifications/virtual-environments.rst:46
msgid ""
"Even in the absence of a ``pyvenv.cfg`` file, any approach (e.g. "
"``sitecustomize.py``, patching the installed Python runtime) that results in "
"``sys.prefix`` and ``sys.base_prefix`` having different values, while still "
"providing a matching default package installation scheme in ``sysconfig``, "
"will be detected and behave as a Python virtual environment."
msgstr ""
"``pyvenv.cfg`` ファイルがない場合であっても、 ``sys.prefix`` と ``sys."
"base_prefix`` が相異なる値を持つような結果となる一方で以前として対応するパッ"
"ケージ実装スキームを ``sysconfig`` 内で提供するアプローチ (例えば Python "
"ランタイムにパッチを当てる ``sitecustomize.py``) であればどれでも、"
"それと認識されて Python 仮想環境として振る舞います。"

#: ../source/support.rst:3
msgid "How to Get Support"
msgstr "サポートを得るには"

#: ../source/support.rst:5
msgid ""
"For support related to a specific project, see the links on the :doc:"
"`Projects <key_projects>` page."
msgstr ""
"特定のプロジェクトに関係するサポートについては、 :doc:`プロジェクト群 "
"<key_projects>` のリンク集のページを見てください。"

#: ../source/support.rst:8
msgid ""
"For something more general, or when you're just not sure, please `open an "
"issue <https://github.com/pypa/packaging-problems/issues/new?"
"template=general_issue.yml>`_ on the `packaging-problems <https://github.com/"
"pypa/packaging-problems>`_ repository on GitHub."
msgstr ""
"もっと一般的なサポートを求めている場合や、確信を持てないだけの場合には、"
"GitHub の `パッケージングに関わる問題 <https://github.com/pypa/packaging-"
"problems>`_ の `課題リストに課題を作成する <https://github.com/pypa/"
"packaging-problems/issues/new?template=general_issue.yml>`_ 下さい。"

#: ../source/tutorials/creating-documentation.rst:5
msgid "Creating Documentation"
msgstr "説明文書を作成する"

#: ../source/tutorials/creating-documentation.rst:7
msgid ""
"This section covers the basics of how to create documentation using "
"`Sphinx`_ and host the documentation for free in `Read The Docs`_."
msgstr ""
"この節では、 `Sphinx`_ を用いて説明文書を作成する方法の基礎と、 `Read The "
"Docs`_ に無料で説明文書をホストしてもらう方法を説明します。"

#: ../source/tutorials/creating-documentation.rst:14
msgid "Installing Sphinx"
msgstr "Sphinx をインストールする"

#: ../source/tutorials/creating-documentation.rst:15
msgid "Use ``pip`` to install Sphinx:"
msgstr "``pip`` を使って Sphinx をインストールするには:"

#: ../source/tutorials/creating-documentation.rst:29
msgid ""
"For other installation methods, see this :doc:`installation guide <sphinx:"
"usage/installation>` by Sphinx."
msgstr ""
"その他のインストール方法については、 Sphinx による :doc:`インストールガイド "
"<sphinx:usage/installation>` を見てください。"

#: ../source/tutorials/creating-documentation.rst:33
msgid "Getting Started With Sphinx"
msgstr "Sphinx の初めの第一歩"

#: ../source/tutorials/creating-documentation.rst:35
msgid ""
"Create a ``docs`` directory inside your project to hold your documentation:"
msgstr ""
"プロジェクトの中に説明文書を保持するための ``docs`` ディレクトリを作成します:"

#: ../source/tutorials/creating-documentation.rst:42
msgid "Run ``sphinx-quickstart`` inside the ``docs`` directory:"
msgstr "``docs`` ディレクトリ内で ``sphinx-quickstart`` コマンドを実行します:"

#: ../source/tutorials/creating-documentation.rst:49
msgid ""
"This sets up a source directory, walks you through some basic "
"configurations, and creates an ``index.rst`` file as well as a ``conf.py`` "
"file."
msgstr ""
"これは、ソースディレクトリを作成し、いくつかの基本的な設定事項を渉猟し、 "
"``conf.py`` ファイルと同様に ``index.rst`` ファイルを生成します。"

#: ../source/tutorials/creating-documentation.rst:51
msgid ""
"You can add some information about your project in ``index.rst``, then build "
"them:"
msgstr ""
"``index.rst`` にプロジェクトに関する情報をいくらか追加して、ビルドします:"

#: ../source/tutorials/creating-documentation.rst:57
msgid ""
"For more details on the build process, see this `guide`_ by Read The Docs."
msgstr ""
"ビルドのプロセスに関するもっと詳しいことは、 Read The Docs の `ガイド "
"<guide>`_ を見てください。"

#: ../source/tutorials/creating-documentation.rst:62
msgid "Other Sources"
msgstr "他の情報源"

#: ../source/tutorials/creating-documentation.rst:64
msgid ""
"For a more detailed guide on how to use Sphinx and reStructuredText, please "
"see this `documentation tutorial`_ on Hitchhiker's Guide to Python."
msgstr ""
"Sphinx と reStructuredText の使い方に関するもっと詳細なガイドについては、 "
"Python のためのヒッチハイカーズガイドの中の `説明文書を作るチュートリアル "
"<documentation tutorial>`_ を見てください。"

#: ../source/tutorials/index.rst:4
msgid ""
"**Tutorials** are opinionated step-by-step guides to help you get familiar "
"with packaging concepts. For more detailed information on specific packaging "
"topics, see :doc:`/guides/index`."
msgstr ""
"**チュートリアル** は、どのようにすれば良いかを指示しながらステップバイステッ"
"プで進めるガイドで、あなたがパッケージングの概念に慣れ親しむのを助けます。"
"パッケージングの特定の話題に関するより詳しい情報については、 :doc:`/guides/"
"index` を見てください。"

#: ../source/tutorials/installing-packages.rst:5
msgid "Installing Packages"
msgstr "パッケージをインストールする"

#: ../source/tutorials/installing-packages.rst:7
msgid ""
"This section covers the basics of how to install Python :term:`packages "
"<Distribution Package>`."
msgstr ""
"この節では、 Python の :term:`パッケージ <Distribution Package>` をインストー"
"ルする方法の基本について示します。"

#: ../source/tutorials/installing-packages.rst:10
msgid ""
"It's important to note that the term \"package\" in this context is being "
"used to describe a bundle of software to be installed (i.e. as a synonym for "
"a :term:`distribution <Distribution Package>`). It does not to refer to the "
"kind of :term:`package <Import Package>` that you import in your Python "
"source code (i.e. a container of modules). It is common in the Python "
"community to refer to a :term:`distribution <Distribution Package>` using "
"the term \"package\".  Using the term \"distribution\" is often not "
"preferred, because it can easily be confused with a Linux distribution, or "
"another larger software distribution like Python itself."
msgstr ""
"この文脈では、 \"パッケージ\" という用語が、インストールされるソフトウェアの"
"束を表すものである (すなわち、 :term:`配布物 <Distribution Package>` の同義語"
"である) ことを注記しておくことは重要です。 Python のなんらかのソースコードを"
"インポートする (つまり、モジュール群の) 容れ物としての :term:`パッケージ "
"<Import Package>` のことを指してはいないのです。 Python のコミュニティで"
"は、 :term:`配布物 <Distribution Package>` のことを \"パッケージ\" という用語"
"で呼ぶことは一般的に行われています。 Linux ディストロや、 Python そのもののよ"
"うなその他の大きなソフトウェア配布物と紛らわしいので、 \"配布物\" という用語"
"を使うことはしばしば歓迎されません。"

#: ../source/tutorials/installing-packages.rst:28
msgid "Requirements for Installing Packages"
msgstr "パッケージをインストールするための必須事項"

#: ../source/tutorials/installing-packages.rst:30
msgid ""
"This section describes the steps to follow before installing other Python "
"packages."
msgstr ""
"この節では、その他の Python パッケージをインストールする前にやっておくべきス"
"テップを記します。"

#: ../source/tutorials/installing-packages.rst:35
msgid "Ensure you can run Python from the command line"
msgstr "コマンドラインから Python を起動できることを確認する"

#: ../source/tutorials/installing-packages.rst:37
msgid ""
"Before you go any further, make sure you have Python and that the expected "
"version is available from your command line. You can check this by running:"
msgstr ""
"先へ進む前に、期待通りのバージョンの Python が手元のコマンドラインで動作して"
"いることを確認しておきましょう。つぎのコマンドを実行すれば確認できます:"

#: ../source/tutorials/installing-packages.rst:53
msgid ""
"You should get some output like ``Python 3.6.3``. If you do not have Python, "
"please install the latest 3.x version from `python.org`_ or refer to the :"
"ref:`Installing Python <python-guide:installation>` section of the "
"Hitchhiker's Guide to Python."
msgstr ""
"``Python 3.6.3`` のような応答が出力されるはずです。もし Python がなければ、最"
"新バージョンの 3.x を `python.org`_ からインストールするか、 Python ユーザの"
"ためのヒッチハイクガイドの :ref:`Python をインストールする <python-guide:"
"installation>` の節を参照するか、どちらかをしてください。"

#: ../source/tutorials/installing-packages.rst:57
msgid "If you're a newcomer and you get an error like this:"
msgstr "あなたがまだ慣れていなくて、しかも次のようなエラーに遭遇した場合には:"

#: ../source/tutorials/installing-packages.rst:66
msgid ""
"It's because this command and other suggested commands in this tutorial are "
"intended to be run in a *shell* (also called a *terminal* or *console*). See "
"the Python for Beginners `getting started tutorial`_ for an introduction to "
"using your operating system's shell and interacting with Python."
msgstr ""
"それは、このコマンドや、このチュートリアルに出てくる他のコマンドが、 *シェル"
"* (*ターミナル* とか *コンソール* とも呼ばれます) で動作することを意図してい"
"るからです。オペレーティングシステムのシェルを使って Python とやりとりするた"
"めの導入説明として、初心者のための Python `はじめの第一歩チュートリアル "
"<getting started tutorial`_ を見てください。"

#: ../source/tutorials/installing-packages.rst:72
msgid ""
"If you're using an enhanced shell like IPython or the Jupyter notebook, you "
"can run system commands like those in this tutorial by prefacing them with a "
"``!`` character:"
msgstr ""
"IPython や Jupyter notebook のような拡張されたシェルを使っているのであれば、"
"先頭に ``!`` マークを付けることで、このチュートリアルに出てくるようなシステム"
"コマンドを実行することができます:"

#: ../source/tutorials/installing-packages.rst:82
msgid ""
"It's recommended to write ``{sys.executable}`` rather than plain ``python`` "
"in order to ensure that commands are run in the Python installation matching "
"the currently running notebook (which may not be the same Python "
"installation that the ``python`` command refers to)."
msgstr ""
"現在動作している notebook の Python 実装 (これは ``python`` コマンドが実際に"
"呼び出す Python 実装と同じであるとは限らない) で (投入した) コマンドが動作し"
"ていることを確実にするために、 単に ``python`` と書くのではなく ``{sys."
"executable}`` と書くことを推奨します。"

#: ../source/tutorials/installing-packages.rst:87
msgid ""
"Due to the way most Linux distributions are handling the Python 3 migration, "
"Linux users using the system Python without creating a virtual environment "
"first should replace the ``python`` command in this tutorial with "
"``python3`` and the ``python -m pip`` command with ``python3 -m pip --"
"user``. Do *not* run any of the commands in this tutorial with ``sudo``: if "
"you get a permissions error, come back to the section on creating virtual "
"environments, set one up, and then continue with the tutorial as written."
msgstr ""
"ほとんどの Linux ディストロが Python 3 の移植を扱う方法のせいで、仮想環境を作"
"ること抜きでシステム側の Python を使う Linux ユーザは、まず、このチュートリア"
"ルに出てくる ``python`` コマンドを ``python3`` に、そして、 ``python -m "
"pip`` コマンドを ``python3 -m pip --user`` に置換するべきです。このチュートリ"
"アルに出てくるコマンドを ``sudo`` 付きで実行することは *やめてください*: パー"
"ミッションエラーが発生する場合には、仮想環境の作成の節に戻って仮想環境を作成"
"し、チュートリアルに書かれている通りのやり方で再開してください。"

#: ../source/tutorials/installing-packages.rst:99
msgid "Ensure you can run pip from the command line"
msgstr "コマンドラインから pip を実行できることを確実にする"

#: ../source/tutorials/installing-packages.rst:101
msgid ""
"Additionally, you'll need to make sure you have :ref:`pip` available. You "
"can check this by running:"
msgstr ""
"さらに、 :ref:`pip` コマンドを実行できることを確認しておきましょう。次のコマ"
"ンドで確認できます:"

#: ../source/tutorials/installing-packages.rst:116
msgid ""
"If you installed Python from source, with an installer from `python.org`_, "
"or via `Homebrew`_ you should already have pip. If you're on Linux and "
"installed using your OS package manager, you may have to install pip "
"separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""
"`python.org`_ から持ってきたインストーラや `Homebrew`_ を使って Python をソー"
"スコードからインストールしたのであれば、すでに pip が動作するはずです。 "
"Linux 上で OS のパッケージ管理機構を使ってインストールしたのであれば、 pip を"
"個別にインストールしなければならないかもしれませんが、この場合は :doc:`/"
"guides/installing-using-linux-tools` を見てください。"

#: ../source/tutorials/installing-packages.rst:123
msgid ""
"If ``pip`` isn't already installed, then first try to bootstrap it from the "
"standard library:"
msgstr ""
"まだ ``pip`` がインストールされていなければ、初回は標準ライブラリからブートス"
"トラップしてみてください:"

#: ../source/tutorials/installing-packages.rst:138
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr "それでもまだ ``python -m pip`` を実行できないのであれば:"

#: ../source/tutorials/installing-packages.rst:140
msgid ""
"Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""
"`get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_ をセキュアにダウン"
"ロードする"

#: ../source/tutorials/installing-packages.rst:143
msgid ""
"Run ``python get-pip.py``. [2]_  This will install or upgrade pip. "
"Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're "
"not installed already."
msgstr ""
"``python get-pip.py`` を実行してください [2]_ 。これで pip をインストールまた"
"は更新することができます。さらに、まだインストールされていなければ、 :ref:"
"`setuptools` と :ref:`wheel` もインストールされるでしょう。"

#: ../source/tutorials/installing-packages.rst:149
msgid ""
"Be cautious if you're using a Python install that's managed by your "
"operating system or another package manager. get-pip.py does not coordinate "
"with those tools, and may leave your system in an inconsistent state. You "
"can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/"
"local`` which is designed for locally-installed software."
msgstr ""
"オペレーティングシステムないし他のパッケージ管理機構を使ってインストールした "
"Python を管理しているなら、用心深くあるべきです。 get-pip.py はそのようなツー"
"ル群と協調して動作する訳ではないので、あなたのシステムの一貫性を破壊するかも"
"しれません。ソフトウェアをローカルにインストールするために設計された ``/usr/"
"local`` にインストールするなら ``python get-pip.py --prefix=/usr/local`` を使"
"うことができます。"

#: ../source/tutorials/installing-packages.rst:158
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr "pip ・ setuptools ・ wheel が最新版であることを確実にする"

#: ../source/tutorials/installing-packages.rst:160
msgid ""
"While ``pip`` alone is sufficient to install from pre-built binary archives, "
"up to date copies of the ``setuptools`` and ``wheel`` projects are useful to "
"ensure you can also install from source archives:"
msgstr ""
"``pip`` 単体でも事前にビルドされたバイナリアーカイブからインストールを行うに"
"は十分ですが、最新の ``setuptools`` と ``wheel`` があればソースコードアーカイ"
"ブからでも確実にインストールすることができるので便利です:"

#: ../source/tutorials/installing-packages.rst:177
msgid "Optionally, create a virtual environment"
msgstr "必須ではないが、仮想環境を構築する"

#: ../source/tutorials/installing-packages.rst:179
msgid ""
"See :ref:`section below <Creating and using Virtual Environments>` for "
"details, but here's the basic :doc:`venv <python:library/venv>` [3]_ command "
"to use on a typical Linux system:"
msgstr ""
"詳しいことは、 :ref:`下の節 <Creating and using Virtual Environments>` に出て"
"いますので、ここでは基本的な :doc:`venv <python:library/venv>` [3]_ コマンド"
"を典型的な Linux システムで使うやり方を説明します:"

#: ../source/tutorials/installing-packages.rst:196
msgid ""
"This will create a new virtual environment in the ``tutorial_env`` "
"subdirectory, and configure the current shell to use it as the default "
"``python`` environment."
msgstr ""
"これで新しい仮想環境が ``tutorial_env`` サブディレクトリ内に生成され、それを"
"現在のシェルのデフォルトの ``python`` 環境として使わせることができます。"

#: ../source/tutorials/installing-packages.rst:203
msgid "Creating Virtual Environments"
msgstr "仮想環境を構築する"

#: ../source/tutorials/installing-packages.rst:205
msgid ""
"Python \"Virtual Environments\" allow Python :term:`packages <Distribution "
"Package>` to be installed in an isolated location for a particular "
"application, rather than being installed globally. If you are looking to "
"safely install global command line tools, see :doc:`/guides/installing-stand-"
"alone-command-line-tools`."
msgstr ""
"Python の \"仮想環境\" を使えば、 Python の :term:`パッケージ <Distribution "
"Package>` をグローバルな環境にインストールする代わりに、特定のアプリケーショ"
"ンのための隔離された場所にインストールすることができます。グローバルなコマン"
"ドラインツールを安全にインストールしたいのであれば、 :doc:`/guides/"
"installing-stand-aline-command-line-tools` を見てください。"

#: ../source/tutorials/installing-packages.rst:211
msgid ""
"Imagine you have an application that needs version 1 of LibFoo, but another "
"application requires version 2. How can you use both these applications? If "
"you install everything into /usr/lib/python3.6/site-packages (or whatever "
"your platform’s standard location is), it’s easy to end up in a situation "
"where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""
"手持ちのあるアプリケーションには LibFoo のバージョン 1 が必要で、しかし、別の"
"アプリケーションではバージョン 2 を要求していると想像してみてください。このよ"
"うなアプリケーションを両方同時に使うためにはどうすれば良いでしょうか？あらゆ"
"るものを /usr/lib/python3.6/site-packages (または、あなたが使っているプラット"
"フォームの標準的な置き場所ならどこでも) にインストールするとすれば、容易く、"
"アップグレードするべきでないはずのアプリケーションを意図せずアップグレードし"
"てしまう結果に終わるでしょう。"

#: ../source/tutorials/installing-packages.rst:217
msgid ""
"Or more generally, what if you want to install an application and leave it "
"be? If an application works, any change in its libraries or the versions of "
"those libraries can break the application."
msgstr ""
"あるいは、もっと一般的には、あるアプリケーションをインストールして、そのまま"
"にしておきたいとすればどうでしょう？アプリケーションが動作したとしても、ライ"
"ブラリへの何らかの変更や、ライブラリのバージョン問題でアプリケーションが動作"
"しなくなってしまうかもしれません。"

#: ../source/tutorials/installing-packages.rst:221
msgid ""
"Also, what if you can’t install :term:`packages <Distribution Package>` into "
"the global site-packages directory? For instance, on a shared host."
msgstr ""
"あるいは、グローバルな site-packages ディレクトリに :term:`パッケージ "
"<Distribution Package>` をインストールすることができないとしたら、どうでしょ"
"うか？例えば、共有ホストのような。"

#: ../source/tutorials/installing-packages.rst:224
msgid ""
"In all these cases, virtual environments can help you. They have their own "
"installation directories and they don’t share libraries with other virtual "
"environments."
msgstr ""
"このようなすべての場合において、仮想環境はあなたを助けることができます。仮想"
"環境にはそれぞれのインストール先ディレクトリが別にあって、他の仮想環境とライ"
"ブラリを共有するということがないからです。"

#: ../source/tutorials/installing-packages.rst:228
msgid ""
"Currently, there are two common tools for creating Python virtual "
"environments:"
msgstr ""
"現在、ふたつの Python 仮想環境を構築するためのツールがよく知られています:"

#: ../source/tutorials/installing-packages.rst:230
msgid ""
":doc:`venv <python:library/venv>` is available by default in Python 3.3 and "
"later, and installs :ref:`pip` and :ref:`setuptools` into created virtual "
"environments in Python 3.4 and later."
msgstr ""
":doc:`venv <python:library/venv>` は、 Python 3.3 およびそれ以降のバージョン"
"で本体に同梱されていて利用可能であり、 Python 3.4 およびそれ以降では (venv"
"が) :ref:`pip` と :ref:`setuptools` を作成された仮想環境内にインストールしま"
"す。"

#: ../source/tutorials/installing-packages.rst:233
msgid ""
":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ "
"and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are "
"always installed into created virtual environments by default (regardless of "
"Python version)."
msgstr ""
":ref:`virtualenv` は別途インストールする必要がありますが、 Python 2.7+ と "
"Python 3.3+ をサポートしており、 :ref:`pip` ・ :ref:`setuptools` ・ :ref:"
"`wheel` を作成された仮想環境に常にデフォルト (Python のバージョンに関係なく) "
"でインストールします。"

#: ../source/tutorials/installing-packages.rst:238
msgid "The basic usage is like so:"
msgstr "基本的な使い方は次の通りです:"

#: ../source/tutorials/installing-packages.rst:240
msgid "Using :doc:`venv <python:library/venv>`:"
msgstr ":doc:`venv <python:library/venv>` を使うと:"

#: ../source/tutorials/installing-packages.rst:256
msgid "Using :ref:`virtualenv`:"
msgstr ":ref:`virtualenv` を使うと:"

#: ../source/tutorials/installing-packages.rst:272
msgid ""
"For more information, see the :doc:`venv <python:library/venv>` docs or the :"
"doc:`virtualenv <virtualenv:index>` docs."
msgstr ""
"さらなる説明は、 :doc:`venv <python:library/venv>` の説明文書や :doc:"
"`virtualenv <virtualenv:index>` の説明文書をみてください。"

#: ../source/tutorials/installing-packages.rst:275
msgid ""
"The use of :command:`source` under Unix shells ensures that the virtual "
"environment's variables are set within the current shell, and not in a "
"subprocess (which then disappears, having no useful effect)."
msgstr ""
"UNIX のシェル上で :command:`source` を使うとそのシェル内では仮想環境用の変数"
"が設定されますが、サブシェルでは設定され (ず、役に立つ効果が残り) ません。"

#: ../source/tutorials/installing-packages.rst:280
msgid ""
"In both of the above cases, Windows users should _not_ use the :command:"
"`source` command, but should rather run the :command:`activate` script "
"directly from the command shell like so:"
msgstr ""
"上記のいずれの場合でも、 Windows ユーザは :command:`source` コマンドを使うべ"
"きではあなく、代わりに :command:`activate` スクリプトをコマンドシェルから直接"
"に実行するべきで、例えば次のようにします:"

#: ../source/tutorials/installing-packages.rst:290
msgid ""
"Managing multiple virtual environments directly can become tedious, so the :"
"ref:`dependency management tutorial <managing-dependencies>` introduces a "
"higher level tool, :ref:`Pipenv`, that automatically manages a separate "
"virtual environment for each project and application that you work on."
msgstr ""
"複数の仮想環境をそのままで管理することはうんざりする作業になりがちなので、 :"
"ref:`依存関係を管理するためのチュートリアル <managing-dependencies>` では、よ"
"り抽象度の高いツール :ref:`Pipenv` を使ってプロジェクトやアプリケーションのそ"
"れぞれのために作成した個別の仮想環境群を自動的に管理する方法を紹介していま"
"す。"

#: ../source/tutorials/installing-packages.rst:297
msgid "Use pip for Installing"
msgstr "pip を使ってインストールする"

#: ../source/tutorials/installing-packages.rst:299
msgid ""
":ref:`pip` is the recommended installer.  Below, we'll cover the most common "
"usage scenarios. For more detail, see the :doc:`pip docs <pip:index>`, which "
"includes a complete :doc:`Reference Guide <pip:cli/index>`."
msgstr ""
":ref:`pip` は推奨されているインストーラです。以下に最もよくある使用シナリオを"
"挙げます。より詳しくは、 :doc:`リファレンスガイド <pip:cli/index>` の全体を含"
"む :doc:`pip 説明文書 <pip:index>` を見てください。"

#: ../source/tutorials/installing-packages.rst:305
msgid "Installing from PyPI"
msgstr "PyPI からインストールする"

#: ../source/tutorials/installing-packages.rst:307
msgid ""
"The most common usage of :ref:`pip` is to install from the :term:`Python "
"Package Index <Python Package Index (PyPI)>` using a :term:`requirement "
"specifier <Requirement Specifier>`. Generally speaking, a requirement "
"specifier is composed of a project name followed by an optional :term:"
"`version specifier <Version Specifier>`.  :pep:`440` contains a :pep:`full "
"specification <440#version-specifiers>` of the currently supported "
"specifiers. Below are some examples."
msgstr ""
":ref:`pip` の最もよくある使い方は、 :term:`要求事項指定子 <Requirement "
"Specifier>` を用いて :term:`Python パッケージインデックス <Python Package "
"Index (PyPI)>` からインストールすることです。一般的には、要求事項識別子は、プ"
"ロジェクト名と後続する省略可能な :term:`バージョン指定子 <Version "
"Specifier>` で構成されています。 :pep:`440` に、現在サポートされている識別子"
"の :pep:`完全な仕様 <440#version-specifiers>` があります。以下にいくつかの例"
"を挙げます。"

#: ../source/tutorials/installing-packages.rst:315
msgid "To install the latest version of \"SomeProject\":"
msgstr "\"とあるプロジェクト\" の最新版をインストールするには:"

#: ../source/tutorials/installing-packages.rst:329
msgid "To install a specific version:"
msgstr "特定のバージョンをインストールするには:"

#: ../source/tutorials/installing-packages.rst:343
msgid "To install greater than or equal to one version and less than another:"
msgstr ""
"あるバージョンと同じか新しいバージョンで、もう一つのものより古いものをインス"
"トールするには:"

#: ../source/tutorials/installing-packages.rst:358
msgid ""
"To install a version that's :pep:`\"compatible\" <440#compatible-release>` "
"with a certain version: [4]_"
msgstr ""
"あるバージョンと :pep:`\"互換性がある\" <440#compatible-release>` バージョン"
"をインストールするには: [4]_"

#: ../source/tutorials/installing-packages.rst:373
msgid ""
"In this case, this means to install any version \"==1.4.*\" version that's "
"also \">=1.4.2\"."
msgstr ""
"この場合には、 \"==1.4.*\" で、かつ、 \">=1.4.2\" であるバージョンをインス"
"トールするという意味になります。"

#: ../source/tutorials/installing-packages.rst:378
msgid "Source Distributions vs Wheels"
msgstr "ソースコード配布物 vs. Wheels"

#: ../source/tutorials/installing-packages.rst:380
msgid ""
":ref:`pip` can install from either :term:`Source Distributions (sdist) "
"<Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both "
"are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You "
"can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:"
"install_--no-binary>` option."
msgstr ""
":ref:`pip` は、 :term:`ソースコード配布物 (sdist) <Source Distribution (or "
"\"sdist\")>` または :term:`Wheels <Wheel>` のどちらからでもインストールするこ"
"とができますが、両方が PyPI に存在している場合には pip は互換性のある :term:"
"`wheel <Wheel>` を選好します。例えば :ref:`--no-binary <pip:install_--no-"
"binary>` オプションを使うことで pip のデフォルト動作を上書き修正することがで"
"きます。"

#: ../source/tutorials/installing-packages.rst:386
msgid ""
":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution "
"Package>` format that provides faster installation compared to :term:`Source "
"Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when "
"a project contains compiled extensions."
msgstr ""
":term:`Wheels <Wheel>` は、ビルド済みの :term:`配布物 <Distribution "
"Package>` フォーマットで、特にプロジェクトがコンパイル済み拡張を含んでいる場"
"合には、 :term:`ソースコード配布物 (sdist) <Source Distribution (or \"sdist"
"\")>` に比べてより短時間でインストールすることができます。"

#: ../source/tutorials/installing-packages.rst:391
msgid ""
"If :ref:`pip` does not find a wheel to install, it will locally build a "
"wheel and cache it for future installs, instead of rebuilding the source "
"distribution in the future."
msgstr ""
":ref:`pip` がインストールするべき wheel を発見できなかった場合には、手元で "
"wheel をビルドして、将来のインストール時に再びソースコード配布物からリビルド"
"しないで済むようにキャッシュしておきます。"

#: ../source/tutorials/installing-packages.rst:399
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""
"インストール済みの ``とあるプロジェクト`` を PyPI から最新版に更新する。"

#: ../source/tutorials/installing-packages.rst:416
msgid "Installing to the User Site"
msgstr "ユーザサイトへインストールする"

#: ../source/tutorials/installing-packages.rst:418
msgid ""
"To install :term:`packages <Distribution Package>` that are isolated to the "
"current user, use the ``--user`` flag:"
msgstr ""
":term:`パッケージ <Distribution Package>` を現在のユーザだけが使えるように他"
"から隔離してインストールするには ``--user`` フラグを使います:"

#: ../source/tutorials/installing-packages.rst:433
msgid ""
"For more information see the `User Installs <https://pip.pypa.io/en/latest/"
"user_guide/#user-installs>`_ section from the pip docs."
msgstr ""
"もっと詳しい情報を知りたければ、pip 説明文書の `ユーザ限定のインストール "
"<https://pip.pypa.io/en/latest/user_guide/#user-installs>`_ の節を見てくださ"
"い。"

#: ../source/tutorials/installing-packages.rst:437
msgid ""
"Note that the ``--user`` flag has no effect when inside a virtual "
"environment - all installation commands will affect the virtual environment."
msgstr ""
"仮想環境の中では ``--user`` フラグが無効になることに注意してください - すべて"
"のインストールコマンドが仮想環境に影響を与えます。"

#: ../source/tutorials/installing-packages.rst:440
msgid ""
"If ``SomeProject`` defines any command-line scripts or console entry points, "
"``--user`` will cause them to be installed inside the `user base`_'s binary "
"directory, which may or may not already be present in your shell's :envvar:"
"`PATH`.  (Starting in version 10, pip displays a warning when installing any "
"scripts to a directory outside :envvar:`PATH`.)  If the scripts are not "
"available in your shell after installation, you'll need to add the directory "
"to your :envvar:`PATH`:"
msgstr ""
"``とあるプロジェクト`` がコマンドラインスクリプトかコンソールエントリポイント"
"をひとつでも定義しているのであれば、 ``--user`` を与えることで 、 `ユーザベー"
"ス <user base>`_ のバイナリ置き場、それがシェルの :envvar:`PATH` 変数にあろう"
"がなかろうが、そこにインストールすることになるでしょう (バージョン 10 以降の "
"pip では、スクリプトを :envvar:`PATH` に含まれていないパスにインストールする"
"時には警告を表示します)。インストール後にスクリプトが利用可能でない場合に"
"は、 :envvar:`PATH` にそのディレクトリパスを追加する必要があるでしょう:"

#: ../source/tutorials/installing-packages.rst:448
msgid ""
"On Linux and macOS you can find the user base binary directory by running "
"``python -m site --user-base`` and adding ``bin`` to the end. For example, "
"this will typically print ``~/.local`` (with ``~`` expanded to the absolute "
"path to your home directory) so you'll need to add ``~/.local/bin`` to your "
"``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""
"Linux や macOS 上では、 ``python -m site --user-base`` を実行した結果の末尾"
"に ``bin`` を追加すれば、ユーザベースのバイナリ置き場となるディレクトリがどこ"
"であるかがわかるでしょう。例えば、このコマンドは大抵の場合に ``~/.local`` "
"(の ``~`` をあなたのホームディレクトリの絶対パスに展開したもの) を表示します"
"が、すると、 ``PATH`` には ``~/.local/bin`` を追加する必要があるということで"
"す。 `~/.profile を修正する <modifying ~/.profile>`_ ことで ``PATH`` を恒久的"
"に変更することができます。"

#: ../source/tutorials/installing-packages.rst:454
msgid ""
"On Windows you can find the user base binary directory by running ``py -m "
"site --user-site`` and replacing ``site-packages`` with ``Scripts``. For "
"example, this could return ``C:\\Users\\Username\\AppData\\Roaming"
"\\Python36\\site-packages`` so you would need to set your ``PATH`` to "
"include ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You "
"can set your user ``PATH`` permanently in the `Control Panel`_. You may need "
"to log out for the ``PATH`` changes to take effect."
msgstr ""
"Windows 上では、 ``py -m site --user-site`` の結果について ``site-packages`` "
"を ``Scripts`` で置き換えればユーザベースのバイナリ置き場となるディレクトリを"
"見つけることができるでしょう。このコマンドは例えば ``C:\\Users\\Username"
"\\AppData\\Roaming\\Python36\\site-packages`` のような結果を返すので、 "
"``PATH`` に ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts`` が含"
"まれるようにする必要があるでしょう。 `Control Panel`_ で恒久的に ``PATH`` を"
"設定することができるでしょう。 ``PATH`` の修正が効果を持つには、一旦ログアウ"
"トする必要があるかもしれません。"

#: ../source/tutorials/installing-packages.rst:470
msgid ""
"Install a list of requirements specified in a :ref:`Requirements File <pip:"
"Requirements Files>`."
msgstr ""
":ref:`Requirements ファイル <pip:Requirements Files>` で指定された一連の必須"
"条件となる依存先をインストールしましょう。"

#: ../source/tutorials/installing-packages.rst:486
msgid "Installing from VCS"
msgstr "VCS からいんすとーるする"

#: ../source/tutorials/installing-packages.rst:488
msgid ""
"Install a project from VCS in \"editable\" mode.  For a full breakdown of "
"the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"プロジェクトを VCS から \"編集可能\" モードでインストールしましょう。この構文"
"を全て細かく説明したものについては、 :ref:`VCS サポート <pip:VCS Support>` "
"の pip の節を見てください。"

#: ../source/tutorials/installing-packages.rst:510
msgid "Installing from other Indexes"
msgstr "他のインデックスサイトからインストールする"

#: ../source/tutorials/installing-packages.rst:512
msgid "Install from an alternate index"
msgstr "代替となるインデックスサイトからインストールする"

#: ../source/tutorials/installing-packages.rst:526
msgid ""
"Search an additional index during install, in addition to :term:`PyPI "
"<Python Package Index (PyPI)>`"
msgstr ""
":term:`PyPI <Python Package Index (PyPI)>` に加えて、追加のインデックスサイト"
"をインストール中に探索する"

#: ../source/tutorials/installing-packages.rst:542
msgid "Installing from a local src tree"
msgstr "ローカルのソースツリーからインストールする"

#: ../source/tutorials/installing-packages.rst:545
msgid ""
"Installing from local src in :doc:`Development Mode <setuptools:userguide/"
"development_mode>`, i.e. in such a way that the project appears to be "
"installed, but yet is still editable from the src tree."
msgstr ""
":doc:`開発モード <setuptools:userguide/development_mode>` 、すなわち、プロ"
"ジェクトがインストールされていて、しかも、ソースツリーからへんしゅうかのうで"
"あるような方法でローカルのソースツリーからインストールすること。"

#: ../source/tutorials/installing-packages.rst:562
msgid "You can also install normally from src"
msgstr "ソースツリーから通常通りにインストールすることも可能"

#: ../source/tutorials/installing-packages.rst:579
msgid "Install a particular source archive file."
msgstr "特定のソースコードアーカイブファイルをインストールする。"

#: ../source/tutorials/installing-packages.rst:593
msgid ""
"Install from a local directory containing archives (and don't check :term:"
"`PyPI <Python Package Index (PyPI)>`)"
msgstr ""
"アーカイブを含んだローカルのディレクトリから(しかも :term:`PyPI <Python "
"Package Index (PyPI)>` をチェックしないで)インストールする"

#: ../source/tutorials/installing-packages.rst:613
msgid "Installing from other sources"
msgstr "他の場所からインストールする"

#: ../source/tutorials/installing-packages.rst:615
msgid ""
"To install from other data sources (for example Amazon S3 storage) you can "
"create a helper application that presents the data in a :pep:`503` compliant "
"index format, and use the ``--extra-index-url`` flag to direct pip to use "
"that index."
msgstr ""
":pep:`503` 準拠のインデックスフォーマットに合わせてデータを表現するようなヘル"
"パーアプリケーションを作成すれば、 pip を ``--extra-index-url`` フラグでその"
"インデックスへ向け直すことで、他のデータソース (例えば Amazon S3 ストレージ) "
"からインストールすることができます。"

#: ../source/tutorials/installing-packages.rst:627
msgid "Installing Prereleases"
msgstr "リリース前のバージョンをインストールする"

#: ../source/tutorials/installing-packages.rst:629
msgid ""
"Find pre-release and development versions, in addition to stable versions.  "
"By default, pip only finds stable versions."
msgstr ""
"安定バージョンに加えて、リリース前のバージョンや開発中のバージョンを見つけま"
"しょう。デフォルトでは pip は安定バージョンだけを探索します。"

#: ../source/tutorials/installing-packages.rst:645
msgid "Installing \"Extras\""
msgstr "パッケージの \"Extras\" をインストールする"

#: ../source/tutorials/installing-packages.rst:647
msgid ""
"Extras are optional \"variants\" of a package, which may include additional "
"dependencies, and thereby enable additional functionality from the package.  "
"If you wish to install an extra for a package which you know publishes one, "
"you can include it in the pip installation command:"
msgstr ""
"Extras は、パッケージのオプション的な \"変種\" で、追加的な依存先を加えること"
"も可能であり、従って、パッケージの追加的な機能を有効化することができるもので"
"す。もし、one なる機能を追加するとわかっているパッケージの追加部分 (extra) を"
"インストールしたいのであれば、次のような pip のインストールコマンドを使うこと"
"でそれを追加することができます:"

#: ../source/tutorials/installing-packages.rst:670
msgid ""
"\"Secure\" in this context means using a modern browser or a tool like :"
"command:`curl` that verifies SSL certificates when downloading from https "
"URLs."
msgstr ""
"この文脈での \"Secure\" とは、https の付く URL からダウンロードする際に、近代"
"的なブラウザか :command:`curl` のようなツールを使って SSL 証明書を検証するこ"
"とを意味しています。"

#: ../source/tutorials/installing-packages.rst:679
msgid ""
"Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:"
"`virtualenv`) will create virtualenv environments with ``pip`` pre-"
"installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""
"Python 3.4 以降は (:ref:`virtualenv` の代替物で標準ライブラリに取り込まれた) "
"``venv``があるので、インストール済みの ``pip`` で virtualenv 環境を作成でき、"
"それによって :ref:`virtualenv` の同等な代替物となっています。"

#: ../source/tutorials/installing-packages.rst:684
msgid ""
"The compatible release specifier was accepted in :pep:`440` and support was "
"released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""
"互換性のあるリリース指定子は :pep:`440` で受容され、そのサポートが :ref:"
"`setuptools` v8.0 と :ref:``pip` v6.0 でリリースされました"

#: ../source/tutorials/managing-dependencies.rst:4
msgid "Managing Application Dependencies"
msgstr "アプリケーションの依存関係を管理する"

#: ../source/tutorials/managing-dependencies.rst:6
msgid ""
"The :ref:`package installation tutorial <installing-packages>` covered the "
"basics of getting set up to install and update Python packages."
msgstr ""
":ref:`パッケージインストールに関するチュートリアル <installing-packages>` に"
"は、 Python のパッケージをインストールしたり更新したりするための準備の基本が"
"説明されています。"

#: ../source/tutorials/managing-dependencies.rst:9
msgid ""
"However, running these commands interactively can get tedious even for your "
"own personal projects, and things get even more difficult when trying to set "
"up development environments automatically for projects with multiple "
"contributors."
msgstr ""
"しかしながら、これらのコマンドを対話形式で実行することは、自分自身の個人的な"
"プロジェクト向けであってもうんざりする作業になりかねないし、複数の貢献者が参"
"加するようなプロジェクト向けに開発環境を自動的に設定することを試みる場合には"
"もっと困難にさえなるでしょう。"

#: ../source/tutorials/managing-dependencies.rst:13
msgid ""
"This tutorial walks you through the use of :ref:`Pipenv` to manage "
"dependencies for an application. It will show you how to install and use the "
"necessary tools and make strong recommendations on best practices."
msgstr ""
"このチュートリアルでは、 :ref:`Pipenv` を使ってアプリケーションの依存関係を管"
"理する方法について一通り見て回ります。必要なツール群のインストールの仕方もお"
"見せしますし、ベストプラクティスについても強い推奨をします。"

#: ../source/tutorials/managing-dependencies.rst:17
msgid ""
"Keep in mind that Python is used for a great many different purposes, and "
"precisely how you want to manage your dependencies may change based on how "
"you decide to publish your software. The guidance presented here is most "
"directly applicable to the development and deployment of network services "
"(including web applications), but is also very well suited to managing "
"development and testing environments for any kind of project."
msgstr ""
"覚えておいてもらいたいのは、 Python が極めて多岐に渡る目的に使用されるという"
"ことと、あなたが自分のソフトウェアを公開するやり方によって依存関係を管理する"
"正確なやり方が変化するであろうということです。ここに書かれているガイダンス"
"は、ネットワークサービス (web アプリケーションを含む) の開発やデプロイメント"
"には最も直接的に適用できますが、どんな種類のプロジェクトであってもその開発や"
"試験のための環境を管理するのにとても適切であると言えるでしょう。"

#: ../source/tutorials/managing-dependencies.rst:24
msgid ""
"For alternatives, see `Other Tools for Application Dependency Management`_."
msgstr ""
"他の手段については、 `アプリケーションの依存関係管理のための他のツール群 "
"<Other Tools for Application Dependency Management>`_ を見てください。"

#: ../source/tutorials/managing-dependencies.rst:27
msgid "Installing Pipenv"
msgstr "Pipenv をインストールする"

#: ../source/tutorials/managing-dependencies.rst:29
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit "
"to those tools. While :ref:`pip` alone is often sufficient for personal use, "
"Pipenv is recommended for collaborative projects as it's a higher-level tool "
"that simplifies dependency management for common use cases."
msgstr ""
":ref:`Pipenv` は Python のプロジェクトの依存関係を管理するツールです。 Node."
"js での `npm`_ や Ruby の `bundler`_ を知っているなら、意図するところはこれら"
"のツールと同じです。個人で使う分には :ref:`pip` さえあれば十分であることが多"
"いですが、共同作業を伴うプロジェクトでは、多くのユースケースにおいて依存関係"
"管理を単純化する上位のツールとして Pipenv が推奨されています。"

#: ../source/tutorials/managing-dependencies.rst:35
msgid "Use ``pip`` to install Pipenv:"
msgstr "``pip`` を使って Pipenv をインストールする:"

#: ../source/tutorials/managing-dependencies.rst:51
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation, "
"you'll need to add the :py:data:`user base <python:site.USER_BASE>`'s binary "
"directory to your ``PATH``. See :ref:`Installing to the User Site` for more "
"information."
msgstr ""
"これは、システムワイドにインストールされたパッケージ群を破壊しないように、 `"
"ユーザインストール <user installation>`_ を行います。インストール後にシェルか"
"ら ``pipenv`` が利用できない場合は、 :py:data:`ユーザベース <python:site."
"USER_BASE>` のバイナリディレクトリを ``PATH`` 変数に追加する必要があるでしょ"
"う。詳しくは、 :ref:`ユーザサイトにインストールする <Installing to the User "
"Site>` を見てください。"

#: ../source/tutorials/managing-dependencies.rst:62
msgid "Installing packages for your project"
msgstr "プロジェクト用にパッケージをインストールする"

#: ../source/tutorials/managing-dependencies.rst:64
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this "
"tutorial) and run:"
msgstr ""
"Pipenv は、プロジェクト毎に依存関係を管理します。パッケージをインストールする"
"には、まずプロジェクト (このチュートリアル用にはからのディレクトリへ行けば十"
"分) のディレクトリへ行って、以下のコマンドを実行してください:"

#: ../source/tutorials/managing-dependencies.rst:73
msgid ""
"Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you "
"in your project's directory. The :ref:`Pipfile` is used to track which "
"dependencies your project needs in case you need to re-install them, such as "
"when you share your project with others. You should get output similar to "
"this (although the exact paths shown will vary):"
msgstr ""
"Pipenv は、 `Requests`_ ライブラリをインストールし、プロジェクトのディレクト"
"リに ``Pipfile`` を作成するでしょう。 :ref:`Pipfile` は、そのプロジェクトを共"
"有している場合などのように、再インストールが必要な時にそのプロジェクトが必要"
"とする依存関係を追跡するために使われます。 (正確なディレクトリパスは変化する"
"としても) これに似た出力が表示されるべきです:"

#: ../source/tutorials/managing-dependencies.rst:109
msgid "Using installed packages"
msgstr "インストール済みのパッケージを使う"

#: ../source/tutorials/managing-dependencies.rst:111
msgid ""
"Now that Requests is installed you can create a simple :file:`main.py` file "
"to use it:"
msgstr ""
"今や、Requests がインストールされたので、それを使うために単純な :file:`main."
"py` ファイルを作成しましょう:"

#: ../source/tutorials/managing-dependencies.rst:122
msgid "Then you can run this script using ``pipenv run``:"
msgstr "続いて ``pipenv run`` を使ってこのスクリプトを走らせます:"

#: ../source/tutorials/managing-dependencies.rst:128
msgid "You should get output similar to this:"
msgstr "大体こんな感じの出力が得られるはずです:"

#: ../source/tutorials/managing-dependencies.rst:134
msgid ""
"Using ``pipenv run`` ensures that your installed packages are available to "
"your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``pipenv shell``."
msgstr ""
"``pipenv run`` を使うことで、インストール済みのパッケージを確実にスクリプトか"
"ら利用できるようになります。``pipenv shell`` で新しいシェルを立ち上げれば、あ"
"らゆるコマンドからインストール済みパッケージへのアクセスが保証されます。"

#: ../source/tutorials/managing-dependencies.rst:140
#: ../source/tutorials/packaging-projects.rst:484
msgid "Next steps"
msgstr "次なる一歩"

#: ../source/tutorials/managing-dependencies.rst:142
msgid ""
"Congratulations, you now know how to effectively manage dependencies and "
"development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""
"おめでとう、今やあなたは、共同作業を必要とする Python プロジェクトにおいて、"
"依存関係や開発環境を効率良く管理する方法をご存知です！✨ 🍰 ✨"

#: ../source/tutorials/managing-dependencies.rst:145
msgid ""
"If you're interested in creating and distributing your own Python packages, "
"see the :ref:`tutorial on packaging and distributing packages <distributing-"
"packages>`."
msgstr ""
"自分で Python パッケージを作成したり配布したりすることに興味があるなら、 :"
"ref:`パッケージングとパッケージ配布のためのチュートリアル <distributing-"
"packages>` を見てください。"

#: ../source/tutorials/managing-dependencies.rst:148
msgid ""
"Note that when your application includes definitions of Python source "
"packages, they (and their dependencies) can be added to your ``pipenv`` "
"environment with ``pipenv install -e <relative-path-to-source-directory>`` "
"(e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""
"あなたのアプリケーションが Python ソースコードパッケージの定義を含んでいる場"
"合には、 ``pipenv install -e <relative-path-to-source-directory>`` (例えば "
"``pipenv install -e .`` や ``pipenv install -e src``) によって、 (その依存先"
"も含めて) それがあなたの ``pipenv`` 環境にインストールされ得ることに注意して"
"ください。"

#: ../source/tutorials/managing-dependencies.rst:157
msgid "Other Tools for Application Dependency Management"
msgstr "アプリケーションの依存関係管理のためのその他のツール"

#: ../source/tutorials/managing-dependencies.rst:159
msgid ""
"If you find this particular approach to managing application dependencies "
"isn't working well for you or your use case, you may want to explore these "
"other tools and techniques, listed in alphabetical order, to see if one of "
"them is a better fit:"
msgstr ""
"アプリケーションの依存関係管理で、あなたのユースケースではこの特定のアプロー"
"チがあまりうまく働かないことがわかったならば、この後にアルファベット順に列挙"
"する他のツール群やテクニックがより上手く使えるかどうか試してみたくなるかもし"
"れません:"

#: ../source/tutorials/managing-dependencies.rst:163
msgid ""
"`hatch <https://github.com/pypa/hatch>`_ for opinionated coverage of even "
"more steps in the project management workflow, such as incrementing versions "
"and creating new skeleton projects from project templates."
msgstr ""
"`hatch <https://github.com/pypa/hatch>`_ は、プロジェクト管理のワークフローに"
"おいて、バージョン番号の増やし方やテンプレートから新しいスケルトンプロジェク"
"トを作成するやり方など、ステップ数は増えてもこだわりのあるやり方でやろうとす"
"るツールです。"

#: ../source/tutorials/managing-dependencies.rst:166
msgid ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ for a "
"lightweight wrapper around pip that supports ``requirements.txt``, Pipenv "
"and Poetry lock files, or converting them to pip-tools compatible output. "
"Designed for containerized Python applications, but not limited to them."
msgstr ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ は、 pip に対す"
"る軽量のラッパで ``requirements.txt`` や Pipenv や Poetry のロックファイル、"
"あるいはそれらを pip ツールと互換性のある形への変換出力をサポートするツールで"
"す。コンテナ化された Python アプリケーションのために設計されましたが、用途は"
"それに限りません。"

#: ../source/tutorials/managing-dependencies.rst:170
msgid ""
"`PDM <https://github.com/pdm-project/pdm>`_ for a modern Python package "
"management tool supporting :pep:`582` (replacing virtual environments with "
"``__pypackages__`` directory for package installation) and relying on "
"standards such as :pep:`517` and :pep:`621`."
msgstr ""
"`PDM <https://github.com/pdm-project/pdm>`_ は、近代的な Python パッケージ管"
"理ツールで、 (パッケージインストールのための ``__pypackages__`` ディレクトリ"
"を採用した仮想環境を置き換える) :pep:`582` をサポートしており、 :pep:`517` "
"や :pep:`621` のような標準に立脚しています。"

#: ../source/tutorials/managing-dependencies.rst:174
#: ../source/tutorials/managing-dependencies.rst:172
msgid ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ for creating a lock "
"file of all dependencies from a list of packages directly used in a project, "
"and ensuring that only those dependencies are installed."
msgstr ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ は、プロジェクト内で直接"
"使われているパッケージのリストから全ての依存関係のロックファイルを生成する"
"ツールで、依存関係に現れるものだけがインストールされていることを保証します。"

#: ../source/tutorials/managing-dependencies.rst:177
#: ../source/tutorials/managing-dependencies.rst:175
msgid ""
"`Poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable "
"in scope to Pipenv that focuses more directly on use cases where the project "
"being managed is structured as a distributable Python package with a valid "
"``pyproject.toml`` file. By contrast, Pipenv explicitly avoids making the "
"assumption that the application being worked on will support distribution as "
"a ``pip``-installable Python package."
msgstr ""
"`Poetry <https://github.com/python-poetry/poetry>`__ は、そのカバーする範囲と"
"いう点で Pipenv と互換性のあるツールで、 ``pyproject.toml`` ファイルを使った"
"配布可能な Python パッケージとしてプロジェクト管理のユースケースが構成されて"
"いる場合にもっと直接に使用することに焦点を当てたものです。これとは対照的に、 "
"Pipenv は明示的に、 (開発) 作業中のアプリケーションが ``pip`` でインストール"
"可能な Python パッケージとしての配布をサポートしているという仮定を置くことを"
"避けています。"

#: ../source/tutorials/packaging-projects.rst:2
msgid "Packaging Python Projects"
msgstr "Python のプロジェクトをパッケージングする"

#: ../source/tutorials/packaging-projects.rst:4
msgid ""
"This tutorial walks you through how to package a simple Python project. It "
"will show you how to add the necessary files and structure to create the "
"package, how to build the package, and how to upload it to the Python "
"Package Index (PyPI)."
msgstr ""
"このチュートリアルでは、簡単な Python プロジェクトをどのようにしてパッケージ"
"するのかについて、一通り見て回ります。パッケージを構成するために必要なファイ"
"ルやディレクトリを追加する方法や、パッケージをビルドする方法、そして、Python "
"パッケージインデックス (PyPI) にパッケージをアップロードする方法をお見せしま"
"す。"

#: ../source/tutorials/packaging-projects.rst:10
msgid ""
"If you have trouble running the commands in this tutorial, please copy the "
"command and its output, then `open an issue`_ on the `packaging-problems`_ "
"repository on GitHub. We'll do our best to help you!"
msgstr ""
"このチュートリアルに出てくるコマンドを実行したら問題が発生したという場合に"
"は、コマンドと結果出力をコピーして、 GitHub の `packaging-problems`_ リポジト"
"リで `新たな課題 <open an issue>`_ を追加してください。我々が全力であなたをお"
"助けします！"

#: ../source/tutorials/packaging-projects.rst:18
msgid ""
"Some of the commands require a newer version of :ref:`pip`, so start by "
"making sure you have the latest version installed:"
msgstr ""
"コマンドの中のいくつかは新しめのバージョンの :ref:`pip` でないとだめなので、"
"最新版をインストールして使っていることを最初に確認しておいてください:"

#: ../source/tutorials/packaging-projects.rst:35
msgid "A simple project"
msgstr "単純なプロジェクト"

#: ../source/tutorials/packaging-projects.rst:37
msgid ""
"This tutorial uses a simple project named "
"``example_package_YOUR_USERNAME_HERE``. If your username is ``me``, then the "
"package would be ``example_package_me``; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial. We recommend following this tutorial as-is using "
"this project, before packaging your own project."
msgstr ""
"このチュートリアルは、 ``example_package_YOUR_USERNAME_HERE`` という名前の単"
"純なプロジェクトを使っています。もしあなたのユーザ名が ``me`` であるなら、"
"パッケージの名前は ``example_package_me`` となるでしょう; こうすることで、こ"
"のチュートリアルに従っている他の人たちがアップロードするパッケージ群と名前が"
"衝突することのない一意なパッケージ名を使っていることを保証できます。自分自身"
"のプロジェクトのパッケージングを始める前に、このプロジェクト名を使ってこの"
"チュートリアルに沿った練習をすることをお勧めします。"

#: ../source/tutorials/packaging-projects.rst:44
msgid "Create the following file structure locally:"
msgstr "ローカルに以下のファイル構造を作成する:"

#: ../source/tutorials/packaging-projects.rst:54
msgid ""
"The directory containing the Python files should match the project name. "
"This simplifies the configuration and is more obvious to users who install "
"the package."
msgstr ""
"Python ファイル群を格納するディレクトリは、プロジェクト名と同じ名前であるべき"
"です。こうすることで設定が簡単になり、また、パッケージをインストールするユー"
"ザから見てより明白になります。"

#: ../source/tutorials/packaging-projects.rst:57
msgid ""
":file:`__init__.py` is required to import the directory as a package, and "
"should be empty."
msgstr ""
"パッケージとしてのディレクトリをインポートするには :file:`__init__.py` が存在"
"していなければならず、また、それは空であるべきです。"

#: ../source/tutorials/packaging-projects.rst:60
msgid ""
":file:`example.py` is an example of a module within the package that could "
"contain the logic (functions, classes, constants, etc.) of your package. "
"Open that file and enter the following content:"
msgstr ""
":file:`example.py` は、パッケージの中であなたのパッケージのロジック (関数・ク"
"ラス・定数・その他) を含むであろうモジュールの例です。このファイルを開いて、"
"以下の内容を入力してください:"

#: ../source/tutorials/packaging-projects.rst:69
msgid ""
"If you are unfamiliar with Python's :term:`modules <Module>` and :term:"
"`import packages <Import Package>`, take a few minutes to read over the "
"`Python documentation for packages and modules`_."
msgstr ""
"Python における :term:`モジュール <Module>` や :term:`パッケージのインポート "
"<Import Package>` に馴染みがなければ、数分を費やして `パッケージとモジュール"
"に関する Python の説明文書 <Python documentation for packages and modules>`_ "
"を読み通してください。"

#: ../source/tutorials/packaging-projects.rst:73
msgid ""
"Once you create this structure, you'll want to run all of the commands in "
"this tutorial within the ``packaging_tutorial`` directory."
msgstr ""
"この構造さえ作れば、このチュートリアルに出てくるすべてのコマンドを "
"``packaging_tutorial`` ディレクトリで実行したくなるでしょう。"

#: ../source/tutorials/packaging-projects.rst:81
msgid "Creating the package files"
msgstr "パッケージファイルを作成する"

#: ../source/tutorials/packaging-projects.rst:83
msgid ""
"You will now add files that are used to prepare the project for "
"distribution. When you're done, the project structure will look like this:"
msgstr ""
"ここで、プロジェクトの配布を準備するために使われるファイル群を追加しましょ"
"う。それが終わったら、プロジェクトの構造はこんな風になっていることでしょう:"

#: ../source/tutorials/packaging-projects.rst:101
msgid "Creating a test directory"
msgstr "test ディレクトリを作成する"

#: ../source/tutorials/packaging-projects.rst:103
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""
":file:`tests/` は、テスト用のファイルを置くためのプレースホルダーです。現段階"
"では、空のままにしておいてください。"

#: ../source/tutorials/packaging-projects.rst:107
msgid "Creating pyproject.toml"
msgstr "pyproject.toml を作成する"

#: ../source/tutorials/packaging-projects.rst:112
msgid ""
":file:`pyproject.toml` tells \"frontend\" build tools like :ref:`pip` and :"
"ref:`build` what \"backend\" tool to use to create :term:`distribution "
"packages <Distribution Package>` for your project. You can choose from a "
"number of backends; this tutorial uses :ref:`Hatchling <hatch>` by default, "
"but it will work identically with :ref:`setuptools`, :ref:`Flit <flit>`, :"
"ref:`PDM <pdm>`, and others that support the ``[project]`` table for :ref:"
"`metadata <configuring metadata>`."
msgstr ""
":file:`pyproject.toml` は、 :ref:`pip` や :ref:`build` のような \"フロントエ"
"ンド\" のビルドツールに対して、どの \"backend\"を使ってそのプロジェクトの :"
"term:`配布パッケージ <Distribution Package>` を作成するべきかを指定します。"
"バックエンドの選択肢は多数あります; このチュートリアルでは :ref:`Hatchling "
"<hatch>` をデフォルトとして使っていますが、 :ref:`メタデータの設定 "
"<configuring metadata>` のための ``[project]`` テーブルをサポートしてさえいれ"
"ば :ref:`setuptools` ・ :ref:`Flit <flit>` ・ :ref:`PDM <pdm>` やその他のツー"
"ルでも同じように動作することでしょう。"

#: ../source/tutorials/packaging-projects.rst:122
msgid ""
"Some build backends are part of larger tools that provide a command-line "
"interface with additional features like project initialization and version "
"management, as well as building, uploading, and installing packages. This "
"tutorial uses single-purpose tools that work independently."
msgstr ""
"ビルド・アップロード・インストールと並んでプロジェクト初期化やバージョン管理"
"のような追加機能を伴ったコマンドラインインタフェースを提供する、もっと大きな"
"ツールの一部を構成するビルドバックエンドもあります。このチュートリアルでは、"
"独立に動作する単一目的のツールを扱います。"

#: ../source/tutorials/packaging-projects.rst:127
msgid ""
"Open :file:`pyproject.toml` and enter one of these ``[build-system]`` tables:"
msgstr ""
":file:`pyproject.toml` を開いて、これらの ``[build-system]`` テーブルのうちの"
"ひとつを入力してください:"

#: ../source/tutorials/packaging-projects.rst:162
msgid ""
"``requires`` is a list of packages that are needed to build your package. "
"You don't need to install them; build frontends like :ref:`pip` will install "
"them automatically in a temporary, isolated virtual environment for use "
"during the build process."
msgstr ""
"``requires`` は、当該パッケージをビルドするために必要となるパッケージ群を列挙"
"したものです。これらを自分でインストールする必要はなく; :ref:`pip` のようなビ"
"ルドフロントエンドが、ビルド作業の一環として、一時的で隔離された仮想環境に自"
"動的にインストールしてくれることでしょう。"

#: ../source/tutorials/packaging-projects.rst:166
msgid ""
"``build-backend`` is the name of the Python object that frontends will use "
"to perform the build."
msgstr ""
"``build-backend`` は、そのフロントエンドがビルドを実行するにあたって使用する"
"であろう Python オブジェクトの名前です。"

#: ../source/tutorials/packaging-projects.rst:174
msgid "Configuring metadata"
msgstr "メタデータを設定する"

#: ../source/tutorials/packaging-projects.rst:176
msgid ""
"Open :file:`pyproject.toml` and enter the following content. Change the "
"``name`` to include your username; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial."
msgstr ""
":file:`pyproject.toml` を開いて、以下の内容を入力してください。 ``name`` の値"
"はあなたのユーザ名に書き換えてください; こうすることで、このチュートリアルを"
"履修している他の人たちがアップロードするパッケージと衝突を起こさない一意な"
"パッケージ名を使っていることを保証することができます。"

#: ../source/tutorials/packaging-projects.rst:202
msgid ""
"``name`` is the *distribution name* of your package. This can be any name as "
"long as it only contains letters, numbers, ``.``, ``_`` , and ``-``. It also "
"must not already be taken on PyPI. **Be sure to update this with your "
"username** for this tutorial, as this ensures you won't try to upload a "
"package with the same name as one which already exists."
msgstr ""
"``name`` は、あなたのパッケージの *配布物の名前* です。これは、文字・数字・ "
"``.`` ・ ``_`` ・ ``-`` だけで構成されている限りは、どんな名前でも構いませ"
"ん。また、 PyPI 上に既に存在するものであってはなりません。このチュートリアル"
"では、あなたのユーザ名を使って更新していることを **確実にしてください** 、と"
"いうのは、そうすることで、既存の名前と同じ名前のパッケージのアップロードを試"
"みることがないと保証できるからです。"

#: ../source/tutorials/packaging-projects.rst:207
msgid ""
"``version`` is the package version. See the :ref:`version specifier "
"specification <version-specifiers>` for more details on versions. Some build "
"backends allow it to be specified another way, such as from a file or a git "
"tag."
msgstr ""
"``version`` は、パッケージのバージョン番号です。バージョン番号についてもっと"
"詳細に知りたい場合は、 :ref:`バージョン指定子 <version-specifiers>` を見てく"
"ださい。ビルドバックエンドの中には、ファイルから、もしくは、 git のタグからの"
"ように、別の方法で指定することを許容するものもあります。"

#: ../source/tutorials/packaging-projects.rst:210
msgid ""
"``authors`` is used to identify the author of the package; you specify a "
"name and an email for each author. You can also list ``maintainers`` in the "
"same format."
msgstr ""
"``authors`` は、パッケージの作者を識別するために使われます; 作者の一人一人に"
"ついて名前と電子メールアドレスを指定します。同じフォーマットで "
"``maintainers`` を列挙することもできます。"

#: ../source/tutorials/packaging-projects.rst:213
msgid "``description`` is a short, one-sentence summary of the package."
msgstr "``description`` は、１文で短くパッケージを説明するものです。"

#: ../source/tutorials/packaging-projects.rst:214
msgid ""
"``readme`` is a path to a file containing a detailed description of the "
"package. This is shown on the package detail page on PyPI. In this case, the "
"description is loaded from :file:`README.md` (which is a common pattern). "
"There also is a more advanced table form described in the :ref:`project "
"metadata specification <declaring-project-metadata>`."
msgstr ""
"``readme`` は、パッケージに関する詳細な説明を含んだファイルへのパスです。 "
"PyPI 上のパッケージ詳細のページにこの内容が表示されます。この場合、説明の文言"
"は :file:`README.md` (これがよくあるパターンです) からロードされます。他に"
"も、 :ref:`プロジェクトのメタデータの仕様 <declaring-project-metadata>` に記"
"述されているもっと先進的なテーブル形式があります。"

#: ../source/tutorials/packaging-projects.rst:219
msgid ""
"``requires-python`` gives the versions of Python supported by your project. "
"Installers like :ref:`pip` will look back through older versions of packages "
"until it finds one that has a matching Python version."
msgstr ""
"``requires-python`` は、そのプロジェクトがサポートしている Python のバージョ"
"ンを与えます。 :ref:`pip` のようなインストーラは、 Python バージョンが合致す"
"るものまでパッケージのバージョンを遡って探索します。"

#: ../source/tutorials/packaging-projects.rst:222
msgid ""
"``classifiers`` gives the index and :ref:`pip` some additional metadata "
"about your package. In this case, the package is only compatible with Python "
"3, is licensed under the MIT license, and is OS-independent. You should "
"always include at least which version(s) of Python your package works on, "
"which license your package is available under, and which operating systems "
"your package will work on. For a complete list of classifiers, see https://"
"pypi.org/classifiers/."
msgstr ""
"``classifiers`` は、インデックスと :ref:`pip` に、そのパッケージに関する追加"
"的なメタデータをいくつか与えます。この場合には、当該パッケージは Python 3 で"
"のみ動作し、 MIT ライセンスの下に従うものであり、 OS には依らず独立のもので"
"す。どのバージョンの Python 上でそのパッケージが動作するのか、どのライセンス"
"に従うのか、どのオペレーティングシステムで動作するのかを示しておくことは、常"
"に最低限それだけはやるべきことです。 classifiers の完全なリストについては、 "
"https://pypi.org/classifiers/ を見てください。"

#: ../source/tutorials/packaging-projects.rst:229
msgid ""
"``urls`` lets you list any number of extra links to show on PyPI. Generally "
"this could be to the source, documentation, issue trackers, etc."
msgstr ""
"``urls`` には、 PyPI で表示するその他のリンクを幾つでも列挙しておくことができ"
"ます。一般的に、ソースコードや説明文書、課題追跡システムその他へのリンクを挙"
"げておけばよいでしょう。"

#: ../source/tutorials/packaging-projects.rst:232
msgid ""
"See the :ref:`project metadata specification <declaring-project-metadata>` "
"for details on these and other fields that can be defined in the "
"``[project]`` table. Other common fields are ``keywords`` to improve "
"discoverability and the ``dependencies`` that are required to install your "
"package."
msgstr ""
"``[project]`` テーブルに定義できるこれらのフィールドやその他のフィールドにつ"
"いての詳しい情報が必要であれば、 :ref:`プロジェクトにおけるメタデータの仕様 "
"<declaring-project-metadata>` を見てください。他のよく使われるフィールドに"
"は、検索にかかりやすくするための ``keywords`` や、当該パッケージをインストー"
"ルするために必須のパッケージを示す ``dependencies`` があります。"

#: ../source/tutorials/packaging-projects.rst:238
msgid "Creating README.md"
msgstr "README.md を作成する"

#: ../source/tutorials/packaging-projects.rst:240
msgid ""
"Open :file:`README.md` and enter the following content. You can customize "
"this if you'd like."
msgstr ""
":file:`README.md` を開いて、以下の内容を入力してください。そうしたければ、カ"
"スタマイズした内容でも構いません。"

#: ../source/tutorials/packaging-projects.rst:253
msgid "Creating a LICENSE"
msgstr "LICENSE ファイルを作成する"

#: ../source/tutorials/packaging-projects.rst:255
msgid ""
"It's important for every package uploaded to the Python Package Index to "
"include a license. This tells users who install your package the terms under "
"which they can use your package. For help picking a license, see https://"
"choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` "
"and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""
"Python パッケージインデックスにアップロードされた各々のパッケージにとって、ラ"
"イセンス条項を明示することは重要です。こうすることで、そのパッケージをインス"
"トールするユーザに対して、どのような条件のもとでそのパッケージを使うことがで"
"きるのかを伝えることができるからです。ライセンス選択の助けが必要ならば、 "
"https://choosealicense.com/ を見てください。どのライセンスにするか選択できた"
"ら、 :file:`LICENSE` ファイルを開いてそのライセンス条項を書き込んでください。"
"例えば、 MIT ライセンスを選択したなら次のようにします:"

#: ../source/tutorials/packaging-projects.rst:284
msgid ""
"Most build backends automatically include license files in packages. See "
"your backend's documentation for more details."
msgstr ""
"ほとんどのビルドバックエンドは、パッケージ群のライセンスファイルを自動的に取"
"り込みます。詳細については、あなたが使うバックエンドの説明文書を見てくださ"
"い。"

#: ../source/tutorials/packaging-projects.rst:289
msgid "Including other files"
msgstr "その他のファイルを包含する"

#: ../source/tutorials/packaging-projects.rst:291
msgid ""
"The files listed above will be included automatically in your :term:`source "
"distribution <Source Distribution (or \"sdist\")>`. If you want to include "
"additional files, see the documentation for your build backend."
msgstr ""
"上に挙げたファイル群は、 :term:`ソースコード配布物 <Source Distribution (or "
"\"sdist\")>` に自動的に含まれるでしょう。他のファイルも含めておきたいなら、"
"使っているビルドバックエンドの説明文書を見てください。"

#: ../source/tutorials/packaging-projects.rst:298
msgid "Generating distribution archives"
msgstr "配布物アーカイブを生成する"

#: ../source/tutorials/packaging-projects.rst:300
msgid ""
"The next step is to generate :term:`distribution packages <Distribution "
"Package>` for the package. These are archives that are uploaded to the "
"Python Package Index and can be installed by :ref:`pip`."
msgstr ""
"次のステップでは、そのパッケージの :term:`配布物パッケージ <Distribution "
"Package>` を生成します。これらは、 Python パッケージインデックスへアップロー"
"ドされ、 :ref:`pip` でインストールされることができるものです。"

#: ../source/tutorials/packaging-projects.rst:304
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""
"PyPA の :ref:`build` の最新版がインストールされていることを確認してください:"

#: ../source/tutorials/packaging-projects.rst:318
msgid ""
"If you have trouble installing these, see the :doc:`installing-packages` "
"tutorial."
msgstr ""
"これらをインストールするのに困難を感じるようなら、 :doc:`パッケージをインス"
"トールする <installing-packages>` チュートリアルを見てください。"

#: ../source/tutorials/packaging-projects.rst:321
msgid ""
"Now run this command from the same directory where :file:`pyproject.toml` is "
"located:"
msgstr ""
"さて、 :file:`pyproject.toml` ファイルがあるのと同じディレクトリでこのコマン"
"ドを実行しましょう:"

#: ../source/tutorials/packaging-projects.rst:335
msgid ""
"This command should output a lot of text and once completed should generate "
"two files in the :file:`dist` directory:"
msgstr ""
"このコマンドから多くのテキストメッセージが出力されますが、実行が終われば :"
"file:`dist` ディレクトリにふたつのファイルが生成されていることでしょう:"

#: ../source/tutorials/packaging-projects.rst:345
msgid ""
"The ``tar.gz`` file is a :term:`source distribution <Source Distribution (or "
"\"sdist\")>` whereas the ``.whl`` file is a :term:`built distribution <Built "
"Distribution>`. Newer :ref:`pip` versions preferentially install built "
"distributions, but will fall back to source distributions if needed. You "
"should always upload a source distribution and provide built distributions "
"for the platforms your project is compatible with. In this case, our example "
"package is compatible with Python on any platform so only one built "
"distribution is needed."
msgstr ""
"``tar.gz`` ファイルは :term:`ソースコード配布物 <Source Distribution (or "
"\"sdist\")>` であり、 ``.whl`` ファイルは :term:`ビルド済配布物 <Built "
"Distribution>` です。新しめのバージョンの :ref:`pip` では、ビルド済配布物を優"
"先的にインストールしますが、必要であればソースコード配布物にフォールバックし"
"ます。ソースコード配布物については常にアップロードするべきであり、あなたのプ"
"ロジェクトが動作するはずのプラットフォーム向けのビルド済配布物についても準備"
"するべきです。我々の例示のためのパッケージはすべてのプラットフォーム上の "
"Python で動作するものなので、ビルド済配布物がひとつあれば十分です。"

#: ../source/tutorials/packaging-projects.rst:354
msgid "Uploading the distribution archives"
msgstr "配布物アーカイブをアップロードする"

#: ../source/tutorials/packaging-projects.rst:356
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""
"ついにあなたのパッケージを Python パッケージインデックスへアップロードする時"
"が来ました！"

#: ../source/tutorials/packaging-projects.rst:358
msgid ""
"The first thing you'll need to do is register an account on TestPyPI, which "
"is a separate instance of the package index intended for testing and "
"experimentation. It's great for things like this tutorial where we don't "
"necessarily want to upload to the real index. To register an account, go to "
"https://test.pypi.org/account/register/ and complete the steps on that page. "
"You will also need to verify your email address before you're able to upload "
"any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""
"最初に実行しなければならないことは、試験や実験の場となることを意図してパッ"
"ケージインデックスとは別のインスタンスとして立てられたインスタンスである "
"TestPyPI にアカウントを登録することです。このチュートリアルのように、必ずしも"
"実際のインデックスにアップロードしたいと思わない場合には、 (TestPI は) 最適で"
"す。アカウントを登録するためには、 https://test.pypi.org/account/register/ へ"
"行って、そのページにあるステップを完了してください。パッケージをアップロード"
"できるようになる前に、あなたの電子メールアドレスを検証することも必要になるで"
"しょう。もっと詳しいことが知りたければ、 :doc:`/guides/using-testpypi` を見て"
"ください。"

#: ../source/tutorials/packaging-projects.rst:366
msgid ""
"To securely upload your project, you'll need a PyPI `API token`_. Create one "
"at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" "
"to \"Entire account\". **Don't close the page until you have copied and "
"saved the token — you won't see that token again.**"
msgstr ""
"あなたのプロジェクトを安全にアップロードするためには、 PyPI `API トークン "
"<API Token>`_ が必要になるでしょう。 https://test.pypi.org/manage/account/"
"#api-tokens で、 \"スコープ\" として \"アカウント全体\" を指定して、ひとつ作"
"成してください。 **トークンをコピーして保存するまで、ページを閉じないでくださ"
"い — トークンは二度と表示されません。**"

#: ../source/tutorials/packaging-projects.rst:373
msgid ""
"Now that you are registered, you can use :ref:`twine` to upload the "
"distribution packages. You'll need to install Twine:"
msgstr ""
"ユーザ登録が済んだら、 :ref:`twine` で配布物パッケージをアップロードすること"
"ができます。Twine のインストールが必要ならこのようにしてください:"

#: ../source/tutorials/packaging-projects.rst:388
msgid ""
"Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""
"インストールできたら、 :file:`dist` ディレクトリ内にあるアーカイブファイルを"
"すべてアップとーどしてください:"

#: ../source/tutorials/packaging-projects.rst:402
msgid ""
"You will be prompted for a username and password. For the username, use "
"``__token__``. For the password, use the token value, including the ``pypi-"
"`` prefix."
msgstr ""
"ユーザ名とパスワードの入力を促されることでしょう。ユーザ名には ``__token__`` "
"を使ってください。パスワードには接頭子の ``pypi-`` を含めたトークンの値を使っ"
"てください。"

#: ../source/tutorials/packaging-projects.rst:406
msgid "After the command completes, you should see output similar to this:"
msgstr "コマンド実行完了後、これに似た出力を見ることになるでしょう:"

#: ../source/tutorials/packaging-projects.rst:417
msgid ""
"Once uploaded, your package should be viewable on TestPyPI; for example: "
"``https://test.pypi.org/project/example_package_YOUR_USERNAME_HERE``."
msgstr ""
"あなたのパッケージをアップロードしたら、 TestPyPI 上で閲覧できるようになりま"
"す; 例えば: ``https://test.pypi.org/project/"
"example_package_YOUR_USERNAME_HERE`` 。"

#: ../source/tutorials/packaging-projects.rst:422
msgid "Installing your newly uploaded package"
msgstr "新しくアップロードしたあなたのパッケージをインストールする"

#: ../source/tutorials/packaging-projects.rst:424
msgid ""
"You can use :ref:`pip` to install your package and verify that it works. "
"Create a :ref:`virtual environment <Creating and using Virtual "
"Environments>` and install your package from TestPyPI:"
msgstr ""
":ref:`pip` を使えば、あなたのパッケージをインストールして動作を検証することが"
"できます。 :ref:`仮想環境 <Creating and using Virtual Environments>` を作成し"
"て、 TestPyPI からあなたのパッケージをインストールしましょう:"

#: ../source/tutorials/packaging-projects.rst:440
msgid "Make sure to specify your username in the package name!"
msgstr "パッケージ名の中にあなたのユーザ名を指定するのをお忘れなく！"

#: ../source/tutorials/packaging-projects.rst:442
msgid ""
"pip should install the package from TestPyPI and the output should look "
"something like this:"
msgstr ""
"pip でパッケージを TestPyPI からインストールできるはずで、その出力は何か次の"
"ようなものに見えるでしょう:"

#: ../source/tutorials/packaging-projects.rst:452
msgid ""
"This example uses ``--index-url`` flag to specify TestPyPI instead of live "
"PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have "
"the same packages as the live PyPI, it's possible that attempting to install "
"dependencies may fail or install something unexpected. While our example "
"package doesn't have any dependencies, it's a good practice to avoid "
"installing dependencies when using TestPyPI."
msgstr ""
"この例では ``--index-url`` フラグを使って本番環境である PyPI の代わりに "
"TestPyPI を指定しています。さらに、 ``--no-deps`` も指定しています。 "
"TestPyPI には本番環境である PyPI と同じだけのパッケージが存在しないので、依存"
"先となるパッケージを同時にインストールしようとしても、失敗するか、または、期"
"待していたものとは異なる何かをインストールしてしまう恐れがあります。我々の例"
"として使っているパッケージには依存先がないので、 TestPyPI を使う時には依存先"
"をインストールしないように指定しておくことは良いやり方です。"

#: ../source/tutorials/packaging-projects.rst:459
msgid ""
"You can test that it was installed correctly by importing the package. Make "
"sure you're still in your virtual environment, then run Python:"
msgstr ""
"パッケージをインポートしてみることで、正しくインストールされたかどうかを試験"
"することができます。まだ仮想環境内にいることを確認してから Python を走らせま"
"しょう:"

#: ../source/tutorials/packaging-projects.rst:474
msgid "and import the package:"
msgstr "そして、パッケージをインポートしましょう:"

#: ../source/tutorials/packaging-projects.rst:486
msgid ""
"**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 ✨"
msgstr ""
"**おめでとうございます、あなたは Python のプロジェクトをパッケージングし、配"
"布することができました！** ✨ 🍰 ✨"

#: ../source/tutorials/packaging-projects.rst:489
msgid ""
"Keep in mind that this tutorial showed you how to upload your package to "
"Test PyPI, which isn't a permanent storage. The Test system occasionally "
"deletes packages and accounts. It is best to use TestPyPI for testing and "
"experiments like this tutorial."
msgstr ""
"このチュートリアルではあなたのパッケージを Test PyPI に、つまり永続的なスト"
"レージではないところにアップロードする方法について示したということを忘れない"
"でください。テストシステムは、時折パッケージやアカウントを削除します。 Test "
"PyPI は、このチュートリアルのような試行や実験のために使うのがベストです。"

#: ../source/tutorials/packaging-projects.rst:494
msgid ""
"When you are ready to upload a real package to the Python Package Index you "
"can do much the same as you did in this tutorial, but with these important "
"differences:"
msgstr ""
"実際のパッケージを Python パッケージインデックスへアップロードする準備ができ"
"たら、このチュートリアルでやったのと概ね同じことをやれば大丈夫ですが、次のよ"
"うな重要な違いがあります:"

#: ../source/tutorials/packaging-projects.rst:498
msgid ""
"Choose a memorable and unique name for your package. You don't have to "
"append your username as you did in the tutorial, but you can't use an "
"existing name."
msgstr ""
"あなたのパッケージ用に覚えやすくて独特な名前を付けましょう。チュートリアルで"
"やったようにあなたのユーザ名を追記する必要はありませんが、既存の名前は使えま"
"せん。"

#: ../source/tutorials/packaging-projects.rst:500
msgid ""
"Register an account on https://pypi.org - note that these are two separate "
"servers and the login details from the test server are not shared with the "
"main server."
msgstr ""
"https://pypi.org でアカウントを登録しましょう - これらはふたつの相異なるサー"
"バであって、テストサーバ側のログイン情報はメインサーバに共有されてはいませ"
"ん。"

#: ../source/tutorials/packaging-projects.rst:503
msgid ""
"Use ``twine upload dist/*`` to upload your package and enter your "
"credentials for the account you registered on the real PyPI.  Now that "
"you're uploading the package in production, you don't need to specify ``--"
"repository``; the package will upload to https://pypi.org/ by default."
msgstr ""
"あなたのパッケージをアップロードするのに ``twine upload dist/*`` を使い、本番"
"環境の PyPI で登録したアカウントの認証情報を入力しましょう。今回は出荷状態の"
"パッケージをアップロードしようとしているので、 ``--repository`` を指定する必"
"要はありません; 指定しないことでパッケージはデフォルトの https://pypi.org/ へ"
"アップロードされるでしょう。"

#: ../source/tutorials/packaging-projects.rst:507
msgid ""
"Install your package from the real PyPI using ``python3 -m pip install [your-"
"package]``."
msgstr ""
"``python3 -m pip install [your-package`` を使って、あなたのパッケージを本番環"
"境の PyPI からインストールしましょう。"

#: ../source/tutorials/packaging-projects.rst:509
msgid ""
"At this point if you want to read more on packaging Python libraries here "
"are some things you can do:"
msgstr ""
"ここまで読み進めてきて、もっと Python でのパッケージングについて読みたいので"
"あれば、次のようなものがあります:"

#: ../source/tutorials/packaging-projects.rst:515
msgid ""
"Consider packaging tools that provide a single command-line interface for "
"project management and packaging, such as :ref:`hatch`, :ref:`flit`, :ref:"
"`pdm`, and :ref:`poetry`."
msgstr ""
":ref:`hatch` ・ :ref:`flit` ・ :ref:`pdm` ・ :ref:`poetry` のように、単一のコ"
"マンドラインインタフェースでプロジェクト管理もパッケージングもできるパッケー"
"ジングツールについて検討しましょう。"

#: ../source/tutorials/packaging-projects.rst:518
msgid ""
"Read :pep:`517` and :pep:`518` for background and details on build tool "
"configuration."
msgstr ""
"ビルドツールの設定に関する背景情報や詳細情報については、 :pep:`517` や :pep:"
"`518` を読みましょう。"

#: ../source/tutorials/packaging-projects.rst:519
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ":doc:`/guides/packaging-binary-extensions` について読みましょう。"

#: ../source/guides/creating-and-discovering-plugins.rst:48
msgid ""
"Using naming convention for plugins also allows you to query the Python "
"Package Index's :ref:`simple repository API <simple-repository-api>` for all "
"packages that conform to your naming convention."
msgstr ""
"プラグインの命名規則を用いることで、"
"あなたの命名規則に従うすべてのパッケージについてPython "
"パッケージインデックスの :ref:`simple repository API <simple-repository-api>`"
" から検索することもできるようになります。"

#: ../source/guides/hosting-your-own-index.rst:57
msgid ""
"For complete documentation of the simple repository protocol, see :ref:"
"`simple repository API <simple-repository-api>`."
msgstr ""
"単純なリポジトリプロトコルの完全な説明文書としては、 :ref:`simple repository "
"API <simple-repository-api>` を見てください。"

#: ../source/tutorials/installing-packages.rst:615
msgid ""
"To install from other data sources (for example Amazon S3 storage) you can "
"create a helper application that presents the data in a format compliant "
"with the :ref:`simple repository API <simple-repository-api>`:, and use the "
"``--extra-index-url`` flag to direct pip to use that index."
msgstr ""
":ref:`simple repository API <simple-repository-api>` 準拠のフォーマットに合わ"
"せてデータを表現するようなヘルパーアプリケーションを作成して、 pip を "
"``--extra-index-url`` フラグでそのインデックスへ向け直すことで、"
"他のデータソース (例えば Amazon S3 ストレージ) "
"からインストールすることができます。"

#: ../source/discussions/install-requires-vs-requirements.rst:41
msgid ""
"It may also be known that project A follows semantic versioning, and that v2 "
"of 'A' will indicate a break in compatibility, so it makes sense to not "
"allow v2:"
msgstr ""
"また、Aがセマンティックバージョニングの方法に従っていて'A'の(将来の)v2は互換"
"性を持たなくなるだろうかということがわかっているので、(自分たちのプロジェクト"
"の側では)v2を許容したくないとしましょう："

#: ../source/discussions/wheel-vs-egg.rst:20
msgid ":term:`Wheel` has an :pep:`official PEP <427>`. :term:`Egg` did not."
msgstr ""
":term:`Wheel`には :pep:`公式PEP <427>`が存在します。 :term:`Egg`には対応する"
"PEPがありません。"

#: ../source/discussions/wheel-vs-egg.rst:47
msgid ""
"Circumstantially, in some cases, wheels can be used as an importable runtime "
"format, although :pep:`this is not officially supported at this time <427#is-"
"it-possible-to-import-python-code-directly-from-a-wheel-file>`."
msgstr ""
":pep:`Wheelファイルから直接にimportすることは現時点では公式にサポートされてい"
"ません<427#is-it-possible-to-import-python-code-directly-from-a-wheel-file>`"
"が、状況によって幾つかのケースでwheelは重要な実行時フォーマットとして使われま"
"す。"

#: ../source/glossary.rst:240
msgid ""
"A :term:`Built Distribution` format introduced by :pep:`427`, which is "
"intended to replace the :term:`Egg` format.  Wheel is currently supported "
"by :ref:`pip`."
msgstr ""
":term:`Egg` フォーマットを代替することを意図して :pep:`427` で導入された :"
"term:`ビルド済配布物`。現在、:ref:`pip`はWheelをサポートしている。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:97
msgid ""
"Note that the rows are stored in a partitioned, which helps limit the cost "
"of queries. These example queries analyze downloads from recent history by "
"filtering on the ``timestamp`` column."
msgstr ""
"クエリのコストを削減するためにデータベースの行がパーティションされた状態で格"
"納されていることを覚えておいてください。これらの例では、``timestamp`` カラム"
"を使って絞り込むことで最近のダウンロード履歴を分析しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:124
msgid ""
"To only count downloads from pip, filter on the ``details.installer.name`` "
"column."
msgstr ""
"pipを通じてダウンロードされた数だけを数えるには、``details.installer.name``カ"
"ラムを使って抽出します。"

#: ../source/guides/installing-using-linux-tools.rst:93
msgid "For CentOS, see here: https://www.softwarecollections.org/en/"
msgstr ""
"CentOS の場合は、こちらを見てください: https://www.softwarecollections.org/"
"en/"

#: ../source/guides/installing-using-linux-tools.rst:118
msgid "Debian/Ubuntu"
msgstr "Debian/Ubuntu"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:95
msgid ""
"This will download your repository into the CI runner and then install and "
"activate Python 3.10."
msgstr ""
"これによって、あなたのリポジトリを CI ランナーにダウンロードして、 Python "
"3.10 をインストールしアクティベートすることになります。"

#: ../source/overview.rst:66
msgid ""
"This is great for sharing simple scripts and snippets between people who "
"both have compatible Python versions (such as via email, StackOverflow, or "
"GitHub gists). There are even some entire Python libraries that offer this "
"as an option, such as `bottle.py <https://bottlepy.org/docs/dev/>`_ and :doc:"
"`boltons <boltons:architecture>`."
msgstr ""
"この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python を"
"持っている人たちどうしで (電子メールや StackOverflow や GitHub gists などで) "
"共有するには優れた方法です。例えば `bottle.py <https://bottlepy.org/docs/dev/"
">`_ and :doc:`boltons <boltons:architecture>` のように、 Python ライブラリ全"
"体をこのやり方で共有することをオプションの一つとして提供しているものさえあり"
"ます。"

#: ../source/overview.rst:301
msgid ""
"Computing as we know it is defined by the ability to execute programs. Every "
"operating system natively supports one or more formats of program they can "
"natively execute."
msgstr ""
"我々が知るところのコンピューティングは、プログラムを実行する能力として定義さ"
"れます。それぞれのオペレーティングシステムは、そのまま実行することが可能なひ"
"とつかもっと多くのプログラムフォーマットを元々サポートしています。"

#: ../source/overview.rst:358
msgid ""
"These techniques are mostly reserved for larger scale deployments in data "
"centers, though certain complex applications can benefit from this "
"packaging. Technologies are Python agnostic, and include:"
msgstr ""
"このような手法は、複雑なアプリケーションの中にはこのパッケージング方法から利"
"益を得るものもありますが、たいていの場合はデータセンタにおけるかなり大規模な"
"配置のために使用します。技術としては Python を直接サポートしているわけではな"
"く、次のものを含みます:"

#: ../source/specifications/index.rst:6
msgid ""
"This is a list of currently active interoperability specifications "
"maintained by the Python Packaging Authority. The process for updating these "
"standards, and for proposing new ones, is documented on `pypa.io <https://"
"www.pypa.io/en/latest/specifications/>`__."
msgstr ""
"これは、 Python パッケージングオーソリティが維持管理している現時点で有効な相"
"互互換性の使用です。これらの標準を更新し新たな標準を提案するプロセスは、 "
"`pypa.io <https://www.pypa.io/en/latest/specifications/>`__ に文書化されてい"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:273
msgid ""
"Either because that character is inconvenient or potentially confusing in "
"some contexts (for example, ``+`` must be quoted in URLs, ``~`` is used to "
"denote the user's home directory in POSIX), or because the advantages "
"weren't sufficiently compelling to justify changing the existing reference "
"implementation for the wheel format defined in :pep:427 (for example, using "
"``,`` rather than ``.`` to separate components in a compressed tag)."
msgstr ""
"それは、その文字が不便であるかコンテクストによっては潜在的に混乱を招きやすい "
"(例えば ``+`` は URL 内ではクォートしなければなりませんし、 ``~`` は POSIX で"
"ユーザのホームディレクトリを示すために使われます) から、あるいは、 :pep:427 "
"で定義された wheel フォーマットを参照して作成された既存の実装を変更すること "
"(例えば、圧縮タグで部分部分を分割するのに ``.`` ではなく ``,`` を使うようにす"
"ること) を正当化するに足りるだけのアドバンテージがないから、のいずれかです。"

#: ../source/overview.rst:66
msgid ""
"This is great for sharing simple scripts and snippets between people who "
"both have compatible Python versions (such as via email, StackOverflow, or "
"GitHub gists). There are even some entire Python libraries that offer this "
"as an option, such as `bottle.py <https://pypi.org/project/bottle/>`_ and :"
"doc:`boltons <boltons:architecture>`."
msgstr ""
"この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python を"
"持っている人たちどうしで (電子メールや StackOverflow や GitHub gists などで) "
"共有するには優れた方法です。例えば `bottle.py <https://pypi.org/project/"
"bottle/>`_ や :doc:`boltons <boltons:architecture>` のように、 Python ライブ"
"ラリ全体をこのやり方で共有することをオプションの一つとして提供しているものさ"
"えあります。"

#: ../source/guides/distributing-packages-using-setuptools.rst:73
msgid ""
"It's the command line interface for running various commands that relate to "
"packaging tasks. To get a listing of available commands, run ``python setup."
"py --help-commands``."
msgstr ""
"それは、パッケージングする上での作業項目に関連したさまざまなコマンドを走らせ"
"るためのコマンドラインインタフェイスです。使用可能なコマンドを一覧するには、 "
"``python setup.py --help-commands`` を実行してください。"

#: ../source/guides/index-mirrors-and-caches.rst:35
msgid ""
"A variation on the above which pre-builds the installation files for the "
"requirements using :ref:`python -m pip wheel <pip:pip wheel>`:"
msgstr ""
":ref:`python -m pip wheel <pip:pip wheel>` を用いて依存先パッケージのインス"
"トール用ファイルをあらかじめビルドしておくという上記のバリエーション:"

#: ../source/guides/multi-version-installs.rst:34
msgid ""
"This can be worked around by setting all dependencies in ``__main__."
"__requires__`` before importing ``pkg_resources`` for the first time, but "
"that approach does mean that standard command line invocations of the "
"affected tools can't be used - it's necessary to write a custom wrapper "
"script or use ``python -c '<command>'`` to invoke the application's main "
"entry point directly."
msgstr ""
"最初に ``pkg_resources`` をインポートするよりも前に ``__main__."
"__requires__`` の中のすべての依存関係を設定しておくことでこの問題を回避するこ"
"とができますが、このアプローチでは影響を受けるツールを標準のコマンドラインか"
"らの呼び出しで使うことができないことになります - つまり、独自のラッパスクリプ"
"トを書くか、アプリケーションの main エントリポイントを直接に呼び出すための "
"``python -c '<command>'`` を使うかしなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:191
msgid "https://bazaar.canonical.com"
msgstr "https://bazaar.canonical.com"

#: ../source/key_projects.rst:489
msgid ""
"PDM is a modern Python package manager. It uses :term:`pyproject.toml` to "
"store project metadata as defined in :pep:`621`."
msgstr ""
"PDM は近代的な Python パッケージ管理ソフトです。 :pep:`621` "
"で定義されている形でプロジェクトのメタデータを :term:`pyproject.toml` "
"に保存します。"

#: ../source/tutorials/managing-dependencies.rst:170
msgid ""
"`PDM <https://github.com/pdm-project/pdm>`_ for a modern Python package "
"management relying on standards such as :pep:`517` and :pep:`621`."
msgstr ""
"`PDM <https://github.com/pdm-project/pdm>`_ は、 :pep:`517` や :pep:`621` "
"のような標準に立脚した近代的な Python パッケージ管理ツールです。"

#~ msgid ""
#~ "This guide *assumes* that you already have a project that you know how to "
#~ "build distributions for and *it lives on GitHub*."
#~ msgstr ""
#~ "このガイドでは、配布物をビルドするやり方がわかっているプロジェクトが "
#~ "*GitHub に置いてある* ことを *前提* にしています。"

#~ msgid ""
#~ "And now we can build dists from source. In this example, we'll use "
#~ "``build`` package, assuming that your project has a ``pyproject.toml`` "
#~ "properly set up (see :pep:`517`/:pep:`518`)."
#~ msgstr ""
#~ "そして、今や我々はソースコードから配布物をビルドすることができます。この例"
#~ "では、あなたのプロジェクトの ``pyproject.toml`` が適切に設定されている (:"
#~ "pep:`517` と :pep:`518` を参照してください) ことを仮定して、 ``build`` "
#~ "パッケージを用いることになります。"

#~ msgid ""
#~ "You can use any other method for building distributions as long as it "
#~ "produces ready-to-upload artifacts saved into the ``dist/`` folder."
#~ msgstr ""
#~ "アップロードできる状態の創作物を ``dist/`` ディレクトリに保存するという条"
#~ "件を満たすのであれば、どのような方法で配布物をビルドしても構いません。"

#~ msgid ""
#~ "These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the "
#~ "first one uploads contents of the ``dist/`` folder into TestPyPI "
#~ "unconditionally and the second does that to PyPI, but only if the current "
#~ "commit is tagged."
#~ msgstr ""
#~ "これらふたつの手順は、 `pypa/gh-action-pypi-publich`_ GitHub アクションを"
#~ "使います: 一つ目は ``dist/`` ディレクトリの中身を無条件に TestPyPI にアッ"
#~ "プロードする時で、二つ目はそのコミットがタグ付けされている場合に限って "
#~ "PyPI へ送る時です。"

#~ msgid ""
#~ "This JSON file MUST be a dictionary, compliant with :rfc:`8259` and UTF-8 "
#~ "encoded."
#~ msgstr ""
#~ "この JSON ファイルは、:rfc:`8259` を満足する辞書になっていて、かつ、 "
#~ "UTF-8 エンコーディングでなければなりません。"

#~ msgid ""
#~ "If present, it MUST contain at least two fields. The first one is "
#~ "``url``, with type ``string``. Depending on what ``url`` refers to, the "
#~ "second field MUST be one of ``vcs_info`` (if ``url`` is a VCS reference), "
#~ "``archive_info`` (if ``url`` is a source archives or a wheel), or "
#~ "``dir_info`` (if ``url``  is a local directory). These info fields have a "
#~ "(possibly empty) subdictionary as value, with the possible keys defined "
#~ "below."
#~ msgstr ""
#~ "もし存在すれば、それは少なくともふたつのフィールドを含んでいなければなりま"
#~ "せん。第１のものは ``string`` 型の ``url`` です。 ``url`` が何を参照してい"
#~ "るかによって、第２のフィールドは、 (``url`` が VCS への参照であるなら) "
#~ "``vcs_info`` であるか、 (``url`` がソースコードのアーカイブまたは wheel を"
#~ "参照しているなら) ``archive_info`` であるか、または、 (``url`` がローカル"
#~ "のディレクトリを参照しているなら) ``dir_info`` であるか、このうちのひとつ"
#~ "でなければなりません。これらの情報フィールドは、以下に定義する取り得るキー"
#~ "と共に、 (空であることも可能ですが) サブディレクトリを値に取ります。"

#~ msgid ""
#~ "``url`` MUST be stripped of any sensitive authentication information, for "
#~ "security reasons."
#~ msgstr ""
#~ "``url`` は、セキュリティ上の理由から、機微に関わる認証情報をすべて削除して"
#~ "おかなければなりません。"

#~ msgid ""
#~ "A ``requested_revision`` key (type ``string``) MAY be present naming a "
#~ "branch/tag/ref/commit/revision/etc (in a format compatible with the VCS) "
#~ "to install."
#~ msgstr ""
#~ "``requested_revision`` キー (``string`` 型) は、どのブランチ・タグ・リファ"
#~ "レンス・コミット・リビジョンその他をインストールするのかを指定するために存"
#~ "在していても構いません。"

#~ msgid ""
#~ "A ``commit_id`` key (type ``string``) MUST be present, containing the "
#~ "exact commit/revision number that was installed. If the VCS supports "
#~ "commit-hash based revision identifiers, such commit-hash MUST be used as "
#~ "``commit_id`` in order to reference the immutable version of the source "
#~ "code that was installed."
#~ msgstr ""
#~ "``commit_id`` キー (``string`` 型) は、正確にどのコミットまたはリビジョン"
#~ "がインストールされたかを示すもので、必須のキーです。 VCS がリビジョン識別"
#~ "子に基づくコミットハッシュをサポートしているなら、インストールされたものの"
#~ "ソースコードの不変のバージョンを指し示す目的で、そのようなコミットハッシュ"
#~ "を ``commit_id`` として使わなければなりません。"

#~ msgid ""
#~ "``editable`` (type: ``boolean``): ``true`` if the distribution was "
#~ "installed in editable mode, ``false`` otherwise. If absent, default to "
#~ "``false``."
#~ msgstr ""
#~ "``editable`` (``boolean`` 型): 配布物が編集可能モードでインストールされて"
#~ "いる場合には ``true`` 、そうでなければ ``false`` 。存在していない場合のデ"
#~ "フォルトは ``false`` です。"

#~ msgid ""
#~ "When ``url`` refers to a local directory, it MUST have the ``file`` sheme "
#~ "and be compliant with :rfc:`8089`. In particular, the path component must "
#~ "be absolute. Symbolic links SHOULD be preserved when making relative "
#~ "paths absolute."
#~ msgstr ""
#~ "``url`` がローカルのディレクトリを参照している場合、 :rfc:``8089` に適合す"
#~ "る ``file`` が存在していなければなりません。特にパス部分は絶対パスでなけれ"
#~ "ばなりません。相対パスを絶対パスに変換する際には、シンボリックリンクはその"
#~ "まま保存されるべきです。"

#~ msgid ""
#~ "Installers can use the ``git show-ref`` and ``git symbolic-ref`` commands "
#~ "to determine if the ``requested_revision`` corresponds to a Git ref. In "
#~ "turn, a ref beginning with ``refs/tags/`` corresponds to a tag, and a ref "
#~ "beginning with ``refs/remotes/origin/`` after cloning corresponds to a "
#~ "branch."
#~ msgstr ""
#~ "インストーラは、 ``requested_revision`` が Git 参照に対応しているか否かを"
#~ "判断するために ``git show-ref`` や ``git symbolic-ref`` コマンドを使うこと"
#~ "ができます。さらに、 ``refs/tags/`` で始まる参照はタグに対応し、クローンし"
#~ "た後に ``refs/remotes/origin/`` で始まる参照はブランチに対応します。"

#~ msgid "Example direct_url.json"
#~ msgstr "direct_url.json の例"

#~ msgid "Local directory installed in editable mode:"
#~ msgstr "編集可能モードでインストールされたローカルディレクトリ:"

#~ msgid ""
#~ "January 2023: Added the ``archive_info.hashes`` key (`discussion <https://"
#~ "discuss.python.org/t/22299>`__)."
#~ msgstr ""
#~ "2023年1月: ``archive_info.hashes`` キーを追加しました (`議論 <https://"
#~ "discuss.python.org/t/22299>`__) 。"

#~ msgid ""
#~ "The platform compatibility tagging model used for the ``wheel`` "
#~ "distribution format is defined in :pep:`425`."
#~ msgstr ""
#~ "``wheel`` 配布物フォーマットに使われるプラットフォーム互換性タグのタグ付け"
#~ "モデルは、 :pep:`425` で定義されています。"

#~ msgid "Platform tags for Windows"
#~ msgstr "Windows 向けプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` covers public distribution of wheel "
#~ "files to systems running Windows."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、 Windows で動作するシステム向けの "
#~ "wheel ファイルの公開配布物をカバーします。"

#~ msgid "Platform tags for macOS (Mac OS X)"
#~ msgstr "macOS (Mac OSX) 向けのプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` covers public distribution of wheel "
#~ "files to systems running macOS (previously known as Mac OS X)."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、 macOS (かつての Mac OS X) で動作するシ"
#~ "ステム向けの wheel ファイルの公開配布物をカバーします。"

#~ msgid "Platform tags for common Linux distributions"
#~ msgstr "普通の Linux ディストロ向けのプラットフォームタグ"

#~ msgid "Platform tags for other \\*nix platforms"
#~ msgstr "その他の \\*nix プラットフォーム向けのプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` is not generally sufficient for public "
#~ "distribution of wheel files to other \\*nix platforms. Efforts are "
#~ "currently (albeit intermittently) under way to define improved "
#~ "compatibility tagging schemes for AIX and for Alpine Linux."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、その他の \\*nix プラットフォーム向けに"
#~ "公開された wheel 配布物にとって常に十分なものではありません。 AIX 向けや "
#~ "Alpine Linux 向けに改良された互換性タグのスキームを定義する努力が (断続的"
#~ "とは言え) 現在も続けられています。"

#~ msgid ""
#~ "A ``hash`` key (type ``string``) SHOULD be present, with value ``<hash-"
#~ "algorithm>=<expected-hash>``. It is RECOMMENDED that only hashes which "
#~ "are unconditionally provided by the latest version of the standard "
#~ "library's ``hashlib`` module be used for source archive hashes. At time "
#~ "of writing, that list consists of 'md5', 'sha1', 'sha224', 'sha256', "
#~ "'sha384', and 'sha512'."
#~ msgstr ""
#~ "``hash`` キー (``string`` 型) は、 ``<hash-algorithm>=<expected-hash>`` と"
#~ "いう値を伴ってソンゾンしているべきです。標準ライブラリの ``hash lib`` モ"
#~ "ジュールの最新版が無条件に提供するハッシュだけをソースコードアーカイブの"
#~ "ハッシュとして使うことを推奨します。本文書の執筆時点では、 'md5' ・ "
#~ "'sha1' ・ 'sha224' ・ 'sha256' ・ 'sha384' ・ 'sha512' が該当します。"

#~ msgid ""
#~ "For projects which don't provide their own Windows installers (and even "
#~ "some which do), Christoph Gohlke at the University of California provides "
#~ "a `collection of Windows installers <https://www.lfd.uci.edu/~gohlke/"
#~ "pythonlibs/>`__. Many Python users on Windows have reported a positive "
#~ "experience with these prebuilt versions."
#~ msgstr ""
#~ "独自の Windows 版インストーラを準備していないプロジェクトについては (そし"
#~ "て、準備しているプロジェクトでもその内のいくつかについては) 、カリフォルニ"
#~ "ア大学の Christoph Gohlke さんが `Windows 版インストーラのコレクション "
#~ "<https://www.lfd.uci.edu/~gohlke/pythonlibs/>`__ を提供しています。Windows"
#~ "で Python を使う多くのユーザが、これらのビルド済みのバージョン(のパッケー"
#~ "ジ) について肯定的な評価を報告しています。"

#~ msgid ""
#~ "Earlier versions of setuptools implemented the ``attr:`` directive by "
#~ "importing the module, but setuptools 46.4.0 added rudimentary AST "
#~ "analysis so that ``attr:`` can function without having to import any of "
#~ "the package's dependencies."
#~ msgstr ""
#~ "setuptools の初期のバージョンでは、モジュールをインポートすることで "
#~ "``attr:`` ディレクティブを実装していましたが、setuptools 46.4.0 で初歩的"
#~ "な AST 解析が追加されたので ``attr:`` が他の依存先パッケージをインポートし"
#~ "なくても機能するようになりました。"

#~ msgid ""
#~ ":doc:`Setuptools <setuptools:index>` provides :doc:`special support "
#~ "<setuptools:userguide/entry_point>` for plugins. By providing the "
#~ "``entry_points`` argument to :func:`setup` in :file:`setup.py` plugins "
#~ "can register themselves for discovery."
#~ msgstr ""
#~ ":doc:`Setuptools <setupetools:index>` はプラグイン向けに :doc:`特別なサ"
#~ "ポート <setuptools:userguide/entry_point>` を提供しています。 :file:"
#~ "`setup.py` の中の :func:`setup`の ``entry_points`` 引数を準備することで、"
#~ "プラグインが検出されるように登録することができます。"

#~ msgid ""
#~ "A corresponding :ref:`core metadata <core-metadata>` field does not exist"
#~ msgstr ""
#~ "対応する :ref:`コアとなるメタデータ <core-metadata>` のフィールドは存在し"
#~ "ない"

#~ msgid ""
#~ ":doc:`Docs <distlib:index>` | `Issues <https://bitbucket.org/pypa/distlib/"
#~ "issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket.org/"
#~ "pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"
#~ msgstr ""
#~ ":doc:`説明文書 <distlib:index>` | `課題リスト <https://bitbucket.org/pypa/"
#~ "distlib/issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket."
#~ "org/pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI "
#~ "<https://pypi.org/project/pip-tools/>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/jazzband/pip-tools/>`__ | `PyPI "
#~ "<https://pypi.org/project/pip-tools/>`__"

#~ msgid ""
#~ "``license`` is the path to the :file:`LICENSE` file, described below."
#~ msgstr ""
#~ "``license`` は、下に記述するように、 :file:`LICENSE` ファイルへのパスで"
#~ "す。"

#~ msgid ""
#~ "For more information, see `Automatic Script Creation <https://setuptools."
#~ "readthedocs.io/en/latest/userguide/quickstart.html#entry-points-and-"
#~ "automatic-script-creation>`_ from the :doc:`setuptools docs <setuptools:"
#~ "index>`."
#~ msgstr ""
#~ "詳しくは、:doc:`setuptools 説明文書 <setuptools:index>` の `スクリプトの自"
#~ "動生成 <https://setuptools.readthedocs.io/en/latest/userguide/quickstart."
#~ "html#entry-points-and-automatic-script-creation>`_ を見てください。"

#~ msgid ""
#~ "All other fields are considered optional and my be specified statically, "
#~ "listed as dynamic, or left unspecified."
#~ msgstr ""
#~ "他の全てのフィールドは必須ではないものと解釈され、これらは静的に指定しても"
#~ "動的にリストしても未指定のままにしていても構いません。"

#~ msgid "Installing Setuptools \"Extras\""
#~ msgstr "Setuptools の \"Extras\" をインストールする"

#~ msgid "Install `setuptools extras`_."
#~ msgstr "`setuptools extras`_ をインストールする。"

#~ msgid ""
#~ "Pipenv is a project that aims to bring the best of all packaging worlds "
#~ "to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:"
#~ "`virtualenv` into one single toolchain. It features very pretty terminal "
#~ "colors."
#~ msgstr ""
#~ "Pipenv は、全てのパッケージング世界の最良のものを Python 世界に持ち込むこ"
#~ "とを目的とするプロジェクトです。 :ref:`Pipfile` ・ :ref:`pip` ・ :ref:"
#~ "`virtualenv` を単一のツールチェーンにまとめ上げるものです。端末上で綺麗な"
#~ "色彩を持っています。"

#~ msgid ""
#~ "Pipenv aims to help users manage environments, dependencies, and imported "
#~ "packages on the command line. It also works well on Windows (which other "
#~ "tools often underserve), makes and checkes file hashes, to ensure "
#~ "compliance with hash-locked dependency specifiers, and eases "
#~ "uninstallation of packages and dependencies. It is used by Python users "
#~ "and system administrators, but has been less maintained since late 2018."
#~ msgstr ""
#~ "Pipenv は、ユーザがコマンドラインで環境・依存関係・インポートされたパッ"
#~ "ケージを管理することを補助することを目的としています。 (他のツールが往々に"
#~ "してうまく動かない) Windows 上でもきちんと動作し、ファイルのハッシュ値を計"
#~ "算し確認することでハッシュ値による依存関係識別子との互換性を確保し、パッ"
#~ "ケージの依存関係先のアンインストールを容易にします。Python ユーザやシステ"
#~ "ム管理者に使われてきましたが、 2018 年後半以降はあまりメンテナンスされなく"
#~ "なりました。"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/pypa/hatch>`__ | `PyPI <https://pypi."
#~ "org/project/hatch>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/pypa/hatch>`__ | `PyPI <https://"
#~ "pypi.org/project/hatch>`__"

#~ msgid ""
#~ "These fields accept an array of tables with 2 keys: ``name`` and "
#~ "``email``. Both values must be strings. The ``name`` value MUST be a "
#~ "valid email name (i.e. whatever can be put as a name, before an email, "
#~ "in :rfc:`822`) and not contain commas. The ``email`` value MUST be a "
#~ "valid email address. Both keys are optional."
#~ msgstr ""
#~ "これらのフィールドは、 ``name`` と ``email`` のふたつのキーを伴ったテーブ"
#~ "ルの配列を受け入れます。両方の値は文字列でなければなりません。 ``name`` の"
#~ "値は、電子メールアドレスにおける正当な名前 (すなわち、 :rfc:`822` における"
#~ "電子メールアドレスのアドレス部分に前置する名前なら何でも) で、コンマを含ま"
#~ "ないものでなければなりません。 ``email`` の値は、正当な電子メールアドレス "
#~ "(のアドレス部分) でなければなりません。これらのキーは共に必須ではありませ"
#~ "ん。"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI <https://pypi."
#~ "org/project/hatch>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/ofek/hatch>`__ | `PyPI <https://"
#~ "pypi.org/project/hatch>`__"

#~ msgid ""
#~ "Hatch is a unified command-line tool meant to conveniently manage "
#~ "dependencies and environment isolation for Python developers. Python "
#~ "package developers use Hatch to configure, version, specify dependencies "
#~ "for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` "
#~ "to upload packages to PyPI, and :ref:`pip` to download and install "
#~ "packages."
#~ msgstr ""
#~ "Hatch は、 Python での開発者向けに依存関係の管理や環境の分離を便利に行うた"
#~ "めの統合されたコマンドラインツールです。 Python パッケージ開発者は Hatch "
#~ "を使って、パッケージの設定を実施し、バージョン管理を行い、依存関係を指定"
#~ "し、そして PyPI で公開することができます。内部では、 :ref:`twine` を使って"
#~ "パッケージを PyPI へアップロードし、 :ref:`pip` を使ってパッケージのダウン"
#~ "ロードとインストールをしています。"

#~ msgid ""
#~ "These examples apply to :ref:`twine`, and projects like :ref:`hatch` that "
#~ "use it under the hood. Other projects (e.g. :ref:`flit`) also use :file:`."
#~ "pypirc`, but with different defaults. Please refer to each project's "
#~ "documentation for more details and usage instructions."
#~ msgstr ""
#~ "これらの例は :ref:`twine` や内部でそれを使う :ref:`hatch` のようなプロジェ"
#~ "クトに該当します。他のプロジェクト (例えば :ref:`flit`) でも :file:`."
#~ "pypirc` を使いますが、既定値が異なります。より詳しくは、または、使い方につ"
#~ "いてはそれぞれのプロジェクトの説明文書を見てください。"

#~ msgid ""
#~ "`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even "
#~ "more steps in the project management workflow, such as incrementing "
#~ "versions, tagging releases, and creating new skeleton projects from "
#~ "project templates."
#~ msgstr ""
#~ "`hatch <https://github.com/ofek/hatch>`_ は、バージョン番号の増やし方やタ"
#~ "グ付きリリース、プロジェクト雛形から新しいスケルトンプロジェクトを作成する"
#~ "方法などの点で、プロジェクト管理のワークフローにおけるこだわりの強い機能を"
#~ "持つツールです。"

#~ msgid ""
#~ "Use :ref:`pipenv` to manage library dependencies when developing Python "
#~ "applications. See :doc:`../tutorials/managing-dependencies` for more "
#~ "details on using ``pipenv``."
#~ msgstr ""
#~ "Python アプリケーションを開発する時にライブラリの依存関係を管理するに"
#~ "は、 :ref:`pipenv` を使いましょう。 ``pipenv`` について詳しくは :doc:`../"
#~ "tutorials/managing-dependencies` をご覧ください。"

#~ msgid ""
#~ "When ``pipenv`` does not meet your use case, consider other tools like:"
#~ msgstr ""
#~ "``pipenv`` があなたの要望に合致しない場合は、以下のようなツールを検討して"
#~ "ください:"

#~ msgid ":ref:`pip`"
#~ msgstr ":ref:`pip`"

#~ msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
#~ msgstr "`pip-tools <https://github.com/jazzband/pip-tools>`_"

#~ msgid "`Poetry <https://python-poetry.org/>`_"
#~ msgstr "`Poetry <https://python-poetry.org/>`_"

#~ msgid "2014-11-11"
#~ msgstr "2014年11月11日"

#~ msgid ""
#~ "There are two kinds of metadata: *static* and *dynamic*. Static metadata "
#~ "is specified in the ``pyproject.toml`` file directly and cannot be "
#~ "specified or changed by a tool. Dynamic metadata is listed via the "
#~ "``dynamic`` key (defined later in this specification) and represents "
#~ "metadata that a tool will later provide."
#~ msgstr ""
#~ "メタデータにはふたつの種類があります: *静的* なものと *動的* なものです。"
#~ "静的なメタデータは ``pyproject.toml`` ファイルで直接指定されていて、ツール"
#~ "側では指定したり変更したりできません。動的なメタデータは ``dynamic`` キー "
#~ "(この仕様内で後で定義します) を経由して一覧化されていて、ツール側が後から"
#~ "提供することになるでしょう。"
