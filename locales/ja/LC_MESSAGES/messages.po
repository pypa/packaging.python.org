# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# moto kawasaki <moto@kawasaki3.org>, 2021, 2022, 2023, 2024, 2025.
# tsutsu3 <tsutsu3prog@gmail.com>, 2023.
# nikkie <nikkie@users.noreply.hosted.weblate.org>, 2023.
# Rafael Fontenelle <rafaelff@gnome.org>, 2024.
# "Takanori Suzuki (takanory)" <takanory.net@gmail.com>, 2025.
# Xianpeng Shen <xianpeng.shen@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-21 21:35+0000\n"
"PO-Revision-Date: 2025-08-21 21:35+0000\n"
"Last-Translator: moto kawasaki <moto@kawasaki3.org>\n"
"Language-Team: Japanese <https://hosted.weblate.org/projects/pypa/packaging-"
"python-org/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.13\n"

#: ../source/contribute.rst:5
msgid "Contribute to this guide"
msgstr "このガイド文書に貢献する"

#: ../source/contribute.rst:7
msgid ""
"The |PyPUG| welcomes contributors! There are lots of ways to help out, "
"including:"
msgstr "|PyPUG| は貢献者を歓迎します！さまざまな貢献方法があります。例えば:"

#: ../source/contribute.rst:10
msgid "Reading the guide and giving feedback"
msgstr "このガイド文書を読んでフィードバックを伝える"

#: ../source/contribute.rst:11
msgid "Reviewing new contributions"
msgstr "新しい貢献内容を査読する"

#: ../source/contribute.rst:12
msgid "Revising existing content"
msgstr "既存の文書を修正する"

#: ../source/contribute.rst:13
msgid "Writing new content"
msgstr "新しく文書を書くこと"

#: ../source/contribute.rst:14
msgid "Translating the guide"
msgstr "ガイド文書を翻訳する"

#: ../source/contribute.rst:16
msgid ""
"Most of the work on the |PyPUG| takes place on the `project's GitHub "
"repository`__. To get started, check out the list of `open issues`__ and "
"`pull requests`__. If you're planning to write or edit the guide, please "
"read the :ref:`style guide <contributing_style_guide>`."
msgstr ""
"|PyPUG| のほとんどの作業は `プロジェクトのGitHubリポジトリ <project's GitHub "
"repository>`__ で行われます。手始めに `未解決の問題 <open issues>`__ のリスト"
"をチェックアウトして(改善策の) `プルリクエスト <pull requests>`__ を送ってく"
"ださい。もしあなたがこのガイドに何かを書き加えたり編集したりするつもりなら、:"
"ref:`スタイルガイド <contributing_style_guide>`__ を読みましょう。"

#: ../source/contribute.rst:25
msgid ""
"By contributing to the |PyPUG|, you're expected to follow the PSF's `Code of "
"Conduct`__."
msgstr ""
"|PyPUG|に貢献を行うのであれば、あなたがPSFの `行動規範 <Code of Conduct>`__ "
"に従うことが期待されています。"

#: ../source/contribute.rst:32
msgid "Documentation types"
msgstr "文書の類型"

#: ../source/contribute.rst:34
msgid ""
"This project consists of four distinct documentation types with specific "
"purposes. The project aspires to follow the `Diátaxis process`_ for creating "
"quality documentation. When proposing new additions to the project please "
"pick the appropriate documentation type."
msgstr ""
"本プロジェクトは、特定の目的に合わせた四つの別個の文書類型で成り立っていま"
"す。本プロジェクトでは、文書化の品質向上のために `ディアタクシスプロセス "
"<Diátaxis process>` に従うことを強く希望します。新たに追加することを提案する"
"場合には、いずれかの適切な文書類型を選択してください。"

#: ../source/contribute.rst:42 ../source/index.rst:55
#: ../source/tutorials/index.rst:2
msgid "Tutorials"
msgstr "チュートリアル型文書"

#: ../source/contribute.rst:44
msgid ""
"Tutorials are focused on teaching the reader new concepts by accomplishing a "
"goal. They are opinionated step-by-step guides. They do not include "
"extraneous warnings or information. `example tutorial-style document`_."
msgstr ""
"チュートリアルは目標を達成することで読者に新しい概念を教えることに注力してい"
"ます。こうするべきだという意見に従ったステップバイステップのガイドになってい"
"ます。大筋に無関係な警告や情報は省略されています。`チュートリアル型文書の例 "
"<example tutorial-style document>`_."

#: ../source/contribute.rst:51 ../source/guides/index.rst:2
#: ../source/index.rst:69
msgid "Guides"
msgstr "ガイド型文書"

#: ../source/contribute.rst:53
msgid ""
"Guides are focused on accomplishing a specific task and can assume some "
"level of pre-requisite knowledge. These are similar to tutorials, but have a "
"narrow and clear focus and can provide lots of caveats and additional "
"information as needed. They may also discuss multiple approaches to "
"accomplishing the task. :doc:`example guide-style document <guides/packaging-"
"namespace-packages>`."
msgstr ""
"ガイドは特定のタスクを達成することに力点を置いていて、前提となる知識のレベル"
"をある程度仮定することができます。ガイドはチュートリアルと似ていますが、しか"
"しガイドはもっと狭い分野に明確に焦点を当てるものであり、必要に応じて多数の注"
"意書きを行ったり追加的な情報を盛り込んだりすることができます。ガイドでは、そ"
"のタスクを達成するための複数のやり方を議論することもできます。:doc:`ガイド型"
"文書の例 <guides/packaging-namespace-packages>`."

#: ../source/contribute.rst:60 ../source/discussions/index.rst:2
msgid "Discussions"
msgstr "議論型文書"

#: ../source/contribute.rst:62
msgid ""
"Discussions are focused on understanding and information. These explore a "
"specific topic without a specific goal in mind. :doc:`example discussion-"
"style document <discussions/install-requires-vs-requirements>`."
msgstr ""
"議論型文書では、理解促進と情報提供に重点を置きます。議論型文書では、特定の"
"ゴールを念頭に置くことなく、ある特定の話題について深く探求します。:doc:`議論"
"型文書の例 <discussions/install-requires-vs-requirements>`."

#: ../source/contribute.rst:67
msgid "Specifications"
msgstr "仕様型文書"

#: ../source/contribute.rst:69
msgid ""
"Specifications are reference documentation focused on comprehensively "
"documenting an agreed-upon interface for interoperability between packaging "
"tools. :doc:`example specification-style document <specifications/core-"
"metadata>`."
msgstr ""
"仕様型文書は、パッケージングツール間で相互運用のためのインターフェイスとして"
"合意された事項について網羅的に文書化することに重点を置く参照用の文書です。:"
"doc:`仕様型文書の例 <specifications/core-metadata>`."

#: ../source/contribute.rst:75
msgid "Translations"
msgstr "翻訳"

#: ../source/contribute.rst:77
msgid ""
"We use `Weblate`_ to manage translations of this project. Please visit the "
"`packaging.python.org`_ project on Weblate to contribute."
msgstr ""
"我々は本プロジェクトの翻訳を管理するために `Weblate`_ を使用しています。 翻訳"
"で貢献するには、Weblate上の`packaging.python.org`_ プロジェクトをご覧くださ"
"い。"

#: ../source/contribute.rst:80
msgid ""
"If you are experiencing issues while you are working on translations, please "
"open an issue on `GitHub`_."
msgstr ""
"翻訳作業中になにか問題を感じたら、`GitHub`_ で issue を新規登録してください。"

#: ../source/contribute.rst:85
msgid ""
"Any translations of this project should follow `reStructuredText syntax`_."
msgstr ""
"本プロジェクトの翻訳はすべて、 `reStructuredText 文法 <reStructuredText "
"syntax>`_ に従わなければなりません。"

#: ../source/contribute.rst:93
msgid "Adding a language"
msgstr "言語を追加する"

#: ../source/contribute.rst:95
msgid ""
"If your language is not listed on `packaging.python.org`_, click the button :"
"guilabel:`Start new translation` at the bottom of the language list and add "
"the language you want to translate."
msgstr ""
"もしあなたの使う言語が `packaging.python.org`_ のリストに掲載されていなけれ"
"ば、言語一覧の下にある :guilabel:`新しい翻訳を始める <Start new "
"translation>` ボタンをクリックして、あなたが翻訳したい言語を追加してくださ"
"い。"

#: ../source/contribute.rst:100
msgid "Following reStructuredText syntax"
msgstr "reStructuredText文法に従う"

#: ../source/contribute.rst:102
msgid ""
"If you are not familiar with reStructuredText (RST) syntax, please read "
"`this guide`_ before translating on Weblate."
msgstr ""
"もしあなたがreStructuredText(RST)の書き方に慣れていないのであれば、Weblateで"
"翻訳作業をする前に `このガイド <this guide>`_ を読んでください。"

#: ../source/contribute.rst:118
msgid "**Do not translate the text in reference directly**"
msgstr "**参照リンクのテキストをそのまま翻訳することはやめてください**"

#: ../source/contribute.rst:106
msgid ""
"When translating the text in reference, please do not translate them "
"directly."
msgstr ""
"参照リンクのテキストを翻訳する時、単純に翻訳文で置き換えることはやめて下さ"
"い。"

#: ../source/contribute.rst:0
msgid "Wrong: Translate the following text directly:"
msgstr "誤: 次のテキストを単純に翻訳する:"

#: ../source/contribute.rst:0
msgid ""
"Right: Translate the following text with your own language and add the "
"original reference:"
msgstr ""
"正: 次のテキストをあなた自身の言語に翻訳して、さらに元の参照リンクを残す:"

#: ../source/contribute.rst:123
msgid "Building the guide locally"
msgstr "この文書を手元でビルドするには"

#: ../source/contribute.rst:125
msgid ""
"Though not required to contribute, it may be useful to build this guide "
"locally in order to test your changes. In order to build this guide locally, "
"you'll need:"
msgstr ""
"貢献寄与をするために必須というわけではありませんが、この文書を手元でビルドす"
"ることはあなたが行った変更をテストするのに役に立ちます。この文書を手元でビル"
"ドするには："

#: ../source/contribute.rst:129
msgid ":doc:`Nox <nox:index>`. You can install or upgrade nox using ``pip``:"
msgstr ""
":doc:`Nox <nox:index>` 。 ``pip`` を用いてnoxをインストールまたはアップグレー"
"ドできます:"

#: ../source/contribute.rst:136
msgid ""
"Python 3.11. Our build scripts are usually tested with Python 3.11 only. See "
"the :doc:`Hitchhiker's Guide to Python installation instructions <python-"
"guide:starting/installation>` to install Python 3.11 on your operating "
"system."
msgstr ""
"Python 3.11。我々のビルドスクリプトは、通常、Python 3.11でのみ試験されてい"
"る。あなたの使っているOSにPython 3.11をインストールする方法については、 :doc:"
"`Python のインストール指南のためのヒッチハッカーズガイド <python-guide:"
"starting/installation>` を見てほしい。"

#: ../source/contribute.rst:140
msgid ""
"To build the guide, run the following shell command in the project's root "
"folder:"
msgstr ""
"この文書をビルドするには、以下のシェルコマンドをプロジェクトのルートディレク"
"トリで実行してください:"

#: ../source/contribute.rst:146
msgid ""
"After the process has completed you can find the HTML output in the ``./"
"build/html`` directory. You can open the ``index.html`` file to view the "
"guide in web browser, but it's recommended to serve the guide using an HTTP "
"server."
msgstr ""
"処理が終わると、``./build/html`` の下にHTMLの出力ファイルが見つかるはずです。"
"ここの ``index.html`` をブラウザで開くことでこの文書を閲覧することができます"
"が、HTTPサーバを使って文書を提供する方がお勧めです。"

#: ../source/contribute.rst:151
msgid ""
"You can build the guide and serve it via an HTTP server using the following "
"command:"
msgstr "HTTPサーバを用いてこの文書を提供するには、以下のコマンドを使います。:"

#: ../source/contribute.rst:158
msgid "The guide will be browsable via http://localhost:8000."
msgstr "この文書は、 http://localhost:8000 から閲覧できます。"

#: ../source/contribute.rst:162
msgid "Where the guide is deployed"
msgstr "この文書が展開される場所"

#: ../source/contribute.rst:164
msgid ""
"The guide is deployed via ReadTheDocs and the configuration lives at https://"
"readthedocs.org/projects/python-packaging-user-guide/. It's served from a "
"custom domain and fronted by Fast.ly."
msgstr ""
"この文書は ReadTheDocs を通じて展開されていて、 https://readthedocs.org/"
"projects/python-packaging-user-guide/ から読めるようになっています。また、 "
"Fast.ly から独自のドメイン名から提供されるようになっています(第二文はここだけ"
"では意味が取れない)。"

#: ../source/contribute.rst:170
msgid "Style guide"
msgstr "スタイルガイド"

#: ../source/contribute.rst:172
msgid ""
"This style guide has recommendations for how you should write the |PyPUG|. "
"Before you start writing, please review it. By following the style guide, "
"your contributions will help add to a cohesive whole and make it easier for "
"your contributions to be accepted into the project."
msgstr ""
"このスタイルガイドは、あなたがどのように|PyPUG|を書くべきかについて推奨事項を"
"与えます。あなたが書き始める前に目を通してください。スタイルガイドに従うこと"
"であなたの貢献がまとまりのある全体の中の一部として追加され、あなたの貢献がプ"
"ロジェクトによって受け入れられやすくなります。"

#: ../source/contribute.rst:179
msgid "Purpose"
msgstr "目的"

#: ../source/contribute.rst:181
msgid ""
"The purpose of the |PyPUG| is to be the authoritative resource on how to "
"package, publish, and install Python projects using current tools."
msgstr ""
"|PyPUG|の目的は、現在のツール群を用いてPythonプロジェクトをパッケージし、公開"
"し、インストールする方法に関して権威ある参照先となることです。"

#: ../source/contribute.rst:186
msgid "Scope"
msgstr "スコープ"

#: ../source/contribute.rst:188
msgid ""
"The guide is meant to answer questions and solve problems with accurate and "
"focused recommendations."
msgstr ""
"この文書は、正確で的を射た推奨事項を添えた形で疑問に答え問題を解決することを"
"意図しています。"

#: ../source/contribute.rst:191
msgid ""
"The guide isn't meant to be comprehensive and it's not meant to replace "
"individual projects' documentation. For example, pip has dozens of commands, "
"options, and settings. The pip documentation describes each of them in "
"detail, while this guide describes only the parts of pip that are needed to "
"complete the specific tasks described in this guide."
msgstr ""
"この文書は網羅的であることを目指してはおらず、それぞれのプロジェクトのドキュ"
"メントを置き換えることも意図していません。例えば、pipにはたくさんのコマンドや"
"オプションや設定事項があります。pipのドキュメントはその一つ一つについて詳細に"
"記述していますが、この文書ではこの文書に記述されたタスクを完了するために必要"
"となる部分に限ってpipに触れています。"

#: ../source/contribute.rst:199
msgid "Audience"
msgstr "想定される読者"

#: ../source/contribute.rst:201
msgid "The audience of this guide is anyone who uses Python with packages."
msgstr "この文書の読者として想定されるのは、Pythonのパッケージを扱う方です。"

#: ../source/contribute.rst:203
msgid ""
"Don't forget that the Python community is big and welcoming. Readers may not "
"share your age, gender, education, culture, and more, but they deserve to "
"learn about packaging just as much as you do."
msgstr ""
"Pythonコミュニティが巨大で温かいコミュニティであることを忘れないでください。"
"読者は年齢・性別・教育程度・文化やその他諸々の点であなたと同じではないかもし"
"れませんが、しかし、あなたがあなたにできる限りパッケージングについて学ぶこと"
"を称賛します。"

#: ../source/contribute.rst:207
msgid ""
"In particular, keep in mind that not all people who use Python see "
"themselves as programmers. The audience of this guide includes astronomers "
"or painters or students as well as professional software developers."
msgstr ""
"とりわけ、Pythonを使う人なら誰でも自分をプログラマーだと思っているというわけ"
"ではないことを覚えておいてください。この文書の想定される読者には、ソフトウェ"
"ア開発を職業としているプロだけでなく、宇宙飛行士や画家あるいは学生も含まれる"
"のです。"

#: ../source/contribute.rst:213
msgid "Voice and tone"
msgstr "口調や語調"

#: ../source/contribute.rst:215
msgid ""
"When writing this guide, strive to write with a voice that's approachable "
"and humble, even if you have all the answers."
msgstr ""
"この文書を書く時には、たとえあなたが答えを全部わかっていたとしても親しみやす"
"く控えめな語調で書くように努力してください。"

#: ../source/contribute.rst:218
msgid ""
"Imagine you're working on a Python project with someone you know to be smart "
"and skilled. You like working with them and they like working with you. That "
"person has asked you a question and you know the answer. How do you respond? "
"*That* is how you should write this guide."
msgstr ""
"頭が良くてスキルのある人たちと一緒にPythonのプロジェクトをやるところを思い描"
"いてください。あなたは彼らと働くのが好きだし、彼らもあなたと働くのが好きなの"
"です。そんな人があなたに質問をして、あなたが答えを知っていたとしましょう。あ"
"なたはどんな風に応対しますか？*それ*こそが、あなたがこの文書を書く時のやり方"
"なのです。"

#: ../source/contribute.rst:223
msgid ""
"Here's a quick check: try reading aloud to get a sense for your writing's "
"voice and tone. Does it sound like something you would say or does it sound "
"like you're acting out a part or giving a speech? Feel free to use "
"contractions and don't worry about sticking to fussy grammar rules. You are "
"hereby granted permission to end a sentence in a preposition, if that's what "
"you want to end it with."
msgstr ""
"簡単な確認方法：あなたが書いたものを声に出して読めば、その口調や語調の感じが"
"わかります。それはあなたが言いたかった感じに響きましたか、それとも、演説の一"
"部みたいに聞こえましたか？短縮形を使っても構いませんし、曖昧な文法規則に固執"
"することはありません。あなたはここに、もしそうしたいのならば前置詞で文を終"
"わっても構わないと言う権限を与えられました。"

#: ../source/contribute.rst:230
msgid ""
"When writing the guide, adjust your tone for the seriousness and difficulty "
"of the topic. If you're writing an introductory tutorial, it's OK to make a "
"joke, but if you're covering a sensitive security recommendation, you might "
"want to avoid jokes altogether."
msgstr ""
"ガイド文書を書くときは、論題の深刻さや難しさに合った語調に調整してください。"
"もしあなたが入門篇のようなチュートリアルを書くときには冗談を挟んでも構いませ"
"んが、繊細な注意を必要とするセキュリティ上の推奨事項をカバーするなら冗談を全"
"く入れないようにしたいと思うかもしれません。"

#: ../source/contribute.rst:237
msgid "Conventions and mechanics"
msgstr "慣例と手順"

#: ../source/contribute.rst:245
msgid "**Write to the reader**"
msgstr "**読者に向けて書く**"

#: ../source/contribute.rst:240
msgid ""
"When giving recommendations or steps to take, address the reader as *you* or "
"use the imperative mood."
msgstr ""
"推奨事項や実行すべきステップを与えるときは、読者に*あなた*と呼びかけるか、ま"
"たは、命令法を用いて欲しい。"

#: ../source/contribute.rst:0
msgid "Wrong: To install it, the user runs…"
msgstr "誤：それをインストールするために、ユーザは...を実行します。"

#: ../source/contribute.rst:0
msgid "Right: You can install it by running…"
msgstr "正：...を実行することであなたはそれをインストールすることができます。"

#: ../source/contribute.rst:0
msgid "Right: To install it, run…"
msgstr "正：それをインストールするには、...を実行してください。"

#: ../source/contribute.rst:251
msgid "**State assumptions**"
msgstr "**前提条件の明示**"

#: ../source/contribute.rst:248
msgid ""
"Avoid making unstated assumptions. Reading on the web means that any page of "
"the guide may be the first page of the guide that the reader ever sees. If "
"you're going to make assumptions, then say what assumptions that you're "
"going to make."
msgstr ""
"暗黙のうちに前提条件を仮定することのないようにしましょう。Webページとして提供"
"するということは、この文書のどのページであってもそれが読者にとっての初めての"
"ページになるかもしれないということです。"

#: ../source/contribute.rst:256
msgid "**Cross-reference generously**"
msgstr "**豊富な相互参照**"

#: ../source/contribute.rst:254
msgid ""
"The first time you mention a tool or practice, link to the part of the guide "
"that covers it, or link to a relevant document elsewhere. Save the reader a "
"search."
msgstr ""
"あるツールや行為にあなたが初めて言及するときには、ガイドのそれを説明している"
"部分へのリンク、または、どこか他の場所であっても適切な説明文書へのリンクも提"
"供してください。"

#: ../source/contribute.rst:266
msgid "**Respect naming practices**"
msgstr "**命名慣習を尊重すること**"

#: ../source/contribute.rst:259
msgid ""
"When naming tools, sites, people, and other proper nouns, use their "
"preferred capitalization."
msgstr ""
"ツールやサイト、登場人物や他の適切な名詞に名前を付けるときには、大文字小文字"
"などそれぞれが好んで使っている書き方を尊重してください。"

#: ../source/contribute.rst:0
msgid "Wrong: Pip uses…"
msgstr "誤：Pipは…"

#: ../source/contribute.rst:0
msgid "Right: pip uses…"
msgstr "正：pipは…"

#: ../source/contribute.rst:0
msgid "Wrong: …hosted on github."
msgstr "誤：...はgithubにホストされている。"

#: ../source/contribute.rst:0
msgid "Right: …hosted on GitHub."
msgstr "正：...はGitHubにホストされている。"

#: ../source/contribute.rst:275
msgid "**Use a gender-neutral style**"
msgstr "**ジェンダー中立なスタイルを使う**"

#: ../source/contribute.rst:269
msgid ""
"Often, you'll address the reader directly with *you*, *your* and *yours*. "
"Otherwise, use gender-neutral pronouns *they*, *their*, and *theirs* or "
"avoid pronouns entirely."
msgstr ""
"あなたが読者に直接呼びかけるときは「あなた」「あなたの」「あなたのもの」を"
"使ってください。そうできない場合は代名詞として「彼ら」「彼らの」「彼らのも"
"の」を使う(訳註：従来なら\"he\", \"she\"を用いた場所に\"they\"を使うことで"
"ジェンダーへの配慮を示す場合がある)か、または、代名詞をまったく使わないように"
"しましょう。"

#: ../source/contribute.rst:0
msgid "Wrong: A maintainer uploads the file. Then he…"
msgstr "誤：メンテナンス担当者がファイルをアップロードする。それから、彼は…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then they…"
msgstr "正：メンテナンス担当者がファイルをアップロードする。それから、彼らは…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then the maintainer…"
msgstr ""
"正：メンテナンス担当者がファイルをアップロードする。それから、メンテナンス担"
"当者は…"

#: ../source/contribute.rst:287
msgid "**Headings**"
msgstr "**見出しの付け方**"

#: ../source/contribute.rst:278
msgid ""
"Write headings that use words the reader is searching for. A good way to do "
"this is to have your heading complete an implied question. For example, a "
"reader might want to know *How do I install MyLibrary?* so a good heading "
"might be *Install MyLibrary*."
msgstr ""
"見出しには読者が検索で使うような単語を使いましょう。質問の意図に答える形で見"
"出しを書くのは良い方法です。読者が例えば *MyLibraryをインストールするにはどう"
"すれば良いの？* ということを知りたいとすれば、適切な見出しとしては *MyLibrary"
"をインストールするには* のようになるでしょう。"

#: ../source/contribute.rst:283
msgid ""
"In section headings, use sentence case. In other words, write headings as "
"you would write a typical sentence."
msgstr ""
"見出し部分では通常の文章のように大文字小文字を使いましょう。言い換えるなら、"
"ごく普通の文を書く時のように見出しを書きましょう。"

#: ../source/contribute.rst:0
msgid "Wrong: Things You Should Know About Python"
msgstr ""
"誤：Pythonについてあなたが知っておくべき事柄 (訳註：日本語には大文字小文字の"
"区別がないので誤例にならないのではないか)"

#: ../source/contribute.rst:0
msgid "Right: Things you should know about Python"
msgstr "正：Pythonについてあなたが知っておくべき事柄"

#: ../source/contribute.rst:290
msgid "**Numbers**"
msgstr "**数値の書き方**"

#: ../source/contribute.rst:290
msgid ""
"In body text, write numbers one through nine as words. For other numbers or "
"numbers in tables, use numerals."
msgstr ""
"地の文では一から九までの数字を単語で書きましょう(訳註：日本語では漢数字にする"
"よりもアラビア数字の方が適切かもしれません)。表の中ではアラビア数字で書きま"
"しょう。"

#: ../source/discussions/deploying-python-applications.rst:4
msgid "Deploying Python applications"
msgstr "Pythonで書かれたアプリケーションを配置(deploy)する"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/discussions/downstream-packaging.rst:0
#: ../source/discussions/single-source-version.rst:0
#: ../source/guides/distributing-packages-using-setuptools.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/migrating-to-pypi-org.rst:0
#: ../source/guides/multi-version-installs.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Page Status"
msgstr "ページステイタス"

#: ../source/discussions/deploying-python-applications.rst:6
#: ../source/guides/index-mirrors-and-caches.rst:7
#: ../source/guides/installing-using-linux-tools.rst:7
#: ../source/guides/packaging-binary-extensions.rst:7
msgid "Incomplete"
msgstr "未完了"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/discussions/downstream-packaging.rst:0
#: ../source/discussions/single-source-version.rst:0
#: ../source/guides/distributing-packages-using-setuptools.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Last Reviewed"
msgstr "最終査読日"

#: ../source/discussions/deploying-python-applications.rst:7
msgid "2021-8-24"
msgstr "2021-8-24"

#: ../source/discussions/deploying-python-applications.rst:11
#: ../source/specifications/externally-managed-environments.rst:130
#: ../source/specifications/platform-compatibility-tags.rst:14
msgid "Overview"
msgstr "概要"

#: ../source/discussions/deploying-python-applications.rst:15
msgid "Supporting multiple hardware platforms"
msgstr "複数のハードウェアプラットフォームをサポートする"

#: ../source/discussions/deploying-python-applications.rst:37
msgid "OS packaging & installers"
msgstr "OSパッケージングとインストーラ"

#: ../source/discussions/deploying-python-applications.rst:49
#: ../source/discussions/deploying-python-applications.rst:86
msgid "Windows"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:58
msgid "Pynsist"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:60
msgid ""
"`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python "
"programs together with the Python-interpreter into a single installer based "
"on NSIS. In most cases, packaging only requires the user to choose a version "
"of the Python-interpreter and declare the dependencies of the program. The "
"tool downloads the specified Python-interpreter for Windows and packages it "
"with all the dependencies in a single Windows-executable installer."
msgstr ""
"`Pynsist <https://pypi.org/project/pynsist>`__は、Pythonで書かれたプログラム"
"群をNSISベースのPythonインタープリタ付きの単体インストーラにまとめるツールで"
"す。ほとんどの場合、パッケージング作業ではユーザがPythonインタープリタのバー"
"ジョンを選択することとプログラムの依存関係を宣言することしか求められません。"
"このツールは、指定されたWindows版のPythonインタープリタをダウンロードして、依"
"存関係にあるすべてをWindows上で実行可能な単体インストーラにまとめます。"

#: ../source/discussions/deploying-python-applications.rst:67
msgid ""
"The installed program can be started from a shortcut that the installer adds "
"to the start-menu. It uses a Python interpreter installed within its "
"application directory, independent of any other Python installation on the "
"computer."
msgstr ""
"インストーラがスタートメニューに追加したショートカットから、インストールされ"
"たプログラムを起動することができます。プログラムは、そのアプリケーション用の"
"ディレクトリの中にインストールされたPythonインタープリタで同じコンピュータ内"
"にある他のPythonからは独立したをものを使います。"

#: ../source/discussions/deploying-python-applications.rst:71
msgid ""
"A big advantage of Pynsist is that the Windows packages can be built on "
"Linux. There are several examples for different kinds of programs (console, "
"GUI) in the :any:`documentation <pynsist:index>`. The tool is released under "
"the MIT-licence."
msgstr ""
"Pynsistを使う大きな利点は、Windows用のパッケージをLinux上で作成することができ"
"るということです。 :any: `説明文書 <pynsist:index>` には異なる種類のプログラ"
"ム(コンソール用やGUIを使うものなど)の例がいくつかあります。このツールはMITラ"
"イセンスのもとに公開されています。"

#: ../source/discussions/deploying-python-applications.rst:77
msgid "Application bundles"
msgstr "アプリケーションバンドル"

#: ../source/discussions/deploying-python-applications.rst:89
msgid "py2exe"
msgstr "py2exe"

#: ../source/discussions/deploying-python-applications.rst:91
msgid ""
"`py2exe <https://pypi.org/project/py2exe/>`__ is a distutils extension which "
"allows to build standalone Windows executable programs (32-bit and 64-bit) "
"from Python scripts. Python versions included in the official development "
"cycle are supported (refers to `Status of Python branches`__). py2exe can "
"build console executables and windows (GUI) executables. Building windows "
"services, and DLL/EXE COM servers might work but it is not actively "
"supported. The distutils extension is released under the MIT-licence and "
"Mozilla Public License 2.0."
msgstr ""
"`py2exe <https://pypi.org/project/py2exe/>`__ はdistutilsの拡張パッケージで、"
"Pythonのスクリプトから単独で動作するWindowsの実行プログラム(32ビット版または"
"64ビット版)を作成することができます。公式の開発サイクルに含まれるバージョンの"
"Pythonがすべてサポートされています(`Pythonのブランチの状況 <Status of Python "
"branches>`__を参照して下さい)。py2exeはコンソールで動作する実行可能ファイル"
"も、Windowsの(GUIの)実行ファイルも作成することができます。Windowsサービスや"
"DLL/EXE COMサーバを作成することもできるかもしれませんが、これらは活発にサポー"
"トされているとは言えません。distutilsの拡張パッケージは、MITライセンスと"
"Mozilla Publicライセンス2.0の下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:103
#: ../source/specifications/platform-compatibility-tags.rst:195
msgid "macOS"
msgstr "macOS"

#: ../source/discussions/deploying-python-applications.rst:106
msgid "py2app"
msgstr "py2app"

#: ../source/discussions/deploying-python-applications.rst:108
msgid ""
"`py2app <https://pypi.org/project/py2app/>`__ is a Python setuptools command "
"which will allow you to make standalone macOS application bundles and "
"plugins from Python scripts. Note that py2app MUST be used on macOS to build "
"applications, it cannot create Mac applications on other platforms. py2app "
"is released under the MIT-license."
msgstr ""
"`py2app <https://pypi.org/project/py2app/>`__ はPythonのsetuptoolsのコマンド"
"で、単独で動作するmacOSアプリケーションバンドルやプラグインをPythonスクリプト"
"から作成することができます。アプリケーションを作成する時はmacOS上でpy2appを使"
"わなければならず、他のプラットフォーム上ではMacアプリを作成することができない"
"点に留意して下さい。py2appはMITライセンスの下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:115
msgid "Unix (including Linux and macOS)"
msgstr "Unix (LinuxとmacOSを含む)"

#: ../source/discussions/deploying-python-applications.rst:118
#: ../source/key_projects.rst:576
msgid "pex"
msgstr "pex"

#: ../source/discussions/deploying-python-applications.rst:120
msgid ""
"`pex <https://pypi.org/project/pex/>`__ is  a library for generating .pex "
"(Python EXecutable) files which are executable Python environments in the "
"spirit of virtualenvs. pex is an expansion upon the ideas outlined in :pep:"
"`441` and makes the deployment of Python applications as simple as cp. pex "
"files may even include multiple platform-specific Python distributions, "
"meaning that a single pex file can be portable across Linux and macOS. pex "
"is released under the Apache License 2.0."
msgstr ""
"`pex <https://pypi.org/project/pex/>`__ は、.pex (Python EXecutable)ファイ"
"ル、つまり、virtualenvを利用した実行可能なPython環境を含んだファイルを生成す"
"るライブラリです。pexは :pep:`441` で概要が示されたアイデアに基づく拡張で、単"
"純にファイルをコピーするだけでPythonアプリケーションを配置(デプロイ)すること"
"ができるようにします。複数のプラットフォーム依存なPython配布物でもpexファイル"
"に内包することができますので、単一のpexファイルがLinuxでもmacOSでも動作可能と"
"いうことになります。pexはApacheライセンス2.0の下で公開されています。"

#: ../source/discussions/deploying-python-applications.rst:129
msgid "Configuration management"
msgstr "設定管理"

#: ../source/discussions/distribution-package-vs-import-package.rst:5
msgid "Distribution package vs. import package"
msgstr "配布パッケージ vs. インポートパッケージ"

#: ../source/discussions/distribution-package-vs-import-package.rst:7
msgid ""
"A number of different concepts are commonly referred to by the word "
"\"package\". This page clarifies the differences between two distinct but "
"related meanings in Python packaging, \"distribution package\" and \"import "
"package\"."
msgstr ""
"数多くの異なったコンセプトが同じ \"パッケージ\" の名で呼ばれています。この"
"ページでは、\"配布パッケージ\" と \"インポートパッケージ\" という、関連しては"
"いるが全く異なる二つの Python のパッケージングの意味を明らかにします。"

#: ../source/discussions/distribution-package-vs-import-package.rst:13
msgid "What's a distribution package?"
msgstr "配布パッケージとは何でしょうか？"

#: ../source/discussions/distribution-package-vs-import-package.rst:15
msgid ""
"A distribution package is a piece of software that you can install. Most of "
"the time, this is synonymous with \"project\". When you type ``pip install "
"pkg``, or when you write ``dependencies = [\"pkg\"]`` in your ``pyproject."
"toml``, ``pkg`` is the name of a distribution package. When you search or "
"browse the PyPI_, the most widely known centralized source for installing "
"Python libraries and tools, what you see is a list of distribution packages. "
"Alternatively, the term \"distribution package\" can be used to refer to a "
"specific file that contains a certain version of a project."
msgstr ""
"配布パッケージとは、インストール可能な一片のソフトウェアです。ほとんどの場"
"合、これは \"プロジェクト <project>\" と同義です。 ``pip install pkg`` とタイ"
"プする時、あるいは、 ``pyproject.toml`` に ``dependencies = [\"pkg\"]`` と書"
"く時、 ``pkg`` のところには配布パッケージの名前を書きます。Python のライブラ"
"リやツール類の集約された源として最も広く知られている PyPI_ で検索したり閲覧す"
"る時、あなたが目にするものは配布パッケージのリストです。あるいは、\"配布パッ"
"ケージ\" という言葉があるプロジェクトの特定のバージョンを内包した特定のファイ"
"ルのことを指す場合もあります。"

#: ../source/discussions/distribution-package-vs-import-package.rst:24
msgid ""
"Note that in the Linux world, a \"distribution package\", most commonly "
"abbreviated as \"distro package\" or just \"package\", is something provided "
"by the system package manager of the `Linux distribution <distro_>`_, which "
"is a different meaning."
msgstr ""
"Linux の世界では、 \"配布パッケージ <distribution package>\" が \"ディストロ"
"パッケージ <distro package>\" か単に \"パッケージ <package>\" と短縮形で呼ば"
"れることが通常であり、 `Linux ディストリビューション <distro_>`_ のシステム"
"パッケージ管理者によって提供される何かのことであって、異なる意味で使われてい"
"るということは意識しておいてください。"

#: ../source/discussions/distribution-package-vs-import-package.rst:31
msgid "What's an import package?"
msgstr "パッケージをインポートする、とは何でしょうか？"

#: ../source/discussions/distribution-package-vs-import-package.rst:33
msgid ""
"An import package is a Python module. Thus, when you write ``import pkg`` or "
"``from pkg import func`` in your Python code, ``pkg`` is the name of an "
"import package. More precisely, import packages are special Python modules "
"that can contain submodules. For example, the ``numpy`` package contains "
"modules like ``numpy.linalg`` and ``numpy.fft``. Usually, an import package "
"is a directory on the file system, containing modules as ``.py`` files and "
"subpackages as subdirectories."
msgstr ""
"インポートパッケージは Python モジュールです。したがって、 Python コードに "
"``import pkg`` もしくは ``from pkg import func`` と書く時、``pkg`` の部分はイ"
"ンポートパッケージの名称です。より精確には、インポートパッケージは、サブモ"
"ジュールを内包することができる特別な Python モジュールです。通常は、インポー"
"トパッケージはファイルシステム上のディレクトリであって、モジュールを ``.py`` "
"の形で含み、サブパッケージをサブディレクトリの形で含むものです。"

#: ../source/discussions/distribution-package-vs-import-package.rst:42
msgid ""
"You can use an import package as soon as you have installed a distribution "
"package that provides it."
msgstr ""
"インポートパッケージを提供する配布パッケージをインストールするや否や、イン"
"ポートパッケージを使用することができます。"

#: ../source/discussions/distribution-package-vs-import-package.rst:47
msgid "What are the links between distribution packages and import packages?"
msgstr "配布パッケージとインポートパッケージの間の繋がりとは何でしょうか？"

#: ../source/discussions/distribution-package-vs-import-package.rst:49
msgid ""
"Most of the time, a distribution package provides one single import package "
"(or non-package module), with a matching name. For example, ``pip install "
"numpy`` lets you ``import numpy``."
msgstr ""
"ほとんどの場合、配布パッケージはあるひとつのインポートパッケージ (またはパッ"
"ケージではないモジュール) を対応する名称で提供します。例えば、 ``pip install "
"numpy`` を行えば ``import numpy`` として使うことができます。"

#: ../source/discussions/distribution-package-vs-import-package.rst:53
msgid ""
"However, this is only a convention. PyPI and other package indices *do not "
"enforce any relationship* between the name of a distribution package and the "
"import packages it provides. (A consequence of this is that you cannot "
"blindly install the PyPI package ``foo`` if you see ``import foo``; this may "
"install an unintended, and potentially even malicious package.)"
msgstr ""
"しかしながら、これは単なる慣習です。PyPI や他のパッケージインデックスでは、配"
"布パッケージとそれが提供するインポートパッケージの名称の間に *なんらかの関係"
"性を強制することはしません* 。 (このことの帰結として、 ``import foo`` を見た"
"からと言って盲目的に PyPI のパッケージ ``foo`` をインストールすることはできま"
"せん; これは意図しないか、あるいは潜在的には悪意のあるパッケージをインストー"
"ルしてしまうことになりかねません。)"

#: ../source/discussions/distribution-package-vs-import-package.rst:59
msgid ""
"A distribution package could provide an import package with a different "
"name. An example of this is the popular Pillow_ library for image "
"processing. Its distribution package name is ``Pillow``, but it provides the "
"import package ``PIL``. This is for historical reasons: Pillow started as a "
"fork of the PIL library, thus it kept the import name ``PIL`` so that "
"existing PIL users could switch to Pillow with little effort. More "
"generally, a fork of an existing library is a common reason for differing "
"names between the distribution package and the import package."
msgstr ""
"配布パッケージは、異なる名称でインポートパッケージを提供することが可能です。"
"この例としては、画像処理分野で人気のある Pillow_ です。配布パッケージの名称"
"は ``Pillow`` ですが、インポートパッケージとしては ``PIL`` を提供しています。"
"これには歴史的な理由があります: Pillow は PIL ライブラリのフォークとして始ま"
"り、PIL の既存のユーザがあまり手間をかけずに Pillow に移行できるようにイン"
"ポート名称の ``PIL`` を使い続けたのです。もっと一般的にいうと、配布パッケージ"
"とインポートパッケージの間で異なる名称を使う時のよくある理由が既存のライブラ"
"リからのフォークなのです。"

#: ../source/discussions/distribution-package-vs-import-package.rst:69
msgid ""
"On a given package index (like PyPI), distribution package names must be "
"unique. On the other hand, import packages have no such requirement. Import "
"packages with the same name can be provided by several distribution "
"packages. Again, forks are a common reason for this."
msgstr ""
"(PyPI のような) あるパッケージインデックス内では、配布パッケージの名称は一意"
"でなければなりません。他方で、インポートパッケージにはそのような要求事項はあ"
"りません。同じ名称のインポートパッケージが複数の配布パッケージから提供される"
"ということも可能です。繰り返しますが、これのよくある理由はフォークです。"

#: ../source/discussions/distribution-package-vs-import-package.rst:74
msgid ""
"Conversely, a distribution package can provide several import packages, "
"although this is less common. An example is the attrs_ distribution package, "
"which provides both an ``attrs`` import package with a newer API, and an "
"``attr`` import package with an older but supported API."
msgstr ""
"一方で、あまり見かけませんが、配布パッケージは複数のインポートパッケージを提"
"供することができます。その例は attrs_ 配布パッケージで、より新しい API を持"
"つ ``attrs`` インポートパッケージと、旧来のものだがサポートされている API を"
"持つ ``attr`` の両方を提供します。"

#: ../source/discussions/distribution-package-vs-import-package.rst:81
msgid "How do distribution package names and import package names compare?"
msgstr ""
"配布パッケージの名称とインポートパッケージの名称は、どのように比較されるので"
"しょうか？"

#: ../source/discussions/distribution-package-vs-import-package.rst:83
msgid ""
"Import packages should have valid Python identifiers as their name (the :ref:"
"`exact rules <python:identifiers>` are found in the Python documentation) "
"[#non-identifier-mod-name]_. In particular, they use underscores ``_`` as "
"word separator and they are case-sensitive."
msgstr ""
"インポートパッケージは、その名称として正当な Python 識別子 (Python の説明文書"
"の中に :ref:`exact rules <python:identifiers>` が見つかるでしょう) [#non-"
"identifier-mod-name]_ を持っているべきです。特に、単語間の区切りにアンダース"
"コア ``_`` を使い、また、大文字小文字を区別します。"

#: ../source/discussions/distribution-package-vs-import-package.rst:88
msgid ""
"On the other hand, distribution packages can use hyphens ``-`` or "
"underscores ``_``. They can also contain dots ``.``, which is sometimes used "
"for packaging a subpackage of a :ref:`namespace package <packaging-namespace-"
"packages>`. For most purposes, they are insensitive to case and to ``-`` "
"vs.  ``_`` differences, e.g., ``pip install Awesome_Package`` is the same as "
"``pip install awesome-package`` (the precise rules are given in the :ref:"
"`name normalization specification <name-normalization>`)."
msgstr ""
"他方で、配布パッケージはハイフン ``-`` でもアンダースコア ``_`` でも使うこと"
"ができます。また、 :ref:`名前空間パッケージ <packaging-namespace-packages>` "
"のサブパッケージをパッケージングするために使われることがあるドット ``.`` を含"
"むこともできます。ほとんどの目的においては、大文字小文字や ``-`` 対 ``_`` の"
"違いをを区別せず、例えば、 ``pip install Awesome_Package`` と ``pip install "
"awesome-package`` は同じものです (詳細な規則は :ref:`名前正規化仕様 <name-"
"normalization>` にあります) 。"

#: ../source/discussions/distribution-package-vs-import-package.rst:101
msgid ""
"Although it is technically possible to import packages/modules that do not "
"have a valid Python identifier as their name, using :doc:`importlib <python:"
"library/importlib>`, this is vanishingly rare and strongly discouraged."
msgstr ""
"正当な Python 識別子をその名称として持たないパッケージ/モジュールをインストー"
"ルすることは、 :doc:`importlib <python:library/importlib>` を使うことで技術的"
"には可能ではありますが、絶無と言って良いほど稀であり、強く抑制されています。"

#: ../source/discussions/downstream-packaging.rst:5
msgid "Supporting downstream packaging"
msgstr "下流のパッケージングをサポートする"

#: ../source/discussions/downstream-packaging.rst:7
msgid "Draft"
msgstr "ドラフト"

#: ../source/discussions/downstream-packaging.rst:8
msgid "2025-?"
msgstr "2025-?"

#: ../source/discussions/downstream-packaging.rst:10
msgid ""
"While PyPI and the Python packaging tools such as :ref:`pip` are the primary "
"means of distributing Python packages, they are also often made available as "
"part of other packaging ecosystems. These repackaging efforts are "
"collectively called *downstream* packaging (your own efforts are called "
"*upstream* packaging), and include such projects as Linux distributions, "
"Conda, Homebrew and MacPorts. They generally aim to provide improved support "
"for use cases that cannot be handled via Python packaging tools alone, such "
"as native integration with a specific operating system, or assured "
"compatibility with specific versions of non-Python software."
msgstr ""
"PyPI および :ref:`pip` のような Python のパッケージングツールは、Python パッ"
"ケージを配布する主要な手段ですが、その一方で、しばしば他のパッケージングエコ"
"システムの一部として利用可能にされています。これらの再パッケージングの努力"
"は、*ダウンストリーム* パッケージングと総称され (対して元の方は *アップスト"
"リーム* パッケージングと総称されます)、 Linux ディストロ・Conda・Homebrew・"
"MacPorts といったプロジェクトが (訳註：ダウンストリームパッケージングに) 該当"
"します。これらは、一般的には、 Python パッケージングツール単独では取り扱えな"
"いようなユースケースをよりよくサポートすること、例えば、特定のオペレーティン"
"グシステムとの間でネイティブな統合をすることや、非 Python ソフトウェアの特定"
"のバージョンとの互換性を保証することを目指しています。"

#: ../source/discussions/downstream-packaging.rst:19
msgid ""
"This discussion attempts to explain how downstream packaging is usually "
"done, and what additional challenges downstream packagers typically face. It "
"aims to provide some optional guidelines that project maintainers may choose "
"to follow which help make downstream packaging *significantly* easier "
"(without imposing any major maintenance hassles on the upstream project). "
"Note that this is not an all-or-nothing proposal — anything that upstream "
"maintainers can do is useful, even if it's only a small part. Downstream "
"maintainers are also willing to prepare patches to resolve these issues. "
"Having these patches merged can be very helpful, since it removes the need "
"for different downstreams to carry and keep rebasing the same patches, and "
"the risk of applying inconsistent solutions to the same problem."
msgstr ""
"この議論では、ダウンストリームパッケージングが通常どのように行われるのか、お"
"よび、ダウンストリームパッケージングが直面する追加的なチャレンジがどのような"
"ものであるかを説明することを試みます。 (アップストリームプロジェクトを保守す"
"る上で何らかの大きな追加作業を招来しない範囲で) ダウンストリームパッケージン"
"グを *劇的に* 簡単なものにするような、プロジェクトの保守者が追随することを選"
"択してもよいいくつかの選択可能なガイドラインを提供することを目指しています。"
"これが全部採用するかまったく採用しないかという提案ではないことを銘記してくだ"
"さい -- アップストリーム側の保守者が為し得ることは、たとえそれが小さな部分だ"
"けだったとしても、すべて役に立ちます。ダウンストリーム側の保守者もこれらの問"
"題を解決するためのパッチを提供することに意欲的です。他のダウンストリーム群が"
"パッチを作成してリベースし続ける必要を取り除くことや、同じ問題に対して一貫性"
"のない解決策を適用するリスクを取り除くことができるので、このようなパッチを"
"マージすることは非常に助けになります。"

#: ../source/discussions/downstream-packaging.rst:31
msgid ""
"Establishing a good relationship between software maintainers and downstream "
"packagers can bring mutual benefits. Downstreams are often willing to share "
"their experience, time and hardware to improve your package. They are "
"sometimes in a better position to see how your package is used in practice, "
"and to provide information about its relationships with other packages that "
"would otherwise require significant effort to obtain. Packagers can often "
"find bugs before your users hit them in production, provide bug reports of "
"good quality, and supply patches whenever they can. For example, they are "
"regularly active in ensuring the packages they redistribute are updated for "
"any compatibility issues that arise when a new Python version is released."
msgstr ""
"ソフトウェアの保守者達とダウンストリームのパッケージ作業者の間の良い関係を確"
"立することは、相互に利益をもたらします。ダウンストリーム側は、しばしば、パッ"
"ケージを改良するために彼らの経験・時間・ハードウェアを共有したいと望み、そう"
"しなければ獲得するのに多大な労力を必要とする他パッケージとの関係について情報"
"を提供したいと望んでいます。パッケージ作業者は、しばしば、プロダクションレベ"
"ルになった後でユーザがそのバグを踏むよりも前に、高品質のバグレポートを提供"
"し、可能な時ならいつでもパッチを供給します。例えば、彼らは、新しい Python の"
"バージョンがリリースされた時に起きる互換性問題のいずれについても、彼らが再配"
"布するパッケージがアップデートされていることを確実にすることに恒常的に活発で"
"す。"

#: ../source/discussions/downstream-packaging.rst:43
msgid ""
"Please note that downstream builds include not only binary redistribution, "
"but also source builds done on user systems (in source-first distributions "
"such as Gentoo Linux, for example)."
msgstr ""
"ダウンストリームのビルドには、バイナリ形式での再配布だけでなく、 (例えば、"
"Gentoo Linux のようなソースコードありきのディストロで) ユーザ側のシステムで行"
"われるソースビルドも含まれることを銘記してください。"

#: ../source/discussions/downstream-packaging.rst:51
msgid "Provide complete source distributions"
msgstr "完全な形のソースコード配布物を提供する"

#: ../source/discussions/downstream-packaging.rst:54
#: ../source/discussions/downstream-packaging.rst:150
#: ../source/discussions/downstream-packaging.rst:213
#: ../source/discussions/downstream-packaging.rst:303
#: ../source/discussions/downstream-packaging.rst:412
msgid "Why?"
msgstr "なぜ？"

#: ../source/discussions/downstream-packaging.rst:56
msgid ""
"The vast majority of downstream packagers prefer to build packages from "
"source, rather than use the upstream-provided binary packages. In some "
"cases, using sources is actually required for the package to be included in "
"the distribution. This is also true of pure Python packages that provide "
"universal wheels. The reasons for using source distributions may include:"
msgstr ""
"ダウンストリームのパッケージ作業者の大多数は、アップストリーム側が提供するバ"
"イナリのパッケージを使ってやるよりも、ソースコードからパッケージをビルドする"
"ことを好みます。いくつかの場合には、パッケージを配布物に同梱してもらうために"
"ソースコードを使うことが要求されていることもあります。これは、また、汎用 "
"<universal> の wheel を提供する純 Python のパッケージにも当てはまります。ソー"
"スコード配布物を用いる理由には次のようなものがあるでしょう:"

#: ../source/discussions/downstream-packaging.rst:62
msgid "Being able to audit the source code of all packages."
msgstr "すべてのパッケージのソースコードを監査することができるようにするため。"

#: ../source/discussions/downstream-packaging.rst:64
msgid "Being able to run the test suite and build documentation."
msgstr ""
"試験一式を動作させることができるようにし、また、説明文書をビルドすることがで"
"きるようにするため。"

#: ../source/discussions/downstream-packaging.rst:66
msgid ""
"Being able to easily apply patches, including backporting commits from the "
"project's repository and sending patches back to the project."
msgstr ""
"プロジェクトのリポジトリからのバックポートされたコミットを含めてパッチの適用"
"が容易にできるようにするため、また、逆にプロジェクトへパッチを送ることができ"
"るようにするため。"

#: ../source/discussions/downstream-packaging.rst:69
msgid ""
"Being able to build on a specific platform that is not covered by upstream "
"builds."
msgstr ""
"アップストリームのビルドではカバーされていない特定のプラットフォームでのビル"
"ドができるようにするため。"

#: ../source/discussions/downstream-packaging.rst:72
msgid "Being able to build against specific versions of system libraries."
msgstr ""
"システムのライブラリの特定のバージョンに対してビルドができるようにするため。"

#: ../source/discussions/downstream-packaging.rst:74
msgid "Having a consistent build process across all Python packages."
msgstr ""
"すべての Python パッケージを通じて守備一貫したビルドプロセスを保持するため。"

#: ../source/discussions/downstream-packaging.rst:76
msgid ""
"While it is usually possible to build packages from a Git repository, there "
"are a few important reasons to provide a static archive file instead:"
msgstr ""
"通常は、 Git リポジトリからパッケージをビルドすることができますが、代わりに静"
"的なアーカイブファイルを提供する重要ないくつかの理由があります:"

#: ../source/discussions/downstream-packaging.rst:79
msgid ""
"Fetching a single file is often more efficient, more reliable and better "
"supported than e.g. using a Git clone. This can help users with poor "
"Internet connectivity."
msgstr ""
"単一のファイルをダウンロードする方が、より効率が良く、より信頼できて、例えば "
"Git clone を使うよりも良くサポートされていることがしばしばです。これによっ"
"て、貧弱なインターネット接続性の元にあるユーザを助けることができます。"

#: ../source/discussions/downstream-packaging.rst:83
msgid ""
"Downstreams often use hashes to verify the authenticity of source files on "
"subsequent builds, which require that they remain bitwise identical over "
"time. For example, automatically generated Git archives do not guarantee "
"this, as the compressed data may change if gzip is upgraded on the server."
msgstr ""
"ダウンストリーム側は、引き続くビルドに用いるためのソースファイルの真正性を検"
"証するために、時を経てもビット単位で同一であることを要求するハッシュ値を使う"
"ことがしばしばあります。例えば、仮にサーバ上の gzip がアップグレードされれ"
"ば、圧縮されたデータが変化するかもしれないので、自動的に作成される Git アーカ"
"イブはこのようなことを保証しません。"

#: ../source/discussions/downstream-packaging.rst:88
msgid ""
"Archive files can be mirrored, reducing both upstream and downstream "
"bandwidth use. The actual builds can afterwards be performed in firewalled "
"or offline environments, that can only access source files provided by the "
"local mirror or redistributed earlier."
msgstr ""
"アーカイブファイルはミラーサイトにおくことも可能で、アップストリームとダウン"
"ストリームの両方の帯域幅を節約することができます。実際のビルドは、ローカルミ"
"ラーまたは前もって再配布を受けたソースファイル群にしかアクセスが提供されない"
"ファイアウォールの内側もしくはオフラインの環境下で後から実行することが可能で"
"す。"

#: ../source/discussions/downstream-packaging.rst:93
msgid ""
"Explicitly publishing archive files can ensure that any dependencies on "
"version control system metadata are resolved when creating the source "
"archive. For example, automatically generated Git archives omit all of the "
"commit tag information, potentially resulting in incorrect version details "
"in the resulting builds."
msgstr ""
"明示的にアーカイブファイルを公開することで、そのソースコードアーカイブが作成"
"された時点でバージョン管理システムのメタデータに関する依存関係がすべて解決さ"
"れていたことを保証することができます。例えば、自動的に生成される Git アーカイ"
"ブはコミットタグ情報をすべて削除していて、そのビルドに必要なバージョン情報の"
"詳細が不正確になっている可能性があります。"

#: ../source/discussions/downstream-packaging.rst:99
#: ../source/discussions/downstream-packaging.rst:179
#: ../source/discussions/downstream-packaging.rst:277
#: ../source/discussions/downstream-packaging.rst:337
#: ../source/discussions/downstream-packaging.rst:441
msgid "How?"
msgstr "どのように？"

#: ../source/discussions/downstream-packaging.rst:101
msgid ""
"Ideally, **a source distribution archive published on PyPI should include "
"all the files from the package's Git repository** that are necessary to "
"build the package itself, run its test suite, build and install its "
"documentation, and any other files that may be useful to end users, such as "
"shell completions, editor support files, and so on."
msgstr ""
"理想的には、 ** PyPI上で公開されたソースコード配布物のアーカイブには、その"
"パッケージの Git リポジトリからパッケージ自体をビルドし、テストスイートを走ら"
"せ、説明文書をインストールするために必要なファイルや、シェル補完やエディタ用"
"のサポートファイルなどエンドユーザにとって役に立つかもしれない他のファイルを"
"全て含めるべきです ** 。"

#: ../source/discussions/downstream-packaging.rst:107
msgid ""
"This point applies only to the files belonging to the package itself. The "
"downstream packaging process, much like Python package managers, will "
"provision the necessary Python dependencies, system tools and external "
"libraries that are needed by your package and its build scripts. However, "
"the files listing these dependencies (for example, ``requirements*.txt`` "
"files) should also be included, to help downstreams determine the needed "
"dependencies, and check for changes in them."
msgstr ""
"この点は、パッケージそれ自体に属するファイル群にだけ適用します。Python のパッ"
"ケージ管理機構に極めてよく似ていますが、ダウンストリームパッケージの処理で"
"は、必要な Python の依存関係や、そのパッケージとそのビルドスクリプトが必要と"
"するシステムツールや外部のライブラリの依存関係を提供します。しかしながら、ダ"
"ウンストリーム側が必要な依存関係を決定し、それらの変更をチェックするために、"
"これらの依存関係を列挙するファイル (例えば ``requirements*.txt`` ファイル) も"
"また同梱されるべきです。"

#: ../source/discussions/downstream-packaging.rst:115
msgid ""
"Some projects have concerns related to Python package managers using source "
"distributions from PyPI. They do not wish to increase their size with files "
"that are not used by these tools, or they do not wish to publish source "
"distributions at all, as they enable a problematic or outright nonfunctional "
"fallback to building the particular project from source. In these cases, a "
"good compromise may be to publish a separate source archive for downstream "
"use elsewhere, for example by attaching it to a GitHub release. "
"Alternatively, large files, such as test data, can be split into separate "
"archives."
msgstr ""
"プロジェクトによっては、PyPI からのソースコード配布物を使う Python パッケージ"
"管理機構に関して心配する場合があります。彼らとしては、特定のプロジェクトを"
"ソースコードからビルドするという問題含みではっきりと機能しないことがわかって"
"いる代替策を有効にすることになるので、これらのツール類によって使われることの"
"ないファイル群で彼らのパッケージのサイズが増えることを望まなかったり、ソース"
"コード配布物を公開することを全く望まなかったりするのです。"

#: ../source/discussions/downstream-packaging.rst:124
msgid ""
"On the other hand, some projects (NumPy_, for instance) decide to include "
"tests in their installed packages. This has the added advantage of "
"permitting users to run tests after installing them, for example to check "
"for regressions after upgrading a dependency. Yet another approach is to "
"split tests or test data into a separate Python package. Such an approach "
"was taken by the cryptography_ project, with the large test vectors being "
"split to cryptography-vectors_ package."
msgstr ""
"他方で、(例えば NumPy_ のような) いくつかのプロジェクトでは、そのインストール"
"パッケージの中にテストスイートを同梱することに決めたものがあります。これに"
"よって、そのようなパッケージをインストールした後に、例えば依存先のパッケージ"
"をアップグレードした後にリグレッション (退行)がないかどうかの確認を行うため"
"に、ユーザがテストスイートを走らせることを許すという利点を追加することができ"
"ます。さらに別のやり方としては、テストスイートやテストデータを別の Python "
"パッケージに分割する方法があります。そのような方法は、巨大なテストベクトルを "
"cryptography-vectors_package に分離する形で、 cryptography_ プロジェクトで採"
"用されています。"

#: ../source/discussions/downstream-packaging.rst:132
msgid ""
"A good idea is to use your source distribution in the release workflow. For "
"example, the :ref:`build` tool does exactly that — it first builds a source "
"distribution, and then uses it to build a wheel. This ensures that the "
"source distribution actually works, and that it won't accidentally install "
"fewer files than the official wheels."
msgstr ""
"リリースの際のワークフローでソースコード配布物を用いるのは良い考えです。例え"
"ば、 :ref:`build` ツールは正にそれをやります -- まずソースコード配布物をビル"
"ドし、それを使って wheel をビルドするのです。これによって、ソースコード配布物"
"が実際に動作することを確実にし、誤って公式の wheel よりも数の少ないファイル群"
"をインストールしてしまうことがなくなります。"

#: ../source/discussions/downstream-packaging.rst:138
msgid ""
"Ideally, also use the source distribution to run tests, build documentation, "
"and so on, or add specific tests to make sure that all necessary files were "
"actually included. Understandably, this requires more effort, so it's fine "
"not do that — downstream packagers will report any missing files promptly."
msgstr ""
"理想的には、テストスイートを走らせたり説明文書をビルドしたりといったことや、"
"全ての必要なファイルが実際に含まれていることを確実にする特殊なテストを追加す"
"るのに、ソースコード配布物も使いましょう。当然のことですが、これはより多くの"
"努力を必要としますので、こうしなくても問題はありません -- ダウンストリームの"
"パッケージ作業者たちが素早く不足しているファイルを報告してくれるでしょう。"

#: ../source/discussions/downstream-packaging.rst:147
msgid "Do not use the Internet during the build process"
msgstr "ビルドプロセスの最中にインターネットを使うことはやめましょう"

#: ../source/discussions/downstream-packaging.rst:152
msgid ""
"Downstream builds are frequently done in sandboxed environments that cannot "
"access the Internet. The package sources are unpacked into this environment, "
"and all the necessary dependencies are installed."
msgstr ""
"ダウンストリームのビルドは、しばしば、インターネットにアクセスすることができ"
"ないサンドボックス化された環境の中で行われます。パッケージのソースファイルが"
"この環境内に展開され、必要な全ての依存関係がインストールされます。"

#: ../source/discussions/downstream-packaging.rst:156
msgid ""
"Even if this is not the case, and assuming that you took sufficient care to "
"properly authenticate downloads, using the Internet is discouraged for a "
"number of reasons:"
msgstr ""
"仮にこれが当てはまらない場合でも、適切にダウンロードを認証するために十分な注"
"意を払っていたものと仮定して、インターネットを使うことはいくつもの理由から推"
"奨されません:"

#: ../source/discussions/downstream-packaging.rst:160
msgid ""
"The Internet connection may be unstable (e.g. due to poor reception) or "
"suffer from temporary problems that could cause the process to fail or hang."
msgstr ""
"インターネット接続は (例えば受信状態が悪いために) 不安定であるかもしれません"
"し、プロセスを失敗させたりハングさせたりしかねない一時的な問題の影響を受ける"
"かもしれません。"

#: ../source/discussions/downstream-packaging.rst:164
msgid ""
"The remote resources may become temporarily or even permanently unavailable, "
"making the build no longer possible. This is especially problematic when "
"someone needs to build an old package version."
msgstr ""
"リモートにあるリソース群は、もはやビルドができなくなるような形で、一時的また"
"は永続的に利用不可能になるかもしれません。これは、特に、誰かが古いバージョン"
"のパッケージをビルドする必要に迫られた時に問題となります。"

#: ../source/discussions/downstream-packaging.rst:168
msgid "The remote resources may change, making the build not reproducible."
msgstr ""
"リモートのリソース群は、ビルドが再現可能にならない形に変化するかもしれませ"
"ん。"

#: ../source/discussions/downstream-packaging.rst:170
msgid ""
"Accessing remote servers poses a privacy issue and a potential security "
"issue, as it exposes information about the system building the package."
msgstr ""
"リモートのサーバにアクセスすることは、当該システムでそのパッケージをビルドし"
"ていることに関する情報を暴露するので、プライバシー問題と潜在的なセキュリティ"
"問題をもたらします。"

#: ../source/discussions/downstream-packaging.rst:174
msgid ""
"The user may be using a service with a limited data plan, in which "
"uncontrolled Internet access may result in additional charges or other "
"inconveniences."
msgstr ""
"ユーザは、制御下にないインターネットアクセスが追加料金やその他の不都合に帰結"
"してしまう、そのようなデータ量に制約のある通信サービスを使っているかもしれま"
"せん。"

#: ../source/discussions/downstream-packaging.rst:181
msgid ""
"If the package is implementing any custom build *backend* actions that use "
"the Internet, for example by automatically downloading vendored dependencies "
"or fetching Git submodules, its source distribution should either include "
"all of these files or allow provisioning them externally, and the Internet "
"must not be used if the files are already present."
msgstr ""
"パッケージが、例えば売り物の依存関係を自動的にダウンロードしたり、Git のサブ"
"モジュールをフェッチしたりするような、そのようなインターネットを使用する何ら"
"かのカスタムビルド *バックエンド* 動作を実装しているなら、そのソースコード配"
"布物は、これらのファイル群をすべて同梱するか、別途準備することができるように"
"するかのいずれかをするべきで、ファイル群がすでに存在する場合にはインターネッ"
"トを使用しないようにしなければなりません。"

#: ../source/discussions/downstream-packaging.rst:187
msgid ""
"Note that this point does not apply to Python dependencies that are "
"specified in the package metadata, and are fetched during the build and "
"installation process by *frontends* (such as :ref:`build` or :ref:`pip`). "
"Downstreams use frontends that use local provisioning for Python "
"dependencies."
msgstr ""
"この点は、パッケージのメタデータの中で指定された Python の依存関係には当ては"
"まらないということ、また、それらは (:ref:`build` や :ref:`pip` のような) *フ"
"ロントエンド* によるビルドやインストールのプロセスの最中にフェッチされるとい"
"うことに注意してください。ダウンストリーム側では、Python の依存関係をローカル"
"に準備するようなフロントエンドを使います。"

#: ../source/discussions/downstream-packaging.rst:192
msgid ""
"Ideally, custom build scripts should not even attempt to access the Internet "
"at all, unless explicitly requested to. If any resources are missing and "
"need to be fetched, they should ask the user for permission first. If that "
"is not feasible, the next best thing is to provide an opt-out switch to "
"disable all Internet access. This could be done e.g. by checking whether a "
"``NO_NETWORK`` environment variable is set to a non-empty value."
msgstr ""
"理想的には、カスタムビルド用スクリプトは、明示的に要求された場合を除いて、イ"
"ンターネットへのアクセスを試みることさえ全く行うべきでありません。もし、何ら"
"かのリソースが不足していてフェッチする必要があるなら、まずユーザに許可を求め"
"るべきです。それが実現不可能であれば、次善の策は、あらゆるインターネットアク"
"セスをさせないというオプトアウトのスイッチを提供するべきです。これは、例えば "
"``NO_NETWORK`` 環境変数が空でない値に設定されているか否かを調べることで行うこ"
"とができます。"

#: ../source/discussions/downstream-packaging.rst:199
msgid ""
"Since downstreams frequently also run tests and build documentation, the "
"above should ideally extend to these processes as well."
msgstr ""
"ダウンストリームは、しばしばテストを走らせたり説明文書をビルドしたりしますの"
"で、理想的を言えば、上記のことはこれらのプロセスにも同様に拡大適用されるべき"
"です。"

#: ../source/discussions/downstream-packaging.rst:202
msgid ""
"Please also remember that if you are fetching remote resources, you "
"absolutely must *verify their authenticity* (usually against a hash), to "
"protect against the file being substituted by a malicious party."
msgstr ""
"もし、リモートのリソースをフェッチするのであれば、悪意ある第三者がファイルを"
"置換しているという事態から保護するために、 (通常はハッシュ値を使って) 絶対に "
"*その真正性を検証* しなければならないことも覚えておいてください。"

#: ../source/discussions/downstream-packaging.rst:210
msgid "Support building against system dependencies"
msgstr "システムの依存関係に対してビルドすることをサポートする"

#: ../source/discussions/downstream-packaging.rst:215
msgid ""
"Some Python projects have non-Python dependencies, such as libraries written "
"in C or C++. Trying to use the system versions of these dependencies in "
"upstream packaging may cause a number of problems for end users:"
msgstr ""
"Python プロジェクトの中には、 C や C++ で書かれたライブラリのような非 Python "
"の依存関係を持つものがあります。アップストリームパッケージング内でこのような"
"依存関係のシステムバージョンを使おうとする試行は、エンドユーザに多数の問題を"
"もたらすかもしれません:"

#: ../source/discussions/downstream-packaging.rst:219
msgid ""
"The published wheels require a binary-compatible version of the used library "
"to be present on the user's system. If the library is missing or an "
"incompatible version is installed, the Python package may fail with errors "
"that are not clear to inexperienced users, or even misbehave at runtime."
msgstr ""
"公開された wheel は、使っているライブラリのバイナリ互換のバージョンがユーザの"
"システム上に存在することを要求します。もし、ライブラリが不足していたり非互換"
"のバージョンがインストールされていたりすると、 Python パッケージは、経験豊か"
"とは言えないユーザにとっては明晰でないエラーを伴って失敗するかもしれません"
"し、動作時に誤動作することさえあるかもしれません。"

#: ../source/discussions/downstream-packaging.rst:224
msgid ""
"Building from a source distribution requires a source-compatible version of "
"the dependency to be present, along with its development headers and other "
"auxiliary files that some systems package separately from the library itself."
msgstr ""
"ソースコード配布物からのビルドには、ソースコードレベルで互換性のあるバージョ"
"ンの依存関係先が、システムによってはライブラリ本体とは別のパッケージとして用"
"意されていることがある、開発用のヘッダーファイルやその他の補助ファイルと共"
"に、存在していることが要求されます。"

#: ../source/discussions/downstream-packaging.rst:229
msgid ""
"Even for an experienced user, installing a compatible dependency version may "
"be very hard. For example, the used Linux distribution may not provide the "
"required version, or some other package may require an incompatible version."
msgstr ""
"経験を積んだユーザにとってさえ、互換性のある依存関係先のバージョンをインス"
"トールすることは極めて難しかもしれません。例えば、使っている Linux ディストロ"
"が要求されているバージョンを提供していないこともあり得るし、他のパッケージが"
"互換性のないバージョンのものを要求しているかもしれません。"

#: ../source/discussions/downstream-packaging.rst:234
msgid ""
"The linkage between the Python package and its system dependency is not "
"recorded by the packaging system. The next system update may upgrade the "
"library to a newer version that breaks binary compatibility with the Python "
"package, and requires user intervention to fix."
msgstr ""
"Python パッケージとそのシステム依存関係の間の関連性は、パッケージングシステム"
"によって記録されているということはありません。次回のシステム更新がライブラリ"
"を、 Python パッケージとのバイナリ互換性を破壊するような、より新しいバージョ"
"ンへとアップグレードするかもしれず、ユーザが修復のために介入することが要求さ"
"れるかもしれません。"

#: ../source/discussions/downstream-packaging.rst:239
msgid ""
"For these reasons, you may reasonably decide to either statically link your "
"dependencies, or to provide local copies in the installed package. You may "
"also vendor the dependency in your source distribution. Sometimes these "
"dependencies are also repackaged on PyPI, and can be declared as project "
"dependencies like any other Python package."
msgstr ""
"これらの理由は、依存関係先を静的にリンクするか、インストールされるパッケージ"
"の中にローカルコピーを用意するかのいずれかに決める合理的な理由になります。"
"ソースコード配布物の中にも依存関係先を含めることもあるかもしれません。時に、"
"これらの依存関係先もまた PyPI でパッケージされていて、他のすべての Python "
"パッケージのように、プロジェクトの依存関係先として宣言され得ることもありま"
"す。"

#: ../source/discussions/downstream-packaging.rst:245
msgid ""
"However, none of these issues apply to downstream packaging, and downstreams "
"have good reasons to prefer dynamically linking to system dependencies. In "
"particular:"
msgstr ""
"しかしながら、これらの課題のどれひとつを取ってもそれはダウンストリームのパッ"
"ケージングには当てはまらず、ダウンストリーム側ではシステムの依存関係に直接に"
"リンクする方を好む十分な理由があります。とりわけ次のような場合:"

#: ../source/discussions/downstream-packaging.rst:249
msgid ""
"In many cases, reliably sharing dynamic dependencies between components is a "
"large part of the *purpose* of a downstream packaging ecosystem. Helping to "
"support that makes it easier for users of those systems to access upstream "
"projects in their preferred format."
msgstr ""
"多くのケースでは、部品間で動的な依存関係を信頼できる形で共有することが、ダウ"
"ンストリーム側のパッケージングエコシステムの *目的* の大きな部分を占めていま"
"す。それをサポートするのを補助することは、そのようなシステムのユーザが好まし"
"いフォーマットでアップストリームのプロジェクトにアクセスすることをより容易に"
"します。"

#: ../source/discussions/downstream-packaging.rst:253
msgid ""
"Static linking and vendoring obscures the use of external dependencies, "
"making source auditing harder."
msgstr ""
"静的なリンキングと提供は、その出自の検証が難しくなるので、外部への依存関係の"
"使用をわかりにくくします。"

#: ../source/discussions/downstream-packaging.rst:256
msgid ""
"Dynamic linking makes it possible to quickly and systematically replace the "
"used libraries across an entire downstream packaging ecosystem, which can be "
"particularly important when they turn out to contain a security "
"vulnerability or critical bug."
msgstr ""
"動的なリンキングは、ダウンストリームのパッケージングエコシステム全体で使用さ"
"れるライブラリを素早く体系的に置き換えることができるようにしますが、それは、"
"セキュリティ上の脆弱性や致命的なバグを含んでいることが判明した時には特に重要"
"になり得ます。"

#: ../source/discussions/downstream-packaging.rst:260
msgid ""
"Using system dependencies makes the package benefit from downstream "
"customization that can improve the user experience on a particular platform, "
"without the downstream maintainers having to consistently patch the "
"dependencies vendored in different packages. This can include compatibility "
"improvements and security hardening."
msgstr ""
"システムの依存関係を使うことで、ダウンストリーム保守者が様々なパッケージ内で"
"提供される依存関係に統一的にパッチしなければならないということがない形で、特"
"定のプラットフォーム上でユーザ経験を改善し得るところのダウンストリームでのカ"
"スタマイゼーションからの利益をパッケージにもたらします。これは、互換性の向上"
"やセキュリティハードニングを含み得ます。"

#: ../source/discussions/downstream-packaging.rst:266
msgid ""
"Static linking and vendoring can result in multiple different versions of "
"the same library being loaded in the same process (for example, attempting "
"to import two Python packages that link to different versions of the same "
"library). This sometimes works without incident, but it can also lead to "
"anything from library loading errors, to subtle runtime bugs, to "
"catastrophic failures (like suddenly crashing and losing data)."
msgstr ""
"静的なリンキングとベンダーリングによって、同一ライブラリの複数の異なるバー"
"ジョンが同じプロセスの中でロードされ得ます (例えば、同じライブラリの別バー"
"ジョンにリンクしたふたつの Python パッケージを import しようと試みた場合) 。"
"ある時には、事件にならずに動作しますが、ライブラリのローディングエラーに起因"
"する問題や、微妙な動作中のバグや、 (突然クラッシュしてデータを失うといった) "
"壊滅的な失敗へと至ることもあり得ます。"

#: ../source/discussions/downstream-packaging.rst:273
msgid ""
"Last but not least, static linking and vendoring results in duplication, and "
"may increase the use of both disk space and memory."
msgstr ""
"最後ではあるが最も軽微といういうわけではありませんが、静的なリンキングとベン"
"ダーリングの結果として重複が起きて、ディスクスペースとメモリの両方を余計に使"
"うことになります。"

#: ../source/discussions/downstream-packaging.rst:279
msgid ""
"A good compromise between the needs of both parties is to provide a switch "
"between using vendored and system dependencies. Ideally, if the package has "
"multiple vendored dependencies, it should provide both individual switches "
"for each dependency, and a general switch to control the default for them, e."
"g. via a ``USE_SYSTEM_DEPS`` environment variable."
msgstr ""
"双方のニーズの間の良い妥協点は、ベンダード (訳註：パッケージ側が準備したもの"
"の意か) のものを使うかシステムの依存関係を使うかを切り替えるスイッチを提供す"
"ることです。理想的には、パッケージ側が複数の独自の依存関係を持つならば、それ"
"ぞれの依存関係について独立したスイッチを提供するべきで、かつ、例えば "
"``USE_SYSTEM_DEPS`` 環境変数のようにデフォルト設定を制御する一般的なスイッチ"
"をも持つべきです。"

#: ../source/discussions/downstream-packaging.rst:285
msgid ""
"If the user requests using system dependencies, and a particular dependency "
"is either missing or incompatible, the build should fail with an explanatory "
"message rather than fall back to a vendored version. This gives the packager "
"the opportunity to notice their mistake and a chance to consciously decide "
"how to solve it."
msgstr ""
"ユーザがシステム側の依存関係を使うことを要求していて、特定の依存関係が存在し"
"ないか非互換である場合には、ビルドは、ベンダードのバージョンにフォールバック"
"するよりも説明的なメッセージと共に失敗するべきです。これによって、パッケージ"
"製作者が誤りに気付き、どのように解決するかを意識して解決する機会を得ることが"
"できます。"

#: ../source/discussions/downstream-packaging.rst:291
msgid ""
"It is reasonable for upstream projects to leave *testing* of building with "
"system dependencies to their downstream repackagers. The goal of these "
"guidelines is to facilitate more effective collaboration between upstream "
"projects and downstream repackagers, not to suggest upstream projects take "
"on tasks that downstream repackagers are better equipped to handle."
msgstr ""
"アップストリーム側プロジェクトが、システム側の依存関係を使ってビルドする *テ"
"スト* をダウンストリーム側の再パッケージ作業者に残しておくことは合理的です。"
"これらのガイドラインのゴールは、アップストリーム側プロジェクトとダウンスト"
"リーム側再パッケージ作業者の間の協調作業がより効率的になるようにお膳立てする"
"ことであって、ダウンストリーム側再パッケージ作業者がよりよく取り扱えるように"
"装備を整えるというタスクをアップストリーム側プロジェクトが分担するようにと示"
"唆するものではありません。"

#: ../source/discussions/downstream-packaging.rst:300
msgid "Support downstream testing"
msgstr "ダウンストリーム側のテストをサポートする"

#: ../source/discussions/downstream-packaging.rst:305
msgid ""
"A variety of downstream projects run some degree of testing on the packaged "
"Python projects. Depending on the particular case, this can range from "
"minimal smoke testing to comprehensive runs of the complete test suite. "
"There can be various reasons for doing this, for example:"
msgstr ""
"さまざまなダウンストリームプロジェクトが、何らかの形でパッケージ済みの "
"Python プロジェクトのテストを走らせています。これは、それぞれのケースに依っ"
"て、最低限のスモークテストからテストスイートを隅から隅まで網羅的に行うところ"
"までの幅を持ちます。こうしたことを行うにはさまざまな理由があり得ます:"

#: ../source/discussions/downstream-packaging.rst:310
msgid "Verifying that the downstream packaging did not introduce any bugs."
msgstr ""
"ダウンストリームのパッケージングがどんなバグも持ち込まないようにするために検"
"証すること。"

#: ../source/discussions/downstream-packaging.rst:312
msgid ""
"Testing on additional platforms that are not covered by upstream testing."
msgstr ""
"アップストリームのテストではカバーされていない追加的なプラットフォームでのテ"
"ストを行うこと。"

#: ../source/discussions/downstream-packaging.rst:314
msgid ""
"Finding subtle bugs that can only be reproduced with particular hardware, "
"system package versions, and so on."
msgstr ""
"特定のハードウェアやシステムパッケージのバージョンといったものだけで再現し得"
"る些細なバグを探索すること。"

#: ../source/discussions/downstream-packaging.rst:317
msgid ""
"Testing the released package against newer (or older) dependency versions "
"than the ones present during upstream release testing."
msgstr ""
"アップストリーム側でのリリース時のテストで使われたものに比べて、より新しい "
"(またはより古い) 依存先バージョンに対してリリース済パッケージをテストするこ"
"と。"

#: ../source/discussions/downstream-packaging.rst:320
msgid ""
"Testing the package in an environment closely resembling the production "
"setup. This can detect issues caused by non-trivial interactions between "
"different installed packages, including packages that are not dependencies "
"of your package, but nevertheless can cause issues."
msgstr ""
"本番構成に非常によく似た環境でパッケージをテストすること。これによって、パッ"
"ケージ自身の依存関係先ではないパッケージを含めて、異なるインストール済パッ"
"ケージとの間の自明でない相互作用によって引き起こされる問題点を検出することが"
"できます。"

#: ../source/discussions/downstream-packaging.rst:325
msgid ""
"Testing the released package against newer Python versions (including newer "
"point releases), or less tested Python implementations such as PyPy."
msgstr ""
"リリースされたパッケージを、 (ポイントリリースを含めて) より新しい Python の"
"バージョンや、よりテストされていない PyPy のような Python 実装に対してテスト"
"すること。"

#: ../source/discussions/downstream-packaging.rst:328
msgid ""
"Admittedly, sometimes downstream testing may yield false positives or bug "
"reports about scenarios the upstream project is not interested in "
"supporting. However, perhaps even more often it does provide early notice of "
"problems, or find non-trivial bugs that would otherwise cause issues for the "
"upstream project's users. While mistakes do happen, the majority of "
"downstream packagers are doing their best to double-check their results, and "
"help upstream maintainers triage and fix the bugs that they reported."
msgstr ""
"確かに、ダウンストリーム側でテストを行うと、偽陽性や、アップストリーム側プロ"
"ジェクトがサポートする上で興味を持たないようなシナリオについてのバグ報告を生"
"み出すかもしれません。しかしながら、おそらく、もっとよくあるのは、問題に関す"
"る早期の気付きを得たり、発見できなければアップストリーム側プロジェクトのユー"
"ザにとっての問題を引き起こしたであろう非自明のバグを発見したりということで"
"しょう。過誤は起きるものですが、ダウンストリーム側パッケージ作業者の大半は、"
"結果をダブルチェックすることに最善の努力を行っていますし、自分たちが報告した"
"バグをアップストリーム側の保守者が優先順位を付けて修正することを助けます。"

#: ../source/discussions/downstream-packaging.rst:339
msgid ""
"There are a number of things that upstream projects can do to help "
"downstream repackagers test their packages efficiently and effectively, "
"including some of the suggestions already mentioned above. These are "
"typically improvements that make the test suite more reliable and easier to "
"use for everyone, not just downstream packagers. Some specific suggestions "
"are:"
msgstr ""
"ダウンストリーム側の再パッケージ作業者がそのパッケージを効率よく効果的にテス"
"トするのを助けるために、アップストリーム側プロジェクトができることは、すでに"
"上述した示唆のいくつかを含めて沢山あります。これらは、典型的には、テストス"
"イートが誰にとってもより信頼できて簡単に使えるようにするような改善です。いく"
"つかの特定の示唆は:"

#: ../source/discussions/downstream-packaging.rst:345
msgid ""
"Include the test files and fixtures in the source distribution, or make it "
"possible to easily download them separately."
msgstr ""
"テストファイルと必要品はソースコード配布物の中に含めておくか、簡単に個別にダ"
"ウンロードできるようにしておきましょう。"

#: ../source/discussions/downstream-packaging.rst:348
msgid ""
"Do not write to the package directories during testing. Downstream test "
"setups sometimes run tests on top of the installed package, and "
"modifications performed during testing and temporary test files may end up "
"being part of the installed package!"
msgstr ""
"テストを実行している間は、パッケージのディレクトリに書き込んではいけません。"
"ダウンストリーム側のテスト構成は、インストールパッケージのトップディレクトリ"
"で実行される場合があり、テスト実行中の修正や一時的なテストファイルがインス"
"トールパッケージの一部となってしまうかもしれません！"

#: ../source/discussions/downstream-packaging.rst:353
msgid ""
"Make the test suite work offline. Mock network interactions, using packages "
"such as responses_ or vcrpy_. If that is not possible, make it possible to "
"easily disable the tests using Internet access, e.g. via a pytest_ marker. "
"Use pytest-socket_ to verify that your tests work offline. This often makes "
"your own test workflows faster and more reliable as well."
msgstr ""
"テストスイートがオフラインで動作するように作ってください。 responses_ や "
"vcrpy_ のようなパッケージを使って、ネットワークとの相互作用を疑似的に行ってく"
"ださい。もし可能であれば、たとえば pytest_ マーカを経由するなどして、インター"
"ネットアクセスを伴うテストを簡単に無効にできるようにしてください。テストがオ"
"フラインで動作可能であることを検証するには、 pytest-socket_ を使ってくださ"
"い。このようにすることで、テストワークフローがより素早く、かつ、より信頼でき"
"る形で実行できるようになります。"

#: ../source/discussions/downstream-packaging.rst:359
msgid ""
"Make your tests work without a specialized setup, or perform the necessary "
"setup as part of test fixtures. Do not ever assume that you can connect to "
"system services such as databases — in an extreme case, you could crash a "
"production service!"
msgstr ""
"テストが特別な設定なしで動作するようにするか、または、必要な設定をテストの必"
"要物の一部として行うようにしましょう。データベースのようなシステム側のサービ"
"スに接続することができるとは絶対に仮定しないでください -- とんでもない場合に"
"は、供用中のサービスをクラッシュさせるかもしれませんよ！"

#: ../source/discussions/downstream-packaging.rst:364
msgid ""
"If your package has optional dependencies, make their tests optional as "
"well. Either skip them if the needed packages are not installed, or add "
"markers to make deselecting easy."
msgstr ""
"パッケージがオプションの依存関係を持つなら、その部分のテストもまたオプション"
"にしましょう。必要なパッケージがインストールされていなければ、そのようなテス"
"トをスキップするか、簡単に選択外にすることができるようなマーカを追加しましょ"
"う。"

#: ../source/discussions/downstream-packaging.rst:368
msgid ""
"More generally, add markers to tests with special requirements. These can "
"include e.g. significant space usage, significant memory usage, long "
"runtime, incompatibility with parallel testing."
msgstr ""
"もっと一般的に、特別な要求事項を伴うテストにはマーカを付けましょう。これに"
"は、例えば、相当な記憶スペースを使用する、相当なメモリを使用する、長時間を要"
"する、並行でテストを走らせることができない、などが含まれます。"

#: ../source/discussions/downstream-packaging.rst:372
msgid ""
"Do not assume that the test suite will be run with ``-Werror``. Downstreams "
"often need to disable that, as it causes false positives, e.g. due to newer "
"dependency versions. Assert for warnings using ``pytest.warns()`` rather "
"than ``pytest.raises()``!"
msgstr ""
"テストスイートが ``-Werror`` 付きで実行されるであろうと仮定してはなりません。"
"それは、例えばより新しい依存関係のバージョンなどのせいで偽陽性を引き起こすの"
"で、往々にしてダウンストリーム側では無効にする必要があります。 ``pytest."
"raises()`` を使うよりも ``pytest.warns()`` を使って警告をアサートしてくださ"
"い！"

#: ../source/discussions/downstream-packaging.rst:377
msgid ""
"Aim to make your test suite reliable and reproducible. Avoid flaky tests. "
"Avoid depending on specific platform details, don't rely on exact results of "
"floating-point computation, or timing of operations, and so on. Fuzzing has "
"its advantages, but you want to have static test cases for completeness as "
"well."
msgstr ""
"テストスイートが信頼できて再現可能なものになることを目指しましょう。当てにな"
"らないテストを避けましょう。浮動小数点計算や操作のタイミングの結果をそのまま"
"信頼することなど、特別なプラットフォームの細部に依存するものを避けましょう。"
"ファジングには利点もありますが、完全性を期すための静的なテストも持っておきた"
"いでしょう。"

#: ../source/discussions/downstream-packaging.rst:383
msgid ""
"Split tests by their purpose, and make it easy to skip categories that are "
"irrelevant or problematic. Since the primary purpose of downstream testing "
"is to ensure that the package itself works, downstreams are not generally "
"interested in tasks such as checking code coverage, code formatting, "
"typechecking or running benchmarks. These tests can fail as dependencies are "
"upgraded or the system is under load, without actually affecting the package "
"itself."
msgstr ""
"その目的に従ってテストを分割し、重要でないカテゴリや問題含みのカテゴリを簡単"
"にスキップできるようにしましょう。ダウンストリーム側でのテストの一義的な目的"
"は、そのパッケージ自体が動作することを保証することであって、一般的に、ダウン"
"ストリーム側ではコードカバー率・コードフォーマット・型チェックやベンチマーク"
"するというようなタスクには興味がありません。パッケージ自体に実際に影響を与え"
"ることはなくとも、依存関係先がアップグレードされたりシステムが高負荷下にあっ"
"たりするとこれらのテストが失敗する可能性があります。"

#: ../source/discussions/downstream-packaging.rst:390
msgid ""
"If your test suite takes significant time to run, support testing in "
"parallel. Downstreams often maintain a large number of packages, and testing "
"them all takes a lot of time. Using pytest-xdist_ can help them avoid "
"bottlenecks."
msgstr ""
"テストスイートの実行に非常に長い時間がかかるなら、並行テストをサポートしま"
"しょう。ダウンストリーム側は、しばしば、多数のパッケージを維持管理していて、"
"それらを全てテストするには長い時間がかかります。ボトルネックを避けるには、 "
"pytest-xdist_ を使うことが助けとなるでしょう。"

#: ../source/discussions/downstream-packaging.rst:395
msgid ""
"Ideally, support running your test suite via ``pytest``. pytest_ has many "
"command-line arguments that are truly helpful to downstreams, such as the "
"ability to conveniently deselect tests, rerun flaky tests (via pytest-"
"rerunfailures_), add a timeout to prevent tests from hanging (via pytest-"
"timeout_) or run tests in parallel (via pytest-xdist_). Note that test "
"suites don't need to be *written* with ``pytest`` to be *executed* with "
"``pytest``: ``pytest`` is able to find and execute almost all test cases "
"that are compatible with the standard library's ``unittest`` test discovery."
msgstr ""
"理想としては、テストスイートを ``pytest``を通じて走らせることをサポートしてく"
"ださい。 pytest_ は、テストを便利に非選択にしたり、当てにならないテストを "
"(pytest-rerunfailures_を通じて) 再実行したり、テストがハングアップしてしまう"
"のを防ぐためのタイムアウトを (pytest-timeout_ を通じて) 追加したり、 (pytest-"
"xdist_ を通じて) テストを並行して走らせたり、といったダウンストリーム側に真に"
"役立つ多くのコマンドライン引数を持っています。テストスイートが ``pytest`` と"
"一緒に *書かれている* ことや ``pytest`` と一緒に *実行される* 必要はないこと"
"を覚えておいてください: ``pytest`` は、標準ライブラリの ``unittest`` テスト探"
"索と互換性のあるほぼ全てのテストケースを探索して実行することができます。"

#: ../source/discussions/downstream-packaging.rst:409
msgid "Aim for stable releases"
msgstr "安定版リリースの目的"

#: ../source/discussions/downstream-packaging.rst:414
msgid ""
"Many downstreams provide stable release channels in addition to the main "
"package streams. The goal of these channels is to provide more conservative "
"upgrades to users with higher stability needs. These users often prefer to "
"trade having the newest features available for lower risk of issues."
msgstr ""
"多くのダウンストリームは、メインのパッケージストリームに加えて、ステーブルリ"
"リースチャンネルを提供しています。このようなチャンネルのゴールは、より高い安"
"定性を必要とするユーザ向けに、より保守的なアップグレードを提供することです。"
"このようなユーザは、しばしば、最新の機能を得ることよりも、問題発生のリスクが"
"より低いことを選択することを好みます。"

#: ../source/discussions/downstream-packaging.rst:419
msgid ""
"While the exact policies differ, an important criterion for including a new "
"package version in a stable release channel is for it to be available in "
"testing for some time already, and have no known major regressions. For "
"example, in Gentoo Linux a package is usually marked stable after being "
"available in testing for a month, and being tested against the versions of "
"its dependencies that are marked stable at the time."
msgstr ""
"正確にはポリシーはそれぞれに異なりますが、新しいバージョンのパッケージをス"
"テーブルリリースチャンネルに取り込む際の重要な評価基準は、すでに幾らかの時間"
"をかけてテストが行われているものを利用可能にする、既知の大きな手戻りがない、"
"ということです。例えば、 Gentoo Linux では、あるパッケージがステーブルである"
"と印をつけられるのは一ヶ月間のテストが行われた後であり、その時点で依存関係先"
"のパッケージ群がステーブルであるバージョンを使ってテストされていることです。"

#: ../source/discussions/downstream-packaging.rst:426
msgid ""
"However, there are circumstances which demand more prompt action. For "
"example, if a security vulnerability or a major bug is found in the version "
"that is currently available in the stable channel, the downstream is facing "
"a need to resolve it. In this case, they need to consider various options, "
"such as:"
msgstr ""
"しかしながら、もっと素早い行動が要求される状況もあります。例えば、ステーブル"
"チャンネルで現に利用可能になっているバージョンにセキュリティ上の脆弱性や大き"
"なバグが発見された場合、ダウンストリーム側はそれを解決する必要に直面します。"
"このような場合には、以下のようなさまざまな選択肢を考慮の対象とする必要があり"
"ます:"

#: ../source/discussions/downstream-packaging.rst:431
msgid "putting a new version in the stable channel early,"
msgstr "新しいバージョンをステーブルチャンネルに早期に送り、"

#: ../source/discussions/downstream-packaging.rst:433
msgid "adding patches to the version currently published,"
msgstr "その時点で公開されているバージョンにパッチを追加し、"

#: ../source/discussions/downstream-packaging.rst:435
msgid "or even downgrading the stable channel to an earlier release."
msgstr ""
"あるいは、ステーブルチャンネルを以前のリリースへとダウングレードさえも行う。"

#: ../source/discussions/downstream-packaging.rst:437
msgid ""
"Each of these options involves certain risks and a certain amount of work, "
"and packagers needs to weigh them to determine the course of action."
msgstr ""
"これらのオプションは、それぞれ、それなりのリスクとそれなりの作業量を伴うもの"
"であり、パッケージ作業者はアクションの方向性を決定するために重み付けを行う必"
"要があります。"

#: ../source/discussions/downstream-packaging.rst:443
msgid ""
"There are some things that upstreams can do to tailor their workflow to "
"stable release channels. These actions often are beneficial to the package's "
"users as well. Some specific suggestions are:"
msgstr ""
"ステーブルリリースチャンネル向けのワークフローを調整するためにアップストリー"
"ム側ができることがいくつかあります。これらのアクションは、しばしば、パッケー"
"ジのユーザにも恩恵を与えます。いくつかの具体的な示唆が続きます:"

#: ../source/discussions/downstream-packaging.rst:447
msgid ""
"Adjust the release frequency to the rate of code changes. Packages that are "
"released rarely often bring significant changes with every release, and a "
"higher risk of accidental regressions."
msgstr ""
"リリースの頻度をコード変更の割合に適合させましょう。稀にしかリリースされない"
"パッケージは、しばしば、毎回のリリースに巨大な変更を持ち込み、偶発的な手戻り"
"のリスクを高めます。"

#: ../source/discussions/downstream-packaging.rst:451
msgid ""
"Avoid mixing bug fixes and new features, if possible. In particular, if "
"there are known bug fixes merged already, consider making a new release "
"before merging feature branches."
msgstr ""
"可能であれば、バグ修正と新機能を混ぜないようにしましょう。とりわけ、既知のバ"
"グ修正がすでにマージされているなら、機能ブランチをマージする前に新しいリリー"
"スを行うことを検討しましょう。"

#: ../source/discussions/downstream-packaging.rst:455
msgid ""
"Consider making prereleases after major changes, to provide more testing "
"opportunities for users and downstreams willing to opt-in."
msgstr ""
"大きな変更の後には、ユーザやダウンストリーム側が自発的に参加するような試験の"
"機会をより多く提供するために、プレリリースを作ることを検討しましょう。"

#: ../source/discussions/downstream-packaging.rst:458
msgid ""
"If your project is subject to very intense development, consider splitting "
"one or more branches that include a more conservative subset of commits, and "
"are released separately. For example, Django_ currently maintains three "
"release branches in addition to main."
msgstr ""
"プロジェクトが集中した開発を必要とするのであれば、より保守的なコミットだけを"
"含むブランチを分岐させて、個別にリリースを行うことを検討しましょう。例えば、"
"現状では、 Django_ は main ブランチに加えて３個のリリースブランチを維持してい"
"ます。"

#: ../source/discussions/downstream-packaging.rst:463
msgid ""
"Even if you don't wish to maintain additional branches permanently, consider "
"making additional patch releases with minimal changes to the previous "
"version, especially when a security vulnerability is discovered."
msgstr ""
"追加のブランチを恒常的に維持していくことを望まない場合であってさえ、特にセ"
"キュリティ上の脆弱性が発見された時には、以前のバージョンに最低限の変更を加え"
"たパッチリリースを追加することを検討しましょう。"

#: ../source/discussions/downstream-packaging.rst:467
msgid ""
"Split your changes into focused commits that address one problem at a time, "
"to make it easier to cherry-pick changes to earlier releases when necessary."
msgstr ""
"必要となればそれ以前のリリース用にチェリーピッキングした変更を取り込みやすく"
"なるように、変更は、ある時点でひとつの問題に対処することに焦点を当てたコミッ"
"トに分割しましょう。"

#: ../source/discussions/index.rst:4
msgid ""
"**Discussions** are focused on providing comprehensive information about a "
"specific topic. If you're just trying to get stuff done, see :doc:`/guides/"
"index`."
msgstr ""
"**議論型文書**は、特定の話題について網羅的な情報を提供することに重点を置いて"
"います。もしあなたがとにかく何かを終わらせようとしているだけなら、:doc:`/"
"guides/index`を見た方が良いでしょう。"

#: ../source/discussions/install-requires-vs-requirements.rst:5
msgid "install_requires vs requirements files"
msgstr "install_requiresかrequirementsか"

#: ../source/discussions/install-requires-vs-requirements.rst:9
msgid "install_requires"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:11
msgid ""
"``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that "
"should be used to specify what a project **minimally** needs to run "
"correctly. When the project is installed by :ref:`pip`, this is the "
"specification that is used to install its dependencies."
msgstr ""
"``install_requires``は:ref:`setuptools` :file:`setup.py`のキーワードで、その"
"プロジェクトが正しく動作するために必要な最小限のものを指定するものです。プロ"
"ジェクトが:ref:`pip`でインストールされた場合には、プロジェクトが依存するパッ"
"ケージをインストールするのに用いられます。"

#: ../source/discussions/install-requires-vs-requirements.rst:16
msgid ""
"For example, if the project requires A and B, your ``install_requires`` "
"would be like so:"
msgstr ""
"例えば、プロジェクトがAとBに依存しているなら、``install_requires``は次のよう"
"になるでしょう："

#: ../source/discussions/install-requires-vs-requirements.rst:26
msgid ""
"Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""
"さらに、下限や上限がわかっているなら、それを示しておくことがベストプラクティ"
"スです。"

#: ../source/discussions/install-requires-vs-requirements.rst:28
msgid ""
"For example, it may be known, that your project requires at least v1 of 'A', "
"and v2 of 'B', so it would be like so:"
msgstr ""
"例えば、あなたのプロジェクトが少なくともv1の'A'と少なくともv2の'B'を必要とす"
"るとわかっているなら、次のようになるでしょう："

#: ../source/discussions/install-requires-vs-requirements.rst:38
msgid ""
"It may also be known that project 'A' introduced a change in its v2 that "
"breaks the compatibility of your project with v2 of 'A' and later, so it "
"makes sense to not allow v2:"
msgstr ""
"また、プロジェクト 'A' が v2 になる時にある変更を行なったために、あなたのプロ"
"ジェクトと 'A' の v2 以降のバージョンとの間の互換性が失われるであろうという場"
"合には、 v2 を許容しないことが筋の通ったことになるでしょう。"

#: ../source/discussions/install-requires-vs-requirements.rst:49
msgid ""
"It is not considered best practice to use ``install_requires`` to pin "
"dependencies to specific versions, or to specify sub-dependencies (i.e. "
"dependencies of your dependencies).  This is overly-restrictive, and "
"prevents the user from gaining the benefit of dependency upgrades."
msgstr ""
"依存関係にあるものを特定のバージョンに固定するために、あるいは、さらなる依存"
"関係(すなわち、あなたの依存先が依存するもの)を指定するために"
"``install_requires``を使うことはベストプラクティスとは考えられていません。こ"
"れは過剰に制限的であり、依存関係にあるものをまとめて更新することからユーザが"
"得られる利益を阻害するものと考えられています。"

#: ../source/discussions/install-requires-vs-requirements.rst:54
msgid ""
"Lastly, it's important to understand that ``install_requires`` is a listing "
"of \"Abstract\" requirements, i.e just names and version restrictions that "
"don't determine where the dependencies will be fulfilled from (i.e. from "
"what index or source).  The where (i.e. how they are to be made "
"\"Concrete\") is to be determined at install time using :ref:`pip` options. "
"[1]_"
msgstr ""
"最後に、``install_requires``が必要事項の「要約」のリスト、つまり、単に必要事"
"項の名前とバージョンが要求されるだけあって、どこから(すなわち、どんな索引や情"
"報源から)充当するのかについては要求していないのだということを理解することは重"
"要です。どこから(すなわち、どのようにして「具体化」されるのか)という点につい"
"ては、:ref:`pip`のオプションを使ってインストール時に決定されるのです。[1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:62
#: ../source/tutorials/installing-packages.rst:464
msgid "Requirements files"
msgstr "Requirementsファイル"

#: ../source/discussions/install-requires-vs-requirements.rst:64
msgid ""
":ref:`Requirements Files <pip:Requirements Files>` described most simply, "
"are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""
":ref:`Requirementsファイル <pip:Requirements Files>`は、一番簡単にいうなら"
"ば、:ref:`pip:pip install`の引数のリストをファイルに書いただけのものです。"

#: ../source/discussions/install-requires-vs-requirements.rst:67
msgid ""
"Whereas ``install_requires`` defines the dependencies for a single project, :"
"ref:`Requirements Files <pip:Requirements Files>` are often used to define "
"the requirements for a complete Python environment."
msgstr ""
"``install_requires``が単一のプロジェクトにおける依存関係を定義する一方で、:"
"ref:`Requirements Files <pip:Requirements Files>`はPython環境全体に対する要求"
"事項を定義するのにしばしば用いられます。"

#: ../source/discussions/install-requires-vs-requirements.rst:71
msgid ""
"Whereas ``install_requires`` requirements are minimal, requirements files "
"often contain an exhaustive listing of pinned versions for the purpose of "
"achieving :ref:`repeatable installations <pip:Repeatability>` of a complete "
"environment."
msgstr ""
"``install_requires``での要求事項が最小限のものである一方で、requirementsファ"
"イルは再現可能な形で環境全体をインストールできるようにする:ref:`repeatable "
"installations <pip:Repeatability>`という目的に沿って限定されたバージョンの網"
"羅的なリストを含むことがしばしばです。"

#: ../source/discussions/install-requires-vs-requirements.rst:76
msgid ""
"Whereas ``install_requires`` requirements are \"Abstract\", i.e. not "
"associated with any particular index, requirements files often contain pip "
"options like ``--index-url`` or ``--find-links`` to make requirements "
"\"Concrete\", i.e. associated with a particular index or directory of "
"packages. [1]_"
msgstr ""
"``install_requires``での要求事項が「要約」、すなわち特定の索引には紐づけられ"
"ていないのに対して、requirementsファイルではしばしば``--index-url``や``--"
"find-links``のようなpipのオプションが含まれていて特定の索引やパッケージ登録簿"
"に紐づけられた「具体的な」要求事項になっています。[1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:82
msgid ""
"Whereas ``install_requires`` metadata is automatically analyzed by pip "
"during an install, requirements files are not, and only are used when a user "
"specifically installs them using ``python -m pip install -r``."
msgstr ""
"``install_requires``では、メタデータがインストール中にpipによって自動的に解析"
"される一方、requirementsファイルではそうではなく、``python -m pip install -"
"r``を使ってユーザが明示的にインストールする時に使われるだけです。"

#: ../source/discussions/install-requires-vs-requirements.rst:88
msgid ""
"For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad."
"io/posts/2013/07/setup-vs-requirement/."
msgstr ""
"要求事項が「要約」か「具体的」かの議論についてもっと知りたい場合は、https://"
"caremad.io/posts/2013/07/setup-vs-requirement/をご覧ください。"

#: ../source/discussions/package-formats.rst:5
msgid "Package Formats"
msgstr "パッケージフォーマット"

#: ../source/discussions/package-formats.rst:7
msgid ""
"This page discusses the file formats that are used to distribute Python "
"packages and the differences between them."
msgstr ""
"このページでは、 Python パッケージの配布に使われるファイルフォーマット群とそ"
"の相違点について議論します。"

#: ../source/discussions/package-formats.rst:10
msgid ""
"You will find files in two formats on package indices such as PyPI_: "
"**source distributions**, or **sdists** for short, and **binary "
"distributions**, commonly called **wheels**.  For example, the `PyPI page "
"for pip 23.3.1 <pip-pypi_>`_ lets you download two files, ``pip-23.3.1.tar."
"gz`` and ``pip-23.3.1-py3-none-any.whl``.  The former is an sdist, the "
"latter is a wheel. As explained below, these serve different purposes. When "
"publishing a package on PyPI (or elsewhere), you should always upload both "
"an sdist and one or more wheel."
msgstr ""
"PyPI_ のようなパッケージインデックス上には、２種類のフォーマットが見つかるこ"
"とでしょう: **ソースコード配布物 <source distributions>** 、短縮形で "
"**sdists**と呼ばれるものと **バイナリ配布物 <binary distributions>** 、普通"
"は **wheels** を呼ばれるものです。例えば、 `pip 23.3.1 用の PyPI ページ <pip-"
"pypi_>`_ では、 ``pip-23.3.1.tar.gz`` と ``pip-23.3.1-py3-none-any.whl`` の二"
"つのファイルをダウンロードすることができます。前者は sdist であり、後者は "
"wheel です。下で説明するように、これらは異なった目的のために提供されていま"
"す。 PyPI (にせよ他のどこかにせよ) パッケージを公開する時は、常に sdist とひ"
"とつまたは複数の wheel の両方をアップロードするべきです。"

#: ../source/discussions/package-formats.rst:21
msgid "What is a source distribution?"
msgstr "ソースコード配布物とは何か？"

#: ../source/discussions/package-formats.rst:23
msgid ""
"Conceptually, a source distribution is an archive of the source code in raw "
"form. Concretely, an sdist is a ``.tar.gz`` archive containing the source "
"code plus an additional special file called ``PKG-INFO``, which holds the "
"project metadata. The presence of this file helps packaging tools to be more "
"efficient by not needing to compute the metadata themselves. The ``PKG-"
"INFO`` file follows the format specified in :ref:`core-metadata` and is not "
"intended to be written by hand [#core-metadata-format]_."
msgstr ""
"概念としては、ソースコード配布物は生の形のソースコードをアーカイブしたもので"
"す。具体的に言うと、sdist は、ソースコードに加えて、プロジェクトのメタデータ"
"を保持する ``PKG-INFO`` と言う名の特別なファイルをアーカイブした ``.tar.gz`` "
"ファイルです。このファイルの存在によってメタデータを自分自身で計算しなくても"
"済むようにすることでパッケージングツール群を補助しています。 ``PKG-INFO`` "
"ファイルは、 :ref:`コアとなるメタデータ <core-metadata>` で指定されたフォー"
"マットに従うもので、人の手で書くことが想定されていないものです [#core-"
"metadata-format]_ 。"

#: ../source/discussions/package-formats.rst:31
msgid ""
"You can thus inspect the contents of an sdist by unpacking it using standard "
"tools to work with tar archives, such as ``tar -xvf`` on UNIX platforms "
"(like Linux and macOS), or :ref:`the command line interface of Python's "
"tarfile module <python:tarfile-commandline>` on any platform."
msgstr ""
"従って、tar アーカイブを扱える標準的なツール、例えば UNIX プラットフォーム "
"(Linux や macOS) 上の ``tar -xvf`` や任意のプラットフォーム上の :ref:`Python "
"の tarfile モジュールのコマンドラインインターフェース <python:tarfile-"
"commandline>` を使ってアンパックすることで、ある sdist の内容を検査することが"
"できます。"

#: ../source/discussions/package-formats.rst:36
msgid ""
"Sdists serve several purposes in the packaging ecosystem. When :ref:`pip`, "
"the standard Python package installer, cannot find a wheel to install, it "
"will fall back on downloading a source distribution, compiling a wheel from "
"it, and installing the wheel. Furthermore, sdists are often used as the "
"package source by downstream packagers (such as Linux distributions, Conda, "
"Homebrew and MacPorts on macOS, ...), who, for various reasons, may prefer "
"them over, e.g., pulling from a Git repository."
msgstr ""
"sdist は、パッケージングのエコシステムの中でいくつかの目的のために使用されま"
"す。Python パッケージインストーラの標準である :ref:`pip` がインストールするべ"
"き wheel を見つけられない時にソースコード配布物をダウンロードしてそこから "
"wheel をコンパイルし、その wheel をインストールするようにフォールバックするこ"
"とでしょう。さらに、さまざまな理由で例えば Git リポジトリからプルすることなど"
"よりも (sdist を) 好むダウンストリームパッケージ (Linux ディストリビューショ"
"ン、 Conda 、 macOS 上の Homebrew や MacPorts など ...)にとってのパッケージ"
"ソースとしてしばしば sdist が使われます。"

#: ../source/discussions/package-formats.rst:44
msgid ""
"A source distribution is recognized by its file name, which has the form :"
"samp:`{package_name}-{version}.tar.gz`, e.g., ``pip-23.3.1.tar.gz``."
msgstr ""
"ソースコード配布物は、 :samp:`{package_name}-{version}.tar.gz` の形、例えば "
"``pip-23.3.1.tar.gz`` のファイル名で識別されます。"

#: ../source/discussions/package-formats.rst:50
msgid ""
"If you want technical details on the sdist format, read the :ref:`sdist "
"specification <source-distribution-format>`."
msgstr ""
"sdist 形式の技術的な詳細を知りたければ、 :ref:`sdist 仕様 <source-"
"distribution-format>` を見てください。"

#: ../source/discussions/package-formats.rst:55
msgid "What is a wheel?"
msgstr "wheel とは何か？"

#: ../source/discussions/package-formats.rst:57
msgid ""
"Conceptually, a wheel contains exactly the files that need to be copied when "
"installing the package."
msgstr ""
"概念としては、 wheel は、パッケージをインストールする際にコピーされる必要のあ"
"るファイル群をそのまま含んでいるものです。"

#: ../source/discussions/package-formats.rst:60
msgid ""
"There is a big difference between sdists and wheels for packages with :term:"
"`extension modules <extension module>`, written in compiled languages like "
"C, C++ and Rust, which need to be compiled into platform-dependent machine "
"code. With these packages, wheels do not contain source code (like C source "
"files) but compiled, executable code (like ``.so`` files on Linux or DLLs on "
"Windows)."
msgstr ""
"プラットフォームに依存した機械語にコンパイルする必要がある C や C++ や Rust "
"のようなコンパイル言語で書かれた :term:`拡張モジュール <extension module>` を"
"伴うパッケージにおいては、sdist と wheel の間には大きな違いがあります。このよ"
"うなパッケージでは、 wheel は (C言語のソースのような) ソースコードを内包して"
"おらず、代わりに (Linux における ``.so`` ファイルや Windows における DLL のよ"
"うな) コンパイル済みで実行可能なコードを含んでいます。"

#: ../source/discussions/package-formats.rst:66
msgid ""
"Furthermore, while there is only one sdist per version of a project, there "
"may be many wheels. Again, this is most relevant in the context of extension "
"modules. The compiled code of an extension module is tied to an operating "
"system and processor architecture, and often also to the version of the "
"Python interpreter (unless the :ref:`Python stable ABI <cpython-stable-abi>` "
"is used)."
msgstr ""
"さらにまた、あるバージョンのプロジェクトには sdist がひとつしか存在しない一方"
"で、wheel はたくさんあるかもしれません。繰り返しになりますが、これは拡張モ"
"ジュールの文脈でもっとも有りがちなことです。拡張モジュールのコンパイル済みの"
"コードはオペレーティングシステムとプロセッサーアーキテクチャに、また、 (:ref:"
"`Python stable ABI <cpython-stable-abi>` を使っていなければ) しばしば Python "
"インタープリタのバージョンに紐付いています。"

#: ../source/discussions/package-formats.rst:72
msgid ""
"For pure-Python packages, the difference between sdists and wheels is less "
"marked. There is normally one single wheel, for all platforms and Python "
"versions.  Python is an interpreted language, which does not need ahead-of-"
"time compilation, so wheels contain ``.py`` files just like sdists."
msgstr ""
"純 Python のパッケージでは、 sdist と wheel の差異はあまり顕著ではありませ"
"ん。普通は、あらゆるプラットフォームと Python のバージョン向けに wheel がたっ"
"たひとつ存在します。 Python はインタープリタ言語であり、事前にコンパイルして"
"おく必要がなく、それゆえに wheel は sdist と同様に ``.py`` ファイル群を内包し"
"ているのです。"

#: ../source/discussions/package-formats.rst:77
msgid ""
"If you are wondering about ``.pyc`` bytecode files: they are not included in "
"wheels, since they are cheap to generate, and including them would "
"unnecessarily force a huge number of packages to distribute one wheel per "
"Python version instead of one single wheel. Instead, installers like :ref:"
"`pip` generate them while installing the package."
msgstr ""
"``.pyc`` バイトコードファイル群: これらは wheel には含まれていませんが、これ"
"らについて不思議に思っているなら、これらは安価に生成することができ、また、も"
"しこれをパッケージに含めるとすれば、単一の wheel を配布する代わりに、Python "
"のバージョン毎に巨大な数のパッケージを配布するという不必要なことを強いられる"
"ことになるでしょう。代わりに、 :ref:`pip` のようなインストーラがインストール"
"中に生成しています。"

#: ../source/discussions/package-formats.rst:83
msgid ""
"With that being said, there are still important differences between sdists "
"and wheels, even for pure Python projects. Wheels are meant to contain "
"exactly what is to be installed, and nothing more. In particular, wheels "
"should never include tests and documentation, while sdists commonly do.  "
"Also, the wheel format is more complex than sdist. For example, it includes "
"a special file -- called ``RECORD`` -- that lists all files in the wheel "
"along with a hash of their content, as a safety check of the download's "
"integrity."
msgstr ""
"そうは言っても、たとえ純 Python のプロジェクトであったとしても、 sdist と "
"wheel の間には依然として重要な違いがあります。 wheel は、インストールされるも"
"のだけを正確に含むように、それ以外のものは含まないようにと意図して作られてい"
"ます。とりわけ、 wheel にはテストや説明文書を決して含めるべきではありません"
"が、他方で sdist では普通はこれらを含みます。また、 wheel のフォーマットは "
"sdist のものよりもより複雑です。例えば、wheel にはある特別なファイル -- "
"``RECORD`` と呼ばれます -- が含まれていて、このファイルには wheel 内の他のす"
"べてのファイルのハッシュ値付きのリストが含まれており、安全性の確認やダウン"
"ロードの際の完全性の確認に使われます。"

#: ../source/discussions/package-formats.rst:91
msgid ""
"At a glance, you might wonder if wheels are really needed for \"plain and "
"basic\" pure Python projects. Keep in mind that due to the flexibility of "
"sdists, installers like pip cannot install from sdists directly -- they need "
"to first build a wheel, by invoking the :term:`build backend` that the sdist "
"specifies (the build backend may do all sorts of transformations while "
"building the wheel, such as compiling C extensions). For this reason, even "
"for a pure Python project, you should always upload *both* an sdist and a "
"wheel to PyPI or other package indices. This makes installation much faster "
"for your users, since a wheel is directly installable. By only including "
"files that must be installed, wheels also make for smaller downloads."
msgstr ""
"一見したところでは、 wheel こそが \"単純かつ基本的な\" 純 Python プロジェクト"
"に必要なものではないかと思うかもしれません。 sdist の自由度が大きいために "
"pip のようなインストーラは sdist から直接にインストールすることができないとい"
"うことを覚えておいてください -- まず sdist が指定する :term:`ビルドバックエン"
"ド <build backend>` を起動することで (ビルドバックエンドはビルドして wheel を"
"作成している間に C 言語拡張のコンパイルのようなあらゆる種類の変形をすべて行い"
"ます) wheel をビルドする必要があるのです。こう言う理由で、たとえ純 Python の"
"プロジェクトであっても、PyPI やその他のパッケージインデックスには常に sdist "
"と wheel の *両方* をアップロードしておくべきなのです。こうすることで、wheel "
"なら直接にインストールできるので、ユーザにとってはインストールがとても素早く"
"行えることになります。インストールされるファイルだけを含むという wheel の性質"
"は、ダウンロードのサイズが小さくなることにもつながります。"

#: ../source/discussions/package-formats.rst:102
msgid ""
"On the technical level, a wheel is a ZIP archive (unlike sdists which are "
"TAR archives). You can inspect its contents by unpacking it as a normal ZIP "
"archive, e.g., using ``unzip`` on UNIX platforms like Linux and macOS, "
"``Expand-Archive`` in Powershell on Windows, or :ref:`the command line "
"interface of Python's zipfile module <python:zipfile-commandline>`. This can "
"be very useful to check that the wheel includes all the files you need it to."
msgstr ""
"技術的なレベルでは、 wheel は (sdist が TAR アーカイブであるのとは違って) "
"ZIP アーカイブです。例えば Linux や macOS のような UNIX 系プラットフォームな"
"ら ``unzip`` 、 Windows 上の PowerShell 内なら ``Expand-Archive`` 、あるいは "
"Python の zipfile モジュールのコマンドライン <python:zipfile-commandline>` を"
"使って通常の ZIP アーカイブとして展開することで、内容を検査することができま"
"す。これは、 wheel ファイルが必要なすべてのファイルを内包していることを確認す"
"るのにとても便利です。"

#: ../source/discussions/package-formats.rst:109
msgid ""
"Inside a wheel, you will find the package's files, plus an additional "
"directory called :samp:`{package_name}-{version}.dist-info`. This directory "
"contains various files, including a ``METADATA`` file which is the "
"equivalent of ``PKG-INFO`` in sdists, as well as ``RECORD``. This can be "
"useful to ensure no files are missing from your wheels."
msgstr ""
"wheel の中には、パッケージのファイル群と :samp:`{package_name}-{version}."
"dist-info` と呼ばれる追加のディレクトリがあります。このディレクトリには、 "
"sdist における ``PKG-INFO`` に相当する ``METADATA`` ファイルや ``RECORD`` な"
"どのさまざまなファイルを含みます。これは、wheel 内のファイルがひとつも欠けて"
"いないことを保証するのに役立ちます。"

#: ../source/discussions/package-formats.rst:115
msgid ""
"The file name of a wheel (ignoring some rarely used features) looks like "
"this: :samp:`{package_name}-{version}-{python_tag}-{abi_tag}-{platform_tag}."
"whl`. This naming convention identifies which platforms and Python versions "
"the wheel is compatible with. For example, the name ``pip-23.3.1-py3-none-"
"any.whl`` means that:"
msgstr ""
"wheel のファイル名は (ほとんど使われることのない幾つかの機能を除けば) このよ"
"うに見えます: :samp:`{package_name}-{version}-{python_tag}-{abi_tag}-"
"{platform_tag}.whl` 。この命名規則によって、その wheel がどのプラットフォーム"
"でどの Python バージョンと互換性を持つのかを識別することができます。例えば、 "
"``pip-23.3.1-py3-none-any.whl`` という名前は次のことを意味します:"

#: ../source/discussions/package-formats.rst:121
msgid ""
"(``py3``) This wheel can be installed on any implementation of Python 3, "
"whether CPython, the most widely used Python implementation, or an "
"alternative implementation like PyPy_;"
msgstr ""
"(``py3``) CPython、最も広く使われている Python 実装、あるいは PyPy_ のような"
"代替実装でも、 Python 3 の実装があればどこでも、この wheel をインストールする"
"ことができます;"

#: ../source/discussions/package-formats.rst:124
msgid "(``none``) It does not depend on the Python version;"
msgstr "(``none``) Python のバージョンには依存しません;"

#: ../source/discussions/package-formats.rst:125
msgid "(``any``) It does not depend on the platform."
msgstr "(``any``) プラットフォームには依存しません。"

#: ../source/discussions/package-formats.rst:127
msgid ""
"The pattern ``py3-none-any`` is common for pure Python projects. Packages "
"with extension modules typically ship multiple wheels with more complex tags."
msgstr ""
"``py3-none-any`` というパターンは、純 Python のプロジェクトに広く見られます。"
"拡張モジュールを伴うパッケージは、典型的に、もっと複雑なタグ群を持つ複数の "
"wheel を出荷します。"

#: ../source/discussions/package-formats.rst:130
msgid ""
"All technical details on the wheel format can be found in the :ref:`wheel "
"specification <binary-distribution-format>`."
msgstr ""
"wheel のフォーマットに関するすべての技術的な詳細は、 :ref:`wheel 仕様 "
"<binary-distribution-format>` で見つかるでしょう。"

#: ../source/discussions/package-formats.rst:138
msgid "What about eggs?"
msgstr "egg って何？"

#: ../source/discussions/package-formats.rst:140
msgid ""
"\"Egg\" is an old package format that has been replaced with the wheel "
"format.  It should not be used anymore. Since August 2023, PyPI `rejects egg "
"uploads <pypi-eggs-deprecation_>`_."
msgstr ""
"\"Egg\" は、 wheel によって置き換えられた古いパッケージフォーマットです。もは"
"や使用されるべきではありません。 2023 年 8 月以降、 PyPI は `egg のアップロー"
"ドを拒絶 <pypi-eggs-deprecation_>`_ しています。"

#: ../source/discussions/package-formats.rst:144
msgid "Here's a breakdown of the important differences between wheel and egg."
msgstr "wheelと egg の重要な差異について以下にまとめます。"

#: ../source/discussions/package-formats.rst:146
msgid ""
"The egg format was introduced by :ref:`setuptools` in 2004, whereas the "
"wheel format was introduced by :pep:`427` in 2012."
msgstr ""
"egg のフォーマットは、2004年に:ref:`setuptools`によって、また、wheel のフォー"
"マットは2012年に :pep:`427` によって導入されました。"

#: ../source/discussions/package-formats.rst:149
msgid ""
"Wheel has an :doc:`official standard specification </specifications/binary-"
"distribution-format>`. Egg did not."
msgstr ""
"Wheel には :doc:`公式の標準仕様 </specifications/binary-distribution-"
"format>` が存在します。 Egg にはありません。"

#: ../source/discussions/package-formats.rst:152
msgid ""
"Wheel is a :term:`distribution <Distribution Package>` format, i.e a "
"packaging format. [#wheel-importable]_ Egg was both a distribution format "
"and a runtime installation format (if left zipped), and was designed to be "
"importable."
msgstr ""
"Wheel は :term:`配布物 <Distribution Package>`のフォーマット、つまり、パッ"
"ケージングのフォーマットです [#wheel-importable]_ 。 Egg は配布物のフォーマッ"
"トでもあり、かつ、(もし圧縮されたままであれば)実行時のインストールフォーマッ"
"トであって、 importができるように設計されています。"

#: ../source/discussions/package-formats.rst:156
msgid ""
"Wheel archives do not include ``.pyc`` files. Therefore, when the "
"distribution only contains Python files (i.e. no compiled extensions), and "
"is compatible with Python 2 and 3, it's possible for a wheel to be "
"\"universal\", similar to an :term:`sdist <Source Distribution (or "
"\"sdist\")>`."
msgstr ""
"Wheel 形式のファイルには ``.pyc`` ファイルが含まれていません。従って、Python"
"ファイルだけが配布物に含まれている (即ちコンパイル済みの拡張がない) 場合、か"
"つ、 Python 2 および 3 と互換性を持つ時、その wheel ファイルは、 :term:"
"`sdist <Source Distribution (or \"sdist\">` と同様に \"汎用 <universal>\" で"
"ある可能性があります。"

#: ../source/discussions/package-formats.rst:161
msgid ""
"Wheel uses standard :ref:`.dist-info directories <recording-installed-"
"packages>`.  Egg used ``.egg-info``."
msgstr ""
"Wheel は、:ref:`.dist-info ディレクトリ <recording-installed-packages>` を使"
"います。 Egg は ``.egg-info`` を使います。"

#: ../source/discussions/package-formats.rst:164
msgid ""
"Wheel has a :ref:`richer file naming convention <wheel-file-name-spec>`. A "
"single wheel archive can indicate its compatibility with a number of Python "
"language versions and implementations, ABIs, and system architectures."
msgstr ""
"Wheel には :ref:`多彩なファイル命名慣行 <wheel-file-name-spec>`が存在します。"
"単独のwheelアーカイブはPython言語のバージョンや実装、ABI、そしてシステムの"
"アーキテクチャとの互換性を表示することができます。"

#: ../source/discussions/package-formats.rst:168
msgid ""
"Wheel is versioned. Every wheel file contains the version of the wheel "
"specification and the implementation that packaged it."
msgstr ""
"Wheel はバージョン付けされています。それぞれのwheelファイルは、wheelの仕様の"
"バージョンやパッケージングに使われた実装のバージョンを保持しています。"

#: ../source/discussions/package-formats.rst:171
msgid ""
"Wheel is internally organized by `sysconfig path type <https://docs.python."
"org/2/library/sysconfig.html#installation-paths>`_, therefore making it "
"easier to convert to other formats."
msgstr ""
"wheel は、内部では、 `sysconfigパスの型 <https://docs.python.org/2/library/"
"sysconfig.html#installation-paths>`_ に従って整理されているので、他のフォー"
"マットに変換するのがより簡単になっています。"

#: ../source/discussions/package-formats.rst:177
msgid ""
"This format is email-based. Although this would be unlikely to be chosen "
"today, backwards compatibility considerations lead to it being kept as the "
"canonical format. From the user point of view, this is mostly invisible, "
"since the metadata is specified by the user in a way understood by the build "
"backend, typically ``[project]`` in ``pyproject.toml``, and translated by "
"the build backend into ``PKG-INFO``."
msgstr ""
"このフォーマットは、電子メールのものをベースにしています。今となってはこれが"
"選択されるとは思えませんが、後方互換性を鑑みて正規のフォーマットとして維持さ"
"れています。ユーザの観点からは、これはほとんど目に映りません。というのは、ビ"
"ルドバックエンドに理解できる形、典型的には ``pyproject.toml`` の中の "
"``[project]`` でメタデータがユーザによって指定され、ビルドバックエンドが "
"``PKG-INFO`` 内へと翻訳するからです。"

#: ../source/discussions/package-formats.rst:184
msgid ""
"Circumstantially, in some cases, wheels can be used as an importable runtime "
"format, although :ref:`this is not officially supported at this time <binary-"
"distribution-format-import-wheel>`."
msgstr ""
"状況としては、 :ref:`現時点で公式にはサポートされていません <binary-"
"distribution-format-import-wheel>` が、 一部のケースで wheel ファイルをイン"
"ポート可能な稼働時(runtime)フォーマットとして使うことが可能です。"

#: ../source/discussions/pip-vs-easy-install.rst:6
msgid "pip vs easy_install"
msgstr "pip対easy_install"

#: ../source/discussions/pip-vs-easy-install.rst:9
msgid ""
":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 "
"as part of :ref:`setuptools`. It was notable at the time for installing :"
"term:`packages <Distribution Package>` from :term:`PyPI <Python Package "
"Index (PyPI)>` using requirement specifiers, and automatically installing "
"dependencies."
msgstr ""
":ref:`easy_install <easy_install>`は、現在では`非推奨`とされていますが、2004"
"年に:ref:`setuptools`の一部として公開されました。requirementsファイルを利用し"
"て自動的に依存関係にあるパッケージも併せて:term:`PyPI <Python Package Index "
"(PyPI)>`から:term:`packages <Distribution Package>`をインストールすることがで"
"きるというのは当時としては画期的でした。"

#: ../source/discussions/pip-vs-easy-install.rst:14
msgid ""
":ref:`pip` came later in 2008, as an alternative to :ref:`easy_install "
"<easy_install>`, although still largely built on top of :ref:`setuptools` "
"components.  It was notable at the time for *not* installing packages as :"
"term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' "
"packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and "
"introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, "
"which gave users the power to easily replicate environments."
msgstr ""
"依然として:ref:`setuptools`を部品に使ってビルドされてはいますが、:ref:"
"`easy_install <easy_install>`を置き換えるものとして:ref:`pip`が2008年に後から"
"やってきました。当時はパッケージを(かなり単純に:term:`sdists <Source "
"Distribution (or \"sdist\")>`から「フラット」なパッケージとしてインストールす"
"るものであって):term:`Eggs <Egg>`の形でインストールするものでも、:term:`Eggs "
"<Egg>`からインストールするものでも*なかった*こと、そして、簡単に環境を再現す"
"る力をユーザに与える:ref:`Requirements Files <pip:Requirements Files>`の考え"
"方を導入したことは注目に値します。"

#: ../source/discussions/pip-vs-easy-install.rst:22
msgid ""
"Here's a breakdown of the important differences between pip and the "
"deprecated easy_install:"
msgstr ""
"pipと非推奨となったeasy_installの重要な違いをおさらいしておきましょう："

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**pip**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**easy_install**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr ":term:`Wheels <Wheel>`からのインストール"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Yes"
msgstr "はい"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:30
#: ../source/discussions/pip-vs-easy-install.rst:32
#: ../source/discussions/pip-vs-easy-install.rst:35
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:51
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "No"
msgstr "いいえ"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Uninstall Packages"
msgstr "パッケージのアンインストール"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Yes (``python -m pip uninstall``)"
msgstr "はい (``python -m pip uninstall``)"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Dependency Overrides"
msgstr "依存関係を上書きする"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr "はい (:ref:`Requirementsファイル <pip:Requirements Files>`"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "List Installed Packages"
msgstr "インストールされたパッケージのリスト"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr "はい (``python -m pip list`` and ``python -m pip freeze``)"

#: ../source/discussions/pip-vs-easy-install.rst:38
msgid ":pep:`438` Support"
msgstr ":pep:`438` サポート"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Installation format"
msgstr "インストールフォーマット"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr ":file:`egg-info`のメタデータを伴った「フラット」なパッケージ。"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Encapsulated Egg format"
msgstr "カプセル化されたEggフォーマット"

#: ../source/discussions/pip-vs-easy-install.rst:44
msgid "sys.path modification"
msgstr "sys.pathの変更"

#: ../source/discussions/pip-vs-easy-install.rst:48
msgid "Installs from :term:`Eggs <Egg>`"
msgstr ":term:`Eggs <Egg>`からのインストール"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "`pylauncher support`_"
msgstr "`pylauncherサポート <pylauncher support>`_"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "Yes [1]_"
msgstr "はい [1]_"

#: ../source/discussions/pip-vs-easy-install.rst:54
msgid ":ref:`Multi-version Installs`"
msgstr ":ref:`複数バージョンのインストール <Multi-version Installs>`"

#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Exclude scripts during install"
msgstr "インストール中にスクリプトを除外する"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "per project index"
msgstr "プロジェクトごとの索引"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Only in virtualenv"
msgstr "virtualenvの中のみ"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Yes, via setup.cfg"
msgstr "はい、setup.cfgを通じて"

#: ../source/discussions/pip-vs-easy-install.rst:68
msgid ""
"https://setuptools.readthedocs.io/en/latest/deprecated/easy_install."
"html#natural-script-launcher"
msgstr ""
"https://setuptools.readthedocs.io/en/latest/deprecated/easy_install."
"html#natural-script-launcher"

#: ../source/discussions/setup-py-deprecated.rst:6
msgid "Is ``setup.py`` deprecated?"
msgstr "``setup.py`` は非推奨になりましたか？"

#: ../source/discussions/setup-py-deprecated.rst:8
msgid "No, :term:`setup.py` and :ref:`setuptools` are not deprecated."
msgstr ""
"いいえ、 :term:`setup.py` および :ref:`setuptools` は非推奨にはなっていませ"
"ん。"

#: ../source/discussions/setup-py-deprecated.rst:10
msgid ""
"Setuptools is perfectly usable as a :term:`build backend` for packaging "
"Python projects. And :file:`setup.py` is a valid configuration file for :ref:"
"`setuptools` that happens to be written in Python, instead of in *TOML* for "
"example (a similar practice is used by other tools like *nox* and its :file:"
"`noxfile.py` configuration file, or *pytest* and :file:`conftest.py`)."
msgstr ""
"Setuptools は、 :term:`ビルドバックエンド <build backend>` として Python のプ"
"ロジェクトをパッケージングすることに完璧に使用可能です。そして、 :file:"
"`setup.py` は、例えば *TOML* の代わりにたまたま Python で書かれている :ref:"
"`setuptools` 向けの正当な設定ファイルです (*nox* とその設定ファイルである :"
"file:`nox.filepy` や *pytest* と :file:`conftest.py` のような他のツール類で"
"も、よく似たパターンが使われています)。"

#: ../source/discussions/setup-py-deprecated.rst:18
msgid ""
"However, ``python setup.py`` and the use of :file:`setup.py` as a command "
"line tool are deprecated."
msgstr ""
"しかしながら、 ``python setup.py`` および :file:`setup.py` をコマンドライン"
"ツールとして使うことは非推奨になりました。"

#: ../source/discussions/setup-py-deprecated.rst:21
msgid ""
"This means that commands such as the following **MUST NOT** be run anymore:"
msgstr ""
"その意味するところは、次のようなコマンドを実行することはもはや **許されない"
"** ということです:"

#: ../source/discussions/setup-py-deprecated.rst:23
#: ../source/discussions/setup-py-deprecated.rst:35
#: ../source/guides/modernize-setup-py-project.rst:32
msgid "``python setup.py install``"
msgstr "``python setup.py install``"

#: ../source/discussions/setup-py-deprecated.rst:24
#: ../source/discussions/setup-py-deprecated.rst:37
#: ../source/guides/modernize-setup-py-project.rst:34
msgid "``python setup.py develop``"
msgstr "``python setup.py develop``"

#: ../source/discussions/setup-py-deprecated.rst:25
#: ../source/discussions/setup-py-deprecated.rst:39
#: ../source/guides/modernize-setup-py-project.rst:36
msgid "``python setup.py sdist``"
msgstr "``python setup.py sdist``"

#: ../source/discussions/setup-py-deprecated.rst:26
#: ../source/discussions/setup-py-deprecated.rst:41
#: ../source/guides/modernize-setup-py-project.rst:38
msgid "``python setup.py bdist_wheel``"
msgstr "``python setup.py bdist_wheel``"

#: ../source/discussions/setup-py-deprecated.rst:30
msgid "What commands should be used instead?"
msgstr "代わりにどのようなコマンドを使うべきでしょうか？"

#: ../source/discussions/setup-py-deprecated.rst:33
#: ../source/guides/modernize-setup-py-project.rst:30
msgid "Deprecated"
msgstr "非推奨"

#: ../source/discussions/setup-py-deprecated.rst:33
#: ../source/guides/modernize-setup-py-project.rst:30
msgid "Recommendation"
msgstr "推奨事項"

#: ../source/discussions/setup-py-deprecated.rst:35
#: ../source/guides/modernize-setup-py-project.rst:32
msgid "``python -m pip install .``"
msgstr "``python -m pip install .``"

#: ../source/discussions/setup-py-deprecated.rst:37
#: ../source/guides/modernize-setup-py-project.rst:34
msgid "``python -m pip install --editable .``"
msgstr "``python -m pip install --editable .``"

#: ../source/discussions/setup-py-deprecated.rst:39
msgid "``python -m build`` [#needs-build]_"
msgstr "``python -m build`` [#needs-build]_"

#: ../source/discussions/setup-py-deprecated.rst:45
msgid ""
"This requires the :ref:`build` dependency. It is recommended to always build "
"and publish both the source distribution and wheel of a project, which is "
"what ``python -m build`` does. If necessary the ``--sdist`` and ``--wheel`` "
"options can be used to generate only one or the other."
msgstr ""
"これは、:ref:`build` の依存関係を要求します。 ``python -m build`` を実行すれ"
"ばそうなりますが、プロジェクトにおいては常にソースコード配布物とwheelの両方を"
"公開することを推奨します。もし必要であれば、いずれか片方を生成するのに ``--"
"sdist`` や ``--wheel`` のオプションを使うことができます。"

#: ../source/discussions/setup-py-deprecated.rst:52
msgid ""
"In order to install a setuptools based project, it was common to run :file:"
"`setup.py`'s ``install`` command such as: ``python setup.py install``. "
"Nowadays, the recommended method is to use :ref:`pip` directly with a "
"command like this one: ``python -m pip install .``. Where the dot ``.`` is "
"actually a file system path, it is the path notation for the current "
"directory. Indeed, *pip* accepts a path to a project's source tree directory "
"on the local filesystem as argument to its ``install`` sub-command. So this "
"would also be a valid command: ``python -m pip install path/to/project``."
msgstr ""
"setuptools ベースのプロジェクトをインストールするためには、``python setup.py "
"install`` のように :file:`setup.py` の ``install`` コマンドを使うことが普通で"
"した。今日では、``python -m pip install .`` のように :ref:`pip` を直接に使う"
"方法が推奨されています。ここでドット ``.`` は、実際にはファイルシステム上のパ"
"スなので、これはカレントディレクトリを示すパス表現です。なんと、 *pip* は "
"``install`` サブコマンドへの引数の形で、ローカルのファイルシステム上のパスを"
"プロジェクトのソースコードツリーを置くべき場所として受け付けるのです。そうい"
"うことですから、これもまた正当なコマンドということになります: ``python -m "
"pip install path/to/project``。"

#: ../source/discussions/setup-py-deprecated.rst:65
msgid ""
"As for the installation in *develop* mode aka *editable* mode, instead of "
"``python setup.py develop`` one can use the ``--editable`` option of pip's "
"*install* sub-command: ``python -m pip install --editable .``."
msgstr ""
"*編集可能 <editable>* モードとしても知られる *開発 <develop>* モードでのイン"
"ストールのためには、 ``python setup.py develop`` の代わりに pip の *install* "
"サブコマンドの ``--editable`` オプションを使うことができます: ``python -m "
"pip install --editable .``。"

#: ../source/discussions/setup-py-deprecated.rst:70
msgid ""
"One recommended, simple, and straightforward method of building :term:"
"`source distributions <Source Distribution (or \"sdist\")>` and :term:"
"`wheels <Wheel>` is to use the :ref:`build` tool with a command like "
"``python -m build`` which triggers the generation of both distribution "
"formats. If necessary the ``--sdist`` and ``--wheel`` options can be used to "
"generate only one or the other. Note that the build tool needs to be "
"installed separately."
msgstr ""
":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` および :term:"
"`wheels <Wheel>` をビルドする方法で推奨されていて単純かつ直截なひとつのやり方"
"は、 :ref:`build` ツールを ``python -m build`` のようなコマンドから使って両方"
"の配布物フォーマットの生成を開始することです。いずれか片方の配布物だけを生成"
"するのであれば、必要に応じて ``--sdist`` や ``--wheel`` のオプションを使うこ"
"とができます。build ツールは個別にインストールする必要があることに注意してく"
"ださい。"

#: ../source/discussions/setup-py-deprecated.rst:80
msgid ""
"The command ``python setup.py install`` was deprecated in setuptools version "
"*58.3.0*."
msgstr ""
"コマンド ``python setup.py install`` は、setuptools のバージョン *58.3.0* で"
"非推奨になりました。"

#: ../source/discussions/setup-py-deprecated.rst:85
msgid "What about other commands?"
msgstr "他のコマンドについてはどうでしょうか？"

#: ../source/discussions/setup-py-deprecated.rst:87
msgid "What are some replacements for the other ``python setup.py`` commands?"
msgstr "他の ``python setup.py`` コマンドを置き換えるものは何でしょうか？"

#: ../source/discussions/setup-py-deprecated.rst:91
msgid "``python setup.py test``"
msgstr "``python setup.py test``"

#: ../source/discussions/setup-py-deprecated.rst:93
msgid "The recommendation is to use a test runner such as pytest_."
msgstr "推奨されるものは、pytest_ のようなテストランナーを使うことです。"

#: ../source/discussions/setup-py-deprecated.rst:99
msgid ""
"``python setup.py check``, ``python setup.py register``, and ``python setup."
"py upload``"
msgstr ""
"``python setup.py check``, ``python setup.py register``, および ``python "
"setup.py upload``"

#: ../source/discussions/setup-py-deprecated.rst:101
msgid "A trusted replacement is :ref:`twine`:"
msgstr "信頼されている代替物は :ref:`twine` です:"

#: ../source/discussions/setup-py-deprecated.rst:103
msgid "``python -m twine check --strict dist/*``"
msgstr "``python -m twine check --strict dist/*``"

#: ../source/discussions/setup-py-deprecated.rst:104
msgid "``python -m twine register dist/*.whl`` [#not-pypi]_"
msgstr "``python -m twine register dist/*.whl`` [#not-pypi]_"

#: ../source/discussions/setup-py-deprecated.rst:105
msgid "``python -m twine upload dist/*``"
msgstr "``python -m twine upload dist/*``"

#: ../source/discussions/setup-py-deprecated.rst:107
msgid ""
"Not necessary, nor supported on :term:`PyPI <Python Package Index (PyPI)>`. "
"But might be necessary on other :term:`package indexes <package index>` (for "
"example :ref:`devpi`)."
msgstr ""
"必ずしもそうではなく、 :term:`PyPI <Python Package Index (PyPI)>` でもサポー"
"トされていません。しかし、(例えば :ref:`devpi` のような) 他の :term:`パッケー"
"ジインデックス <package index>` では必要になるかもしれません。"

#: ../source/discussions/setup-py-deprecated.rst:112
msgid "``python setup.py --version``"
msgstr "``python setup.py --version``"

#: ../source/discussions/setup-py-deprecated.rst:114
msgid ""
"A possible replacement solution (among others) is to rely on setuptools-scm_:"
msgstr ""
"実行可能な代替案は (他にもありますが) setuptools-scm_ に頼ることでしょう:"

#: ../source/discussions/setup-py-deprecated.rst:116
msgid "``python -m setuptools_scm``"
msgstr "``python -m setuptools_scm``"

#: ../source/discussions/setup-py-deprecated.rst:122
msgid "Remaining commands"
msgstr "残りのコマンド群"

#: ../source/discussions/setup-py-deprecated.rst:124
msgid ""
"This guide does not make suggestions of replacement solutions for those "
"commands:"
msgstr "このガイド文書では、それらコマンド群の代替案について示唆しません:"

#: ../source/discussions/setup-py-deprecated.rst:129
msgid "``alias``"
msgstr "``alias``"

#: ../source/discussions/setup-py-deprecated.rst:130
msgid "``bdist``"
msgstr "``bdist``"

#: ../source/discussions/setup-py-deprecated.rst:131
msgid "``bdist_dumb``"
msgstr "``bdist_dumb``"

#: ../source/discussions/setup-py-deprecated.rst:132
msgid "``bdist_egg``"
msgstr "``bdist_egg``"

#: ../source/discussions/setup-py-deprecated.rst:133
msgid "``bdist_rpm``"
msgstr "``bdist_rpm``"

#: ../source/discussions/setup-py-deprecated.rst:134
msgid "``build``"
msgstr "``build``"

#: ../source/discussions/setup-py-deprecated.rst:135
msgid "``build_clib``"
msgstr "``build_clib``"

#: ../source/discussions/setup-py-deprecated.rst:136
msgid "``build_ext``"
msgstr "``build_ext``"

#: ../source/discussions/setup-py-deprecated.rst:137
msgid "``build_py``"
msgstr "``build_py``"

#: ../source/discussions/setup-py-deprecated.rst:138
msgid "``build_scripts``"
msgstr "``build_scripts``"

#: ../source/discussions/setup-py-deprecated.rst:139
msgid "``clean``"
msgstr "``clean``"

#: ../source/discussions/setup-py-deprecated.rst:140
msgid "``dist_info``"
msgstr "``dist_info``"

#: ../source/discussions/setup-py-deprecated.rst:141
msgid "``easy_install``"
msgstr "``easy_install``"

#: ../source/discussions/setup-py-deprecated.rst:142
msgid "``editable_wheel``"
msgstr "``editable_wheel``"

#: ../source/discussions/setup-py-deprecated.rst:143
msgid "``egg_info``"
msgstr "``egg_info``"

#: ../source/discussions/setup-py-deprecated.rst:144
msgid "``install_data``"
msgstr "``install_data``"

#: ../source/discussions/setup-py-deprecated.rst:145
msgid "``install_egg_info``"
msgstr "``install_egg_info``"

#: ../source/discussions/setup-py-deprecated.rst:146
msgid "``install_headers``"
msgstr "``install_headers``"

#: ../source/discussions/setup-py-deprecated.rst:147
msgid "``install_lib``"
msgstr "``install_lib``"

#: ../source/discussions/setup-py-deprecated.rst:148
msgid "``install_scripts``"
msgstr "``install_scripts``"

#: ../source/discussions/setup-py-deprecated.rst:149
msgid "``rotate``"
msgstr "``rotate``"

#: ../source/discussions/setup-py-deprecated.rst:150
msgid "``saveopts``"
msgstr "``saveopts``"

#: ../source/discussions/setup-py-deprecated.rst:151
msgid "``setopt``"
msgstr "``setopt``"

#: ../source/discussions/setup-py-deprecated.rst:152
msgid "``upload_docs``"
msgstr "``upload_docs``"

#: ../source/discussions/setup-py-deprecated.rst:156
msgid "What about custom commands?"
msgstr "カスタムコマンドについてはどうでしょうか？"

#: ../source/discussions/setup-py-deprecated.rst:158
msgid ""
"Likewise, custom :file:`setup.py` commands are deprecated. The "
"recommendation is to migrate those custom commands to a task runner tool or "
"any other similar tool. Some examples of such tools are: chuy, make, nox or "
"tox, pydoit, pyinvoke, taskipy, and thx."
msgstr ""
"同様に、カスタムコマンドの :file:`setup.py` も非推奨になっています。そのよう"
"なカスタムコマンドについては、タスクランナーツールか他の類似ツールに移植する"
"ことをお勧めします。そのようなツールの例を挙げれば: chuy、 make、 nox もしく"
"は tox、 pydoit、 pyinvoke、 taskipy、 そして thx。"

#: ../source/discussions/setup-py-deprecated.rst:166
msgid "What about custom build steps?"
msgstr "カスタムビルドステップについてはどうでしょうか？"

#: ../source/discussions/setup-py-deprecated.rst:168
msgid ""
"Custom build steps that for example either overwrite existing steps such as "
"``build_py``, ``build_ext``, and ``bdist_wheel`` or add new build steps are "
"not deprecated. Those will be automatically called as expected."
msgstr ""
"例えば、 ``build_py`` 、 ``build_ext`` や ``bdist_wheel`` のように既存のス"
"テップを上書きしたり新しいビルドステップを追加したりするカスタムビルドステッ"
"プは、非推奨にはなっていません。そのようなステップは期待通りに自動的に呼び出"
"されるでしょう。"

#: ../source/discussions/setup-py-deprecated.rst:175
#: ../source/guides/modernize-setup-py-project.rst:21
msgid "Should ``setup.py`` be deleted?"
msgstr "``setup.py`` は削除されるべきですか？"

#: ../source/discussions/setup-py-deprecated.rst:177
msgid ""
"Although the usage of :file:`setup.py` as an executable script is "
"deprecated, its usage as a configuration file for setuptools is absolutely "
"fine. There is likely no modification needed in :file:`setup.py`."
msgstr ""
":file:`setup.py` を実行可能なスクリプトとして使うことは非推奨になりましたが、"
"しかし、setuptools に対する設定ファイルとして使うことは完全に正当です。:file:"
"`setup.py` を修正する必要はないでしょう。"

#: ../source/discussions/setup-py-deprecated.rst:183
msgid "Is ``pyproject.toml`` mandatory?"
msgstr "``pyproject.toml`` は必須ですか？"

#: ../source/discussions/setup-py-deprecated.rst:185
msgid ""
"While it is not technically necessary yet, it is **STRONGLY RECOMMENDED** "
"for a project to have a :file:`pyproject.toml` file at the root of its "
"source tree with a content like this:"
msgstr ""
"技術的には無くてはならないというわけではありませんが、プロジェクトがそのソー"
"スコードツリーのルート部分に :file:`pyproject.toml` ファイルを持つことは **強"
"く推奨** されています:"

#: ../source/discussions/setup-py-deprecated.rst:196
msgid ""
"The guide :ref:`modernize-setup-py-project` has more details about this."
msgstr ""
"これについては、説明文書の :ref:`setup.py 近代化プロジェクト <modernize-"
"setup-py-project>` にもっと詳しい説明があります。"

#: ../source/discussions/setup-py-deprecated.rst:198
msgid ""
"The standard fallback behavior for a :term:`build frontend <Build Frontend>` "
"in the absence of a :file:`pyproject.toml` file and its ``[build-system]`` "
"table is to assume that the :term:`build backend <Build Backend>` is "
"setuptools."
msgstr ""
":file:`pyproject.toml` ファイルとその ``[build-system]`` テーブルが存在しない"
"場合、 :term:`ビルドフロントエンド <Build Frontend>` にとって標準的なフォール"
"バックの振る舞いは、 :term:`ビルドバックエンド <Build Backend>` が "
"setuptools であると仮定することです。"

#: ../source/discussions/setup-py-deprecated.rst:204
msgid "Why? What does it all mean?"
msgstr "どうして？一体全体どういうこと？"

#: ../source/discussions/setup-py-deprecated.rst:206
msgid ""
"One way to look at it is that the scope of setuptools has now been reduced "
"to the role of a build backend."
msgstr ""
"ひとつの見方は、setuptools のスコープが、いまや、ビルドバックエンドの役割に限"
"定されているということです。"

#: ../source/discussions/setup-py-deprecated.rst:211
#: ../source/guides/modernize-setup-py-project.rst:244
msgid "Where to read more about this?"
msgstr "これについて、どこでもっと読めますか？"

#: ../source/discussions/setup-py-deprecated.rst:213
msgid ""
"`Why you shouldn't invoke setup.py directly <https://blog.ganssle.io/"
"articles/2021/10/setup-py-deprecated.html>`__ by Paul Ganssle"
msgstr ""
"Paul Ganssle による `setup.py を直接に起動するべきではないのは何故か "
"<https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html>`__"

#: ../source/discussions/setup-py-deprecated.rst:215
msgid ":doc:`setuptools:deprecated/commands`"
msgstr ":doc:`setuptools:deprecated/commands`"

#: ../source/discussions/single-source-version.rst:5
msgid "Single-sourcing the Project Version"
msgstr "プロジェクトのバージョン番号をひとつの源から取得する"

#: ../source/discussions/single-source-version.rst:7
msgid "Complete"
msgstr "完了"

#: ../source/discussions/single-source-version.rst:8
msgid "2024-10-07"
msgstr "2024-10-07"

#: ../source/discussions/single-source-version.rst:10
msgid ""
"Many Python :term:`distribution packages <Distribution Package>` publish a "
"single Python :term:`import package <Import Package>` where it is desired "
"that the runtime ``__version__`` attribute on the import package report the "
"same version specifier as :func:`importlib.metadata.version` reports for the "
"distribution package (as described in :ref:`runtime-version-access`)."
msgstr ""
"多くの Python :term:`配布パッケージ <Distribution Package>` は、インポート"
"パッケージのランタイムにある ``__version__`` アトリビュートが、 (:ref:"
"`runtime-version-access` に述べられているように) :func:`importlib.metadata."
"version` 関数が報告する配布パッケージのバージョンと同じバージョン指定子を報告"
"することが求められているところの、単一の Python :term:`インポートパッケージ "
"<Import Package>` を公開します。"

#: ../source/discussions/single-source-version.rst:16
msgid ""
"It is also frequently desired that this version information be derived from "
"a version control system *tag* (such as ``v1.2.3``) rather than being "
"manually updated in the source code."
msgstr ""
"このバージョン番号の情報が、ソースコード内で手動で更新するものではない、 "
"(``v1.2.3`` のような) バージョン管理システムの *タグ* から派生したものになっ"
"てほしいと、繰り返し要望されます。"

#: ../source/discussions/single-source-version.rst:20
msgid ""
"Some projects may choose to simply live with the data entry duplication, and "
"rely on automated testing to ensure the different values do not diverge."
msgstr ""
"プロジェクトの中には、単純に重複したデータエントリを抱えたまま進行することを"
"選択し、異なる値に分岐しないことを保証する自動テストに依存するものもあってよ"
"いでしょう。"

#: ../source/discussions/single-source-version.rst:23
msgid ""
"Alternatively, a project's chosen build system may offer a way to define a "
"single source of truth for the version number."
msgstr ""
"別のやり方としては、プロジェクトが選択したビルドシステムは、バージョン番号に"
"ついて唯一の源を定義する方法を提案しても構いません。"

#: ../source/discussions/single-source-version.rst:26
msgid "In general, the options are:"
msgstr "一般的に、取りうる選択肢は:"

#: ../source/discussions/single-source-version.rst:28
msgid ""
"If the code is in a version control system (VCS), such as Git, then the "
"version can be extracted from the VCS."
msgstr ""
"ソースコードが Git のようなバージョン管理システム (VCS) の中にあるなら、バー"
"ジョン番号は VCS から取り出すことできます。"

#: ../source/discussions/single-source-version.rst:30
msgid ""
"The version can be hard-coded into the :file:`pyproject.toml` file -- and "
"the build system can copy it into other locations it may be required."
msgstr ""
"バージョン番号は、 :file:`pyproject.toml` ファイルにハードコードすることが可"
"能です -- そして、ビルドシステムがそれを要求される他の場所にコピーすることが"
"できます。"

#: ../source/discussions/single-source-version.rst:33
msgid ""
"The version string can be hard-coded into the source code -- either in a "
"special purpose file, such as :file:`_version.txt` (which must then be "
"shipped as part of the project's source distribution package), or as an "
"attribute in a particular module, such as :file:`__init__.py`. The build "
"system can then extract it from the runtime location at build time."
msgstr ""
"バージョン番号の文字列をソースコードの中にハードコードすることもできます -- :"
"file:`_version.txt` のような特別な目的のファイル (これはプロジェクトのソース"
"コード配布物 (パッケージ) の一部として同梱されなければなりません) の中に置く"
"か、あるいは、 :file:`__init__.py` のような特定のモジュールの中のアトリビュー"
"トとして置くかです。ビルドシステムは、ビルド時にランタイムの場所からそれを取"
"り出すことができます。"

#: ../source/discussions/single-source-version.rst:38
msgid "Consult your build system's documentation for their recommended method."
msgstr "推奨される方法を知るには、ビルドシステムの説明文書に当たってください。"

#: ../source/discussions/single-source-version.rst:40
msgid ""
"When the intention is that a distribution package and its associated import "
"package share the same version, it is recommended that the project include "
"an automated test case that ensures ``import_name.__version__`` and "
"``importlib.metadata.version(\"dist-name\")`` report the same value (note: "
"for many projects, ``import_name`` and ``dist-name`` will be the same name)."
msgstr ""
"配布パッケージとそれが関連するインポートパッケージが同一のバージョン番号を共"
"有することを意図する時は、そのプロジェクトに、 ``import_name.__version__`` "
"と ``importlib.metadata.version(\"dist-name\")`` が同じ値を報告することを保証"
"する自動化されたテストケースが含まれていることが推奨されます (ノート: 多くの"
"プロジェクトでは ``import_name`` と ``dist-name`` は同じ名称でしょう) 。"

#: ../source/discussions/single-source-version.rst:50
msgid "Build System Version Handling"
msgstr "ビルドシステムでのバージョン番号の取り扱い"

#: ../source/discussions/single-source-version.rst:52
msgid ""
"The following are links to some build system's documentation for handling "
"version strings."
msgstr ""
"以下は、ビルドシステムのいくつかの、バージョン文字列の取り扱い方を説明した文"
"書です。"

#: ../source/discussions/single-source-version.rst:54
msgid "`Flit <https://flit.pypa.io/en/stable/>`_"
msgstr "`Flit <https://flit.pypa.io/en/stable/>`_"

#: ../source/discussions/single-source-version.rst:56
msgid "`Hatchling <https://hatch.pypa.io/1.9/version/>`_"
msgstr "`Hatchling <https://hatch.pypa.io/1.9/version/>`_"

#: ../source/discussions/single-source-version.rst:58
msgid ""
"`PDM <https://pdm-project.org/en/latest/reference/pep621/#__tabbed_1_2>`_"
msgstr ""
"`PDM <https://pdm-project.org/en/latest/reference/pep621/#__tabbed_1_2>`_"

#: ../source/discussions/single-source-version.rst:60
msgid ""
"`Setuptools <https://setuptools.pypa.io/en/latest/userguide/pyproject_config."
"html#dynamic-metadata>`_"
msgstr ""
"`Setuptools <https://setuptools.pypa.io/en/latest/userguide/pyproject_config."
"html#dynamic-metadata>`_"

#: ../source/discussions/single-source-version.rst:62
msgid "`setuptools_scm <https://setuptools-scm.readthedocs.io/en/latest/>`_"
msgstr "`setuptools_scm <https://setuptools-scm.readthedocs.io/en/latest/>`_"

#: ../source/discussions/src-layout-vs-flat-layout.rst:5
msgid "src layout vs flat layout"
msgstr "src レイアウト対フラットレイアウト"

#: ../source/discussions/src-layout-vs-flat-layout.rst:7
msgid ""
"The \"flat layout\" refers to organising a project's files in a folder or "
"repository, such that the various configuration files and :term:`import "
"packages <Import Package>` are all in the top-level directory."
msgstr ""
"「フラットレイアウト」とは、さまざまな設定ファイルや :term:`インポートパッ"
"ケージ <Import Package>` をすべてトップレベルのディレクトリに置くようなやり方"
"で、プロジェクトのファイル群をひとつのフォルダまたはリポジトリに配置すること"
"です。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:25
msgid ""
"The \"src layout\" deviates from the flat layout by moving the code that is "
"intended to be importable (i.e. ``import awesome_package``, also known as :"
"term:`import packages <Import Package>`) into a subdirectory. This "
"subdirectory is typically named ``src/``, hence \"src layout\"."
msgstr ""
"「src レイアウト」は、インポート可能 (すなわち ``import awesome_package`` 、"
"別名 :term:`インポートパッケージ <Import Package>`) にするつもりのソースコー"
"ドをサブディレクトリに置く点でフラットレイアウトとは異なります。このサブディ"
"レクトリは、典型的には ``src/`` と命名されるので、「src レイアウト」と呼ばれ"
"るのです。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:45
msgid ""
"Here's a breakdown of the important behaviour differences between the src "
"layout and the flat layout:"
msgstr ""
"ここで、src レイアウトとフラットレイアウトの動作の違いで重要なものを掲出して"
"おきましょう:"

#: ../source/discussions/src-layout-vs-flat-layout.rst:48
msgid ""
"The src layout requires installation of the project to be able to run its "
"code, and the flat layout does not."
msgstr ""
"src レイアウトではそのソースコードを走らせるためにプロジェクトのインストール"
"が要求されますが、フラットレイアウトではそのようなことはありません。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:51
msgid ""
"This means that the src layout involves an additional step in the "
"development workflow of a project (typically, an :doc:`editable installation "
"<setuptools:userguide/development_mode>` is used for development and a "
"regular installation is used for testing)."
msgstr ""
"これが意味するところは、src レイアウトの場合にはプロジェクトの開発ワークフ"
"ローに追加的なステップ (典型的には、開発には :doc:`編集可能なインストール "
"<setuptools:userguide/development_mode>` を使い、テストには通常のインストール"
"を用いる) が必要になるということです。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:56
msgid ""
"The src layout helps prevent accidental usage of the in-development copy of "
"the code."
msgstr ""
"src レイアウトを採用することは、今まさに開発中のソースコードを使ってしまうと"
"いう事故を防ぐことを助けます。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:59
msgid ""
"This is relevant since the Python interpreter includes the current working "
"directory as the first item on the import path. This means that if an import "
"package exists in the current working directory with the same name as an "
"installed import package, the variant from the current working directory "
"will be used. This can lead to subtle  misconfiguration of the project's "
"packaging tooling, which could result in files not being included in a "
"distribution."
msgstr ""
"Python インタープリタはカレントワーキングディレクトリをインポートパスの先頭に"
"含むので、これは妥当なことです。これが意味するところは、もしインストール済み"
"のパッケージと同名のものがカレントワーキングディレクトリに存在するならば、カ"
"レントワーキングディレクトリにあるものが使われるであろうということです。これ"
"によって、配布物に一部ファイル群が含まれない結果に終わるという、プロジェクト"
"のパッケージングツールの微妙な誤設定をもたらしかねません。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:66
msgid ""
"The src layout helps avoid this by keeping import packages in a directory "
"separate from the root directory of the project, ensuring that the installed "
"copy is used."
msgstr ""
"src レイアウトを使えば、パッケージ群をプロジェクトのルートディレクトリとは異"
"なるディレクトリに置くので、インストール済みのパッケージの方を使用することが"
"保証され、このような誤設定を避ける助けになります。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:70
msgid ""
"The src layout helps enforce that an :doc:`editable installation <setuptools:"
"userguide/development_mode>` is only able to import files that were meant to "
"be importable."
msgstr ""
"src レイアウトを使うことで、インポートしようと意図した :doc:`編集可能なインス"
"トール <setuptools:userguide/development_mode>` だけをインポートするように強"
"制することを助けます。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:74
msgid ""
"This is especially relevant when the editable installation is implemented "
"using a `path configuration file <https://docs.python.org/3/library/site."
"html#index-2>`_ that adds the directory to the import path."
msgstr ""
"これは、編集可能なインストール (のパッケージ) がインポートパスにそのディレク"
"トリを追加するように動く `パス設定ファイル <https://docs.python.org/3/"
"library/site.html#index-2>`_ を使って実装されている場合に、特に適切です。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:78
msgid ""
"The flat layout would add the other project files (eg: ``README.md``, ``tox."
"ini``) and packaging/tooling configuration files (eg: ``setup.py``, "
"``noxfile.py``) on the import path. This would make certain imports work in "
"editable installations but not regular installations."
msgstr ""
"フラットレイアウトでは、インポートパスに他のプロジェクトファイル群 (例えば "
"``README.md`` や ``tox.ini``) や、パッケージング/ツール使用の設定ファイル (例"
"えば ``setup.py`` や ``noxfile.py``) を追加します。こうすることによって、ある"
"インポートが、通常のインストールではなくて編集可能なインストールの側を使うこ"
"とを確実にするでしょう。"

#: ../source/discussions/src-layout-vs-flat-layout.rst:86
msgid "Running a command-line interface from source with src-layout"
msgstr ""
"src レイアウト付きのソースコードからコマンドラインインターフェースを走らせる"

#: ../source/discussions/src-layout-vs-flat-layout.rst:88
msgid ""
"Due to the firstly mentioned specialty of the src layout, a command-line "
"interface can not be run directly from the :term:`source tree <Project "
"Source Tree>`, but requires installation of the package in :doc:`Development "
"Mode <setuptools:userguide/development_mode>` for testing purposes. Since "
"this can be unpractical in some situations, a workaround could be to prepend "
"the package folder to  Python's :py:data:`sys.path` when called via its :"
"file:`__main__.py` file:"
msgstr ""
"最初に述べた src レイアウトの特殊性の故に、コマンドラインインタフェースは、 :"
"term:`ソースコードツリー <Project Source Tree>` から直接に起動することができ"
"ず、試験目的のために :doc:`開発モード <setuptools:userguide/"
"development_mode>`:doc:`開発モード <setuptools:userguide/development_mode>` "
"でインストールされたパッケージを要求します。状況によってはこれは現実的ではな"
"くなるので、 :file:`__main__.py` ファイル経由で呼ばれた時にパッケージフォルダ"
"を Python の :py:data:`sys.path` の先頭に追加することが回避策になるかもしれま"
"せん。"

#: ../source/discussions/versioning.rst:6
#: ../source/specifications/simple-repository-api.rst:349
msgid "Versioning"
msgstr "バージョニング"

#: ../source/discussions/versioning.rst:8
msgid "This discussion covers all aspects of versioning Python packages."
msgstr ""
"この議論では、 Python パッケージのバージョニングについてあらゆる角度からカ"
"バーします。"

#: ../source/discussions/versioning.rst:12
msgid "Valid version numbers"
msgstr "正当なバージョン番号"

#: ../source/discussions/versioning.rst:14
msgid ""
"Different Python projects may use different versioning schemes based on the "
"needs of that particular project, but in order to be compatible with tools "
"like :ref:`pip`, all of them are required to comply with a flexible format "
"for version identifiers, for which the authoritative reference is the :ref:"
"`specification of version specifiers <version-specifiers>`. Here are some "
"examples of version numbers [#version-examples]_:"
msgstr ""
"相異なるPythonプロジェクトがそれぞれの事情に合わせて異なるバージョン体系を採"
"用することは構いませんが、しかし、:ref:`pip` のようなツールとの互換性を保つた"
"めには、バージョン識別子のための自由度の高いフォーマット、その権威ある参照先"
"は :ref:`バージョン識別子仕様 <version-specifiers>` ですが、これに準拠するこ"
"とが要求されます。ここではバージョン番号のいくつかの例を紹介しましょう "
"[#version-examples]_:"

#: ../source/discussions/versioning.rst:21
msgid "A simple version (final release): ``1.2.0``"
msgstr "簡明なバージョン (最終的なリリース): ``1.2.0``"

#: ../source/discussions/versioning.rst:22
msgid "A development release: ``1.2.0.dev1``"
msgstr "開発リリース: ``1.2.0.dev1``"

#: ../source/discussions/versioning.rst:23
msgid "An alpha release: ``1.2.0a1``"
msgstr "アルファリリース: ``1.2.0a1``"

#: ../source/discussions/versioning.rst:24
msgid "A beta release: ``1.2.0b1``"
msgstr "ベータリリース: ``1.2.0b1``"

#: ../source/discussions/versioning.rst:25
msgid "A release candidate: ``1.2.0rc1``"
msgstr "リリース候補: ``1.2.0rc1``"

#: ../source/discussions/versioning.rst:26
msgid "A post-release: ``1.2.0.post1``"
msgstr "ポストリリース: ``1.2.0.post1``"

#: ../source/discussions/versioning.rst:27
msgid ""
"A post-release of an alpha release (possible, but discouraged): ``1.2.0a1."
"post1``"
msgstr ""
"アルファリリースのポストリリース (こういうことも可能ではあるが非推奨): "
"``1.2.0a1.post1``"

#: ../source/discussions/versioning.rst:28
msgid "A simple version with only two components: ``23.12``"
msgstr "二つの部分からのみ構成される簡明なバージョン: ``23.12``"

#: ../source/discussions/versioning.rst:29
msgid "A simple version with just one component: ``42``"
msgstr "たったひとつの部分から構成される簡明なバージョン: ``42``"

#: ../source/discussions/versioning.rst:30
msgid "A version with an epoch: ``1!1.0``"
msgstr "エポック付きのバージョン: ``1!1.0``"

#: ../source/discussions/versioning.rst:32
msgid ""
"Projects can use a cycle of pre-releases to support testing by their users "
"before a final release. In order, the steps are: alpha releases, beta "
"releases, release candidates, final release. Pip and other modern Python "
"package installers ignore pre-releases by default when deciding which "
"versions of dependencies to install, unless explicitly requested (e.g., with "
"``pip install pkg==1.1a3`` or ``pip install --pre pkg``)."
msgstr ""
"プロジェクトにおいては、最終的なリリースの前にいくつかのプレリリースのサイク"
"ルを置くことで既存ユーザによる試験をサポートすることができます。その段階は、"
"アルファリリース、ベータリリース、リリース候補、最終的なリリースの順です。 "
"pip や他の近代的な Python パッケージインストーラは、依存関係にあるパッケージ"
"のどのバージョンをインストールするかを決定する際、 (例えば ``pip install "
"pkg==1.1a3`` とか ``pip install --pre pkg`` のように) 明示的に要求されていな"
"い限りデフォルト設定ではプレリリース群を無視します。"

#: ../source/discussions/versioning.rst:39
msgid ""
"The purpose of development releases is to support releases made early during "
"a development cycle, for example, a nightly build, or a build from the "
"latest source in a Linux distribution."
msgstr ""
"開発リリースの目的は、例えば夜毎のビルド <nightly build> のように開発サイクル"
"の早い時期にリリースを行うことや、Linux ディストリビューションの最新のソース"
"コードからビルドを行うことです。"

#: ../source/discussions/versioning.rst:43
msgid ""
"Post-releases are used to address minor errors in a final release that do "
"not affect the distributed software, such as correcting an error in the "
"release notes. They should not be used for bug fixes; these should be done "
"with a new final release (e.g., incrementing the third component when using "
"semantic versioning)."
msgstr ""
"ポストリリースは、リリースノート内のエラーのように配布されたソフトウェアに大"
"きな悪影響を与えないようなファイナルリリースの軽微なエラーを修正するために使"
"われます。バグ修正のために使うべきではなく、それは新たな (即ち、セマンティッ"
"クバージョニングを使っているなら第３要素を１だけ増加させた) ファイナルリリー"
"スで行うべきです。"

#: ../source/discussions/versioning.rst:49
msgid ""
"Finally, epochs, a rarely used feature, serve to fix the sorting order when "
"changing the versioning scheme. For example, if a project is using calendar "
"versioning, with versions like 23.12, and switches to semantic versioning, "
"with versions like 1.0, the comparison between 1.0 and 23.12 will go the "
"wrong way. To correct this, the new version numbers should have an explicit "
"epoch, as in \"1!1.0\", in order to be treated as more recent than the old "
"version numbers."
msgstr ""
"最後に、エポックは、稀にしか使われない機能ですが、バージョニングの方法を変更"
"するときに順序を訂正するために使われます。例えば、 23.12 のようなカレンダー"
"バージョニングを使っているプロジェクトが 1.0 のようなセマンティックバージョニ"
"ングに移行するような場合に、 1.0 と 23.12 の間の比較は誤った結果になるでしょ"
"う。これを訂正するために、明示的に示された \"1!1.0\" のようなエポックを持つこ"
"とで、新しいバージョン番号が古いバージョン番号よりもより最近のものとして扱わ"
"れるようにするべきです。"

#: ../source/discussions/versioning.rst:59
msgid "Semantic versioning vs. calendar versioning"
msgstr "セマンティックバージョニング対カレンダーバージョニング"

#: ../source/discussions/versioning.rst:61
msgid ""
"A versioning scheme is a formalized way to interpret the segments of a "
"version number, and to decide which should be the next version number for a "
"new release of a package. Two versioning schemes are commonly used for "
"Python packages, semantic versioning and calendar versioning."
msgstr ""
"バージョニング方法とは、バージョン番号の断片を翻訳するために決められたやり方"
"で、パッケージの新しいリリースように次のバージョン番号がどのようなものになる"
"べきかを決めるやり方です。Python パッケージにしばしば用いられる二つのバージョ"
"ニング方法は、セマンティックバージョニングとカレンダーバージョニングです。"

#: ../source/discussions/versioning.rst:68
msgid ""
"The decision which version number to choose is up to a project's maintainer. "
"This effectively means that version bumps reflect the maintainer's view. "
"That view may differ from the end-users' perception of what said formalized "
"versioning scheme promises them."
msgstr ""
"どのようなバージョン番号を選択するべきかの決定権はプロジェクトのメンテナに委"
"ねられています。これは、バージョン上げにメンテナの観点を反映しているというこ"
"とを実質的に意味します。そのような観点は、バージョニング方法が約束するやり方"
"についてのエンドユーザの受け取り方とは異なるかも知れません。"

#: ../source/discussions/versioning.rst:74
msgid ""
"There are known exceptions for selecting the next version number. The "
"maintainers may consciously choose to break the assumption that the last "
"version segment only contains backwards-compatible changes. One such case is "
"when a security vulnerability needs to be addressed. Security releases often "
"come in patch versions but contain breaking changes inevitably."
msgstr ""
"次のバージョン番号を選定する上で既知の例外があります。保守者は、最後のバー"
"ジョン断片の変更では後方互換性を保つ変更だけを含むという想定を破るような選択"
"を意識的に行っても構いません。そのような場合の一つは、セキュリティ上の脆弱性"
"を修正する必要がある時です。セキュリティリリースは、しばしば、パッチバージョ"
"ンとして提供されますが、そうすると必然的にここで述べているような変更をもたら"
"します。"

#: ../source/discussions/versioning.rst:84
#: ../source/specifications/version-specifiers.rst:726
msgid "Semantic versioning"
msgstr "セマンティックバージョニング"

#: ../source/discussions/versioning.rst:86
msgid ""
"The idea of *semantic versioning* (or SemVer) is to use 3-part version "
"numbers, *major.minor.patch*, where the project author increments:"
msgstr ""
"*セマンティックバージョニング* (または SemVer) のアイデアは、３個の部分から構"
"成されるバージョン番号、つまり *major.minor.patch* を用いることで、プロジェク"
"トの作者は以下のように各段階の数字を増やします:"

#: ../source/discussions/versioning.rst:89
msgid "*major* when they make incompatible API changes,"
msgstr "APIの変更で互換性を失う時には *major* 番号、"

#: ../source/discussions/versioning.rst:90
msgid ""
"*minor* when they add functionality in a backwards-compatible manner, and"
msgstr "後方互換性を保ったままで新機能を追加する場合には *minor* を、そして"

#: ../source/discussions/versioning.rst:91
msgid "*patch*, when they make backwards-compatible bug fixes."
msgstr "後方互換性を維持したままのバグ修正の場合には *patch* を増加させます。"

#: ../source/discussions/versioning.rst:93
msgid ""
"A majority of Python projects use a scheme that resembles semantic "
"versioning. However, most projects, especially larger ones, do not strictly "
"adhere to semantic versioning, since many changes are technically breaking "
"changes but affect only a small fraction of users. Such projects tend to "
"increment the major number when the incompatibility is high, or to signal a "
"shift in the project, rather than for any tiny incompatibility [#semver-"
"strictness]_. Conversely, a bump of the major version number is sometimes "
"used to signal significant but backwards-compatible new features."
msgstr ""
"Python プロジェクトの大多数は、セマンティックバージョニングに似た方式を使って"
"います。しかしながら、ほとんどのプロジェクト、とりわけ大規模なものでは、多く"
"の変更が技術的には互換性を保たないけれども少数のユーザにしか影響を与えないの"
"で、セマンティックバージョニングに厳密に従うことはしていません。そのようなプ"
"ロジェクトでは、小さな非互換性であってもいつも major 番号を増やす [#semver-"
"strictness]_ というよりは、非互換性が高い場合やプロジェクトの方向性が変わるこ"
"とを示す時に増やす傾向にあります。逆に、時には、重要ではあるが後方互換性を損"
"なわない新機能に注目を集めるために major バージョン番号を増加させることもあり"
"ます。"

#: ../source/discussions/versioning.rst:103
msgid ""
"For those projects that do use strict semantic versioning, this approach "
"allows users to make use of :ref:`compatible release version specifiers "
"<version-specifiers-compatible-release>`, with the ``~=`` operator.  For "
"example, ``name ~= X.Y`` is roughly equivalent to ``name >= X.Y, == X.*``, i."
"e., it requires at least release X.Y, and allows any later release with "
"greater Y as long as X is the same. Likewise, ``name ~= X.Y.Z`` is roughly "
"equivalent to ``name >= X.Y.Z, == X.Y.*``, i.e., it requires at least X.Y.Z "
"and allows a later release with same X and Y but higher Z."
msgstr ""
"厳密なセマンティックバージョニングを採用しているプロジェクトでは、このアプ"
"ローチによってユーザが ``~=`` 演算子を用いた :ref:`互換リリースバージョン指定"
"子 <version-specifiers-compatible-release>` を使うことができるようになりま"
"す。例えば、 ``name ~= X.Y`` は ``name >= X.Y, == X.*`` と大まかに言って等価"
"で、つまり、少なくともリリース X.Y を要求していて X が同じである限りは Y が大"
"きくなった後続リリースを許容するということです。同様に、 ``name ~= X.Y.Z`` は"
"大まかに ``name >= X.Y.Z, == X.Y.*`` と等価で、少なくとも X.Y.Z を要求してい"
"て X と Y が同じである限り Z が大きくなった後続のリリースを許容するということ"
"です。"

#: ../source/discussions/versioning.rst:112
msgid ""
"Python projects adopting semantic versioning should abide by clauses 1-8 of "
"the `Semantic Versioning 2.0.0 specification <semver_>`_."
msgstr ""
"セマンティックバージョニングを採用しているPythonプロジェクトでは、 `セマン"
"ティックバージョニング 2.0.0 仕様書 <semver_>`_ の第１節から第８節までを甘受"
"すべきです。"

#: ../source/discussions/versioning.rst:115
msgid ""
"The popular :doc:`Sphinx <sphinx:index>` documentation generator is an "
"example project that uses strict semantic versioning (:doc:`Sphinx "
"versioning policy <sphinx:internals/release-process>`). The famous :doc:"
"`NumPy <numpy:index>` scientific computing package explicitly uses \"loose\" "
"semantic versioning, where releases incrementing the minor version can "
"contain backwards-incompatible API changes (:doc:`NumPy versioning policy "
"<numpy:dev/depending_on_numpy>`)."
msgstr ""
"人気のあるドキュメンテーションジェネレータである :doc:`Sphinx <sphinx:"
"index>` は、厳密なセマンティックバージョニング (:doc:`Sphinx バージョニング方"
"針 <sphinx:internals/release-process>`) を採用しているプロジェクトの例です。"
"有名な科学計算パッケージである :doc:`NumPy <numpy:index>` は、マイナーバー"
"ジョンの更新でも後方互換性のない API 変更を含む場合がある (:doc:`NumPy バー"
"ジョニング方針 <numpy:dev/depending_on_numpy>`) ということで、明示的に \"ゆる"
"い\" セマンティックバージョニングを採用しています。"

#: ../source/discussions/versioning.rst:124
msgid "Calendar versioning"
msgstr "カレンダーバージョニング"

#: ../source/discussions/versioning.rst:126
msgid ""
"Semantic versioning is not a suitable choice for all projects, such as those "
"with a regular time-based release cadence and a deprecation process that "
"provides warnings for a number of releases prior to removal of a feature."
msgstr ""
"セマンティックバージョニングはすべてのプロジェクト向きと言うわけではなく、例"
"えば定期的なリリースサイクルに従う場合や、ある機能を削除する前に何世代にもわ"
"たるリリースで非推奨(deprecation)の警告を出すような場合には適していないかもし"
"れません。"

#: ../source/discussions/versioning.rst:130
msgid ""
"A key advantage of date-based versioning, or `calendar versioning "
"<calver_>`_ (CalVer), is that it is straightforward to tell how old the base "
"feature set of a particular release is given just the version number."
msgstr ""
"`カレンダーバージョニング <calver_>`_ (CalVer) の最大の利点は、バージョン番号"
"を見ただけで基盤になっている機能セットがどれほど古いのかが直截にわかることで"
"す。"

#: ../source/discussions/versioning.rst:134
msgid ""
"Calendar version numbers typically take the form *year.month* (for example, "
"23.12 for December 2023)."
msgstr ""
"カレンダーバージョン番号は、典型的には *年.月* (例えば2023年12月に対して "
"23.12) の形を取ります。"

#: ../source/discussions/versioning.rst:137
msgid ""
":doc:`Pip <pip:index>`, the standard Python package installer, uses calendar "
"versioning."
msgstr ""
"標準的な Python パッケージインストーラである :doc:`Pip <pip:index>` はカレン"
"ダーバージョニングを採用しています。"

#: ../source/discussions/versioning.rst:142
msgid "Other schemes"
msgstr "他の方法"

#: ../source/discussions/versioning.rst:144
msgid ""
"Serial versioning refers to the simplest possible versioning scheme, which "
"consists of a single number incremented every release. While serial "
"versioning is very easy to manage as a developer, it is the hardest to track "
"as an end user, as serial version numbers convey little or no information "
"regarding API backwards compatibility."
msgstr ""
"一連番号によるバージョン付与は、リリースの度に増加する単一の数字で構成されて"
"いて、可能な限り単純なバージョニング方法であると見なされています。一連番号に"
"よるバージョン付与は開発者にとってはとても管理しやすい反面、一連番号による"
"バージョン番号を見てもAPIの後方互換性に関する情報がほとんど又は全くわからない"
"ので、ユーザにとっては追跡するのが最も困難です。"

#: ../source/discussions/versioning.rst:150
msgid ""
"Combinations of the above schemes are possible. For example, a project may "
"combine date-based versioning with serial versioning to create a *year."
"serial* numbering scheme that readily conveys the approximate age of a "
"release, but doesn't otherwise commit to a particular release cadence within "
"the year."
msgstr ""
"上に述べた方式を組み合わせて用いることもできます。例えば、日付ベースのバー"
"ジョン付与と一連番号によるバージョン付与を組み合わせて *year.month* 型のバー"
"ジョン番号付与方式を作り出して、それがあるリリースのおよその年数が自動的にわ"
"かるようにしているが、あるリリースのその年の中での歩調についてはあまり気にし"
"ていないこともあります。"

#: ../source/discussions/versioning.rst:157
#: ../source/specifications/version-specifiers.rst:114
msgid "Local version identifiers"
msgstr "ローカルバージョン識別子"

#: ../source/discussions/versioning.rst:159
msgid ""
"Public version identifiers are designed to support distribution via :term:"
"`PyPI <Python Package Index (PyPI)>`. Python packaging tools also support "
"the notion of a :ref:`local version identifier <local-version-identifiers>`, "
"which can be used to identify local development builds not intended for "
"publication, or modified variants of a release maintained by a redistributor."
msgstr ""
"公的バージョン識別子は、 :term:`PyPI <Python Package Index (PyPI)>` を通じた"
"配布をサポートするように設計されています。Pythonのパッケージングツール群は、"
"ローカルでの開発でビルドごとの識別子や再配布者が維持管理している変種のリリー"
"スの識別子として用いるような :ref:`局所的バージョン識別子 <local-version-"
"identifiers>` の考え方もサポートします。"

#: ../source/discussions/versioning.rst:165
msgid ""
"A local version identifier takes the form of a public version identifier, "
"followed by \"+\" and a local version label. For example, a package with "
"Fedora-specific patches applied could have the version \"1.2.1+fedora.4\". "
"Another example is versions computed by setuptools-scm_, a setuptools plugin "
"that reads the version from Git data. In a Git repository with some commits "
"since the latest release, setuptools-scm generates a version like \"0.5."
"dev1+gd00980f\", or if the repository has untracked changes, like \"0.5."
"dev1+gd00980f.d20231217\"."
msgstr ""
"ローカルバージョン識別子は、公的バージョン識別子の後ろに \"+\" とローカルバー"
"ジョンラベルを並べた形を採ります。例えば、Fedora に特有のパッチが適用された"
"パッケージは、 \"1.2.1+fedora.4\" といったバージョンになるという具合です。別"
"の例としては、 setuptools-scm_ によって計算されたバージョンで、Git のデータか"
"らバージョンを読み取る setuptools プラグインによるものです。最新のリリース以"
"後に幾つかのコミットがなされた Git リポジトリでは setuptools-scm は \"0.5."
"dev1+gd00980f\" のようなバージョンを生成することもありますし、トラックされて"
"いない変更のあるリポジトリなら \"0.5.dev1+00980f.d20231217\" のようになること"
"があります。"

#: ../source/discussions/versioning.rst:177
msgid "Accessing version information at runtime"
msgstr "ランタイムにバージョン情報にアクセスする"

#: ../source/discussions/versioning.rst:179
msgid ""
"Version information for all :term:`distribution packages <Distribution "
"Package>` that are locally available in the current environment can be "
"obtained at runtime using the standard library's :func:`importlib.metadata."
"version` function::"
msgstr ""
"現在の環境でローカルに利用可能な :term:`配布パッケージ <Distribution "
"Package>` のバージョン情報は、標準ライブラリの :func:`importlib.metadata."
"version` 関数を使ってランタイム内から取得することが可能です::"

#: ../source/discussions/versioning.rst:186
msgid ""
"Many projects also choose to version their top level :term:`import packages "
"<Import Package>` by providing a package level ``__version__`` attribute::"
msgstr ""
"多くのプロジェクトでは、パッケージレベルの ``__version__`` アトリビュートを提"
"供することで、トップレベルの :term:`インポートパッケージ <Import Package>`:"
"term:`インポートパッケージ <Import Package>` にバージョン番号を付与することも"
"選択しています::"

#: ../source/discussions/versioning.rst:194
msgid ""
"This technique can be particularly valuable for CLI applications which want "
"to ensure that version query invocations (such as ``pip -V``) run as quickly "
"as possible."
msgstr ""
"このテクニックは、とりわけ、バージョン番号を問い合わせる呼び出し (``pip -V`` "
"など) が可能な限り素早く動作することが保証されることを望む CLI アプリケーショ"
"ンにおいて価値があります。"

#: ../source/discussions/versioning.rst:198
msgid ""
"Package publishers wishing to ensure their reported distribution package and "
"import package versions are consistent with each other can review the :ref:"
"`single-source-version` discussion for potential approaches to doing so."
msgstr ""
"報告された配布パッケージとインポートパッケージのバージョン番号が互いに整合性"
"のあるものとなることを保証したいと望むパッケージの公開者は、そのようにするた"
"めの潜在的なアプローチとして :ref:`シングルソースのバージョン番号 <single-"
"source-version>` の議論を復習することができます。"

#: ../source/discussions/versioning.rst:202
msgid ""
"As import packages and modules are not *required* to publish runtime version "
"information in this way (see the withdrawn proposal in :pep:`PEP 396 "
"<396>`), the ``__version__`` attribute should either only be queried with "
"interfaces that are known to provide it (such as a project querying its own "
"version or the version of one of its direct dependencies), or else the "
"querying code should be designed to handle the case where the attribute is "
"missing [#fallback-to-dist-version]_."
msgstr ""
"インポートされたパッケージやモジュールはランタイムのバージョン情報をこのやり"
"方で公開することを *要求* されてはいない (:pep:`396` で撤回された提案を見てく"
"ださい) ので、 ``__version__`` アトリビュートは、それを提供するものとして知ら"
"れているインターフェース (あるプロジェクトが自身のバージョン番号やその直接の"
"依存先のバージョン番号を問い合わせるなど) だけから問い合わせを受けるか、また"
"は、問い合わせる側のコードがアトリビュート欠損の場合 [#fallback-to-dist-"
"version]_ を取り扱えるように設計されているかのいずれかであるべきです。"

#: ../source/discussions/versioning.rst:210
msgid ""
"Some projects may need to publish version information for external APIs that "
"aren't the version of the module itself. Such projects should define their "
"own project-specific ways of obtaining the relevant information at runtime. "
"For example, the standard library's :mod:`ssl` module offers multiple ways "
"to access the underlying OpenSSL library version::"
msgstr ""
"プロジェクトによっては、モジュール自身のバージョン番号ではないバージョン情報"
"を外部の API 群向けに公開する必要があるかもしれません。そのようなプロジェクト"
"では、ランタイムに適切な情報を取得するための、そのプロジェクト特有の方法を定"
"義するべきです。例えば、標準ライブラリの :mod:`ssl` モジュールは、下敷きにし"
"ている OpenSSL ライブラリのバージョンにアクセスするための複数の方法を提供して"
"います::"

#: ../source/discussions/versioning.rst:225
msgid ""
"Some more examples of unusual version numbers are given in a `blog post "
"<versions-seth-larson_>`_ by Seth Larson."
msgstr ""
"普通でないバージョン番号のいくつかの例が Seth Larson によって `ブログポスト "
"<versions.seth-larson_>`_ に挙げられています。"

#: ../source/discussions/versioning.rst:228
msgid ""
"For some personal viewpoints on this issue, see these blog posts: `by Hynek "
"Schlawak <semver-hynek-schlawack_>`_, `by Donald Stufft <semver-donald-"
"stufft_>`_, `by Bernát Gábor <semver-bernat-gabor_>`_, `by Brett Cannon "
"<semver-brett-cannon_>`_. For a humoristic take, read about ZeroVer_."
msgstr ""
"この問題に関する個人的な観点については、次のようなブログポストを見てくださ"
"い: `Hynek Schlawak によるもの <semver-hynek-schlawack_>`_ ・ `Donald Stufft "
"によるもの <semver-donald-stufft_>`_ ・ `Bernát Gábor によるもの <semver-"
"bernat-gabor_>`_ ・ `Brett Cannon によるもの <semver-brett-cannon_>`_ 。ユー"
"モラスなものが良ければ、 ZeroVer_ について読んでみてください。"

#: ../source/discussions/versioning.rst:234
msgid ""
"A full list mapping the top level names available for import to the "
"distribution packages that provide those import packages and modules may be "
"obtained through the standard library's :func:`importlib.metadata."
"packages_distributions` function. This means that even code that is "
"attempting to infer a version to report for all importable top-level names "
"has a means to fall back to reporting the distribution version information "
"if no ``__version__`` attribute is defined. Only standard library modules, "
"and modules added via means other than Python package installation would "
"fail to have version information reported in that case."
msgstr ""
"インポートされるパッケージやモジュールを提供する配布パッケージにインポートす"
"るために利用可能なトップレベルの名称をマッピングした全数リストは、標準ライブ"
"ラリの :func:`importlib.metadata.packages_distributions` 関数を通じて取得する"
"ことができるかもしれません。これが意味するところは、すべてのインポート可能な"
"トップレベルの名称群向けに報告するバージョン番号を暗に示唆することを試みてい"
"るコードであってさえも、もし ``__version__`` アトリビュートが定義されていなけ"
"れば、配布物のバージョン状をを報告するということにフォールバックする方法を"
"持っているということです。標準ライブラリのモジュール群だけが、そして、 "
"Python パッケージインストレーション以外の方法を通じて追加されたモジュール群だ"
"けが、このような場合にほうこくするバージョン情報を得ることに失敗することで"
"しょう。"

#: ../source/flow.rst:3
msgid "The Packaging Flow"
msgstr "パッケージングの流れ"

#: ../source/flow.rst:5
msgid ""
"The document aims to outline the flow involved in publishing/distributing a :"
"term:`distribution package <Distribution Package>`, usually to the `Python "
"Package Index (PyPI)`_. It is written for package publishers, who are "
"assumed to be the package author."
msgstr ""
"文書は、大抵は `Python パッケージインデックス (PyPI) <Python Package Index "
"(PyPI)>`_ への :term:`配布パッケージ <Distribution Package>` の公開や配布に必"
"要な作業の流れをおおまかに描き出すことを目的としています。パッケージの作者と"
"目される、パッケージを公開する人向けに書かれました。"

#: ../source/flow.rst:12
msgid ""
"While the :doc:`tutorial <tutorials/packaging-projects>` walks through the "
"process of preparing a simple package for release, it does not fully "
"enumerate what steps and files are required, and for what purpose."
msgstr ""
":doc:`チュートリアル <tutorials/packaging-projects>` ではシンプルなプロジェク"
"トについてリリースの準備を行うプロセスを一通り実行しますが、どのステップでど"
"のようなファイルが必要になり、その目的は何かという部分については必ずしも完全"
"に列挙はしていません。"

#: ../source/flow.rst:16
msgid ""
"Publishing a package requires a flow from the author's source code to an end "
"user's Python environment. The steps to achieve this are:"
msgstr ""
"パッケージを公開するには、作者のソースコードからエンドユーザの Python 環境に"
"至る流れが必要とされます。これを実現するためのステップとしては:"

#: ../source/flow.rst:19
msgid ""
"Have a source tree containing the package. This is typically a checkout from "
"a version control system (VCS)."
msgstr ""
"パッケージを含むソースツリーを入手します。これは、典型的にはバージョン管理シ"
"ステム (VCS) からのチェックアウトのことです。"

#: ../source/flow.rst:22
msgid ""
"Prepare a configuration file describing the package metadata (name, version "
"and so forth) and how to create the build artifacts. For most packages, this "
"will be a :file:`pyproject.toml` file, maintained manually in the source "
"tree."
msgstr ""
"パッケージのメタデータ (名前・バージョン・その他) とビルド成果物を作成するた"
"めの方法を記述した設定ファイルを用意してください。ほとんどのパッケージ向けに"
"は、これは、ソースツリー内で手動で維持管理される :file:`pyproject.toml` ファ"
"イルを準備するということになるでしょう。"

#: ../source/flow.rst:27
msgid ""
"Create build artifacts to be sent to the package distribution service "
"(usually PyPI); these will normally be a :term:`source distribution "
"(\"sdist\") <Source Distribution (or \"sdist\")>` and one or more :term:"
"`built distributions (\"wheels\") <Built Distribution>`. These are made by a "
"build tool using the configuration file from the previous step. Often there "
"is just one generic wheel for a pure Python package."
msgstr ""
"パッケージ配布サービス (通常は PyPI) へ送るビルド成果物を作成してください; 普"
"通ならこれらは :term:`ソースコード配布物 (\"sdist\") <Source Distribution "
"(or \"sdist\")>` と、ひとつまたはそれ以上の :term:`ビルド済配布物 "
"(\"wheels\") <Built Distribution>` ということになるでしょう。これらは、前のス"
"テップで作成した設定ファイルを使ってビルドツールによって作成されます。純 "
"Python パッケージの場合には、共通の wheel がひとつだけ存在するということもし"
"ばしばあります。"

#: ../source/flow.rst:35
msgid "Upload the build artifacts to the package distribution service."
msgstr "ビルド成果物をパッケージ配布サービスへアップロードしてください。"

#: ../source/flow.rst:37
msgid ""
"At that point, the package is present on the package distribution service. "
"To use the package, end users must:"
msgstr ""
"その時点で、パッケージがパッケージ配布サービス上に存在することになります。そ"
"のパッケージを使うためにエンドユーザは次のことをしなければなりません:"

#: ../source/flow.rst:40
msgid ""
"Download one of the package's build artifacts from the package distribution "
"service."
msgstr ""
"そのパッケージのビルド成果物をパッケージ配布サービスからダウンロードしてくだ"
"さい。"

#: ../source/flow.rst:43
msgid ""
"Install it in their Python environment, usually in its ``site-packages`` "
"directory. This step may involve a build/compile step which, if needed, must "
"be described by the package metadata."
msgstr ""
"それをエンドユーザの Python 環境の通常であれば ``site-packages`` ディレクトリ"
"にインストールしてください。もしそれが必要ならパッケージのメタデータにその方"
"法が記述されていなければなりませんが、このステップにはビルド/コンパイルのス"
"テップを含むことがあります。"

#: ../source/flow.rst:47
msgid ""
"These last 2 steps are typically performed by :ref:`pip` when an end user "
"runs ``pip install``."
msgstr ""
"これら最後のふたつのステップは、典型的な場合には、エンドユーザが ``pip "
"install`` を走らせた時に :ref:`pip` によって実行されます。"

#: ../source/flow.rst:50
msgid "The steps above are described in more detail below."
msgstr "上記のステップについては、以下にもっと詳しく記述してあります。"

#: ../source/flow.rst:53
msgid "The source tree"
msgstr "ソースコードツリー"

#: ../source/flow.rst:55
msgid ""
"The source tree contains the package source code, usually a checkout from a "
"VCS. The particular version of the code used to create the build artifacts "
"will typically be a checkout based on a tag associated with the version."
msgstr ""
"ソースコードツリーには、パッケージのソースコード (通常なら VCS からのチェック"
"アウト) が含まれます。"

#: ../source/flow.rst:60
msgid "The configuration file"
msgstr "設定ファイル"

#: ../source/flow.rst:62
msgid ""
"The configuration file depends on the tool used to create the build "
"artifacts. The standard practice is to use a :file:`pyproject.toml` file in "
"the `TOML format`_."
msgstr ""
"ビルド成果物を作成するのに用いるツールによって設定ファイルは変わります。"
"`TOML フォーマット <TOML format>`_ で書かれた `pyproject.toml` ファイルを使う"
"のが標準的な慣習です。"

#: ../source/flow.rst:68
msgid ""
"At a minimum, the :file:`pyproject.toml` file needs a ``[build-system]`` "
"table specifying your build tool. There are many build tools available, "
"including but not limited to :ref:`flit`, :ref:`hatch`, :ref:`pdm`, :ref:"
"`poetry`, :ref:`setuptools`, `trampolim`_, and `whey`_. Each tool's "
"documentation will show what to put in the ``[build-system]`` table."
msgstr ""
":file:`pyproject.toml` ファイルには、少なくとも、採用したビルドツールを指定す"
"る ``[build-system]`` テーブルがなければなりません。ビルドツールとして使える"
"ものには、 :ref:`flit` ・ :ref:`hatch` ・ :ref:`pdm` ・ :ref:`poetry` ・ :"
"ref:`setuptools` ・ `trample`_ ・ `whey`_ を含めて他にもさまざまなものがあり"
"ます。それぞれのツールの説明文書には、 ``[build-system]`` に何を書けば良いか"
"が示されていることでしょう。"

#: ../source/flow.rst:77
msgid "For example, here is a table for using :ref:`hatch`:"
msgstr "例えば、 :ref:`hatch` を使う場合のテーブルは次のようになります:"

#: ../source/flow.rst:85
msgid ""
"With such a table in the :file:`pyproject.toml` file, a \":term:`frontend "
"<Build Frontend>`\" tool like :ref:`build` can run your chosen build tool's "
"\":term:`backend <Build Backend>`\" to create the build artifacts. Your "
"build tool may also provide its own frontend. An install tool like :ref:"
"`pip` also acts as a frontend when it runs your build tool's backend to "
"install from a source distribution."
msgstr ""
":file:`pyproject.toml` ファイルの中のそのようなテーブルを用いることで、 :ref:"
"`build` のような \":term:`フロントエンド <Build Frontend>`\" のツールが、ビル"
"ド成果物を作成するためにあなたが選んだビルドツールの \":term:`バックエンド "
"<Build Backend>`\" を実行することができます。あなたが選んだビルドツールが独自"
"のフロントエンドを提供しても構いません。 :ref:`pip` のようなインストールツー"
"ルもまた、ソースコード配布物からインストールする時にあなたのビルドツールバッ"
"クエンドを走らせることで、フロントエンドとして振る舞うことができます。"

#: ../source/flow.rst:94
msgid ""
"The particular build tool you choose dictates what additional information is "
"required in the :file:`pyproject.toml` file. For example, you might specify:"
msgstr ""
"あなたが選択した特定のビルドツールに応じてどんな追加の情報を :file:"
"`pyproject.toml` ファイルに記述しなければならないかがきまります。例えば、以下"
"のように指定することができます:"

#: ../source/flow.rst:97
msgid ""
"a ``[project]`` table containing project :doc:`Core Metadata </"
"specifications/core-metadata/>` (name, version, author and so forth),"
msgstr ""
":doc:`コアとなるメタデータ </specifications/core-metadata/>` (名前・バージョ"
"ン・作者・その他) を含む ``[project]``、"

#: ../source/flow.rst:101
msgid "a ``[tool]`` table containing tool-specific configuration options."
msgstr "ツール特有の設定オプションを含んだ ``[tool]`` テーブル。"

#: ../source/flow.rst:103
msgid ""
"Refer to the :ref:`pyproject.toml guide <writing-pyproject-toml>` for a "
"complete guide to ``pyproject.toml`` configuration."
msgstr ""
"``pyproject.toml`` の設定に関する完全なガイド文書としては、 :ref:`pyproject."
"toml ガイド文書 <writing-pyproject-toml>` を参照してください。"

#: ../source/flow.rst:108
msgid "Build artifacts"
msgstr "ビルド成果物"

#: ../source/flow.rst:111
msgid "The source distribution (sdist)"
msgstr ""
"`ソースコード配布物 (またはsdist) <Source Distribution (or \"sdist\")>`"

#: ../source/flow.rst:113
msgid ""
"A source distribution contains enough to install the package from source in "
"an end user's Python environment. As such, it needs the package source, and "
"may also include tests and documentation. These are useful for end users "
"wanting to develop your sources, and for end user systems where some local "
"compilation step is required (such as a C extension)."
msgstr ""
"ソースコード配布物には、エンドユーザの Python 環境でソースコードからパッケー"
"ジをインストールするのに十分なものが含まれています。そのためには、パッケージ"
"のソースコードが必要であり、テストや説明文書が含まれているかもしれません。こ"
"れらは、自身でソースコードを開発したいと考えるエンドユーザにとっては便利であ"
"り、ローカルでコンパイルを行うステップが必要とされる (C 拡張など) エンドユー"
"ザのシステムで役に立つことでしょう。"

#: ../source/flow.rst:119 ../source/flow.rst:143
msgid ""
"The :ref:`build` package knows how to invoke your build tool to create one "
"of these:"
msgstr ""
":ref:`build` パッケージは、次のうちのいずれかを生成するためにあなたの選んだビ"
"ルドツールをどのように呼び出すのかを知っています:"

#: ../source/flow.rst:126
msgid ""
"Or, your build tool may provide its own interface for creating an sdist."
msgstr ""
"あるいは、あなたの選んだツールが、 sdist を生成するためのツール独自のインタ"
"フェースを提供しているかもしれません。"

#: ../source/flow.rst:130
msgid "The built distributions (wheels)"
msgstr "ビルド済み配布物 (wheels)"

#: ../source/flow.rst:132
msgid ""
"A built distribution contains only the files needed for an end user's Python "
"environment. No compilation steps are required during the install, and the "
"wheel file can simply be unpacked into the ``site-packages`` directory. This "
"makes the install faster and more convenient for end users."
msgstr ""
"ビルド済配布物は、エンドユーザの Python 環境に必要とされるファイル群だけを含"
"んでいます。インストールの際にコンパイル工程は不要で、 wheel ファイルの内容"
"を ``site-packages`` ディレクトリに単純に展開することができます。これによって"
"インストールが素早く行われ、エンドユーザにとってより便利であると言えるでしょ"
"う。"

#: ../source/flow.rst:137
msgid ""
"A pure Python package typically needs only one \"generic\" wheel. A package "
"with compiled binary extensions needs a wheel for each supported combination "
"of Python interpreter, operating system, and CPU architecture that it "
"supports. If a suitable wheel file is not available, tools like :ref:`pip` "
"will fall back to installing the source distribution."
msgstr ""
"純 Python パッケージでは、典型的には、ひとつの \"万能型\" の wheel さえあれば"
"十分です。コンパイル済みのバイナリ拡張を伴うパッケージでは、そのパッケージが"
"サポートする Python インタプリタ・オペレーティングシステム・ CPU アーキテク"
"チャの組み合わせのそれぞれについて wheel ファイルが必要になります。適切な "
"wheel ファイルが利用できない場合には、 :ref:`pip` のようなツールはソースコー"
"ド配布物からのインストールにフォールバックします。"

#: ../source/flow.rst:150
msgid "Or, your build tool may provide its own interface for creating a wheel."
msgstr ""
"あるいは、あなたの選んだビルドツールが wheel を生成するための独自のインタ"
"フェースを提供しているかもしれません。"

#: ../source/flow.rst:154
msgid ""
"The default behaviour of :ref:`build` is to make both an sdist and a wheel "
"from the source in the current directory; the above examples are "
"deliberately specific."
msgstr ""
":ref:`build` のデフォルトの動作は、カレントディレクトリにあるソースコードか"
"ら sdist と wheel の両方を作成することです; 上記の例は意図的に特定の動作をさ"
"せています。"

#: ../source/flow.rst:159
msgid "Upload to the package distribution service"
msgstr "パッケージ配布サービスへアップロードする"

#: ../source/flow.rst:161
msgid ""
"The :ref:`twine` tool can upload build artifacts to PyPI for distribution, "
"using a command like:"
msgstr ""
"ツールの :ref:`twine` の以下のようなコマンドを使って、配布のためにビルド成果"
"物を PyPI へアップロードすることができます:"

#: ../source/flow.rst:168
msgid "Or, your build tool may provide its own interface for uploading."
msgstr ""
"あるいは、あなたの選んだビルドツールにアップロードのための独自のインタフェー"
"スが備わっているかもしれません。"

#: ../source/flow.rst:171
msgid "Download and install"
msgstr "ダウンロードとインストール"

#: ../source/flow.rst:173
msgid ""
"Now that the package is published, end users can download and install the "
"package into their Python environment. Typically this is done with :ref:"
"`pip`, using a command like:"
msgstr ""
"今やパッケージが公開されたので、エンドユーザがそのパッケージをダウンロードし"
"て自分の Python 環境へインストールすることができるようになりました。典型的に"
"は、これは、次のようなコマンドを使って :ref:`pip` で行われます:"

#: ../source/flow.rst:181
msgid ""
"End users may also use other tools like :ref:`pipenv`, :ref:`poetry`, or :"
"ref:`pdm`."
msgstr ""
"エンドユーザは、 :ref:`pipenv` ・ :ref:`poetry` ・ :ref:`ppm` のような他の"
"ツールを使うことも可能です。"

#: ../source/glossary.rst:3
msgid "Glossary"
msgstr "用語集"

#: ../source/glossary.rst:8
msgid "Binary Distribution"
msgstr "バイナリ配布物"

#: ../source/glossary.rst:11
msgid ""
"A specific kind of :term:`Built Distribution` that contains compiled "
"extensions."
msgstr ""
"`ビルド済配布物 <Built Distribution>`の特定の種類で、コンパイル済みの拡張部分"
"を含むもの。"

#: ../source/glossary.rst:14
msgid "Build Backend"
msgstr "ビルドバックエンド"

#: ../source/glossary.rst:17
msgid ""
"A library that takes a source tree and builds a :term:`source distribution "
"<Source Distribution (or \"sdist\")>` or :term:`built distribution <Built "
"Distribution>` from it. The build is delegated to the backend by a :term:"
"`frontend <Build Frontend>`. All backends offer a standardized interface."
msgstr ""
"ソースコードツリーを受け取って、そこから :term:`ソースコード配布物 <Source "
"Distribution (or \"sdist\")>` や :term:`ビルド済配布物 <Built Distribution>` "
"をビルドするライブラリ。ビルドの作業は、 :term:`フロントエンド <Build "
"Frontend>` によってバックエンドに委任されます。"

#: ../source/glossary.rst:24
msgid ""
"Examples of build backends are :ref:`flit's flit-core <flit>`, :ref:`hatch's "
"hatchling <hatch>`, :ref:`maturin`, :ref:`meson-python`, :ref:`scikit-build-"
"core`, and :ref:`setuptools`."
msgstr ""
"ビルドバックエンドの例としては、 :ref:`flit の flit-core <flit>` 、 :ref:"
"`hatchのhatchling <hatch>` 、 :ref:`maturin` 、 :ref:`meson-python` 、 :ref:"
"`scikit-build-core` 、 :ref:`setuptools` があります。"

#: ../source/glossary.rst:32
msgid "Build Frontend"
msgstr "ビルドフロントエンド"

#: ../source/glossary.rst:35
msgid ""
"A tool that users might run that takes arbitrary source trees or :term:"
"`source distributions <Source Distribution (or \"sdist\")>` and builds "
"source distributions or :term:`wheels <Wheel>` from them. The actual "
"building is delegated to each source tree's :term:`build backend <Build "
"Backend>`."
msgstr ""
"任意のソースコードツリーまたは :term:`ソースコード配布物 <Source "
"Distribution (or \"sdist\")>` を入力として、それらからソースコード配布物また"
"は :term:`wheels <Wheel>` をビルドするためにユーザが走らせるであろうツール。"
"実際のビルド作業は、それぞれのソースコードツリーの :term:`ビルドバックエンド "
"<Build Backend>` に委任されます。"

#: ../source/glossary.rst:42
msgid "Examples of build frontends are :ref:`pip` and :ref:`build`."
msgstr ""
"ビルドフロントエンドの例としては、 :ref:`pip` や :ref:`build` があります。"

#: ../source/glossary.rst:44
msgid "Built Distribution"
msgstr "ビルド済配布物"

#: ../source/glossary.rst:47
msgid ""
"A :term:`Distribution <Distribution Package>` format containing files and "
"metadata that only need to be moved to the correct location on the target "
"system, to be installed. :term:`Wheel` is such a format, whereas :term:"
"`Source Distribution <Source Distribution (or \"sdist\")>` is not, in that "
"it requires a build step before it can be installed.  This format does not "
"imply that Python files have to be precompiled (:term:`Wheel` intentionally "
"does not include compiled Python files). See :ref:`package-formats` for more "
"information."
msgstr ""
":term:`配布物 <Distribution Package>` フォーマットは、インストールするために"
"ターゲットとなるシステムの適切な位置に移動させることに必要となるファイルやメ"
"タデータだけを含んでいます。 :term:`Wheel` はそのようなフォーマットですが、イ"
"ンストールできるようになる前にビルド段階が必須となると言う点で :term:`ソース"
"コード配布物 <Source Distribution (または \"sdist\")>` はそうではありません。"
"このフォーマットであることは、 Python のファイル群があらかじめコンパイルされ"
"た状態でなければならないということを意味しません (:term:`Wheel` では意図的に"
"コンパイル済みの Python ファイル群を含まないようになっています)。より詳しく"
"は :ref:`package-formats` を見てください。"

#: ../source/glossary.rst:56
msgid "Built Metadata"
msgstr "ビルドされたメタデータ"

#: ../source/glossary.rst:59
msgid ""
"The concrete form :term:`Core Metadata` takes when included inside an "
"installed :term:`Project` (``METADATA`` file) or a :term:`Distribution "
"Archive` (``PKG-INFO`` in a :term:`Sdist <Source Distribution (or "
"\"sdist\")>` and ``METADATA`` in a :term:`Wheel`)."
msgstr ""
"インストールされた :term:`プロジェクト <Project>` (``METADATA`` ファイル) "
"や :term:`配布物アーカイブ <Distribution Archive>` (:term:`Sdist <Source "
"Distribution (または \"sdist\")>` の中の ``PKG-INFO`` や :term:`Wheel` 内の "
"``METADATA``) の内部に含まれる場合に :term:`コアとなるメタデータ <Core "
"Metadata>` が具体的な形式を取ることになります。"

#: ../source/glossary.rst:66
msgid "Core Metadata"
msgstr "コアとなるメタデータ"

#: ../source/glossary.rst:69
msgid ""
"The :ref:`specification <core-metadata>` and the set of :term:`Core Metadata "
"Field`\\s it defines that describe key static attributes of a :term:"
"`Distribution Package` or :term:`Installed Project`."
msgstr ""
":ref:`仕様 <core-metadata>` および :term:`コアとなるメタデータのフィールド "
"<Core Metadata Field`\\s において、 :term:`配布パッケージ <Distribution "
"Package>` あるいは :term:`インストール済みのプロジェクト <Installed "
"Project>` の鍵となる静的なアトリビュートを記述するものを定義しています。"

#: ../source/glossary.rst:74
msgid "Core Metadata Field"
msgstr "コアとなるメタデータのフィールド"

#: ../source/glossary.rst:77
msgid ""
"A single key-value pair (or sequence of such with the same name, for "
"multiple-use fields) defined in the :term:`Core Metadata` spec and stored in "
"the :term:`Built Metadata`. Notably, distinct from a :term:`Pyproject "
"Metadata Key`."
msgstr ""
":term:`コアとなるメタデータ <Core Metadata>` の仕様の中で定義され、 :term:`ビ"
"ルド済みのメタデータ <Built Metadata>` の中に保存される、単一のキー・バリュー"
"ペア (または、複数の使用方法のあるフィールドについては、一連の同名のキー・バ"
"リューペア)。特筆すべきことに、 :term:`Pyproject メタデータキー <Pyproject "
"Metadata Key>` とは区別される。"

#: ../source/glossary.rst:83
msgid "Distribution Archive"
msgstr "配布物アーカイブ"

#: ../source/glossary.rst:86
msgid ""
"The physical distribution artifact (i.e. a file on disk) for a :term:"
"`Distribution Package`."
msgstr ""
":term:`配布パッケージ <Distribution Package>` のための物理的な配布物のアー"
"ティファクト (即ち、ディスク上のファイル)。"

#: ../source/glossary.rst:89
msgid "Distribution Package"
msgstr "配布パッケージ"

#: ../source/glossary.rst:92
msgid ""
"A versioned archive file that contains Python :term:`packages <Import "
"Package>`, :term:`modules <Module>`, and other resource files that are used "
"to distribute a :term:`Release`. The archive file is what an end-user will "
"download from the internet and install."
msgstr ""
":term:`モジュール <Module>`すなわちPythonの :term:`パッケージ <Import "
"Package>`や、ある :term:`Release`を配布するために使われるその他のリソースファ"
"イルを内部に含むバージョン付きアーカイブファイル。アーカイブファイルはエンド"
"ユーザがインターネットからダウンロードしてインストールするものです。"

#: ../source/glossary.rst:97
msgid ""
"A distribution package is more commonly referred to with the single words "
"\"package\" or \"distribution\", but this guide may use the expanded term "
"when more clarity is needed to prevent confusion with an :term:`Import "
"Package` (which is also commonly called a \"package\") or another kind of "
"distribution (e.g. a Linux distribution or the Python language "
"distribution), which are often referred to with the single term "
"\"distribution\". See :ref:`distribution-package-vs-import-package` for a "
"breakdown of the differences."
msgstr ""
"配布パッケージは単語ひとつで「パッケージ」や「配布物」と呼ばれることもしばし"
"ばですが、本ガイドでは、 :term:`インポートパッケージ <Import Package>`(これも"
"通常は単に「パッケージ」と呼ばれます)や他の種類の配布物(例えばLinuxディストリ"
"ビューションやPython言語の配布物)でよく単語ひとつの「配布物」と呼ばれるものと"
"の混同を避けるために明確に述べる必要がある場合には、長い方の用語を用いること"
"があります。"

#: ../source/glossary.rst:105
msgid "Egg"
msgstr "卵"

#: ../source/glossary.rst:108
msgid ""
"A :term:`Built Distribution` format introduced by :ref:`setuptools`, which "
"has been replaced by :term:`Wheel`.  For details, see :ref:`egg-format`."
msgstr ""
":term:`Wheel` によって既に置き換えられていますが、 :term:`ビルド済配布物 "
"<Built Distribution>` フォーマットは、 :ref:`setuptools` によって導入されまし"
"た。詳細については、 :ref:`egg フォーマット <egg-format>` を見てください。"

#: ../source/glossary.rst:111
msgid "Extension Module"
msgstr "拡張モジュール"

#: ../source/glossary.rst:114
msgid ""
"A :term:`Module` written in the low-level language of the Python "
"implementation: C/C++ for Python, Java for Jython. Typically contained in a "
"single dynamically loadable pre-compiled file, e.g.  a shared object (.so) "
"file for Python extensions on Unix, a DLL (given the .pyd extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""
":term:`モジュール <Module>`とは、Pythonの実装のうちの低レベル言語で書かれた部"
"分で、C/C++で書かれたCythonやJavaで書かれたJythonが該当する。典型的には動的に"
"ロードできるコンパイル済みのファイルをひとつ含んでいて、Unix上では共有オブ"
"ジェクトファイル(.so)、Windows上ではDLL(拡張子.pydを与えられる)のPython拡張、"
"Jython拡張ではJavaのクラスファイルの形を取る。"

#: ../source/glossary.rst:121
msgid "Import Package"
msgstr "インポートパッケージ"

#: ../source/glossary.rst:124
msgid ""
"A Python module which can contain other modules or recursively, other "
"packages."
msgstr ""
"直接に、あるいは何段階になっても良いが、他のパッケージを組み込んで使うような"
"Pythonモジュール。"

#: ../source/glossary.rst:127
msgid ""
"An import package is more commonly referred to with the single word "
"\"package\", but this guide will use the expanded term when more clarity is "
"needed to prevent confusion with a :term:`Distribution Package` which is "
"also commonly called a \"package\". See :ref:`distribution-package-vs-import-"
"package` for a breakdown of the differences."
msgstr ""
"インポートパッケージは、より普通には「パッケージ」という１単語の用語で呼ばれ"
"ますが、本ガイドでは、同様に単に「パッケージ」と呼ばれることが普通である :"
"term:`配布物パッケージ <Distribution Package>`との混同を避けるために必要な場"
"合には、長い方の用語を用いることにします。"

#: ../source/glossary.rst:133
msgid "Installed Project"
msgstr "インストール済みのプロジェクト"

#: ../source/glossary.rst:136
msgid ""
"A :term:`Project` that is installed for use with a Python interpreter or :"
"term:`Virtual Environment`, as described in the specification :ref:"
"`recording-installed-packages`."
msgstr ""
":ref:`recording-installed-packages` の仕様の中に記述されている、Python イン"
"タープリタまたは :term:`仮想環境 <Virtual Environment>` と一緒に使用するため"
"にインストールされた :term:`プロジェクト <Project>` 。"

#: ../source/glossary.rst:140
msgid "Known Good Set (KGS)"
msgstr "既知の良好なセット"

#: ../source/glossary.rst:143
msgid ""
"A set of distributions at specified versions which are compatible with each "
"other. Typically a test suite will be run which passes all tests before a "
"specific set of packages is declared a known good set. This term is commonly "
"used by frameworks and toolkits which are comprised of multiple individual "
"distributions."
msgstr ""
"(KGSとは)相互に互換性のある特定のバージョンの配布物の集合。典型的には、テスト"
"スイートで全てのテストに合格して実行できるようなパッケージの特定の組み合わせ"
"が既知の良好なセット(KGS)であると宣言されます。この用語は、個々の配布物を複数"
"組み合わせて構成されるフレームワークやツールキットで共通して用いられます。"

#: ../source/glossary.rst:149
msgid "License Classifier"
msgstr "ライセンス分類詞 <License Classifier>"

#: ../source/glossary.rst:152
msgid ""
"A PyPI Trove classifier (as :ref:`described <core-metadata-classifier>` in "
"the :term:`Core Metadata` specification) which begins with ``License ::``."
msgstr ""
"ライセンス <License>::`` で始まる (:term:`コアとなるメタデータ <Core "
"Metadata>` 仕様の中で :ref:`記述されている <core-metadata-classifier>` とおり"
"の) `` PyPI の Trove classifier プロジェクト。"

#: ../source/glossary.rst:157 ../source/specifications/license-expression.rst:3
msgid "License Expression"
msgstr "ライセンス表現"

#: ../source/glossary.rst:158
msgid "SPDX Expression"
msgstr "SPDX 表現"

#: ../source/glossary.rst:161
msgid ""
"A string with valid SPDX license expression syntax, including one or more "
"SPDX :term:`License Identifier`\\(s), which describes a :term:`Project`'s "
"license(s) and how they inter-relate. Examples: ``GPL-3.0-or-later``, ``MIT "
"AND (Apache-2.0 OR BSD-2-Clause)``"
msgstr ""
"ひとつかそれ以上の SPDX :term:`ライセンス識別子 <License Identifier>` (複数の"
"場合もあり) を含む、正当な SPDX ライセンス表現の文法を伴う文字列で、 :term:`"
"プロジェクト <Project>` のライセンス(群) を記述し、どのように相互に関係するの"
"かを表現するもの。例: ``GPL-3.0-or-later`` ・ ``MIT AND (Apache-2.0 OR BSD-2-"
"Clause)``"

#: ../source/glossary.rst:169
msgid "License Identifier"
msgstr "ライセンス識別子"

#: ../source/glossary.rst:170
msgid "SPDX Identifier"
msgstr "SPDX 識別子"

#: ../source/glossary.rst:173
msgid ""
"A valid SPDX short-form license identifier, originally specified in :pep:"
"`639`. This includes all valid SPDX identifiers and the custom ``LicenseRef-"
"[idstring]`` strings conforming to the SPDX specification. Examples: "
"``MIT``, ``GPL-3.0-only``, ``LicenseRef-My-Custom-License``"
msgstr ""
"元々は :pep:`639` で仕様化された、正当な SPDX の短縮形式のライセンス識別子。"
"これには、すべての正当な SPDX 識別子と、 SPDX 仕様を満足するカスタムの "
"``LicenseRef-[idstring]`` 文字列が含まれます。例: ``MIT`` ・ ``GPL-3.0-"
"only`` ・ ``LicenseRef-My-Custom-License``"

#: ../source/glossary.rst:183
msgid "Module"
msgstr "モジュール"

#: ../source/glossary.rst:186
msgid ""
"The basic unit of code reusability in Python, existing in one of two types: :"
"term:`Pure Module`, or :term:`Extension Module`."
msgstr ""
"Pythonにおけるソースコード再利用の基本的な単位で、 :term:`Pure Module`か :"
"term:`Extension Module`の二つのタイプのうちのいずれか。"

#: ../source/glossary.rst:189
msgid "Package Index"
msgstr "パッケージインデックス"

#: ../source/glossary.rst:192
msgid ""
"A repository of distributions with a web interface to automate :term:"
"`package <Distribution Package>` discovery and consumption."
msgstr ""
":term:`パッケージ <Distribution Package>`の発見・消費(訳註、意訳になるが検"
"索・ダウンロードが適切か)を自動化するwebインターフェイスを伴った配布物のリポ"
"ジトリ。"

#: ../source/glossary.rst:195
msgid "Per Project Index"
msgstr "プロジェクト単位の索引"

#: ../source/glossary.rst:198
msgid ""
"A private or other non-canonical :term:`Package Index` indicated by a "
"specific :term:`Project` as the index preferred or required to resolve "
"dependencies of that project."
msgstr ""
"ある :term:`プロジェクト <Project>`が嗜好するか要求する依存関係を解決するため"
"に、:term:`プロジェクト <Project>`の単位で示された仲間内または非公式の :term:"
"`パッケージ索引 <Package Index>`。"

#: ../source/glossary.rst:202 ../source/guides/hosting-your-own-index.rst:62
#: ../source/guides/index-mirrors-and-caches.rst:52
msgid "Project"
msgstr "プロジェクト"

#: ../source/glossary.rst:205
msgid ""
"A library, framework, script, plugin, application, or collection of data or "
"other resources, or some combination thereof that is intended to be packaged "
"into a :term:`Distribution <Distribution Package>`."
msgstr ""
"ライブラリ、フレームワーク、スクリプト、プラグイン、アプリケーション、ないし"
"一連のデータもしくはその他のリソース、または、これらの組み合わせで :term:`配"
"布物 <Distribution Package>`として意図的にパッケージされたもの。"

#: ../source/glossary.rst:209
msgid ""
"Since most projects create :term:`Distributions <Distribution Package>` "
"using either :pep:`518` ``build-system``, :ref:`distutils` or :ref:"
"`setuptools`, another practical way to define projects currently is "
"something that contains a :term:`pyproject.toml`, :term:`setup.py`, or :term:"
"`setup.cfg` file at the root of the project source directory."
msgstr ""
"ほとんどのプロジェクトで :pep:`518` ``build-system``として :ref:`distutils`"
"か :ref:`setuptools`を用いて :term:`配布物 <Distribution Package>`を作成しま"
"すので、現時点でプロジェクトを定義するもうひとつの実践的な方法は、プロジェク"
"トのソースコードの一番上のディレクトリに :term:`pyproject.toml`や :term:"
"`setup.py`または :term:`setup.cfg`のファイルを含む何ものかというものです。"

#: ../source/glossary.rst:215
msgid ""
"Python projects must have unique names, which are registered on :term:`PyPI "
"<Python Package Index (PyPI)>`. Each project will then contain one or more :"
"term:`Releases <Release>`, and each release may comprise one or more :term:"
"`distributions <Distribution Package>`."
msgstr ""
"Pythonにおけるプロジェクトは、 :term:`PyPI <Python Package Index (PyPI)>`に登"
"録される一意の名前を持っていなければなりません。そして、プロジェクトはそれぞ"
"れひとつまたはより多くの :term:`リリース <Release>`を含んでいて、各リリースは"
"ひとつまたはより多くの :term:`配布物 <Distribution Package>`を内包していま"
"す。"

#: ../source/glossary.rst:220
msgid ""
"Note that there is a strong convention to name a project after the name of "
"the package that is imported to run that project. However, this doesn't have "
"to hold true. It's possible to install a distribution from the project 'foo' "
"and have it provide a package importable only as 'bar'."
msgstr ""
"そのプロジェクトを稼働させるためにインポートされるパッケージの名前に因んでプ"
"ロジェクトに名前をつけるのが普通であるという強い慣習があることを覚えておいて"
"ください。しかしながら、常にそうしなければならないわけではありません。「なん"
"とか」というプロジェクトから配布物をインストールしていながらも、「かんとか」"
"(訳註、「なんとか」とは無関係の別の名前の例)という名前でのみインポート可能な"
"パッケージを提供することは可能です。"

#: ../source/glossary.rst:226
msgid "Project Root Directory"
msgstr "プロジェクトのルートディレクトリ"

#: ../source/glossary.rst:229
msgid ""
"The filesystem directory in which a :term:`Project`'s :term:`source tree "
"<Project Source Tree>` is located."
msgstr ""
":term:`プロジェクト <Project>` の :term:`ソースコードツリー <Project Source "
"Tree>` が位置するファイルシステム上のディレクトリ。"

#: ../source/glossary.rst:232
msgid "Project Source Tree"
msgstr "プロジェクトソースコードツリー"

#: ../source/glossary.rst:235
msgid ""
"The on-disk format of a :term:`Project` used for development, containing its "
"raw source code before being packaged into a :term:`Source Distribution "
"<Source Distribution (or \"sdist\")>` or :term:`Built Distribution`."
msgstr ""
":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` や :term:`ビ"
"ルド済配布物 <Built Distribution>` にパッケージされる前の生のソースコードを含"
"んだ、開発に使われる :term:`プロジェクト <Project>` のディスク上でのフォー"
"マット。"

#: ../source/glossary.rst:241
msgid "Project Source Metadata"
msgstr "プロジェクトソースのメタデータ"

#: ../source/glossary.rst:244
msgid ""
"Metadata defined by the package author in a :term:`Project`'s :term:`source "
"tree <Project Source Tree>`, to be transformed into :term:`Core Metadata "
"field`\\s in the :term:`Built Metadata` by the project's :term:`build "
"backend <Build Backend>`. Can be written as :term:`Pyproject Metadata`, or "
"in a tool-specific format (under the ``[tool]`` table in ``pyproject.toml``, "
"or in a tool's own configuration file)."
msgstr ""
":term:`プロジェクト <Project>` の :term:`ソースコードツリー <Project Source "
"Tree>` 内でパッケージ作者が定義したメタデータで、プロジェクトの :term:`ビルド"
"バックエンド <Build Backend>` が :term:`ビルド済メタデータ <Built Metadata>` "
"内の :term:`コアとなるメタデータのフィールド <Core Metadata Field` へ変換する"
"もの。 :term:`Pyproject のメタデータ <Pyproject Metadata>` の形か、ツール特有"
"のフォーマット (``pyproject.toml`` 内の ``[tool]`` テーブル、または、ツール独"
"自の設定ファイル) で書くことができます。"

#: ../source/glossary.rst:254
msgid "Pure Module"
msgstr "純粋なモジュール"

#: ../source/glossary.rst:257
msgid ""
"A :term:`Module` written in Python and contained in a single ``.py`` file "
"(and possibly associated ``.pyc`` and/or ``.pyo`` files)."
msgstr ""
"Pythonで書かれていて単一の``.py``ファイル(とおそらくは対応する``.pyc``ファイ"
"ルや``.pyo``ファイル)に収められた :term:`モジュール <Module>`。"

#: ../source/glossary.rst:260
msgid "Pyproject Metadata"
msgstr "Pyproject のメタデータ"

#: ../source/glossary.rst:263
msgid ""
"The :term:`Project Source Metadata` format defined by the :ref:`declaring-"
"project-metadata` specification and originally introduced in :pep:`621`, "
"stored as :term:`Pyproject Metadata Key`\\s under the ``[project]`` table of "
"a :term:`pyproject.toml` file. Notably, *not* a tool-specific source "
"metadata format under the ``[tool]`` table in ``pyproject.toml``."
msgstr ""
"ref:`プロジェクトのメタデータを宣言する <declaring-project-metadata>` の仕様"
"で定義されており、 :pep:`621` で初めて登場した :term:`プロジェクトソースのメ"
"タデータ <Project Source Metadata>` のフォーマットで、 :term:`pyproject."
"toml` ファイルの ``[project]`` テーブルの下の :term:`プロジェクトソースのメタ"
"データ <Project Source Metadata>` として格納されるもの。 ``pyproject.toml`` "
"内の ``[tool]`` テーブルの下にあるツール特有のソースメタデータでは *ない* と"
"いうことに注意。"

#: ../source/glossary.rst:271
msgid "Pyproject Metadata Key"
msgstr "Pyproject のメタデータキー"

#: ../source/glossary.rst:274
msgid ""
"A top-level TOML key in the ``[project]`` table in ``pyproject.toml``; part "
"of the :term:`Pyproject Metadata`. Notably, distinct from a :term:`Core "
"Metadata Field`."
msgstr ""
"``pyproject.toml`` 内の ``[project]`` テーブルの中にあるトップレベルの TOML "
"キー; :term:`Pyproject のメタデータ <Pyproject Metadata>` の一部。 :term:`コ"
"アとなるメタデータのフィールド <Core Metadata Field` とは異なる点に注意。"

#: ../source/glossary.rst:278
msgid "Pyproject Metadata Subkey"
msgstr "Pyproject のメタデータサブキー"

#: ../source/glossary.rst:281
msgid ""
"A second-level TOML key under a table-valued :term:`Pyproject Metadata Key`."
msgstr ""
":term:`Pyproject メタデータのキー <Pyproject Metadata Key>` のテーブルの値の"
"下にある第２層の TOML キー。"

#: ../source/glossary.rst:284
msgid "Python Packaging Authority (PyPA)"
msgstr "Pythonパッケージングオーソリティ(PyPA)"

#: ../source/glossary.rst:287
msgid ""
"PyPA is a working group that maintains many of the relevant projects in "
"Python packaging. They maintain a site at :doc:`pypa.io <pypa:index>`, host "
"projects on `GitHub <https://github.com/pypa>`_ and `Bitbucket <https://"
"bitbucket.org/pypa>`_, and discuss issues on the `distutils-sig mailing list "
"<https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ and "
"`the Python Discourse forum <https://discuss.python.org/c/packaging>`__."
msgstr ""
"PyPAは、Pythonのパッケージングに関係する多くのプロジェクトを維持管理する作業"
"グループです。その活動の一環として :doc:`papa.io <pypa:index>` を維持管理して"
"おり、 `GitHub <https://github.com/pypa>`_ と `Bitbucket <https://bitbucket."
"org/pypa>`_ に関連プロジェクトを置くとともに、 `distutils-sig メーリングリス"
"ト <https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ と "
"`Python談話フォーラム <https://discuss.python.org/c/packaging>`__ で議論を進"
"めています。"

#: ../source/glossary.rst:296
msgid "Python Package Index (PyPI)"
msgstr "Pythonパッケージインデックス (PyPI)"

#: ../source/glossary.rst:299
msgid ""
"`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the "
"Python community. It is open to all Python developers to consume and "
"distribute their distributions."
msgstr ""
"`PyPI <https://pypi.org>`_ は、Pythonコミュニティにとってデフォルトの :term:"
"`Package Index`です。ここから配布物を取り出し、また、配布するためにすべての"
"Python開発者に開かれています。"

#: ../source/glossary.rst:302
msgid "pypi.org"
msgstr "pypi.org"

#: ../source/glossary.rst:305
msgid ""
"`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python "
"Package Index (PyPI)`. It replaced the legacy index domain name, ``pypi."
"python.org``, in 2017. It is powered by :ref:`warehouse`."
msgstr ""
"`pypi.org <https://pypi.org>`_ は、 :term:`Python パッケージインデックス"
"(PyPI)` のためのドメイン名です。2017年にそれまでのドメイン名である ``pypi."
"python.org`` を置き換えました。 :ref:`warehouse`を使っています。"

#: ../source/glossary.rst:309
msgid "pyproject.toml"
msgstr "pyproject.toml"

#: ../source/glossary.rst:312
msgid ""
"The tool-agnostic :term:`Project` specification file. Defined in :pep:`518`."
msgstr ""
"ツール不可知論者の :term:`プロジェクト <Project>` 仕様を示すファイル。 :pep:"
"`518` で定義。"

#: ../source/glossary.rst:314
msgid "Release"
msgstr "リリース"

#: ../source/glossary.rst:317
msgid ""
"A snapshot of a :term:`Project` at a particular point in time, denoted by a "
"version identifier."
msgstr ""
"ある特定の時点における :term:`プロジェクト <Project>`のスナップショットで、"
"バージョン識別子付きのもの。"

#: ../source/glossary.rst:320
msgid ""
"Making a release may entail the publishing of multiple :term:`Distributions "
"<Distribution Package>`.  For example, if version 1.0 of a project was "
"released, it could be available in both a source distribution format and a "
"Windows installer distribution format."
msgstr ""
"リリースを作成することは、複数の :term:`配布物 <Distribution Package>` を公開"
"することを伴います。例えば、あるプロジェクトのバージョン1.0がリリースされたな"
"らば、ソースコード配布物とWindowsインストーラ付配布物の両方が利用可能となって"
"いるという具合です。"

#: ../source/glossary.rst:325
msgid "Requirement"
msgstr "要求事項"

#: ../source/glossary.rst:328
msgid ""
"A specification for a :term:`package <Distribution Package>` to be "
"installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` "
"recommended installer, allows various forms of specification that can all be "
"considered a \"requirement\". For more information, see the :ref:`pip:pip "
"install` reference."
msgstr ""
"インストールされる :term:`パッケージ <Distribution Package>` の仕様。 :term:"
"`PYPA <Python Packaging Authority (PyPA)>` が推奨するインストーラである :ref:"
"`pip` では、「要求事項」とも解釈できる仕様を様々な様式で書くことを許容してい"
"ます。詳細については、 :ref:`pip:pip install` の項を参照してください。"

#: ../source/glossary.rst:334
msgid "Requirement Specifier"
msgstr "要求事項識別子"

#: ../source/glossary.rst:337
msgid ""
"A format used by :ref:`pip` to install packages from a :term:`Package "
"Index`. For an EBNF diagram of the format, see :ref:`dependency-specifiers`. "
"For example, \"foo>=1.3\" is a requirement specifier, where \"foo\" is the "
"project name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""
":term:`パッケージインデックス <Package Index>`からパッケージをインストールす"
"るために :ref:`pip` で用いられる様式。この様式の EBNF 文法構造については、 :"
"ref:`依存関係指定子 <dependency-specifiers>` を見てください。例えば、 "
"\"foo>=1.3\" は要求事項識別子であり、 \"foo\" の部分がプロジェクトの名称で、 "
"\">=1.3\" の部分は :term:`バージョン指定子 <Version Specifier>` です"

#: ../source/glossary.rst:342
msgid "Requirements File"
msgstr "Requirementsファイル"

#: ../source/glossary.rst:345
msgid ""
"A file containing a list of :term:`Requirements <Requirement>` that can be "
"installed using :ref:`pip`. For more information, see the :ref:`pip` docs "
"on :ref:`pip:Requirements Files`."
msgstr ""
":ref:`pip`を用いてインストールできるように :term:`要求事項 <Requirement>` を"
"記したファイル。詳しい情報は、 :ref:`pip` のドキュメントの :ref:`pip:"
"Requirementsファイル <pip:Requirements Files>` をみてください。"

#: ../source/glossary.rst:349
msgid "Root License Directory"
msgstr "ライセンスディレクトリのルート"

#: ../source/glossary.rst:350
msgid "License Directory"
msgstr "ライセンスディレクトリ"

#: ../source/glossary.rst:353
msgid ""
"The directory under which license files are stored in a :term:`Project "
"Source Tree`, :term:`Distribution Archive` or :term:`Installed Project`. For "
"a :term:`Project Source Tree` or :term:`Source Distribution (or \"sdist\")`, "
"this is the :term:`Project Root Directory`. For a :term:`Built Distribution` "
"or :term:`Installed Project`, this is the :file:`.dist-info/licenses/` "
"directory of the wheel archive or project folder respectively. Also, the "
"root directory that paths recorded in the ``License-File`` :term:`Core "
"Metadata Field` are relative to."
msgstr ""
":term:`プロジェクトソースツリー <その下にライセンスファイル群を保存するディレ"
"クトリ"

#: ../source/glossary.rst:366
#: ../source/guides/distributing-packages-using-setuptools.rst:59
msgid "setup.py"
msgstr "setup.py"

#: ../source/glossary.rst:367
#: ../source/guides/distributing-packages-using-setuptools.rst:80
msgid "setup.cfg"
msgstr "setup.cfg"

#: ../source/glossary.rst:370
msgid ""
"The project specification files for :ref:`distutils` and :ref:`setuptools`. "
"See also :term:`pyproject.toml`."
msgstr ""
":ref:`distutils`や :ref:`setuptools` で使われるプロジェクトの仕様を記したファ"
"イル。 :term:`pyproject.toml`も見てください。"

#: ../source/glossary.rst:373
msgid "Source Archive"
msgstr "ソースコードアーカイブ"

#: ../source/glossary.rst:376
msgid ""
"An archive containing the raw source code for a :term:`Release`, prior to "
"creation of a :term:`Source Distribution <Source Distribution (or "
"\"sdist\")>` or :term:`Built Distribution`."
msgstr ""
":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` や :term:`ビ"
"ルド配布物 <Built Distribution>` という用語を作る前には、:term:`リリース "
"<Release>`向けに生のソースコードを収めたアーカイブのことをこう呼んでいた。"

#: ../source/glossary.rst:380
msgid "Source Distribution (or \"sdist\")"
msgstr ""
"`ソースコード配布物 (またはsdist) <Source Distribution (or \"sdist\")>`"

#: ../source/glossary.rst:383
msgid ""
"A :term:`distribution <Distribution Archive>` format (usually generated "
"using ``python -m build --sdist``) that provides metadata and the essential "
"source files needed for installing by a tool like :ref:`pip`, or for "
"generating a :term:`Built Distribution`. See :ref:`package-formats` for more "
"information."
msgstr ""
":ref:`pip` のようなツールによるインストールや :term:`ビルド済配布物 <Built "
"Distribution>` の生成のために必要となるメタデータや必須のソースファイルを提供"
"する :term:`配布物 アーカイブ <Distribution Archive>` フォーマット (通常は "
"``python -m build --sdist`` を使って生成されます) 。もっと情報が欲しけれ"
"ば、 :ref:`パッケージフォーマット <package-formats>` を見てください。"

#: ../source/glossary.rst:389
msgid "System Package"
msgstr "システムパッケージ"

#: ../source/glossary.rst:392
msgid ""
"A package provided in a format native to the operating system, e.g. an rpm "
"or dpkg file."
msgstr ""
"rpmやdpkgのように、オペレーティングシステムに固有のフォーマットで提供される"
"パッケージ。"

#: ../source/glossary.rst:395
msgid "Version Specifier"
msgstr "バージョン指定子"

#: ../source/glossary.rst:398
msgid ""
"The version component of a :term:`Requirement Specifier`. For example, the "
"\">=1.3\" portion of \"foo>=1.3\".  Read the :ref:`Version specifier "
"specification <version-specifiers>` for a full description of the specifiers "
"that Python packaging currently supports.  Support for this specification "
"was implemented in :ref:`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""
":term:`要求事項指定子 <Requirement Specifier>` のバージョン部分。例え"
"ば、\"foo>=1.3\" の中の \">=1.3\" の部分。Python のパッケージングで現在サポー"
"トされている識別子の完全な記述については、 :ref:`バージョン指定子の仕様 "
"<version-specifiers>` を読んでください。この仕様のサポートは、 :ref:"
"`setuptools` v8.0 と :ref:`pip` v6.0 で実装されました。"

#: ../source/glossary.rst:403
msgid "Virtual Environment"
msgstr "仮想環境"

#: ../source/glossary.rst:406
msgid ""
"An isolated Python environment that allows packages to be installed for use "
"by a particular application, rather than being installed system wide. For "
"more information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"システム全体からではなく、ある特定のアプリケーションだけから使えるようにパッ"
"ケージをインストールすることができる、隔離されたPython環境。詳細は :ref:`仮想"
"環境の生成と使用 <Creating and using Virtual Environments`を参照してくださ"
"い。"

#: ../source/glossary.rst:411
msgid "Wheel Format"
msgstr "Wheel フォーマット"

#: ../source/glossary.rst:412
msgid "Wheel"
msgstr "Wheel"

#: ../source/glossary.rst:415
msgid ""
"The standard :term:`Built Distribution` format originally introduced in :pep:"
"`427` and defined by the :ref:`binary-distribution-format` specification. "
"See :ref:`package-formats` for more information. Not to be confused with its "
"reference implementation, the :term:`Wheel Project`."
msgstr ""
"標準的な :term:`ビルド済配布物 <Built Distribution>` フォーマットで、当初は :"
"pep:`427` で導入され、 :ref:`バイナリ配布物のフォーマット <binary-"
"distribution-format>` 仕様で定義されたもの。詳しくは :ref:`パッケージフォー"
"マット <package-formats>` を見てください。参照実装である :term:`Wheel プロ"
"ジェクト <Wheel Project>` と混同しないように。"

#: ../source/glossary.rst:422
msgid "Wheel Project"
msgstr "Wheel プロジェクト"

#: ../source/glossary.rst:425
msgid ""
"The PyPA reference implementation of the :term:`Wheel Format`; see :ref:"
"`wheel`."
msgstr ""
":term:`Wheel フォーマット <Wheel Format>` の PyPA による参照実装; :ref:"
"`wheel` 参照。"

#: ../source/glossary.rst:427
msgid "Working Set"
msgstr "動作可能セット"

#: ../source/glossary.rst:430
msgid ""
"A collection of :term:`distributions <Distribution Package>` available for "
"importing. These are the distributions that are on the `sys.path` variable. "
"At most, one :term:`Distribution <Distribution Package>` for a project is "
"possible in a working set."
msgstr ""
"一連のインポート可能な :term:`配布物 <Distribution Package>`。これらは `sys."
"path` 変数から検索できる配布物です。あるプロジェクトには、高々(訳註、at most"
"ではなくat least、すくなくとも、か。)ひとつの :term:`配布物 <Distribution "
"Package>` が動作可能セットにあります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:5
msgid "Analyzing PyPI package downloads"
msgstr "PyPIパッケージのダウンロード状況の解析"

#: ../source/guides/analyzing-pypi-package-downloads.rst:7
msgid ""
"This section covers how to use the public PyPI download statistics dataset "
"to learn more about downloads of a package (or packages) hosted on PyPI. For "
"example, you can use it to discover the distribution of Python versions used "
"to download a package."
msgstr ""
"この節では、公開のPyPIダウンロードデータセットを用いて、PyPIにホストされてい"
"るパッケージ(あるいはパッケージ群)のダウンロード状況を詳しく見ていくことを記"
"述しています。例えば、ダウンロードに使われたPythonのバージョンの分布を発見す"
"ることができます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:14
#: ../source/guides/supporting-windows-using-appveyor.rst:17
msgid "Background"
msgstr "背景"

#: ../source/guides/analyzing-pypi-package-downloads.rst:16
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr "PyPIはいくつもの理由からダウンロード統計を表示しません。:[#]_"

#: ../source/guides/analyzing-pypi-package-downloads.rst:18
msgid ""
"**Inefficient to make work with a Content Distribution Network (CDN):** "
"Download statistics change constantly. Including them in project pages, "
"which are heavily cached, would require invalidating the cache more often, "
"and reduce the overall effectiveness of the cache."
msgstr ""
"**コンテンツデリバリネットワーク(CDN)と一緒に動かす時の効率の悪さ** ダウン"
"ロード用系は常に変動します。プロジェクトのページでのダウンロードは強烈に"
"キャッシュされていますが、(訳註、統計を正しく取ろうとするなら)より頻繁に"
"キャッシュし直さなければならず、これはキャッシュの効率性を損ねます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:23
msgid ""
"**Highly inaccurate:** A number of things prevent the download counts from "
"being accurate, some of which include:"
msgstr ""
"**非常に不正確** 次に挙げるものを含め、いくつもの要因でダウンロード数が正確と"
"は言えないものになります："

#: ../source/guides/analyzing-pypi-package-downloads.rst:26
msgid "``pip``'s download cache (lowers download counts)"
msgstr "``pip``のダウンロードキャッシュ (ダウンロード数を小さくする)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:27
msgid ""
"Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""
"内部の、または、非公式のミラーサイト (ダウンロード数を大きくする要因にも小さ"
"くする要因にもなる)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:28
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr "PyPIにホストされていないパッケージ (比較することの妥当性を損ねる)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:29
msgid ""
"Unofficial scripts or attempts at download count inflation (raises download "
"counts)"
msgstr ""
"ダウンロード数を増やす非公式のスクリプトまたは試行 (ダウンロード数を大きくす"
"る)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:31
msgid "Known historical data quality issues (lowers download counts)"
msgstr "過去のデータ品質における既知の問題 (ダウンロード数を小さくする)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:33
msgid ""
"**Not particularly useful:** Just because a project has been downloaded a "
"lot doesn't mean it's good; Similarly just because a project hasn't been "
"downloaded a lot doesn't mean it's bad!"
msgstr ""
"**とりわけ利用価値があるというわけではない** プロジェクト(の配布物、訳註。)が"
"たくさんダウンロードされたからといってそれだけで良いことだと決まったわけでは"
"ありませんし、あまりダウンロードされなかったとしてもそれだけで悪いことだと決"
"めつけることもできません！"

#: ../source/guides/analyzing-pypi-package-downloads.rst:37
msgid ""
"In short, because its value is low for various reasons, and the tradeoffs "
"required to make it work are high, it has been not an effective use of "
"limited resources."
msgstr ""
"まとめると、様々な理由からその価値が低い上、動作させるために犠牲になるものが"
"多いので、限られた資源の効率的な利用にはならないのです。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:42
msgid "Public dataset"
msgstr "公開データセット"

#: ../source/guides/analyzing-pypi-package-downloads.rst:44
msgid ""
"As an alternative, the `Linehaul project <https://github.com/pypa/linehaul-"
"cloud-function/>`__ streams download logs from PyPI to `Google BigQuery`_ "
"[#]_, where they are stored as a public dataset."
msgstr ""
"別の方法としては、 `Linehaulプロジェクト <https://github.com/pypa/linehaul-"
"cloud-function/>`__ がダウンロードのログをPyPIから `Google BigQuery`_ [#]_ へ"
"連続的に取り出して、公開のデータセットとして保管しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:49
msgid "Getting set up"
msgstr "セットアップのやり方"

#: ../source/guides/analyzing-pypi-package-downloads.rst:51
msgid ""
"In order to use `Google BigQuery`_ to query the `public PyPI download "
"statistics dataset`_, you'll need a Google account and to enable the "
"BigQuery API on a Google Cloud Platform project. You can run up to 1TB of "
"queries per month `using the BigQuery free tier without a credit card "
"<https://cloud.google.com/blog/products/data-analytics/query-without-a-"
"credit-card-introducing-bigquery-sandbox>`__"
msgstr ""
"`Google BigQuery`_ を使って `PyPIダウンロード統計の公開データセット <public "
"PyPI download statistics dataset>`_ に問い合わせを行うためには、まずGoogleア"
"カウントが必要で、Google Cloud Platform (GCP)でBigQuery APIを有効にしておく必"
"要があります。`クレジットカード登録なしのBigQuery 無料枠 <https://cloud."
"google.com/blog/products/data-analytics/query-without-a-credit-card-"
"introducing-bigquery-sandobox>`__ を使うと一ヶ月当たり1TBまでのクエリを走らせ"
"ることができます"

#: ../source/guides/analyzing-pypi-package-downloads.rst:57
msgid "Navigate to the `BigQuery web UI`_."
msgstr "`BigQuery ウェブ UI <BigQuery web UI>`_ への道案内。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:58
msgid "Create a new project."
msgstr "新しいプロジェクトを作成する。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:59
msgid ""
"Enable the `BigQuery API <https://console.developers.google.com/apis/library/"
"bigquery-json.googleapis.com>`__."
msgstr ""
"`BigQuery API <https://console.developers.google.com/apis/library/bigquery-"
"json.googleapis.com>`__ を有効にする。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:62
msgid ""
"For more detailed instructions on how to get started with BigQuery, check "
"out the `BigQuery quickstart guide <https://cloud.google.com/bigquery/docs/"
"quickstarts/quickstart-web-ui>`__."
msgstr ""
"BigQueryの始め方についてさらに詳しい指南が欲しい場合は、`Cloud Console を使用"
"したクイックスタート <https://cloud.google.com/bigquery/docs/quickstarts/"
"quickstart-web-ui>`__ を参照してください。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:68
msgid "Data schema"
msgstr "データ構造"

#: ../source/guides/analyzing-pypi-package-downloads.rst:70
msgid ""
"Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` "
"table for each download. The table contains information about what file was "
"downloaded and how it was downloaded. Some useful columns from the `table "
"schema <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-"
"data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""
"それぞれのダウンロードの情報を格納した ``bigquery-public-data.pypi."
"file_downloads``テーブルについての説明をLinehaulが書きました。このテーブル"
"は、どのファイルがどのようにダウンロードされたかに関する情報を格納していま"
"す。`テーブル構造 <https://console.cloud.google.com/bigquery?"
"pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__ から役に"
"立つカラムをいくつか挙げると："

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
msgid "Column"
msgstr "カラム"

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
#: ../source/specifications/core-metadata.rst:196
#: ../source/specifications/well-known-project-urls.rst:106
msgid "Description"
msgstr "説明"

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
#: ../source/specifications/dependency-groups.rst:23
#: ../source/specifications/dependency-specifiers.rst:29
#: ../source/specifications/direct-url-data-structure.rst:242
#: ../source/specifications/version-specifiers.rst:1072
msgid "Examples"
msgstr "例"

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "timestamp"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "Date and time"
msgstr "日付と時刻"

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "file.project"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "Project name"
msgstr "プロジェクト名"

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "``pipenv``, ``nose``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "file.version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "Package version"
msgstr "パッケージのバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "``0.1.6``, ``1.4.2``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "details.installer.name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "Installer"
msgstr "インストーラ"

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "pip, :ref:`bandersnatch`"
msgstr "pip、 :ref:`bandersnatch`"

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "details.python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "Python version"
msgstr "Pythonバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:92
msgid "Useful queries"
msgstr "役に立つクエリ"

#: ../source/guides/analyzing-pypi-package-downloads.rst:94
msgid ""
"Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" "
"button."
msgstr ""
"「クエリを新規作成」ボタンをクリックすることで `BigQuery web UI`_ 内でクエリ"
"を走らせましょう。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:96
msgid ""
"Note that the rows are stored in a partitioned table, which helps limit the "
"cost of queries. These example queries analyze downloads from recent history "
"by filtering on the ``timestamp`` column."
msgstr ""
"クエリのコストを削減するためにデータベースの行がパーティションされた状態で格"
"納されていることを覚えておいてください。これらの例では、``timestamp`` カラム"
"を使って絞り込むことで最近のダウンロード履歴を分析しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:101
msgid "Counting package downloads"
msgstr "パッケージのダウンロードを数える"

#: ../source/guides/analyzing-pypi-package-downloads.rst:103
msgid ""
"The following query counts the total number of downloads for the project "
"\"pytest\"."
msgstr "次のクエリは\"pytest\"プロジェクトのダウンロード総数を数えています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:118
#: ../source/guides/analyzing-pypi-package-downloads.rst:139
#: ../source/guides/analyzing-pypi-package-downloads.rst:167
#: ../source/guides/analyzing-pypi-package-downloads.rst:204
msgid "num_downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:120
msgid "26190085"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:123
msgid ""
"To count downloads from pip only, filter on the ``details.installer.name`` "
"column."
msgstr ""
"pipを通じてダウンロードされた数だけを数えるには、``details.installer.name``カ"
"ラムを使って抽出してください。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:141
msgid "24334215"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:145
msgid "Package downloads over time"
msgstr "時系列のパッケージダウンロード数"

#: ../source/guides/analyzing-pypi-package-downloads.rst:147
msgid ""
"To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also "
"filtering by this column reduces corresponding costs."
msgstr ""
"月毎のダウンロード数を数えるには、``TIMESTAMP_TRUNC``関数を使います。このカラ"
"ムを使って抽出することは、通信量を抑えることにもなります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:167
msgid "month"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:169
msgid "1956741"
msgstr "1956741"

#: ../source/guides/analyzing-pypi-package-downloads.rst:169
msgid "2018-01-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:171
msgid "2344692"
msgstr "2344692"

#: ../source/guides/analyzing-pypi-package-downloads.rst:171
msgid "2017-12-01"
msgstr "2017-12-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:173
msgid "1730398"
msgstr "1730398"

#: ../source/guides/analyzing-pypi-package-downloads.rst:173
msgid "2017-11-01"
msgstr "2017-11-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:175
msgid "2047310"
msgstr "2047310"

#: ../source/guides/analyzing-pypi-package-downloads.rst:175
msgid "2017-10-01"
msgstr "2017-10-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:177
msgid "1744443"
msgstr "1744443"

#: ../source/guides/analyzing-pypi-package-downloads.rst:177
msgid "2017-09-01"
msgstr "2017-09-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:179
msgid "1916952"
msgstr "1916952"

#: ../source/guides/analyzing-pypi-package-downloads.rst:179
msgid "2017-08-01"
msgstr "2017-08-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:183
msgid "Python versions over time"
msgstr "時系列で見たPythonバージョン"

#: ../source/guides/analyzing-pypi-package-downloads.rst:185
msgid ""
"Extract the Python version from the ``details.python`` column. Warning: This "
"query processes over 500 GB of data."
msgstr ""
"``details.python``カラムからPythonのバージョンを取り出します。警告：このクエ"
"リは500GB以上のデータを処理します。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:204
msgid "python"
msgstr "python"

#: ../source/guides/analyzing-pypi-package-downloads.rst:206
msgid "3.7"
msgstr "3.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:206
msgid "18051328726"
msgstr "18051328726"

#: ../source/guides/analyzing-pypi-package-downloads.rst:208
msgid "3.6"
msgstr "3.6"

#: ../source/guides/analyzing-pypi-package-downloads.rst:208
msgid "9635067203"
msgstr "9635067203"

#: ../source/guides/analyzing-pypi-package-downloads.rst:210
msgid "3.8"
msgstr "3.8"

#: ../source/guides/analyzing-pypi-package-downloads.rst:210
msgid "7781904681"
msgstr "7781904681"

#: ../source/guides/analyzing-pypi-package-downloads.rst:212
msgid "2.7"
msgstr "2.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:212
msgid "6381252241"
msgstr "6381252241"

#: ../source/guides/analyzing-pypi-package-downloads.rst:214
msgid "null"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:214
msgid "2026630299"
msgstr "2026630299"

#: ../source/guides/analyzing-pypi-package-downloads.rst:216
msgid "3.5"
msgstr "3.5"

#: ../source/guides/analyzing-pypi-package-downloads.rst:216
msgid "1894153540"
msgstr "1894153540"

#: ../source/guides/analyzing-pypi-package-downloads.rst:221
msgid "Getting absolute links to artifacts"
msgstr "アーティファクトへの完全なリンクを得る"

#: ../source/guides/analyzing-pypi-package-downloads.rst:223
msgid ""
"It's sometimes helpful to be able to get the absolute links to download "
"artifacts from PyPI based on their hashes, e.g. if a particular project or "
"release has been deleted from PyPI. The metadata table includes the ``path`` "
"column, which includes the hash and artifact filename."
msgstr ""
"例えばあるプロジェクトやリリースが PyPI から削除されてしまったような場合に、"
"ハッシュ値に基づいて PyPI からアーティファクト(訳注、そのようなプロジェクトや"
"リリース)をダウンロードすることができる完全なリンクがあれば便利な時もあるで"
"しょう。メタデータテーブルには ``path`` 列があって、ハッシュ値とアーティファ"
"クトのファイル名を保持しています。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:229
msgid ""
"The URL generated here is not guaranteed to be stable, but currently aligns "
"with the URL where PyPI artifacts are hosted."
msgstr ""
"ここで生成された URL はいつまでも存在するとは限りませんが、しかし、その時点"
"で PyPI のアーティファクトがどこに保存されているかを示す URL を含んでいます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:242
msgid "url"
msgstr "url"

#: ../source/guides/analyzing-pypi-package-downloads.rst:244
msgid ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:246
msgid ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:248
msgid ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:250
msgid ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:252
msgid ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:257
msgid "Caveats"
msgstr "注意書き"

#: ../source/guides/analyzing-pypi-package-downloads.rst:259
msgid ""
"In addition to the caveats listed in the background above, Linehaul suffered "
"from a bug which caused it to significantly under-report download statistics "
"prior to July 26, 2018. Downloads before this date are proportionally "
"accurate (e.g. the percentage of Python 2 vs. Python 3 downloads) but total "
"numbers are lower than actual by an order of magnitude."
msgstr ""
"上記の背景に列挙した注意書きに加えて、Linehaulは、極端に過小報告されていたダ"
"ウンロード統計の原因となったバグに2018年7月26日まで悩まされていました。この日"
"より前のダウンロード数については、比率の点(例えばPython2とPython3の百分率)で"
"は正確ですが、絶対数の点では桁が異なるほどに過小です。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:267
msgid "Additional tools"
msgstr "その他のツール"

#: ../source/guides/analyzing-pypi-package-downloads.rst:269
msgid ""
"Besides using the BigQuery console, there are some additional tools which "
"may be useful when analyzing download statistics."
msgstr ""
"BigQueryコンソールを用いる他に、ダウンロード統計を分析する際に役に立つと思わ"
"れるツールがいくつかあります。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:273
msgid "``google-cloud-bigquery``"
msgstr "``google-cloud-bigquery``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:275
msgid ""
"You can also access the public PyPI download statistics dataset "
"programmatically via the BigQuery API and the `google-cloud-bigquery`_ "
"project, the official Python client library for BigQuery."
msgstr ""
"BigQuery APIとBigQuery用の公式Pythonクライアントである `google-cloud-"
"bigquery`_ プロジェクトを使って、プログラムからPyPIの公開ダウンロード統計デー"
"タセットにアクセスすることもできます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:303
msgid "``pypinfo``"
msgstr "``pypinfo``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:305
msgid ""
"`pypinfo`_ is a command-line tool which provides access to the dataset and "
"can generate several useful queries. For example, you can query the total "
"number of download for a package with the command ``pypinfo package_name``."
msgstr ""
"`pypinfo`_ はデータセットにアクセスして、役に立つクエリをいくつか生成する機能"
"を提供するコマンドラインツールです。例えば、``pypinfo package_name``を実行す"
"れば、そのパッケージのダウンロード総数を問い合わせることができます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:309
msgid "Install `pypinfo`_ using pip."
msgstr "pipを用いて `pypinfo`_ をインストール。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:315
msgid "Usage:"
msgstr "使い方："

#: ../source/guides/analyzing-pypi-package-downloads.rst:331
msgid "``pandas-gbq``"
msgstr "``pandas-gbq``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:333
msgid ""
"The `pandas-gbq`_ project allows for accessing query results via `Pandas`_."
msgstr ""
"`pandas-bbq`_ プロジェクトを使えば `Pandas`_ 経由でクエリ結果を参照することが"
"できます。"

#: ../source/guides/analyzing-pypi-package-downloads.rst:337
#: ../source/specifications/dependency-specifiers.rst:535
msgid "References"
msgstr "参考文献"

#: ../source/guides/analyzing-pypi-package-downloads.rst:339
msgid ""
"`PyPI Download Counts deprecation email <https://mail.python.org/pipermail/"
"distutils-sig/2013-May/020855.html>`__"
msgstr ""
"`PyPI ダウンロード統計を非推奨とするメール (PyPI Download Counts deprecation "
"email) <https://mail.python.org/pipermail/distutils-sig/2013-May/020855."
"html>`__"

#: ../source/guides/analyzing-pypi-package-downloads.rst:340
msgid ""
"`PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/"
"distutils-sig/2016-May/028986.html>`__"
msgstr ""
"`PyPI BigQueryデータセットをアナウンスするメール (PyPI BigQuery dataset "
"announcement email) <https://mail.python.org/pipermail/distutils-sig/2016-"
"May/028986.html>`__"

#: ../source/guides/creating-and-discovering-plugins.rst:3
msgid "Creating and discovering plugins"
msgstr "プラグイン作成と発見"

#: ../source/guides/creating-and-discovering-plugins.rst:5
msgid ""
"Often when creating a Python application or library you'll want the ability "
"to provide customizations or extra features via **plugins**. Because Python "
"packages can be separately distributed, your application or library may want "
"to automatically **discover** all of the plugins available."
msgstr ""
"Pythonのアプリケーションまたはライブラリを作成する時には、カスタマイズができ"
"るようにしたり **プラグイン** を通じて機能を追加できるようにしたりすることが"
"しばしばあります。Pythonのパッケージは別々に配布できますので、あなたのアプリ"
"ケーションまたはライブラリが利用可能なすべてのプラグインを自動的に **探し出す"
"** ようにしたくなるかもしれません。"

#: ../source/guides/creating-and-discovering-plugins.rst:10
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr "プラグインの自動検出には大きく分けて３個の実現方法があります。"

#: ../source/guides/creating-and-discovering-plugins.rst:12
msgid "`Using naming convention`_."
msgstr "`命名規則を用いるやり方 <Using naming convention>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:13
msgid "`Using namespace packages`_."
msgstr "`namespaceパッケージを用いるやり方 <Using namespace packages>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:14
msgid "`Using package metadata`_."
msgstr "`パッケージのメタデータを用いるやり方 <Using package metadata>`_ 。"

#: ../source/guides/creating-and-discovering-plugins.rst:18
msgid "Using naming convention"
msgstr "命名規則を用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:20
msgid ""
"If all of the plugins for your application follow the same naming "
"convention, you can use :func:`pkgutil.iter_modules` to discover all of the "
"top-level modules that match the naming convention. For example, `Flask`_ "
"uses the naming convention ``flask_{plugin_name}``. If you wanted to "
"automatically discover all of the Flask plugins installed:"
msgstr ""
"あなたのアプリケーション用のすべてのプラグインが命名規則に従うのであれば、 :"
"func:`pkgutil.iter_modules` を用いて命名規則に合致するトップレベルのすべての"
"モジュールを発見することができます。例えば、 `Flask`_ は命名規則として "
"``flask_{plugin_name}`` を使います。もし、すべてのインストール済みFlask用プラ"
"グインを発見したいのであれば："

#: ../source/guides/creating-and-discovering-plugins.rst:38
msgid ""
"If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins "
"installed then ``discovered_plugins`` would be:"
msgstr ""
"もしあなたが `Flask-SQLAlchemy`_ と `Flask-Talisman`_ のふたつのプラグインを"
"インストールしてあるなら、 ``discovered_plugins`` は次のようになるでしょう："

#: ../source/guides/creating-and-discovering-plugins.rst:48
msgid ""
"Using naming convention for plugins also allows you to query the Python "
"Package Index's :ref:`simple repository API <simple-repository-api>` for all "
"packages that conform to your naming convention."
msgstr ""
"プラグインの命名規則を用いることで、あなたの命名規則に従うすべてのパッケージ"
"についてPython パッケージインデックスの :ref:`simple repository API <simple-"
"repository-api>` から検索することもできるようになります。"

#: ../source/guides/creating-and-discovering-plugins.rst:58
msgid "Using namespace packages"
msgstr "namespaceパッケージを用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:60
msgid ""
":doc:`Namespace packages <packaging-namespace-packages>` can be used to "
"provide a convention for where to place plugins and also provides a way to "
"perform discovery. For example, if you make the sub-package ``myapp."
"plugins`` a namespace package then other :term:`distributions <Distribution "
"Package>` can provide modules and packages to that namespace. Once "
"installed, you can use :func:`pkgutil.iter_modules` to discover all modules "
"and packages installed under that namespace:"
msgstr ""
":doc:`Namespace パッケージ <packaging-namespace-packages>` を使えば、プラグイ"
"ンをどこに配置するかに関する規則や、発見するための方法も提供できます。例え"
"ば、あなたが名前空間を決めるサブパッケージ ``myapp.plugins`` を作成したら、そ"
"の名前空間に他の :term:`配布物 <Distribution Package>` がモジュールやパッケー"
"ジを配置することができます。インストールが終われば、あなたは :func:`pkgutil."
"iter_modules` を用いてインストール済みの全てのモジュールやパッケージをその名"
"前空間で発見できるでしょう。"

#: ../source/guides/creating-and-discovering-plugins.rst:88
msgid ""
"Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` "
"causes it to only look for the modules directly under that namespace. For "
"example, if you have installed distributions that provide the modules "
"``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` in "
"this case would be:"
msgstr ""
":func:`~pkgutil.iter_modules` に ``myapp.plugins.__path__`` を指定すると、そ"
"の名前空間の直下にあるモジュールだけを探索するようになります。例えば、あなた"
"がモジュールの ``myapp.plugins.a`` と ``myapp.plugins.b`` を提供する配布物を"
"インストールしているとしたら、 ``discovered_plugins`` は次のようになるでしょ"
"う："

#: ../source/guides/creating-and-discovering-plugins.rst:100
msgid ""
"This sample uses a sub-package as the namespace package (``myapp.plugins``), "
"but it's also possible to use a top-level package for this purpose (such as "
"``myapp_plugins``). How to pick the namespace to use is a matter of "
"preference, but it's not recommended to make your project's main top-level "
"package (``myapp`` in this case) a namespace package for the purpose of "
"plugins, as one bad plugin could cause the entire namespace to break which "
"would in turn make your project unimportable. For the \"namespace sub-"
"package\" approach to work, the plugin packages must omit the :file:"
"`__init__.py` for your top-level package directory (``myapp`` in this case) "
"and include the namespace-package style :file:`__init__.py` in the namespace "
"sub-package directory (``myapp/plugins``).  This also means that plugins "
"will need to explicitly pass a list of packages to :func:`setup`'s "
"``packages`` argument instead of using :func:`setuptools.find_packages`."
msgstr ""
"この例ではサブパッケージを名前空間を決めるパッケージ(``myapp.plugins``)として"
"使っていますが、トップレベルのパッケージをこの(``myapp_plugins``のような)目的"
"に用いることも可能です。名前空間をどのようにして決めるかは好みの問題ですが、"
"あなたのプロジェクトのトップレベルのパッケージ(この場合では``myapp``)をプラグ"
"インの名前空間を決めるために用いると、全体の名前空間を破壊するようなプラグイ"
"ンがひとつあるだけで、あなたのプロジェクトをインポートすることができなくなる"
"のでお勧めしません。「名前空間を決めるサブパッケージ」の手法がうまく動作する"
"ためには、プラグインパッケージ側のトップレベルパッケージのディレクトリ(この場"
"合には``myapp``)に :file:`__init__.py` が存在してはいけませんし、名前空間を決"
"めるサブパッケージのディレクトリ(``myapp/plugins``)にある :file:`__init__.py`"
"をプラグインパッケージ側でインクルードしなければなりません。これはまた、 プラ"
"グインの側で:func:`setuptools.find_packages` を使うのではなく、パッケージの名"
"前を :func:`setup`の ``packages`` 引数に明示的に渡す必要がある、ということを"
"意味しています。"

#: ../source/guides/creating-and-discovering-plugins.rst:114
msgid ""
"Namespace packages are a complex feature and there are several different "
"ways to create them. It's highly recommended to read the :doc:`packaging-"
"namespace-packages` documentation and clearly document which approach is "
"preferred for plugins to your project."
msgstr ""
"名前空間を決めるパッケージは込み入った機能で、いくつかの異なる作成方法があり"
"ます。 :doc:`packaging-namespace-packages` 文書を読むとともに、あなたのプロ"
"ジェクト用のプラグインとしてはどちらの手法が好ましいのかを明白に文書化してお"
"くことを強くお勧めします。"

#: ../source/guides/creating-and-discovering-plugins.rst:122
msgid "Using package metadata"
msgstr "パッケージのメタデータを用いるやり方"

#: ../source/guides/creating-and-discovering-plugins.rst:124
msgid ""
"Packages can have metadata for plugins described in the :ref:`entry-points`. "
"By specifying them, a package announces that it contains a specific kind of "
"plugin. Another package supporting this kind of plugin can use the metadata "
"to discover that plugin."
msgstr ""
"パッケージは、 :ref:`entry-points` に記述されたプラグインのためのメタデータを"
"持つことができます。それを指定することで、パッケージが特定の種類のプラグイン"
"を含んでいることをアナウンスします。そのメタデータを使って、同じ種類のプラグ"
"インをサポートする別のパッケージがそのプラグインを検出するのに使うことができ"
"ます。"

#: ../source/guides/creating-and-discovering-plugins.rst:128
msgid ""
"For example if you have a package named ``myapp-plugin-a`` and it includes "
"the following in its ``pyproject.toml``:"
msgstr ""
"例えば、``myapp-plugin-a`` という名前のパッケージが存在して、その "
"``pyproject.toml`` に次のものを含む場合："

#: ../source/guides/creating-and-discovering-plugins.rst:136
msgid ""
"Then you can discover and load all of the registered entry points by using :"
"func:`importlib.metadata.entry_points` (or the backport_ "
"``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""
"そして、 :func:`import lib.metadata.entry_points` (あるいはPython 3.6-3.9用"
"の backport_``import lib_metadata>=3.6``)を使うことで、登録されたエントリポイ"
"ントを全て検出することができます。"

#: ../source/guides/creating-and-discovering-plugins.rst:151
msgid ""
"In this example, ``discovered_plugins`` would be a collection of type :class:"
"`importlib.metadata.EntryPoint`:"
msgstr ""
"この例では、 ``discovered_plugins`` は :class:`importlib.metadata."
"EntryPoint` 型の(オブジェクトの)集合となるでしょう。"

#: ../source/guides/creating-and-discovering-plugins.rst:160
msgid ""
"Now the module of your choice can be imported by executing "
"``discovered_plugins['a'].load()``."
msgstr ""
"今や、``discovered_plugins['a'].load()`` を実行することで、あなたが選んだモ"
"ジュールをインポートすることができます。"

#: ../source/guides/creating-and-discovering-plugins.rst:163
msgid ""
"The ``entry_point`` specification in :file:`setup.py` is fairly flexible and "
"has a lot of options. It's recommended to read over the entire section on :"
"doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""
":file:`setup.py` における ``entry_points`` の指定はかなり自由度が高く、オプ"
"ションがたくさんあります。 :doc:`entry_point <setuptools:userguide/"
"entry_point>` の全部のセクションに目を通すことをお勧めします。"

#: ../source/guides/creating-and-discovering-plugins.rst:167
msgid ""
"Since this specification is part of the :doc:`standard library <python:"
"library/importlib.metadata>`, most packaging tools other than setuptools "
"provide support for defining entry points."
msgstr ""
"この仕様は :doc:`標準ライブラリ <python:library/importlib.metadata>` の一部な"
"ので、setuptools以外のほとんどのパッケージングツールでもエントリポイントを定"
"義できる機能を提供しています。"

#: ../source/guides/creating-command-line-tools.rst:5
msgid "Creating and packaging command-line tools"
msgstr "コマンドライン動作のツールを作成しパッケージングする"

#: ../source/guides/creating-command-line-tools.rst:7
msgid ""
"This guide will walk you through creating and packaging a standalone command-"
"line application that can be installed with :ref:`pipx`, a tool for creating "
"and managing :term:`Python Virtual Environments <Virtual Environment>` and "
"exposing the executable scripts of packages (and available manual pages) for "
"use on the command-line."
msgstr ""
"このガイド文書では、:term:`Python 仮想環境 <Virtual Environment>` を作成し管"
"理するツールである :ref:`pipx` でインストールできるような、スタンドアローンの"
"コマンドラインアプリケーションを作成しパッケージングすること、そして、パッ"
"ケージの実行可能なスクリプト (及び利用可能な man ページ) を外部からコマンドラ"
"インで使えるようにすることについて、一通り案内します。"

#: ../source/guides/creating-command-line-tools.rst:12
msgid "Creating the package"
msgstr "パッケージを作成する"

#: ../source/guides/creating-command-line-tools.rst:14
msgid ""
"First of all, create a source tree for the :term:`project <Project>`. For "
"the sake of an example, we'll build a simple tool outputting a greeting (a "
"string) for a person based on arguments given on the command-line."
msgstr ""
"まず最初に、 :term:`プロジェクト <Project>` のためのソースツリーを作成しま"
"しょう。例示のために、コマンドラインの引数として与えられた人物名に挨拶 (文字"
"列) を出力する単純なツールをビルドするものとしましょう。"

#: ../source/guides/creating-command-line-tools.rst:17
#: ../source/guides/tool-recommendations.rst:45
msgid "Todo"
msgstr "Todo"

#: ../source/guides/creating-command-line-tools.rst:17
msgid ""
"Advise on the optimal structure of a Python package in another guide or "
"discussion and link to it here."
msgstr ""
"Python パッケージの最適な構造に関するアドバイスについて、他のガイド文書や議"
"論、リンク集はこちら。"

#: ../source/guides/creating-command-line-tools.rst:19
msgid ""
"This project will adhere to :ref:`src-layout <src-layout-vs-flat-layout>` "
"and in the end be alike this file tree, with the top-level folder and "
"package name ``greetings``:"
msgstr ""
"このプロジェクトは、 :ref:`src-layout <src-layout-vs-flat-layout>` を厳守し、"
"最後には、トップレベルのフォルダとパッケージの名称として ``greetings`` を伴っ"
"た、このファイルツリーのようになります:"

#: ../source/guides/creating-command-line-tools.rst:33
msgid ""
"The actual code responsible for the tool's functionality will be stored in "
"the file :file:`greet.py`, named after the main module:"
msgstr ""
"ツールの機能性に責任のある実際のソースコードは、メインのモジュールの名称から"
"命名された :file:`greet.py` の中に保存されるでしょう。"

#: ../source/guides/creating-command-line-tools.rst:73
msgid ""
"The above function receives several keyword arguments that determine how the "
"greeting to output is constructed. Now, construct the command-line interface "
"to provision it with the same, which is done in :file:`cli.py`:"
msgstr ""
"上記の関数は、どのように出力すべき挨拶を組み立てるかを決定するいくつかのキー"
"ワード引数を受け取ります。さて、同様にそれを準備するためのコマンドラインイン"
"タフェースを :file:`cli.py` の中に構築しましょう:"

#: ../source/guides/creating-command-line-tools.rst:91
msgid ""
"The command-line interface is built with typer_, an easy-to-use CLI parser "
"based on Python type hints. It provides auto-completion and nicely styled "
"command-line help out of the box. Another option would be :py:mod:"
"`argparse`, a command-line parser which is included in Python's standard "
"library. It is sufficient for most needs, but requires a lot of code, "
"usually in ``cli.py``, to function properly. Alternatively, docopt_ makes it "
"possible to create CLI interfaces based solely on docstrings; advanced users "
"are encouraged to make use of click_ (on which ``typer`` is based)."
msgstr ""
"コマンドラインインタフェースは、 Python の型品とを基礎とした使いやすい CLI "
"パーサである typer_ とともにビルドされます。自動補完と申し分のないスタイルを"
"持つコマンドラインヘルプが、最初から使えます。別のオプションは、 Python 標準"
"ライブラリに含まれる :py:mod:`argparse` でしょう。これはほとんどの必要性に十"
"分に応えるものですが、適切に機能させるためには、通常は ``cli.py`` に、ソース"
"コードをたくさん書かなければなりません。さらに別の方法としては、 docopt_ を使"
"うことで、 docstrings だけに基づいて CLI インタフェースを作成することができま"
"す; 熟練ユーザには、 click_ (``typer`` はこれを基礎として使っています) の使用"
"をお勧めします。"

#: ../source/guides/creating-command-line-tools.rst:97
msgid ""
"Now, add an empty :file:`__init__.py` file, to define the project as a "
"regular :term:`import package <Import Package>`."
msgstr ""
"さて、プロジェクトを通常の :term:`インポートパッケージ <Import Package>` とし"
"て定義するために、空の :file:`__init__.py` ファイルを追加しましょう。"

#: ../source/guides/creating-command-line-tools.rst:99
msgid ""
"The file :file:`__main__.py` marks the main entry point for the application "
"when running it via :mod:`runpy` (i.e. ``python -m greetings``, which works "
"immediately with flat layout, but requires installation of the package with "
"src layout), so initialize the command-line interface here:"
msgstr ""
":file:`__main__.py` ファイルは、 :mod:`runpy` から走らせた (すなわち "
"``python -m greetings`` 、これはフラットレイアウトならすぐに動作しますが、 "
"src レイアウトではパッケージのインストールを要求します) 時、アプリケーション"
"のメインのエントリポイントを提示するものですので、コマンドラインインタフェー"
"スをここで初期化しましょう:"

#: ../source/guides/creating-command-line-tools.rst:111
msgid ""
"In order to enable calling the command-line interface directly from the :"
"term:`source tree <Project Source Tree>`, i.e. as ``python src/greetings``, "
"a certain hack could be placed in this file; read more at :ref:`running-cli-"
"from-source-src-layout`."
msgstr ""
"例えば ``python src/greetings`` のように、:term:`ソースコードツリー <Project "
"Source Tree>` から直接にコマンドラインインタフェースを呼び出すことができるよ"
"うにするためには、このファイルの中にそれなりのハックが置かれていることでしょ"
"う; もっと読みたければ :ref:`running-cli-from-source-src-layout` をどうぞ。"

#: ../source/guides/creating-command-line-tools.rst:117
msgid "``pyproject.toml``"
msgstr "``pyproject.toml``"

#: ../source/guides/creating-command-line-tools.rst:119
msgid ""
"The project's :term:`metadata <Pyproject Metadata>` is placed in :term:"
"`pyproject.toml`. The :term:`pyproject metadata keys <Pyproject Metadata "
"Key>` and the ``[build-system]`` table may be filled in as described in :ref:"
"`writing-pyproject-toml`, adding a dependency on ``typer`` (this tutorial "
"uses version *0.12.3*)."
msgstr ""
"プロジェクトの :term:`メタデータ <Pyproject Metadata>` は :term:`pyproject."
"toml` の中にあります。 ``typer`` (このチュートリアルではバージョン *0.1.2.3* "
"を使います) への依存を追加しながら、 :ref:`writing-pyproject-toml` に記述され"
"ているように :term:`pyproject メタデータキー <Pyproject Metadata Key>` や "
"``[build-system]`` テーブルに値が埋め込まれます。"

#: ../source/guides/creating-command-line-tools.rst:122
msgid ""
"For the project to be recognised as a command-line tool, additionally a "
"``console_scripts`` :ref:`entry point <entry-points>` (see :ref:"
"`console_scripts`) needs to be added as a :term:`subkey <Pyproject Metadata "
"Subkey>`:"
msgstr ""
"コマンドラインツールとして認識されるプロジェクト向けには、さらに "
"``console_scripts``  :ref:`エントリポイント <entry-point>` (:ref:"
"`console_scripts`をご覧ください) が :term:`サブキー <Pyproject Metadata "
"Subkey>` として追加されている必要があります:"

#: ../source/guides/creating-command-line-tools.rst:129
msgid ""
"Now, the project's source tree is ready to be transformed into a :term:"
"`distribution package <Distribution Package>`, which makes it installable."
msgstr ""
"これで、プロジェクトのソースコードツリーが、インストールすることができる :"
"term:`配布パッケージ <Distribution Package>` へと変換される準備ができました。"

#: ../source/guides/creating-command-line-tools.rst:134
msgid "Installing the package with ``pipx``"
msgstr "``pipx`` を使ってパッケージをインストールする"

#: ../source/guides/creating-command-line-tools.rst:136
msgid ""
"After installing ``pipx`` as described in :ref:`installing-stand-alone-"
"command-line-tools`, install your project:"
msgstr ""
":ref:`installing-stand-alone-command-line-tools` に記述されているように "
"``pipx`` をインストールした後に、プロジェクトをインストールしましょう:"

#: ../source/guides/creating-command-line-tools.rst:143
msgid ""
"This will expose the executable script we defined as an entry point and make "
"the command ``greet`` available. Let's test it:"
msgstr ""
"これによって、エントリポイントとして定義した実行可能なスクリプトを露出し、コ"
"マンド ``greet`` を利用可能にします。試してみましょう:"

#: ../source/guides/creating-command-line-tools.rst:155
msgid ""
"Since this example uses ``typer``, you could now also get an overview of the "
"program's usage by calling it with the ``--help`` option, or configure "
"completions via the ``--install-completion`` option."
msgstr ""
"この例では ``typer`` を使っていますので、今や ``--help`` オプションをつけて呼"
"び出すことでプログラムの使用方法の概要を得たり、 ``--install-completion`` オ"
"プション経由でコマンドライン補完を得ることができるでしょう。"

#: ../source/guides/creating-command-line-tools.rst:158
msgid ""
"To just run the program without installing it permanently, use ``pipx run``, "
"which will create a temporary (but cached) virtual environment for it:"
msgstr ""
"プログラムを永続的にインストールすることなしにただプログラムを走らせるために"
"は、一時的な (しかしキャッシュされる) 仮想環境を作ってくれる ``pipx run`` を"
"使いましょう。"

#: ../source/guides/creating-command-line-tools.rst:165
msgid ""
"This syntax is a bit impractical, however; as the name of the entry point we "
"defined above does not match the package name, we need to state explicitly "
"which executable script to run (even though there is only on in existence)."
msgstr ""
"しかしながら、このシンタックスはちょっと実際的ではありません; 上で定義したエ"
"ントリポイントの名称がパッケージ名称と一致しないので、 (たとえひとつしか実行"
"スクリプトがないとしても) 明示的にどの実行スクリプトを走らせるのかを述べる必"
"要があります。"

#: ../source/guides/creating-command-line-tools.rst:168
msgid ""
"There is, however, a more practical solution to this problem, in the form of "
"an entry point specific to ``pipx run``. The same can be defined as follows "
"in :file:`pyproject.toml`:"
msgstr ""
"しかしながら、この問題に対するもっと実際的な解決法で、 ``pipx run`` でエント"
"リポイントを指定する形式があります。以下に述べる :file:`pyproject.toml` 内で"
"定義することで同様のことができるのです:"

#: ../source/guides/creating-command-line-tools.rst:177
msgid ""
"Thanks to this entry point (which *must* match the package name), ``pipx`` "
"will pick up the executable script as the default one and run it, which "
"makes this command possible:"
msgstr ""
"このエントリポイント (その名称がパッケージ名称と *一致しなければなりません*) "
"のおかげで、 ``pipx`` は実行可能なスクリプトをデフォルトのものとして選択しそ"
"れを走らせるでしょう、そして、それはこのコマンドを実現可能にします:"

#: ../source/guides/creating-command-line-tools.rst:185
msgid "Conclusion"
msgstr "結論"

#: ../source/guides/creating-command-line-tools.rst:187
msgid ""
"You know by now how to package a command-line application written in Python. "
"A further step could be to distribute your package, meaning uploading it to "
"a :term:`package index <Package Index>`, most commonly :term:`PyPI <Python "
"Package Index (PyPI)>`. To do that, follow the instructions at :ref:"
"`Packaging your project`. And once you're done, don't forget to :ref:`do "
"some research <analyzing-pypi-package-downloads>` on how your package is "
"received!"
msgstr ""
"これまでに、 Python で書かれたコマンドラインアプリケーションをパッケージする"
"方法がわかったものと思います。さらなる一歩としては、そのパッケージを配布する"
"こと、つまり、最も一般的には :term:`PyPI <Python Package Index (PyPI)>` のよ"
"うな :term:`パッケージインデックス <Package Index>` へとアップロードすること"
"でしょう。それをするためには、 :ref:`プロジェクトをパッケージする <Packaging "
"your project>` の指示に従ってください。そして、一旦アップロードができたなら、"
"パッケージがどのように受け入れられたかについて :ref:`いくらかの調査を行う "
"<analyzing-pypi-package-downloads>` ことを実行してください！"

#: ../source/guides/distributing-packages-using-setuptools.rst:5
msgid "Packaging and distributing projects"
msgstr "パッケージングとプロジェクトの配布"

#: ../source/guides/distributing-packages-using-setuptools.rst:7
msgid "Outdated"
msgstr "期限切れのもの"

#: ../source/guides/distributing-packages-using-setuptools.rst:8
msgid "2023-12-14"
msgstr "2023-12-14"

#: ../source/guides/distributing-packages-using-setuptools.rst:10
msgid ""
"This section covers some additional details on configuring, packaging and "
"distributing Python projects with ``setuptools`` that aren't covered by the "
"introductory tutorial in :doc:`/tutorials/packaging-projects`.  It still "
"assumes that you are already familiar with the contents of the :doc:`/"
"tutorials/installing-packages` page."
msgstr ""
"この節では、 ``setuptools`` を使ったPythonパッケージの設定・パッケージング・"
"配布方法について、 :doc:`/tutorials/packaging-projects`_ の入門的なチュートリ"
"アルでは触れていないような追加的な詳細を説明します。あなたが既に :doc:`/"
"tutorials/installing-packages` ページの内容については慣れ親しんでいるものと仮"
"定して進めます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:16
msgid ""
"The section does *not* aim to cover best practices for Python project "
"development as a whole.  For example, it does not provide guidance or tool "
"recommendations for version control, documentation, or testing."
msgstr ""
"この節は、Pythonプロジェクトの開発についての全体的なベストプラクティスを説明"
"しているわけではありません。例えば、バージョン管理や文書化、あるいは試験につ"
"いて、手引きとなったりツールを推奨するようなことはありません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:20
msgid ""
"For more reference material, see :std:doc:`Building and Distributing "
"Packages <setuptools:userguide/index>` in the :ref:`setuptools` docs, but "
"note that some advisory content there may be outdated. In the event of "
"conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""
"より詳しい参考文献としては、:ref:`setuptools` の説明文書の中の :std:doc:`パッ"
"ケージのビルドと配布 <setuptools:userguide/index>` を挙げておきますが、推奨事"
"項のいくつかはもはや古くなっているかもしれません。喰い違いがあった場合には、"
"Python パッケージングユーザガイドの推奨事項を優先してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:28
msgid "Requirements for packaging and distributing"
msgstr "パッケージングと配布に対する要求事項"

#: ../source/guides/distributing-packages-using-setuptools.rst:29
msgid ""
"First, make sure you have already fulfilled the :ref:`requirements for "
"installing packages <installing_requirements>`."
msgstr ""
"最初に、あなたが既に :ref:`パッケージをインストールする際の要求事項 "
"<installing_requirements>` を満たしていることを確実にしてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:32
msgid "Install \"twine\" [1]_:"
msgstr "\"twine\"をインストールする [1]_:"

#: ../source/guides/distributing-packages-using-setuptools.rst:46
msgid ""
"You'll need this to upload your project :term:`distributions <Distribution "
"Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below "
"<Uploading your Project to PyPI>`)."
msgstr ""
"あなたのプロジェクトの :term:`配布物 <Distribution Package>` を :term:`PyPI "
"<Python Package Index (PyPI)>` にアップロードする( :ref:`後述 <Uploading "
"your Project to PyPI>` )ためにこれが必要になるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:52
msgid "Configuring your project"
msgstr "あなたのプロジェクトを設定する"

#: ../source/guides/distributing-packages-using-setuptools.rst:56
msgid "Initial files"
msgstr "最初に必要なファイル群"

#: ../source/guides/distributing-packages-using-setuptools.rst:61
msgid ""
"The most important file is :file:`setup.py` which exists at the root of your "
"project directory. For an example, see the `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
"最重要のファイルは、あなたのプロジェクトのディレクトリの一番上(ルート)にあ"
"る :file:`setup.py` です。`PyPA サンプルプロジェクト <https://github.com/"
"pypa/sampleproject>`_ の `setup.py <https://github.com/pypa/sampleproject/"
"blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ に具体例がありま"
"す。"

#: ../source/guides/distributing-packages-using-setuptools.rst:66
msgid ":file:`setup.py` serves two primary functions:"
msgstr ":file:`setup.py` はふたつの主要な機能を提供します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:68
msgid ""
"It's the file where various aspects of your project are configured. The "
"primary feature of :file:`setup.py` is that it contains a global ``setup()`` "
"function.  The keyword arguments to this function are how specific details "
"of your project are defined.  The most relevant arguments are explained in :"
"ref:`the section below <setup() args>`."
msgstr ""
"まず、あなたのプロジェクトをさまざまな角度から設定するためのファイルです。 :"
"file:`setup.py` の主要な機能は、グローバルな ``setup()`` 関数を含んでいること"
"です。この関数にキーワード引数を渡すことで、あなたのプロジェクトの特定の細部"
"を定義することができます。適切な引数のほとんどについて :ref:`次節 <setup() "
"args>` で説明します。"

#: ../source/guides/distributing-packages-using-setuptools.rst:74
msgid ""
"It's the command line interface for running various commands that relate to "
"packaging tasks. To get a listing of available commands, run ``python3 setup."
"py --help-commands``."
msgstr ""
"それは、パッケージングする上での作業項目に関連したさまざまなコマンドを走らせ"
"るためのコマンドラインインタフェイスです。使用可能なコマンドを一覧するには、 "
"``python setup.py --help-commands`` を実行してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:82
msgid ""
":file:`setup.cfg` is an ini file that contains option defaults for :file:"
"`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup."
"cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
":file:`setup.cfg` は :file:`setup.py` のコマンド群に対するオプションの既定値"
"を含む初期化ファイルです。 `PyPA サンプルプロジェクト <https://github.com/"
"pypa/sampleproject>`_ の中の `setup.cfg <https://github.com/pypa/"
"sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.cfg>`_ に使"
"用例が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:89
msgid "README.rst / README.md"
msgstr "README.rstとREADME.md"

#: ../source/guides/distributing-packages-using-setuptools.rst:91
msgid ""
"All projects should contain a readme file that covers the goal of the "
"project. The most common format is `reStructuredText <https://docutils."
"sourceforge.io/rst.html>`_ with an \"rst\" extension, although this is not a "
"requirement; multiple variants of `Markdown <https://daringfireball.net/"
"projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:"
"`long_description_content_type <description>` argument)."
msgstr ""
"すべてのプロジェクトは、プロジェクトのゴールを記したreadmeファイルを備えるべ"
"きです。一番良くあるフォーマットは拡張子が \"rst\" の `reStructuredText "
"<https://docutils.sourceforge.io/rst.html>`_ ですが、これは(訳註、必須の)要求"
"事項というわけではありません。他にも複数の種類の `マークダウン <https://"
"daringfireball.net/projects/markdown/>`_ フォーマットがサポートされています"
"(``setup()`` の :ref:`long_description_content_type <description>` 引数を見て"
"ください)。"

#: ../source/guides/distributing-packages-using-setuptools.rst:98
msgid ""
"For an example, see `README.md <https://github.com/pypa/sampleproject/blob/"
"main/README.md>`_ from the `PyPA sample project <https://github.com/pypa/"
"sampleproject>`_."
msgstr ""
"`PyPA sample project <https://github.com/pypa/sampleproject>`_ の中の "
"`README.md <https://github.com/pypa/sampleproject/blob/main/README.md>`_ に例"
"が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:102
msgid ""
"Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:"
"`README.rst`, :file:`README.txt`, or :file:`README`) included in source "
"distributions by default. The built-in :ref:`distutils` library adopts this "
"behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ "
"will include a :file:`README.md` if found. If you are using setuptools, you "
"don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, "
"include it to be explicit."
msgstr ""
":ref:`setuptools`の0.6.27およびそれ以降のバージョンを使っているプロジェクトで"
"は、標準のreadmeファイル(:file:`README.rst`、 :file:`README.txt`、または :"
"file:`README`)がデフォルトでソースコード配布物に含まれるようになっています。"
"標準ライブラリの :ref:`distutils` では、Python 3.7からこの動作を採用しまし"
"た。さらに、:ref:`setuptools` の36.4.0およびそれ以降のバージョンでは、もし見"
"つかれば :file:`README.md` を含めるようになっています。もしあなたがsetuptools"
"を使っているのであれば、あなたはreadmeファイルを :file:`MANIFEST.in` に明記す"
"る必要はありません。そうでないなら、明示的に書いてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:111
msgid "MANIFEST.in"
msgstr "MANIFEST.in"

#: ../source/guides/distributing-packages-using-setuptools.rst:113
msgid ""
"A :file:`MANIFEST.in` is needed when you need to package additional files "
"that are not automatically included in a source distribution.  For details "
"on writing a :file:`MANIFEST.in` file, including a list of what's included "
"by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""
"自動的に追加されるファイル以外のファイルをソースコード配布物に追加したい場合"
"には、 :file:`MANIFEST.in` が必要になります。 どんなファイルがデフォルトで自"
"動的に追加されるのかも含めて、 :file:`MANIFEST.in` の書き方の詳細については"
"「 :ref:`MANIFEST.in の使い方 <Using MANIFEST.in>`」を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:118
msgid ""
"However, you may not have to use a :file:`MANIFEST.in`. For an example, the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_ has removed "
"its manifest file, since all the necessary files have been included by :ref:"
"`setuptools` 43.0.0 and newer."
msgstr ""
"しかしながら、あなたは必ずしも :file:`MANIFEST.in` を使わなくても構いません。"
"一つの例として`PyPA サンプルプロジェクト <https://github.com/pypa/"
"sampleproject>`_ では、必要なファイルがすべて 43.0.0およびこれ以降の:ref:"
"`setuptools`に含まれているので、マニフェストファイルを削除しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:123
msgid ""
":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""
":file:`MANIFEST.in` は、wheelなどのバイナリ配布物には影響を与えません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:126
msgid "LICENSE.txt"
msgstr "LICENSE.txt"

#: ../source/guides/distributing-packages-using-setuptools.rst:128
msgid ""
"Every package should include a license file detailing the terms of "
"distribution. In many jurisdictions, packages without an explicit license "
"can not be legally used or distributed by anyone other than the copyright "
"holder. If you're unsure which license to choose, you can use resources such "
"as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a "
"lawyer."
msgstr ""
"各パッケージは、配布の条件を指定するライセンスファイルを含んでいるべきです。"
"多くの司法管轄区域(訳註、大雑把にいうと「多くの国」)では、明示的なライセンス"
"条項がないと、著作権保持者でなければ誰も適法にパッケージを使用したり配布した"
"りすることができません。どのライセンスを選択すればよいか分からない場合には、"
"`GitHubの「オープンソースライセンスを選ぶには」 <https://choosealicense.com/"
">`_ などのリソースを見ることも、弁護士に相談することもできます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:134
msgid ""
"For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/"
"blob/main/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/"
"pypa/sampleproject>`_."
msgstr ""
"`PyPAサンプルプロジェクト <https://github.com/pypa/sampleproject>`_ の "
"`LICENSE.txt <https://github.com/pypa/sampleproject/blob/master/LICENSE."
"txt>`_ に例がでています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:139
msgid "<your package>"
msgstr "<あなたのパッケージ>"

#: ../source/guides/distributing-packages-using-setuptools.rst:141
msgid ""
"Although it's not required, the most common practice is to include your "
"Python modules and packages under a single top-level package that has the "
"same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""
"必ずそうしなければならないというわけではありませんが、あなたのプロジェクトと"
"同じか非常に近い :ref:`名前 <setup() name>` の単一のプロジェクトをPythonのモ"
"ジュールやパッケージのトップレベルに配置するということが共通の慣習になってい"
"ます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:145
msgid ""
"For an example, see the `sample <https://github.com/pypa/sampleproject/tree/"
"main/src/sample>`_ package that's included in the `PyPA sample project "
"<https://github.com/pypa/sampleproject>`_."
msgstr ""
"`PyPAサンプルプロジェクト <https://github.com/pypa/sampleproject>`_ に含まれ"
"る `サンプル <https://github.com/pypa/sampleproject/blob/main/src/sample>`_ "
"パッケージに例が出ています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:153
msgid "setup() args"
msgstr "setup() の引数"

#: ../source/guides/distributing-packages-using-setuptools.rst:155
msgid ""
"As mentioned above, the primary feature of :file:`setup.py` is that it "
"contains a global ``setup()`` function.  The keyword arguments to this "
"function are how specific details of your project are defined."
msgstr ""
"上述の通り、:file:`setup.py` の第一の機能は、グローバルスコープの "
"``setup()`` 関数を含むことです。この関数に与えるキーワード引数は、あなたのプ"
"ロジェクトの特定の細部がどのように定義されているかを示すものです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:159
msgid ""
"Some are temporarily explained below until their information is moved "
"elsewhere. The full list can be found :doc:`in the setuptools documentation "
"<setuptools:references/keywords>`."
msgstr ""
"いくつかについては、情報がどこか他の場所に移されるまでの一時的な説明が以下に"
"あります。すべてを列挙したものは :doc:`setuptools の説明文書 <setuptools:"
"references/keywords>` で見つかるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:163
msgid ""
"Most of the snippets given are taken from the `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"contained in the `PyPA sample project <https://github.com/pypa/"
"sampleproject>`_."
msgstr ""
"ほとんどのソースコード断片(スニペット)は、`PyPA サンプルプロジェクト "
"<https://github.com/pypa/sampleproject>`_ の中の `setup.py <https://github."
"com/pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup."
"py>`_ から取られたものです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:170
msgid ""
"See :ref:`Choosing a versioning scheme` for more information on ways to use "
"versions to convey compatibility information to your users."
msgstr ""
"あなたのユーザへ互換性情報を伝える方法としてバージョン番号を使うやり方につい"
"ては、 :ref:`バージョンをつける規則を選択するには <Choosing a versioning "
"scheme>` をご覧ください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:177
msgid "``packages``"
msgstr "``packages``"

#: ../source/guides/distributing-packages-using-setuptools.rst:183
msgid ""
"Set ``packages`` to a list of all :term:`packages <Import Package>` in your "
"project, including their subpackages, sub-subpackages, etc.  Although the "
"packages can be listed manually, ``setuptools.find_packages()`` finds them "
"automatically.  Use the ``include`` keyword argument to find only the given "
"packages.  Use the ``exclude`` keyword argument to omit packages that are "
"not intended to be released and installed."
msgstr ""
"``packages`` には、あなたのプロジェクトにある :term:`パッケージ <Import "
"Package>` を子パッケージや孫パッケージなども含めてすべて列挙してください。"
"パッケージは手動で列挙することもできますが、 ``setuptools.find_packages()`` "
"を使えば自動で列挙することができます。 ``include`` キーワード引数を使うと、こ"
"こに与えられた特定のパッケージだけを探索することができます。 ``exclude`` キー"
"ワード引数を使うと、公開したりインストールしたりする意図のないパッケージを除"
"外することができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:192
msgid "``py_modules``"
msgstr "``py_modules``"

#: ../source/guides/distributing-packages-using-setuptools.rst:198
msgid ""
"If your project contains any single-file Python modules that aren't part of "
"a package, set ``py_modules`` to a list of the names of the modules (minus "
"the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""
"あなたのプロジェクトに、プロジェクトの一部ではない単一ファイルのPythonモ"
"ジュールがあるなら、 :ref:`setuptools` に知らせるために、そのようなモジュール"
"の(拡張子``.py``を削除した)名前を ``py_modules`` に列挙してください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:204
msgid "``install_requires``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:210
msgid ""
"\"install_requires\" should be used to specify what dependencies a project "
"minimally needs to run. When the project is installed by :ref:`pip`, this is "
"the specification that is used to install its dependencies."
msgstr ""
"``install_requires`` は、プロジェクトが動作するために最低限必要な依存関係を指"
"定するのに使われます。プロジェクトが :ref:`pip` でインストールされる場合に"
"は、この指定を見て依存関係(訳註、にある他パッケージ)をインストールするために"
"用いられます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:214
msgid ""
"For more on using \"install_requires\" see :ref:`install_requires vs "
"Requirements files`."
msgstr ""
"さらなる ``install_requires`` の使い方については :ref:`install_requires対"
"Requirementsファイル <install_requires vs Requirements files>` を参照してくだ"
"さい。"

#: ../source/guides/distributing-packages-using-setuptools.rst:221
msgid "``package_data``"
msgstr "``package_data``"

#: ../source/guides/distributing-packages-using-setuptools.rst:230
msgid ""
"Often, additional files need to be installed into a :term:`package <Import "
"Package>`. These files are often data that’s closely related to the "
"package’s implementation, or text files containing documentation that might "
"be of interest to programmers using the package. These files are called "
"\"package data\"."
msgstr ""
"追加のファイルを :term:`パッケージ <Import Package>` にインストールする必要が"
"ある、というのはよくあることです。このようなファイルは、しばしば、そのパッ"
"ケージの実装に深く関係していたり、パッケージを利用するプログラマの利益になる"
"ような説明を含んだテキストファイルであったりします。このようなファイルは"
"「パッケージデータ」と呼ばれます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:235
msgid ""
"The value must be a mapping from package name to a list of relative path "
"names that should be copied into the package. The paths are interpreted as "
"relative to the directory containing the package."
msgstr ""
"この引数に渡す値は、パッケージ名から、そのパッケージ内にコピーされるべきファ"
"イルの相対パス名を列挙したもののマッピングになっていなければなりません。パス"
"名はパッケージを含むディレクトリからの相対パスとして解釈されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:239
msgid ""
"For more information, see :std:doc:`Including Data Files <setuptools:"
"userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""
"詳しくは、 :std:doc:`setuptools説明文書 <setuptools:index>` の中の :std:doc:`"
"データファイルを追加するには <1setuptools:userguide/datafiles>` を見てくださ"
"い。"

#: ../source/guides/distributing-packages-using-setuptools.rst:247
msgid "``data_files``"
msgstr "``data_files``"

#: ../source/guides/distributing-packages-using-setuptools.rst:253
msgid ""
"Although configuring :ref:`Package Data` is sufficient for most needs, in "
"some cases you may need to place data files *outside* of your :term:"
"`packages <Import Package>`.  The ``data_files`` directive allows you to do "
"that. It is mostly useful if you need to install files which are used by "
"other programs, which may be unaware of Python packages."
msgstr ""
":ref:`パッケージデータ <Package Data>` を設定すればほとんどの需要に応えられま"
"すが、あなたの :term:`パッケージ <Import Package>` の *外側* にデータファイル"
"を置きたいこともあるでしょう。 ``data_files`` ディレクティブでそれができま"
"す。大抵は、Pythonのパッケージを認識しないような他のプログラムから利用する"
"ファイルをインストールする必要がある時に、これが役に立つでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:259
msgid ""
"Each ``(directory, files)`` pair in the sequence specifies the installation "
"directory and the files to install there. The ``directory`` must be a "
"relative path (although this may change in the future, see `wheel Issue #92 "
"<https://github.com/pypa/wheel/issues/92>`_), and it is interpreted relative "
"to the installation prefix (Python’s ``sys.prefix`` for a default "
"installation; ``site.USER_BASE`` for a user installation). Each file name in "
"``files`` is interpreted relative to the :file:`setup.py` script at the top "
"of the project source distribution."
msgstr ""
"設定値の中の ``(ディレクトリ, ファイル)`` の組は、それぞれインストール先の"
"ディレクトリとそこにインストールされるべきファイル(群)を指定しています。 ``"
"ディレクトリ <directory>`` は相対パスでなければならず (これは将来変更されるか"
"もしれません。 `wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_ "
"を見てください)、インストール先プレフィクス(デフォルトではPythonの ``sys."
"prefix``、ないし、ユーザインストールでは ``site.USER_BASE`` )に対する相対パス"
"として解釈されます。 ``files`` 内のファイル名は、プロジェクトのソースコード配"
"布物の最上位にある :file:`setup.py` スクリプトに対する相対パスとして解釈され"
"ます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:269
msgid ""
"For more information see the distutils section on :ref:`Installing "
"Additional Files <setuptools:distutils-additional-files>`."
msgstr ""
"さらに詳しくは、 :ref:`追加的なファイルをインストールするには <setuptools:"
"distutils-additional-files>` の中のdistutilsの節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:274
msgid ""
"When installing packages as egg, ``data_files`` is not supported. So, if "
"your project uses :ref:`setuptools`, you must use ``pip`` to install it. "
"Alternatively, if you must use ``python setup.py``, then you need to pass "
"the ``--old-and-unmanageable`` option."
msgstr ""
"パッケージをeggとしてインストールする時には、 ``data_files`` はサポートされて"
"いません。だから、もしあなたのプロジェクトで :ref:`setuptools` を使っているな"
"らば ``pip`` でインストールしなければなりません。あるいは、 ``--old-and-"
"unmanageable`` オプション付きの ``python setup.py`` を使わなければなりませ"
"ん。"

#: ../source/guides/distributing-packages-using-setuptools.rst:281
#: ../source/specifications/pyproject-toml.rst:147
msgid "``scripts``"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:283
msgid ""
"Although ``setup()`` supports a :ref:`scripts <setuptools:distutils-"
"installing-scripts>` keyword for pointing to pre-made scripts to install, "
"the recommended approach to achieve cross-platform compatibility is to use :"
"ref:`console_scripts` entry points (see below)."
msgstr ""
"``setup()`` はあらかじめ作成されたスクリプトをインストールするために :ref:"
"`scripts <setuptools:distutils-installing-scripts>` キーワードをサポートして"
"いますが、異機種間の互換性を取るためのアプローチとして推奨されるのは :ref:"
"`console_scripts` エントリーポイント(後述)を使うことです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:291
msgid "Choosing a versioning scheme"
msgstr "バージョン体系を選択する"

#: ../source/guides/distributing-packages-using-setuptools.rst:293
msgid ""
"See :ref:`versioning` for information on common version schemes and how to "
"choose between them."
msgstr ""
"よくあるバージョンを指定する枠組みにどんなものがあるかや、その中からひとつの"
"枠組みを選択する方法については、 :ref:`バージョニング <versioning>` を見てく"
"ださい。"

#: ../source/guides/distributing-packages-using-setuptools.rst:298
msgid "Working in \"development mode\""
msgstr "開発モードで作業する"

#: ../source/guides/distributing-packages-using-setuptools.rst:300
msgid ""
"You can install a project in \"editable\" or \"develop\" mode while you're "
"working on it. When installed as editable, a project can be edited in-place "
"without reinstallation: changes to Python source files in projects installed "
"as editable will be reflected the next time an interpreter process is "
"started."
msgstr ""
"あなたがまだ作業している途中なら、プロジェクトを「編集可能」または「開発」"
"モードでインストールすることができます。編集可能な状態でインストールされる"
"と、再インストールしなくてもプロジェクトをその場で編集することができます: 編"
"集可能状態でインストールされたプロジェクトのPythonソースコードに変更を加える"
"と、次にインタープリターのプロセスが開始された時に反映されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:306
msgid ""
"To install a Python package in \"editable\"/\"development\" mode Change "
"directory to the root of the project directory and run:"
msgstr ""
"Pythonのパッケージを「編集可能」/「開発」モードでインストールするには、そのプ"
"ロジェクトのルートディレクトリへ移動して、次のコマンドを走らせてください:"

#: ../source/guides/distributing-packages-using-setuptools.rst:314
msgid ""
"The pip command-line flag ``-e`` is short for ``--editable``, and ``.`` "
"refers to the current working directory, so together, it means to install "
"the current directory (i.e. your project) in editable mode.  This will also "
"install any dependencies declared with ``install_requires`` and any scripts "
"declared with ``console_scripts``.  Dependencies will be installed in the "
"usual, non-editable mode."
msgstr ""
"pip のコマンドラインオプションの ``-e`` は ``--editable`` の省略形で、 ``.`` "
"は現在作業をしているディレクトリのことですので、まとめると「現在のディレクト"
"リ(つまりあなたのプロジェクト)に編集可能モードでインストールせよ」ということ"
"になります。また、このコマンドによって ``install_requires`` に宣言された依存"
"先のパッケージや ``console_scripts`` に書かれたスクリプトもインストールされま"
"す。"

#: ../source/guides/distributing-packages-using-setuptools.rst:321
msgid ""
"You may want to install some of your dependencies in editable mode as well. "
"For example, supposing your project requires \"foo\" and \"bar\", but you "
"want \"bar\" installed from VCS in editable mode, then you could construct a "
"requirements file like so::"
msgstr ""
"依存先のプロジェクトも同様に編集可能モードでインストールしたい時があるかもし"
"れません。例えば、あなたのプロジェクトが \"foo\" と \"bar\" というパッケージ"
"を要求していて、 \"bar\" についてはVCS (バージョンコントロールシステム) から"
"編集可能モードでインストールしたい場合には、requirements ファイルを次のように"
"構成すれば良いでしょう::"

#: ../source/guides/distributing-packages-using-setuptools.rst:329
msgid ""
"The first line says to install your project and any dependencies. The second "
"line overrides the \"bar\" dependency, such that it's fulfilled from VCS, "
"not PyPI."
msgstr ""
"最初の行ではあなたのプロジェクトとその依存先をインストールするように指示して"
"います。２行目で、 \"bar\" についてPyPIではなくVCSから充当するようにと依存関"
"係を上書きしています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:333
msgid ""
"If, however, you want \"bar\" installed from a local directory in editable "
"mode, the requirements file should look like this, with the local paths at "
"the top of the file::"
msgstr ""
"そうではなくて、 \"bar\" をローカルディレクトリから編集可能モードでインストー"
"ルしたい場合には、 requirements ファイルの先頭にローカルのディレクトリパスを"
"置いて次のようになるでしょう::"

#: ../source/guides/distributing-packages-using-setuptools.rst:338
msgid ""
"Otherwise, the dependency will be fulfilled from PyPI, due to the "
"installation order of the requirements file.  For more on requirements "
"files, see the :ref:`Requirements File <pip:Requirements Files>` section in "
"the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS "
"Support>` section of the pip docs."
msgstr ""
"さもなければ requirements ファイルに書かれた順にインストールされてしまうの"
"で、依存先のパッケージが PyPI から充当されてしまいます。 requirements ファイ"
"ルについてさらに詳しく知りたい場合は、 pipの解説文書の :ref:`Requirements "
"ファイル <pip:Requirements Files>` の節を見てください。VCSからのインストール"
"については、同書の :ref:`VCSサポート <pip:VCS Support>` の節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:342
msgid ""
"Lastly, if you don't want to install any dependencies at all, you can run:"
msgstr ""
"最後に、もし依存先パッケージは何もインストールしたくないのであれば、このよう"
"にします:"

#: ../source/guides/distributing-packages-using-setuptools.rst:349
msgid ""
"For more information, see the :doc:`Development Mode <setuptools:userguide/"
"development_mode>` section of the :ref:`setuptools` docs."
msgstr ""
"さらに詳しいことを知りたい場合は、 :ref:`setuptools` 文書の :doc:`開発モード "
"<setuptools:userguide/development_mode>` の 節を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:356
msgid "Packaging your project"
msgstr "プロジェクトをパッケージングする"

#: ../source/guides/distributing-packages-using-setuptools.rst:358
msgid ""
"To have your project installable from a :term:`Package Index` like :term:"
"`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:"
"`Distribution <Distribution Package>` (aka \":term:`Package <Distribution "
"Package>`\") for your project."
msgstr ""
"あなたのプロジェクトを :term:`PyPI <Python Package Index (PyPI)>` のような :"
"term:`パッケージインデックス <Package Index>` からインストールできるようにす"
"るには、 :term:`配布物 <Distribution Package>` (:term:`パッケージ "
"<Distribution Package>`の名前でも知られる) を作成しなければならないでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:363
msgid ""
"Before you can build wheels and sdists for your project, you'll need to "
"install the ``build`` package:"
msgstr ""
"あなたのプロジェクトでwheelsやsdistsをビルドする前に、 ``build`` パッケージを"
"インストールする必要があります。"

#: ../source/guides/distributing-packages-using-setuptools.rst:380
msgid "Source distributions"
msgstr "ソースコード配布物"

#: ../source/guides/distributing-packages-using-setuptools.rst:382
msgid ""
"Minimally, you should create a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>`:"
msgstr ""
"少なくとも、 :term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` "
"を作成するべきです:"

#: ../source/guides/distributing-packages-using-setuptools.rst:398
msgid ""
"A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built "
"Distribution`), and requires a build step when installed by pip.  Even if "
"the distribution is pure Python (i.e. contains no extensions), it still "
"involves a build step to build out the installation metadata from :file:"
"`setup.py` and/or :file:`setup.cfg`."
msgstr ""
"ソースコード配布物はビルドされていない (すなわち、 :term:`ビルド済み配布物 "
"<Built Distribution>` ではない) ので、pip でインストールする際にビルドする段"
"階が必要になります。配布物が純Python (つまり (訳注、多言語で書かれた) 拡張を"
"含まない) であったとしても、 :file:`setup.py` や :file:`setup.cfg` からインス"
"トール用メタデータを取り出してビルドする段階を必要とするのです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:406
msgid "Wheels"
msgstr "Wheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:408
msgid ""
"You should also create a wheel for your project. A wheel is a :term:`built "
"package <Built Distribution>` that can be installed without needing to go "
"through the \"build\" process. Installing wheels is substantially faster for "
"the end user than installing from a source distribution."
msgstr ""
"あなたのプロジェクトでは、wheelも作成するべきです。wheel は、インストールする"
"のにビルド処理を行う必要がない :term:`ビルド済み配布物 <Built Distribution>` "
"です。wheelを使えば、ソースコード配布物からのインストールに比べてエンドユーザ"
"にとって相当素早くインストールすることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:413
msgid ""
"If your project is pure Python then you'll be creating a :ref:`\"Pure Python "
"Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""
"あなたのプロジェクトが純Pythonなら、きっとあなたは:ref:`\"純Pythonの"
"Wheel\" (後述) <Pure Python Wheels>`を作成することになるでしょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:416
msgid ""
"If your project contains compiled extensions, then you'll be creating what's "
"called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""
"もしあなたのプロジェクトにコンパイル済の拡張が含まれているなら、 :ref:`*プ"
"ラットフォーム Wheel* (後述) <Platform Wheels>` を作成することになるでしょ"
"う。"

#: ../source/guides/distributing-packages-using-setuptools.rst:419
msgid ""
"If your project also supports Python 2 *and* contains no C extensions, then "
"you should create what's called a *Universal Wheel* by adding the following "
"to your :file:`setup.cfg` file:"
msgstr ""
"あなたのプロジェクトが Python 2をさぽーとしていて、かつ、C言語拡張を含むので"
"あれば、次のものをあなたの :file:`setup.cfg` ファイルに追加して *ユニバーサ"
"ル Wheel* と呼ばれるものを作成するべきです:"

#: ../source/guides/distributing-packages-using-setuptools.rst:428
msgid ""
"Only use this setting if your project does not have any C extensions *and* "
"supports Python 2 and 3."
msgstr ""
"あなたのプロジェクトにC言語拡張がなく、かつ、Python 2 および3をサポートしてい"
"る場合に限って、この設定を使ってください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:435
msgid "Pure Python Wheels"
msgstr "純Python Wheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:437
msgid ""
"*Pure Python Wheels* contain no compiled extensions, and therefore only "
"require a single Python wheel."
msgstr ""
"*純Python Wheels* は、コンパイル済拡張を含んでおらず、従って単独のPython "
"wheelを要求するだけです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:440
#: ../source/guides/distributing-packages-using-setuptools.rst:469
msgid "To build the wheel:"
msgstr "wheelをビルドするには:"

#: ../source/guides/distributing-packages-using-setuptools.rst:454
msgid ""
"The ``wheel`` package will detect that the code is pure Python, and build a "
"wheel that's named such that it's usable on any Python 3 installation.  For "
"details on the naming of wheel files, see :pep:`425`."
msgstr ""
"``wheel`` パッケージは、ソースコードが純Pythonであることを検出して、Python 3 "
"へのインストールであればどこでも使えるのでそのように名付けられたwheelをビルド"
"します。wheelファイルの名称について詳しいことは :pep:`425` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:458
msgid ""
"If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both "
"files for you; this is useful when you don't need multiple wheels."
msgstr ""
"``--wheel`` か ``--sdist`` を付けずに ``build`` を実行すると、両方のファイル"
"が作成されます; 複数のwheelファイルにしたくないときにはこれが便利です。"

#: ../source/guides/distributing-packages-using-setuptools.rst:464
msgid "Platform Wheels"
msgstr "プラットフォームWheels"

#: ../source/guides/distributing-packages-using-setuptools.rst:466
msgid ""
"*Platform Wheels* are wheels that are specific to a certain platform like "
"Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""
"*プラットフォームWheels* は、LinuxやmacOSあるいはWindowsのような特定のプラッ"
"トフォーム向けのwheelで、大抵の場合は(訳注、特定のプラットフォーム向けにコン"
"パイルされた)コンパイル済み拡張を含むためです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:484
msgid ""
"The ``wheel`` package will detect that the code is not pure Python, and "
"build a wheel that's named such that it's only usable on the platform that "
"it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""
"``wheel`` パッケージは、ソースコードが純Pythonで書かれていないと判断すると、"
"ビルドされたプラットフォーム上でのみ利用可能であるように命名されたwheelを作成"
"します。wheelファイルの命名規則については、 :pep:`425` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:490
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of "
"platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. "
"Details of the latter are defined in :pep:`513`."
msgstr ""
"現在、 :term:`PyPI <<Python Package Index (PyPI)>` は、Windows向けとmacOS向"
"け、そして複数のLinuxディストリビューションに対応した ``manylinux*`` のABI向"
"けのプラットフォームWheelsをアップロードすることに対応しています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:498
msgid "Uploading your Project to PyPI"
msgstr "プロジェクトをPyPIにアップロードする"

#: ../source/guides/distributing-packages-using-setuptools.rst:500
msgid ""
"When you ran the command to create your distribution, a new directory ``dist/"
"`` was created under your project's root directory. That's where you'll find "
"your distribution file(s) to upload."
msgstr ""
"配布物を作成するコマンドを走らせると、あなたのプロジェクトのルートディレクト"
"リに ``dist/`` という新しいディレクトリが作成されます。ここに配布物のファイル"
"(群)が置かれます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:504
msgid ""
"These files are only created when you run the command to create your "
"distribution. This means that any time you change the source of your project "
"or the configuration in your :file:`setup.py` file, you will need to rebuild "
"these files again before you can distribute the changes to PyPI."
msgstr ""
"これらのファイルは、配布物作成のコマンドを走らせたときにだけ作成されます。と"
"いうことは、プロジェクトのソースコードや :file:`setup.py` の中の設定を変更し"
"たときにはいつでも、PyPIへ送る前に配布物のファイルを再作成する必要があるとい"
"うことです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:509
msgid ""
"Before releasing on main PyPI repo, you might prefer training with the `PyPI "
"test site <https://test.pypi.org/>`_ which is cleaned on a semi regular "
"basis. See :ref:`using-test-pypi` on how to setup your configuration in "
"order to use it."
msgstr ""
"PyPIの主リポジトリでリリースをする前に、半定期的に消去される `PyPI 試験サイ"
"ト <https://test.pypi.org/>`_ で練習する方が良いかもしれません。どのように設"
"定すれば試験サイトを使えるかについては、 :ref:`using-test-pypi` を見てくださ"
"い。"

#: ../source/guides/distributing-packages-using-setuptools.rst:514
msgid ""
"In other resources you may encounter references to using ``python setup.py "
"register`` and ``python setup.py upload``. These methods of registering and "
"uploading a package are **strongly discouraged** as it may use a plaintext "
"HTTP or unverified HTTPS connection on some Python versions, allowing your "
"username and password to be intercepted during transmission."
msgstr ""
"他のリソースでは、 ``python setup.py register`` と ``python setup.py "
"upload`` に遭遇するかもしれません。これらのメソッドはパッケージを登録ないし"
"アップロードするものですが、 いくつかのバージョンのPythonで使うと平文のHTTPか"
"検証しないHTTPSを用いるのであなたのユーザ名とパスワードが 通信経路上で横取り"
"される恐れがあって **強く非推奨** の状態になっています。"

#: ../source/guides/distributing-packages-using-setuptools.rst:520
msgid ""
"The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to "
"ensure safety of all users, certain kinds of URLs and directives are "
"forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** "
"trying to upload your distribution, you should check to see if your brief / "
"long descriptions provided in :file:`setup.py` are valid.  You can do this "
"by running :std:doc:`twine check <index>` on your package files:"
msgstr ""
"PyPIで使っている reStructuredText パーサは Sphinx **ではありません！** その"
"上、全ユーザの安全を確保するためにある種の URL やディレクティブ(例えば ``.. "
"raw::`` ディレクティブ)は禁止されていたり削除されたりしています。あなたの配布"
"物をアップロードしてみる **前に** :file:`setup.py` の中の brief/long "
"description が文法的に妥当かどうかを確かめるべきです。あなたのパッケージの"
"ファイル群に対して :std:doc:`twine check <index>` を走らせれば、それを確かめ"
"ることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:533
msgid "Create an account"
msgstr "アカウントを作成する"

#: ../source/guides/distributing-packages-using-setuptools.rst:535
msgid ""
"First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. "
"You can create an account `using the form on the PyPI website <https://pypi."
"org/account/register/>`_."
msgstr ""
"まず、 :term:`PyPI <Python Package Index (PyPI)>` のユーザアカウントが必要で"
"す。 `PyPIウェブサイトにあるフォームを使えば <https://pypi.org/account/"
"register/>`_ アカウントを作成することができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:539
msgid ""
"Now you'll create a PyPI `API token`_ so you will be able to securely upload "
"your project."
msgstr ""
"次に PyPI の `API トークン`_ を作成して、プロジェクトを安全にアップロードでき"
"るようにしましょう。"

#: ../source/guides/distributing-packages-using-setuptools.rst:542
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_; don't limit its scope to a particular project, since you are "
"creating a new project."
msgstr ""
"https://pypi.org/manage/account/#api-tokens and create へ行って、新しい `API "
"トークン`_ を作成してください; これから新しいプロジェクトを作成するわけですか"
"ら、スコープを特定のプロジェクトに限定しないようにしてください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:546
msgid ""
"**Don't close the page until you have copied and saved the token — you won't "
"see that token again.**"
msgstr ""
"**トークンをコピーして保存するまではページを閉じないでください -- トークンは"
"二度と表示されることがありません。**"

#: ../source/guides/distributing-packages-using-setuptools.rst:549
msgid ""
"To avoid having to copy and paste the token every time you upload, you can "
"create a :file:`$HOME/.pypirc` file:"
msgstr ""
":file:`$HOME/.pypirc` ファイルを作っておくことで、アップロードするたびにトー"
"クンをコピー・ペーストする手間を省くことができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:558
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""
"**このファイルにはトークンが平文で保存されていることに注意してください。**"

#: ../source/guides/distributing-packages-using-setuptools.rst:560
#: ../source/guides/migrating-to-pypi-org.rst:74
#: ../source/guides/migrating-to-pypi-org.rst:113
#: ../source/guides/using-testpypi.rst:84
msgid ""
"For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""
":file:`.pypirc` についてさらに詳しく知りたい場合は :ref:`specification "
"<pypirc>` を見てください。"

#: ../source/guides/distributing-packages-using-setuptools.rst:566
msgid "Upload your distributions"
msgstr "配布物をアップロードする"

#: ../source/guides/distributing-packages-using-setuptools.rst:568
msgid ""
"Once you have an account you can upload your distributions to :term:`PyPI "
"<Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""
"アカウントが入手できれば、 :ref:`twine` を使ってあなたの配布物を :term:`PyPI "
"<Python Package Index (PyPI)>` へアップロードすることができます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:571
msgid ""
"The process for uploading a release is the same regardless of whether or not "
"the project already exists on PyPI - if it doesn't exist yet, it will be "
"automatically created when the first release is uploaded."
msgstr ""
"リリースをアップロードする手続きは、そのプロジェクトがPyPIに既に存在していて"
"も存在していなくても同じです - もしまだ存在していなければ、最初にリリースが"
"アップロードされたときに自動的に作成されます。"

#: ../source/guides/distributing-packages-using-setuptools.rst:575
msgid ""
"For the second and subsequent releases, PyPI only requires that the version "
"number of the new release differ from any previous releases."
msgstr ""
"２回目やそれ以降のリリースで PyPI が要求するのは、新しいリリースのバージョン"
"番号が先行するすべてのリリースとは異なるものであることだけです。"

#: ../source/guides/distributing-packages-using-setuptools.rst:582
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is "
"the name of your project that you uploaded. It may take a minute or two for "
"your project to appear on the site."
msgstr ""
"``sampleproject`` のところをアップロードしているプロジェクトの名前に置き換え"
"るとして、 ``https://pypi.org/project/<sampleproject>`` に誘導されれば、あな"
"たのパッケージのアップロードは成功です。あなたのプロジェクトがサイト上に表示"
"されるまでには1,2分の時間がかかるかもしれません。"

#: ../source/guides/distributing-packages-using-setuptools.rst:589
#: ../source/tutorials/installing-packages.rst:670
msgid ""
"Depending on your platform, this may require root or Administrator access. :"
"ref:`pip` is currently considering changing this by `making user installs "
"the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""
"あなたのプラットフォームに依りますが、これにはrootまたはAdministratorの権限で"
"アクセスしなければならないかもしれません。 :ref:`pip` は現在、 `一般ユーザで"
"のインストールを規定動作にする案 <https://github.com/pypa/2pip/"
"issues/1668>`_ にあるように、この部分の変更を検討しています。"

#: ../source/guides/dropping-older-python-versions.rst:5
msgid "Dropping support for older Python versions"
msgstr "古いバージョンのPython へのサポートをやめる"

#: ../source/guides/dropping-older-python-versions.rst:7
msgid ""
"The ability to drop support for older Python versions is enabled by the "
"standard :ref:`core-metadata` 1.2 specification via the :ref:`\"Requires-"
"Python\" <core-metadata-requires-python>` attribute."
msgstr ""
"古いバージョンのPythonへのサポートを取りやめる能力については、標準的な :ref:"
"`core-metadata` 1.2 仕様の :ref:`Requires-Python <core-metadata-requires-"
"python>` アトリビュートで有効化されています。"

#: ../source/guides/dropping-older-python-versions.rst:9
msgid ""
"Metadata 1.2+ installers, such as Pip, will adhere to this specification by "
"matching the current Python runtime and comparing it with the required "
"version in the package metadata. If they do not match, it will attempt to "
"install the last package distribution that supported that Python runtime."
msgstr ""
"Pip のような Metadata 1.2+ のインストーラは、動作中の Python ランタイムのバー"
"ジョンとパッケージのメタデータで要求されているバージョンを比較突合すること"
"で、この仕様を遵守しようとします。もし両者が一致しなければ、その Python ラン"
"タイムでサポートされているパッケージ配布物の中で最新のものをインストールしよ"
"うと試みます。"

#: ../source/guides/dropping-older-python-versions.rst:12
msgid ""
"This mechanism can be used to drop support for older Python versions, by "
"amending the ``Requires-Python`` attribute in the package metadata."
msgstr ""
"パッケージのメタデータにある ``Requires-Python`` 属性を修正することで、古い"
"バージョンの Python へのサポートを削除するのにこのメカニズムを利用することが"
"できます。"

#: ../source/guides/dropping-older-python-versions.rst:15
msgid "Requirements"
msgstr "要求事項"

#: ../source/guides/dropping-older-python-versions.rst:17
msgid ""
"This workflow requires that the user installing the package uses Pip [#]_, "
"or another installer that supports the Metadata 1.2 specification."
msgstr ""
"このワークフローは、パッケージをインストールしようとするユーザが Pip か、また"
"は、Metadata 1.2 の仕様を満足する別のインストーラを使うことを要求します。"

#: ../source/guides/dropping-older-python-versions.rst:20
msgid "Dealing with the universal wheels"
msgstr "universal wheelsの取り扱い"

#: ../source/guides/dropping-older-python-versions.rst:22
msgid ""
"Traditionally, :ref:`setuptools` projects providing Python code that is "
"semantically compatible with both Python 2 and Python 3, produce :term:"
"`wheels <Wheel>` that have a ``py2.py3`` tag in their names. When dropping "
"support for Python 2, it is important not to forget to change this tag to "
"just ``py3``. It is often configured within :file:`setup.cfg` under the "
"``[bdist_wheel]`` section by setting ``universal = 1``."
msgstr ""
"伝統的には、Python 2 と Python 3 の両方に文法的な互換性のある Python ソース"
"コードを提供する :ref:`setuptools` プロジェクトは、 ``py2.py3`` というタグを"
"その名前の中に持つ :term:`wheels <Wheel>` を生成します。 Python 2 へのサポー"
"トをやめる時には、このタグをただの ``py3`` に変更するのを忘れないことが重要で"
"す。これは、しばしば、 :file:`setup.cfg` の中の ``[bdist_wheel]`` セクション"
"で ``universal=1`` として設定されています。"

#: ../source/guides/dropping-older-python-versions.rst:29
msgid ""
"If you use this method, either remove this option or section, or explicitly "
"set ``universal`` to ``0``:"
msgstr ""
"このメソッドを使うのであれば、このオプションないしセクションを削除するか、ま"
"たは、明示的に ``universal`` を ``0`` に設定してください。"

#: ../source/guides/dropping-older-python-versions.rst:41
msgid ""
"Regarding :ref:`deprecated <setup-py-deprecated>` direct ``setup.py`` "
"invocations, passing the ``--universal`` flag on the command line could "
"override this setting."
msgstr ""
"``setup.py`` から直接に呼び出すことは :ref:`非推奨 <setup-py-deprecated>` に"
"なっていて、コマンドラインで ``--universal`` フラグを渡すことでこの設定を上書"
"きできるでしょう。"

#: ../source/guides/dropping-older-python-versions.rst:45
msgid "Defining the Python version required"
msgstr "要求する Python のバージョンを定義する"

#: ../source/guides/dropping-older-python-versions.rst:48
msgid "1. Install twine"
msgstr "1. twine のインストール"

#: ../source/guides/dropping-older-python-versions.rst:50
msgid "Ensure that you have twine available at its latest version. Steps:"
msgstr "twine の最新版が利用可能であることを確実にしておきましょう。やり方は:"

#: ../source/guides/dropping-older-python-versions.rst:66
msgid "2. Specify the version ranges for supported Python distributions"
msgstr "2. サポートする Python 配布物のバージョンの範囲を指定する"

#: ../source/guides/dropping-older-python-versions.rst:68
msgid ""
"Set the version ranges declaring which Python distributions are supported "
"within your project's :file:`pyproject.toml`. The :ref:`requires-python` "
"configuration field corresponds to the :ref:`Requires-Python <core-metadata-"
"requires-python>` core metadata field:"
msgstr ""
"プロジェクトがどのバージョンの Python 配布物をサポートしているかを宣言する"
"バージョンレンジ <version range> を :file:`pyproject.toml` 内に設定しましょ"
"う。 :ref:`requires-python` 設定フィールドは、 :ref:`Requires-Python <core-"
"metadata-requires-python>` コアメタデータに対応しています:"

#: ../source/guides/dropping-older-python-versions.rst:80
msgid ""
"You can specify version ranges and exclusion rules (complying with the :ref:"
"`version-specifiers` specification), such as at least Python 3.9. Or, at "
"least Python 3.7 and beyond, skipping the 3.7.0 and 3.7.1 point releases:"
msgstr ""
"「少なくとも Python 3.9」のような、バージョンの範囲や除外のルールを指定するこ"
"とができます。あるいは、「少なくとも Python 3.7 かそれ以上、しかし、 3.7.0 "
"と 3.7.1 を除く」というポイントリリース:"

#: ../source/guides/dropping-older-python-versions.rst:89
msgid ""
"If using the :ref:`setuptools` build backend, consult the `dependency-"
"management`_ documentation for more options."
msgstr ""
":ref:`setuptools` ビルドバックエンドを使っているなら、もっと詳しいことは "
"`dependency-management`_ 説明文書に当たってみてください。"

#: ../source/guides/dropping-older-python-versions.rst:92
msgid ""
"Avoid adding upper bounds to the version ranges, e. g. ``\">= 3.8, < "
"3.10\"``. Doing so can cause different errors and version conflicts. See the "
"`discourse-discussion`_ for more information."
msgstr ""
"例えば ``\">=3.8, < 3.10\"`` のようにバージョン範囲に上限を加えることを避けま"
"しょう。そうすることで別のエラーやバージョンコンフリクトを引き起こすかもしれ"
"ません。もっと詳しくは、 `discourse-discussion`_ を見てください。"

#: ../source/guides/dropping-older-python-versions.rst:96
msgid "3. Validating the Metadata before publishing"
msgstr "3. 公開の前にメタデータを検証する"

#: ../source/guides/dropping-older-python-versions.rst:98
msgid ""
"Within a Python source package (the zip or the tar-gz file you download) is "
"a text file called PKG-INFO."
msgstr ""
"Python のソースコードパッケージ (あなたがダウンロードしたzipファイルやtar.gz"
"ファイル) の中には、PKG-INFO という名前のテキストファイルがあります。"

#: ../source/guides/dropping-older-python-versions.rst:100
msgid ""
"This file is generated by the :term:`build backend <Build Backend>` when it "
"generates the source package. The file contains a set of keys and values, "
"the list of keys is part of the PyPA standard metadata format."
msgstr ""
"このファイルは、ソースコードパッケージを生成するときに、 :term:`ビルドバック"
"エンド <Build Backend>` によって生成されます。このファイルには、一連のキーと"
"値を含んでいて、キーのリストは PyPA 標準メタデータフォーマットの一部です。"

#: ../source/guides/dropping-older-python-versions.rst:103
msgid "You can see the contents of the generated file like this:"
msgstr "生成されたファイルの内容はこのようになっています:"

#: ../source/guides/dropping-older-python-versions.rst:109
msgid "Validate that the following is in place, before publishing the package:"
msgstr "パッケージを公開する前に、以下のことが適切かどうかを検証してください。"

#: ../source/guides/dropping-older-python-versions.rst:111
msgid ""
"If you have upgraded correctly, the ``Metadata-Version`` value should be 1.2 "
"or higher."
msgstr ""
"アップグレードが正しく終われば、 ``Metadata-Version`` の値が 1.2 かそれ以上に"
"なっているはずです。"

#: ../source/guides/dropping-older-python-versions.rst:112
msgid ""
"The ``Requires-Python`` field is set and matches your specification in the "
"configuration file."
msgstr ""
"``Requires-Python`` フィールドが設定されていて、設定ファイルで指定したものに"
"一致しているはずです。"

#: ../source/guides/dropping-older-python-versions.rst:115
msgid "4. Publishing the package"
msgstr "4. パッケージを公開する"

#: ../source/guides/dropping-older-python-versions.rst:117
msgid "Proceed as suggested in :ref:`Uploading your Project to PyPI`."
msgstr ""
":ref:`プロジェクトを PyPI にアップロードする <Uploading your Project to "
"PyPI>` で示唆されたように進めましょう。"

#: ../source/guides/dropping-older-python-versions.rst:120
msgid "Dropping a Python version"
msgstr "Python のバージョンをサポートから外す"

#: ../source/guides/dropping-older-python-versions.rst:122
msgid ""
"In principle, at least metadata support for Python versions should be kept "
"as long as possible, because once that has been dropped, people still "
"depending on a version will be forced to downgrade. If however supporting a "
"specific version becomes a blocker for a new feature or other issues occur, "
"the metadata ``Requires-Python`` should be amended. Of course this also "
"depends on whether the project needs to be stable and well-covered for a "
"wider range of users."
msgstr ""
"人々がまだ依存しているバージョンが一旦ドロップされればダウングレードせざるを"
"得なくなるので、原則として、 Python のバージョンに対するメタデータのサポート"
"は可能な限り長く保たれるべきです。しかしながら、特定のバージョンをサポートす"
"ることが、新しい機能の阻害要因になるとか、他の問題が起きるとかする場合は、メ"
"タデータの ``Requires-Python`` は修正されるべきです。もちろん、これは、プロ"
"ジェクトが安定的で広範囲のユーザをよくカバーするか否かにも依存します。"

#: ../source/guides/dropping-older-python-versions.rst:128
msgid "Each version compatibility change should have its own release."
msgstr "バージョン互換性の変更は、それぞれ、それ自身のリリースを持つべきです。"

#: ../source/guides/dropping-older-python-versions.rst:132
msgid ""
"When dropping a Python version, it might also be rewarding to upgrade the "
"project's code syntax generally, apart from updating the versions used in "
"visible places (like the testing environment). Tools like pyupgrade_ or "
"`ruff <https://docs.astral.sh/ruff/linter/>`_ can automate some of this work."
msgstr ""
"Python バージョン (のサポート) を落とす時は、使われているバージョン群を (テス"
"ト用の環境のような) 目にみえる場所に使用するように更新することと同様に、プロ"
"ジェクトのソースコードのシンタックスを全般的に更新することが値打ちのあるもの"
"になるかもしれません。 pyupgrade_ や `ruff <https://docs.astral.sh/ruff/"
"linter/>`_ のようなツール類が、この作業の幾らかを自動化してくれるでしょう。"

#: ../source/guides/dropping-older-python-versions.rst:138
msgid "Support for the Metadata 1.2 specification has been added in Pip 9.0."
msgstr "メタデータ仕様 1.2 へのサポートは Pip 9.0 で追加されました。"

#: ../source/guides/hosting-your-own-index.rst:5
msgid "Hosting your own simple repository"
msgstr "あなた自身の単純なリポジトリをホストする"

#: ../source/guides/hosting-your-own-index.rst:8
msgid ""
"If you wish to host your own simple repository [1]_, you can either use a "
"software package like :doc:`devpi <devpi:index>` or you can simply create "
"the proper directory structure and use any web server that can serve static "
"files and generate an autoindex."
msgstr ""
"あなた自身の単純なリポジトリ [1]_ をホストしたいのであれば、 :doc:`devpi "
"<devpi:index>` のようなソフトウェアパッケージを使うこともできますし、単に "
"web サーバ上に適切なディレクトリを作成して静的ファイルを提供し自動でインデッ"
"クスを生成させることも可能です。"

#: ../source/guides/hosting-your-own-index.rst:13
msgid ""
"In either case, since you'll be hosting a repository that is likely not in "
"your user's default repositories, you should instruct them in your project's "
"description to configure their installer appropriately. For example with pip:"
msgstr ""
"どちらの場合でも、ユーザとしての既定のリポジトリではない場所をあなたのリポジ"
"トリにしようとしているのでしょうから、あなたのプロジェクトの説明にインストー"
"ラを適切に設定するように指図しておくべきでしょう。例えば pip なら:"

#: ../source/guides/hosting-your-own-index.rst:29
msgid ""
"In addition, it is **highly** recommended that you serve your repository "
"with valid HTTPS. At this time, the security of your user's installations "
"depends on all repositories using a valid HTTPS setup."
msgstr ""
"加えて、あなたのリポジトリを公開する場合はHTTPSで公開することが強く推奨されま"
"す。この時、ユーザがあなたのパッケージをインストールする際のセキュリティは、"
"すべてのリポジトリが適切なHTTPS設定であるか否かに依存します。"

#: ../source/guides/hosting-your-own-index.rst:35
msgid "\"Manual\" repository"
msgstr "\"手動\"リポジトリ"

#: ../source/guides/hosting-your-own-index.rst:37
msgid ""
"The directory layout is fairly simple, within a root directory you need to "
"create a directory for each project. This directory should be the :ref:"
"`normalized name <name-normalization>` of the project. Within each of these "
"directories simply place each of the downloadable files. If you have the "
"projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" (with the "
"version 0.1) You should end up with a structure that looks like::"
msgstr ""
"ディレクトリ構造は極めて単純で、ルートディレクトリ内に各プロジェクトを納めた"
"ディレクトリを作成する必要があります。このディレクトリは、プロジェクトの :"
"ref:`標準化された名前 <name-normalization>` になっているべきです。各プロジェ"
"クトのディレクトリには、それぞれダウンロード可能なファイルを置くだけで"
"す。\"Foo\" というプロジェクト (のバージョン 1.0 と 2.0) と \"bar\" というプ"
"ロジェクト (のバージョン 0.1) があるなら、ディレクトリ構造はこんなふうになる"
"でしょう::"

#: ../source/guides/hosting-your-own-index.rst:50
msgid ""
"Once you have this layout, simply configure your webserver to serve the root "
"directory with autoindex enabled. For an example using the built in Web "
"server in `Twisted`_, you would simply run ``twistd -n web --path .`` and "
"then instruct users to add the URL to their installer's configuration."
msgstr ""
"この配置ができあがったら、あとはルートディレクトリを自動インデックス付きで"
"ウェブサーバから提供するように設定するだけです。 `Twisted`_ の組み込みウェブ"
"サーバを使う例では、単に ``twisted -n web --path.`` を走らせておいて、ユーザ"
"に対してこのURLをインストーラの設定に加えるように指示するだけです。"

#: ../source/guides/hosting-your-own-index.rst:57
#: ../source/guides/index-mirrors-and-caches.rst:47
msgid "Existing projects"
msgstr "既存のプロジェクト"

#: ../source/guides/hosting-your-own-index.rst:63
msgid "Package upload"
msgstr "パッケージアップロード"

#: ../source/guides/hosting-your-own-index.rst:64
msgid "PyPI fall-through [2]_"
msgstr "PyPI フォールスルー [2]_"

#: ../source/guides/hosting-your-own-index.rst:65
#: ../source/guides/index-mirrors-and-caches.rst:56
#: ../source/guides/supporting-windows-using-appveyor.rst:146
msgid "Additional notes"
msgstr "補遺"

#: ../source/guides/hosting-your-own-index.rst:67
#: ../source/guides/index-mirrors-and-caches.rst:58
msgid ":ref:`devpi`"
msgstr ":ref:`devpi`"

#: ../source/guides/hosting-your-own-index.rst:68
#: ../source/guides/hosting-your-own-index.rst:69
#: ../source/guides/hosting-your-own-index.rst:75
#: ../source/guides/hosting-your-own-index.rst:79
#: ../source/guides/hosting-your-own-index.rst:99
#: ../source/guides/hosting-your-own-index.rst:120
#: ../source/guides/index-mirrors-and-caches.rst:59
#: ../source/guides/index-mirrors-and-caches.rst:60
#: ../source/guides/index-mirrors-and-caches.rst:66
#: ../source/guides/index-mirrors-and-caches.rst:67
#: ../source/guides/index-mirrors-and-caches.rst:74
#: ../source/guides/index-mirrors-and-caches.rst:78
#: ../source/guides/index-mirrors-and-caches.rst:80
#: ../source/guides/index-mirrors-and-caches.rst:85
#: ../source/guides/index-mirrors-and-caches.rst:86
#: ../source/guides/index-mirrors-and-caches.rst:90
#: ../source/guides/index-mirrors-and-caches.rst:92
#: ../source/guides/index-mirrors-and-caches.rst:96
#: ../source/guides/index-mirrors-and-caches.rst:98
#: ../source/guides/index-mirrors-and-caches.rst:102
#: ../source/guides/index-mirrors-and-caches.rst:104
#: ../source/guides/index-mirrors-and-caches.rst:108
#: ../source/guides/index-mirrors-and-caches.rst:110
msgid "✔"
msgstr "✔"

#: ../source/guides/hosting-your-own-index.rst:70
msgid ""
"multiple indexes with inheritance, with syncing, replication, fail-over; "
"mirroring"
msgstr "同期、複製、フェールオーバ、ミラーリングが可能な複数のインデックス"

#: ../source/guides/hosting-your-own-index.rst:73
#: ../source/guides/index-mirrors-and-caches.rst:71
msgid ":ref:`simpleindex`"
msgstr ":ref:`simpleindex`"

#: ../source/guides/hosting-your-own-index.rst:78
msgid ":ref:`pypiserver`"
msgstr ":ref:`pypiserver`"

#: ../source/guides/hosting-your-own-index.rst:83
msgid ":ref:`pypiprivate`"
msgstr ":ref:`pypiprivate`"

#: ../source/guides/hosting-your-own-index.rst:88
#: ../source/guides/index-mirrors-and-caches.rst:77
msgid ":ref:`pypicloud`"
msgstr ":ref:`pypicloud`"

#: ../source/guides/hosting-your-own-index.rst:91
msgid "unmaintained; also cached proxying; authentication, authorisation"
msgstr "メンテナンスされていない; またプロクシでキャッシュ; 認証、認可"

#: ../source/guides/hosting-your-own-index.rst:93
msgid ":ref:`pywharf`"
msgstr ":ref:`pywharf`"

#: ../source/guides/hosting-your-own-index.rst:96
msgid "unmaintained; serve files in GitHub"
msgstr "メンテナンスされていない; GitHub内のファイルを提供する"

#: ../source/guides/hosting-your-own-index.rst:98
#: ../source/guides/index-mirrors-and-caches.rst:83
msgid ":ref:`pulppython`"
msgstr ":ref:`pulppython`"

#: ../source/guides/hosting-your-own-index.rst:101
msgid "also mirroring, proxying; plugin for Pulp"
msgstr "また、ミラーリング、プロクシ利用; Pulp 用のプラグイン"

#: ../source/guides/hosting-your-own-index.rst:103
msgid ":ref:`pip2pi`"
msgstr ":ref:`pip2pi`"

#: ../source/guides/hosting-your-own-index.rst:106
msgid "also mirroring; manual synchronisation"
msgstr "また、ミラーリング; 手動の同期"

#: ../source/guides/hosting-your-own-index.rst:108
msgid ":ref:`dumb-pypi`"
msgstr ":ref:`dumb-pypi`"

#: ../source/guides/hosting-your-own-index.rst:111
msgid "not a server, but a static file site generator"
msgstr "サーバではなくて、静的ファイルのサイトのジェネレータ"

#: ../source/guides/hosting-your-own-index.rst:113
msgid ":ref:`httpserver`"
msgstr ":ref:`httpserver`"

#: ../source/guides/hosting-your-own-index.rst:116
msgid "standard-library"
msgstr "標準ライブラリ"

#: ../source/guides/hosting-your-own-index.rst:118
#: ../source/guides/index-mirrors-and-caches.rst:107
msgid "`Apache <https://httpd.apache.org/>`_"
msgstr "`Apache <https://httpd.apache.org/>`_"

#: ../source/guides/hosting-your-own-index.rst:121
#: ../source/guides/index-mirrors-and-caches.rst:111
msgid ""
"using `mod_rewrite <https://httpd.apache.org/docs/current/mod/mod_rewrite."
"html>`_ and `mod_cache_disk <https://httpd.apache.org/docs/current/mod/"
"mod_cache_disk.html>`_, you can cache requests to package indexes through an "
"Apache server"
msgstr ""
"`mod_rewrite <https://httpd.apache.org/docs/current/mod/mod_rewrite.html>`_ "
"および `mod_cache_disk <https://httpd.apache.org/docs/current/mod/"
"mod_cache_disk.html>`_ を用いて、Apache サーバ経由のパッケージインデックスへ"
"のリクエストをキャッシュすることができます"

#: ../source/guides/hosting-your-own-index.rst:131
msgid ""
"For complete documentation of the simple repository protocol, see :ref:"
"`simple repository API <simple-repository-api>`."
msgstr ""
"単純なリポジトリプロトコルの完全な説明文書としては、 :ref:`simple repository "
"API <simple-repository-api>` を見てください。"

#: ../source/guides/hosting-your-own-index.rst:134
msgid ""
"Can be configured to fall back to PyPI (or another package index) if a "
"requested package is missing."
msgstr ""
"要求されたパッケージが存在しなければ、 PyPI (もしくは他のパッケージインデック"
"ス) へフォールバックするように設定しておくことができます。"

#: ../source/guides/index.rst:4
msgid ""
"**Guides** are focused on accomplishing a specific task and assume that you "
"are already familiar with the basics of Python packaging. If you're looking "
"for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""
"**ガイド文書** は特定のタスクを達成することに重点を置くもので、読者が Python "
"のパッケージングの基礎について既に馴染みがあるものと仮定しています。パッケー"
"ジングの導入的な説明を探しているのであれば :doc:`/tutorials/index` を見てくだ"
"さい。"

#: ../source/guides/index-mirrors-and-caches.rst:5
msgid "Package index mirrors and caches"
msgstr "パッケージインデックスのミラーとキャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:8
msgid "2023-11-08"
msgstr "2023年11月8日"

#: ../source/guides/index-mirrors-and-caches.rst:10
msgid ""
"Mirroring or caching of PyPI (and other :term:`package indexes <Package "
"Index>`) can be used to speed up local package installation, allow offline "
"work, handle corporate firewalls or just plain Internet flakiness."
msgstr ""
"PyPI (あるいは他の :term:`パッケージインデックス <Package Index>`) のミラーや"
"キャッシュがあると、手元でパッケージをインストールするのが速くなったり、オフ"
"ラインでインストールできたり、会社のファイアウォール経由でもできたり、あるい"
"は、単純にインターネットがあてにならなくてもインストールできたりします。"

#: ../source/guides/index-mirrors-and-caches.rst:15
msgid "There are multiple classes of options in this area:"
msgstr "この領域のオプションには複数のクラスがあります:"

#: ../source/guides/index-mirrors-and-caches.rst:17
msgid "local/hosted caching of package indexes."
msgstr "パッケージインデックスのローカルまたはホストされたキャッシュ。"

#: ../source/guides/index-mirrors-and-caches.rst:19
msgid ""
"local/hosted mirroring of a package index. A mirror is a (whole or partial) "
"copy of a package index, which can be used in place of the original index."
msgstr ""
"パッケージインデックスのローカルまたはホストされたミラーリング。ミラーとは、"
"パッケージインデックスの (全体または一部の) コピーで、オリジナルのインデック"
"スの代わりに使うことができます。"

#: ../source/guides/index-mirrors-and-caches.rst:23
msgid ""
"private package index with fall-through to public package indexes (for "
"example, to mitigate dependency confusion attacks), also known as a proxy."
msgstr ""
"(例えば依存関係を混乱させる攻撃を緩和するための) 公開のパッケージインデックス"
"へフォールスルーする機能を持ったプライベートなパッケージインデックスで、プロ"
"クシーとも呼ばれる。"

#: ../source/guides/index-mirrors-and-caches.rst:29
msgid "Caching with pip"
msgstr "pipによるキャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:31
msgid ""
"pip provides a number of facilities for speeding up installation by using "
"local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""
"pip は、 :term:`パッケージ <Distribution Package>` のローカルキャッシュを使っ"
"て素早くインストールするためのいくつもの機能を提供します。"

#: ../source/guides/index-mirrors-and-caches.rst:34
msgid ""
":ref:`Fast & local installs <pip:installing from local packages>` by "
"downloading all the requirements for a project and then pointing pip at "
"those downloaded files instead of going to PyPI."
msgstr ""
"あるプロジェクトの依存先パッケージをすべてダウンロードし、 pip を PyPI の代わ"
"りにそれらダウンロード済みファイルに向けることによる :ref:`速くてローカルなイ"
"ンストール <pip:installing from local packages>` 。"

#: ../source/guides/index-mirrors-and-caches.rst:37
msgid ""
"A variation on the above which pre-builds the installation files for the "
"requirements using :ref:`python3 -m pip wheel <pip:pip wheel>`:"
msgstr ""
":ref:`python -m pip wheel <pip:pip wheel>` を用いて依存先パッケージのインス"
"トール用ファイルをあらかじめビルドしておくという上記のバリエーション:"

#: ../source/guides/index-mirrors-and-caches.rst:53
msgid "Cache"
msgstr "キャッシュ"

#: ../source/guides/index-mirrors-and-caches.rst:54
msgid "Mirror"
msgstr "ミラー"

#: ../source/guides/index-mirrors-and-caches.rst:55
msgid "Proxy"
msgstr "プロクシ"

#: ../source/guides/index-mirrors-and-caches.rst:62
msgid ""
"multiple indexes with inheritance; syncing, replication, fail-over; package "
"upload"
msgstr ""
"継承・同期・複製・フェイルオーバ・パッケージアップロードの機能を持つ複数のイ"
"ンデックス群"

#: ../source/guides/index-mirrors-and-caches.rst:65
msgid ":ref:`bandersnatch`"
msgstr ":ref:`bandersnatch`"

#: ../source/guides/index-mirrors-and-caches.rst:75
msgid "custom plugin enables caching; re-routing to other package indexes"
msgstr ""
"カスタムプラグインによってキャッシングや他のパッケージインデックスへのリルー"
"ティングが可能になります"

#: ../source/guides/index-mirrors-and-caches.rst:81
msgid "unmaintained; authentication, authorisation"
msgstr "保守されていない; 認証・認可"

#: ../source/guides/index-mirrors-and-caches.rst:87
msgid "plugin for Pulp; multiple proxied indexes; package upload"
msgstr ""
"Pulp 用のプラグイン; 複数のプロクシされたインデックス; パッケージアップロード"

#: ../source/guides/index-mirrors-and-caches.rst:89
msgid ":ref:`proxpi`"
msgstr ":ref:`proxpi`"

#: ../source/guides/index-mirrors-and-caches.rst:93
#: ../source/guides/index-mirrors-and-caches.rst:99
msgid "multiple proxied indexes"
msgstr "複数のプロクシされたインデックス群"

#: ../source/guides/index-mirrors-and-caches.rst:95
msgid ":ref:`nginx_pypi_cache`"
msgstr ":ref:`nginx_pypi_cache`"

#: ../source/guides/index-mirrors-and-caches.rst:101
msgid ":ref:`flaskpypiproxy`"
msgstr ":ref:`flaskpypiproxy`"

#: ../source/guides/index-mirrors-and-caches.rst:105
msgid "unmaintained"
msgstr "保守されていない"

#: ../source/guides/installing-scientific-packages.rst:5
msgid "Installing scientific packages"
msgstr "科学分野のパッケージをインストールする"

#: ../source/guides/installing-scientific-packages.rst:8
msgid ""
"Scientific software tends to have more complex dependencies than most, and "
"it will often have multiple build options to take advantage of different "
"kinds of hardware, or to interoperate with different pieces of external "
"software."
msgstr ""
"科学分野のソフトウェアは、他のほとんどのものよりも複雑な依存関係を持つことが"
"多く、異なる種類のハードウェアの利点を引き出すためや外部のソフトウェアのさま"
"ざまな部分と協調動作するためのオプションが複数存在することもしばしばです。"

#: ../source/guides/installing-scientific-packages.rst:13
msgid ""
"In particular, `NumPy <https://numpy.org/>`__, which provides the basis for "
"most of the software in the `scientific Python stack <https://scientific-"
"python.org>`_ can be configured to interoperate with different FORTRAN "
"libraries, and can take advantage of different levels of vectorized "
"instructions available in modern CPUs."
msgstr ""
"とりわけ `科学分野のPythonソフトウェア群 <https://scientific-python.org>`_ の"
"ほとんどのソフトウェアに基盤を提供する`NumPy <https://numpy.org/>`__ は、他"
"の FORTRAN ライブラリと協調動作したり現代的なCPUで利用可能なさまざまなレベル"
"のベクター演算命令を活用できるように構成可能です。"

#: ../source/guides/installing-scientific-packages.rst:19
msgid ""
"Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-built "
"32-bit and 64-bit binaries in the ``wheel`` format are available for all "
"major operating systems (Windows, macOS, and Linux) on PyPI. Note, however, "
"that on Windows, NumPy binaries are linked against the `ATLAS <https://math-"
"atlas.sourceforge.net/>`__ BLAS/LAPACK library, restricted to SSE2 "
"instructions, so they may not provide optimal linear algebra performance."
msgstr ""
"Numpy のバージョン 1.10.4 および SciPy のバージョン 1.0.0 以降は、主要なオペ"
"レーティングシステム (WindowsとmacOSとLinux)向けに32 ビットと 64 ビットのビル"
"ド済みバイナリが ``wheel`` 形式でPyPIに準備されています。ただ、Windowsでは、"
"SSE2命令セットに限定された `ATLAS <https://math-atlas.sourceforge.net/>`__ "
"BLAS/LAPACK ライブラリに NumPy がリンクされているので、線形代数のパフォーマン"
"スが最適化されていない可能性があります。"

#: ../source/guides/installing-scientific-packages.rst:26
msgid ""
"There are a number of alternative options for obtaining scientific Python "
"libraries (or any other Python libraries that require a compilation "
"environment to install from source and don't provide pre-built wheel files "
"on PyPI)."
msgstr ""
"科学分野の Python ライブラリ (または、ソースコードからインストールする際にコ"
"ンパイル環境を必要とするが、 PyPI にビルド済みの wheel ファイルが用意されてい"
"ないような、他の全ての Python ライブラリ) を手に入れるには他にも数多くの代替"
"方法があります。"

#: ../source/guides/installing-scientific-packages.rst:32
msgid "Building from source"
msgstr "ソースコードからビルドする"

#: ../source/guides/installing-scientific-packages.rst:34
msgid ""
"The same complexity which makes it difficult to distribute NumPy (and many "
"of the projects that depend on it) as wheel files also make them difficult "
"to build from source yourself. However, for intrepid folks that are willing "
"to spend the time wrangling compilers and linkers for both C and FORTRAN, "
"building from source is always an option."
msgstr ""
"NumPy (およびそれに依存するプロジェクトの多く) を wheel ファイルとして配布す"
"ることを難しくする同じ複雑さが、自分でソースコードから作成することをも困難に"
"しています。しかしながら、C言語やFORTRAN言語のコンパイラやリンカを説得するの"
"に喜んで時間を費やそうという勇敢な人々にとっては、ソースコードからビルドする"
"ことは常にひとつの選択肢です。"

#: ../source/guides/installing-scientific-packages.rst:42
msgid "Linux distribution packages"
msgstr "Linux 配布パッケージ"

#: ../source/guides/installing-scientific-packages.rst:44
msgid ""
"For Linux users, the system package manager will often have pre-compiled "
"versions of various pieces of scientific software, including NumPy and other "
"parts of the scientific Python stack."
msgstr ""
"Linux のユーザなら、システムのパッケージマネージャを使えば NumPy やその他の科"
"学分野のPythonソフトウェア群のコンパイル済みのパッケージが準備されていること"
"も多々あります。"

#: ../source/guides/installing-scientific-packages.rst:48
msgid ""
"If using versions which may be several months old is acceptable, then this "
"is likely to be a good option (just make sure to allow access to "
"distributions installed into the system Python when using virtual "
"environments)."
msgstr ""
"もし数ヶ月遅れでも構わないのであれば、これは良い選択肢でしょう (仮想環境を"
"使っている場合はシステムの Python にインストールされた配布物にアクセスできる"
"ようにしておくのを忘れないでください) 。"

#: ../source/guides/installing-scientific-packages.rst:54
msgid "Windows installers"
msgstr "Windows 版インストーラ"

#: ../source/guides/installing-scientific-packages.rst:56
msgid ""
"Many Python projects that don't (or can't) currently publish wheel files at "
"least publish Windows installers, either on PyPI or on their project "
"download page. Using these installers allows users to avoid the need to set "
"up a suitable environment to build extensions locally."
msgstr ""
"現時点で wheel ファイルを公開していない(または公開できない)多くの Python プロ"
"ジェクトでも、 PyPI 上か、または、そのプロジェクトのダウンロードページで、少"
"なくとも Windows 版インストーラを公開しています。このようなインストーラを使え"
"ば、(他言語)拡張をローカルでビルドするための適切な環境を準備する手間を省くこ"
"とができます。"

#: ../source/guides/installing-scientific-packages.rst:61
msgid ""
"The extensions provided in these installers are typically compatible with "
"the CPython Windows installers published on python.org."
msgstr ""
"このようなインストーラで用意されている(他言語)拡張は、たいてい、 python.org "
"で公開されている CPython Windows インストーラと互換性のある形で公開されていま"
"す。"

#: ../source/guides/installing-scientific-packages.rst:64
msgid ""
"As with Linux system packages, the Windows installers will only install into "
"a system Python installation - they do not support installation in virtual "
"environments. Allowing access to distributions installed into the system "
"Python when using virtual environments is a common approach to working "
"around this limitation."
msgstr ""
"Linux のシステムパッケージの時と同じく、Windows 版インストーラはシステムワイ"
"ドの Python 環境にしかインストールしません -- つまり、仮想環境へのインストー"
"ルはサポートしていないのです。この制約を回避するよくあるやり方は、仮想環境を"
"使っている時にシステムワイドの Python 環境にインストールされた配布物へのアク"
"セスを許可することです。"

#: ../source/guides/installing-scientific-packages.rst:70
msgid ""
"The :term:`Wheel` project also provides a :command:`wheel convert` "
"subcommand that can convert a Windows :command:`bdist_wininst` installer to "
"a wheel."
msgstr ""
":term:`Wheel` プロジェクトは、Windows :command:`bdist_wininst` インストーラ"
"を wheel に変換するサブコマンド :command:`wheel convert` も提供しています。"

#: ../source/guides/installing-scientific-packages.rst:77
msgid "macOS installers and package managers"
msgstr "macOS インストーラとパッケージマネージャ"

#: ../source/guides/installing-scientific-packages.rst:79
msgid ""
"Similar to the situation on Windows, many projects (including NumPy) publish "
"macOS installers that are compatible with the macOS CPython binaries "
"published on python.org."
msgstr ""
"Windows での状況と同様に、 (NumPy を含む) 多数のプロジェクトは、 python.org "
"で公開される macOS版の Python バイナリと互換性のある macOS 版インストーラを公"
"開しています。"

#: ../source/guides/installing-scientific-packages.rst:83
msgid ""
"macOS users also have access to Linux distribution style package managers "
"such as ``Homebrew``. The SciPy site has more details on using Homebrew to "
"`install SciPy on macOS <https://scipy.org/install/#macos>`_."
msgstr ""
"macOS のユーザは、 ``Homebrew`` のような Linux ディストロスタイルのパッケージ"
"マネージャも使うことができます。ScyPy サイトには、もっと詳しい Homebrew を"
"使って `SciPy を macOS にインストールする <https://scipy.org/install/"
"#macos>`_ 方法の説明があります。"

#: ../source/guides/installing-scientific-packages.rst:89
msgid "SciPy distributions"
msgstr "SciPy 配布物"

#: ../source/guides/installing-scientific-packages.rst:91
msgid ""
"The SciPy site lists `several distributions <https://scipy.org/install/>`_ "
"that provide the full SciPy stack to end users in an easy to use and update "
"format."
msgstr ""
"SciPy サイトには、利用・更新が簡単なフォーマットでエンドユーザ向けの SciPy の"
"全機能を提供する `いくつかの配布物 <https://scipy.org/install/>`_ のリストが"
"あります。"

#: ../source/guides/installing-scientific-packages.rst:96
msgid ""
"Some of these distributions may not be compatible with the standard ``pip`` "
"and ``virtualenv`` based toolchain."
msgstr ""
"これらの配布物の内のいくつかは、標準的な ``pip`` や ``virtualenv`` を基礎にし"
"たツールチェーンと互換性がないかもしれません。"

#: ../source/guides/installing-scientific-packages.rst:100
#: ../source/key_projects.rst:812
msgid "Spack"
msgstr "Spack"

#: ../source/guides/installing-scientific-packages.rst:101
msgid ""
"`Spack <https://github.com/spack/spack>`_ is a flexible package manager "
"designed to support multiple versions, configurations, platforms, and "
"compilers. It was built to support the needs of large supercomputing centers "
"and scientific application teams, who must often build software many "
"different ways. Spack is not limited to Python; it can install packages for "
"``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It is non-"
"destructive; installing a new version of one package does not break existing "
"installations, so many configurations can coexist on the same system."
msgstr ""
"`Spack <https://github.com/spack/spack>`_ は、複数のバージョン・設定・プラッ"
"トフォーム・コンパイラをサポートできるように設計されたパッケージマネージャで"
"す。大規模スーパーコンピュータセンタや科学分野のアプリケーションチームではあ"
"るソフトウェアを異なる方法でビルドする必要が多々ありますが、そのようなニーズ"
"を満たすように作られています。Spack は Python に限らず、 ``C`` ・ ``C++`` ・ "
"``Fortran`` ・ ``R`` やその他のプログラミング言語でも利用できます。Spackは破"
"壊的ではありません; というのは、あるパッケージの新しいバージョンをインストー"
"ルしても先にインストールされたものを壊すことはなく、非常に多くの設定(でインス"
"トールされたもの)が同一システム上で共存できるのです。"

#: ../source/guides/installing-scientific-packages.rst:110
msgid ""
"Spack offers a simple but powerful syntax that allows users to specify "
"versions and configuration options concisely. Package files are written in "
"pure Python, and they are templated so that it is easy to swap compilers, "
"dependency implementations (like MPI), versions, and build options with a "
"single package file.  Spack also generates *module* files so that packages "
"can be loaded and unloaded from the user's environment."
msgstr ""
"Spack は、ユーザがバージョンや設定のオプションを簡潔に表現する単純で力強い文"
"法を提供します。パッケージファイルは純 Python で書かれていて、コンパイラ・ "
"(MPI のような) 依存先の実装・バージョン・ビルドオプションをひとつのパッケージ"
"ファイルの中で容易に入れ替えられるようにテンプレート化されています。Spack "
"は、また、ユーザ環境からあるパッケージをロードしたりしなかったりできるように "
"*modules* ファイルを生成します。"

#: ../source/guides/installing-scientific-packages.rst:119
msgid "The conda cross-platform package manager"
msgstr "conda クロスプラットフォームパッケージマネージャ"

#: ../source/guides/installing-scientific-packages.rst:121
msgid ""
"``conda`` is an open source (BSD licensed) package management system and "
"environment management system that allows users to install multiple versions "
"of binary software packages and their dependencies, and easily switch "
"between them. It is a cross-platform tool working on Windows, MacOS, and "
"Linux. Conda can be used to package up and distribute all kinds of packages, "
"it is not limited to just Python packages. It has full support for native "
"virtual environments. Conda makes environments first-class citizens, making "
"it easy to create independent environments even for C libraries. It is "
"written in Python, but is Python-agnostic. Conda manages Python itself as a "
"package, so that :command:`conda update python` is possible, in contrast to "
"pip, which only manages Python packages."
msgstr ""
"``conda`` は、複数のバージョンのソフトウェアのバイナリパッケージやその依存先"
"パッケージをインストールして容易に切り替えて使えるようにする (BSDライセンス"
"の) オープンソースのパッケージマネジメントシステム兼環境管理システムです。こ"
"れは Windows・MacOS・Linuxで動作するクロスプラットフォームのツールです。"
"conda を使えばあらゆる種類のパッケージをまとめたり配布したりすることができ"
"て、 Python のパッケージだけには限りません。ネイティブの仮想環境を完全にサ"
"ポートしています。C 言語のライブラリさえも独立した環境を容易に生成できるよう"
"にすることで、conda は (仮想) 環境を一級市民にしています。Python で書かれてい"
"ていますが、Pythonに依存しているわけではありません。conda は Python そのもの"
"をパッケージのひとつとして扱うため :command:`conda update python` とすること"
"が可能で、Python のパッケージだけを扱う pip とは対照的です。"

#: ../source/guides/installing-scientific-packages.rst:133
msgid ""
"Anaconda `Anaconda <https://docs.anaconda.com/anaconda/>`_ is a Python "
"distribution published by Anaconda, Inc. It is a stable collection of Open "
"Source packages for big data and scientific use, and a collection of "
"Graphical Interface utilities for managing conda environments."
msgstr ""
"Anaconda `Anaconda <https://docs.anaconda.com/anaconda/>`_ は Anaconda, Inc. "
"社が公開した Python 配布物です。ビッグデータや科学分野向けの一連のオープン"
"ソースパッケージの安定版のコレクションであり、 conda 環境を管理する GUI の"
"ユーティリティのコレクションでもあります。"

#: ../source/guides/installing-scientific-packages.rst:135
msgid ""
"In addition to the full distribution provided by Anaconda, the conda package "
"manager itself is available in  `miniconda <https://docs.anaconda.com/"
"miniconda/>`_, `miniforge <https://github.com/conda-forge/miniforge>`_, and "
"`pixi <https://pixi.sh/>`_."
msgstr ""
"Anaconda が提供する完全版の配布物に加えて、 conda パッケージマネージャそれ自"
"身が `miniconda <https://docs.anaconda.com/miniconda/>`_ ・ `miniforge "
"<https://github.com/conda-forge/miniforge>`_ ・ `pixi <https://pixi.sh/>`_ か"
"ら利用可能です。"

#: ../source/guides/installing-scientific-packages.rst:138
msgid ""
"Conda packages are available on multiple channels on Anaconda.org, including "
"the default channel supported by Anaconda, Inc, the community supported "
"conda-forge channel, which provides a wide variety of pre-built packages, "
"and some domain-specific package collections."
msgstr ""
"Conda パッケージ群は、Anaconda Inc. がサポートするデフォルトのチャンネルや、"
"広範囲に渡るプリビルドパッケージや幾つかのドメイン特有のパッケージコレクショ"
"ンを提供しているところのコミュニティがサポートする conda-forge チャンネルを含"
"めて、 Anaconda.org の複数のチャンネルから利用可能です。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:4
msgid "Installing stand alone command line tools"
msgstr "スタンドアローンのコマンドラインツールをインストールする"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:6
msgid ""
"Many packages provide command line applications. Examples of such packages "
"are `mypy <https://github.com/python/mypy>`_, `flake8 <https://github.com/"
"PyCQA/flake8>`_, `black <https://github.com/psf/black>`_, and :ref:`pipenv`."
msgstr ""
"多くのパッケージは、コマンドラインアプリケーションを提供しています。そのよう"
"なパッケージの例としては、 `mypy <https://github.com/python/mypy>`_ ・ "
"`flake8 <https://github.com/PyCQA/flake8>`_ ・ `black <https://github.com/"
"psf/black>`_ ・ :ref:`pipenv` が挙げられます。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:12
msgid ""
"Usually you want to be able to access these applications from anywhere on "
"your system, but installing packages and their dependencies to the same "
"global environment can cause version conflicts and break dependencies the "
"operating system has on Python packages."
msgstr ""
"通常ならシステムのどこからでもこれらのアプリケーションにアクセスできるように"
"したいと思うでしょうが、パッケージとその依存先パッケージを同じグローバル環境"
"にインストールすると、バージョンの衝突を起こしてオペレーティングシステムが"
"持っている Python パッケージ間の依存関係を破壊してしまうかもしれません。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:17
msgid ""
":ref:`pipx` solves this by creating a virtual environment for each package, "
"while also ensuring that its applications are accessible through a directory "
"that is on your ``$PATH``. This allows each package to be upgraded or "
"uninstalled without causing conflicts with other packages, and allows you to "
"safely run the applications from anywhere."
msgstr ""
":ref:`pipx` は、 ``$PATH`` に含まれるディレクトリを通してアプリケーションにア"
"クセスできるようにしつつ各パッケージに仮想環境を作成することでこの問題を解決"
"します。こうすることで、各パッケージの更新や削除をしても他のパッケージには影"
"響を与えず、どこからでもアプリケーションを安全に走らせることができるようにで"
"きます。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:23
msgid "pipx only works with Python 3.6+."
msgstr "pipx は Python 3.6+ でのみ動作します。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:25
msgid "pipx is installed with pip:"
msgstr "pipx は pip と一緒にインストールされています:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:43
msgid ""
"``ensurepath`` ensures that the application directory is on your ``$PATH``. "
"You may need to restart your terminal for this update to take effect."
msgstr ""
"``ensurepath `` は、アプリケーションのあるディレクトリが ``$PATH`` に含まれる"
"ようにすることを保証します。この更新(訳注、``$PATH``の修正のこと)が効果を持つ"
"ようにするためにターミナルを再起動する必要があるかもしれません。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:46
msgid ""
"Now you can install packages with ``pipx install`` and run the package's "
"applications(s) from anywhere."
msgstr ""
"これで、 ``pipx install`` を使ってパッケージをインストールすることができるよ"
"うになり、どこからでもそのパッケージのアプリケーションを起動することができる"
"ようになりました。"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:54
#: ../source/specifications/entry-points.rst:114
msgid "For example:"
msgstr "例:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:76
msgid ""
"To see a list of packages installed with pipx and which applications are "
"available, use ``pipx list``:"
msgstr ""
"pipx でインストールされたパッケージのリストやどんなアプリケーションが使用可能"
"かを見るためには、 ``pipx list`` を使ってください:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:100
msgid "To upgrade or uninstall a package:"
msgstr "パッケージを更新またはアンインストールするには:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:107
msgid "pipx can be upgraded or uninstalled with pip:"
msgstr "pipx は pip を使って更新やアンインストールができます:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:123
msgid ""
"pipx also allows you to install and run the latest version of an application "
"in a temporary, ephemeral environment. For example:"
msgstr ""
"また、pipx ならアプリケーションの最新版を一時的で短命の環境にインストールして"
"動作させることができます。例えば:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:130
msgid "To see the full list of commands pipx offers, run:"
msgstr ""
"pipx で使える(サブ)コマンドの完全なリストを見たければ、次のようにしてくださ"
"い:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:136
msgid "You can learn more about pipx at https://pipx.pypa.io/."
msgstr "pipx については、 https://pipx.pypa.io/ でもっと学べます。"

#: ../source/guides/installing-using-linux-tools.rst:5
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr ""
"Linux パッケージマネージャを使って pip/setuptools/wheel をインストールする"

#: ../source/guides/installing-using-linux-tools.rst:8
msgid "2021-07-26"
msgstr "2021-07-26"

#: ../source/guides/installing-using-linux-tools.rst:10
msgid ""
"This section covers how to install :ref:`pip`, :ref:`setuptools`, and :ref:"
"`wheel` using Linux package managers."
msgstr ""
"この節では、Linux のパッケージマネージャを使って :ref:`pip` ・ :ref:"
"`setuptools` ・ :ref:`wheel` をインストールする方法について説明します。"

#: ../source/guides/installing-using-linux-tools.rst:13
msgid ""
"If you're using a Python that was downloaded from `python.org <https://www."
"python.org>`_, then this section does not apply.  See the :ref:"
"`installing_requirements` section instead."
msgstr ""
"`python.org <https://www.python.org>`_ からダウンロードした Python を使ってい"
"るなら、この節の議論はあてはまりません。代わりに :ref:"
"`installing_requirements` 節を見てください。"

#: ../source/guides/installing-using-linux-tools.rst:17
msgid ""
"Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, "
"and :ref:`wheel` supported by a specific Linux Distribution to be outdated "
"by the time it's released to the public, and updates generally only occur "
"for security reasons, not for feature updates.  For certain Distributions, "
"there are additional repositories that can be enabled to provide newer "
"versions.  The repositories we know about are explained below."
msgstr ""
"特定の Linux ディストロでサポートされているバージョンの :ref:`pip` ・ :ref:"
"`setuptools` ・ :ref:`wheel` が公開時点で既に旧バージョンになってしまっている"
"のに、更新されるのはセキュリティが理由の時だけで機能追加があっても更新されな"
"い、というのはよくあることです。ディストロの中にはより新しいバージョンを提供"
"することができる追加のリポジトリが存在する場合もあります。以下では、そのよう"
"なリポジトリのうちの既知のものを説明します。"

#: ../source/guides/installing-using-linux-tools.rst:24
msgid ""
"Also note that it's somewhat common for Distributions to apply patches for "
"the sake of security and normalization to their own standards.  In some "
"cases, this can lead to bugs or unexpected behaviors that vary from the "
"original unpatched versions.  When this is known, we will make note of it "
"below."
msgstr ""
"また、ディストロがセキュリティ上の理由やディストロ自身の標準に合致させる目的"
"でパッチを適用することはそれなりによくあります。いくつかのケースでは、オリジ"
"ナルの未パッチのバージョンとは異なるバグや期待に反した動きにつながることもあ"
"ります。わかっているものについては、以下に注記します。"

#: ../source/guides/installing-using-linux-tools.rst:31
msgid "Fedora"
msgstr "Fedora"

#: ../source/guides/installing-using-linux-tools.rst:37
msgid ""
"To learn more about Python in Fedora, please visit the `official Fedora "
"docs`_, `Python Classroom`_ or `Fedora Loves Python`_."
msgstr ""
"Fedora における Python についてもっと学ぶには、 `official Fedora docs`_ ・ "
"`Python Classroom`_ ・ `Fedora Loves Python`_ を見てください。"

#: ../source/guides/installing-using-linux-tools.rst:45
msgid "CentOS/RHEL"
msgstr "CentOS/RHEL"

#: ../source/guides/installing-using-linux-tools.rst:47
msgid ""
"CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core "
"repositories, although :ref:`setuptools` is installed by default."
msgstr ""
"CentOS と RHEL は、そのコアリポジトリでは :ref:`pip` や :ref:`wheel` を提供し"
"ていませんが、 :ref:`setuptools` はデフォルトでインストールされます。"

#: ../source/guides/installing-using-linux-tools.rst:50
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr ""
"システムに付属の Python 用に pip や wheel をインストールするには、二つのやり"
"方があります:"

#: ../source/guides/installing-using-linux-tools.rst:52
msgid ""
"Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using "
"`these instructions <https://docs.fedoraproject.org/en-US/epel/getting-"
"started/>`__. On EPEL 7, you can install pip and wheel like so:"
msgstr ""
"`これらの指示 <https://docs.fedoraproject.org/en-US/epel/getting-started>`__ "
"を使って、 `EPEL リポジトリ <https://fedoraproject.org/wiki/EPEL>`_ を有効に"
"してください。 EPEL 7 では、pip と wheel をこんなふうにインストールできます:"

#: ../source/guides/installing-using-linux-tools.rst:61
msgid ""
"Since EPEL only offers extra, non-conflicting packages, EPEL does not offer "
"setuptools, since it's in the core repository."
msgstr ""
"EPEL はシステムに欠けていて衝突しないパッケージだけを提供しているので、コアリ"
"ポジトリに入っている setuptools は EPEL にはありません。"

#: ../source/guides/installing-using-linux-tools.rst:65
msgid ""
"Enable the `PyPA Copr Repo <https://copr.fedorainfracloud.org/coprs/pypa/"
"pypa/>`_ using `these instructions <https://fedoraproject.org/wiki/"
"Infrastructure/Fedorahosted-retirement>`__ [1]_. You can install pip and "
"wheel like so:"
msgstr ""
"`これらの指示 <https://fedoraproject.org/wiki/Infrastructure/Fedorahosted-"
"retirement>`__ [1]_ に従って `PyPA Copr Repo <https://copr.fedorainfracloud."
"org/coprs/pypa/pypa/>`_ を有効にしてください。 pip と wheel はこうやってイン"
"ストールできます:"

#: ../source/guides/installing-using-linux-tools.rst:74
msgid "To additionally upgrade setuptools, run:"
msgstr "さらに setuptools を更新するには、次のようにしてください:"

#: ../source/guides/installing-using-linux-tools.rst:81
msgid ""
"To install pip, wheel, and setuptools, in a parallel, non-system environment "
"(using yum) then there are two options:"
msgstr ""
"システムの環境とは別に (yum を使って) pip ・ wheel ・ setuptools をインストー"
"ルするには、ふたつのやり方があります:"

#: ../source/guides/installing-using-linux-tools.rst:85
msgid ""
"Use the \"Software Collections\" feature to enable a parallel collection "
"that includes pip, setuptools, and wheel."
msgstr ""
"pip ・ setuptools ・ wheel を含むコレクションを (システムとは) 並行に有効化し"
"て \"ソフトウェアコレクション\" 機能を使ってください。"

#: ../source/guides/installing-using-linux-tools.rst:88
msgid ""
"For Redhat, see here: https://developers.redhat.com/products/"
"softwarecollections/overview"
msgstr ""
"Red Hat についてはこちらを見てください: https://developers.redhat.com/"
"products/softwarecollections/overview"

#: ../source/guides/installing-using-linux-tools.rst:90
msgid "For CentOS, see here: https://github.com/sclorg"
msgstr "CentOS の場合は、こちらを見てください: https://github.com/sclorg"

#: ../source/guides/installing-using-linux-tools.rst:92
msgid "Be aware that collections may not contain the most recent versions."
msgstr ""
"コレクションに含まれているバージョンが最新版であるとは限らない点に注意してく"
"ださい。"

#: ../source/guides/installing-using-linux-tools.rst:94
msgid ""
"Enable the `IUS repository <https://ius.io/setup>`_ and install one of the "
"`parallel-installable <https://ius.io/usage#parallel-installable-packages>`_ "
"Pythons, along with pip, setuptools, and wheel, which are kept fairly up to "
"date."
msgstr ""
"`IUS リポジトリ <https://ius.io/setup>`_ を有効にして、かなり最新版に近い状態"
"に維持されている pip ・ setuptools ・ wheel と一緒に `並列インストール可能 "
"<https://ius.io/usage#parallel-installable-packages>`_ な Python の内のひとつ"
"をインストールしてください。"

#: ../source/guides/installing-using-linux-tools.rst:100
msgid "For example, for Python 3.4 on CentOS7/RHEL7:"
msgstr "例えば、CentOS7/RHEL7 での Python 3.4 については:"

#: ../source/guides/installing-using-linux-tools.rst:108
msgid "openSUSE"
msgstr "openSUSE"

#: ../source/guides/installing-using-linux-tools.rst:118
msgid "Debian/Ubuntu and derivatives"
msgstr "Debian/Ubuntu とその派生物"

#: ../source/guides/installing-using-linux-tools.rst:120
msgid "Firstly, update and refresh repository lists by running this command:"
msgstr ""
"第一に、このコマンドを実行してリポジトリリストを更新し情報を新しくしてくださ"
"い。"

#: ../source/guides/installing-using-linux-tools.rst:129
msgid ""
"Recent Debian/Ubuntu versions have modified pip to use the `\"User Scheme\" "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by default, "
"which is a significant behavior change that can be surprising to some users."
msgstr ""
"最近のバージョンの Debian/Ubuntu は、 pip がデフォルトで `\"User Scheme\" "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ を使うように修正"
"されていますが、これはユーザの一部を驚かせるような重要な動作の変更に当たるで"
"しょう。"

#: ../source/guides/installing-using-linux-tools.rst:135
msgid "Arch Linux"
msgstr "Arch Linux"

#: ../source/guides/installing-using-linux-tools.rst:143
msgid ""
"Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so the "
"only option is to manually place the repo files as described."
msgstr ""
"現時点では、 CentOS/RHEL には yum プラグインの \"copr\" が存在しないので、後"
"述するように手動でリポジトリファイルを配置するしかありません。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:2
msgid "Install packages in a virtual environment using pip and venv"
msgstr "pip と venv を使って仮想環境にパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:4
msgid ""
"This guide discusses how to create and activate a virtual environment using "
"the standard library's virtual environment tool :ref:`venv` and install "
"packages. The guide covers how to:"
msgstr ""
"このガイド文書では、標準ライブラリの仮想環境ツール :ref:`venv` を使って仮想環"
"境を作成し活性化する方法と、パッケージをインストールする方法について議論しま"
"す。このガイド文書は次のようなことを行う方法をカバーします:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:8
msgid "Create and activate a virtual environment"
msgstr "仮想環境を作成し活性化する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:9
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:153
msgid "Prepare pip"
msgstr "pip の準備をする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:10
msgid "Install packages into a virtual environment using the ``pip`` command"
msgstr "``pip`` コマンドを使って仮想環境にパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:11
msgid "Use and create a requirements file"
msgstr "requirements ファイルを使う、作成する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:14
msgid ""
"This guide applies to supported versions of Python, currently 3.8 and higher."
msgstr ""
"このガイド文書は、サポートされている Python のバージョン、現時点では 3.8 およ"
"びこれ以降のものに適用されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:18
msgid ""
"This guide uses the term **package** to refer to a :term:`Distribution "
"Package`, which commonly is installed from an external host. This differs "
"from the term :term:`Import Package` which refers to import modules in your "
"Python source code."
msgstr ""
"この文書では、 **パッケージ** という用語を通常は外部のホストからインストール"
"される :term:`配布パッケージ <Distribution Package>` の意味で使います。これ"
"は Python ソースコードでモジュールをインポートするという意味で使われる :term:"
"`インポートパッケージ <Import Package>` とは異なります。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:25
msgid ""
"This guide has the prerequisite that you are using an official Python "
"version obtained from <https://www.python.org/downloads/>. If you are using "
"your operating system's package manager to install Python, please ensure "
"that Python is installed before proceeding with these steps."
msgstr ""
"このガイド文書は、 <https://www.python.org/downloads/> から取得する公式の "
"Python を使っていることを前提条件にしています。Python をインストールするのに"
"オペレーティングシステムのパッケージマネージャを使っているのであれば、ここに"
"述べるようなステップを進める前に、Python がインストールされていることを確実に"
"してください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:32
msgid "Create and Use Virtual Environments"
msgstr "仮想環境を構築し使用する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:35
msgid "Create a new virtual environment"
msgstr "新しい仮想環境を作成する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:37
msgid ""
":ref:`venv` (for Python 3) allows you to manage separate package "
"installations for different projects. It creates a \"virtual\" isolated "
"Python installation. When you switch projects, you can create a new virtual "
"environment which is isolated from other virtual environments. You benefit "
"from the virtual environment since packages can be installed confidently and "
"will not interfere with another project's environment."
msgstr ""
":ref:`venv` (Python 3 用) を使うと、異なるプロジェクトにそれぞれ別のパッケー"
"ジをインストールして管理できます。(仮想環境は) 互いに影響を与えない\"仮想的な"
"\" Python インストール環境を生成します。別のプロジェクトに移動すると、他の仮"
"想環境から隔離された新しい仮想環境を作成することができます。仮想環境を使うこ"
"とで、パッケージ群を自信を持ってインストールすることができ、他のプロジェクト"
"の環境には干渉しないであろうことから、あなたは利益を得ることができます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:45
msgid ""
"It is recommended to use a virtual environment when working with third party "
"packages."
msgstr "第三者のパッケージ群を使う時には仮想環境を用いることが推奨されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:48
msgid ""
"To create a virtual environment, go to your project's directory and run the "
"following command. This will create a new virtual environment in a local "
"folder named ``.venv``:"
msgstr ""
"仮想環境を作成するには、プロジェクトのディレクトリへ行って次のようなコマンド"
"を実行してください。これによって、ローカルの ``.venv`` フォルダに新しい仮想環"
"境ができるでしょう:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:64
msgid ""
"The second argument is the location to create the virtual environment. "
"Generally, you can just create this in your project and call it ``.venv``."
msgstr ""
"二つ目の引数は、仮想環境を作成するべき場所の指定です。一般的には、プロジェク"
"トのルートディレクトリに ``.venv`` という名前で作成します。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:67
msgid ""
"``venv`` will create a virtual Python installation in the ``.venv`` folder."
msgstr ""
"``venv`` は仮想的な Python を ``.venv`` ディレクトリの中にインストールするで"
"しょう。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:69
msgid ""
"You should exclude your virtual environment directory from your version "
"control system using ``.gitignore`` or similar."
msgstr ""
"仮想環境のディレクトリは、 ``.gitignore`` やその類似物を使ってバージョン管理"
"システムから除外しておくべきです。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:74
msgid "Activate a virtual environment"
msgstr "仮想環境を活性化する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:76
msgid ""
"Before you can start installing or using packages in your virtual "
"environment you'll need to ``activate`` it. Activating a virtual environment "
"will put the virtual environment-specific ``python`` and ``pip`` executables "
"into your shell's ``PATH``."
msgstr ""
"仮想環境に (依存先の) パッケージをインストールして使用できるようにするには、"
"まず *仮想環境* を ``activate`` しなければなりません。仮想環境を活性化する"
"と、その仮想環境に特有の ``python`` と ``pip`` の実行ファイルがシェルの "
"``PATH`` 変数に追加されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:93
msgid ""
"To confirm the virtual environment is activated, check the location of your "
"Python interpreter:"
msgstr ""
"仮想環境が activate されたことを確認するには、 Python インタープリタの場所を"
"確かめましょう:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:108
msgid ""
"While the virtual environment is active, the above command will output a "
"filepath that includes the ``.venv`` directory, by ending with the following:"
msgstr ""
"仮想環境が active である間は、上記のコマンドは ``.venv`` ディレクトリを含む"
"ファイルパスを出力することでしょう、つまり以下のようになって終了します:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:124
msgid ""
"While a virtual environment is activated, pip will install packages into "
"that specific environment. This enables you to import and use packages in "
"your Python application."
msgstr ""
"仮想環境が active である間は、pip はパッケージをその仮想環境内にインストール"
"します。これによって、あなたの Python アプリケーションからそのパッケージをイ"
"ンポートして使用することができるようになります。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:130
msgid "Deactivate a virtual environment"
msgstr "仮想環境を非活性化 <deactivate> する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
msgid ""
"If you want to switch projects or leave your virtual environment, "
"``deactivate`` the environment:"
msgstr ""
"プロジェクトを切り替えたい、あるいは、仮想環境から離脱したい時は、仮想環境を "
"``deactivate`` してください:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:140
msgid ""
"Closing your shell will deactivate the virtual environment. If you open a "
"new shell window and want to use the virtual environment, reactivate it."
msgstr ""
"シェルを終了すれば、仮想環境を非活性化 <deactivate> することになるでしょう。"
"もし、新しいシェル窓を開いて、そこで仮想環境を使いたい時は、再活性化 "
"<reactivate> してください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:145
msgid "Reactivate a virtual environment"
msgstr "仮想環境を再活性化 <reactivate> する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:147
msgid ""
"If you want to reactivate an existing virtual environment, follow the same "
"instructions about activating a virtual environment. There's no need to "
"create a new virtual environment."
msgstr ""
"既存の仮想環境を活性化 <activate> したい場合は、仮想環境の活性化に関する上述"
"のやり方に従ってください。新しい仮想環境を作成する必要はありません。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:155
msgid ""
":ref:`pip` is the reference Python package manager. It's used to install and "
"update packages into a virtual environment."
msgstr ""
":ref:`pip` は Python の参照モデルとなるパッケージマネージャです。仮想環境内で"
"パッケージのインストールや更新に用いられます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:161
msgid ""
"The Python installers for macOS include pip. On Linux, you may have to "
"install an additional package such as ``python3-pip``. You can make sure "
"that pip is up-to-date by running:"
msgstr ""
"MacOS 用の Python インストーラは pip を含んでいます。Linux では、 ``python3-"
"pip`` のような追加のパッケージをインストールしなければならないかもしれませ"
"ん。以下のようにすると pip が最新版であることを確実にすることができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:170
msgid ""
"Afterwards, you should have the latest version of pip installed in your user "
"site:"
msgstr ""
"それから、ユーザサイトには最新版の pip がインストールされているはずです:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:179
msgid ""
"The Python installers for Windows include pip. You can make sure that pip is "
"up-to-date by running:"
msgstr ""
"Windows 用の Python インストーラは pip を含んでいます。以下のようにすると "
"pip が最新版であることを確実にすることができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:187
msgid "Afterwards, you should have the latest version of pip:"
msgstr "その後、pip が最新版になっているはずです:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:195
msgid "Install packages using pip"
msgstr "pip を使ってパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:197
msgid ""
"When your virtual environment is activated, you can install packages. Use "
"the ``pip install`` command to install packages."
msgstr ""
"仮想環境が活性化状態にある時には、パッケージ群をインストールすることができま"
"す。パッケージをインストールするには ``pip install`` コマンドを使ってくださ"
"い。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:201
msgid "Install a package"
msgstr "パッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:203
msgid ""
"For example, let's install the `Requests`_ library from the :term:`Python "
"Package Index (PyPI)`:"
msgstr ""
"例として、 :term:`Python Package Index (PyPI)` から `Requests`_ ライブラリを"
"インストールしてみましょう:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:218
msgid ""
"pip should download requests and all of its dependencies and install them:"
msgstr ""
"pip が requests とその依存先パッケージをすべてダウンロードしてインストールす"
"るはずです:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:239
msgid "Install a specific package version"
msgstr "特定のバージョンのパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:241
msgid ""
"pip allows you to specify which version of a package to install using :term:"
"`version specifiers <Version Specifier>`. For example, to install a specific "
"version of ``requests``:"
msgstr ""
":term:`バージョン指定子 <VersionSpecifire>` を使えば、 pip でパッケージのバー"
"ジョンを指定してインストールすることができます。例えば、 ``requests`` の特定"
"のバージョンをインストールするなら:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:257
msgid "To install the latest ``2.x`` release of requests:"
msgstr "requests の最新の ``2.x`` リリースをインストールするには:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:271
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""
"``--pre`` フラグを使ってパッケージのリリース前のバージョンをインストールする"
"には:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:287
msgid "Install extras"
msgstr "(パッケージの) extra 部分をインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:289
msgid ""
"Some packages have optional `extras`_. You can tell pip to install these by "
"specifying the extra in brackets:"
msgstr ""
"必須ではない `extra`_ 部分を持つものがパッケージの中にはあります。extra の名"
"前を角括弧([, ])の中に書くことで pip にインストールするように指示することがで"
"きます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:309
msgid "Install a package from source"
msgstr "ソースコードからパッケージをインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:311
msgid ""
"pip can install a package directly from its source code. For example, to "
"install the source code in the ``google-auth`` directory:"
msgstr ""
"pip は、ソースコードから直接にパッケージをインストールすることができます。例"
"えば、 ``google-auth`` ディレクトリの中にあるソースコードをインストールするに"
"は:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:328
msgid ""
"Additionally, pip can install packages from source in :doc:`development mode "
"<setuptools:userguide/development_mode>`, meaning that changes to the source "
"directory will immediately affect the installed package without needing to "
"re-install:"
msgstr ""
"さらに、 pip は :doc:`開発モード <setuptools:userguide/development_mode>` で"
"ソースコードからパッケージをインストールすることができます。つまり、ソース"
"コードを修正すると、再インストールしなくても、すぐにインストール済みのパッ"
"ケージに反映されます。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:347
msgid "Install from version control systems"
msgstr "バージョン管理システムからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:349
msgid ""
"pip can install packages directly from their version control system. For "
"example, you can install directly from a git repository:"
msgstr ""
"pip は、バージョン管理システムから直接に、パッケージをインストールすることが"
"できます。例えば、git リポジトリから直接にインストールするには:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:356
msgid ""
"For more information on supported version control systems and syntax, see "
"pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"サポートされているバージョン管理システムや文法について、詳しくは :ref:`VCS サ"
"ポート <pip:VCS Support>` の pip の説明文書を見てください。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:361
msgid "Install from local archives"
msgstr "ローカルアーカイブからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:363
msgid ""
"If you have a local copy of a :term:`Distribution Package`'s archive (a zip, "
"wheel, or tar file) you can install it directly with pip:"
msgstr ""
"もし :term:`配布パッケージ <Distribution Package>` のアーカイブ ( zip や "
"wheel や tar ファイル) をローカルに持っているなら、 pip でそこから直接にイン"
"ストールすることができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:378
msgid ""
"If you have a directory containing archives of multiple packages, you can "
"tell pip to look for packages there and not to use the :term:`Python Package "
"Index (PyPI)` at all:"
msgstr ""
"複数のパッケージのアーカイブを置いたディレクトリを pip に探索させるようにし"
"て、:term:`Python パッケージインデックス <Python Package Index (PyPI)>` を全"
"く利用しないということも可能です:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:394
msgid ""
"This is useful if you are installing packages on a system with limited "
"connectivity or if you want to strictly control the origin of distribution "
"packages."
msgstr ""
"この機能は、限定的なインターネット接続しか得られないシステムでパッケージをイ"
"ンストールする際や、配布物パッケージの出自を厳密に管理したい時には便利です。"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:400
msgid "Install from other package indexes"
msgstr "他のインデックスサイトからインストールする"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:402
msgid ""
"If you want to download packages from a different index than the :term:"
"`Python Package Index (PyPI)`, you can use the ``--index-url`` flag:"
msgstr ""
":term:`Python パッケージインデックス <Python Package Index (PyPI)>` 以外のと"
"ころからパッケージをダウンロードしたいのであれば、 ``--index-url`` オプション"
"でできます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:417
msgid ""
"If you want to allow packages from both the :term:`Python Package Index "
"(PyPI)` and a separate index, you can use the ``--extra-index-url`` flag "
"instead:"
msgstr ""
":term:`Python パッケージインデックス <Python Package Index (PyPI)>` と別のイ"
"ンデックスを同時に使いたいのであれば、 ``--extra-index-url`` オプションででき"
"ます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:434
#: ../source/tutorials/installing-packages.rst:393
msgid "Upgrading packages"
msgstr "パッケージを更新する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:436
msgid ""
"pip can upgrade packages in-place using the ``--upgrade`` flag. For example, "
"to install the latest version of ``requests`` and all of its dependencies:"
msgstr ""
"pip に ``--upgrade`` オプションを与えるとパッケージの入れ替え更新ができます。"
"例えば、 ``requests`` とその依存先パッケージの最新版をインストールしたいのな"
"ら:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:452
msgid "Using a requirements file"
msgstr "requirements ファイルを使う"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:454
msgid ""
"Instead of installing packages individually, pip allows you to declare all "
"dependencies in a :ref:`Requirements File <pip:Requirements Files>`. For "
"example you could create a :file:`requirements.txt` file containing:"
msgstr ""
"パッケージをひとつひとつインストールする代わりに、pip では :ref:"
"`Requirements ファイル <pip:Requirements Files>` にすべての依存先パッケージを"
"列挙しておくことができます。例えば、 :file:`requirements.txt` を下記を含むよ"
"うに作成しておいて:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:463
msgid ""
"And tell pip to install all of the packages in this file using the ``-r`` "
"flag:"
msgstr ""
"このファイルに書いてあるパッケージを全てインストールするようにと、 ``-r`` オ"
"プションを与えることで pip に指示します:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:478
msgid "Freezing dependencies"
msgstr "依存関係を凍結する"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:480
msgid ""
"Pip can export a list of all installed packages and their versions using the "
"``freeze`` command:"
msgstr ""
"Pip では、 ``freeze`` コマンドを使うことで、インストール済みの全パッケージの"
"バージョン付きのリストを取り出すことができます:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:495
msgid "Which will output a list of package specifiers such as:"
msgstr "それは、次に挙げるようなパッケージ指定子のリストを出力します:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:511
msgid ""
"The ``pip freeze`` command is useful for creating :ref:`pip:Requirements "
"Files` that can re-create the exact versions of all packages installed in an "
"environment."
msgstr ""
"``pip freeze`` コマンドは、環境内にインストール済みのすべてのパッケージの正確"
"なバージョンを再生成することができる :ref:`pip:Requirements Files` を作成する"
"のに便利に使えます。"

#: ../source/guides/installing-using-virtualenv.rst:2
msgid "Installing packages using virtualenv"
msgstr "virtualenv を使ってパッケージをインストールする"

#: ../source/guides/installing-using-virtualenv.rst:4
msgid ""
"This guide discusses how to install packages using :ref:`pip` and :ref:"
"`virtualenv`, a tool to create isolated Python environments."
msgstr ""
"このガイド文書では、:ref:`pip` と隔離された Python 環境を作成するツールである"
"ところの :ref:`virtualenv` を使ってパッケージをインストールする方法について議"
"論します。"

#: ../source/guides/installing-using-virtualenv.rst:8
msgid ""
"This \"how to\" guide on installing packages and using :ref:`virtualenv` is "
"under development. Please refer to the :ref:`virtualenv` documentation for "
"details on installation and usage."
msgstr ""
"パッケージをインストールすることと :ref:`virtualenv` を使うことに関するこの "
"\"how to\" ガイドは、作成途中です。:ref:`virtualenv` の説明文書にインストール"
"方法や使い方について詳しく出ていますので、そちらもご覧ください。"

#: ../source/guides/installing-using-virtualenv.rst:13
msgid ""
"This doc uses the term **package** to refer to a :term:`Distribution "
"Package`  which is different from an :term:`Import Package` that which is "
"used to import modules in your Python source code."
msgstr ""
"この文書では **パッケージ** という用語を :term:`配布パッケージ <Distribution "
"Package>` の意味で使いますが、これは Python ソースコードでモジュールをイン"
"ポートするという意味で使われる :term:`パッケージインポート <Import Package>` "
"とは異なります。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:6
msgid "Licensing examples and user scenarios"
msgstr "ライセンシングの例とユーザシナリオ"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:9
msgid ""
":pep:`639` has specified the way to declare a project's license and paths to "
"license files and other legally required information. This document aims to "
"provide clear guidance how to migrate from the legacy to the standardized "
"way of declaring licenses. Make sure your preferred build backend supports :"
"pep:`639` before trying to apply the newer guidelines."
msgstr ""
":pep:`639` では、プロジェクトの来船を宣言する方法やライセンスファイルへのパ"
"ス、そして、その他の法的に要求される情報を仕様化しています。この説明文書は、"
"レガシーなライセンス宣言から標準化されたそれへどのようにして移行するのかに関"
"する明確なガイダンスを提供することを目的としています。より新しいガイダンスを"
"適用しようと試みる前に、好みのビルドバックエンドが :pep:`639` をサポートして"
"いることを確認してください。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:18
msgid "Licensing Examples"
msgstr "ライセンシングの例"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:23
msgid "Basic example"
msgstr "基本的な例"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:25
msgid ""
"The Setuptools project itself, as of `version 75.6.0 <setuptools7560_>`__, "
"does not use the ``License`` field in its own project source metadata. "
"Further, it no longer explicitly specifies ``license_file``/"
"``license_files`` as it did previously, since Setuptools relies on its own "
"automatic inclusion of license-related files matching common patterns, such "
"as the :file:`LICENSE` file it uses."
msgstr ""
"Setuptools プロジェクトそれ自体は、 `version 75.6.0 <setuptools7560_>`__ 時点"
"で、自身のプロジェクトソースコードのメタデータ内の ``License`` フィールドを"
"使っていません。さらに、共通のパターンにマッチさせることで現在使用している :"
"file:`LICENSE` のようなライセンスに関係するファイル群を自動的に含める自身の仕"
"組みに立脚しているので、以前にはそうしていましたがもはや ``license_file`` / "
"``license_files`` を明示的に指定することもしていません。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:32
msgid ""
"It includes the following license-related metadata in its :file:`pyproject."
"toml`:"
msgstr ""
"以下のようなライセンスに関連するメタデータを :file:`pyproject.toml` の中に含"
"みます:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:42
msgid "The simplest migration to PEP 639 would consist of using this instead:"
msgstr "PEP 639 への最も単純な移行は、代わりにこれを使うことから構成されます:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:49
msgid "Or, if the project used :file:`setup.cfg`, in its ``[metadata]`` table:"
msgstr ""
"あるいは、プロジェクトで :file:`setup.cfg` を使っているなら、その中の "
"``[metadata]`` テーブルで:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:56
msgid "The output Core Metadata for the distribution packages would then be:"
msgstr ""
"配布物パッケージのためのコアとなるメタデータの出力はこんなふうになるでしょう:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:63
msgid ""
"The :file:`LICENSE` file would be stored at :file:`/setuptools-{VERSION}/"
"LICENSE` in the sdist and :file:`/setuptools-{VERSION}.dist-info/licenses/"
"LICENSE` in the wheel, and unpacked from there into the site directory (e."
"g. :file:`site-packages/`) on installation; :file:`/` is the root of the "
"respective archive and ``{VERSION}`` the version of the Setuptools release "
"in the Core Metadata."
msgstr ""
":file:`LICENSE` ファイルは、 sdist 内なら :file:`/setuptools-{VERSION}/"
"LICENSE` に、 wheel 内なら :file:`/setuptools-{VERSION}.dist-info/licenses/"
"LICENSE` に、そこから展開されるとインストール先のサイトディレクトリ (例えば :"
"file:`site-packages/`) に置かれることでしょう; ここで :file:`/` はそれぞれの"
"アーカイブのルートディレクトリであり、 ``{VERSION}`` はコアとなるメタデータ内"
"の Setuptools のリリースのバージョンです。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:73
msgid "Advanced example"
msgstr "先進的な例"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:75
msgid ""
"Suppose Setuptools were to include the licenses of the third-party projects "
"that are vendored in the :file:`setuptools/_vendor/` and :file:"
"`pkg_resources/_vendor/` directories; specifically:"
msgstr ""
"仮に Setuptools が、 :file:`setuptools/_vendor/` と :file:`pkg_resources/"
"_vendor/` のディレクトリ内に第三者のプロジェクトのライセンスを包含していたと"
"しましょう; 特にこの場合は:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:86
msgid "The license expressions for these projects are:"
msgstr "これらのプロジェクトに対するライセンス条項は:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:95
msgid ""
"A comprehensive license expression covering both Setuptools proper and its "
"vendored dependencies would contain these metadata, combining all the "
"license expressions into one. Such an expression might be:"
msgstr ""
"Setuptools 純正のものとベンダーが取り込んだものの両方をカバーするこみいったラ"
"イセンス条項をすべてひとつにまとめて、これらのメタデータを包含することになる"
"でしょう。そのような条項はこんなものになるでしょう:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:103
msgid ""
"In addition, per the requirements of the licenses, the relevant license "
"files must be included in the package. Suppose the :file:`LICENSE` file "
"contains the text of the MIT license and the copyrights used by Setuptools, "
"``pyparsing``, ``more_itertools`` and ``ordered-set``; and the :file:"
"`LICENSE*` files in the :file:`setuptools/_vendor/packaging/` directory "
"contain the Apache 2.0 and 2-clause BSD license text, and the Packaging "
"copyright statement and `license choice notice <packaginglicense_>`__."
msgstr ""
"加えて、ライセンスの要求事項次第で、パッケージ内に適切なライセンスファイルが"
"含まれていなければなりません。 :file:`LICENSE` ファイルには Setuptools や "
"``pyparsing`` や ``more_itertools`` や ``ordered-set`` が使用する MIT ライセ"
"ンスとコピーライトが含まれているものと思ってください; そして、:file:"
"`setuptools/_vendor/packaging/` ディレクトリの :file:`LICENSE*` ファイル群に"
"は Apache 2.0 と 2 項の BSD ライセンスの文言があり、Packaging コピーライト文"
"言や `ライセンス選択通知 <packaginglicense_>`__ があるものと思ってください。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:111
msgid ""
"Specifically, we assume the license files are located at the following paths "
"in the project source tree (relative to the project root and :file:"
"`pyproject.toml`):"
msgstr ""
"明確にいうと、ライセンスファイル群はプロジェクトソースコードツリー内の以下の "
"(プロジェクトルートと :file:`pyproject.toml` からの相対) パスに位置するものと"
"仮定しています:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:122
msgid "Putting it all together, our :file:`pyproject.toml` would be:"
msgstr ""
"これらをすべて一緒にすると、 :file:`pyproject.toml` はこんなふうになるでしょ"
"う:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:133
msgid ""
"Or alternatively, the license files can be specified explicitly (paths will "
"be interpreted as glob patterns):"
msgstr ""
"あるいは、別の方法としては、ライセンスファイル群を明示的に示すこともできます "
"(パスはglobパターンとして解釈されるでしょう):"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:147
msgid "If our project used :file:`setup.cfg`, we could define this in :"
msgstr ""
":file:`setup.cfg` をプロジェクトで使っているなら、こんなふうに定義することが"
"できます:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:159
msgid ""
"With either approach, the output Core Metadata in the distribution would be:"
msgstr ""
"どちらのアプローチでも、配布物内のコアとなるメタデータの出力はこんな風になる"
"でしょう:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:170
msgid ""
"In the resulting sdist, with :file:`/` as the root of the archive and "
"``{VERSION}`` the version of the Setuptools release specified in the Core "
"Metadata, the license files would be located at the paths:"
msgstr ""
"結果として生成される sdist の中には、 :file:`/` をアーカイブのルートディレク"
"トリとし、 ``{VERSION}`` をコアとなるメタデータの中で指定された Setuptools の"
"バージョン番号として、ライセンスファイル群が次のようなパスに配置されるでしょ"
"う:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:181
msgid ""
"In the built wheel, with :file:`/` being the root of the archive and "
"``{VERSION}`` as the previous, the license files would be stored at:"
msgstr ""
"ビルド済みの wheel では、 :file:`/` をルートディレクトリとし、 ``{VERSION}`` "
"を先述の通りとして、ライセンスファイル群は次の場所に保存されるでしょう:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:191
msgid ""
"Finally, in the installed project, with :file:`site-packages/` being the "
"site dir and ``{VERSION}`` as the previous, the license files would be "
"installed to:"
msgstr ""
"最後に、インストールされたプロジェクトでは、 :file:`site-packages/` をサイト"
"ディレクトリとし、 ``{VERSION}`` を先述の通りとして、ライセンスファイル群は次"
"の場所にインストールされるでしょう:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:203
msgid "Expression examples"
msgstr "表現 <Expression> の例"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:205
msgid "Some additional examples of valid ``License-Expression`` values:"
msgstr "いくつかの追加の ``License-Expression`` の正当な値の例:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:220
msgid "User Scenarios"
msgstr "ユーザシナリオ"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:222
msgid ""
"The following covers the range of common use cases from a user perspective, "
"providing guidance for each. Do note that the following should **not** be "
"considered legal advice, and readers should consult a licensed legal "
"practitioner in their jurisdiction if they are unsure about the specifics "
"for their situation."
msgstr ""
"以下では、それぞれにガイダンスを提供しながら、ユーザ視点からのよくあるユース"
"ケースをカバーします。以下に述べることを法律上の推奨事項であると見做すべきで"
"は **ない** ことを銘記するとともに、読者は、それぞれの状況に応じた細部につい"
"て確信を持てないならば、それを法律上の管轄範囲とするライセンスを持った法律実"
"務家に相談するべきす。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:230
msgid "I have a private package that won't be distributed"
msgstr "配布するつもりのないプライベートなパッケージがあります"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:232
msgid ""
"If your package isn't shared publicly, i.e. outside your company, "
"organization or household, it *usually* isn't strictly necessary to include "
"a formal license, so you wouldn't necessarily have to do anything extra here."
msgstr ""
"そのパッケージが、例えば会社や組織あるいは家庭の外に公開・共有されていないな"
"ら、 *通常は* 厳格に公式のライセンス (ファイル) を含める必要があるわけではあ"
"りませんし、だからここで何か追加の作業をする必要があるわけではないでしょう。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:236
msgid ""
"However, it is still a good idea to include ``LicenseRef-Proprietary`` as a "
"license expression in your package configuration, and/or a copyright "
"statement and any legal notices in a :file:`LICENSE.txt` file in the root of "
"your project directory, which will be automatically included by packaging "
"tools."
msgstr ""
"しかしながら、それでも、パッケージングツール群によって自動的に取り込まれるで"
"あろうプロジェクトのルートディレクトリの :file:`LICENSE.txt` ファイルの中に、"
"パッケージの設定の中にライセンス条項として ``LicenseRef-Proprietary`` や著作"
"権情報やその他の法的通知を含めておくことは良い考えです。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:244
msgid "I just want to share my own work without legal restrictions"
msgstr "自分の作品を法的制限なしに共有したいだけです"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:246
msgid ""
"While you aren't required to include a license, if you don't, no one has "
"`any permission to download, use or improve your work "
"<dontchoosealicense_>`__, so that's probably the *opposite* of what you "
"actually want. The `MIT license <chooseamitlicense_>`__ is a great choice "
"instead, as it's simple, widely used and allows anyone to do whatever they "
"want with your work (other than sue you, which you probably also don't want)."
msgstr ""
"ライセンスを含めておくように要求されてはいない一方で、含めておかなければ皆が "
"`その作品のダウンロード、使用、または改良の許可なし <dontchoosealicense_>`__ "
"の状態になりますが、それは多分、作者が実際に望んでいることとは *真逆* のこと"
"でしょう。 `MIT ライセンス <chooseamitlicense_>`__ は、簡明で広く使われており"
"作品に対して誰でも (多分作者も望まないでしょうが、作者相手に訴訟を起こす以外"
"の) どんなことでも許容するので、その代替として偉大な選択肢です。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:253
msgid ""
"To apply it, just paste `the text <chooseamitlicense_>`__ into a file named :"
"file:`LICENSE.txt` at the root of your repo, and add the year and your name "
"to the copyright line. Then, just add ``license = \"MIT\"`` under "
"``[project]`` in your :file:`pyproject.toml` if your packaging tool supports "
"it, or in its config file/section. You're done!"
msgstr ""
"これを適用するには、単にリポジトリのルートディレクトリにある :file:`LICENSE."
"txt` と名付けられたファイルに `テキスト <chooseamitlicense_>`__ を貼り付け"
"て、年とあなたの名前をコピーライトの行に追加して下さい。それから、パッケージ"
"ングツールがサポートしている場合は ``license = \"MIT\"`` を :file:`pyproject."
"toml` の中の ``[project]`` の下か、あるいは、設定ファイル・節の中に追加してく"
"ださい。これで出来上がりです！"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:261
msgid "I want to distribute my project under a specific license"
msgstr "プロジェクトを特定のライセンスの下で配布したい"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:263
msgid ""
"To use a particular license, simply paste its text into a :file:`LICENSE."
"txt` file at the root of your repo, if you don't have it in a file starting "
"with :file:`LICENSE` or :file:`COPYING` already, and add ``license = "
"\"LICENSE-ID\"`` under ``[project]`` in your :file:`pyproject.toml` if your "
"packaging tool supports it, or else in its config file. You can find the "
"``LICENSE-ID`` and copyable license text on sites like `ChooseALicense "
"<choosealicenselist_>`__ or `SPDX <spdxlist_>`__."
msgstr ""
"特定のライセンスを使用するには、もし :file:`LICENSE` または :file:`COPYING` "
"で始まるファイルを既に置いているのでなければ、単にリポジトリのルートディレク"
"トリにある :file:`LICENSE.txt` ファイルの中にそのテキストを貼り付けて、 使っ"
"ているパッケージングツールがサポートしているなら :file:`pyproject.toml` の中"
"の ``[project]`` の下に ``license = \"LICENSE-ID\"`` を追加するか、そうでなけ"
"れば設定ファイルの中に追加すれば良いだけです。 `ChooseALicense "
"<choosealicenselist_>`__ や `SPDX <spdxlist_>`__ のようなサイトに行けば、 "
"``LICENSE-ID`` とコピー可能なライセンス条項を見つけることができるでしょう。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:272
msgid ""
"Many popular code hosts, project templates and packaging tools can add the "
"license file for you, and may support the expression as well in the future."
msgstr ""
"多くの人気のあるソースコードホスト・プロジェクトテンプレート・パッケージング"
"ツールによってライセンスファイルを加えることができ、将来に渡って表現をサポー"
"トするでしょう。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:277
msgid "I maintain an existing package that's already licensed"
msgstr "既にライセンスが付与された既存パッケージを維持管理しています"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:279
msgid ""
"If you already have license files and metadata in your project, you should "
"only need to make a couple of tweaks to take advantage of the new "
"functionality."
msgstr ""
"ライセンスファイルやプロジェクト内のメタデータが既に存在しているなら、新機能"
"の利点を得るためには2,3の捻りを加えるだけで良いはずです。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:283
msgid ""
"In your project config file, enter your license expression under ``license`` "
"(``[project]`` table in :file:`pyproject.toml`), or the equivalent for your "
"packaging tool, and make sure to remove any legacy ``license`` table subkeys "
"or ``License ::`` classifiers. Your existing ``license`` value may already "
"be valid as one (e.g. ``MIT``, ``Apache-2.0 OR BSD-2-Clause``, etc); "
"otherwise, check the `SPDX license list <spdxlist_>`__ for the identifier "
"that matches the license used in your project."
msgstr ""
"プロジェクト設定ファイルにおいて、ライセンス条項を ``license`` (:file:"
"`pyproject.toml` の ``[project]`` テーブル) の下か、使っているパッケージング"
"ツールでの相当する場所に置き、古いやり方である ``license`` テーブルサブキー"
"や ``License::`` 分類子を取り除くのを忘れないでください。既存の ``license`` "
"値は、そのままでも正当なもの (例えば ``MIT`` や ``Apache-2.0 OR BSD-2-"
"Clause`` 等) かもしれません; そうでなければ、そのプロジェクトで採用しているラ"
"イセンスに合致する識別子を `SPDX ライセンスリスト <spdxlist_>`__ で確認して下"
"さい。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:292
msgid ""
"Make sure to list your license files under ``license-files`` under "
"``[project]`` in :file:`pyproject.toml` or else in your tool's configuration "
"file."
msgstr ""
":file:`pyproject.toml` の中の ``[project]`` の下の ``license-files`` か、使用"
"しているツールの設定ファイルに、ライセンスファイル群を列挙しておくのを忘れな"
"いでください。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:296
msgid ""
"See the :ref:`licensing-example-basic` for a simple but complete real-world "
"demo of how this works in practice. See also the best-effort guidance on how "
"to translate license classifiers into license expression provided by the :"
"pep:`639` authors: `Mapping License Classifiers to SPDX Identifiers "
"<mappingclassifierstospdx_>`__. Packaging tools may support automatically "
"converting legacy licensing metadata; check your tool's documentation for "
"more information."
msgstr ""
"これが実際にどのように動作するのかに関する、簡明ではあるが一通り揃った実世界"
"でのデモが、 :ref:`licensing-example-basic` に出ています。また、ライセンス分"
"類子からライセンス条項へ対応付けるやり方に関するベストエフォートのガイダンス"
"が :pep:`639` の著者達によって提供された `ライセンス分類子から SPDX 識別子へ "
"<mappingclassifierstospdx_>`__ にありますので、こちらもご覧ください。パッケー"
"ジングツールが、レガシーのライセンスメタデータを自動的に変換する機能を持って"
"いるかもしれませんので、さらなる情報を得るために使っているツールの説明文書を"
"調べて下さい。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:306
msgid "My package includes other code under different licenses"
msgstr "私のパッケージには異なるライセンスの他のソースコードが含まれています"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:308
msgid ""
"If your project includes code from others covered by different licenses, "
"such as vendored dependencies or files copied from other open source "
"software, you can construct a license expression to describe the licenses "
"involved and the relationship between them."
msgstr ""
"プロジェクトが、提供された依存関係ないし他のオープンソースソフトウェアからコ"
"ピーされたファイル群のような、相異なるライセンスでカバーされたソースコードを"
"含んでいるなら、関与するライセンスとそれらの間の関係を記述するために、ライセ"
"ンス条項を構築することができます。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:314
msgid ""
"In short, ``License-1 AND License-2`` mean that *both* licenses apply to "
"your project, or parts of it (for example, you included a file under another "
"license), and ``License-1 OR License-2`` means that *either* of the licenses "
"can be used, at the user's option (for example, you want to allow users a "
"choice of multiple licenses). You can use parenthesis (``()``) for grouping "
"to form expressions that cover even the most complex situations."
msgstr ""
"端的に言えば、 ``License-1 AND License-2`` では、 *両方の* ライセンスか、また"
"は、その一部 (例えば、同梱されたあるファイルがもう一つの方のライセンスの下に"
"ある) がプロジェクトに適用され、 ``License-1 OR License-2`` では、ユーザの選"
"択によって、 *いずれか一方の* ライセンス (例えば、複数のライセンスから一つを"
"選ぶことをユーザに許したい) を適用しても構いません。もっとも込み入った状況で"
"さえもカバーできる表現を組み立てるためのグループ化のために括弧 (``()``) を使"
"うことができます。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:322
msgid ""
"In your project config file, enter your license expression under ``license`` "
"(``[project]`` table of :file:`pyproject.toml`), or the equivalent for your "
"packaging tool, and make sure to remove any legacy ``license`` table subkeys "
"or ``License ::`` classifiers."
msgstr ""
"プロジェクトの設定ファイルで、 (:file:`pyproject.toml` の ``[project]`` テー"
"ブルの) ``license`` の下にライセンス表現を入れるか、または、使用しているパッ"
"ケージングツールの同等物を入れるか、いずれかを行なって、旧来の ``license`` "
"テーブルサブキーや ``License::`` 分類子を削除するのを忘れないでください。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:328
msgid ""
"Also, make sure you add the full license text of all the licenses as files "
"somewhere in your project repository. List the relative path or glob "
"patterns to each of them under ``license-files`` under ``[project]`` in :"
"file:`pyproject.toml` (if your tool supports it), or else in your tool's "
"configuration file."
msgstr ""
"また、すべてのライセンスの全文をプロジェクトリポジトリのどこかにファイルの形"
"で追加しておくのを忘れないでください。 (ツールが対応しているなら) :file:"
"`pyproject.toml` 内の ``[project]`` の下の ``license-files`` の下に、それら一"
"つひとつの相対パスか glob パターンを列挙するか、使用しているツールの設定ファ"
"イルに列挙して下さい。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:334
msgid ""
"As an example, if your project was licensed MIT but incorporated a vendored "
"dependency (say, ``packaging``) that was licensed under either Apache 2.0 or "
"the 2-clause BSD, your license expression would be ``MIT AND (Apache-2.0 OR "
"BSD-2-Clause)``. You might have a :file:`LICENSE.txt` in your repo root, and "
"a :file:`LICENSE-APACHE.txt` and :file:`LICENSE-BSD.txt` in the :file:"
"`_vendor/` subdirectory, so to include all of them, you'd specify "
"``[\"LICENSE.txt\", \"_vendor/packaging/LICENSE*\"]`` as glob patterns, or "
"``[\"LICENSE.txt\", \"_vendor/LICENSE-APACHE.txt\", \"_vendor/LICENSE-BSD."
"txt\"]`` as literal file paths."
msgstr ""
"例として、もしプロジェクトが MIT ライセンスを適用していて、しかし、他所から提"
"供された依存関係 (ここでは ``packaging`` としましょう) が Apache 2.0 もしく"
"は ２条項 BSD でライセンスされているなら、ライセンス表現は ``MIT AND "
"(Apache-2.0 OR BSD-2-Clause)`` のようになるでしょう。すべてのライセンス全文を"
"リポジトリに入れておくために、リポジトリのルートディレクトリに :file:"
"`LICENSE.txt` を置き、 :file:`_vendor/` サブディレクトリの下に :file:"
"`LICENSE-APACHE.txt` と :file:`LICENSE-BSD.txt` を置くでしょうし、 glob パ"
"ターンとして ``[\"LICENSE.txt\", \"_vendor/packaging/LICENSE*\"]`` のように指"
"定するか、あるいは、リテラルのファイルパスとして ``[\"LICENSE.txt\", "
"\"_vendor/LICENSE-APACHE.txt\", \"_vendor/LICENSE-BSD.txt\"]`` のように指定す"
"ることでしょう。"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:345
msgid ""
"See a fully worked out :ref:`licensing-example-advanced` for an end-to-end "
"application of this to a real-world complex project, with many technical "
"details, and consult a `tutorial <spdxtutorial_>`__ for more help and "
"examples using SPDX identifiers and expressions."
msgstr ""
"これを現実世界の複雑なプロジェクト向けに完全に作業を尽くした、エンドトゥーエ"
"ンドなアプリケーションのための :ref:`licensing-example-advanced` を、多くの技"
"術面での詳細とともに見てほしいのと、さらなる手助けや SPDX の識別子と表現を"
"使った例を `チュートリアル <spdxtutorial_>`__ で当たってみて下さい。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:2
msgid "Making a PyPI-friendly README"
msgstr "PyPI によく合う README を作る"

#: ../source/guides/making-a-pypi-friendly-readme.rst:4
msgid ""
"README files can help your users understand your project and can be used to "
"set your project's description on PyPI. This guide helps you create a README "
"in a PyPI-friendly format and include your README in your package so it "
"appears on PyPI."
msgstr ""
"README ファイルは、あなたのパッケージのユーザがプロジェクトを理解するのを助"
"け、プロジェクトの説明をするのに使われています。このガイドでは、PyPI によく合"
"う形で README を作成するのを助け、あなたのパッケージの README が PyPI で表示"
"されるようにします。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:9
msgid "Creating a README file"
msgstr "README ファイルを作成する"

#: ../source/guides/making-a-pypi-friendly-readme.rst:11
msgid ""
"README files for Python projects are often named ``README``, ``README.txt``, "
"``README.rst``, or ``README.md``."
msgstr ""
"Python プロジェクトにおける READMEファイルは、しばしば ``README`` ・ "
"``README.txt`` ・ ``README.rst`` ・ ``README.md`` などと命名されます。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:13
msgid ""
"For your README to display properly on PyPI, choose a markup language "
"supported by PyPI. Formats supported by `PyPI's README renderer <https://"
"github.com/pypa/readme_renderer>`_ are:"
msgstr ""
"あなたの README を PyPI で正しく表示するためには、PyPI がサポートするマーク"
"アップ言語を選択する必要があります。 `PyPI の README レンダラ <https://"
"github.com/pypa/readme_renderer>`_ としてサポートされているのは:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:16
msgid "plain text"
msgstr "プレーンテキスト"

#: ../source/guides/making-a-pypi-friendly-readme.rst:17
msgid ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (without "
"Sphinx extensions)"
msgstr ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (Sphinx 拡張な"
"し)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:18
msgid ""
"Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by "
"default, or `CommonMark <https://commonmark.org/>`_)"
msgstr ""
"マークダウン (デフォルトでは `GitHub Flavored Markdown <https://github."
"github.com/gfm/>`_ 、あるいは `CommonMark <https://commonmark.org/>`_)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:21
msgid ""
"It's customary to save your README file in the root of your project, in the "
"same directory as your :file:`setup.py` file."
msgstr ""
"README ファイルについては、 :file:`setup.py` ファイルと同様にプロジェクトの"
"ルートディレクトリに置くのが慣習になっています。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:25
msgid "Including your README in your package's metadata"
msgstr "README にパッケージのメタデータを含ませる"

#: ../source/guides/making-a-pypi-friendly-readme.rst:27
msgid ""
"To include your README's contents as your package description, set your "
"project's ``Description`` and ``Description-Content-Type`` metadata, "
"typically in your project's :file:`setup.py` file."
msgstr ""
"README の内容をパッケージの説明として引用させるには、典型的にはプロジェクト"
"の :file:`setup.py` ファイルに、プロジェクトの ``Description`` と "
"``Description-Content-Type`` のふたつのメタデータを設定しておきましょう。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:33
msgid ":ref:`description-optional`"
msgstr ":ref:`description-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:34
msgid ":ref:`description-content-type-optional`"
msgstr ":ref:`description-content-type-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:36
msgid ""
"For example, to set these values in a package's :file:`setup.py` file, use "
"``setup()``'s ``long_description`` and ``long_description_content_type``."
msgstr ""
"例えば、これらの値をパッケージの :file:`setup.py` ファイルに設定するために"
"は、 ``setup()`` の ``long_description`` と "
"``long_description_content_type`` を使ってください。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:39
msgid ""
"Set the value of ``long_description`` to the contents (not the path) of the "
"README file itself. Set the ``long_description_content_type`` to an accepted "
"``Content-Type``-style value for your README file's markup, such as ``text/"
"plain``, ``text/x-rst`` (for reStructuredText), or ``text/markdown``."
msgstr ""
"``long_desctription`` には README ファイルの内容それ自体 (パスではなく) を設"
"定してください。 ``long_description_content_type`` には、README ファイルの"
"マークアップの型を受け入れ可能な ``Content-Type`` 風の書き方、すなわち "
"``text/plain`` ・ ``text/x-rst`` (reStructuredText の場合) ・ ``text/"
"markdown`` から選んで設定してください。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:45
msgid ""
"If you're using GitHub-flavored Markdown to write a project's description, "
"ensure you upgrade the following tools:"
msgstr ""
"プロジェクトの説明を GitHub 方言のマークダウンで書くのであれば、以下のツール"
"を更新しておくことを忘れないでください:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:60
msgid "The minimum required versions of the respective tools are:"
msgstr "各ツールは少なくとも次のバージョンでなければなりません:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:62
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:63
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:64
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:66
msgid ""
"It's recommended that you use ``twine`` to upload the project's distribution "
"packages:"
msgstr ""
"プロジェクトの配布物パッケージをアップロードする時は ``twine`` を使うことを推"
"奨します。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:72
msgid ""
"For example, see this :file:`setup.py` file, which reads the contents of :"
"file:`README.md` as ``long_description`` and identifies the markup as GitHub-"
"flavored Markdown:"
msgstr ""
"例えば、この :file:`setup.py` ファイルでは、 :file:`README.md` の内容を読み"
"取って ``long_description`` としていて、マークアップ方式は GitHub 方言のマー"
"クダウンを指定しています:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:94
msgid "Validating reStructuredText markup"
msgstr "reStructuredText マークアップを検証する"

#: ../source/guides/making-a-pypi-friendly-readme.rst:96
msgid ""
"If your README is written in reStructuredText, any invalid markup will "
"prevent it from rendering, causing PyPI to instead just show the README's "
"raw source."
msgstr ""
"README を reStructuredText で書いている場合、無効なマークアップがひとつでもあ"
"ると描画できないので、PyPI 上では README の生のソースコードを表示するだけに"
"なってしまいます。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:99
msgid ""
"Note that Sphinx extensions used in docstrings, such as :doc:`directives "
"<sphinx:usage/restructuredtext/directives>` and :doc:`roles <sphinx:usage/"
"restructuredtext/roles>` (e.g., \"``:py:func:`getattr```\" or \"``:ref:`my-"
"reference-label```\"), are not allowed here and will result in error "
"messages like \"``Error: Unknown interpreted text role \"py:func\".``\"."
msgstr ""
":doc:`ディレクティブ <sphinx:usage/restructuredtext/directives>` と :doc:`"
"ロール <sphinx:usage/restructuredtext/roles>` (例えば \"``:py:func:"
"`getattr```\" や \"``:ref:`my-reference-label```\") のように docstrings 内で"
"使われる Sphinx 拡張はこの場所では使用を許されず、 ``Error: テキストロール "
"\"py:func\" が見つかりません。<Unknown interpreted text role \"py:func\".>`` "
"といったエラーメッセージを出すことになります。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:104
msgid ""
"You can check your README for markup errors before uploading as follows:"
msgstr ""
"README ファイルのマークアップに関するエラーをアップロードする前に確認するに"
"は、次のようにします:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:106
msgid ""
"Install the latest version of `twine <https://github.com/pypa/twine>`_; "
"version 1.12.0 or higher is required:"
msgstr ""
"最新版の `twine <https://github.com/pypa/twine>`_ をインストールします; バー"
"ジョン 1.12.0 またはそれ以上のものが必須です:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:121
msgid ""
"Build the sdist and wheel for your project as described under :ref:"
"`Packaging Your Project`."
msgstr ""
":ref:`あなたのプロジェクトをパッケージする <Packaging Your Project>` に記述さ"
"れているように、プロジェクトの sdist と wheel をビルドします。"

#: ../source/guides/making-a-pypi-friendly-readme.rst:124
msgid "Run ``twine check`` on the sdist and wheel:"
msgstr "sdist と wheel に対して ``twine check`` を実行します:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:130
msgid ""
"This command will report any problems rendering your README.  If your markup "
"renders fine, the command will output ``Checking distribution FILENAME: "
"Passed``."
msgstr ""
"このコマンドは README のレンダリングに関する問題があれば報告するでしょう。"
"マークアップのレンダリングに問題がなければ、 ``配布物を検査しています "
"FILENAME: 合格 <Checking distribution FILENAME: Passed>`` と出力するでしょ"
"う。"

#: ../source/guides/migrating-to-pypi-org.rst:6
msgid "Migrating to PyPI.org"
msgstr "PyPI.org へ移設する"

#: ../source/guides/migrating-to-pypi-org.rst:8
#: ../source/guides/multi-version-installs.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:9
#: ../source/guides/supporting-windows-using-appveyor.rst:7
msgid "Obsolete"
msgstr "古い情報"

#: ../source/guides/migrating-to-pypi-org.rst:10
msgid ""
":term:`pypi.org` is the new, rewritten version of PyPI that has replaced the "
"legacy PyPI code base. It is the default version of PyPI that people are "
"expected to use. These are the tools and processes that people will need to "
"interact with ``PyPI.org``."
msgstr ""
":term:`pypi.org` は、新しくて書き直されたバージョンの PyPI で、以前の PyPI "
"コードベースを置き換えるものです。みなさんが普通はこれを使うものと期待されて"
"いるバージョンの PyPI です。 ``PyPI.org`` とやり取りするためのツールや手順が"
"あります。"

#: ../source/guides/migrating-to-pypi-org.rst:16
msgid "Publishing releases"
msgstr "リリースを公開する"

#: ../source/guides/migrating-to-pypi-org.rst:18
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""
"2016年9月以降、 ``pypi.org`` がデフォルトのアップロードプラットフォームです。"

#: ../source/guides/migrating-to-pypi-org.rst:20
msgid ""
"Uploads through ``pypi.python.org`` were *switched off* on **July 3, 2017**. "
"As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""
"``pypi.python.org`` を通じたアップロードは **2017年7月3日** に使用不可能にな"
"りました。2018年4月13日以降は、``pypi.org`` が PyPI のURLです。"

#: ../source/guides/migrating-to-pypi-org.rst:23
msgid ""
"The recommended way to migrate to PyPI.org for uploading is to ensure that "
"you are using a new enough version of your upload tool."
msgstr ""
"PyPI.org へ移行するためのアップロードでは、アップロードに使うツールが十分に新"
"しいバージョンのものであることを確実にしておくことが推奨されます。"

#: ../source/guides/migrating-to-pypi-org.rst:26
msgid ""
"The default upload settings switched to ``pypi.org`` in the following "
"versions:"
msgstr ""
"``pypi.org`` に転換するためのデフォルトのアップロード設定は次のようなバージョ"
"ンです:"

#: ../source/guides/migrating-to-pypi-org.rst:28
msgid "``twine`` 1.8.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:29
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:30
msgid "Python 2.7.13 (``distutils`` update)"
msgstr "Python 2.7.13 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:31
msgid "Python 3.4.6 (``distutils`` update)"
msgstr "Python 3.4.6 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:32
msgid "Python 3.5.3 (``distutils`` update)"
msgstr "Python 3.5.3 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:33
msgid "Python 3.6.0 (``distutils`` update)"
msgstr "Python 3.6.0 (``distutils`` 更新)"

#: ../source/guides/migrating-to-pypi-org.rst:35
msgid ""
"In addition to ensuring you're on a new enough version of the tool for the "
"tool's default to have switched, you must also make sure that you have not "
"configured the tool to override its default upload URL. Typically this is "
"configured in a file located at :file:`$HOME/.pypirc`. If you see a file "
"like:"
msgstr ""
"ツールのデフォルト設定が切り替わっている程に十分に新しいツールを使っているこ"
"とを確認するのに加えて、そのデフォルトのアップロード先 URL を上書きするような"
"設定をしていないことを確実にしてください。これは典型的には file:`$HOME/."
"pypirc` で設定されています。もしこんなファイルを目にするようであれば:"

#: ../source/guides/migrating-to-pypi-org.rst:52
msgid ""
"Then simply delete the line starting with ``repository`` and you will use "
"your upload tool's default URL."
msgstr ""
"その時は、 ``repository`` で始まる行を削除するだけで、アップロードツールのデ"
"フォルト URL を使うようになります。"

#: ../source/guides/migrating-to-pypi-org.rst:55
msgid ""
"If for some reason you're unable to upgrade the version of your tool to a "
"version that defaults to using PyPI.org, then you may edit :file:`$HOME/."
"pypirc` and include the ``repository:`` line, but use the value ``https://"
"upload.pypi.org/legacy/`` instead:"
msgstr ""
"なんらかの事情でPyPI.orgをデフォルトで使うところまでアップロードツールのバー"
"ジョンを上げられないのであれば、 :file:`$HOME/.pypirc` で ``repository:`` 行"
"が ``https://upload.pypi.org/legacy/`` を指すように編集しても構いません。"

#: ../source/guides/migrating-to-pypi-org.rst:71
msgid ""
"(``legacy`` in this URL refers to the fact that this is the new server "
"implementation's emulation of the legacy server implementation's upload API.)"
msgstr ""
"(この URL の中の ``legacy`` は、新しいサーバ実装が、以前のサーバ実装のアップ"
"ロード API をエミュレートしているという事実を示しています。)"

#: ../source/guides/migrating-to-pypi-org.rst:77
msgid "Registering package names & metadata"
msgstr "パッケージの名前とメタデータを登録する"

#: ../source/guides/migrating-to-pypi-org.rst:79
msgid ""
"Explicit pre-registration of package names with the ``setup.py register`` "
"command prior to the first upload is no longer required, and is not "
"currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""
"初回のアップロードに先立って ``setup.py register`` コマンドでパッケージの名前"
"を明示的に先行登録する必要がなくなり、PyPI.org における以前のアップロード "
"API のエミュレーションではサポートされなくなりました。"

#: ../source/guides/migrating-to-pypi-org.rst:83
msgid ""
"As a result, attempting explicit registration after switching to using PyPI."
"org for uploads will give the following error message::"
msgstr ""
"その結果、アップロードに PyPI.org を使うように切り替えた後は明示的な登録の試"
"行は次のエラーメッセージを返すでしょう::"

#: ../source/guides/migrating-to-pypi-org.rst:88
msgid ""
"The solution is to skip the registration step, and proceed directly to "
"uploading artifacts."
msgstr ""
"解決方法は登録の段階を飛ばしていきなり作品のアップロードへと進むことです。"

#: ../source/guides/migrating-to-pypi-org.rst:93
#: ../source/guides/using-testpypi.rst:5
msgid "Using TestPyPI"
msgstr "TestPyPI を使う"

#: ../source/guides/migrating-to-pypi-org.rst:95
msgid ""
"Legacy TestPyPI (testpypi.python.org) is no longer available; use `test.pypi."
"org <https://test.pypi.org>`_ instead. If you use TestPyPI, you must update "
"your :file:`$HOME/.pypirc` to handle TestPyPI's new location, by replacing "
"``https://testpypi.python.org/pypi`` with ``https://test.pypi.org/legacy/``, "
"for example:"
msgstr ""
"以前からの TestPyPI (testpypi.python.org) はもはや利用できませんので、代わり"
"に `test.pypi.org <https://test.pypi.org>`_ を使ってください。 TestPyPI を使"
"うのであれば、 :file:`$HOME/.pypirc` で ``https://testpypi.python.org/pypi`` "
"を ``https://test.pypi.org/legacy/`` に置き換えるなどして、 TestPyPI の新しい"
"場所を使うように設定しなければなりません。例えば:"

#: ../source/guides/migrating-to-pypi-org.rst:117
msgid "Registering new user accounts"
msgstr "新しいユーザアカウントを登録する"

#: ../source/guides/migrating-to-pypi-org.rst:119
msgid ""
"In order to help mitigate spam attacks against PyPI, new user registration "
"through ``pypi.python.org`` was *switched off* on **February 20, 2018**. New "
"user registrations at ``pypi.org`` are open."
msgstr ""
"PyPI に対するスパム攻撃を緩和する補助するために、 ``pypi.python.org`` におけ"
"る新規ユーザ登録は **2018年2月20日** に *終了* しました。 ``pypi.org`` での新"
"規ユーザ登録が始まっています。"

#: ../source/guides/migrating-to-pypi-org.rst:125
msgid "Browsing packages"
msgstr "パッケージを一覧する"

#: ../source/guides/migrating-to-pypi-org.rst:127
msgid ""
"While ``pypi.python.org`` is may still be used in links from other PyPA "
"documentation, etc, the default interface for browsing packages is ``pypi."
"org``. The domain pypi.python.org now redirects to pypi.org, and may be "
"disabled sometime in the future."
msgstr ""
"``pypi.python.org`` が他の PyPA 説明文書などからのリンクに使われているとして"
"も、パッケージを一覧するデフォルトのインタフェイスは ``pypi.org`` です。pupi."
"python.org ドメイン名は今は pypi.org へリダイレクトされていて、いつか将来の時"
"点で無効にされるでしょう。"

#: ../source/guides/migrating-to-pypi-org.rst:134
msgid "Downloading packages"
msgstr "パッケージをダウンロードする"

#: ../source/guides/migrating-to-pypi-org.rst:136
msgid "``pypi.org`` is the default host for downloading packages."
msgstr ""
"``pypi.org`` が、パッケージをダウンロードする際のデフォルトのホストです。"

#: ../source/guides/migrating-to-pypi-org.rst:139
msgid "Managing published packages and releases"
msgstr "公開済みパッケージとリリースを管理する"

#: ../source/guides/migrating-to-pypi-org.rst:141
msgid ""
"``pypi.org`` provides a fully functional interface for logged in users to "
"manage their published packages and releases."
msgstr ""
"``pypi.org`` では、ログインしたユーザが自分が公開したプロジェクトやリリースに"
"ついて管理するための全機能を提供しています。"

#: ../source/guides/modernize-setup-py-project.rst:6
msgid "How to modernize a ``setup.py`` based project?"
msgstr "どうすれば ``setup.py`` ベースのプロジェクトを近代化できるでしょうか？"

#: ../source/guides/modernize-setup-py-project.rst:10
msgid "Should ``pyproject.toml`` be added?"
msgstr "``pyproject.toml`` を追加するべきですか？"

#: ../source/guides/modernize-setup-py-project.rst:12
msgid ""
"A :term:`pyproject.toml` file is strongly recommended. The presence of a :"
"file:`pyproject.toml` file itself does not bring much. [#]_ What is actually "
"strongly recommended is the ``[build-system]`` table in :file:`pyproject."
"toml`."
msgstr ""
":term:`pyproject.toml` ファイルは強く推奨されています。:file:`pyproject."
"toml` ファイルが存在すること自体は多くをもたらすものではありません。 [#]_ 実"
"際に強く推奨されているものは、:file:`pyproject.toml` の中の ``[build-"
"system]`` テーブルです。"

#: ../source/guides/modernize-setup-py-project.rst:16
msgid ""
"Note that it has influence on the build isolation feature of pip, see below."
msgstr ""
"以下のように、これが pip のビルド隔離機能に影響を与えるということを銘記してく"
"ださい。"

#: ../source/guides/modernize-setup-py-project.rst:23
msgid ""
"No, :file:`setup.py` can exist in a modern :ref:`setuptools` based project. "
"The :term:`setup.py` file is a valid configuration file for setuptools that "
"happens to be written in Python. However, the following commands are "
"deprecated and **MUST NOT** be run anymore, and their recommended "
"replacement commands should be used instead:"
msgstr ""
"いいえ、 :file:`setup.py` は、近代的な :ref:`setuptools` ベースのプロジェクト"
"にあっても構いません。 :term:`setup.py` ファイルは、たまたま Python で書かれ"
"ている setuptools 向けの正当な設定ファイルなのです。しかしながら、以下のコマ"
"ンド群は非推奨になっていてもはや実行することは **許されず** 、その代わりに以"
"下のようなコマンドを使用するべきです:"

#: ../source/guides/modernize-setup-py-project.rst:36
msgid "``python -m build``"
msgstr "``python -m build``"

#: ../source/guides/modernize-setup-py-project.rst:42
#: ../source/guides/modernize-setup-py-project.rst:66
#: ../source/guides/modernize-setup-py-project.rst:111
#: ../source/guides/modernize-setup-py-project.rst:129
#: ../source/guides/modernize-setup-py-project.rst:221
msgid "For more details:"
msgstr "より詳しくは:"

#: ../source/guides/modernize-setup-py-project.rst:44
msgid ":ref:`setup-py-deprecated`"
msgstr ":ref:`setup-py-deprecated`"

#: ../source/guides/modernize-setup-py-project.rst:48
msgid "Where to start?"
msgstr "どこから始めましょうか？"

#: ../source/guides/modernize-setup-py-project.rst:50
msgid ""
"The :term:`project` must contain a :file:`pyproject.toml` file at the root "
"of its source tree that contains a ``[build-system]`` table like so:"
msgstr ""
":term:`プロジェクト <project>` のソースコードツリーのルート部分には、次に示す"
"ように、 ``[build-system]`` テーブルを含む :file:`pyproject.toml` がなければ"
"なりません:"

#: ../source/guides/modernize-setup-py-project.rst:60
msgid ""
"This is the standardized method of letting :term:`build frontends <Build "
"Frontend>` know that :ref:`setuptools` is the :term:`build backend <Build "
"Backend>` for this project."
msgstr ""
"これは、 :term:`ビルドフロントエンド <Build Frontend>` にこのプロジェクトの :"
"term:`ビルドバックエンド <Build Backend>` は :ref:`setuptools` だと知らせるた"
"めの標準化されたやり方です。"

#: ../source/guides/modernize-setup-py-project.rst:63
msgid ""
"Note that the presence of a :file:`pyproject.toml` file (even if empty) "
"triggers :ref:`pip` to change its default behavior to use *build isolation*."
msgstr ""
"(空のファイルであっても) :file:`pyproject.toml` ファイルが存在していれば、 :"
"ref:`pip` が *ビルド隔離 <build isolation>* を取り扱うデフォルトの動きが変わ"
"ることに注意してください。"

#: ../source/guides/modernize-setup-py-project.rst:68
msgid ":ref:`distributing-packages`"
msgstr ":ref:`配布パッケージ <distributing-packages>`"

#: ../source/guides/modernize-setup-py-project.rst:69
#: ../source/guides/modernize-setup-py-project.rst:113
msgid ":ref:`pyproject-build-system-table`"
msgstr ":ref:`pyproject-build-system-table`"

#: ../source/guides/modernize-setup-py-project.rst:70
#: ../source/guides/modernize-setup-py-project.rst:131
#: ../source/guides/modernize-setup-py-project.rst:247
msgid ":doc:`pip:reference/build-system/pyproject-toml`"
msgstr ":doc:`pip:reference/build-system/pyproject-toml`"

#: ../source/guides/modernize-setup-py-project.rst:74
msgid "How to handle additional build-time dependencies?"
msgstr "追加的なビルド時の依存関係をどのように扱うのですか？"

#: ../source/guides/modernize-setup-py-project.rst:76
msgid ""
"On top of setuptools itself, if :file:`setup.py` depends on other third-"
"party libraries (outside of Python's standard library), those must be listed "
"in the ``requires`` list of the ``[build-system]`` table, so that the build "
"frontend knows to install them when building the :term:`distributions "
"<Distribution Package>`."
msgstr ""
"setuptools それ自体の上に、もし :file:`setup.py` が他の (Python の標準ライブ"
"ラリの外側の) 第三者のライブラリに依存しているのであれば、 :term:`配布物 "
"<Distribution Package>` をビルドする際にビルドフロトンエンドがそれらをインス"
"トールする必要があることを知るために、 ``[build-system]`` テーブルの "
"``require`` リストに挙げられていなければなりません。"

#: ../source/guides/modernize-setup-py-project.rst:82
#: ../source/guides/modernize-setup-py-project.rst:139
#: ../source/guides/modernize-setup-py-project.rst:174
msgid "For example, a :file:`setup.py` file such as this:"
msgstr "例えば、このような :file:`setup.py` ファイルがあれば:"

#: ../source/guides/modernize-setup-py-project.rst:99
msgid ""
"requires a :file:`pyproject.toml` file like this (:file:`setup.py` stays "
"unchanged):"
msgstr ""
":file:`pyproject.toml` ファイルはこのようであることが要求されます (:file:"
"`setup.py` には変更なし):"

#: ../source/guides/modernize-setup-py-project.rst:117
msgid "What is the build isolation feature?"
msgstr "ビルド隔離機能とは何でしょうか？"

#: ../source/guides/modernize-setup-py-project.rst:119
msgid ""
"Build frontends typically create an ephemeral virtual environment where they "
"install only the build dependencies (and their dependencies) that are listed "
"under ``build-system.requires`` and trigger the build in that environment."
msgstr ""
"典型的な場合、ビルドフロントエンドは、 ``build-system.requires`` の下に列挙さ"
"れているビルド時の依存関係 (と、その依存関係)だけをインストールする先としての"
"一時的な仮想環境を作成し、その環境内でビルドを開始します。"

#: ../source/guides/modernize-setup-py-project.rst:124
msgid ""
"For some projects this isolation is unwanted and it can be deactivated as "
"follows:"
msgstr ""
"この隔離が不要な一部のプロジェクト向けには、以下のようにすれば (隔離を) 非活"
"性化することができます:"

#: ../source/guides/modernize-setup-py-project.rst:126
msgid "``python -m build --no-isolation``"
msgstr "``python -m build --no-isolation``"

#: ../source/guides/modernize-setup-py-project.rst:127
msgid "``python -m pip install --no-build-isolation``"
msgstr "``python -m pip install --no-build-isolation``"

#: ../source/guides/modernize-setup-py-project.rst:135
msgid "How to handle packaging metadata?"
msgstr "パッケージのメタデータをどのように扱えば良いでしょうか？"

#: ../source/guides/modernize-setup-py-project.rst:137
msgid ""
"All static metadata can optionally be moved to a ``[project]`` table in :"
"file:`pyproject.toml`."
msgstr ""
"静的なメタデータはすべて、 :file:`pyproject.toml` の ``[project]`` テーブルへ"
"移しても構いません。"

#: ../source/guides/modernize-setup-py-project.rst:151
msgid "can be entirely replaced by a :file:`pyproject.toml` file like this:"
msgstr ""
"このように :file:`pyproject.toml` ファイルで完全に置き換えることも可能です:"

#: ../source/guides/modernize-setup-py-project.rst:164
msgid ""
"Read :ref:`pyproject-project-table` for the full specification of the "
"content allowed in the ``[project]`` table."
msgstr ""
"``[project]`` テーブルで許される内容の完全な仕様については、 :ref:"
"`<pyproject-project-table>` を読んでください。"

#: ../source/guides/modernize-setup-py-project.rst:169
msgid "How to handle dynamic metadata?"
msgstr "動的なメタデータをどのように取り扱いますか？"

#: ../source/guides/modernize-setup-py-project.rst:171
msgid ""
"If some packaging metadata fields are not static they need to be listed as "
"``dynamic`` in this ``[project]`` table."
msgstr ""
"パッケージングであるメタデータフィールドが静的ではないならば、 ``[project]`` "
"テーブルの ``dynamic`` に列挙する必要があります。"

#: ../source/guides/modernize-setup-py-project.rst:191
msgid "can be modernized as follows:"
msgstr "以下のように近代化することができるでしょう:"

#: ../source/guides/modernize-setup-py-project.rst:223
msgid ":ref:`declaring-project-metadata-dynamic`"
msgstr ""
":ref:`プロジェクトのメタデータを動的であると宣言する <declaring-project-"
"metadata-dynamic>`"

#: ../source/guides/modernize-setup-py-project.rst:227
msgid "What if something that can not be changed expects a ``setup.py`` file?"
msgstr ""
"変更不能ななにかが ``setup.py`` ファイルがあるものと期待していたらどうします"
"か？"

#: ../source/guides/modernize-setup-py-project.rst:229
msgid ""
"For example, a process exists that can not be changed easily and it needs to "
"execute a command such as ``python setup.py --name``."
msgstr ""
"例えば、簡単には変更することができないプロセスが存在していて、それが "
"``python setup.py --name`` のようなコマンドの実行を必要としてる場合。"

#: ../source/guides/modernize-setup-py-project.rst:232
msgid ""
"It is perfectly fine to leave a :file:`setup.py` file in the project source "
"tree even after all its content has been moved to :file:`pyproject.toml`. "
"This file can be as minimalistic as this:"
msgstr ""
"たとえ全ての内容が :file:`pyproject.toml` へ移された後であっても、プロジェク"
"トのソースコードツリーに `setup.py` を残すことは完全に問題のないことです。こ"
"のファイルの最小限の姿はこのようになります:"

#: ../source/guides/modernize-setup-py-project.rst:246
msgid ":ref:`pyproject-toml-spec`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/guides/modernize-setup-py-project.rst:248
msgid ":doc:`setuptools:build_meta`"
msgstr ":doc:`setuptools:build_meta`"

#: ../source/guides/multi-version-installs.rst:6
msgid "Multi-version installs"
msgstr "複数バージョンのインストール"

#: ../source/guides/multi-version-installs.rst:11
msgid ""
"easy_install allows simultaneous installation of different versions of the "
"same project into a single environment shared by multiple programs which "
"must ``require`` the appropriate version of the project at run time (using "
"``pkg_resources``)."
msgstr ""
"easy_install を使えば、異なるバージョンの同一プロジェクトをひとつの環境に同時"
"にインストールして、なおかつ、それぞれ動作時にプロジェクトの特定のバージョン"
"を (``pkg_resources`` での指定を通じて) ``要求 <require>`` する複数のプログラ"
"ムをその環境で動作させることができます。"

#: ../source/guides/multi-version-installs.rst:16
msgid ""
"For many use cases, virtual environments address this need without the "
"complication of the ``require`` directive. However, the advantage of "
"parallel installations within the same environment is that it works for an "
"environment shared by multiple applications, such as the system Python in a "
"Linux distribution."
msgstr ""
"多くのユースケースでは、 ``require`` ディレクティブを混乱させる事なく、仮想環"
"境がこのような需要を満たします。しかしながら、同一環境内に(複数バージョンを)"
"並行してインストールすることの利点は、Linux 配布物におけるシステム側の "
"Python のように、複数のアプリケーションによって共有される環境で動作することで"
"す。"

#: ../source/guides/multi-version-installs.rst:22
msgid ""
"The major limitation of ``pkg_resources`` based parallel installation is "
"that as soon as you import ``pkg_resources`` it locks in the *default* "
"version of everything which is already available on sys.path. This can cause "
"problems, since ``setuptools`` created command line scripts use "
"``pkg_resources`` to find the entry point to execute. This means that, for "
"example, you can't use ``require`` tests invoked through ``nose`` or a WSGI "
"application invoked through ``gunicorn`` if your application needs a non-"
"default version of anything that is available on the standard ``sys.path`` - "
"the script wrapper for the main application will lock in the version that is "
"available by default, so the subsequent ``require`` call in your own code "
"fails with a spurious version conflict."
msgstr ""
"並行インストールに立脚した ``pkg_resources`` の主要な制限事項は、 "
"``pkg_resources`` をインポートするや否や、sys.path 上で既に利用可能なものはす"
"べてそのバージョンに *デフォルト* バージョンが固定されてしまうことです。コマ"
"ンドラインスクリプトで生成された ``setuptools`` が ``pkg_resources`` を使って"
"プログラム実行のためのエントリポイントを探索するので、これは問題を引き起こす"
"かもしれません。これが意味するところは、例えば、そのアプリケーションが、標準"
"の ``sys.path`` 上に存在するものなら何であれ、それとは異なるバージョンを必要"
"とする場合に、 ``nose`` を通じて ``require`` テストを使ったり ``gunicorn`` を"
"通じて WSGI アプリケーションを呼び出したりすることができない - メインのアプリ"
"ケーションのためのスクリプトラッパがデフォルトで利用可能なバージョンに固定さ"
"れてしまって、各アプリケーションの引き続く ``require`` 呼び出しが見せかけの"
"バージョン衝突によって失敗してしまう、ということです。"

#: ../source/guides/multi-version-installs.rst:34
msgid ""
"This can be worked around by setting all dependencies in ``__main__."
"__requires__`` before importing ``pkg_resources`` for the first time, but "
"that approach does mean that standard command line invocations of the "
"affected tools can't be used - it's necessary to write a custom wrapper "
"script or use ``python3 -c '<command>'`` to invoke the application's main "
"entry point directly."
msgstr ""
"最初に ``pkg_resources`` をインポートするよりも前に ``__main__."
"__requires__`` の中のすべての依存関係を設定しておくことでこの問題を回避するこ"
"とができますが、このアプローチでは影響を受けるツールを標準のコマンドラインか"
"らの呼び出しで使うことができないことになります - つまり、独自のラッパスクリプ"
"トを書くか、アプリケーションの main エントリポイントを直接に呼び出すための "
"``python -c '<command>'`` を使うかしなければなりません。"

#: ../source/guides/multi-version-installs.rst:41
msgid ""
"Refer to the `pkg_resources documentation <https://setuptools.readthedocs.io/"
"en/latest/pkg_resources.html#workingset-objects>`__ for more details."
msgstr ""
"さらに詳しい情報については、 `pkg_resources 説明文書 <https://setuptools."
"readthedocs.io/en/latest/pkg_resources.html#workingset-objects>`__ を参照して"
"ください。"

#: ../source/guides/packaging-binary-extensions.rst:5
msgid "Packaging binary extensions"
msgstr "バイナリ拡張をパッケージングする"

#: ../source/guides/packaging-binary-extensions.rst:8
msgid "2013-12-08"
msgstr "2013-12-08"

#: ../source/guides/packaging-binary-extensions.rst:10
msgid ""
"One of the features of the CPython reference interpreter is that, in "
"addition to allowing the execution of Python code, it also exposes a rich C "
"API for use by other software. One of the most common uses of this C API is "
"to create importable C extensions that allow things which aren't always easy "
"to achieve in pure Python code."
msgstr ""
"CPython の参照インタープリタの機能の一つは、Python のコードを実行することに加"
"えて、他のソフトウェアによる利用のために豊富な C の API を露出することです。"
"この C の API の最もよくある利用方法は、純粋な Python のコードでは必ずしも簡"
"単には達成できないようなことをインポート可能な C 拡張として作成することです。"

#: ../source/guides/packaging-binary-extensions.rst:18
msgid "An overview of binary extensions"
msgstr "バイナリ拡張の概要"

#: ../source/guides/packaging-binary-extensions.rst:21
msgid "Use cases"
msgstr "ユースケース"

#: ../source/guides/packaging-binary-extensions.rst:23
msgid ""
"The typical use cases for binary extensions break down into just three "
"conventional categories:"
msgstr ""
"バイナリ拡張の典型的なユースケースは、たった３個の伝統的なカテゴリに分類され"
"ます:"

#: ../source/guides/packaging-binary-extensions.rst:26
msgid ""
"**accelerator modules**: these modules are completely self-contained, and "
"are created solely to run faster than the equivalent pure Python code runs "
"in CPython. Ideally, accelerator modules will always have a pure Python "
"equivalent to use as a fallback if the accelerated version isn't available "
"on a given system. The CPython standard library makes extensive use of "
"accelerator modules. *Example*: When importing ``datetime``, Python falls "
"back to the `datetime.py <https://github.com/python/cpython/blob/main/Lib/"
"datetime.py>`_ module if the C implementation ( `_datetimemodule.c <https://"
"github.com/python/cpython/blob/main/Modules/_datetimemodule.c>`_) is not "
"available."
msgstr ""
"**アクセラレータモジュール**: これらのモジュールは完全に自己完結型で、"
"CPython で同機能の純粋なPython コードを走らせるよりも速く動作するためにだけ作"
"成されます。アクセラレートされたバージョンが当該システム上で動作しなかった時"
"のために、アクセラレータモジュールには同機能の純粋なPythonのコードを予備品と"
"して同梱していることが理想的です。CPython の標準ライブラリはアクセラレータモ"
"ジュールを多用しています。*例*: ``datetime`` をインポートする際、C での実装 "
"(`_datetimemodule.c <https://github.com/python/cpython/blob/main/Modules/"
"_datetimemodule.c>`_) が使えない時には、`datetime.py <https://github.com/"
"python/cpython/blob/main/Lib/datetime.py>`_ にフォールバックします。"

#: ../source/guides/packaging-binary-extensions.rst:37
msgid ""
"**wrapper modules**: these modules are created to expose existing C "
"interfaces to Python code. They may either expose the underlying C interface "
"directly, or else expose a more \"Pythonic\" API that makes use of Python "
"language features to make the API easier to use. The CPython standard "
"library makes extensive use of wrapper modules. *Example*: `functools.py "
"<https://github.com/python/cpython/blob/main/Lib/functools.py>`_ is a Python "
"module wrapper for `_functoolsmodule.c <https://github.com/python/cpython/"
"blob/main/Modules/_functoolsmodule.c>`_."
msgstr ""
"**ラッパモジュール**: これらのモジュールは、既存の C のインタフェースを "
"Python に見せるために作られます。それらは C のインタフェースを直接に見せる"
"か、または、Python 言語の機能を使ってAPI をより使いやすくするようなもっと "
"\"Pythonic\" なやり方で見せるかします。CPython の標準ライブラリでは、ラッパモ"
"ジュールを多用しています。 *例*: `functools.py <https://github.com/python/"
"cpython/blob/main/Lib/functools.py>`_ は、 `_functoolsmodule.c <https://"
"github.com/python/cpython/blob/main/Modules/_functoolsmodule.c>`_ のための"
"ラッパモジュールです。"

#: ../source/guides/packaging-binary-extensions.rst:45
msgid ""
"**low-level system access**: these modules are created to access lower level "
"features of the CPython runtime, the operating system, or the underlying "
"hardware. Through platform specific code, extension modules may achieve "
"things that aren't possible in pure Python code. A number of CPython "
"standard library modules are written in C in order to access interpreter "
"internals that aren't exposed at the language level. *Example*: ``sys``, "
"which comes from `sysmodule.c <https://github.com/python/cpython/blob/main/"
"Python/sysmodule.c>`_."
msgstr ""
"**低レベルシステムアクセス**: これらのモジュールは、CPython ランタイムやオペ"
"レーティングシステム、あるいはさらに下層のハードウェアの低レベルの機能にアク"
"セスするために作成されています。プラットフォームに固有のコードを通して、純粋"
"な Python コードでは不可能なことを拡張モジュールが達成できるかもしれません。"
"結構な数の CPython の標準ライブラリモジュールが C で書かれていて、言語のレベ"
"ルには提供されていないようなインタープリタの内部にアクセスできるようになって"
"います。 *例*: ``sys`` は `sysmodule.c <https://github.com/python/cpython/"
"blob/main/Python/sysmodule.c>`_ から来ています。"

#: ../source/guides/packaging-binary-extensions.rst:54
msgid ""
"One particularly notable feature of C extensions is that, when they don't "
"need to call back into the interpreter runtime, they can release CPython's "
"global interpreter lock around long-running operations (regardless of "
"whether those operations are CPU or IO bound)."
msgstr ""
"C 言語拡張の特筆すべき機能は、インタプリタランタイムにコールバックする必要の"
"ない時には、 (CPU制約であろうとIO制約であろうと関わりなく) 長時間走り続ける操"
"作を包む CPython グローバルインタプリタロックを解放することができるということ"
"です。"

#: ../source/guides/packaging-binary-extensions.rst:59
msgid ""
"Not all extension modules will fit neatly into the above categories. The "
"extension modules included with NumPy, for example, span all three use cases "
"- they move inner loops to C for speed reasons, wrap external libraries "
"written in C, FORTRAN and other languages, and use low level system "
"interfaces for both CPython and the underlying operation system to support "
"concurrent execution of vectorised operations and to tightly control the "
"exact memory layout of created objects."
msgstr ""
"必ずしも全ての拡張モジュールが上記のカテゴリにぴたりと当て嵌まる訳ではありま"
"せん。例えば NumPy に含まれる拡張モジュールは３個のカテゴリのすべてにまたがっ"
"ています - 動作速度上の理由から内側のループを C 言語に移しているし、C 言語や "
"FORTRAN 言語その他で書かれた外部のライブラリをラップしているし、また、ベクタ"
"演算の並列実行や生成したオブジェクトのメモリレイアウトを正確な管理のために、 "
"CPython とその下にあるオペレーティングシステムの両方の低レベルなシステムイン"
"ターフェイスを利用しています。"

#: ../source/guides/packaging-binary-extensions.rst:69
msgid "Disadvantages"
msgstr "欠点"

#: ../source/guides/packaging-binary-extensions.rst:71
msgid ""
"The main disadvantage of using binary extensions is the fact that it makes "
"subsequent distribution of the software more difficult. One of the "
"advantages of using Python is that it is largely cross platform, and the "
"languages used to write extension modules (typically C or C++, but really "
"any language that can bind to the CPython C API) typically require that "
"custom binaries be created for different platforms."
msgstr ""
"バイナリ拡張を使うことの主たる欠点は、引き続くソフトウェア配布がより難しくな"
"ることです。Python を使う利点のひとつは非常に広範囲のクロスプラットフォームで"
"ある (訳注、同一の Python コードが広範囲の異種プラットフォームで動作する) こ"
"とですが、拡張モジュールを書くのに使われる言語 (典型的には C 言語や C++ だ"
"が、実際にはどんな言語でも CPython の C 言語 API にバインドできる) は異なるプ"
"ラットフォームには異なるバイナリを作成しなければならないのが普通なのです。"

#: ../source/guides/packaging-binary-extensions.rst:78
msgid "This means that binary extensions:"
msgstr "これが意味するところは、バイナリ拡張は:"

#: ../source/guides/packaging-binary-extensions.rst:80
msgid ""
"require that end users be able to either build them from source, or else "
"that someone publish pre-built binaries for common platforms"
msgstr ""
"エンドユーザがソースコードからビルドできるか、または、誰かが共通のプラット"
"フォーム向けにビルド済みのバイナリを公開するか、のいずれかでなければなりませ"
"ん"

#: ../source/guides/packaging-binary-extensions.rst:83
msgid ""
"may not be compatible with different builds of the CPython reference "
"interpreter"
msgstr "CPython 参照インタプリタのビルドが異なると互換性がないかもしれません"

#: ../source/guides/packaging-binary-extensions.rst:86
msgid ""
"often will not work correctly with alternative interpreters such as PyPy, "
"IronPython or Jython"
msgstr ""
"PyPy ・ IronPython ・ Jython のような代替インタプリタ上では動作しないことがし"
"ばしばです"

#: ../source/guides/packaging-binary-extensions.rst:89
msgid ""
"if handcoded, make maintenance more difficult by requiring that maintainers "
"be familiar not only with Python, but also with the language used to create "
"the binary extension, as well as with the details of the CPython C API."
msgstr ""
"もしハードコードされているなら、メンテナンス担当者が Python のみならずそのバ"
"イナリ拡張を作成するために使われている言語についてもCPython の C 言語 API に"
"ついても慣れ親しんでいることが要求されるので、メンテナンスがより難しくなるで"
"しょう。"

#: ../source/guides/packaging-binary-extensions.rst:94
msgid ""
"if a pure Python fallback implementation is provided, make maintenance more "
"difficult by requiring that changes be implemented in two places, and "
"introducing additional complexity in the test suite to ensure both versions "
"are always executed."
msgstr ""
"純粋な Python で書かれた退避先実装が用意されているなら、変更を実装するべき場"
"所が２箇所になるのと、両方の実装が常に実行されることを保証するテストスイート"
"を準備するために複雑さが増加することになるので、メンテナンスがより一層困難に"
"なります。"

#: ../source/guides/packaging-binary-extensions.rst:99
msgid ""
"Another disadvantage of relying on binary extensions is that alternative "
"import mechanisms (such as the ability to import modules directly from "
"zipfiles) often won't work for extension modules (as the dynamic loading "
"mechanisms on most platforms can only load libraries from disk)."
msgstr ""
"バイナリ拡張に依存することによるさらなる欠点は、 (例えば zip ファイルから直接"
"にインポートする能力など) 通常とは異なるインポート機構が、しばしば拡張モ"
"ジュールでは動作しない (ほとんどのプラットフォームでは動的ロード機構はディス"
"クからライブラリを読み込むことしかできないため) ということです。"

#: ../source/guides/packaging-binary-extensions.rst:106
msgid "Alternatives to handcoded accelerator modules"
msgstr "ハードコードされたアクセラレータモジュールの代わりとなるもの"

#: ../source/guides/packaging-binary-extensions.rst:108
msgid ""
"When extension modules are just being used to make code run faster (after "
"profiling has identified the code where the speed increase is worth "
"additional maintenance effort), a number of other alternatives should also "
"be considered:"
msgstr ""
"拡張モジュールが単純にプログラムを速く走らせるためだけに使われてい (て、プロ"
"ファイリングの結果、メンテナンス工数が増えることを甘受しても速度を上げること"
"に価値があると判断され) る時には、他の複数の選択肢も検討しておくべきです:"

#: ../source/guides/packaging-binary-extensions.rst:113
msgid ""
"look for existing optimised alternatives. The CPython standard library "
"includes a number of optimised data structures and algorithms (especially in "
"the builtins and the ``collections`` and ``itertools`` modules). The Python "
"Package Index also offers additional alternatives. Sometimes, the "
"appropriate choice of standard library or third party module can avoid the "
"need to create your own accelerator module."
msgstr ""
"既存の最適化された代替策を探す。CPython の標準ライブラリには、最適化された"
"データ構造やアルゴリズム (特に組み込み済みのものや ``collections`` および "
"``itertools`` モジュール) が多数含まれています。Python パッケージインデックス"
"にも他の代替となるパッケージがあります。時には、標準ライブラリや第三パーティ"
"のモジュールから適切なものを選択することで、自分自身でアクセラレータパッケー"
"ジを作成する必要に迫られないで済むでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:120
msgid ""
"for long running applications, the JIT compiled `PyPy interpreter <https://"
"www.pypy.org/>`__ may offer a suitable alternative to the standard CPython "
"runtime. The main barrier to adopting PyPy is typically reliance on other "
"binary extension modules - while PyPy does emulate the CPython C API, "
"modules that rely on that cause problems for the PyPy JIT, and the emulation "
"layer can often expose latent defects in extension modules that CPython "
"currently tolerates (frequently around reference counting errors - an object "
"having one live reference instead of two often won't break anything, but no "
"references instead of one is a major problem)."
msgstr ""
"長時間に渡って走り続けるアプリケーションに対しては、標準の CPython ランタイム"
"の代わりに JIT コンパイルされた `PyPy インタープリタ <https://www.pypy.org/"
">`__ を使うことが適切な代替策となるかもしれません。 PyPy を適用しようとする"
"時、典型的には他のバイナリ拡張モジュールへの依存が主たる障害になります - "
"PyPy が CPython の C 言語 API をエミュレートする一方で、その API に依存するモ"
"ジュールの側が PyPy の JIT に問題を引き起こし、また、エミュレーション層が "
"CPython では現在は許容されているような拡張モジュール側の潜在的な瑕疵 (参照カ"
"ウントに関係するエラーであることが多い - あるオブジェクトへの参照が２個あるは"
"ずのところが１個しかないという状態は何も悪さをしませんが、１個の参照のはずが"
"参照なしとなる場合が主な問題になります) をしばしば暴露してしまうのです。"

#: ../source/guides/packaging-binary-extensions.rst:130
msgid ""
"`Cython <https://cython.org/>`__ is a mature static compiler that can "
"compile most Python code to C extension modules. The initial compilation "
"provides some speed increases (by bypassing the CPython interpreter layer), "
"and Cython's optional static typing features can offer additional "
"opportunities for speed increases. Using Cython still carries the "
"`disadvantages`_ associated with using binary extensions, but has the "
"benefit of having a reduced barrier to entry for Python programmers "
"(relative to other languages like C or C++)."
msgstr ""
"`Cython <https://cython.org/>`__ は、ほとんどの Python コードを C 言語の拡張"
"モジュールに変換できる成熟した静的コンパイラです。当初のコンパイルでは、"
"(CPython のインタプリタ層をバイパスすることによって) いくらかの速度向上が見込"
"めるとともに、 Cython のオプション扱いの静的型付け機能によってさらに速度向上"
"の機会があるかもしれません。Cython の使用には、バイナリ拡張の使用に関連した `"
"欠点`_ がまだ残っていますが、Python プログラマにとって (C 言語や C++ のような"
"他言語に比べると) 参入障壁が低いという利点があります。"

#: ../source/guides/packaging-binary-extensions.rst:139
msgid ""
"`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members of "
"the scientific Python community, that aims to leverage LLVM to allow "
"selective compilation of pieces of a Python application to native machine "
"code at runtime. It requires that LLVM be available on the system where the "
"code is running, but can provide significant speed increases, especially for "
"operations that are amenable to vectorisation."
msgstr ""
"`Numba <http://numba.pydata.org/>`__ は新しめのツールで、LLVM を活用して "
"Python アプリケーションの一部分をランタイムに選択的にネイティブの機械コードに"
"コンパイルできるようにすることを目指している科学分野の Python コミュニティに"
"よって作成されました。この取り組みでは、コードが動作するシステムに LLVM が存"
"在していなければなりませんが、特にベクトル化が容易な操作について顕著な速度増"
"加を提供することができます。"

#: ../source/guides/packaging-binary-extensions.rst:148
msgid "Alternatives to handcoded wrapper modules"
msgstr "ハードコードされたラッパモジュールに対する代替策"

#: ../source/guides/packaging-binary-extensions.rst:150
msgid ""
"The C ABI (Application Binary Interface) is a common standard for sharing "
"functionality between multiple applications. One of the strengths of the "
"CPython C API (Application Programming Interface) is allowing Python users "
"to tap into that functionality. However, wrapping modules by hand is quite "
"tedious, so a number of other alternative approaches should be considered."
msgstr ""
"C 言語 ABI (アプリケーションバイナリインタフェイス <Application Binary "
"Interface>)は、複数のアプリケーションの間で機能を共有する上での一般的な標準で"
"す。CPython の C 言語 API (アプリケーションプログラミングインタフェイス "
"<Application Programming Interface>) を使えば Python のユーザがその機能に入り"
"込むことができます。しかしながら、手動でモジュールごとにラッピングしていくの"
"はうんざりするような作業なので、いくつもの代替アプローチが検討されるべきで"
"す。"

#: ../source/guides/packaging-binary-extensions.rst:156
msgid ""
"The approaches described below don't simplify the distribution case at all, "
"but they *can* significantly reduce the maintenance burden of keeping "
"wrapper modules up to date."
msgstr ""
"以下に記述するアプローチは、単に配布物での事例ということは全くなく、むしろ"
"ラッパモジュールを最新に保つというメンテナンス上の重荷を大いに軽減することが"
"できるものです。"

#: ../source/guides/packaging-binary-extensions.rst:160
msgid ""
"In addition to being useful for the creation of accelerator modules, `Cython "
"<https://cython.org/>`__ is also widely used for creating wrapper modules "
"for C or C++ APIs. It involves wrapping the interfaces by hand, which gives "
"a wide range of freedom in designing and optimising the wrapper code, but "
"may not be a good choice for wrapping very large APIs quickly. See the `list "
"of third-party tools <https://github.com/cython/cython/wiki/AutoPxd>`_ for "
"automatic wrapping with Cython. It also supports performance-oriented Python "
"implementations that provide a CPython-like C-API, such as PyPy and Pyston."
msgstr ""
"アクセラレータモジュールの作成に役に立つことに加えて、 `Cython <https://"
"cython.org/>`__ は C 言語や C++ の API で書かれたものをラップするモジュールを"
"作成することにも役立ちます。インターフェイスを手動でラップする作業が必要であ"
"り、それはラッパーのソースコードを設計し最適化する上では大きな自由度を与えは"
"しますが、大規模な API を素早くラップするためにはあまり良い選択ではないかもし"
"れません。Cython を用いた自動ラッピングについては `サードパーティが提供する"
"ツールのリスト <https://github.com/cython/cython/wiki/AutoPxd>`_ を見てくださ"
"い。これらは、 PyPy や Pyston のような CPython に類似した C-API を提供する性"
"能重視の Python 実装をもサポートしています。"

#: ../source/guides/packaging-binary-extensions.rst:171
msgid ""
":doc:`pybind11 <pybind11:index>` is a pure C++11 library that provides a "
"clean C++ interface to the CPython (and PyPy) C API. It does not require a "
"pre-processing step; it is written entirely in templated C++. Helpers are "
"included for Setuptools or CMake builds. It was based on `Boost.Python "
"<https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/index.html>`__, "
"but doesn't require the Boost libraries or BJam."
msgstr ""
":doc:`pybind11 <pybind11:index>` は純粋な C++11 で書かれたライブラリで、綺麗"
"な C++ インタフェイスを CPython (および PyPy) の C 言語 API に提供します。事"
"前処理 (pre-processing) の段階が不要で、全体がテンプレート化された C++ で書か"
"れています。ヘルパーツールが Setuptools や CMake ビルドに含まれています。 "
"`Boost.Python <https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/"
"index.html>`__ を基礎にしていますが、Boost ライブラリや BJam がなくてはダメと"
"いうことはありません。"

#: ../source/guides/packaging-binary-extensions.rst:178
msgid ""
":doc:`cffi <cffi:index>` is a project created by some of the PyPy developers "
"to make it straightforward for developers that already know both Python and "
"C to expose their C modules to Python applications. It also makes it "
"relatively straightforward to wrap a C module based on its header files, "
"even if you don't know C yourself."
msgstr ""
":doc:`cffi <cffi:index>` は、 Python と C 言語の両方を知っている開発者が C 言"
"語で書いたモジュールを Python アプリケーションから単刀直入に使えるようにと何"
"人かの PyPy 開発者たちが作成しました。たとえ C 言語を知らなくても、 C 言語の"
"モジュールをそのヘッダファイルに基づいてラップすることもいくらか簡単になりま"
"した。"

#: ../source/guides/packaging-binary-extensions.rst:184
msgid ""
"One of the key advantages of ``cffi`` is that it is compatible with the PyPy "
"JIT, allowing CFFI wrapper modules to participate fully in PyPy's tracing "
"JIT optimisations."
msgstr ""
"``cffi`` の最も重要な利点のひとつはPyPy JIT と一緒に使えることで、CFFI ラッパ"
"モジュールが PyPy の実行中の JIT 最適化に同居できるのです。"

#: ../source/guides/packaging-binary-extensions.rst:188
msgid ""
"`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that allows "
"a variety of programming languages, including Python, to interface with C "
"and C++ code."
msgstr ""
"`SWIG <http://www.swig.org/>`__ は、 Python を含むさまざまなプログラミング言"
"語から C 言語や C++ のコードへのインタフェースを生成できるラッパインタフェー"
"ス生成ツールです。"

#: ../source/guides/packaging-binary-extensions.rst:192
msgid ""
"The standard library's ``ctypes`` module, while useful for getting access to "
"C level interfaces when header information isn't available, suffers from the "
"fact that it operates solely at the C ABI level, and thus has no automatic "
"consistency checking between the interface actually being exported by the "
"library and the one declared in the Python code. By contrast, the above "
"alternatives are all able to operate at the C *API* level, using C header "
"files to ensure consistency between the interface exported by the library "
"being wrapped and the one expected by the Python wrapper module. While "
"``cffi`` *can* operate directly at the C ABI level, it suffers from the same "
"interface inconsistency problems as ``ctypes`` when it is used that way."
msgstr ""
"標準ライブラリの ``ctypes`` モジュールは、ヘッダの情報が得られない時でも C 言"
"語レベルのインタフェイスにアクセスできる点が役に立つ一方で、 C 言語の ABI の"
"レベルでのみ動作するため実際にエクスポートされているインタフェースと Python "
"コード側での宣言との間の一貫性を自動的に確認する仕組みがないという点が弊害を"
"引き起こすかもしれません。対照的に、上記の代替策はすべて C 言語の *API* のレ"
"ベルで動作するので、 C 言語のヘッダファイルを使ってライブラリからエクスポート"
"されラップされるインタフェイスと Python 側のラッパモジュールが期待しているイ"
"ンタフェースとの間の一貫性を保証することができます。 ``cffi`` は C 言語の "
"ABI のレベルで直接に動作する *ことができる* 一方で、そのように使った場合には "
"``ctypes`` と同じく一貫性を欠いたインタフェースの問題を孕みます。"

#: ../source/guides/packaging-binary-extensions.rst:206
msgid "Alternatives for low level system access"
msgstr "低レベルのシステムアクセスを行う代替策"

#: ../source/guides/packaging-binary-extensions.rst:208
msgid ""
"For applications that need low level system access (regardless of the "
"reason), a binary extension module often *is* the best way to go about it. "
"This is particularly true for low level access to the CPython runtime "
"itself, since some operations (like releasing the Global Interpreter Lock) "
"are simply invalid when the interpreter is running code, even if a module "
"like ``ctypes`` or ``cffi`` is used to obtain access to the relevant C API "
"interfaces."
msgstr ""
"(理由を問わず) 低レベルのシステムにアクセスする必要のあるアプリケーションに"
"とって、バイナリ拡張モジュールはしばしば *進むべき最良の道* です。これは、 "
"``ctypes`` や ``cffi`` といったモジュールが適切な C 言語の API インタフェース"
"へのアクセスを取得するために使われている場合であってさえも、 (グローバルイン"
"タプリタロックの解除のような) いくつかの操作がインタプリタがコードを実行して"
"いる時には無効であるということだけを見ても、CPython ランタイム自身の低レベル"
"部分にアクセスする際によく当てはまると言えます。"

#: ../source/guides/packaging-binary-extensions.rst:216
msgid ""
"For cases where the extension module is manipulating the underlying "
"operating system or hardware (rather than the CPython runtime), it may "
"sometimes be better to just write an ordinary C library (or a library in "
"another systems programming language like C++ or Rust that can export a C "
"compatible ABI), and then use one of the wrapping techniques described above "
"to make the interface available as an importable Python module."
msgstr ""
"拡張モジュールが (CPythonのランタイムではなく) 下層のオペレーティングシステム"
"やハードウェアを操作しようとする場合には、単純に通常の C 言語 (または C++ や "
"Rust のような別のシステム言語で C 言語と互換性のある ABI をエクスポートできる"
"もの) でライブラリを書いて、それを上述のようなインポート可能な Python のモ"
"ジュールとしてインタフェースを構築できるラッピングテクニックを使う方が良いと"
"いう場合もあるでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:225
msgid "Implementing binary extensions"
msgstr "バイナリ拡張を実装する"

#: ../source/guides/packaging-binary-extensions.rst:227
msgid ""
"The CPython :doc:`Extending and Embedding <python:extending/index>` guide "
"includes an introduction to writing a :doc:`custom extension module in C "
"<python:extending/extending>`."
msgstr ""
"CPython の :doc:`拡張と埋め込み <python:extending/index>` のガイドには、 :"
"doc:`C 言語による独自の拡張モジュール <python:extending/extending>` を書くた"
"めの導入的な説明があります。"

#: ../source/guides/packaging-binary-extensions.rst:231
msgid ""
"FIXME: Elaborate that all this is one of the reasons why you probably "
"*don't* want to handcode your extension modules :)"
msgstr ""
"FIXME: これが拡張モジュールを支援ツールなしで書きたいと *思わない* であろうと"
"いう理由のひとつであることを詳しく説明すること :)"

#: ../source/guides/packaging-binary-extensions.rst:236
msgid "Extension module lifecycle"
msgstr "拡張モジュールのライフサイクル"

#: ../source/guides/packaging-binary-extensions.rst:238
#: ../source/guides/packaging-binary-extensions.rst:244
#: ../source/guides/packaging-binary-extensions.rst:250
#: ../source/guides/packaging-binary-extensions.rst:256
#: ../source/guides/packaging-binary-extensions.rst:376
msgid "FIXME: This section needs to be fleshed out."
msgstr "FIXME: この節には肉付けが必要です。"

#: ../source/guides/packaging-binary-extensions.rst:242
msgid "Implications of shared static state and subinterpreters"
msgstr "shared static state やサブインタプリタの影響"

#: ../source/guides/packaging-binary-extensions.rst:248
msgid "Implications of the GIL"
msgstr "GIL の影響"

#: ../source/guides/packaging-binary-extensions.rst:254
msgid "Memory allocation APIs"
msgstr "メモリを割り当てる API 群"

#: ../source/guides/packaging-binary-extensions.rst:262
msgid "ABI Compatibility"
msgstr "ABI の互換性"

#: ../source/guides/packaging-binary-extensions.rst:264
msgid ""
"The CPython C API does not guarantee ABI stability between minor releases "
"(3.2, 3.3, 3.4, etc.). This means that, typically, if you build an extension "
"module against one version of Python, it is only guaranteed to work with the "
"same minor version of Python and not with any other minor versions."
msgstr ""
"CPython の C 言語 API は、マイナーリリース (3.2, 3.3, 3.4 等) 間の ABI の互換"
"性を保証しません。これが意味するところは、典型的には、Python のあるバージョン"
"向けに拡張モジュールをビルドした時にマイナーバージョンまで同じ Python での動"
"作が保証されるだけであって、他のマイナーバージョンについては保証されないとい"
"うことです。"

#: ../source/guides/packaging-binary-extensions.rst:270
msgid ""
"Python 3.2 introduced the Limited API, with is a well-defined subset of "
"Python's C API. The symbols needed for the Limited API form the \"Stable "
"ABI\" which is guaranteed to be compatible across all Python 3.x versions. "
"Wheels containing extensions built against the stable ABI use the ``abi3`` "
"ABI tag, to reflect that they're compatible with all Python 3.x versions."
msgstr ""
"Python 3.2 では、Python の C 言語 API のよく定義されたサブセットとして "
"Limited API を導入しました。Limited API が必要とするシンボル群は、Python 3.x "
"のすべてのバージョンを通じて互換性を保つことが保証された \"Stable ABI\" を形"
"成しています。Stable ABI を使ってビルドされた拡張部分を含む Wheel は、Python "
"3.x のすべてのバージョンで互換性を保っていることを反映するために ``abi3`` と"
"いう ABI タグを使用します。"

#: ../source/guides/packaging-binary-extensions.rst:277
msgid ""
"CPython's :doc:`C API stability<python:c-api/stable>` page provides detailed "
"information about the API / ABI stability guarantees, how to use the Limited "
"API and the exact contents of the \"Limited API\"."
msgstr ""
"CPython の :doc:`C 言語 API の安定性 <python:c-api/stable>` のページには、 "
"API/ABI の安定性保証、つまり、 Limited API をどのように使うのかや \"Limited "
"API\" の正確な内容について詳しい情報があります。"

#: ../source/guides/packaging-binary-extensions.rst:283
msgid "Building binary extensions"
msgstr "バイナリ拡張をビルドする"

#: ../source/guides/packaging-binary-extensions.rst:285
msgid "FIXME: Cover the build-backends available for building extensions."
msgstr "FIXME: 拡張をビルドする際に利用可能なビルドバックエンドをカバーせよ。"

#: ../source/guides/packaging-binary-extensions.rst:288
msgid "Building extensions for multiple platforms"
msgstr "複数のプラットフォーム向けに拡張モジュールをビルドする"

#: ../source/guides/packaging-binary-extensions.rst:290
msgid ""
"If you plan to distribute your extension, you should provide :term:`wheels "
"<Wheel>` for all the platforms you intend to support. These are usually "
"built on continuous integration (CI) systems. There are tools to help you "
"build highly redistributable binaries from CI; these include :ref:"
"`cibuildwheel` and :ref:`multibuild`."
msgstr ""
"あなたが自分の書いた拡張モジュールを配布するつもりがあるなら、あたながサポー"
"トしようと思うすべてのプラットフォーム向けに :term:`wheels <Wheel>` を準備す"
"るべきです。通常はこれらを継続的インテグレーション (CI) システム上でビルドし"
"ます。:ref:`cibuildwheel` や :ref:`multibuild` のような CI から再配布が非常に"
"やりやすいバイナリをビルドするのを補助するツールの存在が知られています。"

#: ../source/guides/packaging-binary-extensions.rst:296
msgid ""
"For most extensions, you will need to build wheels for all the platforms you "
"intend to support. This means that the number of wheels you need to build is "
"the product of::"
msgstr ""
"ほとんどの拡張部分向けに、すべてのサポートするつもりのあるプラットフォーム用"
"の wheel をビルドする必要があるでしょう。これが意味するところは、ビルドする必"
"要のある wheel 群の数が次のような掛け算になるだろうということです::"

#: ../source/guides/packaging-binary-extensions.rst:302
msgid ""
"Using CPython's :ref:`Stable ABI <cpython-stable-abi>` can help "
"significantly reduce the number of wheels you need to provide, since a "
"single wheel on a platform can be used with all Python minor versions; "
"eliminating one dimension of the matrix. It also removes the need to "
"generate new wheels for each new minor version of Python."
msgstr ""
"CPython の :ref:`Stable ABI <cpython-stable-abi>` を使うことで、準備する必要"
"のある wheel の数を大いに減らすことに役立つでしょう、というのは、あるプラット"
"フォーム上の単一の wheel が Python のすべてのマイナーバージョンで使える; つま"
"り、マトリクスの次元をひとつ削除することになるからです。さらに、新しいマイ"
"ナーバージョンの Python が出現するたびに新たに wheel を生成する必要もなくなり"
"ます。"

#: ../source/guides/packaging-binary-extensions.rst:309
msgid "Binary extensions for Windows"
msgstr "Windows 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:311
msgid ""
"Before it is possible to build a binary extension, it is necessary to ensure "
"that you have a suitable compiler available. On Windows, Visual C is used to "
"build the official CPython interpreter, and should be used to build "
"compatible binary extensions.  To set up a build environment for binary "
"extensions, install `Visual Studio Community Edition <https://visualstudio."
"microsoft.com/downloads/>`__ - any recent version is fine."
msgstr ""
"バイナリ拡張をビルドできるようになる前に、適切なコンパイラが利用できるように"
"なっていることを保証しなければなりません。Windows 上でCPython インタプリタを"
"ビルドするのに Visual C が使われていますが、互換性のあるバイナリ拡張をビルド"
"する時にも同じコンパイラを使うべきです。バイナリ拡張のためのビルド環境を構築"
"するためには、 `Visual Studio コミュニティエディション <https://visualstudio."
"microsoft.com/downloads/>`__ をインストールしてください - 最近のバージョンな"
"らどれでも構いません。"

#: ../source/guides/packaging-binary-extensions.rst:318
msgid ""
"One caveat: if you use Visual Studio 2019 or later, your extension will "
"depend on an \"extra\" file, ``VCRUNTIME140_1.dll``, in addition to the "
"``VCRUNTIME140.dll`` that all previous versions back to 2015 depend on. This "
"will add an extra requirement to using your extension on versions of CPython "
"that do not include this extra file. To avoid this, you can add the compile-"
"time argument ``/d2FH4-``. Recent versions of Python may include this file."
msgstr ""
"注意: Visual Studio 2019 またはこれ以降のバージョンを使う場合には、あなたの拡"
"張モジュールは、2015 までのそれ以前のバージョンで依存していた ``VCRUNTIME140."
"dll`` に加えて、\"追加的な\" ファイルである ``VCRUNTIME140_1.dll`` にも依存す"
"るでしょう。この追加のファイルを同梱していないバージョンの CPython 上であなた"
"の拡張モジュールを使う場合には、要求事項が追加されることになります。コンパイ"
"ル時に引数 ``/d2FH4`` を追加しておくことで、これを避けることができます。最近"
"のバージョンの Python ならこのファイルを同梱しているかもしれません。"

#: ../source/guides/packaging-binary-extensions.rst:326
msgid ""
"Building for Python prior to 3.5 is discouraged, because older versions of "
"Visual Studio are no longer available from Microsoft. If you do need to "
"build for older versions, you can set ``DISTUTILS_USE_SDK=1`` and "
"``MSSdk=1`` to force a the currently activated version of MSVC to be found, "
"and you should exercise care when designing your extension not to malloc/"
"free memory across different libraries, avoid relying on changed data "
"structures, and so on. Tools for generating extension modules usually avoid "
"these things for you."
msgstr ""
"Visual Studio の古いバージョンがもはや Microsoft 社から入手できないので、3.5"
"より古いバージョンの Python 向けにビルドすることは推奨されません。どうしても"
"古いバージョン向けにビルドする必要がある場合には、 ``DISTUTILS_USE_SDK=1`` お"
"よび ``MSSdk=1`` をセットすることで現在も使用可能なバージョンの MSVC が見つか"
"るようにすることと、あなたの拡張モジュールの中でライブラリを跨いでメモリを "
"malloc/free することのないように設計を見直すこと、また、修正されたデータ構造"
"に依存しないようにすることなどが必要です。拡張モジュールを生成するツール群"
"は、通常はこのようなことが起こらないようにしてくれています。"

#: ../source/guides/packaging-binary-extensions.rst:337
msgid "Binary extensions for Linux"
msgstr "Linux 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:339
msgid ""
"Linux binaries must use a sufficiently old glibc to be compatible with older "
"distributions. The `manylinux <https://github.com/pypa/manylinux>`_ Docker "
"images provide a build environment with a glibc old enough to support most "
"current Linux distributions on common architectures."
msgstr ""
"Linux のバイナリは、古い配布物と互換性を保つために十分に古い glibc を使わなけ"
"ればなりません。 `manylinux <https://github.com/pypa/manylinux>`_ の Docker "
"イメージを使えば、よくあるアーキテクチャのほとんどの現行版 Linux 配布物をサ"
"ポートするのに十分なほど古い glibc を伴ったビルド環境を準備できるでしょう。"

#: ../source/guides/packaging-binary-extensions.rst:345
msgid "Binary extensions for macOS"
msgstr "macOS 向けのバイナリ拡張"

#: ../source/guides/packaging-binary-extensions.rst:347
msgid ""
"Binary compatibility on macOS is determined by the target minimum deployment "
"system, e.g. *10.9*, which is often specified with the "
"``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building binaries "
"on macOS. When building with setuptools / distutils, the deployment target "
"is specified with the flag ``--plat-name``, e.g. ``macosx-10.9-x86_64``. For "
"common deployment targets for macOS Python distributions, see the `MacPython "
"Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/Spinning-"
"wheels>`_."
msgstr ""
"macOS におけるバイナリ互換性は、 macOS のバイナリをビルドする際にしばしば "
"``MACOSX_DEPLOYMENT_TARGET`` 環境変数で指定される例えば *10.9* のようなター"
"ゲットの最小デプロイメントシステムで決まります。 setuptools や distutils でビ"
"ルドする時には、デプロイメントターゲットは ``--plat-name`` フラグを使って、例"
"えば ``macosx-10.9-x86_64`` のように指定されます。 macOS 上の Python 配布物向"
"けのよくあるデプロイメントターゲットについては、 `MacPython スピンニングホ"
"イール wiki <https://github.com/MacPython/wiki/wiki/Spinning-wheels>`_ を見て"
"ください。"

#: ../source/guides/packaging-binary-extensions.rst:357
msgid "Publishing binary extensions"
msgstr "バイナリ拡張を公開する"

#: ../source/guides/packaging-binary-extensions.rst:359
msgid ""
"Publishing binary extensions through PyPI uses the same upload mechanisms as "
"publishing pure Python packages. You build a wheel file for your extension "
"using the build-backend and upload it to PyPI using :doc:`twine <twine:"
"index>`."
msgstr ""
"PyPI を通じてバイナリ拡張を公開する時にも、純 Python のパッケージを公開すると"
"きと同じアップロードのメカニズムを使います。その拡張の wheel をビルドバックエ"
"ンドを使ってビルドし、 :doc:`twine <twine:index>` を使って PyPI にアップロー"
"ドするということです。"

#: ../source/guides/packaging-binary-extensions.rst:365
msgid "Avoid binary-only releases"
msgstr "バイナリだけのリリースを避ける"

#: ../source/guides/packaging-binary-extensions.rst:367
msgid ""
"It is strongly recommended that you publish your binary extensions as well "
"as the source code that was used to build them. This allows users to build "
"the extension from source if they need to. Notably, this is required for "
"certain Linux distributions that build from source within their own build "
"systems for the distro package repositories."
msgstr ""
"バイナリ拡張を公開する時にはそれをビルドする際に用いたソースコードも公開する"
"ことが強く推奨されています。こうすることで、必要であればユーザがその拡張を"
"ソースコードからビルドすることができます。特筆すべきことに、 Linux ディストリ"
"ビューションの中には、そのディストロ向けのパッケージリポジトリの独自のビルド"
"システム内でソースコードからビルドすることを要求するものがあるのです。"

#: ../source/guides/packaging-binary-extensions.rst:374
msgid "Weak linking"
msgstr "弱いリンキング <Weak linking>"

#: ../source/guides/packaging-binary-extensions.rst:379
msgid "Additional resources"
msgstr "追加のリソース"

#: ../source/guides/packaging-binary-extensions.rst:381
msgid ""
"Cross-platform development and distribution of extension modules is a "
"complex topic, so this guide focuses primarily on providing pointers to "
"various tools that automate dealing with the underlying technical "
"challenges. The additional resources in this section are instead intended "
"for developers looking to understand more about the underlying binary "
"interfaces that those systems rely on at runtime."
msgstr ""
"拡張モジュールのプラットフォームを跨ぐ開発・配布は込み入った話題なので、この"
"ガイドでは主として背景にある技術的な課題の取り扱いを自動化するさまざまなツー"
"ルへのポインタを提供することに重点を置くことにします。代わりに、この節のその"
"他の部分では、そのようなシステムが実行時に依存するような下層のバイナリインタ"
"フェースについて開発者が理解を深めるために見ることを意図しています。"

#: ../source/guides/packaging-binary-extensions.rst:388
msgid "Cross-platform wheel generation with scikit-build"
msgstr "sckit-build を用いたクロスプラットフォームな wheel の生成"

#: ../source/guides/packaging-binary-extensions.rst:390
msgid ""
"The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ package "
"helps abstract cross-platform build operations and provides additional "
"capabilities when creating binary extension packages. Additional "
"documentation is also available on the `C runtime, compiler, and build "
"system generator <https://scikit-build.readthedocs.io/en/latest/generators."
"html>`_ for Python binary extension modules."
msgstr ""
"`scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ は、抽象的な"
"ビルド作業を補助し、バイナリ拡張のパッケージを作成する時に必要な追加的な能力"
"を提供します。 Python のバイナリ拡張モジュールに関するさらなる説明文書は、 "
"`C 言語におけるランタイム・コンパイラ・ビルドシステム生成器 <https://scikit-"
"build.readthedocs.io/en/latest/generators.html>`_ にあります。"

#: ../source/guides/packaging-binary-extensions.rst:398
msgid "Introduction to C/C++ extension modules"
msgstr "C/C++ による拡張モジュールの紹介"

#: ../source/guides/packaging-binary-extensions.rst:400
msgid ""
"For a more in depth explanation of how extension modules are used by CPython "
"on a Debian system, see the following articles:"
msgstr ""
"Debian システム上で CPython がどのようにして拡張モジュールを使うのかについ"
"て、もっと深掘りした説明が次の記事に出ています:"

#: ../source/guides/packaging-binary-extensions.rst:403
msgid ""
"`What are (c)python extension modules? <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"
msgstr ""
"`(c)python の拡張モジュールとはどんなものか？ <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:404
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr ""
"`gil をリリースする <https://thomasnyberg.com/releasing_the_gil.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:405
msgid ""
"`Writing cpython extension modules using C++ <https://thomasnyberg.com/"
"cpp_extension_modules.html>`_"
msgstr ""
"`C++ で cpython の拡張モジュールを書く <https://thomasnyberg.com/"
"cpp_extension_modules.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:408
msgid "Additional considerations for binary wheels"
msgstr "バイナリの wheel に関する追加的な考慮"

#: ../source/guides/packaging-binary-extensions.rst:410
msgid ""
"The `pypackaging-native <https://pypackaging-native.github.io/>`_ website "
"has additional coverage of packaging Python packages with native code. It "
"aims to provide an overview of the most important packaging issues for such "
"projects, with in-depth explanations and references."
msgstr ""
"`pypackaging-native <https://pypackaging-native.github.io/>`_ ウェブサイトに"
"は、ネイティブのソースコード付きで Python パッケージをパッケージングすること"
"の追加のカバレッジがあります。最重要のパッケージング上の課題について、そのよ"
"うな (課題に直面した) プロジェクト向けに詳細な説明とリファレンスを提供するこ"
"とを目的としています。"

#: ../source/guides/packaging-binary-extensions.rst:415
msgid ""
"Examples of topics covered are non-Python compiled dependencies (\"native "
"dependencies\"), the importance of the ABI (Application Binary Interface) of "
"native code, dependency on SIMD code and cross compilation."
msgstr ""
"話題の例としては、非 Python の要コンパイルな依存関係 (\"ネイティブ依存関係"
"\") や、ネイティブソースコードの ABI (Application Binary Interface) の重要性"
"や、 SIMD ソースコードへの依存とクロスコンパイルなどをカバーしています。"

#: ../source/guides/packaging-namespace-packages.rst:5
msgid "Packaging namespace packages"
msgstr "名前空間パッケージをパッケージする"

#: ../source/guides/packaging-namespace-packages.rst:7
msgid ""
"Namespace packages allow you to split the sub-packages and modules within a "
"single :term:`package <Import Package>` across multiple, separate :term:"
"`distribution packages <Distribution Package>` (referred to as "
"**distributions** in this document to avoid ambiguity). For example, if you "
"have the following package structure:"
msgstr ""
"名前空間 (Namespace) パッケージは、複数かつ個別の :term:`パッケージ <Import "
"Package>` (曖昧にならないようにこの文書では **配布物** と呼ぶことにする) を越"
"えて、単一の :term:`パッケージ <Import Package>` の中のサブパッケージやモ"
"ジュールを分離できるようにすることができます。例えば、下に示すようなパッケー"
"ジ構造であれば:"

#: ../source/guides/packaging-namespace-packages.rst:26
msgid "And you use this package in your code like so::"
msgstr "そして、このパッケージを自分のソースコード中で使うにはこのようにする::"

#: ../source/guides/packaging-namespace-packages.rst:31
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""
"そうすることで、これらのサブパッケージ群を別々のふたつの配布物に分割すること"
"ができます:"

#: ../source/guides/packaging-namespace-packages.rst:50
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""
"それぞれのサブパッケージは、今や、個別にインストール・使用・バージョン管理す"
"ることができます。"

#: ../source/guides/packaging-namespace-packages.rst:52
msgid ""
"Namespace packages can be useful for a large collection of loosely-related "
"packages (such as a large corpus of client libraries for multiple products "
"from a single company). However, namespace packages come with several "
"caveats and are not appropriate in all cases. A simple alternative is to use "
"a prefix on all of your distributions such as ``import "
"mynamespace_subpackage_a`` (you could even use ``import "
"mynamespace_subpackage_a as subpackage_a`` to keep the import object short)."
msgstr ""
"名前空間パッケージは、 (単独の会社から出ている複数の製品向けのクライアントラ"
"イブラリの巨大な集積のような) 緩やかに関連したパッケージが多数含まれるコレク"
"ションに役立つでしょう。しかしながら、名前空間パッケージにはいくつかの注意書"
"きがあって、全ての場合に適切と言うわけではありません。単純明快な代替策は、あ"
"なたの配布物のすべてについて ``import mynamespace_subpackage_a`` のような接頭"
"語を使うことです (インポートするオブジェクトの名前を短く保つために ``import "
"mynamespace_subpackage_a as subpackage_a`` のようにインポートすることさえでき"
"ます) 。"

#: ../source/guides/packaging-namespace-packages.rst:62
msgid "Creating a namespace package"
msgstr "名前空間パッケージを作成する"

#: ../source/guides/packaging-namespace-packages.rst:64
msgid ""
"There are currently two different approaches to creating namespace packages, "
"from which the latter is discouraged:"
msgstr ""
"現在、名前空間パッケージを作るには２個の異なる手法がありますが、後者は使わな"
"い方が良いとされています:"

#: ../source/guides/packaging-namespace-packages.rst:67
msgid ""
"Use `native namespace packages`_. This type of namespace package is defined "
"in :pep:`420` and is available in Python 3.3 and later. This is recommended "
"if packages in your namespace only ever need to support Python 3 and "
"installation via ``pip``."
msgstr ""
"`組み込みの名前空間パッケージ`_ を用いる方法。この種の名前空間パッケージは :"
"pep:`420` で定義されていて、 Python 3.3 およびそれ以降で利用することができま"
"す。パッケージ中の名前空間が Python 3 だけをサポートすればよくて ``pip`` でイ"
"ンストールするのであれば、これが推奨される方法です。"

#: ../source/guides/packaging-namespace-packages.rst:71
msgid ""
"Use `legacy namespace packages`_. This comprises `pkgutil-style namespace "
"packages`_ and `pkg_resources-style namespace packages`_."
msgstr ""
"`レガシー名前空間パッケージ群`_ を使ってください。これは`pkgutil 型の名前空間"
"パッケージ`_ および `pkg_resources 型の名前空間パッケージ`_ から構成されてい"
"ます。"

#: ../source/guides/packaging-namespace-packages.rst:75
msgid "Native namespace packages"
msgstr "組み込みの名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:77
msgid ""
"Python 3.3 added **implicit** namespace packages from :pep:`420`. All that "
"is required to create a native namespace package is that you just omit :file:"
"`__init__.py` from the namespace package directory. An example file "
"structure (following :ref:`src-layout <setuptools:src-layout>`):"
msgstr ""
"Python 3.3 では :pep:`420` から **暗黙の** 名前空間パッケージを追加しました。"
"ネイティブな名前空間パッケージを作成するのに必要なことは、名前空間パッケージ"
"のディレクトリから :file:`__init__.py` を取り除くことだけです。ファイル構造の"
"例はこちら (:ref:`ソースコードレイアウト <setuptools.src-layout>` に従いま"
"す):"

#: ../source/guides/packaging-namespace-packages.rst:94
msgid ""
"It is extremely important that every distribution that uses the namespace "
"package omits the :file:`__init__.py` or uses a pkgutil-style :file:"
"`__init__.py`. If any distribution does not, it will cause the namespace "
"logic to fail and the other sub-packages will not be importable."
msgstr ""
"名前空間パッケージを用いる各配布物で :file:`__init__.py` を省くこと、また"
"は、 pkgutil 型の :file:`__init__.py` を使用することが極めて重要です。もしい"
"ずれかの配布物でこれを忘れると、名前空間の論理が破綻して、他のサブパッケージ"
"をインポートすることができなくなります。"

#: ../source/guides/packaging-namespace-packages.rst:99
msgid ""
"The ``src-layout`` directory structure allows automatic discovery of "
"packages by most :term:`build backends <Build Backend>`. See :ref:`src-"
"layout-vs-flat-layout` for more information. If however you want to manage "
"exclusions or inclusions of packages yourself, this is possible to be "
"configured in the top-level :file:`pyproject.toml`:"
msgstr ""
"``src-layout`` ディレクトリ構造によって、ほとんどの :term:`ビルドバックエン"
"ド <Build Backend>` が自動的にパッケージ群を発見できるようになります。もっと"
"情報が欲しい場合は :ref:`src-layout-vs-flat-layout` を見てください。しかしな"
"がら、パッケージの包含・除外を自分自身で管理したいのであれば、トップレベル"
"の :file:`pyproject.toml` を設定することで可能です:"

#: ../source/guides/packaging-namespace-packages.rst:117
msgid "The same can be accomplished with a :file:`setup.cfg`:"
msgstr "同じことが :file:`setup.cfg` で達成できます:"

#: ../source/guides/packaging-namespace-packages.rst:129
msgid "Or :file:`setup.py`:"
msgstr "または :file:`setup.py` ファイル:"

#: ../source/guides/packaging-namespace-packages.rst:142
msgid ""
":ref:`setuptools` will search the directory structure for implicit namespace "
"packages by default."
msgstr ""
":ref:`setuptools` は、デフォルトでは暗黙の名前空間パッケージを探してディレク"
"トリ構造を探索します。"

#: ../source/guides/packaging-namespace-packages.rst:145
msgid ""
"A complete working example of two native namespace packages can be found in "
"the `native namespace package example project`_."
msgstr ""
"ふたつの名前空間パッケージの完全な動作例は、 `組み込みの名前空間パッケージの"
"使用例プロジェクト`_ にあります。"

#: ../source/guides/packaging-namespace-packages.rst:151
msgid ""
"Because native and pkgutil-style namespace packages are largely compatible, "
"you can use native namespace packages in the distributions that only support "
"Python 3 and pkgutil-style namespace packages in the distributions that need "
"to support Python 2 and 3."
msgstr ""
"組み込み名前空間パッケージと pkgutil 型の名前空間パッケージは、多くの部分で互"
"換性があるので、 Python 3 しかサポートしない配布物では組み込み名前空間パッ"
"ケージを使用し、 Python 2 と Python 3 の両方をサポートしなければならない配布"
"物では pkgutil型名前空間パッケージを使うことが可能です。"

#: ../source/guides/packaging-namespace-packages.rst:158
msgid "Legacy namespace packages"
msgstr "伝統的な名前空間パッケージ群"

#: ../source/guides/packaging-namespace-packages.rst:160
msgid ""
"These two methods, that were used to create namespace packages prior to :pep:"
"`420`, are now considered to be obsolete and should not be used unless you "
"need compatibility with packages already using this method. Also, :doc:"
"`pkg_resources <setuptools:pkg_resources>` has been deprecated."
msgstr ""
"これらのふたつの方法は、 :pep:`420` 以前に名前空間を作成するのに使われました"
"が、今では過去のやり方であると考えられていて、すでにこの方法を使っているパッ"
"ケージとの互換性を必要とする場合を除いては使われるべきではないと考えられてい"
"ます。また、 :doc:`pkg_resources <setuptools:pkg_resources>` は非推奨になりま"
"した。"

#: ../source/guides/packaging-namespace-packages.rst:165
msgid ""
"To migrate an existing package, all packages sharing the namespace must be "
"migrated simultaneously."
msgstr ""
"既存のパッケージを移植するためには、名前空間を共有するすべてのパッケージが同"
"時に移植されなければなりません。"

#: ../source/guides/packaging-namespace-packages.rst:167
msgid ""
"While native namespace packages and pkgutil-style namespace packages are "
"largely compatible, pkg_resources-style namespace packages are not "
"compatible with the other methods. It's inadvisable to use different methods "
"in different distributions that provide packages to the same namespace."
msgstr ""
"組み込みの名前空間パッケージや pkgutil 型の名前空間パッケージは多くの点で互換"
"性がありますが、 pkg_resources 型の名前空間パッケージは他の手法とは互換性があ"
"りません。同じ名前空間向けにパッケージを提供するような複数の配布物で、異なる"
"手法を用いることは推奨されません。"

#: ../source/guides/packaging-namespace-packages.rst:174
msgid "pkgutil-style namespace packages"
msgstr "pkgutil 型名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:176
msgid ""
"Python 2.3 introduced the :doc:`pkgutil <python:library/pkgutil>` module and "
"the :py:func:`python:pkgutil.extend_path` function. This can be used to "
"declare namespace packages that need to be compatible with both Python 2.3+ "
"and Python 3. This is the recommended approach for the highest level of "
"compatibility."
msgstr ""
"Python 2.3 で :doc:`pkgutil <python:library/pkgutil>` モジュールと :py:func:"
"`python:pkgutil.extend_path` 関数が導入されました。Python 2.3+ と Python 3 の"
"両方に互換性を持つ必要がある名前空間パッケージを宣言するのにこれが使えるかも"
"しれません。これは、互換性のレベルが最も高くなるアプローチとして推奨されてい"
"ます。"

#: ../source/guides/packaging-namespace-packages.rst:181
msgid ""
"To create a pkgutil-style namespace package, you need to provide an :file:"
"`__init__.py` file for the namespace package:"
msgstr ""
"pkgutil 型の名前空間パッケージを作成するには、その名前空間パッケージ用に :"
"file:`__init__.py` ファイルを準備する必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:195
#: ../source/guides/packaging-namespace-packages.rst:242
msgid ""
"The :file:`__init__.py` file for the namespace package needs to contain the "
"following:"
msgstr ""
"名前空間パッケージ用の :file:`__init__.py` ファイルは、次に示すものを含んでい"
"る必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:202
#: ../source/guides/packaging-namespace-packages.rst:249
msgid ""
"**Every** distribution that uses the namespace package must include such an :"
"file:`__init__.py`. If any distribution does not, it will cause the "
"namespace logic to fail and the other sub-packages will not be importable.  "
"Any additional code in :file:`__init__.py` will be inaccessible."
msgstr ""
"ある名前空間パッケージを用いる **すべての** 配布物は、 :file:`__init__.py` を"
"持っていなければなりません。もしいずれかの配布物でそうなっていなければ、名前"
"空間の論理破綻を招き、他のサブパッケージをインポートすることができなくなるで"
"しょう。 :file:`__init__.py` に他のコードを追加しても、それはアクセスできない"
"ものとなるでしょう。"

#: ../source/guides/packaging-namespace-packages.rst:207
msgid ""
"A complete working example of two pkgutil-style namespace packages can be "
"found in the `pkgutil namespace example project`_."
msgstr ""
"pkgutil 型の名前空間パッケージのふたつの動作例が `pkgutil 型名前空間を例示す"
"るプロジェクト`_ にあります。"

#: ../source/guides/packaging-namespace-packages.rst:217
msgid "pkg_resources-style namespace packages"
msgstr "pkg_resources 型名前空間パッケージ"

#: ../source/guides/packaging-namespace-packages.rst:219
msgid ""
":doc:`Setuptools <setuptools:index>` provides the `pkg_resources."
"declare_namespace`_ function and the ``namespace_packages`` argument to :"
"func:`~setuptools.setup`. Together these can be used to declare namespace "
"packages. While this approach is no longer recommended, it is widely present "
"in most existing namespace packages. If you are creating a new distribution "
"within an existing namespace package that uses this method then it's "
"recommended to continue using this as the different methods are not cross-"
"compatible and it's not advisable to try to migrate an existing package."
msgstr ""
":doc:`Setuptools <setuptools:index>` は、 `pkg_resources.declare_namespace`_ "
"関数と :func:`~setuptools.setup` に渡す ``namespace_packages`` 引数を提供しま"
"す。これらを一緒に使うことで名前空間パッケージを宣言することができます。この"
"手法はもはや推奨されていませんが、既存の名前空間パッケージのほとんどで使われ"
"ています。この手法を採用している既存の名前空間パッケージの中に新しい配布物を"
"作成する時には、異なる手法が相互に互換ではないために既存パッケージを移植しよ"
"うとすることが推奨されていないので、この手法を採用し続けることを推奨します。"

#: ../source/guides/packaging-namespace-packages.rst:228
msgid ""
"To create a pkg_resources-style namespace package, you need to provide an :"
"file:`__init__.py` file for the namespace package:"
msgstr ""
"pkg_resources 型名前空間パッケージを作成するには、名前空間パッケージ用の :"
"file:`__init__.py` を準備する必要があります:"

#: ../source/guides/packaging-namespace-packages.rst:254
msgid ""
"Some older recommendations advise the following in the namespace package :"
"file:`__init__.py`:"
msgstr ""
"いくつかの古めの推奨では、次のような名前空間パッケージ用 :file:`__init__.py` "
"を使うように言っています:"

#: ../source/guides/packaging-namespace-packages.rst:264
msgid ""
"The idea behind this was that in the rare case that setuptools isn't "
"available packages would fall-back to the pkgutil-style packages. This isn't "
"advisable because pkgutil and pkg_resources-style namespace packages are not "
"cross-compatible. If the presence of setuptools is a concern then the "
"package should just explicitly depend on setuptools via ``install_requires``."
msgstr ""
"背景にあるアイデアとしては、 setuptools を使えないような稀な場合には、パッ"
"ケージを pkgutil 型パッケージに切り戻したいと言うことがあるかもしれません。 "
"pkgutil 型と pkg_resources 型の名前空間パッケージは互いに非互換なので、これは"
"推奨できるものではありません。 setuptool が存在するか否かが問題なのであれば、"
"パッケージとしては ``install_requires`` を通じて setuptools に明示的に依存す"
"ると示しておくべきです。"

#: ../source/guides/packaging-namespace-packages.rst:271
msgid ""
"Finally, every distribution must provide the ``namespace_packages`` argument "
"to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""
"最後に、それぞれの配布物は :file:`setup.py` の :func:`~setuptools.setup` 向け"
"に ``namespace_packages`` 引数を準備しておく必要があります。例えば:"

#: ../source/guides/packaging-namespace-packages.rst:285
msgid ""
"A complete working example of two pkg_resources-style namespace packages can "
"be found in the `pkg_resources namespace example project`_."
msgstr ""
"pkg_resources 型の名前空間パッケージの動作可能な二つの例が `pkg_resources 型"
"名前空間例示プロジェクト`_ で見つかるはずです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
msgid ""
"Publishing package distribution releases using GitHub Actions CI/CD workflows"
msgstr ""
"GitHub Actions CI/CD ワークフローを用いてパッケージ配布物のリリースを公開する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:7
msgid ""
"`GitHub Actions CI/CD`_ allows you to run a series of commands whenever an "
"event occurs on the GitHub platform. One popular choice is having a workflow "
"that's triggered by a ``push`` event. This guide shows you how to publish a "
"Python distribution whenever a tagged commit is pushed. It will use the "
"`pypa/gh-action-pypi-publish GitHub Action`_ for publishing. It also uses "
"GitHub's `upload-artifact`_ and `download-artifact`_ actions for temporarily "
"storing and downloading the source packages."
msgstr ""
"`GitHub Actions CI/CD`_ を使うと、 GitHub プラットフォームで何かイベントが発"
"生するたびに一連のコマンドを実行することができます。よくある選択のひとつは、 "
"``push`` イベントを引き金にしてあるワークフローを行うというものです。このガイ"
"ドでは、タグ付きのコミットが push されるたびに Python 配布物を公開するやり方"
"をお見せします。それには `pypa/gh-action-pypi-publish GitHub Action`_ を使っ"
"て出版 <publish> します。また、一時的な格納やソースコード配布物のダウンロード"
"のためにGitHubの `upload-artifact`_ と `download-artifact`_ を使います。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:19
msgid ""
"This guide *assumes* that you already have a project that you know how to "
"build distributions for and *it lives on GitHub*.  This guide also avoids "
"details of building platform specific projects. If you have binary "
"components, check out :ref:`cibuildwheel`'s GitHub Action examples."
msgstr ""
"このガイドでは、配布物をビルドするやり方を知っているプロジェクトが既にそんざ"
"いして、それが *GitHub に置いてある* ことを *前提* にしています。このガイド"
"は、また、特定のプロジェクトをビルドするプラットフォームの詳細に立ち入ること"
"はしません。もしあなたがバイナリのコンポーネントを持っているなら、 :ref:"
"`cibuildwheel` にある GitHub Action の例を調べてみてください。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:25
msgid "Configuring Trusted Publishing"
msgstr "信頼された出版 <Trusted Publishing> を設定する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:27
msgid ""
"This guide relies on PyPI's `Trusted Publishing`_ implementation to connect "
"to `GitHub Actions CI/CD`_. This is recommended for security reasons, since "
"the generated tokens are created for each of your projects individually and "
"expire automatically. Otherwise, you'll need to generate an `API token`_ for "
"both PyPI and TestPyPI. In case of publishing to third-party indexes like :"
"doc:`devpi <devpi:index>`, you may need to provide a username/password "
"combination."
msgstr ""
"このガイド文書は、`GitHub Actions CI/CD`_ に接続するために PyPI の `Trusted "
"Publishing`_ の実装に依存しています。これは、生成されるトークンが各プロジェク"
"トでそれぞれ独立に作成されて自動的に期限切れになるというセキュリティ上の理由"
"から推奨されています。さもなければ、 PyPI と TestPyPI の両方について `API "
"トークン`_ を生成する必要があるでしょう。:doc:`devpi <devpi:index>` のような"
"第三者パーティのインデックス向けに出版 <publish> する場合には、ユーザ名とパス"
"ワードの組み合わせを提供する必要があるかもしれません。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:35
msgid ""
"Since this guide will demonstrate uploading to both PyPI and TestPyPI, we'll "
"need two trusted publishers configured. The following steps will lead you "
"through creating the \"pending\" publishers for your new :term:`PyPI project "
"<Project>`. However it is also possible to add `Trusted Publishing`_ to any "
"pre-existing project, if you are its owner."
msgstr ""
"このガイドではPyPIとTestPyPIの両方へのアップロードを実証しますので、ふたつの"
"信頼あるパブリッシャが設定されていることが必要になるでしょう。以下に示すス"
"テップによって、新しい :term:`PyPI project <Project>` 用の \" ペンディングさ"
"れた\" パブリッシャ群を作成する手順を一通りお見せします。しかしながら、あなた"
"が所有者であるならば、任意の既存プロジェクトに `Trusted Publishing`_ を追加す"
"ることが可能でもあります。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:44
msgid ""
"If you followed earlier versions of this guide, you have created the secrets "
"``PYPI_API_TOKEN`` and ``TEST_PYPI_API_TOKEN`` for direct PyPI and TestPyPI "
"access. These are obsolete now and you should remove them from your GitHub "
"repository and revoke them in your PyPI and TestPyPI account settings in "
"case you are replacing your old setup with the new one."
msgstr ""
"このガイドの以前のバージョンを読み通したことがあるのであれば、PyPI や "
"TestPyPI への直接のアクセスをするために ``PYPI_API_TOKEN`` と "
"``TEST_PYPOI_API_TOKEN`` という秘密のトークンを作成したことでしょう。今ではこ"
"れらは過去のものとなっていて、旧来の設定を新しいものに置き換える際に GitHub "
"リポジトリから削除し、 PyPI や TestPyPI のアカウント設定から取り除くべきで"
"す。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:51
msgid "Let's begin! 🚀"
msgstr "始めましょう! 🚀"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:53
msgid "Go to https://pypi.org/manage/account/publishing/."
msgstr "https://pypi.org/manage/account/publishing/ へ行く。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:54
msgid ""
"Fill in the name you wish to publish your new :term:`PyPI project <Project>` "
"under (the ``name`` value in your ``setup.cfg`` or ``pyproject.toml``), the "
"GitHub repository owner's name (org or user), and repository name, and the "
"name of the release workflow file under the ``.github/`` folder, see :ref:"
"`workflow-definition`. Finally, add the name of the GitHub Environment "
"(``pypi``) we're going set up under your repository. Register the trusted "
"publisher."
msgstr ""
"新しい :term:`PyPI プロジェクト <Project>` 向けに発行したいと思う名前を "
"(``setup.cfg`` か ``pyproject.toml`` の中の ``名称 <name>`` の値として)、"
"GitHub のリポジトリ所有者の名称 (org または user) と、リポジトリの名称と、 "
"``.github/`` フォルダの下のリリースワークフローの名称を記入するには、 :ref:`"
"ワークフロー定義 <workflow-definition>` をみてください。最後に、これからリポ"
"ジトリ内に設定しようとするGutHub 環境 (``pypi``) の名称を追加してください。ト"
"ラステッドパブリッシャを登録してください。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:63
msgid ""
"Now, go to https://test.pypi.org/manage/account/publishing/ and repeat the "
"second step, but this time, enter ``testpypi`` as the name of the GitHub "
"Environment."
msgstr ""
"ここで https://test.pypi.org/manage/account/publishing/ へ行って第２のステッ"
"プを繰り返してください、ただし、今回は GitHub 環境の名称として ``testpypi`` "
"を入力します。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:66
msgid ""
"Your \"pending\" publishers are now ready for their first use and will "
"create your projects automatically once you use them for the first time."
msgstr ""
"ペンディングされたパブリッシャは今やその初回使用の準備ができており、初回使用"
"を行えば自動的にあなたのプロジェクトを生成します。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
msgid ""
"If you don't have a TestPyPI account, you'll need to create it. It's not the "
"same as a regular PyPI account."
msgstr ""
"TestPyPI のアカウントを持っていなければ、新たに作成する必要があります。これは"
"通常の PyPI のアカウントとは別のものです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:78
msgid ""
"For security reasons, you must require `manual approval <https://docs.github."
"com/en/actions/how-tos/managing-workflow-runs-and-deployments/managing-"
"deployments/managing-environments-for-deployment#creating-an-environment>`_ "
"on each run for the ``pypi`` environment."
msgstr ""
"セキュリティ上の理由から、``pypi`` 環境の実行の度に、 `手動での承認 <https://"
"docs.github.com/en/actions/how-tos/managing-workflow-runs-and-deployments/"
"managing-deployments/managing-environments-for-deployment#creating-an-"
"environment>`_ を要求しなければなりません。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:85
msgid "Creating a workflow definition"
msgstr "ワークフロー定義を作成する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:87
msgid ""
"GitHub CI/CD workflows are declared in YAML files stored in the ``.github/"
"workflows/`` directory of your repository."
msgstr ""
"GitHub CI/CD ワークフローは、リポジトリの ``.github/workflows/`` ディレクトリ"
"に置かれた YAML ファイルで宣言されます。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:90
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr ""
"``.github/workflows/publish-to-test-pypi.yml`` ファイルを作成しましょう。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:93
msgid ""
"Start it with a meaningful name and define the event that should make GitHub "
"run this workflow:"
msgstr ""
"意味のある名前で始めて、 GitHub がこのワークフローを走らせるべきイベントを定"
"義しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:101
msgid "Checking out the project and building distributions"
msgstr "プロジェクトをチェックアウトして配布物をビルドする"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:103
msgid ""
"We will have to define two jobs to publish to PyPI and TestPyPI "
"respectively, and an additional job to build the distribution packages."
msgstr ""
"PyPI と TestPyPI に向けて出版 <publish> するためには、二つのジョブを定義しな"
"ければならず、また、配布物のパッケージ群をビルドするための追加のジョブも定義"
"しなければなりません。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:107
msgid ""
"First, we'll define the job for building the dist packages of your project "
"and storing them for later use:"
msgstr ""
"最初に、あなたのプロジェクトの dist パッケージをビルドして、その後の使用のた"
"めに保存するジョブを定義しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:115
msgid ""
"This will download your repository into the CI runner and then install and "
"activate the newest available Python 3 release."
msgstr ""
"これによって、あなたのリポジトリを CI ランナーにダウンロードして、利用可能な"
"最新の Python 3 リリースをインストールしアクティベートすることになります。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:118
msgid ""
"And now we can build the dists from source and store them. In this example, "
"we'll use the ``build`` package. So add this to the steps list:"
msgstr ""
"そして、今や我々はソースコードから dist 配布物をビルドして保存しておくことが"
"できます。この例では、パッケージを ``build`` することになります。ですから、こ"
"れをステップリストに加えましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:128
msgid "Defining a workflow job environment"
msgstr "ワークフローのジョブ環境を定義する"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:130
msgid ""
"Now, let's add initial setup for our job that will publish to PyPI. It's a "
"process that will execute commands that we'll define later. In this guide, "
"we'll use the latest stable Ubuntu LTS version provided by GitHub Actions. "
"This also defines a GitHub Environment for the job to run in its context and "
"a URL to be displayed in GitHub's UI nicely. Additionally, it allows "
"acquiring an OpenID Connect token that the ``pypi-publish`` actions needs to "
"implement secretless Trusted Publishing to PyPI."
msgstr ""
"さて、PyPI へ公開 <publish> する予定のジョブに初期設定を追加しましょう。それ"
"は、後ほど定義するであろうコマンドを実行するプロセスです。このガイド文書で"
"は、GitHub Actions が提供している最新版の Ubuntu LTS 安定版バージョンです。こ"
"れは、また、そのコンテキスト内でジョブが走る GitHub 環境 <GitHub "
"Environment> を定義するものでもあり、 GitHub の UI の中に申し分なく表示され"
"る URL でもあります。さらに、それは、 ``pypi-publish`` アクションがシークレッ"
"トなしの PyPI への信頼ある公開を実装するために必要となる OpenID Connect の"
"トークンを取得することを可能にするものでもあります。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:144
msgid ""
"This will also ensure that the PyPI publishing workflow is only triggered if "
"the current commit is tagged."
msgstr ""
"これは、当該コミットがタグ付きである時にだけ PyPI 公開 <publishing> ワークフ"
"ローが起動されることをも保証するものです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:148
msgid "Publishing the distribution to PyPI"
msgstr "PyPI へ配布物を公開する <publishng>"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:150
msgid "Finally, add the following steps at the end:"
msgstr "最後に、次の手続きを末尾に追加しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:157
msgid ""
"This step uses the `pypa/gh-action-pypi-publish`_ GitHub Action: after the "
"stored distribution package has been downloaded by the `download-artifact`_ "
"action, it uploads the contents of the ``dist/`` folder into PyPI "
"unconditionally."
msgstr ""
"この手順では、保存されている配布パッケージが `download-artifact`_ アクション"
"によってダウンロードされた後に `pypa/gh-action-pypi-publish`_ という GitHub "
"Action: を使って、 ``dist/`` フォルダの内容物を無条件に PyPI へアップロードし"
"ます。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:164
msgid ""
"Starting with version `v1.11.0 <https://github.com/pypa/gh-action-pypi-"
"publish/releases/tag/v1.11.0>`_, `pypa/gh-action-pypi-publish`_ generates "
"and uploads :pep:`740`-compatible attestations for each distribution by "
"default. No additional manual signing steps are required."
msgstr ""
"バージョン `v1.11.0 <https://github.com/pypa/gh-action-pypi-publish/releases/"
"tag/v1.11.0>`_ 以降、 `pypa/gh-action-pypi-publish`_ は、デフォルトで各配布物"
"に対する :pep:`740` 互換の証明書を生成しアップロードするようになりました。手"
"動の署名手順はもはや必要ありません。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:172
msgid "Separate workflow for publishing to TestPyPI"
msgstr "TestPyPI へ公開 <publish> するもうひとつのワークフロー"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:174
msgid ""
"Now, repeat these steps and create another job for publishing to the "
"TestPyPI package index under the ``jobs`` section:"
msgstr ""
"さて、これらのステップを繰り返して、 ``jobs`` セクションに TestPyPI パッケー"
"ジインデックスに公開 <publish> するようなもうひとつのジョブを作成しましょう:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:184
msgid ""
"Requiring manual approvals in the ``testpypi`` GitHub Environment is "
"typically unnecessary as it's designed to run on each commit to the main "
"branch and is often used to indicate a healthy release publishing pipeline."
msgstr ""
"``testpypi`` Github 環境において手動の承認を要求することは、main ブランチへの"
"コミット毎に走るように設計されていることから、典型的な場合には不必要とされて"
"いて、使われるとすればリリースの公開 <publish> パイプラインが健全であることを"
"示すためであることが多いのです。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:188
msgid "The whole CI/CD workflow"
msgstr "CI/CD ワークフローの全体像"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:190
msgid ""
"This paragraph showcases the whole workflow after following the above guide."
msgstr ""
"この段落には、上述のガイド文書に従った場合のワークフローの全体像を披露しま"
"す。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:198
msgid "That's all, folks!"
msgstr "これでできましたよ、皆さん!"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:200
msgid ""
"Now, whenever you push a tagged commit to your Git repository remote on "
"GitHub, this workflow will publish it to PyPI. And it'll publish any push to "
"TestPyPI which is useful for providing test builds to your alpha users as "
"well as making sure that your release pipeline remains healthy!"
msgstr ""
"これで、手元の Git リポジトリをリモートの GitHub にタグ付きのコミットをプッ"
"シュする時はいつでも、このワークフローがそれを PyPI へ公開します。そして、"
"プッシュしさえすればいつでも TestPyPI で公開されますので、アルファ版のユーザ"
"にテストビルドを提供するためにも、あなたのリリースパイプラインが健全な状態に"
"保たれていることを確認するためにも役に立ちます!"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:208
msgid ""
"If your repository has frequent commit activity and every push is uploaded "
"to TestPyPI as described, the project might exceed the `PyPI project size "
"limit <https://pypi.org/help/#project-size-limit>`_. The limit could be "
"increased, but a better solution may constitute to use a PyPI-compatible "
"server like :ref:`pypiserver` in the CI for testing purposes."
msgstr ""
"リポジトリで活発に頻繁なコミットがあって、前述のようにあらゆるプッシュが "
"TestPyPI へアップロードされているなら、そのプロジェクトは `PyPI プロジェクト"
"サイズ制限 <https://pypi.org/help/#project-size-limit>`_ を超過するかもしれま"
"せん。この制限を緩和することもできますが、より良い解決策は試験目的の CI の中"
"で :ref:`pypiserver` のような PyPI と互換のあるサーバを使うように構成すること"
"かもしれません。"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:216
msgid ""
"It is recommended to keep the integrated GitHub Actions at their latest "
"versions, updating them frequently."
msgstr ""
"統合された GitHub Actions を最新版に保ち、頻繁にアップデートすることを推奨し"
"ます。"

#: ../source/guides/section-build-and-publish.rst:3
msgid "Building and Publishing"
msgstr "ビルドすることと公開すること"

#: ../source/guides/section-hosting.rst:3
msgid "Hosting"
msgstr "ホスティング"

#: ../source/guides/section-install.rst:3
#: ../source/specifications/pylock-toml.rst:729
msgid "Installation"
msgstr "インストール"

#: ../source/guides/single-sourcing-package-version.rst:-1
msgid "0; url=../../discussions/single-source-version/"
msgstr "0; url=../../discussions/single-source-version/"

#: ../source/guides/single-sourcing-package-version.rst:6
msgid "Redirecting stale single-source package version link..."
msgstr "古くなったシングルソースのパッケージバージョンリンクをリダイレクトする"

#: ../source/guides/single-sourcing-package-version.rst:8
msgid ""
"If the page doesn't automatically refresh, see :ref:`single-source-version`."
msgstr ""
"もし、ページが自動的にリフレッシュされないなら、 :ref:`single-source-"
"version` をみて下さい。"

#: ../source/guides/supporting-multiple-python-versions.rst:7
msgid "Supporting multiple Python versions"
msgstr "複数の Python バージョンをサポートする"

#: ../source/guides/supporting-multiple-python-versions.rst:10
msgid "2014-12-24"
msgstr "2014-12-24"

#: ../source/guides/supporting-multiple-python-versions.rst:36
msgid ""
"In addition to the work required to create a Python package, it is often "
"necessary that the package must be made available on different versions of "
"Python.  Different Python versions may contain different (or renamed) "
"standard library packages, and the changes between Python versions 2.x and 3."
"x include changes in the language syntax."
msgstr ""
"Python パッケージを作成するのに必要とされる仕事に加えて、しばしばそのパッケー"
"ジが異なるバージョンの Python に対応することが求められます。 Python のバー"
"ジョンが異なると、異なる (または名称を変更した) 標準ライブラリパッケージを含"
"むことがあり、 Python 2.x と 3.x の間には言語の文法に違いがあります。"

#: ../source/guides/supporting-multiple-python-versions.rst:42
msgid ""
"Performed manually, all the testing required to ensure that the package "
"works correctly on all the target Python versions (and OSs!) could be very "
"time-consuming. Fortunately, several tools are available for dealing with "
"this, and these will briefly be discussed here."
msgstr ""
"パッケージが対象となる Python バージョン (および OS 群！) で正しく動作するこ"
"とを確認するために要求されるテストを全て手動でやるとなると、大変に時間がかか"
"るでしょう。幸いなことに、このようなテストを扱ういくつかのツールを利用するこ"
"とができますので、ここで簡単に議論しておきましょう。"

#: ../source/guides/supporting-multiple-python-versions.rst:48
msgid "Automated testing and continuous integration"
msgstr "自動化されたテストと継続的インテグレーション"

#: ../source/guides/supporting-multiple-python-versions.rst:50
msgid ""
"Several hosted services for automated testing are available. These services "
"will typically monitor your source code repository (e.g. at `GitHub <https://"
"github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your "
"project's test suite every time a new commit is made."
msgstr ""
"自動化されたテスト用のオンラインサービスがいくつか利用可能です。典型的には、"
"これらのサービスがあなたのソースコードリポジトリ (例えば `GitHub <https://"
"github.com>`_ や `Bitbucket <https://bitbucket.org>`_) を監視していて、新しい"
"コミットが為されるたびにテストスイートを実行します。"

#: ../source/guides/supporting-multiple-python-versions.rst:55
msgid ""
"These services also offer facilities to run your project's test suite on "
"*multiple versions of Python*, giving rapid feedback about whether the code "
"will work, without the developer having to perform such tests themselves."
msgstr ""
"これらのサービスは、また、あなたのプロジェクトのテストスイートを *複数のバー"
"ジョンの Python* で走らせる機能を提供しているので、開発者がそのようなテストを"
"自分でやらなくてもソースコードが動作するか否かについて素早くフィードバックを"
"返してくれます。"

#: ../source/guides/supporting-multiple-python-versions.rst:59
msgid ""
"Wikipedia has an extensive `comparison <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ of many continuous-"
"integration systems. There are two hosted services which when used in "
"conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""
"Wikipedia には、数多くの継続的インテグレーションシステムを多方面から比較した "
"`比較ページ <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ があります。その中には、両方"
"を一緒に使うことで Linux ・ Mac ・ Windows を跨いだ自動化されたテストを実行で"
"きるようなふたつのオンラインサービスもあります。"

#: ../source/guides/supporting-multiple-python-versions.rst:65
msgid ""
"`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS "
"environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit "
"while the macOS is 10.9.2 at the time of writing."
msgstr ""
"`Travis CI <https://travis-ci.org>`_ は Linux と macOS の両方の環境を提供しま"
"す。原稿執筆時点で、 Linux 環境は Ubuntu 12.04 LTS Server Edition 64 bit "
"で、 macOS 環境は 10.9.2 です。"

#: ../source/guides/supporting-multiple-python-versions.rst:68
msgid ""
"`Appveyor <https://www.appveyor.com/>`_ provides a Windows environment "
"(Windows Server 2012)."
msgstr ""
"`Appveyor <https://www.appveyor.com/>`_ は、Windows 環境 (Windows Server "
"2012) を提供します。"

#: ../source/guides/supporting-multiple-python-versions.rst:79
msgid ""
"Both `Travis CI`_ and Appveyor_ require a `YAML <https://yaml.org>`_-"
"formatted file as specification for the instructions for testing. If any "
"tests fail, the output log for that specific configuration can be inspected."
msgstr ""
"`Travis CI`_ も Appveyor_ も、 `YAML <https://yaml.org>`_ 形式のテスト仕様書"
"を必要とします。いずれかのテストが失敗したら、そのテスト指示設定に関するログ"
"出力を調査することができます。"

#: ../source/guides/supporting-multiple-python-versions.rst:84
msgid ""
"For Python projects that are intended to be deployed on both Python 2 and 3 "
"with a single-source strategy, there are a number of options."
msgstr ""
"単一のソースコードを Python 2 と 3 の両方で稼働させる戦略を目指す Python プロ"
"ジェクトには、いくつかの方法論があります。"

#: ../source/guides/supporting-multiple-python-versions.rst:88
msgid "Tools for single-source Python packages"
msgstr "単一ソースコード Python パッケージのためのツール"

#: ../source/guides/supporting-multiple-python-versions.rst:90
msgid ""
"`six <https://pypi.org/project/six/>`_ is a tool developed by Benjamin "
"Peterson for wrapping over the differences between Python 2 and Python 3. "
"The six_ package has enjoyed widespread use and may be regarded as a "
"reliable way to write a single-source Python module that can be use in both "
"Python 2 and 3. The six_ module can be used from as early as Python 2.5. A "
"tool called `modernize <https://pypi.org/project/modernize>`_, developed by "
"Armin Ronacher, can be used to automatically apply the code modifications "
"provided by six_."
msgstr ""
"`six <https://pypi.org/project/six/>`_ は、ベンジャミン・ピーターソン "
"(Benjamin Peterson) が開発した Python 2 と Python 3 の間の差異を吸収するため"
"のツールです。 six_ パッケージは広範囲に受け入れられていて、単一ソースコード"
"の Python パッケージが Python 2 と Python 3 の両方で使えるようにするための信"
"頼できる方法であるとみなされています。 six_ モジュールは早くも Python 2.5 か"
"ら使えます。アーミン・ロンチャー (Armin Ronacher) が開発した `modernize "
"<https://pypi.org/project/modernize>`_ という名前のツールは、 six_ が提供する"
"修正を自動的にソースコードに適用するために使うことができます。"

#: ../source/guides/supporting-multiple-python-versions.rst:99
msgid ""
"Similar to six_, `python-future <http://python-future.org/overview.html>`_ "
"is a package that provides a compatibility layer between Python 2 and Python "
"3 source code; however, unlike six_, this package aims to provide "
"interoperability between Python 2 and Python 3 with a language syntax that "
"matches one of the two Python versions: one may use"
msgstr ""
"six_ と同様に、`python-future <http://python-future.org/overview.html>`_ も"
"ソースコード上で Python 2 と Python 3 の間の互換を保つ層を提供するパッケージ"
"です; しかしながら、 six_ とは異なり、このパッケージでは、ふたつの Python "
"バージョンのうちの片方の言語文法で Python 2 と Python 3 の間の相互互換性を提"
"供しようとしています: 片方しか使えません"

#: ../source/guides/supporting-multiple-python-versions.rst:106
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr "Python 3 のプロジェクトにおける Python 2 (文法による) モジュール。"

#: ../source/guides/supporting-multiple-python-versions.rst:107
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""
"*Python 2* で書かれたプロジェクトにおける、 Python 3 (文法による) モジュー"
"ル。"

#: ../source/guides/supporting-multiple-python-versions.rst:109
msgid ""
"Because of the bi-directionality, python-future_ offers a pathway to "
"converting a Python 2 package to Python 3 syntax module-by-module. However, "
"in contrast to six_, python-future_ is supported only from Python 2.6. "
"Similar to modernize_ for six_, python-future_ comes with two scripts called "
"``futurize`` and ``pasteurize`` that can be applied to either a Python 2 "
"module or a Python 3 module respectively."
msgstr ""
"双方向性の故に、 python-future_ は Python 2 で書かれたパッケージをモジュール"
"毎に Python 3 の文法に変換する通路を提供します。しかしながら、 six_ とは異な"
"り、 python-future_ は Python 2.6 からしかサポートされていません。 six_ に対"
"する modernize_ と同様に、 python-future_ は、Python 2 のモジュールに適用でき"
"る ``futurize`` と Python 3 モジュールに適用できる ``pasteurize`` と呼ばれる"
"ふたつのスクリプトを備えています。"

#: ../source/guides/supporting-multiple-python-versions.rst:116
msgid ""
"Use of six_ or python-future_ adds an additional runtime dependency to your "
"package: with python-future_, the ``futurize`` script can be called with the "
"``--stage1`` option to apply only the changes that Python 2.6+ already "
"provides for forward-compatibility to Python 3. Any remaining compatibility "
"problems would require manual changes."
msgstr ""
"six_ ないし python-future_ を使用すると、追加的な動作時依存性がパッケージに追"
"加されます: python-future_ では ``futurist`` スクリプトを ``--stage1`` オプ"
"ションとともに呼び出すことで Python 2.6 以降に既に備えられた Python 3 との前"
"方互換性を用いる修正だけを行うことができます。残りの互換性問題は、手作業で修"
"正しなければなりません。"

#: ../source/guides/supporting-multiple-python-versions.rst:123
msgid "What's in which Python?"
msgstr "どの Python に何がある？"

#: ../source/guides/supporting-multiple-python-versions.rst:125
msgid ""
"Ned Batchelder provides a list of changes in each Python release for `Python "
"2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder."
"com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used "
"to check whether any changes between Python versions may affect your package."
msgstr ""
"Ned Batchelder は、Python の各リリースのそれぞれに一連の修正、つまり、 "
"`Python 2 <https://nedbatchelder.com/blog/201109/whats_in_which_python."
"html>`__、 `Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__、 そして `Python 3.4-3.6 <https://"
"nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__ を加えるこ"
"とができます。これらのリストは、 Python のバージョン間の変更が特定のパッケー"
"ジに影響を与えるか否かを確認するためにも使えることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:5
msgid "Supporting Windows using Appveyor"
msgstr "Appveyor を用いて Windows をサポートする"

#: ../source/guides/supporting-windows-using-appveyor.rst:8
msgid "2015-12-03"
msgstr "2015-12-03"

#: ../source/guides/supporting-windows-using-appveyor.rst:10
msgid ""
"This section covers how to use the free `Appveyor`_ continuous integration "
"service to provide Windows support for your project. This includes testing "
"the code on Windows, and building Windows-targeted binaries for projects "
"that use C extensions."
msgstr ""
"この節では、無料の `Appveyor`_ 継続的インテグレーションサービスを使ってあなた"
"のプロジェクトで Windows をサポートする方法について議論します。これには、 "
"Windows におけるソースコードのテストや、 C 言語拡張を含むプロジェクトの "
"Windows 向けのバイナリへのビルドを含みます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:19
msgid ""
"Many projects are developed on Unix by default, and providing Windows "
"support can be a challenge, because setting up a suitable Windows test "
"environment is non-trivial, and may require buying software licenses."
msgstr ""
"多くのプロジェクトが当然のように Unix 上で開発されており、適切なWindows のテ"
"スト環境を準備することが簡単ではないこととソフトウェアライセンスを購入しなけ"
"ればならないであろうことから Windows へのサポートを提供することはある種のチャ"
"レンジになっています。"

#: ../source/guides/supporting-windows-using-appveyor.rst:23
msgid ""
"The Appveyor service is a continuous integration service, much like the "
"better-known `Travis`_ service that is commonly used for testing by projects "
"hosted on `GitHub`_. However, unlike Travis, the build workers on Appveyor "
"are Windows hosts and have the necessary compilers installed to build Python "
"extensions."
msgstr ""
"Appveyor サービスは継続的インテグレーションのサービスであり、 `GitHub`_ にホ"
"ストされたプロジェクトをテストするのによく使われよりよく知られている "
"`Travis`_ サービスによく似ています。しかし、 Travis とは異なり、 Appveyor の"
"ビルドワーカーは Windows であり、 Python の拡張モジュールをビルドするために必"
"要なコンパイラもインストール済みです。"

#: ../source/guides/supporting-windows-using-appveyor.rst:29
msgid ""
"Windows users typically do not have access to a C compiler, and therefore "
"are reliant on projects that use C extensions distributing binary wheels on "
"PyPI in order for the distribution to be installable via ``python -m pip "
"install <dist>``. By using Appveyor as a build service (even if not using it "
"for testing) it is possible for projects without a dedicated Windows "
"environment to provide Windows-targeted binaries."
msgstr ""
"Windows のユーザは C 言語のコンパイラを持っていないのが普通で、従って、C 言語"
"拡張を使うプロジェクトについては PyPI でバイナリ wheel を配布していなければ "
"``python -m pip install <dist>`` 経由で配布物をインスールすることができませ"
"ん。 (たとえテスト目的では利用しなかったとしても) Appveyor をビルドサービスと"
"して利用することで、専用の Windows 環境がなくても Windows 上で動作するバイナ"
"リを準備することができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:37
msgid "Setting up"
msgstr "設定する"

#: ../source/guides/supporting-windows-using-appveyor.rst:39
msgid ""
"In order to use Appveyor to build Windows wheels for your project, you must "
"have an account on the service. Instructions on setting up an account are "
"given in `the Appveyor documentation <https://www.appveyor.com/docs/>`__. "
"The free tier of account is perfectly adequate for open source projects."
msgstr ""
"Appveyor を用いてプロジェクトの Windows 向けの wheel をビルドするためには、こ"
"のサービスのアカウントを持っていなければなりません。アカウントの設定に関する"
"説明は `the Appveyor documentation <https://www.appveyor.com/docs/>`__ にあり"
"ます。オープンソースプロジェクトには無料アカウントで十分です。"

#: ../source/guides/supporting-windows-using-appveyor.rst:44
msgid ""
"Appveyor provides integration with `GitHub`_ and `Bitbucket`_, so as long as "
"your project is hosted on one of those two services, setting up Appveyor "
"integration is straightforward."
msgstr ""
"Appveyor では `GitHub`_ や `BitBucket`_ との統合運用ができるので、プロジェク"
"トがこれらのうちのいずれかにホストされている限りは Appveyor から統合運用する"
"設定は簡単にできます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:48
msgid ""
"Once you have set up your Appveyor account and added your project, Appveyor "
"will automatically build your project each time a commit occurs. This "
"behaviour will be familiar to users of Travis."
msgstr ""
"Appveyor のアカウントの設定とプロジェクトの追加が終われば、コミットが発生する"
"たびに Appveyor が自動的にプロジェクトをビルドするようになります。Travis の"
"ユーザはこのような動作に慣れていることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:53
msgid "Adding Appveyor support to your project"
msgstr "プロジェクトに Appveyor サポートを追加する"

#: ../source/guides/supporting-windows-using-appveyor.rst:55
msgid ""
"In order to define how Appveyor should build your project, you need to add "
"an :file:`appveyor.yml` file to your project. The full details of what can "
"be included in the file are covered in the Appveyor documentation. This "
"guide will provide the details necessary to set up wheel builds."
msgstr ""
"Appveyor がプロジェクトをビルドする方法を定義するためには、 :file:`appveyor."
"yml` ファイルをプロジェクトに追加する必要があります。このファイルに書くことが"
"できる項目の完全な細部は、 Appveyor の説明文書で説明されています。このガイド"
"では、wheel のビルドに必要な部分に限って細部を説明します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:60
msgid ""
"Appveyor includes by default all of the compiler toolchains needed to build "
"extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of 3.3 and "
"3.4, the tools work out of the box. But for 64-bit versions of Python 3.3 "
"and 3.4, there is a small amount of additional configuration needed to let "
"distutils know where to find the 64-bit compilers. (From 3.5 onwards, the "
"version of Visual Studio used includes 64-bit compilers with no additional "
"setup)."
msgstr ""
"Appveyor は、Python 向けの拡張モジュールをビルドするために必要なすべてのコン"
"パイラ・ツールチェーンをデフォルトで含んでいます。 Python 2.7 ・ 3.5+ 、およ"
"び 32 ビット版の 3.3 と 3.4 向けであれば、このツールはそのままで動作します。"
"しかし、 64 ビット版の 3.3 と 3.4 では、 distutils が 64 ビット版のコンパイラ"
"を検出できるように少量の追加的な設定が必要です。( 3.5 以降については、追加の"
"設定をしなくても Visual Studio の各バージョンに含まれている 64 ビット版コンパ"
"イラを使います)。"

#: ../source/guides/supporting-windows-using-appveyor.rst:68
msgid "appveyor.yml"
msgstr "appveyor.yml"

#: ../source/guides/supporting-windows-using-appveyor.rst:74
msgid ""
"This file can be downloaded from `here <https://raw.githubusercontent.com/"
"pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/"
"appveyor.yml>`__."
msgstr ""
"このファイルは `ここ <https://raw.githubusercontent.com/pypa/python-"
"packaging-user-guide/master/source/guides/appveyor-sample/appveyor.yml>`__ か"
"らダウンロードすることができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:76
msgid ""
"The :file:`appveyor.yml` file must be located in the root directory of your "
"project. It is in ``YAML`` format, and consists of a number of sections."
msgstr ""
":file:`appveyor.yml` ファイルは、プロジェクトのルートディレクトリに置かなけれ"
"ばなりません。このファイルは ``YAML`` フォーマットで書かれていて、数多くのセ"
"クションから構成されています。"

#: ../source/guides/supporting-windows-using-appveyor.rst:79
msgid ""
"The ``environment`` section is the key to defining the Python versions for "
"which your wheels will be created. Appveyor comes with Python 2.6, 2.7, 3.3, "
"3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The example file "
"builds for all of these environments except Python 2.6. Installing for "
"Python 2.6 is more complex, as it does not come with pip included. We don't "
"support 2.6 in this document (as Windows users still using Python 2 are "
"generally able to move to Python 2.7 without too much difficulty)."
msgstr ""
"``environment`` は、どのバージョンの Python 向けに wheel を生成するかを定義す"
"る鍵となるセクションです。 Appveyor には 32 ビット版と 64 ビット版の両方の "
"Python 2.6, 2.7, 3.3, 3.4, 3.5 が予めインストールされています。例示したファイ"
"ルでは、 Python 2.6 を除くこれらすべての環境向けにビルドするようになっていま"
"す。 Python 2.6 は pip を含まないので、これをインストールすることはより複雑で"
"す。このドキュメントでは、 Python 2.6 はサポートしません (Windows ユーザでま"
"だ Python 2 を使っているユーザであれば、大抵は大した困難に遭遇せずに Python "
"2.7 へ移行できるからです) 。"

#: ../source/guides/supporting-windows-using-appveyor.rst:87
msgid ""
"The ``install`` section uses pip to install any additional software that the "
"project may require. The only requirement for building wheels is the "
"``wheel`` project, but projects may wish to customise this code in certain "
"circumstances (for example, to install additional build packages such as "
"``Cython``, or test tools such as ``tox``)."
msgstr ""
"``install`` セクションは、プロジェクトが必要とする追加的なソフトウェアを pip "
"を使ってインストールするのに使われます。 wheel をビルドするために必要なもの"
"は ``wheel`` プロジェクトだけですが、プロジェクトによっては特定の環境下ではこ"
"の項をカスタマイズしたいと思うかもしれません (例えば、 ``Cython`` のような追"
"加的なビルド用パッケージないし ``tox`` のようなテストツールをインストールする"
"ために)。"

#: ../source/guides/supporting-windows-using-appveyor.rst:93
msgid ""
"The ``build`` section simply switches off builds - there is no build step "
"needed for Python, unlike languages like ``C#``."
msgstr ""
"``build`` セクションでは単純にビルドのスイッチを切りましょう - ``C#`` のよう"
"な言語とは異なり、Python にはビルドする段階は不要なのです。"

#: ../source/guides/supporting-windows-using-appveyor.rst:96
msgid ""
"The main sections that will need to be tailored to your project are "
"``test_script`` and ``after_test``."
msgstr ""
"個々のプロジェクト向けに整える必要のある主なセクションは、 ``test_script`` "
"と ``after_test`` です。"

#: ../source/guides/supporting-windows-using-appveyor.rst:99
msgid ""
"The ``test_script`` section is where you will run your project's tests. The "
"supplied file runs your test suite using ``setup.py test``. If you are only "
"interested in building wheels, and not in running your tests on Windows, you "
"can replace this section with a dummy command such as ``echo Skipped "
"Tests``. You may wish to use another test tool, such as ``nose`` or :file:"
"`py.test`.  Or you may wish to use a test driver like ``tox`` - however if "
"you are using ``tox`` there are some additional configuration changes you "
"will need to consider, which are described below."
msgstr ""
"``test_script`` セクションは、プロジェクトのテストを走らせる場所です。与えら"
"れたファイルを使って ``setup.py test`` を走らせることで一連のテストを行いま"
"す。wheel ファイルをビルドすることだけに興味があるのであれば、そして、 "
"Windows でテストをしないのであれば、このセクションに ``echo Skipped Tests`` "
"のようなダミーコマンドを書いておけば良いでしょう。 ``nose`` や :file:`py."
"test` のような他のテストツールを使いたい場合があるかもしれません。あるいは、 "
"``tox`` のようなテストドライバを使いたいと思うかもしれません - しかしなが"
"ら、 ``tox`` を使う場合には、後述の通り、もう少し追加の設定変更を検討する必要"
"があることでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:108
msgid ""
"The ``after_test`` runs once your tests have completed, and so is where the "
"wheels should be built. Assuming your project uses the recommended tools "
"(specifically, ``setuptools``) then the ``setup.py bdist_wheel`` command "
"will build your wheels."
msgstr ""
"``after_test`` は、テストが完了したあとに一度だけ走り、したがって、ここで "
"wheel ファイルを生成するべきです。あなたのプロジェクトで推奨ツール (とりわけ "
"``setuptools``) を使っているなら、 ``setup.py bdist_wheel`` コマンドで wheel "
"ファイルを生成できます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:113
msgid ""
"Note that wheels will only be built if your tests succeed. If you expect "
"your tests to fail on Windows, you can skip them as described above."
msgstr ""
"テストが成功した場合にだけ wheel ファイルが生成されるという点に留意してくださ"
"い。 Windows ではテストが失敗するとわかっているなら、前述の通り、それを省略す"
"ることができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:118
msgid "Support script"
msgstr "サポートスクリプト"

#: ../source/guides/supporting-windows-using-appveyor.rst:120
msgid ""
"The :file:`appveyor.yml` file relies on a single support script, which sets "
"up the environment to use the SDK compiler for 64-bit builds on Python 3.3 "
"and 3.4.  For projects which do not need a compiler, or which don't support "
"3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml` file is needed."
msgstr ""
":file:`appveyor.yml` ファイルは、Python 3.3 と 3.4 上で 64 ビットでのビルドを"
"行うために SDK のコンパイラを使う環境を構築するためのひとつのサポートスクリプ"
"トに依存しています。コンパイラを必要としないプロジェクトや64 ビット版の "
"Windows 上の 3.3 や 3.4 をサポートしないプロジェクトでは、 :file:`appveyor."
"yml` ファイルさえあれば良いことになります。"

#: ../source/guides/supporting-windows-using-appveyor.rst:125
msgid ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows batch "
"script that runs a single command in an environment with the appropriate "
"compiler for the selected Python version. All you need to do is to set the "
"single environment variable ``DISTUTILS_USE_SDK`` to a value of ``1`` and "
"the script does the rest. It sets up the SDK needed for 64-bit builds of "
"Python 3.3 or 3.4, so don't set the environment variable for any other "
"builds."
msgstr ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ は、選択されたバー"
"ジョンの Python 用の適切なコンパイラが存在する環境内で単一のコマンドを実行す"
"るような Windows のバッチスクリプトです。やらなければならないことはたった一個"
"の環境変数 ``DISTUTILS_USE_SDK`` の値を ``1`` に設定することだけで、残りはす"
"べてこのスクリプトがやってくれます。スクリプトが Python 3.3 ないし 3.4 を 64 "
"ビットでビルドするのに必要な SDK 環境を構築するので、他のビルドに使う環境変数"
"を設定してはいけません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:132
msgid ""
"You can simply download the batch file and include it in your project "
"unchanged."
msgstr ""
"このバッチファイルは単純にダウンロードして修正なしにプロジェクト内に置くこと"
"ができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:136
msgid "Access to the built wheels"
msgstr "ビルドされたwheelファイルへのアクセス"

#: ../source/guides/supporting-windows-using-appveyor.rst:138
msgid ""
"When your build completes, the built wheels will be available from the "
"Appveyor control panel for your project. They can be found by going to the "
"build status page for each build in turn. At the top of the build output "
"there is a series of links, one of which is \"Artifacts\". That page will "
"include a list of links to the wheels for that Python version / "
"architecture. You can download those wheels and upload them to PyPI as part "
"of your release process."
msgstr ""
"ビルドが終わると、出来上がった wheel ファイルは Appveyor のコントロールパネル"
"の当該プロジェクトのページから取り出せるでしょう。ビルドのたびに生成されるビ"
"ルド状況のページからも取り出せます。ビルド結果の出力ページの先頭には一連のリ"
"ンクがあって、そのうちの \"Artifacts\" がそれです。そのページに行くと該当する"
"バージョンの Python / アーキテクチャに応じた wheel ファイルへのリンクがあるは"
"ずです。ここから wheel ファイルをダウンロードして、あなたのリリース作業の一環"
"として PyPI へアップロードすることができるでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:149
msgid "Testing with tox"
msgstr "tox を用いてテストする"

#: ../source/guides/supporting-windows-using-appveyor.rst:151
msgid ""
"Many projects use the :doc:`Tox <tox:index>` tool to run their tests. It "
"ensures that tests are run in an isolated environment using the exact files "
"that will be distributed by the project."
msgstr ""
"多くのプロジェクトで :doc:`Tox <tox:index>` ツールを用いてテストを行っていま"
"す。これを使えば、プロジェクトで配布するであろうファイル群そのものを使った独"
"立した環境下でテストを実行することができます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:155
msgid ""
"In order to use ``tox`` on Appveyor there are a couple of additional "
"considerations (in actual fact, these issues are not specific to Appveyor, "
"and may well affect other CI systems)."
msgstr ""
"Appveyor 上で ``tox`` を使うためには、(実際のところは、Appveyor に限ったこと"
"ではなく、他の CI システムにも影響します) いくつかの追加的な事項を検討しなけ"
"ればなりません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:159
msgid ""
"By default, ``tox`` only passes a chosen subset of environment variables to "
"the test processes. Because ``distutils`` uses environment variables to "
"control the compiler, this \"test isolation\" feature will cause the tests "
"to use the wrong compiler by default."
msgstr ""
"デフォルトでは ``tox`` は、環境変数のうちのいくつかの選択されたサブセットだけ"
"をテストプロセスに渡します。 ``distutils`` がコンパイラを制御するのに環境変数"
"を用いるので、この \"テスト環境分離\" の機能がデフォルトではテストに誤ったコ"
"ンパイラを使ってしまう問題を引き起こすでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:164
msgid ""
"To force ``tox`` to pass the necessary environment variables to the "
"subprocess, you need to set the ``tox`` configuration option ``passenv`` to "
"list the additional environment variables to be passed to the subprocess. "
"For the SDK compilers, you need"
msgstr ""
"``tox`` がサブプロセスに必要な環境変数を渡すように強制するためには、 ``tox`` "
"の設定オプションである ``passenv`` に追加的にサブプロセスに渡すべき環境変数の"
"リストを設定する必要があります。SDK コンパイラを使うのであれば、このような設"
"定が必要です"

#: ../source/guides/supporting-windows-using-appveyor.rst:169
msgid "``DISTUTILS_USE_SDK``"
msgstr "``DISTUTILS_USE_SDK``"

#: ../source/guides/supporting-windows-using-appveyor.rst:170
msgid "``MSSdk``"
msgstr "``MSSdk``"

#: ../source/guides/supporting-windows-using-appveyor.rst:171
msgid "``INCLUDE``"
msgstr "``INCLUDE``"

#: ../source/guides/supporting-windows-using-appveyor.rst:172
msgid "``LIB``"
msgstr "``LIB``"

#: ../source/guides/supporting-windows-using-appveyor.rst:174
msgid ""
"The ``passenv`` option can be set in your :file:`tox.ini`, or if you prefer "
"to avoid adding Windows-specific settings to your general project files, it "
"can be set by setting the ``TOX_TESTENV_PASSENV`` environment variable. The "
"supplied :file:`build.cmd` script does this by default whenever "
"``DISTUTILS_USE_SDK`` is set."
msgstr ""
"``passenv`` オプションは、 :file:`tox.ini` ファイルでも設定可能で、あるいは、"
"Windows 特有の設定をプロジェクト全体のファイル群に追加したくなければ "
"``TOX_TESTENV_PASSENV`` 環境変数でも設定できます。 ``DISTUTILS_USE_SDK`` が設"
"定されていればいつでも、与えられた :file:`build.cmd` スクリプトがこの動作をデ"
"フォルトで実行します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:180
msgid ""
"When used interactively, ``tox`` allows you to run your tests against "
"multiple environments (often, this means multiple Python versions). This "
"feature is not as useful in a CI environment like Travis or Appveyor, where "
"all tests are run in isolated environments for each configuration. As a "
"result, projects often supply an argument ``-e ENVNAME`` to ``tox`` to "
"specify which environment to use (there are default environments for most "
"versions of Python)."
msgstr ""
"``tox`` を対話的に使うと、複数の環境 (これはしばしば複数のバージョンの "
"Python を意味します) でテストを実行することができます。設定ごとに独立した環境"
"ですべてのテストを実行する Travis や Appveyor のような CI 環境で見られるほど"
"には、この機能は有用ではありません。結果として、しばしばプロジェクト側から "
"``-e ENVNAME`` 引数を ``tox`` に与えてどの環境を使うべきか (ほとんどのバー"
"ジョンの Python に対応したデフォルトの環境群があります) を指定します。"

#: ../source/guides/supporting-windows-using-appveyor.rst:187
msgid ""
"However, this does *not* work well with a Windows CI system like Appveyor, "
"where there are (for example) two installations of Python 3.4 (32-bit and 64-"
"bit) available, but only one ``py34`` environment in ``tox``."
msgstr ""
"しかしながら、このやり方は、 Appveyor のような Windows 上の CI システムでは "
"(例えば) Python 3.4 の (32 版ビットと64ビット版の) ふたつの実装が利用できるの"
"に、 ``tox`` では ``py34`` 環境がひとつしかないので、うまく動きません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:191
msgid ""
"In order to run tests using ``tox``, therefore, projects should probably use "
"the default ``py`` environment in ``tox``, which uses the Python interpreter "
"that was used to run ``tox``. This will ensure that when Appveyor runs the "
"tests, they will be run with the configured interpreter."
msgstr ""
"``tox`` を使ってテストを実行するためには、したがって、プロジェクトがおそらく"
"は ``tox`` のデフォルトの ``py`` 環境、ここでは ``tox`` を実行するために使わ"
"れた Python インタープリタを使うことになりますが、その環境を使うべきでしょ"
"う。"

#: ../source/guides/supporting-windows-using-appveyor.rst:196
msgid ""
"In order to support running under the ``py`` environment, it is possible "
"that projects with complex ``tox`` configurations might need to modify "
"their :file:`tox.ini` file. Doing so is, however, outside the scope of this "
"document."
msgstr ""
"``py`` 環境下での動作をサポートするためには、複雑な ``tox`` 設定を持つプロ"
"ジェクトでは :file:`tox.ini` を修正する必要があるかもしれません。そのようにす"
"ることは、しかしながら、この文書の範囲を越えます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:202
msgid "Automatically uploading wheels"
msgstr "自動的に wheel ファイルをアップロードする"

#: ../source/guides/supporting-windows-using-appveyor.rst:204
msgid ""
"It is possible to request Appveyor to automatically upload wheels. There is "
"a ``deployment`` step available in :file:`appveyor.yml` that can be used to "
"(for example) copy the built artifacts to a FTP site, or an Amazon S3 "
"instance. Documentation on how to do this is included in the Appveyor guides."
msgstr ""
"Appveyor に自動的に wheel ファイルをアップロードさせることができます。 :file:"
"`appveyor.yml` ファイルの中に ``deployment`` 段階があって、(例えば) ビルドし"
"た生成物を FTP サイトや Amazon S3 インスタンスへコピーするために使うことがで"
"きます。これをやるにはどうすれば良いかについては、 Appveyor ガイドに説明があ"
"ります。"

#: ../source/guides/supporting-windows-using-appveyor.rst:209
msgid ""
"Alternatively, it would be possible to add a ``twine upload`` step to the "
"build.  The supplied :file:`appveyor.yml` does not do this, as it is not "
"clear that uploading new wheels after every commit is desirable (although "
"some projects may wish to do this)."
msgstr ""
"別のやり方としては、ビルドの際に ``twine upload`` 段階を追加することができる"
"でしょう。 (プロジェクトによってはそうしたいかもしれませんが) コミットのたび"
"に新しい wheel ファイルをアップロードすることが望ましいかどうかがはっきりしな"
"いので、先ほどの :file:`appveyor.yml` ファイルはこれをやりません。"

#: ../source/guides/supporting-windows-using-appveyor.rst:215
msgid "External dependencies"
msgstr "外部への依存関係"

#: ../source/guides/supporting-windows-using-appveyor.rst:217
msgid ""
"The supplied scripts will successfully build any distribution that does not "
"rely on 3rd party external libraries for the build."
msgstr ""
"提供されたスクリプトを使えば、ビルド時にサードパーティの外部ライブラリに依存"
"しない配布物ならどれでもビルドに成功するでしょう。"

#: ../source/guides/supporting-windows-using-appveyor.rst:220
msgid ""
"It is possible to add steps to the :file:`appveyor.yml` configuration "
"(typically in the \"install\" section) to download and/or build external "
"libraries needed by the distribution. And if needed, it is possible to add "
"extra configuration for the build to supply the location of these libraries "
"to the compiler. However, this level of configuration is beyond the scope of "
"this document."
msgstr ""
":file:`appveyor.yml` ファイルでの設定 (典型的には \"install\" 段階) を加え"
"て、配布物に必要な外部ライブラリをダウンロードないしビルドすることは可能で"
"す。そして、もし必要なら、このようなライブラリの位置ををコンパイラに伝えるた"
"めの余分の設定を追加することもできます。しかしながら、このレベルの設定はこの"
"文書の範囲を超えます。"

#: ../source/guides/supporting-windows-using-appveyor.rst:229
msgid "Support scripts"
msgstr "サポートスクリプト"

#: ../source/guides/supporting-windows-using-appveyor.rst:231
msgid "For reference, the SDK setup support script is listed here:"
msgstr "参照用に SDK を構築するサポートスクリプトをここに挙げておきます:"

#: ../source/guides/supporting-windows-using-appveyor.rst:233
msgid "``appveyor-sample/build.cmd``"
msgstr "``appveyor-sample/build.cmd``"

#: ../source/guides/tool-recommendations.rst:5
msgid "Tool recommendations"
msgstr "オススメのツール"

#: ../source/guides/tool-recommendations.rst:7
msgid ""
"The Python packaging landscape consists of many different tools. For many "
"tasks, the :term:`Python Packaging Authority <Python Packaging Authority "
"(PyPA)>` (PyPA, the working group which encompasses many packaging tools and "
"maintains this guide) purposefully does not make a blanket recommendation; "
"for example, the reason there are many build backends is that the landscape "
"was opened up in order to enable the development of new backends serving "
"certain users' needs better than the previously unique backend, setuptools. "
"This guide does point to some tools that are widely recognized, and also "
"makes some recommendations of tools that you should *not* use because they "
"are deprecated or insecure."
msgstr ""
"Python パッケージングのランドスケープは、多くの異なったツール群からできていま"
"す。多くのタスクについて、 :term:`Python パッケージングオーソリティ <Python "
"Packaging Authority (PyPA) >` (PyPA とは多数のパッケージングツール群を包含す"
"るとともにこのガイド文書を維持管理しているワーキンググループ) は、一律に適用"
"するような推奨ををしません; 例えば、数多くのビルドバックエンドが存在する理由"
"は、既存のユニークなバックエンドである setuptools よりもうまく特定のユーザの"
"ニーズに応える新しいバックエンドの開発を可能とするためにランドスケープを開放"
"しているということなのです。このガイド文書では、広く認知されている幾つかの"
"ツールを指し示していますが、また、非推奨であったり安全でなかったりするために "
"*使うべきでない* ものについても非推奨事項を記しています。"

#: ../source/guides/tool-recommendations.rst:20
msgid "Virtual environments"
msgstr "仮想環境"

#: ../source/guides/tool-recommendations.rst:22
msgid ""
"The standard tools to create and use virtual environments manually are :ref:"
"`virtualenv` (PyPA project) and :doc:`venv <python:library/venv>` (part of "
"the Python standard library, though missing some features of virtualenv)."
msgstr ""
"仮想環境を手動で作成して使用するための標準的なツールは、 :ref:`virtualenv` "
"(PyPA project) と :doc:`venv <python:library/venv>` (virtualenv には備わって"
"いる幾つかの機能が欠けてはいるものの、Pythonの標準ライブラリの一部) です。"

#: ../source/guides/tool-recommendations.rst:28
msgid "Installing packages"
msgstr "パッケージをインストールする"

#: ../source/guides/tool-recommendations.rst:30
msgid ""
":ref:`Pip` is the standard tool to install packages from :term:`PyPI <Python "
"Package Index (PyPI)>`. You may want to read pip's recommendations for :doc:"
"`secure installs <pip:topics/secure-installs>`. Pip is available by default "
"in most Python installations through the standard library package :doc:"
"`ensurepip <python:library/ensurepip>`."
msgstr ""
":ref:`Pip` は :term:`PyPI <Python Package Index (PyPI)>` からパッケージをイン"
"ストールするための標準的なツールです。 pip の推奨事項については、 :doc:`セ"
"キュアなインストール <pip:topics/secure-installs>` を読むと良いでしょう。 "
"pip は、標準ライブラリのパッケージ :doc:`ensurepip <python:library/"
"ensurepip>` を通じて、ほとんどの Python 環境でデフォルトで利用可能です。"

#: ../source/guides/tool-recommendations.rst:36
msgid ""
"Alternatively, consider :ref:`pipx` for the specific use case of installing "
"Python applications that are distributed through PyPI and run from the "
"command line. Pipx is a wrapper around pip and venv that installs each "
"application into a dedicated virtual environment. This avoids conflicts "
"between the dependencies of different applications, and also with system-"
"wide applications making use of the same Python interpreter (especially on "
"Linux)."
msgstr ""
"別のやり方としては、 PyPI を通じて配布されてコマンドラインから実行される "
"Python アプリケーションをインストールする特定のユースケースにおいては :ref:"
"`pipx` を検討してください。 pipx は pip と、専用の仮想環境の中にそれぞれのア"
"プリケーションをインストールする venv のラッパーとして動作します。これによっ"
"て、異なるアプリケーションの間の依存関係上の衝突を避け、システムワイドのアプ"
"リケーションとの間で同じ Python インタープリタを使う際の衝突を避けることがで"
"きます (特に Linux 環境で)。"

#: ../source/guides/tool-recommendations.rst:43
msgid ""
"For scientific software specifically, consider :ref:`Conda` or :ref:`Spack`."
msgstr ""
"特に科学計算ソフトウェア向けには :ref:`Conda` や :ref:`Spack` を検討してくだ"
"さい。"

#: ../source/guides/tool-recommendations.rst:45
msgid "Write a \"pip vs. Conda\" comparison, here or in a new discussion."
msgstr "ここか、新しい議論として、\"pip vs. Conda\" の比較を書くべし。"

#: ../source/guides/tool-recommendations.rst:47
msgid ""
"Do **not** use ``easy_install`` (part of :ref:`setuptools`), which is "
"deprecated in favor of pip (see :ref:`pip vs easy_install` for details). "
"Likewise, do **not** use ``python setup.py install`` or ``python setup.py "
"develop``, which are also deprecated (see :ref:`setup-py-deprecated` for "
"background and :ref:`modernize-setup-py-project` for migration advice)."
msgstr ""
"``easy_install`` (:ref:`setuptools` の一部) は、 pip の登場によって非推奨に"
"なっていますので、 **使わない** でください (詳しくは :ref:`pip vs "
"easy_install` を見てください)。同様に、 ``python setup.py install`` や "
"``python setup.py develop`` も非推奨になっていますので **使わない** でくださ"
"い (背景については :ref:`setup-py-deprecated` を、移行するためのアドバイスに"
"ついては :ref:`setup.py 近代化プロジェクト <modernize-setup-py-project>` を見"
"てください)。"

#: ../source/guides/tool-recommendations.rst:55
msgid "Lock files"
msgstr "ロックファイル"

#: ../source/guides/tool-recommendations.rst:57
msgid ""
":ref:`pip-tools` and :ref:`Pipenv` are two recognized tools to create lock "
"files, which contain the exact versions of all packages installed into an "
"environment, for reproducibility purposes."
msgstr ""
":ref:`pip-tools` と :ref:`Pipenv` は、再現性を高める目的でロックファイル、そ"
"こにはその環境にインストールされたパッケージの正確なバージョンを含みますが、"
"そのようなロックファイルを作成するためのツールとしてよく知られています。"

#: ../source/guides/tool-recommendations.rst:63
msgid "Build backends"
msgstr "ビルドバックエンド"

#: ../source/guides/tool-recommendations.rst:67
msgid ""
"Please, remember: this document does not seek to steer the reader towards a "
"particular tool, only to enumerate common tools. Different use cases often "
"need specialized workflows."
msgstr ""
"どうか覚えておいてください: このドキュメントは、読者に特定のツールへ向かって"
"舵を切らせることを追求しているわけではなく、一般的なツール群を列挙しているだ"
"けです。異なるユースケースでは、しばしば、そのケースに特化したワークフローが"
"必要になります。"

#: ../source/guides/tool-recommendations.rst:71
msgid ""
"Popular :term:`build backends <build backend>` for pure-Python packages "
"include, in alphabetical order:"
msgstr ""
"純 Python のパッケージを取り扱う :term:`ビルドバックエンド <build backend>` "
"で人気のあるものは、アルファベット順に:"

#: ../source/guides/tool-recommendations.rst:74
msgid ""
":doc:`Flit-core <flit:pyproject_toml>` -- developed with but separate from :"
"ref:`Flit`. A minimal and opinionated build backend. It does not support "
"plugins."
msgstr ""
":doc:`Flit-core <flit:pyproject_toml>` -- :ref:`Flit` とともに開発されたが別"
"のもの。最小限で自己主張の強いビルドバックエンド。プラグインをサポートしな"
"い。"

#: ../source/guides/tool-recommendations.rst:77
msgid ""
"Hatchling_ -- developed with but separate from :ref:`Hatch`. Supports "
"plugins."
msgstr ""
"Hatchling_ -- :ref:`Hatch` とともに開発されたが別のもの。プラグインをサポート"
"する。"

#: ../source/guides/tool-recommendations.rst:79
msgid ""
"PDM-backend_ -- developed with but separate from :ref:`PDM`. Supports "
"plugins."
msgstr ""
"PDM-backend_ -- :ref:`PDM` とともに開発されたが別のもの。プラグインをサポー"
"ト。"

#: ../source/guides/tool-recommendations.rst:81
msgid ""
"Poetry-core_ -- developed with but separate from :ref:`Poetry`. Supports "
"plugins."
msgstr ""
"Poetry-core_ -- :ref:`Poetry` とともに開発されたが別のもの。プラグインをサ"
"ポート。"

#: ../source/guides/tool-recommendations.rst:84
msgid ""
"Unlike other backends on this list, Poetry-core does not support the "
"standard :ref:`[project] table <writing-pyproject-toml>` (it uses a "
"different format, in the ``[tool.poetry]`` table)."
msgstr ""
"このリストの他のバックエンドとは異なって、 Poetry-core は標準的な :ref:"
"`[project] table <writing-pyproject-toml>` をサポートしていません (``[tool."
"poetry]`` テーブル内に別のフォーマットで書くことはできます)。"

#: ../source/guides/tool-recommendations.rst:88
msgid ""
":ref:`setuptools`, which used to be the only build backend. Supports plugins."
msgstr ""
":ref:`setuptools` は、以前は唯一のビルドバックエンドでした。プラグインをサ"
"ポート。"

#: ../source/guides/tool-recommendations.rst:92
msgid ""
"If you use setuptools, please be aware that some features that predate "
"standardisation efforts are now deprecated and only *temporarily kept* for "
"compatibility."
msgstr ""
"setuptools を使うのであれば、標準化の努力が為される前の幾つかの機能が今では非"
"推奨になっていて互換性を保つために *一時的に継続使用* しているだけであること"
"を忘れないでください。"

#: ../source/guides/tool-recommendations.rst:96
msgid ""
"In particular, do **not** use direct ``python setup.py`` invocations. On the "
"other hand, configuring setuptools with a :file:`setup.py` file is still "
"fully supported, although it is recommended to use the modern :ref:"
"`[project] table in pyproject.toml <writing-pyproject-toml>` (or :file:"
"`setup.cfg`) whenever possible and keep :file:`setup.py` only if "
"programmatic configuration is needed. See :ref:`setup-py-deprecated`."
msgstr ""
"とりわけ、 ``python setup.py`` のように直接に起動しては *いけません* 。他方"
"で、可能であればいつでも近代的な :ref:`[project] table in pyproject.toml "
"<writing-pyproject-toml>` (または :file:`setup.cfg`) を使うことや、プログラム"
"的な設定が必要とされる場合にのみ :file:`setup.py` を使い続けることが推奨され"
"てはいますが、 :file:`setup.py` を使って setuptools に設定を渡すことは今も完"
"全にサポートされています。 :ref:`setup-py-deprecated` を見てください。"

#: ../source/guides/tool-recommendations.rst:103
msgid ""
"Other examples of deprecated features you should **not** use include the "
"``setup_requires`` argument to ``setup()`` (use the :ref:`[build-system] "
"table <pyproject-guide-build-system-table>` in :file:`pyproject.toml` "
"instead), and the ``easy_install`` command (cf. :ref:`pip vs easy_install`)."
msgstr ""
"非推奨となった機能の他の例としては、 ``setup()`` の ``setup_requires`` 引数を"
"使うべきではなく (代わりに :file:`pyproject.toml` 内の :ref:`[build-system] "
"テーブル <pyproject-guide-build-system-table>` を使ってください) 、また、 "
"``easy_install`` コマンドを使うことも非推奨になっています (cf. :ref:`pip vs "
"easy_install`) 。"

#: ../source/guides/tool-recommendations.rst:108
msgid ""
"Do **not** use :ref:`distutils`, which is deprecated, and has been removed "
"from the standard library in Python 3.12, although it still remains "
"available from setuptools."
msgstr ""
":ref:`distutils` を *使わないで* ください、というのも、これは非推奨になってい"
"ますし、まだ setuptools から利用可能ではありますが Python 3.12 で標準ライブラ"
"リから取り除かれたものです。"

#: ../source/guides/tool-recommendations.rst:112
msgid ""
"For packages with :term:`extension modules <extension module>`, it is best "
"to use a build system with dedicated support for the language the extension "
"is written in, for example:"
msgstr ""
":term:`拡張モジュール <extension module>` を伴うパッケージについては、その拡"
"張が書かれた言語用の専用サポートのあるビルドシステムを使うのが最善です、例え"
"ば:"

#: ../source/guides/tool-recommendations.rst:116
msgid ""
":ref:`setuptools` -- natively supports C and C++ (with third-party plugins "
"for Go and Rust),"
msgstr ""
":ref:`setuptools` -- C 言語および C++ 言語をネイティブにサポート (サードパー"
"ティのプラグインで Go 言語と Rust 言語も)、"

#: ../source/guides/tool-recommendations.rst:117
msgid ""
":ref:`meson-python` -- C, C++, Fortran, Rust, and other languages supported "
"by Meson,"
msgstr ""
":ref:`meson-python` -- C 言語・ C++ 言語・ Fortran ・ Rust およびその他の言語"
"が Meson によってサポートされています、"

#: ../source/guides/tool-recommendations.rst:118
msgid ""
":ref:`scikit-build-core` -- C, C++, Fortran, and other languages supported "
"by CMake,"
msgstr ""
":ref:`scikit-build-core` -- C 言語・ C++ 言語・ Fortran やその他の言語が "
"CMake によってサポートされています、"

#: ../source/guides/tool-recommendations.rst:119
msgid ":ref:`maturin` -- Rust, via Cargo."
msgstr ":ref:`maturin` -- Rust 、 Cargo を経由して。"

#: ../source/guides/tool-recommendations.rst:123
msgid "Building distributions"
msgstr "配布物をビルドする"

#: ../source/guides/tool-recommendations.rst:125
msgid ""
"The standard tool to build :term:`source distributions <source distribution "
"(or \"sdist\")>` and :term:`wheels <wheel>` for uploading to PyPI is :ref:"
"`build`.  It will invoke whichever build backend you :ref:`declared "
"<pyproject-guide-build-system-table>` in :file:`pyproject.toml`."
msgstr ""
"PyPI へアップロードするために :term:`ソースコード配布物 <source distribution "
"(or \"sdist\">` や :term:`wheels <wheel>` をビルドするための標準ツールは、 :"
"ref:`build` です。:file:`pyproject.toml` 内で `宣言された <pyptoject-guide-"
"build-system-table>` ビルドバックエンドが何であれ、それを起動することになりま"
"す。"

#: ../source/guides/tool-recommendations.rst:130
msgid ""
"Do **not** use ``python setup.py sdist`` and ``python setup.py bdist_wheel`` "
"for this task. All direct invocations of :file:`setup.py` are :ref:"
"`deprecated <setup-py-deprecated>`."
msgstr ""
"この作業のために ``python setup.py sdist`` や ``python setup.py "
"bdist_wheel`` を *使わないで* ください。:file:`setup.py` を直接に起動すること"
"は :ref:`非推奨 <setup-py-deprecated>` になっています。"

#: ../source/guides/tool-recommendations.rst:134
msgid ""
"If you have :term:`extension modules <extension module>` and want to "
"distribute wheels for multiple platforms, use :ref:`cibuildwheel` as part of "
"your CI setup to build distributable wheels."
msgstr ""
"もし、 :term:`拡張モジュール <extension module>` を使っていて複数のプラット"
"フォーム向けに wheel ファイルを配布したいと考えているなら、配布可能な wheel "
"ファイルをビルドする CI 環境の一部として :ref:`cibuildwheel` を使いましょう。"

#: ../source/guides/tool-recommendations.rst:140
msgid "Uploading to PyPI"
msgstr "PyPIにアップロードする"

#: ../source/guides/tool-recommendations.rst:142
#, fuzzy
#| msgid ""
#| "For projects hosted on GitHub, it is recommended to use the :ref:`trusted "
#| "publishing <trusted-publishing>`, which allows the package to be securely "
#| "uploaded to PyPI from a GitHub Actions job. (This is not yet supported on "
#| "software forges other than GitHub.)"
msgid ""
"For projects hosted on or published via supported CI/CD platforms, it is "
"recommended to use the :ref:`Trusted Publishing <trusted-publishing>`, which "
"allows the package to be securely uploaded to PyPI from a CI/CD workflow "
"without a manually configured API token."
msgstr ""
"GitHubにホストされているプロジェクト向けには、GitHub Actions のジョブからパッ"
"ケージを安全に PyPIへアップロードすることができる :ref:`信頼ある出版 "
"<trusted-publishing>` を使うことを推奨します。(これは、GitHub 以外のソフトウ"
"エア集積所ではまだサポートされていません。)"

#: ../source/guides/tool-recommendations.rst:147
msgid ""
"As of November 2024, PyPI supports the following platforms as Trusted "
"Publishing providers:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:150
msgid "GitHub Actions (on ``https://github.com``)"
msgstr ""

#: ../source/guides/tool-recommendations.rst:151
msgid "GitLab CI/CD (on ``https://gitlab.com``)"
msgstr ""

#: ../source/guides/tool-recommendations.rst:152
msgid "ActiveState"
msgstr ""

#: ../source/guides/tool-recommendations.rst:153
msgid "Google Cloud"
msgstr ""

#: ../source/guides/tool-recommendations.rst:155
msgid ""
"The other available method is to upload the package manually using :ref:"
"`twine`."
msgstr ""
"利用可能なもうひとつの方法は、 :ref:`twine` を用いて手動でパッケージをアップ"
"ロードすることです。"

#: ../source/guides/tool-recommendations.rst:159
msgid ""
"**Never** use ``python setup.py upload`` for this task. In addition to "
"being :ref:`deprecated <setup-py-deprecated>`, it is insecure."
msgstr ""
"このタスクを行うために ``python setup.py upload`` を使うことは *絶対にやめて"
"* ください。 :ref:`非推奨 <setup-py-deprecated>` であることに加えて、危険 "
"<insecure> です。"

#: ../source/guides/tool-recommendations.rst:164
msgid "Workflow tools"
msgstr "ワークフローツール"

#: ../source/guides/tool-recommendations.rst:166
msgid ""
"These tools are environment managers that automatically manage virtual "
"environments for a project. They also act as \"task runners\", allowing you "
"to define and invoke tasks such as running tests, compiling documentation, "
"regenerating some files, etc. Some of them provide shortcuts for building "
"distributions and uploading to PyPI, and some support lock files for "
"applications. They often call the tools mentioned above under the hood. In "
"alphabetical order:"
msgstr ""
"これらのツール群は、プロジェクトの仮想環境を自動的に管理する環境マネージャで"
"す。これらは、テストを走らせたり、説明文書をコンパイルしたり、何らかのファイ"
"ルを再生成したり、その他のタスクを定義して起動するための \"タスク実行係\" と"
"しても動作します。これらのうちのいくつかは配布物をビルドしたり PyPI にアップ"
"ロードするためのショートカットを提供しますし、あるいは、アプリケーション向け"
"のロックファイルをサポートしています。これらは、往々にして、先述のツール群を"
"内部的に呼び出しています。アルファベット順に:"

#: ../source/guides/tool-recommendations.rst:174
msgid ":ref:`Flit`,"
msgstr ":ref:`Flit`,"

#: ../source/guides/tool-recommendations.rst:175
msgid ":ref:`Hatch`,"
msgstr ":ref:`Hatch`,"

#: ../source/guides/tool-recommendations.rst:176
msgid ":doc:`nox <nox:index>`,"
msgstr ":doc:`nox <nox:index>`,"

#: ../source/guides/tool-recommendations.rst:177
msgid ":ref:`PDM`,"
msgstr ":ref:`PDM`,"

#: ../source/guides/tool-recommendations.rst:178
msgid ":ref:`Pipenv`,"
msgstr ":ref:`Pipenv`,"

#: ../source/guides/tool-recommendations.rst:179
msgid ":ref:`Poetry`,"
msgstr ":ref:`Poetry`,"

#: ../source/guides/tool-recommendations.rst:180
msgid ":doc:`tox <tox:index>`."
msgstr ":doc:`tox <tox:index>`."

#: ../source/guides/using-manifest-in.rst:5
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr "``MANIFEST.in`` を使ってソースコード配布物にファイルを含める"

#: ../source/guides/using-manifest-in.rst:7
msgid ""
"The information on this page has moved to :doc:`setuptools:userguide/"
"miscellaneous` in the setuptools documentation."
msgstr ""
"このページの情報は、setuptools 説明文書の中の :doc:`setuptools:userguide/"
"miscellaneous` に移されました。"

#: ../source/guides/using-testpypi.rst:7
msgid ""
"``TestPyPI`` is a separate instance of the :term:`Python Package Index "
"(PyPI)` that allows you to try out the distribution tools and process "
"without worrying about affecting the real index. TestPyPI is hosted at `test."
"pypi.org <https://test.pypi.org>`_"
msgstr ""
"``TestPyPI`` は :term:`Python パッケージインデックス <Python Package Index "
"(PyPI)>` とは別のインスタンスで、本番環境に影響を与えてしまう心配をせずに配布"
"ツールやプロセスを試してみることができます。 TestPyPI は `test.pypi.org "
"<https://test.pypi.org>`_ にホストされています"

#: ../source/guides/using-testpypi.rst:13
msgid "Registering your account"
msgstr "アカウントを登録する"

#: ../source/guides/using-testpypi.rst:15
msgid ""
"Because TestPyPI has a separate database from the live PyPI, you'll need a "
"separate user account specifically for TestPyPI. Go to https://test.pypi.org/"
"account/register/ to register your account."
msgstr ""
"TestPyPI は PyPI とは別のデータベースで運用されているので、 TestPyPI 専用の"
"ユーザアカウントを作成する必要があります。 https://test.pypi.org/account/"
"register/ へ行ってアカウントを登録しましょう。"

#: ../source/guides/using-testpypi.rst:19
msgid ""
"The database for TestPyPI may be periodically pruned, so it is not unusual "
"for user accounts to be deleted."
msgstr ""
"TestPyPI 用のデータベースは定期的に刈り込まれるので、往々にしてユーザアカウン"
"トが削除されることがあります。"

#: ../source/guides/using-testpypi.rst:24
msgid "Using TestPyPI with Twine"
msgstr "Twine を使って TestPyPI を使う"

#: ../source/guides/using-testpypi.rst:26
msgid ""
"You can upload your distributions to TestPyPI using :ref:`twine` by "
"specifying the ``--repository`` flag:"
msgstr ""
":ref:`twine` に ``--repository`` フラグを指定して使うことで、配布物を "
"TestPyPI にアップロードすることができます:"

#: ../source/guides/using-testpypi.rst:33
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://test.pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may take "
"a minute or two for your project to appear on the site."
msgstr ""
"``https://test.pypi.org/project/<sampleproject>`` の ``sample project`` の部"
"分をあなたがアップロードしたプロジェクトの名前に置き換えた URL を参照すれば、"
"あなたのパッケージがうまくアップロードできたかどうかを確認することができま"
"す。サイトにあなたのプロジェクトが反映されるまでには 1,2 分かかるかもしれませ"
"ん。"

#: ../source/guides/using-testpypi.rst:39
msgid "Using TestPyPI with pip"
msgstr "pip で TestPyPI を使う"

#: ../source/guides/using-testpypi.rst:41
msgid ""
"You can tell :ref:`pip` to download packages from TestPyPI instead of PyPI "
"by specifying the ``--index-url`` flag:"
msgstr ""
":ref:`pip` で PyPI の代わりに TestPyPI からパッケージをダウンロードするに"
"は、 ``--index-url`` フラグを指定しましょう:"

#: ../source/guides/using-testpypi.rst:56
msgid ""
"If you want to allow pip to also download packages from PyPI, you can "
"specify ``--extra-index-url`` to point to PyPI. This is useful when the "
"package you're testing has dependencies:"
msgstr ""
"pip が PyPI からもパッケージをダウンロードできるようにしたいのであれば、 ``--"
"extra-index-url`` に PyPI を指定しましょう。テストしようとしているパッケージ"
"が依存関係を持つ場合にこれが役に立ちます:"

#: ../source/guides/using-testpypi.rst:73
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr ":file:`.pypirc` ファイルで TestPyPI を設定する"

#: ../source/guides/using-testpypi.rst:75
msgid ""
"If you want to avoid being prompted for your username and password every "
"time, you can configure TestPyPI in your :file:`$HOME/.pypirc`:"
msgstr ""
"ユーザ名やパスワードの入力を毎回促されるのを避けたいなら、 :file:`$HOME/."
"pypirc` 内で TestPyPI の設定をしておくことができます。"

#: ../source/guides/writing-pyproject-toml.rst:5
msgid "Writing your ``pyproject.toml``"
msgstr "``pyproject.toml`` を書く"

#: ../source/guides/writing-pyproject-toml.rst:7
msgid ""
"``pyproject.toml`` is a configuration file used by packaging tools, as well "
"as other tools such as linters, type checkers, etc. There are three possible "
"TOML tables in this file."
msgstr ""
"``pyproject.toml`` は、lintersやtype checkersやその他のパッケージングツール群"
"でも同様に使われる設定ファイルです。このファイルの中には３個の TOML テーブル"
"を置くことが可能です。"

#: ../source/guides/writing-pyproject-toml.rst:11
msgid ""
"The ``[build-system]`` table is **strongly recommended**. It allows you to "
"declare which :term:`build backend` you use and which other dependencies are "
"needed to build your project."
msgstr ""
"``[build-system]`` テーブルは、 **強く推奨されています** 。これを使うことで、"
"どの :term:`ビルドバックエンド <build backend>` を使うのか、また、そのプロ"
"ジェクトをビルドするためには他のどんな依存関係が必要なのかを宣言することがで"
"きます。"

#: ../source/guides/writing-pyproject-toml.rst:15
msgid ""
"The ``[project]`` table is the format that most build backends use to "
"specify your project's basic metadata, such as the dependencies, your name, "
"etc."
msgstr ""
"``[project]`` テーブルは、依存関係や作者の名前など、そのプロジェクトの基本的"
"なメタデータを指定するためにほとんどのビルドバックエンドが用いるものです。"

#: ../source/guides/writing-pyproject-toml.rst:18
msgid ""
"The ``[tool]`` table has tool-specific subtables, e.g., ``[tool.hatch]``, "
"``[tool.black]``, ``[tool.mypy]``. We only touch upon this table here "
"because its contents are defined by each tool. Consult the particular tool's "
"documentation to know what it can contain."
msgstr ""
"``[tool]`` テーブルは、例えば ``[tool.hatch]`` や ``[tool.black]`` や "
"``[tool.mypy]`` のような、ツールに特化したサブテーブルを持っています。テーブ"
"ルの内容がツール毎に定義されているので、ここでは簡単に触れるだけに留めます。"
"何を含めておくことができるのかを知るためには、それぞれのツールの説明文書に当"
"たってみてください。"

#: ../source/guides/writing-pyproject-toml.rst:25
msgid ""
"The ``[build-system]`` table should always be present, regardless of which "
"build backend you use (``[build-system]`` *defines* the build tool you use)."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:29
msgid ""
"On the other hand, the ``[project]`` table is understood by *most* build "
"backends, but some build backends use a different format."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:32
msgid ""
"A notable exception is Poetry_, which before version 2.0 (released January "
"5, 2025) did not use the ``[project]`` table, it used the ``[tool.poetry]`` "
"table instead. With version 2.0, it supports both. Also, the setuptools_ "
"build backend supports both the ``[project]`` table, and the older format in "
"``setup.cfg`` or ``setup.py``."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:38
#, fuzzy
#| msgid ""
#| "Also, the setuptools_ build backend supports both the ``[project]`` "
#| "table, and the older format in ``setup.cfg`` or ``setup.py``. For new "
#| "projects, it is recommended to use the ``[project]`` table, and keep "
#| "``setup.py`` only if some programmatic configuration is needed (such as "
#| "building C extensions), but the ``setup.cfg`` and ``setup.py`` formats "
#| "are still valid. See :ref:`setup-py-deprecated`."
msgid ""
"For new projects, use the ``[project]`` table, and keep ``setup.py`` only if "
"some programmatic configuration is needed (such as building C extensions), "
"but the ``setup.cfg`` and ``setup.py`` formats are still valid. See :ref:"
"`setup-py-deprecated`."
msgstr ""
"また、setuptools_ のビルドバックエンドは、 ``[project]`` テーブルと ``setup."
"cfg`` ないし ``setup.py`` の中のより古い形の両方をサポートしています。新しく"
"始めるプロジェクトでは ``[project]`` テーブルを使用し、 (C 言語拡張をビルドす"
"る場合のような) 何かプログラム面での設定が必要とされる場合に限って ``setup."
"py`` を使い続けることが推奨されていますが、依然として ``setup.cfg`` と "
"``setup.py`` の形式は正当なものです。 :ref:`setup-py-deprecated` をご覧くださ"
"い。"

#: ../source/guides/writing-pyproject-toml.rst:47
msgid "Declaring the build backend"
msgstr "ビルドバックエンドを宣言する"

#: ../source/guides/writing-pyproject-toml.rst:49
msgid ""
"The ``[build-system]`` table contains a ``build-backend`` key, which "
"specifies the build backend to be used. It also contains a ``requires`` key, "
"which is a list of dependencies needed to build the project -- this is "
"typically just the build backend package, but it may also contain additional "
"dependencies. You can also constrain the versions, e.g., ``requires = "
"[\"setuptools >= 61.0\"]``."
msgstr ""
"``[build-system]`` テーブルは、使用されるべきビルドバックエンドを指定する "
"``build-backend`` キーを含んでいます。また、 プロジェクトをビルドするのに必要"
"な依存関係のリストである ``requires`` キーも含んでいます -- これは典型的には"
"ビルドバクエンドのパッケージだけですが、追加の依存関係を含んでいてもかまいま"
"せん。さらに、例えば ``requires = [\"setuptools >= 61.0\"]`` のようにバージョ"
"ンを制限することもできます。"

#: ../source/guides/writing-pyproject-toml.rst:55
msgid ""
"Usually, you'll just copy what your build backend's documentation suggests "
"(after :ref:`choosing your build backend <choosing-build-backend>`). Here "
"are the values for some common build backends:"
msgstr ""
"通常は、ビルドバックエンドの説明文書が (:ref:`ビルドバックエンドを選択する "
"<choosing-build-backend>`) 示唆するものをコピーするだけでしょう。よく知られた"
"バックエンドでの値をいくつか挙げておきます:"

#: ../source/guides/writing-pyproject-toml.rst:63
msgid "Static vs. dynamic metadata"
msgstr "静的なメタデータと動的なメタデータ"

#: ../source/guides/writing-pyproject-toml.rst:65
msgid "The rest of this guide is devoted to the ``[project]`` table."
msgstr "このガイド文書の残りの部分は、``[project]`` テーブルに捧げます。"

#: ../source/guides/writing-pyproject-toml.rst:67
msgid ""
"Most of the time, you will directly write the value of a ``[project]`` "
"field. For example: ``requires-python = \">= 3.8\"``, or ``version = "
"\"1.0\"``."
msgstr ""
"ほとんどの場合、 ``[project]`` フィールドに直接に値を書き込むことになるでしょ"
"う。例えば: ``requires-python = \">= 3.8\"`` や ``version = \"1.0\"`` などで"
"す。"

#: ../source/guides/writing-pyproject-toml.rst:71
msgid ""
"However, in some cases, it is useful to let your build backend compute the "
"metadata for you. For example: many build backends can read the version from "
"a ``__version__`` attribute in your code, a Git tag, or similar. In such "
"cases, you should mark the field as dynamic using, e.g.,"
msgstr ""
"しかしながら、ビルドバックエンドにメタデータを計算させる方が役に立つ場合もあ"
"ります。例えば: 多くのビルドバックエンドがソースコードや Git タグやその他似た"
"ようなものの中にある ``__version__`` 要素を読み取ることができます。そのような"
"場合には、以下の例のような方法を使ってそのフィールドを動的なものにしておくべ"
"きです、"

#: ../source/guides/writing-pyproject-toml.rst:82
msgid ""
"When a field is dynamic, it is the build backend's responsibility to fill "
"it.  Consult your build backend's documentation to learn how it does it."
msgstr ""
"フィールドが動的となっている場合、そこを埋めるのはビルドバックエンドの責任で"
"す。どうすれば良いのかについては、ビルドバックエンドの説明文書に当たってみて"
"ください。"

#: ../source/guides/writing-pyproject-toml.rst:88
msgid "Basic information"
msgstr "基本的な情報"

#: ../source/guides/writing-pyproject-toml.rst:93
#: ../source/specifications/pyproject-toml.rst:120
#: ../source/specifications/pyproject-toml.rst:143
#: ../source/specifications/pyproject-toml.rst:155
msgid "``name``"
msgstr "``名称``"

#: ../source/guides/writing-pyproject-toml.rst:95
msgid ""
"Put the name of your project on PyPI. This field is required and is the only "
"field that cannot be marked as dynamic."
msgstr ""
"PyPI 上でのプロジェクト名称を書いてください。このフィールドは必須のもので、動"
"的であるとマークできない唯一のフィールドです。"

#: ../source/guides/writing-pyproject-toml.rst:103
#, fuzzy
#| msgid ""
#| "The project name must consists of ASCII letters, digits, underscores "
#| "\"``_``\", hyphens \"``-``\" and periods \"``.``\". It must not start or "
#| "end with an underscore, hyphen or period."
msgid ""
"The project name must consist of ASCII letters, digits, underscores "
"\"``_``\", hyphens \"``-``\" and periods \"``.``\". It must not start or end "
"with an underscore, hyphen or period."
msgstr ""
"プロジェクトの名称は、ASCII文字・数字・アンダースコア \"``_``\"・ハイフン "
"\"``-``\"・ピリオド \"``.``\" だけでできていなければなりません。また、アン"
"ダースコア・ハイフン・ピリオドで始まってはなりません。"

#: ../source/guides/writing-pyproject-toml.rst:107
msgid ""
"Comparison of project names is case insensitive and treats arbitrarily long "
"runs of underscores, hyphens, and/or periods as equal.  For example, if you "
"register a project named ``cool-stuff``, users will be able to download it "
"or declare a dependency on it using any of the following spellings: ``Cool-"
"Stuff``, ``cool.stuff``, ``COOL_STUFF``, ``CoOl__-.-__sTuFF``."
msgstr ""
"プロジェクト名の比較では、大文字小文字を区別せず、また、アンダースコア・ハイ"
"フン・ピリオドは何文字連続していても同じものとして扱います。例えば、あなたが "
"``cool-stuff`` という名前のプロジェクトを登録したなら、利用者がダウンロードし"
"たり依存関係を宣言したりするのに、次に挙げる綴りのいずれであっても使うことが"
"できます: ``Cool-Stuff`` ・ ``cool.stuff`` ・ ``COOL_STUFF`` ・ ``CoOl__-.-"
"__sTuFF`` 。"

#: ../source/guides/writing-pyproject-toml.rst:115
#: ../source/specifications/pyproject-toml.rst:125
#: ../source/specifications/pyproject-toml.rst:149
#: ../source/specifications/pyproject-toml.rst:170
msgid "``version``"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:117
msgid "Put the version of your project."
msgstr "プロジェクトのバージョンを書いてください。"

#: ../source/guides/writing-pyproject-toml.rst:124
msgid ""
"Some more complicated version specifiers like ``2020.0.0a1`` (for an alpha "
"release) are possible; see the :ref:`specification <version-specifiers>` for "
"full details."
msgstr ""
"(アルファ版のリリース用の) ``2020.0.0a1`` のようなもっと込み入ったバージョン"
"指定子も可能ですので、 詳細については :ref:`仕様 <version-specifiers>` を見て"
"ください。"

#: ../source/guides/writing-pyproject-toml.rst:128
msgid "This field is required, although it is often marked as dynamic using"
msgstr ""
"動的であるとマークされることがしばしばではありますが、このフィールドは必須の"
"ものです"

#: ../source/guides/writing-pyproject-toml.rst:135
#, fuzzy
#| msgid ""
#| "This allows use cases such as filling the version from a ``__version__`` "
#| "attribute or a Git tag. Consult :ref:`Single sourcing the version` for "
#| "more details."
msgid ""
"This allows use cases such as filling the version from a ``__version__`` "
"attribute or a Git tag. Consult the :ref:`single-source-version` discussion "
"for more details."
msgstr ""
"これによって、 ``__version__`` 要素や Git のタグからバージョンを取得するよう"
"な使い方が可能になります。 :ref:`バージョンを１箇所で管理する <Single "
"sourcing the version>` を見てみてください。"

#: ../source/guides/writing-pyproject-toml.rst:141
msgid "Dependencies and requirements"
msgstr "依存関係と要求事項"

#: ../source/guides/writing-pyproject-toml.rst:144
#: ../source/specifications/pyproject-toml.rst:443
msgid "``dependencies``/``optional-dependencies``"
msgstr "``dependencies``/``optional-dependencies``"

#: ../source/guides/writing-pyproject-toml.rst:146
msgid "If your project has dependencies, list them like this:"
msgstr "もしプロジェクトに依存関係があるなら、このように列挙してください:"

#: ../source/guides/writing-pyproject-toml.rst:158
msgid ""
"See :ref:`Dependency specifiers <dependency-specifiers>` for the full syntax "
"you can use to constrain versions."
msgstr ""
"バージョンに制限をかけるために使えるあらゆるシンタックスについては、 :ref:`依"
"存関係指定子 <dependency-specifiers>` を参照してください。"

#: ../source/guides/writing-pyproject-toml.rst:161
msgid ""
"You may want to make some of your dependencies optional, if they are only "
"needed for a specific feature of your package. In that case, put them in "
"``optional-dependencies``."
msgstr ""
"パッケージの特定の機能にのみ必要なものであれば、依存関係のうちのいくつかをオ"
"プションにしたい時があるかもしれません。そのような場合には、 ``optional-"
"dependencies`` に置きましょう。"

#: ../source/guides/writing-pyproject-toml.rst:174
msgid ""
"Each of the keys defines a \"packaging extra\". In the example above, one "
"could use, e.g., ``pip install your-project-name[gui]`` to install your "
"project with GUI support, adding the PyQt5 dependency."
msgstr ""
"キーのぞれぞれが \"余分のパッケージング <packaging extra>\" を定義します。上"
"の例では、プロジェクトを例えば GUI サポート付きでインストールするためには "
"``pip install your-project-name[gui]`` を使うことができます。"

#: ../source/guides/writing-pyproject-toml.rst:183
#: ../source/specifications/pylock-toml.rst:95
#: ../source/specifications/pyproject-toml.rst:146
#: ../source/specifications/pyproject-toml.rst:239
msgid "``requires-python``"
msgstr "``requires-python``"

#: ../source/guides/writing-pyproject-toml.rst:185
msgid ""
"This lets you declare the minimum version of Python that you support "
"[#requires-python-upper-bounds]_."
msgstr ""
"これによってサポートされている Python の上限のバージョンを宣言することができ"
"ます [#requires-python-upper-bounds]_ 。"

#: ../source/guides/writing-pyproject-toml.rst:197
msgid "Creating executable scripts"
msgstr "実行可能なスクリプトを作成する"

#: ../source/guides/writing-pyproject-toml.rst:199
msgid ""
"To install a command as part of your package, declare it in the ``[project."
"scripts]`` table."
msgstr ""
"パッケージの一部としてコマンドをインストールするためには、 ``[project."
"scripts]`` テーブルで宣言してください。"

#: ../source/guides/writing-pyproject-toml.rst:207
#, fuzzy
#| msgid ""
#| "In this example, after installing your project, a ``spam-cli`` command "
#| "will be available. Executing this command will do the equivalent of "
#| "``from spam import main_cli; main_cli()``."
msgid ""
"In this example, after installing your project, a ``spam-cli`` command will "
"be available. Executing this command will do the equivalent of ``import sys; "
"from spam import main_cli; sys.exit(main_cli())``."
msgstr ""
"この例では、プロジェクトをインストールした後に ``spam-cli`` コマンドが利用で"
"きるようになるでしょう。このコマンドを実行することで、 ``from spam import "
"main_cli; main_cli()`` と同等のことを行うでしょう。"

#: ../source/guides/writing-pyproject-toml.rst:211
msgid ""
"On Windows, scripts packaged this way need a terminal, so if you launch them "
"from within a graphical application, they will make a terminal pop up. To "
"prevent this from happening, use the ``[project.gui-scripts]`` table instead "
"of ``[project.scripts]``."
msgstr ""
"Windows では、このやり方でパッケージされたスクリプト群はターミナルを必要とし"
"ますので、グラフィカルなアプリケーションの内部から起動した場合にはターミナル"
"がポップアップすることでしょう。これが起きないようにするためには、 "
"``[project.scripts]`` の代わりに ``[project.gui-scripts]`` テープルを使ってく"
"ださい。"

#: ../source/guides/writing-pyproject-toml.rst:221
msgid ""
"In that case, launching your script from the command line will give back "
"control immediately, leaving the script to run in the background."
msgstr ""
"そうすることで、コマンドラインからスクリプトを起動してスクリプトがバックグラ"
"ウンドで走らせることですぐに制御を取り戻すことができるでしょう。"

#: ../source/guides/writing-pyproject-toml.rst:224
msgid ""
"The difference between ``[project.scripts]`` and ``[project.gui-scripts]`` "
"is only relevant on Windows."
msgstr ""
"Windows 上では、 ``[project.scripts]`` と ``[project.gui-scripts]`` の間の差"
"異だけが実質的に効果を持ちます。"

#: ../source/guides/writing-pyproject-toml.rst:230
msgid "About your project"
msgstr "あなたのプロジェクトについて"

#: ../source/guides/writing-pyproject-toml.rst:233
#: ../source/specifications/pyproject-toml.rst:320
msgid "``authors``/``maintainers``"
msgstr "``authors``/``maintainers``"

#: ../source/guides/writing-pyproject-toml.rst:235
msgid ""
"Both of these fields contain lists of people identified by a name and/or an "
"email address."
msgstr ""
"これらのフィールドは両方とも名前とメールアドレスの両方またはいずれかで識別さ"
"れる人々のリストを含みます。"

#: ../source/guides/writing-pyproject-toml.rst:255
#: ../source/specifications/pyproject-toml.rst:135
#: ../source/specifications/pyproject-toml.rst:185
msgid "``description``"
msgstr "``説明 <description>``"

#: ../source/guides/writing-pyproject-toml.rst:257
msgid ""
"This should be a one-line description of your project, to show as the "
"\"headline\" of your project page on PyPI (`example <pypi-pip_>`_), and "
"other places such as lists of search results (`example <pypi-search-pip_>`_)."
msgstr ""
"これは、PyPI におけるプロジェクトページの \"ヘッドライン\" (`例 <pypi-"
"pip_>`_) や検索結果 (`例 <pypi-search-pip_>`_) のような他の場所で表示されるも"
"のなので、１行でプロジェクトの説明をしたものであるべきです。"

#: ../source/guides/writing-pyproject-toml.rst:268
#: ../source/specifications/pyproject-toml.rst:145
#: ../source/specifications/pyproject-toml.rst:198
msgid "``readme``"
msgstr "``readme``"

#: ../source/guides/writing-pyproject-toml.rst:270
msgid ""
"This is a longer description of your project, to display on your project "
"page on PyPI. Typically, your project will have a ``README.md`` or ``README."
"rst`` file and you just put its file name here."
msgstr ""
"これはプロジェクトの長めの説明文で、PyPI のプロジェクトページに表示されます。"
"典型的には、プロジェクトには ``README.md`` か ``README.rst`` のファイルが存在"
"するものなので、その場合にはここにはそのファイル名だけを書いておけば良いで"
"しょう。"

#: ../source/guides/writing-pyproject-toml.rst:279
msgid "The README's format is auto-detected from the extension:"
msgstr "README のフォーマットは拡張から自動的に検出されます:"

#: ../source/guides/writing-pyproject-toml.rst:281
msgid "``README.md`` → `GitHub-flavored Markdown <gfm_>`_,"
msgstr "``README.md`` → `GitHub 流のマークダウン <gfm_>`_ 、"

#: ../source/guides/writing-pyproject-toml.rst:282
msgid ""
"``README.rst`` → `reStructuredText <rest_>`_ (without Sphinx extensions)."
msgstr ""
"``README.rst`` → `reStructuredText <rest_>_`_ (ただし Sphinx 拡張なし)。"

#: ../source/guides/writing-pyproject-toml.rst:284
msgid "You can also specify the format explicitly, like this:"
msgstr "次のようにしてフォーマットを明示的に指定することもできます:"

#: ../source/guides/writing-pyproject-toml.rst:297
#, fuzzy
#| msgid "``license``"
msgid "``license`` and ``license-files``"
msgstr "``ライセンス``"

#: ../source/guides/writing-pyproject-toml.rst:299
msgid "As per :pep:`639` licenses should be declared with two fields:"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:301
msgid ""
"``license`` is an :term:`SPDX license expression <License Expression>` "
"consisting of one or more :term:`license identifiers <License Identifier>`."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:303
msgid "``license-files`` is a list of license file glob patterns."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:305
msgid ""
"A previous PEP had specified ``license`` to be a table with a ``file`` or a "
"``text`` key, this format is now deprecated. Most :term:`build "
"backends<build backend>` now support the new format as shown in the "
"following table."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:309
msgid "build backend versions that introduced :pep:`639` support"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:312
#, fuzzy
#| msgid "hatch"
msgid "hatchling"
msgstr "hatch"

#: ../source/guides/writing-pyproject-toml.rst:313
#, fuzzy
#| msgid "Setuptools"
msgid "setuptools"
msgstr "Setuptools"

#: ../source/guides/writing-pyproject-toml.rst:314
msgid "flit-core [#flit-core-pep639]_"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:315
#, fuzzy
#| msgid "Build backends"
msgid "pdm-backend"
msgstr "ビルドバックエンド"

#: ../source/guides/writing-pyproject-toml.rst:316
#, fuzzy
#| msgid "poetry"
msgid "poetry-core"
msgstr "poetry"

#: ../source/guides/writing-pyproject-toml.rst:317
#, fuzzy
#| msgid "build"
msgid "uv-build"
msgstr "ビルド"

#: ../source/guides/writing-pyproject-toml.rst:318
msgid "1.27.0"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:319
msgid "77.0.3"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:320
msgid "3.12"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:321
msgid "2.4.0"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:322
msgid "`not yet <poetry-pep639-issue_>`_"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:323
msgid "0.7.19"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:329
#: ../source/specifications/pyproject-toml.rst:140
#: ../source/specifications/pyproject-toml.rst:251
msgid "``license``"
msgstr "``ライセンス``"

#: ../source/guides/writing-pyproject-toml.rst:331
msgid ""
"The new format for ``license`` is a valid :term:`SPDX license expression "
"<License Expression>` consisting of one or more :term:`license identifiers "
"<License Identifier>`. The full license list is available at the `SPDX "
"license list page <spdxlicenselist_>`_. The supported list version is 3.17 "
"or any later compatible one."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:344
msgid ""
"If you get a build error that ``license`` should be a dict/table, your build "
"backend doesn't yet support the new format. See the `above section <license-"
"and-license-files_>`_ for more context. The now deprecated format is "
"`described in PEP 621 <https://peps.python.org/pep-0621/#license>`__."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:349
#, fuzzy
#| msgid ""
#| "If you are using a standard, well-known license, it is not necessary to "
#| "use this field. Instead, you should one of the :ref:`classifiers` "
#| "starting with ``License ::``. (As a general rule, it is a good idea to "
#| "use a standard, well-known license, both to avoid confusion and because "
#| "some organizations avoid software whose license is unapproved.)"
msgid ""
"As a general rule, it is a good idea to use a standard, well-known license, "
"both to avoid confusion and because some organizations avoid software whose "
"license is unapproved."
msgstr ""
"標準的でよく知られたライセンスを使うのであれば、このフィールドを使う必要はあ"
"りません。代わりに、 ``License::`` で始まる :ref:`分類子 <classifiers>` のう"
"ちのひとつを書いておけば良いでしょう。 (一般的な規則としては標準的でよく知ら"
"れたライセンスを使うことは良い考えです、というのは、混乱を避けるとことにもな"
"るし、中には内部で認可済みのライセンスでなければソフトウェアを使えない組織も"
"あるからです。)"

#: ../source/guides/writing-pyproject-toml.rst:353
msgid ""
"If your project is licensed with a license that doesn't have an existing "
"SPDX identifier, you can create a custom one in format ``LicenseRef-"
"[idstring]``. The custom identifiers must follow the SPDX specification, "
"`clause 10.1 <spdxcustomids_>`_ of the version 2.2 or any later compatible "
"one."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:367
#: ../source/specifications/pyproject-toml.rst:141
#: ../source/specifications/pyproject-toml.rst:281
#, fuzzy
#| msgid "``license``"
msgid "``license-files``"
msgstr "``ライセンス``"

#: ../source/guides/writing-pyproject-toml.rst:369
msgid ""
"This is a list of license files and files containing other legal information "
"you want to distribute with your package."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:377
msgid "The glob patterns must follow the specification:"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:379
msgid ""
"Alphanumeric characters, underscores (``_``), hyphens (``-``) and dots (``."
"``) will be matched verbatim."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:381
msgid ""
"Special characters: ``*``, ``?``, ``**`` and character ranges: [] are "
"supported."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:382
msgid "Path delimiters must be the forward slash character (``/``)."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:383
msgid ""
"Patterns are relative to the directory containing :file:`pyproject.toml`, "
"and thus may not start with a slash character."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:385
msgid "Parent directory indicators (``..``) must not be used."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:386
msgid "Each glob must match at least one file."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:388
msgid ""
"Literal paths are valid globs. Any characters or character sequences not "
"covered by this specification are invalid."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:394
#: ../source/specifications/pyproject-toml.rst:139
#: ../source/specifications/pyproject-toml.rst:364
msgid "``keywords``"
msgstr "``keywords``"

#: ../source/guides/writing-pyproject-toml.rst:396
msgid ""
"This will help PyPI's search box to suggest your project when people search "
"for these keywords."
msgstr ""
"これは、 PyPI 上の検索でキーワードが与えられた時にこのプロジェクトをサジェス"
"トするのを助けます。"

#: ../source/guides/writing-pyproject-toml.rst:408
#: ../source/specifications/pyproject-toml.rst:133
#: ../source/specifications/pyproject-toml.rst:376
msgid "``classifiers``"
msgstr "``分類詞 <classifiers>``"

#: ../source/guides/writing-pyproject-toml.rst:410
msgid ""
"A list of PyPI classifiers that apply to your project. Check the `full list "
"of possibilities <classifier-list_>`_."
msgstr ""
"プロジェクトに合致する PyPI 分類子 <classifier> のリスト。 `可能な分類子のリ"
"スト <classifier-list_>`_ を参照してください。"

#: ../source/guides/writing-pyproject-toml.rst:434
msgid ""
"Although the list of classifiers is often used to declare what Python "
"versions a project supports, this information is only used for searching and "
"browsing projects on PyPI, not for installing projects. To actually restrict "
"what Python versions a project can be installed on, use the :ref:`requires-"
"python` argument."
msgstr ""
"あるプロジェクトが Python のどのバージョンをサポートしているのかを宣言するた"
"めに分類子 <classifiers> がよく使われますが、この情報は PyPI 上のプロジェクト"
"を検索し閲覧するためにのみ使われるのであって、プロジェクトをインストールする"
"ためには使われません。あるプロジェクトが Python のどのバージョンでならインス"
"トールされ得るのかを実際に制約するためには、 :ref:`requires-python` 引数を"
"使ってください。"

#: ../source/guides/writing-pyproject-toml.rst:439
msgid ""
"To prevent a package from being uploaded to PyPI, use the special "
"``Private :: Do Not Upload`` classifier. PyPI will always reject packages "
"with classifiers beginning with ``Private ::``."
msgstr ""
"パッケージが PyPI にアップロードされるのを防ぐには、 ``Private :: Do Not "
"Upload`` 分類子を使いましょう。``Private ::`` で始まる分類子を付けられたパッ"
"ケージを PyPI は常に拒否します。"

#: ../source/guides/writing-pyproject-toml.rst:446
#: ../source/specifications/pyproject-toml.rst:148
#: ../source/specifications/pyproject-toml.rst:394
msgid "``urls``"
msgstr "``urls``"

#: ../source/guides/writing-pyproject-toml.rst:448
msgid ""
"A list of URLs associated with your project, displayed on the left sidebar "
"of your PyPI project page."
msgstr ""
"プロジェクトに関連のある URL のリストで、PyPI 上のプロジェクトページの左サイ"
"ドバーに表示されるもの。"

#: ../source/guides/writing-pyproject-toml.rst:453
msgid ""
"See :ref:`well-known-labels` for a listing of labels that PyPI and other "
"packaging tools are specifically aware of, and `PyPI's project metadata docs "
"<https://docs.pypi.org/project_metadata/#project-urls>`_ for PyPI-specific "
"URL processing."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:467
#, fuzzy
#| msgid ""
#| "Note that if the key contains spaces, it needs to be quoted, e.g., "
#| "``Website = \"https://example.com\"`` but ``\"Official Website\" = "
#| "\"https://example.com\"``."
msgid ""
"Note that if the label contains spaces, it needs to be quoted, e.g., "
"``Website = \"https://example.com\"`` but ``\"Official Website\" = \"https://"
"example.com\"``."
msgstr ""
"もしキーが空白文字を含んでいるなら、例えば ``Website = \"https://example."
"com\"`` ではなくて ``\"Official Website\" = \"https://example.com\"`` のよう"
"に引用符で囲む必要があります。"

#: ../source/guides/writing-pyproject-toml.rst:471
msgid ""
"Users are advised to use :ref:`well-known-labels` for their project URLs "
"where appropriate, since consumers of metadata (like package indices) can "
"specialize their presentation."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:475
msgid ""
"For example in the following metadata, neither ``MyHomepage`` nor "
"``\"Download Link\"`` is a well-known label, so they will be rendered "
"verbatim:"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:485
msgid ""
"Whereas in this metadata ``HomePage`` and ``DOWNLOAD`` both have well-known "
"equivalents (``homepage`` and ``download``), and can be presented with those "
"semantics in mind (the project's home page and its external download "
"location, respectively)."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:497
msgid "Advanced plugins"
msgstr "先進的なプラグイン"

#: ../source/guides/writing-pyproject-toml.rst:499
msgid ""
"Some packages can be extended through plugins. Examples include Pytest_ and "
"Pygments_. To create such a plugin, you need to declare it in a subtable of "
"``[project.entry-points]`` like this:"
msgstr ""
"パッケージの中にはプラグインを使って拡張できるものがあります。例としては、"
"Pytest_ や Pygments_ が挙げられます。そのようなプラグインを作成するためには、"
"以下のように ``[project.entry-points]`` のサブテーブルで宣言する必要がありま"
"す:"

#: ../source/guides/writing-pyproject-toml.rst:508
msgid "See the :ref:`Plugin guide <plugin-entry-points>` for more information."
msgstr ""
"詳しくは、 :ref:`プラグインガイド <plugin-entry-points>` を見てください。"

#: ../source/guides/writing-pyproject-toml.rst:513
msgid "A full example"
msgstr "完全な例"

#: ../source/guides/writing-pyproject-toml.rst:576
msgid ""
"Think twice before applying an upper bound like ``requires-python = \"<= "
"3.10\"`` here. `This blog post <requires-python-blog-post_>`_ contains some "
"information regarding possible problems."
msgstr ""
"ここで ``requires-python = \"<=3.10\"`` のような上限を設定する前に、よくよく"
"考えてください。起きる可能性のある問題に関するいくらかの情報が `このブログ記"
"事 <requires-python-blog-post_>`_ にあります。"

#: ../source/guides/writing-pyproject-toml.rst:580
msgid ""
"flit-core `does not yet <flit-issue-735_>`_ support WITH in SPDX license "
"expressions."
msgstr ""

#: ../source/index.rst:-1
msgid ""
"The Python Packaging User Guide (PyPUG) is a collection of tutorials and "
"guides for packaging Python software."
msgstr ""
"Python パッケージングユーザガイド (PyPUG) は、Python ソフトウェアのパッケージ"
"ングに関するチュートリアルやガイドを集めたものです。"

#: ../source/index.rst:-1
msgid "python, packaging, guide, tutorial"
msgstr "python ・ パッケージング・ガイド・チュートリアル"

#: ../source/index.rst:3 ../source/key_projects.rst:247
msgid "Python Packaging User Guide"
msgstr "Pythonパッケージユーザーガイド（Python Packaging User Guide）"

#: ../source/index.rst:25
msgid ""
"Welcome to the *Python Packaging User Guide*, a collection of tutorials and "
"references to help you distribute and install Python packages with modern "
"tools."
msgstr ""
"*Python パッケージングユーザガイド* へようこそ、チュートリアルとリファレンス"
"であなたが近代的なツールを使ってパッケージを配布・インストールするのをお手伝"
"いします。"

#: ../source/index.rst:29
msgid ""
"This guide is maintained on `GitHub`_ by the :doc:`Python Packaging "
"Authority <pypa:index>`. We happily accept :doc:`contributions and feedback "
"<contribute>`. 😊"
msgstr ""
"このガイドは、:doc:`Python パッケージングオーソリティ <pypa:index>` によって "
"`GitHub`_ 上で維持管理されています。:doc:`貢献とフィードバック <contribute>` "
"を大いに歓迎します。😊"

#: ../source/index.rst:36
msgid "Overview and Flow"
msgstr "概要と流れ"

#: ../source/index.rst:40
msgid ""
"Building your understanding of Python packaging is a journey. Patience and "
"continuous improvement are key to success. The overview and flow sections "
"provide a starting point for understanding the Python packaging ecosystem."
msgstr ""
"Python のパッケージングに関する理解を醸成することは旅をするようなものです。忍"
"耐と継続的な改善が成功への鍵となります。概要と流れの章では、Python のパッケー"
"ジングのエコシステムを理解するための出発点を提供します。"

#: ../source/index.rst:44
msgid ""
"The :doc:`overview` explains Python packaging and its use when preparing and "
"distributing projects. This section helps you build understanding about "
"selecting the tools and processes that are most suitable for your use case. "
"It includes what packaging is, the problems that it solves, and key "
"considerations."
msgstr ""
":doc:`概要 <overview>` では、 Python でのパッケージングとプロジェクトを準備し"
"て配布する時にどのように使うかを説明します。この節では、ツールの選定やユース"
"ケースに最適なプロセスについての理解を醸成します。パッケージングとは何か、そ"
"れが解決する問題、そして鍵となる考慮事項を含みます。"

#: ../source/index.rst:51
msgid ""
"To get an overview of the workflow used to publish your code, see :doc:"
"`packaging flow <flow>`."
msgstr ""
"あなたのソースコードを公開するために用いられるワークフローの概要を得たけれ"
"ば、 :doc:`パッケージングフロー <flow>` を見てください。"

#: ../source/index.rst:57
msgid ""
"Tutorials walk through the steps needed to complete a project for the first "
"time. Tutorials aim to help you succeed and provide a starting point for "
"future exploration. The :doc:`tutorials/index` section includes:"
msgstr ""
"チュートリアルでは、初めてプロジェクトを完成させる際に必要な諸段階を一通り眺"
"めます。チュートリアルは、将来の探検のための出発点を提供することであなたの成"
"功を助けます。 :doc:`チュートリアル <tutorials/index>` の節には次のものが含ま"
"れます:"

#: ../source/index.rst:62
msgid ""
"A :doc:`tutorial on installing packages <tutorials/installing-packages>`"
msgstr ""
":doc:`パッケージをインストールするためのチュートリアル <tutorials/installing-"
"packages>`"

#: ../source/index.rst:63
msgid ""
"A :doc:`tutorial on managing application dependencies <tutorials/managing-"
"dependencies>` in a version controlled project"
msgstr ""
"バージョンを管理しているプロジェクトでの :doc:`アプリケーションの依存関係を管"
"理するためのチュートリアル <tutorials/managing-dependencies>`"

#: ../source/index.rst:65
msgid ""
"A :doc:`tutorial on packaging and distributing <tutorials/packaging-"
"projects>` your project"
msgstr ""
"あなたのプロジェクトの :doc:`パッケージングと配布のためのチュートリアル "
"<tutorials/packaging-projects>`"

#: ../source/index.rst:71
msgid ""
"Guides provide steps to perform a specific task. Guides are more focused on "
"users who are already familiar with Python packaging and are looking for "
"specific information."
msgstr ""
"ガイド文書は、特定のタスクを実行するためのステップを提供します。ガイド文書"
"は、すでに Python のパッケージングに慣れていて、特定の情報を探しているような"
"ユーザに、より強く焦点を合わせています。"

#: ../source/index.rst:75
msgid ""
"The :doc:`guides/index` section provides \"how to\" instructions in three "
"major areas: package installation; building and distributing packages; "
"miscellaneous topics."
msgstr ""
":doc:`ガイド <guides/index>` 節では、パッケージインストール; パッケージの作成"
"と配布; その他の話題という３個の主要な分野について \"ハウツー <how to>\" とな"
"る指示を提供します。"

#: ../source/index.rst:80
msgid "Explanations and Discussions"
msgstr "説明と議論"

#: ../source/index.rst:82
#, fuzzy
#| msgid ""
#| "The :doc:`discussions/index` section for in-depth explanations and "
#| "discussion about topics, such as:"
msgid ""
"The :doc:`discussions/index` section provides in-depth explanations and "
"discussion about topics, such as:"
msgstr ""
"以下に述べるような話題に関する詳細に渡る説明と議論のための :doc:`議論 "
"<discussions/index>` の節:"

#: ../source/index.rst:85
msgid ":doc:`discussions/deploying-python-applications`"
msgstr ""
":doc:`議論/Python アプリケーションを配置する <discussions/deploying-python-"
"applications>`"

#: ../source/index.rst:86
msgid ":doc:`discussions/pip-vs-easy-install`"
msgstr ":doc:`議論/pip対easy-install <discussions/pip-vs-easy-install>`"

#: ../source/index.rst:89
msgid "Reference"
msgstr "参考文献"

#: ../source/index.rst:91
msgid ""
"The :doc:`specifications/index` section for packaging interoperability "
"specifications."
msgstr ""
"パッケージングに関する相互運用性の仕様については、 :doc:`仕様 "
"<specifications/index>` を見てください。"

#: ../source/index.rst:92
msgid ""
"The list of :doc:`other projects <key_projects>` maintained by members of "
"the Python Packaging Authority."
msgstr ""
"Python パッケージングオーソリティのメンバーが維持管理している :doc:`他のプロ"
"ジェクト群 <key_projects>` のリスト。"

#: ../source/index.rst:93
msgid "The :doc:`glossary` for definitions of terms used in Python packaging."
msgstr ""
"Python パッケージングで使われる用語の定義についての :doc:`語彙集 "
"<glossary>` 。"

#: ../source/key_projects.rst:6
msgid "Project Summaries"
msgstr "プロジェクト概要"

#: ../source/key_projects.rst:8
msgid ""
"Summaries and links for the most relevant projects in the space of Python "
"installation and packaging."
msgstr ""
"Python の実装やパッケージングの領域で最も関連があるプロジェクト群へのまとめと"
"リンク。"

#: ../source/key_projects.rst:14
msgid "PyPA Projects"
msgstr "PyPA プロジェクト群"

#: ../source/key_projects.rst:19
msgid "bandersnatch"
msgstr "bandersnatch"

#: ../source/key_projects.rst:21
msgid ""
"`Docs <https://bandersnatch.readthedocs.io>`__ | `Issues <https://github.com/"
"pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/"
"bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"
msgstr ""
"`説明文書 <https://bandersnatch.readthedocs.io>`__ | `課題リスト <https://"
"github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/"
"bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"

#: ../source/key_projects.rst:26
msgid ""
"``bandersnatch`` is a PyPI mirroring client designed to efficiently create a "
"complete mirror of the contents of PyPI. Organizations thus save bandwidth "
"and latency on package downloads (especially in the context of automated "
"tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN). "
"Files can be served from a local directory or `AWS S3`_."
msgstr ""
"``bandersnatch`` は、PyPI をミラーリングするクライアントで、PyPI のコンテンツ"
"の完全なコピーを効率よく作成するように設計されています。組織から見ると、これ"
"によってパッケージのダウンロードに必要な帯域幅とレイテンシーを (とりわけ自動"
"化されたテストの文脈で) 節約することができ、PyPI のコンテンツデリバリネット"
"ワーク (CDN) への負荷を軽減します。ローカルのディレクトリからでも `AWS S3`_ "
"からでもファイル群を提供するようにできます。"

#: ../source/key_projects.rst:37
msgid "build"
msgstr "ビルド"

#: ../source/key_projects.rst:39
msgid ""
":any:`Docs <build:index>` | `Issues <https://github.com/pypa/build/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/build>`__"
msgstr ""
":any:`文書 <build:index>` | `課題リスト <https://github.com/pypa/build/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/build>`__"

#: ../source/key_projects.rst:44
msgid ""
"``build`` is a :pep:`517` compatible Python package builder. It provides a "
"CLI to build packages, as well as a Python API."
msgstr ""
"``build`` は :pep:`517` 互換の Python パッケージビルダです。Python API と同様"
"に、パッケージをビルドする CLI を提供します。"

#: ../source/key_projects.rst:51
msgid "cibuildwheel"
msgstr "cibuildwheel"

#: ../source/key_projects.rst:53
msgid ""
"`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github."
"com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | "
"`Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | "
"`Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""
"`説明文書 <https://cibuildwheel.readthedocs.io/>`__ | `課題リスト <https://"
"github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | `議論 "
"<https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord "
"#cibuildwheel <https://discord.com/invite/pypa>`__"

#: ../source/key_projects.rst:60
msgid ""
"``cibuildwheel`` is a Python package that builds :term:`wheels <Wheel>` for "
"all common platforms and Python versions on most CI systems. Also see :ref:"
"`multibuild`."
msgstr ""
"``cibuildwheel`` は、プラットフォーム・ Python バージョン・ CIシステムのよく"
"ある組み合わせの全部について :term:`wheels <Wheel>` をビルドする Python パッ"
"ケージです。"

#: ../source/key_projects.rst:66
msgid "distlib"
msgstr "distlib"

#: ../source/key_projects.rst:68
msgid ""
":doc:`Docs <distlib:index>` | `Issues <https://github.com/pypa/distlib/"
"issues>`__ | `GitHub <https://github.com/pypa/distlib>`__ | `PyPI <https://"
"pypi.org/project/distlib>`__"
msgstr ""
":doc:`文書 <distlib:index>` | `課題リスト <https://github.com/pypa/distlib/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/distlib>`__"

#: ../source/key_projects.rst:73
msgid ""
"``distlib`` is a library which implements low-level functions that relate to "
"packaging and distribution of Python software.  ``distlib`` implements "
"several relevant PEPs (Python Enhancement Proposal standards) and is useful "
"for developers of third-party packaging tools to make and upload binary and "
"source :term:`distributions <Distribution Package>`, achieve "
"interoperability, resolve dependencies, manage package resources, and do "
"other similar functions."
msgstr ""
"``distlib`` は、 Python ソフトウェアのパッケージングや配布に関係する低レベル"
"の機能を実装しているライブラリです。 ``distlib`` はいくつかの関連する PEP "
"(Python Enhancement Proposal standards) を実装していて、サードパーティのパッ"
"ケージングツールの開発者にとってバイナリやソースコードの :term:`配布物 "
"<Distribution Package>` を作成・アップロードしたり、相互運用性を確保したり、"
"依存関係を解決したり、パッケージリソースを管理したり、その他の類似の機能を実"
"行したりするのに便利です。"

#: ../source/key_projects.rst:82
msgid ""
"Unlike the stricter :ref:`packaging` project (below), which specifically "
"implements modern Python packaging interoperability standards, ``distlib`` "
"also attempts to provide reasonable fallback behaviours when asked to handle "
"legacy packages and metadata that predate the modern interoperability "
"standards and fall into the subset of packages that are incompatible with "
"those standards."
msgstr ""
"近代的な Python パッケージングにおける相互運用性標準に特に気を配って実装され"
"た、より厳格な :ref:`packaging` プロジェクト (後述) とは異なり、 ``distlib`` "
"は近代的な相互運用性標準ができる前の昔ながらのパッケージやメタデータで今と"
"なってはその標準に外れたことになっているものを扱うように言われた時には合理的"
"なフォールバック動作も提供しようとしています。"

#: ../source/key_projects.rst:93
msgid "distutils"
msgstr "distutils"

#: ../source/key_projects.rst:95
msgid ""
"The original Python packaging system, added to the standard library in "
"Python 2.0 and removed in 3.12."
msgstr ""
"Python の元々のパッケージングシステムで、Python 2.0 の時点で標準ライブラリに"
"追加され 3.12 で削除されました。"

#: ../source/key_projects.rst:98
msgid ""
"Due to the challenges of maintaining a packaging system where feature "
"updates are tightly coupled to language runtime updates, direct usage of :"
"ref:`distutils` has been actively discouraged, with :ref:`Setuptools` being "
"the preferred replacement. :ref:`Setuptools` not only provides features that "
"plain :ref:`distutils` doesn't offer (such as dependency declarations and "
"entry point declarations), it also provides a consistent build interface and "
"feature set across all supported Python versions."
msgstr ""
"パッケージングシステムを維持管理する際の難題には機能向上が言語ラインタイムの"
"更新と密接に結びついていることが挙げられますが、そのせいで :ref:`distutils` "
"を直接に使用することは強い非推奨事項にずっとなり続けてきており、代わりに :"
"ref:`Setuptools` を使うことが望ましいとされています。 :ref:`Setuptools` "
"は、 :ref:`distutils` そのものが提供していない機能 (例えば依存関係の宣言やエ"
"ントリポイントの宣言) を提供できるだけでなく、守備一貫したビルド用のインタ"
"フェイスやサポートするすべてのバージョンの Python のすべてについて設定できる"
"機能を提供しています。"

#: ../source/key_projects.rst:107
msgid ""
"Consequently, :ref:`distutils` was deprecated in Python 3.10 by :pep:`632` "
"and has been :doc:`removed <python:whatsnew/3.12>` from the standard library "
"in Python 3.12.  Setuptools bundles the standalone copy of distutils, and it "
"is injected even on Python < 3.12 if you import setuptools first or use pip."
msgstr ""
"従って、 :ref:`distutils` は :pep:`632` によって Python 3.10 で非推奨にな"
"り、 Python 3.12 で標準ライブラリから :doc:`削除 <python:whatsnew/3.12>` され"
"ました。Setuptools にはスタンドアローンの distutils が同梱されていて、< 3.12 "
"の Python 上であっても setuptools をインポートするか pip を使うと注入されま"
"す。"

#: ../source/key_projects.rst:116
msgid "flit"
msgstr "flit"

#: ../source/key_projects.rst:118
msgid ""
"`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""
"`説明文書 <https://flit.readthedocs.io/en/latest/>`__ | `課題リスト <https://"
"github.com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"

#: ../source/key_projects.rst:122
msgid ""
"Flit provides a simple way to create and upload pure Python packages and "
"modules to PyPI.  It focuses on `making the easy things easy <flit-"
"rationale_>`_ for packaging.  Flit can generate a configuration file to "
"quickly set up a simple project, build source distributions and wheels, and "
"upload them to PyPI."
msgstr ""
"Flit は、純 Python のパッケージやモジュールを作成して PyPI へアップロードする"
"簡単な手段を提供します。パッケージングに関して `簡単なことを簡単に実現する "
"<flit-rationale_>`_ ことに注力しています。これを使えば単純なプロジェクトや"
"ソースコード配布物とwheelsについて素早くセットアップするための設定ファイルを"
"生成し、PyPI にアップロードすることができます。"

#: ../source/key_projects.rst:127
msgid ""
"Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on "
"tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to "
"upload them to PyPI. Flit requires Python 3, but you can use it to "
"distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""
"Flit は、 ``pyproject.toml`` を使ってプロジェクトの設定を行います。Flit は、"
"配布物をビルドする :ref:`setuptools` やそれを PyPI へアップロードする :ref:"
"`twine` のようなツールには依存していません。 Flit は Python 3 を要求します"
"が、Python 3 上にインポートできるものであれば Python 2 向けのモジュールでも配"
"布することが可能です。"

#: ../source/key_projects.rst:132
msgid ""
"The flit package is lifted by `Matthias Bussonnier <https://github.com/"
"Carreau>`__ since October 2023 on the `tidelift platform <https://tidelift."
"com/lifter/search/pypi/flit>`__, and funds sent to the PSF and earmarked for "
"PyPA usage."
msgstr ""
"flit パッケージは、2023年10月以来、 `tidelift platform <https://tidelift.com/"
"lifter/search/pypi/flit>`__ でリフト <lift> (訳註、維持管理に対して対価を払う"
"の意か) され、また、PSF に送られたファンドで PyPA 向けに使うように指定された"
"資金を使って、 `Matthias Bussonnier <https://github.com/Carreau>`__ によって"
"維持管理されています。"

#: ../source/key_projects.rst:142
msgid "hatch"
msgstr "hatch"

#: ../source/key_projects.rst:144
msgid ""
"`Docs <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/pypa/"
"hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""
"`説明文書 <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/"
"pypa/hatch>`__ | `PyPI <https://pypi.org/project/hatch/>`__"

#: ../source/key_projects.rst:148
msgid ""
"Hatch is a unified command-line tool meant to conveniently manage "
"dependencies and environment isolation for Python developers. Python package "
"developers use Hatch and its :term:`build backend <Build Backend>` Hatchling "
"to configure, version, specify dependencies for, and publish packages to "
"PyPI. Its plugin system allows for easily extending functionality."
msgstr ""
"Hatch は、 Python での開発者向けに依存関係の管理や環境の分離を便利に行うため"
"の統合されたコマンドラインツールです。 Python パッケージ開発者は Hatch とそ"
"の :term:`ビルドバックエンド <Build Backend>` である Hatchling を使って、パッ"
"ケージの設定を実施し、バージョン管理を行い、依存関係を指定し、そして PyPI で"
"公開することができます。プラグインシステムがあるので、容易に機能を拡張するこ"
"とができます。"

#: ../source/key_projects.rst:157
msgid "packaging"
msgstr "packaging ライブラリ"

#: ../source/key_projects.rst:159
msgid ""
":doc:`Docs <packaging:index>` | `Issues <https://github.com/pypa/packaging/"
"issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://"
"pypi.org/project/packaging>`__"
msgstr ""
":doc:`説明文書 <packaging:index>` | `課題リスト <https://github.com/pypa/"
"packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | "
"`PyPI <https://pypi.org/project/packaging>`__"

#: ../source/key_projects.rst:164
msgid ""
"Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""
"(packaging ライブラリには) :ref:`pip` や :ref:`setuptools` で使われる Python "
"パッケージングのための中核的なユーティリティ (としての core utilities があり"
"ます)。"

#: ../source/key_projects.rst:166
msgid ""
"The core utilities in the packaging library handle version handling, "
"specifiers, markers, requirements, tags, and similar attributes and tasks "
"for Python packages. Most Python users rely on this library without needing "
"to explicitly call it; developers of the other Python packaging, "
"distribution, and installation tools listed here often use its functionality "
"to parse, discover, and otherwise handle dependency attributes."
msgstr ""
"packaging ライブラリの core utilities は、バージョンの取り扱い、識別子、マー"
"カ、依存先パッケージ、タグ、その他これに類似した属性やタスクを取り扱います。 "
"Python ユーザのほとんどは、明示的に呼び出す必要に迫られることはなくともこのラ"
"イブラリに依存しています; ここにリストされているような Python のパッケージン"
"グや配布やインストールを扱う他のパッケージを開発する者は、パースしたり検出し"
"たりそうでなければ依存関係の属性を取り扱うようなこのライブラリの機能をしばし"
"ば利用しています。"

#: ../source/key_projects.rst:174
msgid ""
"This project specifically focuses on implementing the modern Python "
"packaging interoperability standards defined at :ref:`packaging-"
"specifications`, and will report errors for sufficiently old legacy packages "
"that are incompatible with those standards. In contrast, the :ref:`distlib` "
"project is a more permissive library that attempts to provide a plausible "
"reading of ambiguous metadata in cases where :ref:`packaging` will instead "
"report on error."
msgstr ""
"このプロジェクトは、 :ref:`パッケージング仕様 <packaging-specifications` で定"
"義された近代的な Python パッケージング相互運用性標準を実装することに焦点を当"
"てており、この標準と互換性が取れないほど古いレガシーパッケージについてエラー"
"を報告します。対照的に、 :ref:`distlib` プロジェクトはもっと寛容なライブラリ"
"で、 :ref:`packaging` ならばエラーを報告するような場合であっても曖昧なメタ"
"データをもっともらしく読み込もうと試みます。"

#: ../source/key_projects.rst:186
#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "pip"
msgstr "pip"

#: ../source/key_projects.rst:188
msgid ""
"`Docs <https://pip.pypa.io/>`__ | `Issues <https://github.com/pypa/pip/"
"issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi."
"org/project/pip/>`__"
msgstr ""
"`説明文書 <https://pip.pypa.io/>`__ | `課題リスト <https://github.com/pypa/"
"pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://"
"pypi.org/project/pip/>`__"

#: ../source/key_projects.rst:193
msgid ""
"The most popular tool for installing Python packages, and the one included "
"with modern versions of Python."
msgstr ""
"Python パッケージをインストールするに当たっての最もよく知られたツールで、"
"Python の新しめのバージョンには同梱されているもの。"

#: ../source/key_projects.rst:196
msgid ""
"It provides the essential core features for finding, downloading, and "
"installing packages from PyPI and other Python package indexes, and can be "
"incorporated into a wide range of development workflows via its command-line "
"interface (CLI)."
msgstr ""
"PyPI やその他の Python パッケージインデックスのパッケージを探索・ダウンロー"
"ド・インストールするための基本的な機能を提供するとともに、コマンドラインイン"
"タフェイス (CLI) を通じて広範囲の開発ワークフローに組み込むことができます。"

#: ../source/key_projects.rst:204
msgid "Pipenv"
msgstr "Pipenv"

#: ../source/key_projects.rst:206
msgid ""
":doc:`Docs <pipenv:index>` | `Source <https://github.com/pypa/pipenv>`__ | "
"`Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/"
"project/pipenv>`__"
msgstr ""
":doc:`説明文書 <pipenv:index>` | `ソースコード <https://github.com/pypa/"
"pipenv>`__ | `課題リスト <https://github.com/pypa/pipenv/issues>`__ | `PyPI "
"<https://pypi.org/project/pipenv>`__"

#: ../source/key_projects.rst:211
msgid ""
"Pipenv is a project that aims to bring the best of all packaging worlds to "
"the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:"
"`virtualenv` into one single toolchain. It can autoimport ``requirements."
"txt`` and also check for CVEs in `Pipfile`_ using `safety <https://pyup.io/"
"safety>`_."
msgstr ""
"Pipenv は、全てのパッケージング世界の最良のものを Python 世界に持ち込むことを"
"目的とするプロジェクトです。 :ref:`Pipfile` ・ :ref:`pip` ・ :ref:"
"`virtualenv` を単一のツールチェーンにまとめ上げるものです。 ``requirements."
"txt`` を自動的にインポートすることができ、また、 `safety <https://pyup.io/"
"safety>`_ を使って `Pipfile`_ 中の CVE を確認することができます。"

#: ../source/key_projects.rst:216
msgid ""
"Pipenv aims to help users manage environments, dependencies, and imported "
"packages on the command line. It also works well on Windows (which other "
"tools often underserve), makes and checks file hashes, to ensure compliance "
"with hash-locked dependency specifiers, and eases uninstallation of packages "
"and dependencies."
msgstr ""
"Pipenv は、ユーザがコマンドラインで環境・依存関係・インポートされたパッケージ"
"を管理することを補助することを目的としています。 (他のツールが往々にしてうま"
"く動かない) Windows 上でもきちんと動作し、ファイルのハッシュ値を計算し確認す"
"ることでハッシュ値による依存関係識別子との互換性を確保し、パッケージの依存関"
"係先のアンインストールを容易にします。"

#: ../source/key_projects.rst:225
msgid "Pipfile"
msgstr "Pipfile"

#: ../source/key_projects.rst:227
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr "`ソースコード <https://github.com/pypa/pipfile>`__"

#: ../source/key_projects.rst:229
msgid ""
":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level "
"application-centric alternative to :ref:`pip`'s lower-level :file:"
"`requirements.txt` file."
msgstr ""
":file:`Pipfile` とその姉妹 :file:`Pipfile.lock` は、 :ref:`pip` における低レ"
"ベルの :file:`requirements.txt` ファイルに代わる高レベルのアプリケーション中"
"心のファイルです。"

#: ../source/key_projects.rst:236
msgid "pipx"
msgstr "pipx"

#: ../source/key_projects.rst:238
msgid ""
"`Docs <https://pipx.pypa.io/>`__ | `GitHub <https://github.com/pypa/pipx>`__ "
"| `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""
"`説明文書 <https://pipx.pypa.io/>`__ | `GitHub <https://github.com/pypa/"
"pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"

#: ../source/key_projects.rst:242
msgid ""
"pipx is a tool to install and run Python command-line applications without "
"causing dependency conflicts with other packages installed on the system."
msgstr ""
"pipx は、システムにインストール済みの他のパッケージとの間に依存関係の衝突を起"
"こすことなく Python のコマンドラインアプリケーションをインストールし動作させ"
"るためのツールです。"

#: ../source/key_projects.rst:249
msgid ""
":doc:`Docs <index>` | `Issues <https://github.com/pypa/packaging.python.org/"
"issues>`__ | `GitHub <https://github.com/pypa/packaging.python.org>`__"
msgstr ""
":doc:`説明文書 <index>` | `課題リスト <https://github.com/pypa/packaging."
"python.org/issues>`__ | `GitHub <https://github.com/pypa/packaging.python."
"org>`__"

#: ../source/key_projects.rst:253
msgid "This guide!"
msgstr "このガイド!"

#: ../source/key_projects.rst:258
msgid "readme_renderer"
msgstr "readme_renderer"

#: ../source/key_projects.rst:260
msgid ""
"`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"
msgstr ""
"`GitHub および説明文書 <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"

#: ../source/key_projects.rst:263
msgid ""
"``readme_renderer`` is a library that package developers use to render their "
"user documentation (README) files into HTML from markup languages such as "
"Markdown or reStructuredText. Developers call it on its own or via :ref:"
"`twine`, as part of their release management process, to check that their "
"package descriptions will properly display on PyPI."
msgstr ""
"``readme_renderer`` は、Markdown や reStructuredText のようなマークアップ言語"
"で書かれたユーザ向け説明ファイル (README) を HTML に展開するためにパッケージ"
"開発者が用いるライブラリです。開発者は、リリース管理プロセスの一環として直接"
"または :ref:`twine` 経由でこれを呼び出し、そのパッケージに関する説明がきちん"
"と PyPI に表示されることを確認します。"

#: ../source/key_projects.rst:274
msgid "Setuptools"
msgstr "Setuptools"

#: ../source/key_projects.rst:276
msgid ""
"`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://"
"github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/"
"setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""
"`説明文書 <https://setuptools.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/"
"pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"

#: ../source/key_projects.rst:281
msgid ""
"Setuptools (which includes ``easy_install``) is a collection of enhancements "
"to the Python distutils that allow you to more easily build and distribute "
"Python :term:`distributions <Distribution Package>`, especially ones that "
"have dependencies on other packages."
msgstr ""
"(``easy_install`` を含む) Setuptools は Python の distutils への拡張を集めた"
"もので、特に他のパッケージに依存関係がある場合に、より簡単に Python の :term:"
"`配布物 <Distribution Package>` をビルドし配布することが可能となります。"

#: ../source/key_projects.rst:289
msgid "trove-classifiers"
msgstr "trove-classifiers"

#: ../source/key_projects.rst:291
msgid ""
"`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"
msgstr ""
"`課題リスト <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"

#: ../source/key_projects.rst:295
msgid ""
"trove-classifiers is the canonical source for `classifiers on PyPI <https://"
"pypi.org/classifiers/>`_, which project maintainers use to :ref:"
"`systematically describe their projects <core-metadata-classifier>` so that "
"users can better find projects that match their needs on the PyPI."
msgstr ""
"trove-classifiers は、`PyPI における分類子 <https://pypi.org/classifiers/>`_ "
"の正統な源泉で、ユーザがそのニーズに即したプロジェクトを PyPI でよりうまく探"
"し出せるように、プロジェクトの保守者が `プロジェクトを体系的に表現する <core-"
"metadata-classifier>`_ のに使います。"

#: ../source/key_projects.rst:300
msgid ""
"The trove-classifiers package contains a list of valid classifiers and "
"deprecated classifiers (which are paired with the classifiers that replace "
"them).  Use this package to validate classifiers used in packages intended "
"for uploading to PyPI. As this list of classifiers is published as code, you "
"can install and import it, giving you a more convenient workflow compared to "
"referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. "
"The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for "
"the project hosts discussions on proposed classifiers and requests for new "
"classifiers."
msgstr ""
"trove-classifiers パッケージには、正当な分類子および (それを置き換えた分類子"
"と一組で) 非推奨になった分類子のリストが含まれています。 PyPI にアップロード"
"しようとしているパッケージで使われている分類子の正当性を確認するために、この"
"パッケージを使いましょう。この分類子リストがソースコードの形で公開されている"
"ので、それをインストールしてインポートすれば、 `PyPI で公開されているリスト "
"<https://pypi.org/classifiers/>`_ を参照するよりももっと便利なワークフローを"
"構築することができます。本プロジェクトの `課題リスト <https://github.com/"
"pypa/trove-classifiers/issues>`_ に、提案された分類子に関する議論や新しい分類"
"子が欲しいという要求に関する議論が公開されています。"

#: ../source/key_projects.rst:314
msgid "twine"
msgstr "twine"

#: ../source/key_projects.rst:316
msgid ""
"`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | "
"`PyPI <https://pypi.org/project/twine>`__"
msgstr ""
"`説明文書 <https://twine.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/"
"twine>`__ | `PyPI <https://pypi.org/project/twine>`__"

#: ../source/key_projects.rst:321
msgid ""
"Twine is the primary tool developers use to upload packages to the Python "
"Package Index or other Python package indexes. It is a command-line program "
"that passes program files and metadata to a web API. Developers use it "
"because it's the official PyPI upload tool, it's fast and secure, it's "
"maintained, and it reliably works."
msgstr ""
"Twine は、開発者がパッケージをPython パッケージインデックス (PyPI) や他の "
"Python 用パッケージインデックスへアップロードするのに使う最初の選択肢です。こ"
"れはコマンドラインプログラムで、プログラムのファイルやメタデータを web API へ"
"渡します。開発者がこれを使うのは、公式の PyPI へのアップロードツールであるか"
"らであり、動作が速く安全であるからであり、保守されているからであり、動作が信"
"頼できるからです。"

#: ../source/key_projects.rst:331 ../source/overview.rst:401
msgid "virtualenv"
msgstr "virtualenv"

#: ../source/key_projects.rst:333
msgid ""
"`Docs <https://virtualenv.pypa.io/en/stable/index.html>`__ | `Issues "
"<https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/"
"pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"
msgstr ""
"`説明文書 <https://virtualenv.pypa.io/en/stable/index.html>`__ | `課題リスト "
"<https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/"
"pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"

#: ../source/key_projects.rst:338
msgid ""
"virtualenv is a tool for creating isolated Python :term:`Virtual "
"Environments <Virtual Environment>`, like :ref:`venv`. Unlike :ref:`venv`, "
"virtualenv can create virtual environments for other versions of Python, "
"which it locates using the PATH environment variable. It also provides "
"convenient features for configuring, maintaining, duplicating, and "
"troubleshooting virtual environments. For more information, see the section "
"on :ref:`Creating and using Virtual Environments`."
msgstr ""
"virtualenv は、 :ref:`venv` と同様に独立した Python :term:`仮想環境 <Virtual "
"Environment>` を生成するツールです。 :ref:`venv` とは異なり、virtualenv は "
"PATH 環境変数を使って特定することで他のバージョンの Python 用の仮想環境を作成"
"することができます。他にも、仮想環境の設定・保守・複製・問題解決のための便利"
"な機能を提供しています。より詳しくは、 :ref:`仮想環境を作って使う <Creating "
"and using Virtual Environments>` の節を見てください。"

#: ../source/key_projects.rst:350
msgid "Warehouse"
msgstr "Warehouse"

#: ../source/key_projects.rst:352
msgid ""
"`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/"
"warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""
"`説明文書 <https://warehouse.pypa.io/>`__ | `課題リスト <https://github.com/"
"pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"

#: ../source/key_projects.rst:356
msgid ""
"The current codebase powering the :term:`Python Package Index (PyPI)`. It is "
"hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` "
"downloads."
msgstr ""
"現在の :term:`Python パッケージインデックス <Python Package Index (PyPI)>` を"
"構成しているコードベース。 `pypi.org <https://pypi.org/>`_ にホストされていま"
"す。 :ref:`pip` がダウンロードする際のデフォルトのソースです。"

#: ../source/key_projects.rst:364
msgid "wheel"
msgstr "wheel"

#: ../source/key_projects.rst:366
msgid ""
"`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | "
"`PyPI <https://pypi.org/project/wheel>`__"
msgstr ""
"`説明文書 <https://wheel.readthedocs.io/en/latest/>`__ | `課題リスト "
"<https://github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/"
"wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"

#: ../source/key_projects.rst:371
msgid ""
"Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` "
"extension for creating :term:`wheel distributions <Wheel>`.  Additionally, "
"it offers its own command line utility for creating and installing wheels."
msgstr ""
"wheel は、主として :term:`wheel 配布物 <Wheel>` を作成するための :ref:"
"`setuptools` の拡張である ``bidet_wheel`` を提供するプロジェクトです。この他"
"にも、wheel ファイルを作成しインストールするためのコマンドラインユーティリ"
"ティを提供します。"

#: ../source/key_projects.rst:375
msgid ""
"See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that "
"package developers use to check and fix Python packages they are making in "
"the binary wheel format. It provides functionality to discover dependencies, "
"check metadata for compliance, and repair the wheel and metadata to properly "
"link and include external shared libraries in a package."
msgstr ""
"パッケージ開発者がバイナリの wheel フォーマットで開発中の Python パッケージを"
"チェックし問題を解決するためのツールである `auditwheel <https://github.com/"
"pypa/auditwheel>`__ も見てください。このツールは、依存関係を検出し、法令遵守"
"のためのメタデータを確認し、 wheel とメタデータがパッケージないの外部共有ライ"
"ブラリに正しくリンクしインクルードするように修正する機能を提供します。"

#: ../source/key_projects.rst:384
msgid "Non-PyPA Projects"
msgstr "非 PyPA プロジェクト"

#: ../source/key_projects.rst:389
msgid "buildout"
msgstr "buildout"

#: ../source/key_projects.rst:391
msgid ""
"`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs."
"launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""
"`説明文書 <http://www.buildout.org/en/latest/>`__ | `課題リスト <https://"
"bugs.launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"

#: ../source/key_projects.rst:396
msgid ""
"Buildout is a Python-based build system for creating, assembling and "
"deploying applications from multiple parts, some of which may be non-Python-"
"based.  It lets you create a buildout configuration and reproduce the same "
"software later."
msgstr ""
"Buildout は Python ベースのビルドシステムで、非 Python ベースのものを含む複数"
"の部品から構成されるアプリケーションの生成・組み立て・配置ができます。"
"buildout の設定を作っておけば、後で同じソフトウェアを再生成することができま"
"す。"

#: ../source/key_projects.rst:403
msgid "conda"
msgstr "conda"

#: ../source/key_projects.rst:405
msgid ":doc:`Docs <conda:index>`"
msgstr ":doc:`説明文書 <conda:index>`"

#: ../source/key_projects.rst:407
msgid ""
"Conda is a package, dependency, and environment management system for any "
"language — Python, R, Ruby, C/C++, Fortran, and more. It is written in "
"Python and widely used in the Python scientific computing community, due to "
"its support for non-Python compiled libraries and extensions. It is used as "
"the basis of the `Anaconda <https://docs.anaconda.com/anaconda/>`__ Python "
"distribution from Anaconda, Inc. It was originally aimed at the scientific "
"community, but can also be used on its own, or with the :doc:`miniconda "
"<conda:miniconda>`, `miniforge <https://github.com/conda-forge/miniforge>`_ "
"or `pixi <https://pixi.sh/>`_ systems. It is available for Windows, Mac and "
"Linux systems."
msgstr ""

#: ../source/key_projects.rst:416
#, fuzzy
#| msgid ""
#| "Conda is a completely separate tool from :ref:`pip`, virtualenv and "
#| "wheel, but provides many of their combined features in terms of package "
#| "management, virtual environment management and deployment of binary "
#| "extensions."
msgid ""
"Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, "
"but provides many of their combined features, such as package management, "
"virtual environment management and deployment of binary extensions and other "
"binary code."
msgstr ""
"Conda は、 :ref:`pip` や virtualenv や wheel とは全く別のツールですが、パッ"
"ケージ管理・仮想環境管理・バイナリ拡張のデプロイメントの観点ではこれらのツー"
"ルを合わせたような機能を提供します。"

#: ../source/key_projects.rst:420
msgid ""
"Conda does not install packages from PyPI -- it can only manage packages "
"built specifically for conda, which can be made available on a \"conda "
"channel\", such as those hosted on `anaconda.org <https://anaconda.org>`__, "
"or a local (e.g. intranet) package server. In addition to the \"default\" "
"channels managed by `Anaconda, Inc. <https://www.anaconda.com/>`__, there "
"are a wide variety of packages from the community supported `conda-forge "
"project <https://conda-forge.org/>`__"
msgstr ""

#: ../source/key_projects.rst:426
#, fuzzy
#| msgid ""
#| "Conda does not install packages from PyPI and can install only from the "
#| "official Anaconda repositories, or anaconda.org (a place for user-"
#| "contributed *conda* packages), or a local (e.g. intranet) package "
#| "server.  However, note that :ref:`pip` can be installed into, and work "
#| "side-by-side with conda for managing :term:`distributions <Distribution "
#| "Package>` from PyPI. Also, `conda skeleton <https://docs.conda.io/"
#| "projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton."
#| "html>`__ is a tool to make Python packages installable by conda by first "
#| "fetching them from PyPI and modifying their metadata."
msgid ""
"Note that :ref:`pip` can be installed into, and work side-by-side with conda "
"for managing :term:`distributions <Distribution Package>` from PyPI. It is "
"also possible to build conda packages from Python source packages using "
"tools such as `conda skeleton <https://docs.conda.io/projects/conda-build/en/"
"latest/user-guide/tutorials/build-pkgs-skeleton.html>`__: a tool to "
"automatically make conda packages from Python packages available on PyPI."
msgstr ""
"Conda は PyPI からパッケージをインストールすることはなく、公式の Anaconda リ"
"ポジトリか、anaconda.org (ユーザが貢献した *conda* パッケージの置き場所) か、"
"または、ローカル (例えばイントラネット) にあるパッケージサーバからのみインス"
"トールすることができます。しかしながら、:ref:`pip` をインストールすることは可"
"能で、PyPI からの :term:`配布物 <Distribution Package>` の管理という点では "
"conda と平行して動作することができます。また、 `conda skeleton <https://docs."
"conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-"
"skeleton.html>`__ は、 PyPI から持ってきた Python パッケージのメタデータを修"
"正することで conda がインストールできるものにするためのツールです。"

#: ../source/key_projects.rst:435
msgid "devpi"
msgstr "devpi"

#: ../source/key_projects.rst:437
msgid ""
"`Docs <http://doc.devpi.net/latest/>`__ | :gh:`Issues <devpi/devpi/issues>` "
"| `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""
"`説明文書 <http://doc.devpi.net/latest/>`__ | :gh:`課題リスト <devpi/devpi/"
"issues>` | `PyPI <https://pypi.org/project/devpi>`__"

#: ../source/key_projects.rst:441
msgid ""
"devpi features a powerful PyPI-compatible server and PyPI proxy cache with a "
"complementary command line tool to drive packaging, testing and release "
"activities with Python. devpi also provides a browsable and searchable web "
"interface. devpi supports mirroring PyPI, multiple :term:`package indexes "
"<Package Index>` with inheritance, syncing between these indexes, index "
"replication and fail-over, and package upload."
msgstr ""
"devpi は、 PyPI 互換の強力なサーバと PyPI プロクシキャッシュの機能を持ってい"
"て、 Python を使ったパッケージングやテスティングやリリース活動を推進するため"
"の補完的なコマンドラインツールを備えています。devpi は、また、閲覧と検索が可"
"能なwebインタフェイスも備えています。devpi は、 PyPI のミラーを作成する機能、"
"継承関係を持った複数の :term:`パッケージインデックス <Package Index>` を扱う"
"機能、これらのインデックスの間の同期機能、インデックスの複製とフェイルオーバ"
"とパッケージのアップロードの機能を提供できます。"

#: ../source/key_projects.rst:452
msgid "dumb-pypi"
msgstr "dumb-pypi"

#: ../source/key_projects.rst:454
msgid ""
"`GitHub <https://github.com/chriskuehl/dumb-pypi>`__ | `PyPI <https://pypi."
"org/project/dumb-pypi>`__"
msgstr ""
"`GitHub <https://github.com/chriskuehl/dumb-pypi>`__ | `PyPI <https://pypi."
"org/project/dumb-pypi>`__"

#: ../source/key_projects.rst:457
msgid ""
"dumb-pypi is a simple :term:`package index <Package Index>` static file site "
"generator, which then must be hosted by a static file webserver to become "
"the package index. It supports serving the hash, core-metadata, and yank-"
"status."
msgstr ""
"dumb-pypi は簡潔な :term:`パッケージインデックス <Package Index>` の静的ファ"
"イルのサイトを構築するツールで、パッケージインデックスとして機能するためには"
"静的ファイルをサポートするウェブサーバにホストされていなければなりません。"
"ハッシュ、コアとなるメタデータ、そして yank ステータスをサポートしています。"

#: ../source/key_projects.rst:464
msgid "enscons"
msgstr "enscons"

#: ../source/key_projects.rst:466
msgid ""
":gh:`Source <dholth/enscons>` | :gh:`Issues <dholth/enscons/issues>` | `PyPI "
"<https://pypi.org/project/enscons>`__"
msgstr ""
":gh:`ソースコード <dholth/enscons>` | :gh:`課題リスト <dholth/enscons/"
"issues>` | `PyPI <https://pypi.org/project/enscons>`__"

#: ../source/key_projects.rst:470
msgid ""
"Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-"
"compatible source distributions and wheels without using distutils or "
"setuptools, including distributions with C extensions. Enscons has a "
"different architecture and philosophy than :ref:`distutils`. Rather than "
"adding build features to a Python packaging system, enscons adds Python "
"packaging to a general purpose build system. Enscons helps you to build "
"sdists that can be automatically built by :ref:`pip`, and wheels that are "
"independent of enscons."
msgstr ""
"Enscons は、 `SCons`_ に基礎を置く Python パッケージングツールです。 C 言語拡"
"張を含む配布物であっても distutils や setuptools を使うことなく :ref:`pip` 互"
"換のソースコード配布物や wheel をビルドすることができます。 Enscons の構造と"
"哲学は :ref:`distutils` のものとは異なります。 Python パッケージングシステム"
"にビルド機能を追加するのではなく、 enscons では汎用のビルドシステムに Python "
"パッケージング機能を追加しています。 Enscons は、 :ref:`pip` で自動的にビルド"
"された sdist や、enscons から独立した wheel をビルドすることを支援します。"

#: ../source/key_projects.rst:485
msgid "Flask-Pypi-Proxy"
msgstr "Flask-Pypi-Proxy"

#: ../source/key_projects.rst:487
msgid ""
"`Docs <https://flask-pypi-proxy.readthedocs.io>`__ | :gh:`GitHub <tzulberti/"
"Flask-PyPi-Proxy>` | `PyPI <https://pypi.org/project/Flask-Pypi-Proxy/>`__"
msgstr ""
"`説明文書 <https://flask-pypi-proxy.readthedocs.io>`__ | :gh:`GitHub "
"<tzulberti/Flask-PyPi-Proxy>` | `PyPI <https://pypi.org/project/Flask-Pypi-"
"Proxy/>`__"

#: ../source/key_projects.rst:491 ../source/key_projects.rst:685
#: ../source/key_projects.rst:744
msgid "Not maintained, project archived"
msgstr "もはや保守されておらず、アーカイブされたプロジェクト"

#: ../source/key_projects.rst:493
msgid ""
"Flask-Pypi-Proxy is a :term:`package index <Package Index>` as a cached "
"proxy for PyPI."
msgstr ""
"Flask-PyPI-Proxy は PyPI に対するキャッシュ付きのプロクシという形の :term:`"
"パッケージインデックス <Package Index>` です。"

#: ../source/key_projects.rst:499
msgid "Hashdist"
msgstr "Hashdist"

#: ../source/key_projects.rst:501
msgid ""
"`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/hashdist/hashdist/>`__"
msgstr ""
"`説明文書 <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/hashdist/hashdist/>`__"

#: ../source/key_projects.rst:504
msgid ""
"Hashdist is a library for building non-root software distributions. Hashdist "
"is trying to be “the Debian of choice for cases where Debian technology "
"doesn’t work”. The best way for Pythonistas to think about Hashdist may be a "
"more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed "
"at solving the problem of installing scientific software, and making package "
"distribution stateless, cached, and branchable. It is used by some "
"researchers but has been lacking in maintenance since 2016."
msgstr ""
"Hashdist は、非特権ユーザソフトウェアの配布物をビルドするためのライブラリで"
"す。 Hashdist は、「Debian 技術が動作していない場合の Debian のような選択肢」"
"になろうとしています。 Python 支持者 (Pythonista) にとっては、 :ref:"
"`virtualenv` と :ref:`buildout` のより強力な混合物が Hashdist だと考えるのが"
"一番でしょう。科学計算分野のソフトウェアをインストールする際の問題を解決し、"
"パッケージ配布物をステートレスでキャッシュ可能かつ分岐可能にすることを目指し"
"ています。一部の研究者が使っていますが、2016 年以降は保守されていません。"

#: ../source/key_projects.rst:516
msgid "Maturin"
msgstr "Maturin"

#: ../source/key_projects.rst:518
msgid ""
"`Docs <https://www.maturin.rs>`__ | `GitHub <https://github.com/PyO3/"
"maturin>`__"
msgstr ""
"`説明文書 <https://www.maturin.rs>`__ | `GitHub <https://github.com/PyO3/"
"maturin>`__"

#: ../source/key_projects.rst:521
msgid ""
"Maturin is a build backend for Rust extension modules, also written in Rust. "
"It supports building wheels for python 3.7+ on Windows, Linux, macOS and "
"FreeBSD, can upload them to PyPI and has basic PyPy and GraalPy support."
msgstr ""
"Maturin は Rust 拡張モジュール用のビルドバックエンドで、Rust で書かれていま"
"す。Windows ・ Linux ・ macOS および FreeBSD 上で python 3.7+ の wheel をビル"
"ドすることができ、それを PyPI にアップロードすることができ、また、 PyPy と "
"GraalPy に対する基本的なサポートもあります。"

#: ../source/key_projects.rst:529
msgid "meson-python"
msgstr "meson-python"

#: ../source/key_projects.rst:531
msgid ""
"`Docs <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/mesonbuild/meson-python>`__"
msgstr ""
"`説明文書 <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/mesonbuild/meson-python>`__"

#: ../source/key_projects.rst:534
msgid ""
"``meson-python`` is a build backend that uses the Meson_ build system. It "
"enables Python package authors to use Meson_ as the build system for their "
"package. It supports a wide variety of languages, including C, and is able "
"to fill the needs of most complex build configurations."
msgstr ""
"``meson-python`` は、 Meson_ ビルドシステムを使うビルドバックエンドです。これ"
"によって、 Python パッケージの作者が自分のパッケージ向けに Meson_ をビルドシ"
"ステムとして使うことを可能にします。これは C 言語を含む広範囲の言語をサポート"
"しており、最も複雑なビルド設定を記述することが可能になります。"

#: ../source/key_projects.rst:544
msgid "multibuild"
msgstr "multibuild"

#: ../source/key_projects.rst:546
msgid "`GitHub <https://github.com/multi-build/multibuild>`__"
msgstr "`GitHub <https://github.com/multi-build/multibuild>`__"

#: ../source/key_projects.rst:548
msgid ""
"Multibuild is a set of CI scripts for building and testing Python :term:"
"`wheels <Wheel>` for Linux, macOS, and (less flexibly) Windows. Also see :"
"ref:`cibuildwheel`."
msgstr ""
"Multibuild は、Linux ・ macOS 向けや (柔軟性は落ちるが) Windows 向けの "
"Python :term:`wheels <Wheel>` をビルドしテストする一揃いの CI スクリプトで"
"す。 :ref:`cibuildwheel` も見てください。"

#: ../source/key_projects.rst:554
msgid "nginx_pypi_cache"
msgstr "nginx_pypi_cache"

#: ../source/key_projects.rst:556
msgid ":gh:`GitHub <hauntsaninja/nginx_pypi_cache>`"
msgstr ":gh:`GitHub <hauntsaninja/nginx_pypi_cache>`"

#: ../source/key_projects.rst:558
msgid ""
"nginx_pypi_cache is a :term:`package index <Package Index>` caching proxy "
"using `nginx <https://nginx.org/en/>`_."
msgstr ""
"nginx_pypi_cache は、 `nginx <https://nginx.org/en/>`_ を用いた :term:`パッ"
"ケージインデックス <Package Index>` のキャッシュ機能付きプロクシです。"

#: ../source/key_projects.rst:564
msgid "pdm"
msgstr "pdm"

#: ../source/key_projects.rst:566
msgid ""
"`Docs <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-project/"
"pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"
msgstr ""
"`説明文書 <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-"
"project/pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"

#: ../source/key_projects.rst:570
msgid ""
"PDM is a modern Python package manager. It uses :term:`pyproject.toml` to "
"store project metadata as defined in :pep:`621`."
msgstr ""
"PDM は近代的な Python パッケージ管理ソフトです。 :pep:`621` で定義されている"
"形でプロジェクトのメタデータを :term:`pyproject.toml` に保存します。"

#: ../source/key_projects.rst:578
msgid ""
"`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""
"`説明文書 <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"

#: ../source/key_projects.rst:582
msgid ""
"Pex is a tool for generating :file:`.pex` (Python EXecutable) files, "
"standalone Python environments in the spirit of :ref:`virtualenv`. PEX files "
"are :doc:`zipapps <python:library/zipapp>` that make deployment of Python "
"applications as simple as ``cp``. A single PEX file can support multiple "
"target platforms and can be created from standard :ref:`pip`-resolvable "
"requirements, a lockfile generated with ``pex3 lock ...`` or even another "
"PEX. PEX files can optionally have tools embedded that support turning the "
"PEX file into a standard venv, graphing dependencies and more."
msgstr ""
"Pex は、 :ref:`virtualenv` を使った独立した Python 環境をに表現した :file:`."
"pex` (Python EXecutable) ファイルを生成するためのツールです。 PEX ファイル"
"は、 ``cp`` のような単純な Python アプリケーションをデプロイする :doc:"
"`zipapps <python:library/zipapp>` です。単独の PEX ファイルで複数のターゲット"
"プラットフォームをサポートすることができ、標準の :ref:`pip` で解決できる要求"
"事項、つまり ``pex3 lock ...`` で生成されるロックファイルや別の PEX からで"
"あっても作成することができます。 PEX ファイルは、オプションとして PEX ファイ"
"ルを標準の venv に変換したり依存関係をグラフ化したり、あるいはもっと多くをサ"
"ポートするツールを内蔵することもできます。"

#: ../source/key_projects.rst:594
msgid "pip-tools"
msgstr "pip-tools"

#: ../source/key_projects.rst:596
msgid ""
"`Docs <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-"
"tools/>`__"
msgstr ""
"`説明文書 <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/"
"project/pip-tools/>`__"

#: ../source/key_projects.rst:600
msgid ""
"pip-tools is a suite of tools meant for Python system administrators and "
"release managers who particularly want to keep their builds deterministic "
"yet stay up to date with new versions of their dependencies. Users can "
"specify particular release of their dependencies via hash, conveniently make "
"a properly formatted list of requirements from information in other parts of "
"their program, update all dependencies (a feature :ref:`pip` currently does "
"not provide), and create layers of constraints for the program to obey."
msgstr ""
"pip-tools は、Python システムの管理者やリリースマネージャで、特にビルドが必ず"
"できるように保ちたいけれども依存先の新バージョンに追随して最新の状態にもして"
"おきたいという人々のための一揃いのツール群です。ユーザはハッシュ値を与えるこ"
"とで依存先の特定のリリースを指定することや、そのプログラムの他の部分にある情"
"報から適切な書式の requirements を簡単に作成すること、すべての依存先を更新す"
"ること (これは現時点の :ref:`pip` にはない機能です) 、プログラムが従うべき制"
"約条件の層を作成することができます。"

#: ../source/key_projects.rst:612
msgid "pip2pi"
msgstr "pip2pi"

#: ../source/key_projects.rst:614
msgid ""
":gh:`GitHub <wolever/pip2pi>` | `PyPI <https://pypi.org/project/pip2pi/>`__"
msgstr ""
":gh:`GitHub <wolever/pip2pi>` | `PyPI <https://pypi.org/project/pip2pi/>`__"

#: ../source/key_projects.rst:617
msgid ""
"pip2pi is a :term:`package index <Package Index>` server where specific "
"packages are manually synchronised."
msgstr ""
"pip2pi は、特定のパッケージ群が手動で同期される :term:`パッケージインデック"
"ス <Package Index>` です。"

#: ../source/key_projects.rst:623
msgid "piwheels"
msgstr "piwheels"

#: ../source/key_projects.rst:625
msgid ""
"`Website <https://www.piwheels.org/>`__ | :doc:`Docs <piwheels:index>` | "
"`GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""
"`Web サイト <https://www.piwheels.org/>`__ | :doc:`説明文書 <piwheels:"
"index>` | `GitHub <https://github.com/piwheels/piwheels/>`__"

#: ../source/key_projects.rst:629
msgid ""
"piwheels is a website, and software underpinning it, that fetches source "
"code distribution packages from PyPI and compiles them into binary wheels "
"that are optimized for installation onto Raspberry Pi computers. Raspberry "
"Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""
"piwheels は、ソースコード配布物パッケージを PyPI から取得して Raspberry Pi 計"
"算機へのインストールに最適化されたバイナリ wheel ファイルにコンパイルするよう"
"な Web サイトであり、それを支えるソフトウェアです。 Raspberry Pi OS では、 "
"pip が PyPI に加えて piwheel.org を追加のインデックスとして使うように予め設定"
"されています。"

#: ../source/key_projects.rst:638
msgid "poetry"
msgstr "poetry"

#: ../source/key_projects.rst:640
msgid ""
"`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-"
"poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""
"`説明文書 <https://python-poetry.org/>`__ | `GitHub <https://github.com/"
"python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"

#: ../source/key_projects.rst:644
msgid ""
"poetry is a command-line tool to handle dependency installation and "
"isolation as well as building and packaging of Python packages. It uses "
"``pyproject.toml`` and, instead of depending on the resolver functionality "
"within :ref:`pip`, provides its own dependency resolver. It attempts to "
"speed users' experience of installation and dependency resolution by locally "
"caching metadata about dependencies."
msgstr ""
"poetry は、 Python パッケージのビルドやパッケージングに加えて、依存先のインス"
"トールや隔離を取り扱うコマンドラインのツールです。 :ref:`pip` に含まれる解決"
"機能に依存する代わりに ``pyproject.toml`` を使って自分自身の依存関係解決機能"
"を提供します。依存関係に関するメタデータをローカルにキャッシュすることでイン"
"ストールや依存関係解決のユーザ体験を高速化しようとしています。"

#: ../source/key_projects.rst:654
msgid "proxpi"
msgstr "proxpi"

#: ../source/key_projects.rst:656
msgid ""
":gh:`GitHub <EpicWink/proxpi>` | `PyPI <https://pypi.org/project/proxpi/>`__"
msgstr ""
":gh:`GitHub <EpicWink/proxpi>` | `PyPI <https://pypi.org/project/proxpi/>`__"

#: ../source/key_projects.rst:659
msgid ""
"proxpi is a simple :term:`package index <Package Index>` which proxies PyPI "
"and other indexes with caching."
msgstr ""
"proxpi は、PyPI や他のインデックスをキャッシュ付きでプロクシする単純な :term:"
"`パッケージインデックス <Package Index>` です。"

#: ../source/key_projects.rst:665
msgid "Pulp-python"
msgstr "Pulp-python"

#: ../source/key_projects.rst:667
msgid ""
"`Docs <https://docs.pulpproject.org/pulp_python/>`__ | :gh:`GitHub <pulp/"
"pulp_python>` | `PyPI <https://pypi.org/project/pulp-python/>`__"
msgstr ""
"`説明文書 <https://docs.pulpproject.org/pulp_python/>`__ | :gh:`GitHub <pulp/"
"pulp_python>` | `PyPI <https://pypi.org/project/pulp-python/>`__"

#: ../source/key_projects.rst:671
msgid ""
"Pulp-python is the Python :term:`package index <Package Index>` plugin for "
"`Pulp <https://pulpproject.org/>`_. Pulp-python supports mirrors backed by "
"local or `AWS S3`_, package upload, and proxying to multiple package indexes."
msgstr ""
"Pulp-python は、 `Pulp <https://pulpproject.org/>` 向けの Python :term:`パッ"
"ケージインデックス <Package Index>` プラグインです。 Pulp-python は、ローカル"
"か `AWS S3`_ にファイルを置くミラー機能や、複数のパッケージインデックスへのプ"
"ロクシ機能をサポートします。"

#: ../source/key_projects.rst:679
msgid "PyPI Cloud"
msgstr "PyPI クラウド"

#: ../source/key_projects.rst:681
msgid ""
"`Docs <https://pypicloud.readthedocs.io/>`__ | :gh:`GitHub <stevearc/"
"pypicloud>` | `PyPI <https://pypi.org/project/pypicloud/>`__"
msgstr ""
"`説明文書 <https://pypicloud.readthedocs.io/>`__ | :gh:`GitHub <stevearc/"
"pypicloud>` | `PyPI <https://pypi.org/project/pypicloud/>`__"

#: ../source/key_projects.rst:687
msgid ""
"PyPI Cloud is a :term:`package index <Package Index>` server, backed by `AWS "
"S3`_ or another cloud storage service, or local files. PyPI Cloud supports "
"redirect/cached proxying for PyPI, as well as authentication and "
"authorisation."
msgstr ""
"PyPI クラウドは、`AWS S3`_ や他のクラウドストレージサービス、あるいはローカル"
"のファイル群で裏打ちされた :term:`パッケージインデックス <Package Index>` で"
"す。PyPI クラウドは、認証や認可と同様に PyPI に対するリダイレクト機能やプロク"
"シ機能をサポートします。"

#: ../source/key_projects.rst:695
msgid "pypiprivate"
msgstr "pypiprivate"

#: ../source/key_projects.rst:697
msgid ""
":gh:`GitHub <helpshift/pypiprivate>` | `PyPI <https://pypi.org/project/"
"pypiprivate/>`__"
msgstr ""
":gh:`GitHub <helpshift/pypiprivate>` | `PyPI <https://pypi.org/project/"
"pypiprivate/>`__"

#: ../source/key_projects.rst:700
msgid ""
"pypiprivate serves a local (or `AWS S3`_-hosted) directory of packages as a :"
"term:`package index <Package Index>`."
msgstr ""
"pypiprivate は、 :term:`パッケージインデックス <Package Index>` としてローカ"
"ルの (または `AWS S3`_ でホストされた) パッケージディレクトリを提供します。"

#: ../source/key_projects.rst:706
msgid "pypiserver"
msgstr "pypiserver"

#: ../source/key_projects.rst:708
msgid ""
"`GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi."
"org/project/pypiserver/>`__"
msgstr ""
"`GitHub <https://github.com/pypiserver/pypiserver/>`__ | `PyPI <https://pypi."
"org/project/pypiserver/>`__"

#: ../source/key_projects.rst:711
msgid ""
"pypiserver is a minimalist application that serves as a private Python :term:"
"`package index <Package Index>` (from a local directory) within "
"organizations, implementing a simple API and browser interface. You can "
"upload private packages using standard upload tools, and users can download "
"and install them with :ref:`pip`, without publishing them publicly. "
"Organizations who use pypiserver usually download packages both from "
"pypiserver and from PyPI."
msgstr ""
"pypiserver は、単純な API とブラウザ向けのインタフェイスだけを実装した (ロー"
"カルディレクトリ上の) 組織内部向けプライベート Python :term:`パッケージイン"
"デックス <Package Index>` として振る舞う「小さいことは良いことだ」主義者のア"
"プリケーションです。公衆向けに公開することなく標準のツールを使って外部非公開"
"のパッケージをアップロードすることもできますし、それを `pip` でダウンロード・"
"インストールすることもできます。 pypiserver を用いる組織では、通常は "
"pypiserver と PyPI の両方からパッケージをダウンロードします。"

#: ../source/key_projects.rst:722
msgid "PyScaffold"
msgstr "PyScaffold"

#: ../source/key_projects.rst:724
msgid ""
"`Docs <https://pyscaffold.org>`__ | `GitHub <https://github.com/pyscaffold/"
"pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"
msgstr ""
"`説明文書 <https://pyscaffold.org>`__ | `GitHub <https://github.com/"
"pyscaffold/pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"

#: ../source/key_projects.rst:728
msgid ""
"PyScaffold is a project generator for bootstrapping Python packages, ready "
"to be shared on PyPI and installable via :ref:`pip`. It relies on a set of "
"sane default configurations for established tools (such as :ref:"
"`setuptools`, pytest_ and Sphinx_) to provide a productive environment so "
"developers can start coding right away. PyScaffold can also be used with "
"existing projects to make packaging easier."
msgstr ""
"PyScaffold は、Python パッケージが PyPI で共有できて :ref:`pip` でインストー"
"ルできるように初期設定を行うプロジェクトジェネレータです。定評のあるツール (:"
"ref:`setuptools` や pytest_ や Sphinx_) 用に穏当なデフォルト設定を与えること"
"で、開発者がすぐにコードを書き始められるような生産的な環境を提供します。 "
"PyScaffold は、また、既存のプロジェクトにおいてもパッケージングをより簡単にす"
"るために使用することができます。"

#: ../source/key_projects.rst:739
msgid "pywharf"
msgstr "pywharf"

#: ../source/key_projects.rst:741
msgid ""
":gh:`GitHub <pywharf/pywharf>` | `PyPI <https://pypi.org/project/pywharf>`__"
msgstr ""
":gh:`GitHub <pywharf/pywharf>` | `PyPI <https://pypi.org/project/pywharf>`__"

#: ../source/key_projects.rst:746
msgid ""
"pywharf is a :term:`package index <Package Index>` server, serving files "
"locally or from `GitHub <https://github.com/>`_."
msgstr ""
"pywharf は、ローカルから、もしくは `GitHub <https://github.com/>`_ からファイ"
"ルを提供する :term:`パッケージインデックス <Package Index>` です。"

#: ../source/key_projects.rst:752
msgid "scikit-build"
msgstr "scikit-build"

#: ../source/key_projects.rst:754
msgid ""
"`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/"
"scikit-build>`__"
msgstr ""
"`説明文書 <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/"
"project/scikit-build>`__"

#: ../source/key_projects.rst:758
msgid ""
"Scikit-build is a :ref:`setuptools` wrapper for CPython that builds C/C++/"
"Fortran/Cython extensions It uses `cmake <https://pypi.org/project/cmake>`__ "
"(available on PyPI) to provide better support for additional compilers, "
"build systems, cross compilation, and locating dependencies and their "
"associated build requirements. To speed up and parallelize the build of "
"large projects, the user can install `ninja <https://pypi.org/project/"
"ninja>`__ (also available on PyPI)."
msgstr ""
"Scikit-build は、C/C++/Fortran/Cython で書かれた拡張をビルドする CPython のた"
"めの :ref:`setuptools` ラッパです。追加のコンパイラやビルドシステムやクロスコ"
"ンパイルに対するより良いサポートを提供するため、また、関連するビルドで要求さ"
"れるライブラリなど <build requirements> の位置を特定するために `cmake "
"<https://pypi.org/project/cmake>`__ (PyPI にあります) を使用します。大きなプ"
"ロジェクトのビルドの速度を増したり並列化したりするために、ユーザは `ninja "
"<https://pypi.org/project/ninja>`___ (これも PyPI にあります) をインストール"
"することができます。"

#: ../source/key_projects.rst:769
msgid "scikit-build-core"
msgstr "scikit-build-core"

#: ../source/key_projects.rst:771
msgid ""
"`Docs <https://scikit-build-core.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build-core/>`__ | `PyPI <https://"
"pypi.org/project/scikit-build-core>`__"
msgstr ""
"`説明文書 <https://scikit-build-core.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build-core/>`__ | `PyPI <https://"
"pypi.org/project/scikit-build-core>`__"

#: ../source/key_projects.rst:775
msgid ""
"Scikit-build-core is a build backend for CPython C/C++/Fortran/Cython "
"extensions.  It enables users to write extensions with `cmake <https://pypi."
"org/project/cmake>`__ (available on PyPI) to provide better support for "
"additional compilers, build systems, cross compilation, and locating "
"dependencies and their associated build requirements. CMake/Ninja are "
"automatically downloaded from PyPI if not available on the system."
msgstr ""
"Scikit-build-core は、CPython C/C++/Fortran/Cython による拡張モジュールのため"
"のビルドバックエンドです。追加のコンパイラやビルドシステムやクロスコンパイ"
"ル、また、依存関係とそれに付随するビルド時の要求事項を解決する点でより良いサ"
"ポートを提供するために、ユーザが `cmake <https://pypi.org/project/cmake>`__ "
"(PyPI から利用可能) を使って拡張を書くことができるようにします。 CMake/Ninja "
"は、もしシステム上に利用可能なものがなければ、 PyPI から自動的にダウンロード"
"されます。"

#: ../source/key_projects.rst:785
msgid "shiv"
msgstr "shiv"

#: ../source/key_projects.rst:787
msgid ""
"`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""
"`説明文書 <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"

#: ../source/key_projects.rst:791
msgid ""
"shiv is a command line utility for building fully self contained Python "
"zipapps as outlined in :pep:`441`, but with all their dependencies included. "
"Its primary goal is making distributing Python applications and command line "
"tools fast & easy."
msgstr ""
"shiv は、 :pep:`441` に概要が示されている完全自己完結型 Python zipapp である"
"が必要な依存先をすべて内包したものをビルドするためのコマンドラインユーティリ"
"ティです。このツールの第一の目標は、Python アプリケーションとコマンドライン"
"ツールを素早く簡便に配布できるようにすることです。"

#: ../source/key_projects.rst:799
msgid "simpleindex"
msgstr "simpleindex"

#: ../source/key_projects.rst:801
msgid ""
":gh:`GitHub <uranusjr/simpleindex>` | `PyPI <https://pypi.org/project/"
"simpleindex/>`__"
msgstr ""
":gh:`GitHub <uranusjr/simpleindex>` | `PyPI <https://pypi.org/project/"
"simpleindex/>`__"

#: ../source/key_projects.rst:804
msgid ""
"simpleindex is a :term:`package index <Package Index>` which routes URLs to "
"multiple package indexes (including PyPI), serves local (or cloud-hosted, "
"for example `AWS S3`_, with a custom plugin) directories of packages, and "
"supports custom plugins."
msgstr ""
"simple index は、 URL を (PyPI を含む) 複数のパッケージインデックスに振り分"
"け、ローカルの (または、カスタムプラグインを使って例えば `AWS S3`_ のようなク"
"ラウドにホストされた) パッケージディレクトリからファイルを提供し、カスタムプ"
"ラグインをサポートしている :term:`パッケージインデックス <Package Index>` で"
"す。"

#: ../source/key_projects.rst:814
msgid ""
":doc:`Docs <spack:index>` | `GitHub <https://github.com/spack/spack>`__ | "
"`Paper <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `Slides <https://tgamblin.github.io/files/"
"Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""
":doc:`説明文書 <spack:index>` | `GitHub <https://github.com/spack/spack>`__ "
"| `論文 <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `スライド <https://tgamblin.github.io/"
"files/Gamblin-Spack-SC15-Talk.pdf>`__"

#: ../source/key_projects.rst:819
msgid ""
"A flexible package manager designed to support multiple versions, "
"configurations, platforms, and compilers.  Spack is like Homebrew, but "
"packages are written in Python and parameterized to allow easy swapping of "
"compilers, library versions, build options, etc. Arbitrarily many versions "
"of packages can coexist on the same system. Spack was designed for rapidly "
"building high performance scientific applications on clusters and "
"supercomputers."
msgstr ""
"(spack は) 複数のバージョン・設定・プラットフォーム・コンパイラをサポートする"
"ように設計された自由度の高いパッケージマネージャです。 Spack は Homebrew に似"
"ていますが、Python で書かれていてコンパイラやライブラリのバージョン、ビルドオ"
"プションなどが簡単に入れ替えることができるようにパラメータ化されています。同"
"一のシステムの中に任意のバージョンのパッケージをいくつも同居させることができ"
"ます。 Spack は、元々はクラスタ構成のコンピュータ群やスーパーコンピュータの上"
"で科学分野の高パフォーマンスアプリケーションを素早くビルドするために設計され"
"ました。"

#: ../source/key_projects.rst:827
msgid ""
"Spack is not in PyPI (yet), but it requires no installation and can be used "
"immediately after cloning from GitHub."
msgstr ""
"Spack は (まだ) PyPI にありませんが、 GitHub からクローンした直後にインストー"
"ル作業なしで使用できます。"

#: ../source/key_projects.rst:833
msgid "zest.releaser"
msgstr "zest.releaser"

#: ../source/key_projects.rst:835
msgid ""
"`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/"
"zest.releaser/>`__"
msgstr ""
"`説明文書 <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi."
"org/project/zest.releaser/>`__"

#: ../source/key_projects.rst:839
msgid ""
"``zest.releaser`` is a Python package release tool providing an abstraction "
"layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to "
"automate incrementing package version numbers, updating changelogs, tagging "
"releases in source control, and uploading new packages to PyPI."
msgstr ""
"``zest.releaser`` は、 :ref:`twine` の上に抽象レイヤを提供する Python パッ"
"ケージのリリースツールです。 Python 開発者は ``zest.releaser`` を使ってパッ"
"ケージバージョンを増加させたり、変更履歴 (Changelog) を更新したり、ソースコー"
"ド管理の側でリリースタグを挿入したり、新しいパッケージを PyPI にアップロード"
"することを自動化することができます。"

#: ../source/key_projects.rst:846
msgid "Standard Library Projects"
msgstr "標準ライブラリ内のプロジェクト群"

#: ../source/key_projects.rst:851
msgid "ensurepip"
msgstr "ensurepip"

#: ../source/key_projects.rst:853
msgid ""
"`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues "
"<https://bugs.python.org/>`__"
msgstr ""
"`説明文書 <https://docs.python.org/3/library/ensurepip.html>`__ | `課題リス"
"ト <https://bugs.python.org/>`__"

#: ../source/key_projects.rst:856
msgid ""
"A package in the Python Standard Library that provides support for "
"bootstrapping :ref:`pip` into an existing Python installation or virtual "
"environment.  In most cases, end users won't use this module, but rather it "
"will be used during the build of the Python distribution."
msgstr ""
"このパッケージはPython の標準ライブラリ内のパッケージで、既存のインストール済"
"み Python 環境や仮想環境に :ref:`pip` を組み込むためのサポートを提供します。"
"ほとんどの場合にはエンドユーザがこのモジュールを使うことはなく、どちらかと言"
"えば Python 配布物のビルドの際に使われるでしょう。"

#: ../source/key_projects.rst:864
msgid "http.server"
msgstr "http.server"

#: ../source/key_projects.rst:866
msgid ""
":doc:`Docs <python:library/http.server>` | :gh:`Issues <python/cpython/"
"issues>`"
msgstr ""
":doc:`説明文書 <python:library/http.server>` | :gh:`課題リスト <python/"
"cpython/issues>`"

#: ../source/key_projects.rst:869
msgid ""
"A package and command-line interface which can host a directory as a "
"website, for example as a :term:`package index <Package Index>` (see :ref:"
"`Hosting your Own Simple Repository`)."
msgstr ""
"ウェブサイトとして、つまり例えば :term:`パッケージインデックス <Package "
"Index>` として、ディレクトリを扱うことができるパッケージとコマンドラインイン"
"タフェース (:ref:`自分用のシンプルなリポジトリをホストする <Hosting your Own "
"Simple Repository>` を参照してください) 。"

#: ../source/key_projects.rst:876
msgid "venv"
msgstr "venv"

#: ../source/key_projects.rst:878
msgid ""
"`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <https://"
"github.com/python/cpython/issues>`__"
msgstr ""
"`説明文書 <https://docs.python.org/3/library/venv.html>`__ | `課題リスト "
"<https://github.com/python/cpython/issues>`__"

#: ../source/key_projects.rst:881
msgid ""
"A package in the Python Standard Library (starting with Python 3.3) for "
"creating :term:`Virtual Environments <Virtual Environment>`.  For more "
"information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"(Python 3.3 から始まる) Python の標準ライブラリに存在する :term:`仮想環境 "
"<Virtual Environment>` を生成するためのパッケージ。更なる情報については :ref:"
"`仮想環境を作って使う <Creating and using Virtual Environments>` を見てくださ"
"い。"

#: ../source/news.rst:2
msgid "News"
msgstr "ニュース"

#: ../source/news.rst:4
msgid ""
"This document is not currently updated. Previously, the document highlighted "
"changes in Python packaging."
msgstr ""
"この文書は現在では更新されていません。以前は、Python パッケージングでの変更点"
"をハイライトしていました。"

#: ../source/news.rst:9
msgid "September 2019"
msgstr "2019年9月"

#: ../source/news.rst:10
msgid "Added a guide about publishing dists via GitHub Actions. (:pr:`647`)"
msgstr ""
"GitHub Actions を経由して配布物を公開するためのガイドを追加。 (:pr:`647`)"

#: ../source/news.rst:13
msgid "August 2019"
msgstr "2019年8月"

#: ../source/news.rst:14
msgid "Updated to use :file:`python3 -m` when installing pipx. (:pr:`631`)"
msgstr ""
"pipx をインストールする際に :file:`python3 -m` を使うように更新。 (:pr:`631`)"

#: ../source/news.rst:17
msgid "July 2019"
msgstr "2019年7月"

#: ../source/news.rst:18
msgid "Marked all PEP numbers with the :pep: role. (:pr:`629`)"
msgstr "すべての PEP 番号を :pep: 役割の形にした。 (:pr:`629`)"

#: ../source/news.rst:19
msgid "Upgraded Sphinx version and removed pypa.io intersphinx. (:pr:`625`)"
msgstr ""
"Sphinx のバージョンを上げ、papa.io の intersphinx を削除した。 (:pr:`625`)"

#: ../source/news.rst:20
msgid "Mentioned :file:`find_namespace_packages`. (:pr:`622`)"
msgstr ":file:`find_namespace_packages` に言及した。 (:pr:`622`)"

#: ../source/news.rst:21
msgid "Updated directory layout examples for consistency. (:pr:`611`)"
msgstr "一貫性確保のためにディレクトリ配置の例を更新した。 (:pr:`611`)"

#: ../source/news.rst:22
msgid "Updated Bandersnatch link to GitHub. (:pr:`623`)"
msgstr "Bandersnatch の GitHub へのリンクを更新した。 (:pr:`623`)"

#: ../source/news.rst:25
msgid "June 2019"
msgstr "2019年6月"

#: ../source/news.rst:26
msgid "Fixed some typos. (:pr:`620`)"
msgstr "いくつかの誤記を訂正した。 (:pr:`620`)"

#: ../source/news.rst:29
msgid "May 2019"
msgstr "2019年5月"

#: ../source/news.rst:30
msgid "Added :file:`python_requires` usage to packaging tutorial. (:pr:`613`)"
msgstr ""
":file:`python_requires` の使い方をパッケージングチュートリアルに追記した。 (:"
"pr:`613`)"

#: ../source/news.rst:31
msgid "Added a MANIFEST.in guide page. (:pr:`609`)"
msgstr "MANIFEST.in について説明するページを追加した。 (:pr:`609`)"

#: ../source/news.rst:34
msgid "April 2019"
msgstr "2019年4月"

#: ../source/news.rst:35
msgid ""
"Added a mention for :file:`shiv` in the key projects section. (:pr:`608`)"
msgstr ""
":file:`shiv` への言及を嗅ぎとなるプロジェクト群の節に追加した。 (:pr:`608`)"

#: ../source/news.rst:36
msgid "Reduced emphasis on virtualenv. (:pr:`606`)"
msgstr "virtualenv に関する強調を減少させた。 (:pr:`606`)"

#: ../source/news.rst:39
msgid "March 2019"
msgstr "2019年3月"

#: ../source/news.rst:40
msgid "Moved single-sourcing guide version option to Python 3. (:pr:`605`)"
msgstr ""
"「パッケージのバージョンを１箇所で管理する」の項を Python 3 側に移した。 (:"
"pr:`605`)"

#: ../source/news.rst:41
msgid "Covered RTD details for contributing. (:pr:`600`)"
msgstr "RTD の詳細について貢献方法のところでカバーした。 (:pr:`600`)"

#: ../source/news.rst:44
msgid "February 2019"
msgstr "2019年2月"

#: ../source/news.rst:45
msgid ""
"Elaborate upon the differences between the tutorial and the real packaging "
"process. (:pr:`602`)"
msgstr ""
"チュートリアルの内容と実際のパッケージングプロセスの間の差異について詳しく述"
"べた。 (:pr:`602`)"

#: ../source/news.rst:46
msgid "Added instructions to install Python CLI applications. (:pr:`594`)"
msgstr ""
"Python の CLI アプリケーションをインストールするための指示書きを追加した。 (:"
"pr:`594`)"

#: ../source/news.rst:49
msgid "January 2019"
msgstr "2019年1月"

#: ../source/news.rst:50
msgid "Added :file:`--no-deps` to the packaging tutorial. (:pr:`593`)"
msgstr ""
"パッケージングチュートリアルに :file:`--no-deps` を追加した。 (:pr:`593`)"

#: ../source/news.rst:51
msgid "Updated Sphinx and Nox. (:pr:`591`)"
msgstr "Sphinx と Nox について更新した。 (:pr:`591`)"

#: ../source/news.rst:52
msgid "Referenced Twine from Python3. (:pr:`581`)"
msgstr "Python 3 の項に Twine への言及を追加した。 (:pr:`581`)"

#: ../source/news.rst:55
msgid "December 2018"
msgstr "2018年12月"

#: ../source/news.rst:56
msgid "No programmers in the office!"
msgstr "事務所にプログラマが居ません！"

#: ../source/news.rst:59
msgid "November 2018"
msgstr "2018年11月"

#: ../source/news.rst:60
msgid "Removed landing page link to PyPI migration guide. (:pr:`575`)"
msgstr "PyPI 移行ガイドへのランディングページリンクを削除した。 (:pr:`575`)"

#: ../source/news.rst:61
msgid "Changed bumpversion to bump2version. (:pr:`572`)"
msgstr "bumpversion を bump2version に変更した。 (:pr:`572`)"

#: ../source/news.rst:62
msgid "Added single-sourcing package version example. (:pr:`573`)"
msgstr "パッケージバージョンの一元管理の例を追加した。 (:pr:`573`)"

#: ../source/news.rst:63
msgid "Added a guide for creating documentation. (:pr:`568`)"
msgstr "ドキュメント作成のためのガイドを追加した。 (:pr:`568`)"

#: ../source/news.rst:66
msgid "October 2018"
msgstr "2018年10月"

#: ../source/news.rst:67
msgid "Updated Nox package name. (:pr:`566`)"
msgstr "Nox パッケージの名称を更新した。 (:pr:`566`)"

#: ../source/news.rst:68
msgid "Mentioned Sphinx extensions in guides. (:pr:`562`)"
msgstr "ガイドの中で Sphinx 拡張について言及した。 (:pr:`562`)"

#: ../source/news.rst:71
msgid "September 2018"
msgstr "2018年9月"

#: ../source/news.rst:72
msgid "Added a section on checking RST markup. (:pr:`554`)"
msgstr "RST マークアップの検査に関する節を追加した。 (:pr:`554`)"

#: ../source/news.rst:73
msgid "Updated user installs page. (:pr:`558`)"
msgstr "ユーザによるインストールのページを更新した。 (:pr:`558`)"

#: ../source/news.rst:74
msgid "Updated Google BigQuery urls. (:pr:`556`)"
msgstr "Google BigQuery の url を更新した。 (:pr:`556`)"

#: ../source/news.rst:75
msgid "Replaced tar command with working command. (:pr:`552`)"
msgstr "tar コマンドについて動作するコマンドに置換した。 (:pr:`552`)"

#: ../source/news.rst:76
msgid ""
"Changed to double quotes in the pip install SomeProject==1.4. (:pr:`550`)"
msgstr ""
"pip インストールで SomeProject==1.4 と書くところをダブルクォーテーションマー"
"クに変更した。 (:pr:`550`)"

#: ../source/news.rst:79
msgid "August 2018"
msgstr "2018年8月"

#: ../source/news.rst:80
msgid "Removed the recommendation to store passwords in cleartext. (:pr:`546`)"
msgstr "パスワードを平文で保存することを推奨していたのを削除した。 (:pr:`546`)"

#: ../source/news.rst:81
msgid ""
"Moved the Overview to a task based lead in along with the others. (:pr:`540`)"
msgstr "他のものに加えて、概要をタスク別の見出しに移した。 (:pr:`540`)"

#: ../source/news.rst:82
msgid "Updated Python version supported by virtualenv. (:pr:`538`)"
msgstr "virtualenv がサポートする Python のバージョンを更新した。 (:pr:`538`)"

#: ../source/news.rst:83
msgid "Added outline/rough draft of new Overview page. (:pr:`519`)"
msgstr "新しい概要のページのあらまし/ラフな下書きを追加した。 (:pr:`519`)"

#: ../source/news.rst:86
msgid "July 2018"
msgstr "2018年7月"

#: ../source/news.rst:88
msgid "Improved binary extension docs. (:pr:`531`)"
msgstr "バイナリ拡張に関する説明文書を改善した。 (:pr:`531`)"

#: ../source/news.rst:89
msgid "Added scikit-build to key projects. (:pr:`530`)"
msgstr "scikit-build を主要プロジェクトに追加した。 (:pr:`530`)"

#: ../source/news.rst:92
msgid "June 2018"
msgstr "2018年6月"

#: ../source/news.rst:94
msgid "Fixed categories of interop PEP for pypa.io. (:pr:`527`)"
msgstr "pypa.io に関する相互運用性 PEP のカテゴリ分けを修正した。 (:pr:`527`)"

#: ../source/news.rst:95
msgid "Updated Markdown descriptions explanation. (:pr:`522`)"
msgstr "descriptions をマークダウンで書く場合の説明を更新した。 (:pr:`522`)"

#: ../source/news.rst:98
msgid "May 2018"
msgstr "2018年5月"

#: ../source/news.rst:100
msgid "Noted issues with Provides-Dist and Obsoletes-Dist. (:pr:`513`)"
msgstr "Provides-Diet と Obsolete-Diet の課題を注記した。 (:pr:`513`)"

#: ../source/news.rst:101
msgid ""
"Removed outdated warning about Python version mixing with Pipenv. (:pr:`501`)"
msgstr ""
"Pipenv で異なるバージョンの Python を使う場合の警告が古くなっていたので削除し"
"た。 (:pr:`501`)"

#: ../source/news.rst:102
msgid "Simplified packaging tutorial. (:pr:`498`)"
msgstr "パッケージングのチュートリアルを簡素にした。 (:pr:`498`)"

#: ../source/news.rst:103
msgid "Updated Windows users instructions for clarity. (:pr:`493`)"
msgstr "明確性のため、 Windows ユーザ向けの指示を更新した。 (:pr:`493`)"

#: ../source/news.rst:104
msgid "Updated the license section description for completeness. (:pr:`492`)"
msgstr "完全性のためにライセンスの節の記述を更新した。 (:pr:`492`)"

#: ../source/news.rst:105
msgid "Added specification-style document to contributing section. (:pr:`489`)"
msgstr "「貢献するには」の節に仕様のスタイルの記述を追加した。 (:pr:`489`)"

#: ../source/news.rst:106
msgid "Added documentation types to contributing guide. (:pr:`485`)"
msgstr "「貢献するには」ガイドにドキュメントのタイプを追記した。 (:pr:`485`)"

#: ../source/news.rst:109
msgid "April 2018"
msgstr "2018年4月"

#: ../source/news.rst:111
msgid "Added README guide. (:pr:`461`)"
msgstr "README ガイドを追加した。 (:pr:`461`)"

#: ../source/news.rst:112
msgid "Updated instructions and status for PyPI launch. (:pr:`475`)"
msgstr "PyPI の供用開始についてやり方と状態を更新した。 (:pr:`475`)"

#: ../source/news.rst:113
msgid "Added instructions for Warehouse. (:pr:`471`)"
msgstr "Warehouse についての指示を追加した。 (:pr:`471`)"

#: ../source/news.rst:114
msgid "Removed GPG references from publishing tutorial. (:pr:`466`)"
msgstr ""
"(パッケージを?) 公開するチュートリアルから GPG の参照情報を削除した。 (:pr:"
"`466`)"

#: ../source/news.rst:115
msgid "Added 'What’s in which Python 3.4–3.6?'. (:pr:`468`)"
msgstr "「Python 3.4-3.6 では何がどれに入ってる？」を追加した。 (:pr:`468`)"

#: ../source/news.rst:116
msgid "Added a guide for phasing out Python versions. (:pr:`459`)"
msgstr ""
"あるバージョンの Python を徐々に使わなくするガイドを追加した。 (:pr:`459`)"

#: ../source/news.rst:117
msgid "Made default Description-Content-Type variant GFM. (:pr:`462`)"
msgstr ""
"変種の GFM をデフォルトの Description-Content-Type とした。 (:pr:`462`)"

#: ../source/news.rst:120
msgid "March 2018"
msgstr "2018年3月"

#: ../source/news.rst:122
msgid "Updated \"installing scientific packages\". (:pr:`455`)"
msgstr "「科学計算分野のパッケージ群」を更新した。 (:pr:`455`)"

#: ../source/news.rst:123
msgid ""
"Added :file:`long_description_content_type` to follow PEP 556. (:pr:`457`)"
msgstr ""
"PEP 556 に従う :file:`long_description_content_type` を追加した。 (:pr:`457`)"

#: ../source/news.rst:124
msgid "Clarified a long description classifier on pypi.org. (:pr:`456`)"
msgstr ""
"pypi.org における long description 分類子について明確化した。 (:pr:`456`)"

#: ../source/news.rst:125
msgid "Updated Core Metadata spec to follow PEP 556. (:pr:`412`)"
msgstr "コアとなるメタデータ仕様が PEP 556 に従うように更新した。 (:pr:`412`)"

#: ../source/news.rst:128
msgid "February 2018"
msgstr "2018年2月"

#: ../source/news.rst:130
msgid ""
"Added python3-venv and python3-pip to Debian installation instructions. (:pr:"
"`445`)"
msgstr ""
"Debian でのインストール指示に python3-venv と python3-pip を追記した。 (:pr:"
"`445`)"

#: ../source/news.rst:131
msgid "Updated PyPI migration info. (:pr:`439`)"
msgstr "PyPI 移行情報を更新した。 (:pr:`439`)"

#: ../source/news.rst:132
msgid ""
"Added a warning about managing multiple versions with pipenv. (:pr:`430`)"
msgstr ""
"複数のバージョンの pipenv を取り扱う際の注意事項を追記した。 (:pr:`430`)"

#: ../source/news.rst:133
msgid "Added example of multiple emails to Core Metadata. (:pr:`429`)"
msgstr ""
"コアとなるメタデータの項に複数の電子メールアドレスの例を追加した。 (:pr:"
"`429`)"

#: ../source/news.rst:134
msgid "Added explanation of \"legacy\" in test.pypi.org/legacy. (:pr:`426`)"
msgstr "test.pypi.org/legacy に \"legacy\" の説明を加えた。 (:pr:`426`)"

#: ../source/news.rst:137
msgid "January 2018"
msgstr "2018年1月"

#: ../source/news.rst:139
msgid "Added a link to PyPI's list of classifiers. (:pr:`425`)"
msgstr "PyPI にある分類子のリストへのリンクを追加した。 (:pr:`425`)"

#: ../source/news.rst:140
msgid "Updated README.rst explanation. (:pr:`419`)"
msgstr "README.rst についての説明を更新した。 (:pr:`419`)"

#: ../source/news.rst:143
msgid "December 2017"
msgstr "2017年12月"

#: ../source/news.rst:145
msgid ""
"Replaced :file:`~` with :file:`$HOME` in guides and tutorials.  (:pr:`418`)"
msgstr ""
"ガイドやチュートリアルで :file:`~` を :file:`$HOME` に置き換えた。 (:pr:"
"`418`)"

#: ../source/news.rst:146
msgid "Noted which fields can be used with environment markers. (:pr:`416`)"
msgstr ""
"環境マーカとともにどのフィールドを使うことができるのかについて注記した。 (:"
"pr:`416`)"

#: ../source/news.rst:147
msgid "Updated Requires-Python section. (:pr:`414`)"
msgstr "Requires-Python の節を更新した。 (:pr:`414`)"

#: ../source/news.rst:148
msgid "Added news page. (:pr:`404`)"
msgstr "ニュースのページを追加した。 (:pr:`404`)"

#: ../source/news.rst:151
msgid "November 2017"
msgstr "2017年11月"

#: ../source/news.rst:153
msgid ""
"Introduced a new dependency management tutorial based on Pipenv. (:pr:`402`)"
msgstr ""
"Pipenv を基盤とした依存関係の管理に関するチュートリアルを新たに追加した。 (:"
"pr:`402`)"

#: ../source/news.rst:154
msgid ""
"Updated the *Single Sourcing Package Version* tutorial to reflect pip's "
"current strategy. (:pr:`400`)"
msgstr ""
"*パッケージバージョンの一元管理* のチュートリアルが pip の現在の戦略を反映す"
"るように更新した。 (:pr:`400`)"

#: ../source/news.rst:156
msgid ""
"Added documentation about the ``py_modules`` argument to ``setup``. (:pr:"
"`398`)"
msgstr ""
"``setup`` に対する ``py_modules`` 引数について説明を追加した。 (:pr:`398`)"

#: ../source/news.rst:157
msgid "Simplified the wording for the :file:`manifest.in` section. (:pr:`395`)"
msgstr ":file:`manifest.in` 節での用語を簡素化した。 (:pr:`395`)"

#: ../source/news.rst:160
msgid "October 2017"
msgstr "2017年10月"

#: ../source/news.rst:162
msgid ""
"Added a specification for the :file:`entry_points.txt` file. (:pr:`398`)"
msgstr ":file:`entry_points.txt` ファイルの仕様を追記した。 (:pr:`398`)"

#: ../source/news.rst:163
msgid ""
"Created a new guide for managing packages using ``pip`` and ``virtualenv``. "
"(:pr:`385`)"
msgstr ""
"``pip`` や ``virtualenv`` を用いてパッケージを管理するためのガイドを新設し"
"た。 (:pr:`385`)"

#: ../source/news.rst:164
msgid "Split the specifications page into multiple pages. (:pr:`386`)"
msgstr "仕様のページを複数ページに分割した。 (:pr:`386`)"

#: ../source/news.rst:167
msgid "September 2017"
msgstr "2017年9月"

#: ../source/news.rst:169
msgid ""
"Encouraged using ``readme_renderer`` to validate :file:`README.rst`. (:pr:"
"`379`)"
msgstr ""
":file:`README.rst` を検証するために ``readme_renderer`` を使用することを推奨"
"するようにした。 (:pr:`379`)"

#: ../source/news.rst:171
msgid "Recommended using the ``--user-base`` option. (:pr:`374`)"
msgstr "``--user-base`` オプションの使用を推奨するようにした。 (:pr:`374`)"

#: ../source/news.rst:174
msgid "August 2017"
msgstr "2017年8月"

#: ../source/news.rst:176
msgid ""
"Added a new, experimental tutorial on installing packages using ``Pipenv``. "
"(:pr:`369`)"
msgstr ""
"``Pipenv`` を用いてパッケージをインストールする方法について新たに試験的な"
"チュートリアルを追加した。 (:pr:`369`)"

#: ../source/news.rst:177
msgid "Added a new guide on how to use ``TestPyPI``. (:pr:`366`)"
msgstr "``TestPyPI`` を使う方法について新たにガイドを追加した。 (:pr:`366`)"

#: ../source/news.rst:178
msgid "Added :file:`pypi.org` as a term. (:pr:`365`)"
msgstr ":file:`pypi.org` を用語として追加した。 (:pr:`365`)"

#: ../source/news.rst:181
msgid "July 2017"
msgstr "2017年7月"

#: ../source/news.rst:183
msgid "Added ``flit`` to the key projects list. (:pr:`358`)"
msgstr "``flit`` を鍵となるプロジェクト群のリストに追加した。 (:pr:`358`)"

#: ../source/news.rst:184
msgid "Added ``enscons`` to the list of key projects. (:pr:`357`)"
msgstr "``enscons `` を鍵となるプロジェクト群のリストに追加した。 (:pr:`357`)"

#: ../source/news.rst:185
msgid ""
"Updated this guide's ``readme`` with instructions on how to build the guide "
"locally. (:pr:`356`)"
msgstr ""
"本ガイドの ``readme`` にローカル環境でこのガイドをビルドする方法を追加して更"
"新した。 (:pr:`356`)"

#: ../source/news.rst:186
msgid ""
"Made the new ``TestPyPI`` URL more visible, adding note to homepage about "
"pypi.org. (:pr:`354`)"
msgstr ""
"ホームページにpypi.org に関する注記を加えることで、新しい ``TestPyPI`` の "
"URL がより目立つようにした。 (:pr:`354`)"

#: ../source/news.rst:187
msgid ""
"Added a note about the removal of the explicit registration API. (:pr:`347`)"
msgstr "明示的な登録を行う API の削除について注記を追加した。 (:pr:`347`)"

#: ../source/news.rst:190
msgid "June 2017"
msgstr "2017年6月"

#: ../source/news.rst:192
msgid "Added a document on migrating uploads to :file:`PyPI.org`. (:pr:`339`)"
msgstr ""
":file:`PyPI.org` へのアップロード方法の変更について説明を追加した。 (:pr:"
"`339`)"

#: ../source/news.rst:193
msgid "Added documentation for ``python_requires``. (:pr:`338`)"
msgstr "``python_requires`` について説明を追加した。 (:pr:`338`)"

#: ../source/news.rst:194
msgid ""
"Added a note about PyPI migration in the *Tool Recommendations* tutorial. (:"
"pr:`335`)"
msgstr ""
"*推奨されるツール* のチュートリアル内で PyPI の移転に関する注記を追加した。 "
"(:pr:`335`)"

#: ../source/news.rst:195
msgid ""
"Added a note that :file:`manifest.in` does not affect wheels. (:pr:`332`)"
msgstr ""
":file:`manifest.in` が wheel には影響を与えないことを注記した。 (:pr:`332`)"

#: ../source/news.rst:196
msgid "Added a license section to the distributing guide. (:pr:`331`)"
msgstr "配布ガイドにライセンスの節を追加した。 (:pr:`331`)"

#: ../source/news.rst:197
msgid "Expanded the section on the ``name`` argument. (:pr:`329`)"
msgstr "``name`` 引数に関する節を拡充した。 (:pr:`329`)"

#: ../source/news.rst:198
msgid "Adjusted the landing page. (:pr:`327`, :pr:`326`, :pr:`324`)"
msgstr "ランディングページを調整した。 (:pr:`327`, :pr:`326`, :pr:`324`)"

#: ../source/news.rst:199
msgid "Updated to Sphinx 1.6.2. (:pr:`323`)"
msgstr "Sphinx 1.6.2 にバージョンを上げた。 (:pr:`323`)"

#: ../source/news.rst:200
msgid "Switched to the PyPA theme. (:pr:`305`)"
msgstr "PyPA のテーマに切り替えた。 (:pr:`305`)"

#: ../source/news.rst:201
msgid "Re-organized the documentation into the new structure. (:pr:`318`)"
msgstr "説明文書を新しい構造に再編成した。 (:pr:`318`)"

#: ../source/news.rst:204
msgid "May 2017"
msgstr "2017年5月"

#: ../source/news.rst:206
msgid ""
"Added documentation for the ``Description-Content-Type`` field. (:pr:`258`)"
msgstr "``Description-Content-Type`` 欄について説明を追加した。 (:pr:`258`)"

#: ../source/news.rst:207
msgid "Added contributor and style guide. (:pr:`307`)"
msgstr "貢献者向けのガイドとスタイルガイドを追加した。 (:pr:`307`)"

#: ../source/news.rst:208
msgid ""
"Documented ``pip`` and ``easy_install``'s differences for per-project "
"indexes. (:pr:`233`)"
msgstr ""
"プロジェクト単位の索引における ``pip`` と ``easy_install`` の差異について説明"
"した。 (:pr:`233`)"

#: ../source/news.rst:211
msgid "April 2017"
msgstr "2017年4月"

#: ../source/news.rst:213
msgid "Added travis configuration for testing pull requests. (:pr:`300`)"
msgstr "プルリクエストの試験のための travis 設定を追記した。 (:pr:`300`)"

#: ../source/news.rst:214
msgid ""
"Mentioned the requirement of the ``wheel`` package for creating wheels (:pr:"
"`299`)"
msgstr ""
"wheel ファイルを生成するための ``wheel`` パッケージへの要求条件に言及するよう"
"にした。 (:pr:`299`)"

#: ../source/news.rst:215
msgid ""
"Removed the ``twine register`` reference in the *Distributing Packages* "
"tutorial. (:pr:`271`)"
msgstr ""
"*パッケージを配布する* チュートリアルにおいて ``twine register`` への参照を削"
"除した。 (:pr:`271`)"

#: ../source/news.rst:216
msgid "Added a topic on plugin discovery. (:pr:`294`, :pr:`296`)"
msgstr "プラグインの検索に関する話題を追加した。 (:pr:`294`, :pr:`296`)"

#: ../source/news.rst:217
msgid "Added a topic on namespace packages. (:pr:`290`)"
msgstr "名前空間パッケージの話題を追加した。 (:pr:`290`)"

#: ../source/news.rst:218
msgid ""
"Added documentation explaining prominently how to install ``pip`` in ``/usr/"
"local``. (:pr:`230`)"
msgstr ""
"``pip`` を ``/usr/local`` にインストールする方法を目立つように説明する文書を"
"追加した。 (:pr:`230`)"

#: ../source/news.rst:219
msgid ""
"Updated development mode documentation to mention that order of local "
"packages matters. (:pr:`208`)"
msgstr ""
"開発モードの説明文書を更新して、ローカルパッケージの記入順に意味があることに"
"言及するようにした。 (:pr:`208`)"

#: ../source/news.rst:220
msgid ""
"Convert readthedocs link for their ``.org`` -> ``.io`` migration for hosted "
"projects (:pr:`239`)"
msgstr ""
"ホストしているプロジェクトのところで readthedocs の引っ越しに合わせてリンク"
"を ``.org`` から ``.io`` に変更した。 (:pr:`239`)"

#: ../source/news.rst:221
msgid ""
"Swapped order of :file:`setup.py` arguments for the upload command, as order "
"is significant. (:pr:`260`)"
msgstr ""
"順序が意味を持つので、アップロードコマンドの :file:`setup.py` の引数の順序を"
"入れ替えた。 (:pr:`260`)"

#: ../source/news.rst:223
msgid ""
"Explained how to install from unsupported sources using a helper "
"application. (:pr:`289`)"
msgstr ""
"サポートされていないソースからヘルパーアプリケーションを用いてインストールす"
"る方法について説明した。 (:pr:`289`)"

#: ../source/news.rst:227
msgid "March 2017"
msgstr "2017年3月"

#: ../source/news.rst:229
msgid "Covered ``manylinux1`` in *Platform Wheels*. (:pr:`283`)"
msgstr ""
"*プラットフォームWheels* の項で ``manylinux1`` をカバーした。 (:pr:`283`)"

#: ../source/news.rst:232
msgid "February 2017"
msgstr "2017年2月"

#: ../source/news.rst:234
msgid "Added :pep:`518`. (:pr:`281`)"
msgstr ":pep:`518` を追加した。 (:pr:`281`)"

#: ../source/overview.rst:3
msgid "Overview of Python Packaging"
msgstr "Python におけるパッケージングに関する概要"

#: ../source/overview.rst:7
msgid ""
"As a general-purpose programming language, Python is designed to be used in "
"many ways. You can build web sites or industrial robots or a game for your "
"friends to play, and much more, all using the same core technology."
msgstr ""
"汎用プログラミング言語として Python は数多くの用途に使えるように設計されてい"
"ます。ウェブサイト構築にも産業用ロボットにもあなたが友達と一緒に遊ぶゲームに"
"ももっと他の用途にも、同じコア技術が使えるのです。"

#: ../source/overview.rst:12
msgid ""
"Python's flexibility is why the first step in every Python project must be "
"to think about the project's audience and the corresponding environment "
"where the project will run. It might seem strange to think about packaging "
"before writing code, but this process does wonders for avoiding future "
"headaches."
msgstr ""
"Python は自由度が高いので、プロジェクトの利用者について、また、それに対応して"
"プロジェクトが動作するであろう環境について、すべての Python プロジェクトにお"
"いて最初に考えなければなりません。コードを書く前にパッケージングについて考え"
"ておくというのは奇妙に見えるかもしれませんが、この作業こそが将来の頭痛の種を"
"摘み取るという驚くべきことを起こすのです。"

#: ../source/overview.rst:18
msgid ""
"This overview provides a general-purpose decision tree for reasoning about "
"Python's plethora of packaging options. Read on to choose the best "
"technology for your next project."
msgstr ""
"この概要文書は、 Python の過剰とも言える多数のパッケージング手段からどれを選"
"択するかについての汎用の決定木を提供します。読み進めて、あなたの次のプロジェ"
"クトにとっての最適解を選んでください。"

#: ../source/overview.rst:23
msgid "Thinking about deployment"
msgstr "デプロイメントについて検討する"

#: ../source/overview.rst:25
msgid ""
"Packages exist to be installed (or *deployed*), so before you package "
"anything, you'll want to have some answers to the deployment questions below:"
msgstr ""
"パッケージはインストールされる(あるいは *配置* される)ために存在しているの"
"で、なにかをパッケージ化する前に次のような配置のための質問にいくらかの答えを"
"持っておきたいと思うでしょう:"

#: ../source/overview.rst:29
msgid ""
"Who are your software's users? Will your software be installed by other "
"developers doing software development, operations people in a datacenter, or "
"a less software-savvy group?"
msgstr ""
"あなたのソフトウェアのユーザはどんな人たちでしょうか？ソフトウェアを開発する"
"他の開発者たちがインストールするのでしょうか、データセンタでオペレーションを"
"する人々でしょうか、それとも、ソフトウェアを知り尽くしているとは言えないよう"
"な人たちでしょうか？"

#: ../source/overview.rst:32
msgid ""
"Is your software intended to run on servers, desktops, mobile clients "
"(phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""
"あなたのソフトウェアは、サーバ上で走らせることを想定していますか、それとも、"
"デスクトップ、モバイル端末 (携帯電話やタブレット端末等) 、あるいは、専用端末"
"に組み込む形で？"

#: ../source/overview.rst:34
msgid ""
"Is your software installed individually, or in large deployment batches?"
msgstr ""
"あなたのソフトウェアは、単独でインストールされるものですか、それとも、巨大な"
"デプロイメントバッチの一部として？"

#: ../source/overview.rst:36
msgid ""
"Packaging is all about target environment and deployment experience. There "
"are many answers to the questions above and each combination of "
"circumstances has its own solutions. With this information, the following "
"overview will guide you to the packaging technologies best suited to your "
"project."
msgstr ""
"パッケージングとは、インストール先となる環境と配置(デプロイ)経験に関わるすべ"
"てのことです。上に述べた質問には多くの回答があり、それぞれの事情の組み合わせ"
"ごとに解決策が存在します。この情報とともに、以下の概要説明の中で、あなたのプ"
"ロジェクトに最適なパッケージング技術についてご案内します。"

#: ../source/overview.rst:43
msgid "Packaging Python libraries and tools"
msgstr "Python のライブラリやツールをパッケージングする"

#: ../source/overview.rst:45
msgid ""
"You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are "
"just a few of the tools Python's ecosystem provides for distributing Python "
"code to developers, which you can read about in :doc:`guides/distributing-"
"packages-using-setuptools`."
msgstr ""
"PyPI や ``setup.py`` 、 ``wheel`` ファイルについて聞いたことがあるかもしれま"
"せん。これらは Python のソースコードを開発者に配布するための Python エコシス"
"テムのほんの一部で、これらについては :doc:`guides/distributing-packages-"
"using-setuptools` に説明があります。"

#: ../source/overview.rst:50
msgid ""
"The following approaches to packaging are meant for libraries and tools used "
"by technical audience in a development setting. If you're looking for ways "
"to package Python for a non-technical audience and/or a production setting, "
"skip ahead to :ref:`packaging-applications`."
msgstr ""
"パッケージングに関する以下のアプローチは、開発環境における技術に明るい聞き手"
"が用いるライブラリやツールを念頭に置いています。技術にあまり明るくない聞き手"
"向けに Python をパッケージする方法や、製品使用環境での方法を探している場合"
"は、 :ref:`アプリケーションをパッケージングする` まで飛ばしてください。"

#: ../source/overview.rst:56
msgid "Python modules"
msgstr "Python モジュール"

#: ../source/overview.rst:58
msgid ""
"A Python file, provided it only relies on the standard library, can be "
"redistributed and reused. You will also need to ensure it's written for the "
"right version of Python, and only relies on the standard library."
msgstr ""
"標準ライブラリだけに依存している Python のファイルは、再配布して再利用するこ"
"とができます。他には正しいバージョンの Python 用に書かれていることと、標準ラ"
"イブラリだけに依存していることを確実にしておけば良いでしょう。"

#: ../source/overview.rst:63
msgid ""
"This is great for sharing simple scripts and snippets between people who "
"both have compatible Python versions (such as via email, StackOverflow, or "
"GitHub gists). There are even some entire Python libraries that offer this "
"as an option, such as :doc:`bottle.py<bottle:tutorial>` and :doc:`boltons "
"<boltons:architecture>`."
msgstr ""
"この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python を"
"持っている人たちどうしで (電子メールや StackOverflow や GitHub gists などで) "
"共有するには優れた方法です。例えば :doc:`bottle.py <bottle:tutorial>` や :"
"doc:`boltons <boltons:architecture>` のように、 Python ライブラリ全体をこのや"
"り方で共有することをオプションの一つとして提供しているものさえあります。"

#: ../source/overview.rst:70
msgid ""
"However, this pattern won't scale for projects that consist of multiple "
"files, need additional libraries, or need a specific version of Python, "
"hence the options below."
msgstr ""
"しかしながら、複数のファイルで構成されるプロジェクトや追加のライブラリを必要"
"とするもの、また、特定バージョンの Python を必要とするものには適用できず、そ"
"の場合には下のようなやり方が選択肢になります。"

#: ../source/overview.rst:75
msgid "Python source distributions"
msgstr "Python ソースコード配布物"

#: ../source/overview.rst:77
msgid ""
"If your code consists of multiple Python files, it's usually organized into "
"a directory structure. Any directory containing Python files can comprise "
"an :term:`Import Package`."
msgstr ""
"あなたのソースコードが複数の Python ファイルでできているなら、ディレクトリ構"
"造の中に整理してあるのが普通です。 Python ファイルを置いてあるディレクトリな"
"らどれでも、 :term:`パッケージインポート <Import Package>` ができるはずです。"

#: ../source/overview.rst:81
msgid ""
"Because packages consist of multiple files, they are harder to distribute. "
"Most protocols support transferring only one file at a time (when was the "
"last time you clicked a link and it downloaded multiple files?). It's easier "
"to get incomplete transfers, and harder to guarantee code integrity at the "
"destination."
msgstr ""
"パッケージは複数のファイルで構成されるので、その配布がやや難しくなります。ほ"
"とんどのプロトコルではたった一個のファイルしか一度に送ることができません (リ"
"ンクをクリックしたら複数のファイルをダウンロードしたことあります？)。不完全な"
"転送になってしまうことは容易く、送り先でソースコードの完全性を保証することは"
"困難です。"

#: ../source/overview.rst:87
msgid ""
"So long as your code contains nothing but pure Python code, and you know "
"your deployment environment supports your version of Python, then you can "
"use Python's native packaging tools to create a *source* :term:`Distribution "
"Package`, or *sdist* for short."
msgstr ""
"あなたのソースコードが純粋な Python コード以外は何も含んでいない間は、そし"
"て、配置先の環境であなたが想定しているバージョンの Python が動作することを"
"知っていれば、 Python 由来のパッケージングツールを使って *ソースコード* :"
"term:`配布パッケージ <Distribution Package>` もしくは 短縮系で*sdist* を使え"
"ば良いでしょう。"

#: ../source/overview.rst:92
msgid ""
"Python's *sdists* are compressed archives (``.tar.gz`` files) containing one "
"or more packages or modules. If your code is pure-Python, and you only "
"depend on other Python packages, you can go to the :ref:`source-distribution-"
"format` specification to learn more."
msgstr ""
"Python の *sdists* は圧縮済みのアーカイブ (``.tar.gz`` ファイル) で、ひとつか"
"それ以上のパッケージないしモジュールを内包しています。もしあなたのソースコー"
"ドが純粋に Python だけで書かれていて、他の Python パッケージに依存しているだ"
"けなら、 :ref:`ソースコード配布物フォーマット <source-distribution-format>` "
"仕様を見ればもっと詳しく知ることができます。"

#: ../source/overview.rst:97
msgid ""
"If you rely on any non-Python code, or non-Python packages (such as `libxml2 "
"<https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi."
"org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi."
"org/project/numpy>`_), you will need to use the format detailed in the next "
"section, which also has many advantages for pure-Python libraries."
msgstr ""
"もし非 Python のソースコード、あるいは、非 Python のパッケージ (`lxml "
"<https://pypi.org/project/lxml/>`_ における `libxml2 <https://en.wikipedia."
"org/wiki/Libxml2>`_ や、`numpy <https://pypi.org/project/numpy>`_ における "
"BLAS ライブラリなど) に依存しているなら、純 Python で書かれたライブラリにとっ"
"ても多くの利点がある、次の節で詳細に説明されるフォーマットを使う必要があるで"
"しょう。"

#: ../source/overview.rst:104
msgid ""
"Python and PyPI support multiple distributions providing different "
"implementations of the same package. For instance the unmaintained-but-"
"seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL "
"package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an "
"actively-maintained fork of PIL!"
msgstr ""
"Python と PyPI は、同一のパッケージの異なる実装を提供する複数の配布物をサポー"
"トしています。例えば、もはや保守されてはいないが先駆的で重要な `PIL 配布物 "
"<https://pypi.org/project/PIL/>`_ が PIL パッケージを提供しているし、 PIL か"
"らフォークして今も活発に保守されている `Pillow <https://pypi.org/project/"
"Pillow/>`_ も同様です！"

#: ../source/overview.rst:111
msgid ""
"This Python packaging superpower makes it possible for Pillow to be a drop-"
"in replacement for PIL, just by changing your project's ``install_requires`` "
"or ``requirements.txt``."
msgstr ""
"この Python パッケージングの素晴らしいパワーで、あなたのプロジェクトの "
"``install_requires`` か ``requirements.txt`` を変更するだけで Pillow が PIL "
"に対して単純に入れ替えるだけで済む代替物になっているのです。"

#: ../source/overview.rst:116
msgid "Python binary distributions"
msgstr "Python バイナリ配布物"

#: ../source/overview.rst:118
msgid ""
"So much of Python's practical power comes from its ability to integrate with "
"the software ecosystem, in particular libraries written in C, C++, Fortran, "
"Rust, and other languages."
msgstr ""
"Python の実際的な力の多くは、ソフトウェアのエコシステム、とりわけ C ・ C++ "
"・ Fortran ・ Rust ・その他の言語で書かれたライブラリと統合できる能力からもた"
"らされます。"

#: ../source/overview.rst:122
msgid ""
"Not all developers have the right tools or experiences to build these "
"components written in these compiled languages, so Python created the :term:"
"`Wheel`, a package format designed to ship libraries with compiled "
"artifacts. In fact, Python's package installer, ``pip``, always prefers "
"wheels because installation is always faster, so even pure-Python packages "
"work better with wheels."
msgstr ""
"このようなコンパイルを必要とする言語で書かれた部品をビルドするのに適切なツー"
"ルや経験をすべての開発者が持っているわけではないので、ライブラリをコンパイル"
"済みの状態で出荷するように設計された :term:`Wheel` を Python は作りました。実"
"際に、 Python のパッケージインストーラである ``pip`` は、インストールが素早く"
"できるので常に wheel ファイルを選好するし、純 Python のパッケージでさえも "
"wheel ファイルの方がうまく動作します。"

#: ../source/overview.rst:129
msgid ""
"Binary distributions are best when they come with source distributions to "
"match. Even if you don't upload wheels of your code for every operating "
"system, by uploading the sdist, you're enabling users of other platforms to "
"still build it for themselves. Default to publishing both sdist and wheel "
"archives together, *unless* you're creating artifacts for a very specific "
"use case where you know the recipient only needs one or the other."
msgstr ""
"バイナリ配布物は、対応するソースコード配布物と一緒に配布されるのが最良です。 "
"あらゆるオペレーティングシステム用のソースコードの wheel ファイルをアップロー"
"ドしていないとしても、sdist をアップロードすることで他のプラットフォームの"
"ユーザたちがビルドすることができるかもしれません。あなたが極めて特殊なユース"
"ケース向けにプログラムを作成していて、受け取る人たちがいずれか一方しか必要と"
"しないことを熟知しているので *ない限り* 、 sdist と wheel の両方を一緒に公開"
"することをデフォルトにしてください。"

#: ../source/overview.rst:137
msgid ""
"Python and PyPI make it easy to upload both wheels and sdists together. Just "
"follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""
"Python と PyPI を使えば、wheel ファイルと sdist ファイルを一緒にアップロード"
"するのが簡単になります。 :doc:`tutoeials/packaging-projects` のチュートリアル"
"に従うだけです。"

#: ../source/overview.rst:145
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr "ツールやライブラリ向けの Python のパッケージング機能の概要。"

#: ../source/overview.rst:145
msgid ""
"Python's recommended built-in library and tool packaging technologies. "
"Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?"
"v=iLVNWfPWAC8>`_."
msgstr ""
"Python が推奨するライブラリやツールをパッケージングする技術。`パッケージング"
"の変遷 (2017) <https://www.youtube.com/watch?v=iLVNWfPWAC8>`_ から抜粋。"

#: ../source/overview.rst:152
msgid "Packaging Python applications"
msgstr "Python アプリケーションをパッケージングする"

#: ../source/overview.rst:154
msgid ""
"So far we've only discussed Python's native distribution tools. Based on our "
"introduction, you would be correct to infer these built-in approaches only "
"target environments which have Python, and an audience who knows how to "
"install Python packages."
msgstr ""
"ここまで、 Python に元々組み込まれている配布ツールについてだけ議論してきまし"
"た。この導入部分に基づいて、これらのビルトインされたアプローチが Python のあ"
"る環境だけを対象にしたもので、聞き手は Python パッケージのインストール方法を"
"知っているものと推測するのは正しいでしょう。"

#: ../source/overview.rst:159
msgid ""
"With the variety of operating systems, configurations, and people out there, "
"this assumption is only safe when targeting a developer audience."
msgstr ""
"多様なオペレーティングシステム・設定・そこに居る人々を想定すると、聞き手が開"
"発者である場合にだけこの仮定が正当であると言えます。"

#: ../source/overview.rst:163
msgid ""
"Python's native packaging is mostly built for distributing reusable code, "
"called libraries, between developers. You can piggyback **tools**, or basic "
"applications for developers, on top of Python's library packaging, using "
"technologies like :doc:`setuptools entry_points <setuptools:userguide/"
"entry_point>`."
msgstr ""
"Python に元々組み込まれているパッケージング機能は、ほとんどの場合には、開発者"
"間で再利用可能なソースコードや呼び出されるライブラリを配布するために作られて"
"います。 :doc:`setuptools のエントリポイント <setuptools:userguide/"
"entry_point>` のような技術を用いることで、 Python の packaging ライブラリの上"
"に構築されている **ツール類** や開発者向けの基本的なアプリケーションに便乗す"
"ることができます。"

#: ../source/overview.rst:169
msgid ""
"Libraries are building blocks, not complete applications. For distributing "
"applications, there's a whole new world of technologies out there."
msgstr ""
"ライブラリは部品であって完成したアプリケーションではありません。アプリケー"
"ションを配布するには、全く新しい技術の世界が広がっています。"

#: ../source/overview.rst:173
msgid ""
"The next few sections organize these application packaging options according "
"to their dependencies on the target environment, so you can choose the right "
"one for your project."
msgstr ""
"ここからのいくつかの節では、ターゲットとなる環境への依存関係に従ってこのよう"
"なアプリケーションをパッケージングする選択肢を整理し、あなたのプロジェクトに"
"最適なものを選択できるようにしましょう。"

#: ../source/overview.rst:178
msgid "Depending on a framework"
msgstr "フレームワークに依存する"

#: ../source/overview.rst:180
msgid ""
"Some types of Python applications, like web site backends and other network "
"services, are common enough that they have frameworks to enable their "
"development and packaging. Other types of applications, like dynamic web "
"frontends and mobile clients, are complex enough to target that a framework "
"becomes more than a convenience."
msgstr ""
"ウェブサイトのバックエンドやその他のネットワークサービスのような、いくつかの"
"種類の Python アプリケーションでは、その開発とパッケージングを可能にするフ"
"レームワークが存在することは極めてありふれたことです。動的ウェブのフロントエ"
"ンドやモバイルクライアントのような他の種類のアプリケーションはとても複雑で、"
"フレームワークが単に便利という以上の存在になっています。"

#: ../source/overview.rst:186
msgid ""
"In all these cases, it makes sense to work backwards, from the framework's "
"packaging and deployment story. Some frameworks include a deployment system "
"which wraps the technologies outlined in the rest of the guide. In these "
"cases, you'll want to defer to your framework's packaging guide for the "
"easiest and most reliable production experience."
msgstr ""
"これら全てのケースで、フレームワークのパッケージングと配置の物語から振り返っ"
"てみるのが妥当でしょう。いくつかのフレームワークは、このガイドの残りの部分で"
"概要を描き出す技術を内包する配置システムを含んでいます。このような場合には、"
"最も簡単で最も信頼できる製品レベルの経験を積むまで、あなたのフレームワークの"
"パッケージングガイドを延期しておきたくなるでしょう。"

#: ../source/overview.rst:192
msgid ""
"If you ever wonder how these platforms and frameworks work under the hood, "
"you can always read the sections beyond."
msgstr ""
"このようなプラットフォームやフレームワークが内部でどのように動作しているのか"
"と不思議に思うのであれば、いつでもその先の節を読めば良いでしょう。"

#: ../source/overview.rst:196
msgid "Service platforms"
msgstr "サービスプラットフォーム"

#: ../source/overview.rst:198
msgid ""
"If you're developing for a \"`Platform-as-a-Service <https://en.wikipedia."
"org/wiki/Platform_as_a_service>`_\" or \"PaaS\", you are going to want to "
"follow their respective packaging guides. These types of platforms take care "
"of packaging and deployment, as long as you follow their patterns. Most "
"software does not fit one of these templates, hence the existence of all the "
"other options below."
msgstr ""
"\"`Platform-as-a-Service <https://en.wikipedia.org/wiki/"
"Platform_as_a_service>`_\" もしくは \"PaaS\" 上で開発を行っているのであれば、"
"当該 PaaS のパッケージガイドに従う方が良いと思うようになることでしょう。この"
"ようなタイプのプラットフォームは、彼らの流儀に従っている限りはパッケージング"
"やデプロイメントの面倒を見てくれます。後述する他のすべてのオプションが存在す"
"るので、ほとんどのソフトウェアはこれらのテンプレートのひとつにはうまく合致し"
"ません。"

#: ../source/overview.rst:205
msgid ""
"If you're developing software that will be deployed to machines you own, "
"users' personal computers, or any other arrangement, read on."
msgstr ""
"自分の機材やユーザのパーソナルコンピュータやその他の機材に配置することを想定"
"するソフトウェアを開発しているのであれば、このまま読み進めてください。"

#: ../source/overview.rst:209
msgid "Web browsers and mobile applications"
msgstr "ウェブブラウザとモバイルアプリケーション"

#: ../source/overview.rst:211
msgid ""
"Python's steady advances are leading it into new spaces. These days you can "
"write a mobile app or web application frontend in Python. While the language "
"may be familiar, the packaging and deployment practices are brand new."
msgstr ""
"Python は着実に前進して新しい世界に突入しています。最近では、モバイルアプリや"
"ウェブアプリケーションのフロントエンドを Python で書くことができるようになっ"
"ています。言語自体には慣れていても、パッケージングや配置の実務は全く新しいも"
"のになっています。"

#: ../source/overview.rst:216
msgid ""
"If you're planning on releasing to these new frontiers, you'll want to check "
"out the following frameworks, and refer to their packaging guides:"
msgstr ""
"このような新しい未開拓分野でリリースを計画しているのであれば、以下のフレーム"
"ワークに興味が湧いて、それぞれのパッケージングガイドを参照したくなるかもしれ"
"ません。"

#: ../source/overview.rst:220
msgid "`Kivy <https://kivy.org/>`_"
msgstr ""

#: ../source/overview.rst:221
msgid "`Beeware <https://pybee.org/>`_"
msgstr "`Beeware <https://pybee.org/>`_"

#: ../source/overview.rst:222
msgid "`Brython <https://brython.info/>`_"
msgstr "`Brython <https://brython.info/>`_"

#: ../source/overview.rst:223
msgid "`Flexx <https://flexx.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../source/overview.rst:225
msgid ""
"If you are *not* interested in using a framework or platform, or just wonder "
"about some of the technologies and techniques utilized by the frameworks "
"above, continue reading below."
msgstr ""
"フレームワークやプラットフォームに興味がなければ、あるいは、上記のフレーム"
"ワークが利用している技術や手練手管について不思議に思うのであれば、このまま読"
"み進めてください。"

#: ../source/overview.rst:230
msgid "Depending on a pre-installed Python"
msgstr "インストール済みの Python に依存する"

#: ../source/overview.rst:232
msgid ""
"Pick an arbitrary computer, and depending on the context, there's a very "
"good chance Python is already installed. Included by default in most Linux "
"and Mac operating systems for many years now, you can reasonably depend on "
"Python preexisting in your data centers or on the personal machines of "
"developers and data scientists."
msgstr ""
"任意のコンピュータを選んだ時に、もちろんその環境にもよりますが、 Python が既"
"にインストールされている確率は相当に高いでしょう。 Linux や Mac オペレーティ"
"ングシステムではもう多年にわたってデフォルトでインストールされているので、"
"データセンタの機材や、開発者やデータ科学者の個人用の機材には Python が入って"
"いるものと思っても構わないでしょう。"

#: ../source/overview.rst:238
msgid "Technologies which support this model:"
msgstr "このモデルを支える技術:"

#: ../source/overview.rst:240
msgid ":gh:`PEX <pantsbuild/pex#user-content-pex>` (Python EXecutable)"
msgstr ":gh:`PEX <pantsbuild/pex#user-content-pex>` (Python EXecutable)"

#: ../source/overview.rst:241
msgid ""
":doc:`zipapp <python:library/zipapp>` (does not help manage dependencies, "
"requires Python 3.5+)"
msgstr ""
":doc:`zipapp <python:library/zipapp>` (依存関係を管理する助けにはならない。"
"Python 3.5+ が必要。)"

#: ../source/overview.rst:242
msgid ":gh:`shiv <linkedin/shiv#user-content-shiv>` (requires Python 3)"
msgstr ":gh:`shiv <linkedin/shiv#user-content-shiv>` (Python 3 が必要)"

#: ../source/overview.rst:244
msgid ""
"Of all the approaches here, depending on a pre-installed Python relies the "
"most on the target environment. Of course, this also makes for the smallest "
"package, as small as single-digit megabytes, or even kilobytes."
msgstr ""
"ここでのすべてのアプローチでは、ほとんどのインストール先となる環境にインス"
"トール済みの Python があるものと当てにしています。もちろん、これは、一桁メガ"
"バイト規模やさらにはキロバイト規模の最小のパッケージを作ることになります。"

#: ../source/overview.rst:249
msgid ""
"In general, decreasing the dependency on the target system increases the "
"size of our package, so the solutions here are roughly arranged by "
"increasing size of output."
msgstr ""
"一般に、インストール先の環境に対する依存を減少させるとパッケージ側のサイズは"
"大きくなるので、ここで述べる解決策は、おおまかに出力となるパッケージのサイズ"
"の増える順番に整理しています。"

#: ../source/overview.rst:256
msgid "Depending on a separate software distribution ecosystem"
msgstr "個別のソフトウェア配布エコシステムに依存する"

#: ../source/overview.rst:258
msgid ""
"For a long time many operating systems, including Mac and Windows, lacked "
"built-in package management. Only recently did these OSes gain so-called "
"\"app stores\", but even those focus on consumer applications and offer "
"little for developers."
msgstr ""
"長い間、Mac や Windows を含むさまざまなオペレーティングシステムは、組み込みの"
"パッケージ管理システムを欠いてきました。ごく最近になって、これらの OS にも所"
"謂「アプリストア (app stores)」が追加されましたが、しかし、まだ消費者向けのア"
"プリケーションを扱っているだけであり、開発者の役に立つものは少ないのが現状で"
"す。"

#: ../source/overview.rst:263
msgid ""
"Developers long sought remedies, and in this struggle, emerged with their "
"own package management solutions, such as `Homebrew <https://brew.sh/>`_. "
"The most relevant alternative for Python developers is a package ecosystem "
"called `Anaconda <https://en.wikipedia.org/wiki/"
"Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is "
"increasingly common in academic, analytical, and other data-oriented "
"environments, even making its way `into server-oriented environments "
"<https://web.archive.org/web/20190403064038/https://www.paypal-engineering."
"com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""
"長い間、開発者が解決方法を探し求めてきており、この格闘の中から `Homebrew "
"<https://brew.sh/>`_ のような独自のパッケージ管理手法が勃興した。 Python 開発"
"者にとっての最も適切な代替方法は、 `Anaconda <https://en.wikipedia.org/wiki/"
"Anaconda_(Python_distribution)>`_ と呼ばれるパッケージエコシステムです。 "
"Anaconda は Python を中核として作成されており、学術や分析やデータ主導の環境で"
"より一層一般的になってきていて、`サーバ中心の環境に <https://web.archive.org/"
"web/20190403064038/https://www.paypal-engineering.com/2016/09/07/python-"
"packaging-at-paypal/>`_ さえ入り込んでいます。"

#: ../source/overview.rst:273
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr "Anaconda エコシステム向けにビルドし公開するための指示書き:"

#: ../source/overview.rst:275
msgid ""
"`Building libraries and applications with conda <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"
msgstr ""
"`conda でライブラリやアプリケーションをビルドする <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"

#: ../source/overview.rst:276
msgid ""
"`Transitioning a native Python package to Anaconda <https://conda.io/"
"projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton."
"html>`_"
msgstr ""
"`Python 由来のパッケージを Anaconda へ移行する <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`_"

#: ../source/overview.rst:278
msgid ""
"A similar model involves installing an alternative Python distribution, but "
"does not support arbitrary operating system-level packages:"
msgstr ""
"よく似たモデルが Python 配布物の代替物をインストールする際にも適用されます"
"が、オペレーティングシステムレベルのパッケージはサポートしていません。"

#: ../source/overview.rst:282
msgid ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"
msgstr ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"

#: ../source/overview.rst:283
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr "`WinPython <http://winpython.github.io/>`_"

#: ../source/overview.rst:288
msgid "Bringing your own Python executable"
msgstr "自分の Python 実行形式を持ち込む"

#: ../source/overview.rst:290
msgid ""
"Computing as we know it is defined by the ability to execute programs. Every "
"operating system natively supports one or more formats of programs they can "
"natively execute."
msgstr ""
"我々が知るところのコンピューティングは、プログラムを実行する能力として定義さ"
"れます。それぞれのオペレーティングシステムは、そのまま実行することが可能なひ"
"とつかもっと多くのプログラムフォーマットを元々サポートしています。"

#: ../source/overview.rst:294
msgid ""
"There are many techniques and technologies which turn your Python program "
"into one of these formats, most of which involve embedding the Python "
"interpreter and any other dependencies into a single executable file."
msgstr ""
"そのようなフォーマットにあなたの Python プログラムを変換する数多くの手練手管"
"や技術が存在していて、そのほとんどでは Python インタープリタやその他の依存先"
"を単一の実行形式のファイルに組み込むことになるでしょう。"

#: ../source/overview.rst:299
msgid ""
"This approach, called *freezing*, offers wide compatibility and seamless "
"user experience, though often requires multiple technologies, and a good "
"amount of effort."
msgstr ""
"*フリージング* と呼ばれるこの方法論は、しばしば複数の技術と共にかなりの努力を"
"要求しますが、幅広い互換性と継ぎ目のないユーザ経験を提供します。"

#: ../source/overview.rst:303
msgid "A selection of Python freezers:"
msgstr "Python フリーザの選択肢:"

#: ../source/overview.rst:305
msgid ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ - Cross-"
"platform"
msgstr ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ - クロスプラッ"
"トフォーム"

#: ../source/overview.rst:306
msgid ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - クロスプラット"
"フォーム"

#: ../source/overview.rst:307
msgid ""
"`constructor <https://github.com/conda/constructor>`_ - For command-line "
"installers"
msgstr ""
"`constructor <https://github.com/conda/constructor>`_ - コマンドラインインス"
"トーラ向け"

#: ../source/overview.rst:308
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr "`py2exe <http://www.py2exe.org/>`_ - Windows 限定"

#: ../source/overview.rst:309
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac 限定"

#: ../source/overview.rst:310
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr "`osnap <https://github.com/jamesabel/osnap>`_ - Windows と Mac"

#: ../source/overview.rst:311
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows 限定"

#: ../source/overview.rst:313
msgid ""
"Most of the above imply single-user deployments. For multi-component server "
"applications, see :gh:`Chef Omnibus <chef/omnibus#user-content--omnibus>`."
msgstr ""
"上記のものはほとんどが単独のユーザでの配置です。複数部分から構成されるサーバ"
"アプリケーション向けには :gh:`Chef Omnibus <chef/omnibus#user-content--"
"omnibus>` を見てください。"

#: ../source/overview.rst:319
msgid "Bringing your own userspace"
msgstr "自分自身のユーザスペースを持ち込む"

#: ../source/overview.rst:321
msgid ""
"An increasing number of operating systems -- including Linux, Mac OS, and "
"Windows -- can be set up to run applications packaged as lightweight images, "
"using a relatively modern arrangement often referred to as `operating-system-"
"level virtualization <https://en.wikipedia.org/wiki/Operating-system-"
"level_virtualization>`_, or *containerization*."
msgstr ""
"オペレーティングシステム -- Linux や Mac OS や Windows を含む -- で、しばし"
"ば `オペレーティングシステムレベルの仮想化 <https://en.wikipedia.org/wiki/"
"Operating-system-level_virtualization>`_ もしくは *コンテナ化* として参照され"
"る相対的に新しい手法を用いた、軽量のイメージとしてパッケージされたアプリケー"
"ションを走らせるように設定することができるものが数を増しています。"

#: ../source/overview.rst:328
msgid ""
"These techniques are mostly Python agnostic, because they package whole OS "
"filesystems, not just Python or Python packages."
msgstr ""
"このような手法は Python 単体もしくは Python パッケージではなく OS のファイル"
"システム全体をパッケージ化するので、ほとんどの場合には Python を直接にサポー"
"トしているわけではありません。"

#: ../source/overview.rst:331
msgid ""
"Adoption is most extensive among Linux servers, where the technology "
"originated and where the technologies below work best:"
msgstr ""
"(訳注、このような技術の) 取り入れが最も広範囲に渡るのは、この技術の発祥の地で"
"あり下に述べる技術が最もうまく動作する Linux サーバです:"

#: ../source/overview.rst:334
msgid "`AppImage <https://appimage.org/>`_"
msgstr "`AppImage <https://appimage.org/>`_"

#: ../source/overview.rst:335
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr "`Docker <https://www.fullstackpython.com/docker.html>`_"

#: ../source/overview.rst:336
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr "`Flatpak <https://flatpak.org/>`_"

#: ../source/overview.rst:337
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr "`Snapcraft <https://snapcraft.io/>`_"

#: ../source/overview.rst:340
msgid "Bringing your own kernel"
msgstr "自分自身のカーネルを持ち込む"

#: ../source/overview.rst:342
msgid ""
"Most operating systems support some form of classical virtualization, "
"running applications packaged as images containing a full operating system "
"of their own. Running these virtual machines, or VMs, is a mature approach, "
"widespread in data center environments."
msgstr ""
"ほとんどのオペレーティングシステムでは、何らかの形であるオペレーティングシス"
"テム全体を内包するイメージの形にパッケージされたアプリケーションを動作させる"
"ことができるような、古典的な仮想化がサポートされています。このような仮想マシ"
"ンもしくは VM を動作させることは枯れた方法論で、データセンタ環境に広く普及し"
"ています。"

#: ../source/overview.rst:347
msgid ""
"These techniques are mostly reserved for larger scale deployments in data "
"centers, though certain complex applications can benefit from this "
"packaging. The technologies are Python agnostic, and include:"
msgstr ""
"複雑なアプリケーションの中にはこのパッケージング方法から利益を得るものもあり"
"ますが、このような手法はたいていの場合はデータセンタにおけるかなり大規模な配"
"置のために使用します。技術としては Python を直接サポートしているわけではな"
"く、次のものを含みます:"

#: ../source/overview.rst:351
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr "`Vagrant <https://www.vagrantup.com/>`_"

#: ../source/overview.rst:352
msgid ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_, and :doc:`other formats "
"<openstack:user/formats>`"
msgstr ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_ や `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_ や :doc:`他のフォーマット "
"<openstack:user/formats>`"

#: ../source/overview.rst:353
msgid ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud "
"management system in Python, with extensive VM support"
msgstr ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - 大規模な VM サ"
"ポート機能がついていて Python で書かれたクラウド管理システム"

#: ../source/overview.rst:356
msgid "Bringing your own hardware"
msgstr "自分自身のハードウェアを持ち込む"

#: ../source/overview.rst:358
msgid ""
"The most all-encompassing way to ship your software would be to ship it "
"already-installed on some hardware. This way, your software's user would "
"require only electricity."
msgstr ""
"最もすべてを包含した方法は、あなたのソフトウェアを何らかのハードウェア上にイ"
"ンストールして出荷することです。この方法では、あなたのソフトウェアのユーザは"
"電力供給しか要求されません。"

#: ../source/overview.rst:362
msgid ""
"Whereas the virtual machines described above are primarily reserved for the "
"tech-savvy, you can find hardware appliances being used by everyone from the "
"most advanced data centers to the youngest children."
msgstr ""
"上で述べた仮想マシンがもっぱら技術に明るい人向けであるのに対し、ハードウェア"
"によるアプライアンス機器は最先端のデータセンタから最も若い子供たちまでの誰に"
"でも使えます。"

#: ../source/overview.rst:366
msgid ""
"Embed your code on an :gh:`Adafruit <adafruit/circuitpython>`, `MicroPython "
"<https://micropython.org/>`_, or more-powerful hardware running Python, then "
"ship it to the datacenter or your users' homes. They plug and play, and you "
"can call it a day."
msgstr ""
":gh:`Adafruit <adafruit/circuitpython>` や `MicroPython <https://micropython."
"org/>`_ 、あるいは、もっとパワーのあるハードウェアで Python が動作するものに"
"あなたのプログラムを組み込んで、データセンタやあなたのユーザの家に出荷しま"
"しょう。彼らはプラグアンドプレイで使うし、あなたはその日の仕事を終わりにでき"
"るでしょう。"

#: ../source/overview.rst:375
msgid "A summary of technologies used to package Python applications."
msgstr "Python アプリケーションをパッケージするのに使われる技術の概要。"

#: ../source/overview.rst:375
msgid ""
"The simplified gamut of technologies used to package Python applications."
msgstr ""
"Python アプリケーションをパッケージするのに使われる技術の単純化された全体像。"

#: ../source/overview.rst:378
msgid "What about..."
msgstr "これは何..."

#: ../source/overview.rst:380
msgid ""
"The sections above can only summarize so much, and you might be wondering "
"about some of the more conspicuous gaps."
msgstr ""
"上記の節ではかなり要約して書いているので、飛躍している点が目につくかもしれま"
"せん。"

#: ../source/overview.rst:384
msgid "Operating system packages"
msgstr "オペレーティングシステムレベルのパッケージ"

#: ../source/overview.rst:386
msgid ""
"As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some "
"operating systems have package managers of their own. If you're very sure of "
"the operating system you're targeting, you can depend directly on a format "
"like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, "
"Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ "
"(for Red Hat, Fedora, etc.), and use that built-in package manager to take "
"care of installation, and even deployment. You can even use `FPM <https://"
"fpm.readthedocs.io/en/latest/cli-reference.html#virtualenv>`_ to generate "
"both deb and RPMs from the same source."
msgstr ""
"上記の :ref:`depending-on-a-separate-ecosystem` で言及したように、オペレー"
"ティングシステムの中には独自のパッケージ管理機構を備えているものがあります。"
"あなたがターゲットにするオペレーティングシステムが非常にはっきりわかっている"
"なら、 `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (Debian や "
"Ubuntu その他向け。) か、 `RPM <https://en.wikipedia.org/wiki/"
"RPM_Package_Manager>`_ (Red Hat や Fedora その他向け。) のようなフォーマット"
"を直接利用して、インストールや配置さえもその面倒を見るのに組み込みのパッケー"
"ジ管理機構を活用することができます。 `FPM <https://fpm.readthedocs.io/en/"
"latest/cli-reference.html#virtualenv>`_ を使えば、同じソースコードから deb "
"と RPM の両方を生成することさえ可能です。"

#: ../source/overview.rst:397
msgid ""
"In most deployment pipelines, the OS package manager is just one piece of "
"the puzzle."
msgstr ""
"ほとんどの配置パイプラインでは、 OS パッケージ管理機構は全体から見ればほんの"
"一部です。"

#: ../source/overview.rst:403
msgid ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` have been an indispensable "
"tool for multiple generations of Python developer, but are slowly fading "
"from view, as they are being wrapped by higher-level tools. With packaging "
"in particular, virtualenvs are used as a primitive in :doc:`the dh-"
"virtualenv tool <dh-virtualenv:tutorial>` and `osnap <https://github.com/"
"jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` は、複数世代の Python 向け"
"に開発をする者にとっては以前から避けられないツールであり続けてきたが、高レベ"
"ルのツール群がラップするようになったので徐々に見えなくなりつつあります。特に"
"パッケージングの観点では、共に virtualenvs を内包する形でラップしている :doc:"
"`the dh-virtualenv tool <dh-virtualenv:tutorial>` や `osnap <https://github."
"com/jamesabel/osnap>`_ では virtualenvs はプリミティブとして使われています。"

#: ../source/overview.rst:412
msgid ""
"For production deployments, do not rely on running ``python -m pip install`` "
"from the Internet into a virtualenv, as one might do in a development "
"environment. The overview above is full of much better solutions."
msgstr ""
"開発環境ではありがちですが、商用環境への配置ではインターネットから "
"virtualenv への ``python -m pip install`` を走らせることに信用をおいてはなり"
"ません。上に述べた概要には、より良い解決策がたくさんあります。"

#: ../source/overview.rst:417
msgid "Security"
msgstr "セキュリティ"

#: ../source/overview.rst:419
msgid ""
"The further down the gradient you come, the harder it gets to update "
"components of your package. Everything is more tightly bound together."
msgstr ""
"あなたのパッケージの部品を更新することは、ここまで積み上げてきたものよりさら"
"に困難なものになるでしょう。あらゆるものがより緊密に互いに固着しているので"
"す。"

#: ../source/overview.rst:422
msgid ""
"For example, if a kernel security issue emerges, and you're deploying "
"containers, the host system's kernel can be updated without requiring a new "
"build on behalf of the application. If you deploy VM images, you'll need a "
"new build. Whether or not this dynamic makes one option more secure is still "
"a bit of an old debate, going back to the still-unsettled matter of `static "
"versus dynamic linking <https://www.google.com/search?"
"channel=fs&q=static+vs+dynamic+linking>`_."
msgstr ""
"例えば、仮にあなたがコンテナ型の仮想環境を配置していて、カーネルのセキュリ"
"ティ問題が発生したとすれば、アプリケーションに新たなビルドを要求することなく"
"ホスト側のカーネルが更新されるかもしれません。もしあなたが VM イメージを配置"
"しているなら、それを再ビルドする必要があるかもしれません。このような動的な挙"
"動をよりセキュアにするひとつのオプションは、以前から少々議論の的になっている"
"がまだ決着のついていない `静的リンク対動的リンク <https://www.google.com/"
"search?channel=fs&q=static+vs+dynamic+linking>`_ ということになります。"

#: ../source/overview.rst:431
msgid "Wrap up"
msgstr "まとめ"

#: ../source/overview.rst:433
msgid ""
"Packaging in Python has a bit of a reputation for being a bumpy ride. This "
"impression is mostly a byproduct of Python's versatility. Once you "
"understand the natural boundaries between each packaging solution, you begin "
"to realize that the varied landscape is a small price Python programmers pay "
"for using one of the most balanced, flexible languages available."
msgstr ""
"Python におけるパッケージングは、凸凹道を車で行くようなもので苦労が多いという"
"評判も少しあります。このような感想は、ほとんどの場合は Python が多用途に使え"
"ることの裏返しです。それぞれのパッケージング方法の間にある自然な境界線を理解"
"しさえすれば、さまざまに異なる風景が、もっともバランスが取れていて自由度の高"
"い言語を使うということのために Python プログラマが支払う小さな代償であること"
"に気づくことでしょう。"

#: ../source/specifications/binary-distribution-format.rst:7
msgid "Binary distribution format"
msgstr "バイナリ配布物のフォーマット"

#: ../source/specifications/binary-distribution-format.rst:9
msgid ""
"This page specifies the binary distribution format for Python packages, also "
"called the wheel format."
msgstr ""
"このページでは、Python パッケージのバイナリ配布物フォーマット、これは wheel "
"フォーマットとも呼ばれているものですが、これについて仕様を記述します。"

#: ../source/specifications/binary-distribution-format.rst:12
msgid ""
"A wheel is a ZIP-format archive with a specially formatted file name and the "
"``.whl`` extension.  It contains a single distribution nearly as it would be "
"installed according to PEP 376 with a particular installation scheme.  "
"Although a specialized installer is recommended, a wheel file may be "
"installed by simply unpacking into site-packages with the standard 'unzip' "
"tool while preserving enough information to spread its contents out onto "
"their final paths at any later time."
msgstr ""
"wheel は、特別にフォーマットされたファイル名と ``.whl`` 拡張子を持った ZIP "
"フォーマットのアーカイブです。 PEP 376 にほぼ従ってインストールされる単一の配"
"布物を含んでいます。特別なインストーラを使うことが推奨されていますが、 wheel "
"ファイルは、いつでも後でその最終的なパス名の場所に内容物を展開するに足りる情"
"報を保存しつつ、サイトパッケージを置くべき場所に標準の 'unxip' ツールで単純に"
"アンパックすればインストールできます。"

#: ../source/specifications/binary-distribution-format.rst:22
msgid "Details"
msgstr "詳細"

#: ../source/specifications/binary-distribution-format.rst:25
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr "wheel の 'distribution-1.0-py32-none-any.whl' をインストールする"

#: ../source/specifications/binary-distribution-format.rst:27
msgid "Wheel installation notionally consists of two phases:"
msgstr "Wheel によるインストールは、概念上、ふたつの段階から構成されています:"

#: ../source/specifications/binary-distribution-format.rst:29
msgid "Unpack."
msgstr "アンパックする。"

#: ../source/specifications/binary-distribution-format.rst:31
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr "``distribution-1.0.dist-info/WHEEL`` をパースします。"

#: ../source/specifications/binary-distribution-format.rst:32
msgid ""
"Check that installer is compatible with Wheel-Version.  Warn if minor "
"version is greater, abort if major version is greater."
msgstr ""
"インストーラが Wheel のバージョンと互換であることを確認します。マイナーバー"
"ジョンが大きければ警告し、メジャーバージョンが大きければ処理を中断します。"

#: ../source/specifications/binary-distribution-format.rst:34
msgid ""
"If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""
"もし、 Root-Is-Purelib == 'true' であれば、アーカイブを purelib (site-"
"packages) へアンパックします。"

#: ../source/specifications/binary-distribution-format.rst:36
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""
"そうでなければ、アーカイブを platlib (site-packages) へアンパックします。"

#: ../source/specifications/binary-distribution-format.rst:38
msgid "Spread."
msgstr "広げる。"

#: ../source/specifications/binary-distribution-format.rst:40
msgid ""
"Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there is "
"data) ``distribution-1.0.data/``."
msgstr ""
"アンパックされたアーカイブは、 ``distribution-1.0.dist-info/`` と (データ部分"
"があれば) ``distribution-1.0.data/`` を含んでいます。"

#: ../source/specifications/binary-distribution-format.rst:42
msgid ""
"Move each subtree of ``distribution-1.0.data/`` onto its destination path. "
"Each subdirectory of ``distribution-1.0.data/`` is a key into a dict of "
"destination directories, such as ``distribution-1.0.data/(purelib|platlib|"
"headers|scripts|data)``. These subdirectories are :ref:`installation paths "
"defined by sysconfig <python:installation_paths>`."
msgstr ""
"``distribution-1.0.data/`` の下の全てのサブツリーを、その目的地となるディレク"
"トリパスに移動しましょう。 ``distribution-1.0.data/(purelib|platlib|headers|"
"scripts|data)`` のような ``distribution-1.0.data/`` の下のサブディレクトリ"
"は、それぞれ、目的地となるディレクトリの辞書のキーになっています。このような"
"サブディレクトリ群は、 :ref:`sysconfig によって定義されるインストールパス群 "
"<python:installation_paths>` です。"

#: ../source/specifications/binary-distribution-format.rst:48
msgid ""
"If applicable, update scripts starting with ``#!python`` to point to the "
"correct interpreter."
msgstr ""
"もし該当するならば、 ``#!python`` から始まるスクリプト群が適切なインタープリ"
"タを指し示すように更新します。"

#: ../source/specifications/binary-distribution-format.rst:50
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""
"``distribution-1.0.dist-info/RECORD`` をインストール先のディレクトリパスに更"
"新します。"

#: ../source/specifications/binary-distribution-format.rst:52
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr "空の ``distribution-1.0.data`` ディレクトリを削除します。"

#: ../source/specifications/binary-distribution-format.rst:53
msgid ""
"Compile any installed .py to .pyc. (Uninstallers should be smart enough to "
"remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""
"インストールされた .py のファイルを全て .pyc にコンパイルします。 (アンインス"
"トーラは、 RECORD で言及されていなくても .pyc ファイルを削除できるほどに賢く"
"あるべきです。)"

#: ../source/specifications/binary-distribution-format.rst:57
msgid "Recommended installer features"
msgstr "推奨されるインストーラの機能"

#: ../source/specifications/binary-distribution-format.rst:67
msgid "Rewrite ``#!python``."
msgstr "``#!python`` を書き換えます。"

#: ../source/specifications/binary-distribution-format.rst:60
msgid ""
"In wheel, scripts are packaged in ``{distribution}-{version}.data/scripts/"
"``.  If the first line of a file in ``scripts/`` starts with exactly ``b'#!"
"python'``, rewrite to point to the correct interpreter.  Unix installers may "
"need to add the +x bit to these files if the archive was created on Windows."
msgstr ""
"wheel では、スクリプトは ``{distribution}-{version}.data/scripts/`` にパッ"
"ケージされます。 ``scripts/`` ディレクトリにあるファイルの先頭行が正確に "
"``b'#!python'`` で始まっている場合には、正確なインタープリタを指し示すように"
"書き換えられます。アーカイブが Windows で作成されていれば、 Unix でのインス"
"トーラがこのようなファイルに +x ビットを追加設定する必要があるでしょう。"

#: ../source/specifications/binary-distribution-format.rst:66
msgid ""
"The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a GUI "
"script instead of a console script."
msgstr ""
"``b'#!pythonw'`` と書く慣習も許容されています。 ``b'#!pythonw'`` というのはコ"
"ンソール版ではなくて GUI 版のスクリプトであることを示します。"

#: ../source/specifications/binary-distribution-format.rst:72
msgid "Generate script wrappers."
msgstr "スクリプトラッパを生成します。"

#: ../source/specifications/binary-distribution-format.rst:70
msgid ""
"In wheel, scripts packaged on Unix systems will certainly not have "
"accompanying .exe wrappers.  Windows installers may want to add them during "
"install."
msgstr ""
"wheel では、 Unix システム上でパッケージされたスクリプトには .exe ラッパーが"
"随伴していないことが普通でしょう。 Windows インストーラは、インストールする際"
"にそれらを追加したくなるかもしれません。"

#: ../source/specifications/binary-distribution-format.rst:75
msgid "Recommended archiver features"
msgstr "推奨されるアーカイバの機能"

#: ../source/specifications/binary-distribution-format.rst:82
msgid "Place ``.dist-info`` at the end of the archive."
msgstr "アーカイブの末尾に ``.dist-info`` を置くこと。"

#: ../source/specifications/binary-distribution-format.rst:78
msgid ""
"Archivers are encouraged to place the ``.dist-info`` files physically at the "
"end of the archive.  This enables some potentially interesting ZIP tricks "
"including the ability to amend the metadata without rewriting the entire "
"archive."
msgstr ""
"アーカイバには、 ``.dist-info`` ファイルをアーカイブの物理的な末尾に置くこと"
"が推奨されています。こうすることで、アーカイブ全体を書き換えなくてもメタデー"
"タを修正することができる点を含む、 ZIP のいくつかの潜在的に興味深いトリックを"
"使うことができるようになります。"

#: ../source/specifications/binary-distribution-format.rst:85
#: ../source/specifications/pylock-toml.rst:51
msgid "File Format"
msgstr "ファイルフォーマット"

#: ../source/specifications/binary-distribution-format.rst:90
msgid "File name convention"
msgstr "ファイル名の慣習"

#: ../source/specifications/binary-distribution-format.rst:92
msgid ""
"The wheel filename is ``{distribution}-{version}(-{build tag})?-{python tag}-"
"{abi tag}-{platform tag}.whl``."
msgstr ""
"wheel のファイル名は(訳注、慣習として) ``{配布物}-{バージョン}(-{ビルドタ"
"グ})?-{python タグ}-{abi タグ}-{プラットフォームタグ}.whl <{distribution}-"
"{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl>`` です。"

#: ../source/specifications/binary-distribution-format.rst:96
msgid "distribution"
msgstr "ディストリビューション"

#: ../source/specifications/binary-distribution-format.rst:96
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr "配布物の名前、例えば 'django' や 'pyramid' 。"

#: ../source/specifications/binary-distribution-format.rst:99
msgid "version"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:99
msgid "Distribution version, e.g. 1.0."
msgstr "配布物のバージョン、例えば 1.0 。"

#: ../source/specifications/binary-distribution-format.rst:124
msgid "build tag"
msgstr "ビルドタグ"

#: ../source/specifications/binary-distribution-format.rst:102
msgid ""
"Optional build number.  Must start with a digit.  Acts as a tie-breaker if "
"two wheel file names are the same in all other respects (i.e. name, version, "
"and other tags).  Sort as an empty tuple if unspecified, else sort as a two-"
"item tuple with the first item being the initial digits as an ``int``, and "
"the second item being the remainder of the tag as a ``str``."
msgstr ""
"省略可能なビルドナンバー。数字で始まらなければなりません。ふたつの wheel ファ"
"イルのファイル名がこの部分を除いて (すなわち名称やバージョンやその他のタグ"
"が) 同一であった場合のタイブレーカ (訳注、いずれかに決めるための方法) として"
"働きます。指定されていれば先頭の数字を ``int`` として解釈して第１要素とし残り"
"を ``str`` として解釈して第２要素とするような要素数が２個のタプルとして解釈さ"
"れ、指定されていない場合には空欄のタプルとして解釈されます。"

#: ../source/specifications/binary-distribution-format.rst:109
msgid ""
"A common use-case for build numbers is rebuilding a binary distribution due "
"to a change in the build environment, like when using the manylinux image to "
"build distributions using pre-release CPython versions."
msgstr ""
"ビルド番号に係るよくあるユースケースは、CPython のリリース前のバージョンを"
"使って manylinux で配布物をビルドしている場合のように、ビルド環境に変化があっ"
"たためにバイナリ配布物を再ビルドする時です。"

#: ../source/specifications/binary-distribution-format.rst:116
msgid ""
"Build numbers are not a part of the distribution version and thus are "
"difficult to reference externally, especially so outside the Python "
"ecosystem of tools and standards. A common case where a distribution would "
"need to referenced externally is when resolving a security vulnerability."
msgstr ""
"ビルド番号は、配布物のバージョンの一部ではなく、従って外部からの、特に "
"Python エコシステムのツール類や標準類の外側からの参照は困難です。配布物が外部"
"からの参照を必要とするようなケースとしては、セキュリティ上の脆弱性を解決しよ"
"うとする場合がよくあるケースです。"

#: ../source/specifications/binary-distribution-format.rst:121
msgid ""
"Due to this limitation, new distributions which need to be referenced "
"externally **should not** use build numbers when building the new "
"distribution. Instead a **new distribution version** should be created for "
"such cases."
msgstr ""
"この制約のゆえに、外部から参照される必要がある新たな配布物は、新しい配布物を"
"ビルドする際にビルド番号を使う **べきではありません** 。そのような場合には、"
"代わりに **新しい配布物バージョン** が作成されるべきです。"

#: ../source/specifications/binary-distribution-format.rst:127
msgid "language implementation and version tag"
msgstr "言語の実装とバージョンタグ"

#: ../source/specifications/binary-distribution-format.rst:127
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr "例えば、 'py27' ・ 'py2' ・ 'py3' 。"

#: ../source/specifications/binary-distribution-format.rst:130
#: ../source/specifications/platform-compatibility-tags.rst:20
msgid "abi tag"
msgstr "abi タグ"

#: ../source/specifications/binary-distribution-format.rst:130
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr "例えば、 'cp33m' ・ 'abi3' ・ 'none' 。"

#: ../source/specifications/binary-distribution-format.rst:133
#: ../source/specifications/platform-compatibility-tags.rst:23
msgid "platform tag"
msgstr "プラットフォームタグ"

#: ../source/specifications/binary-distribution-format.rst:133
msgid "E.g. 'linux_x86_64', 'any'."
msgstr "例えば、 'linux_x86_64' ・ 'any' 。"

#: ../source/specifications/binary-distribution-format.rst:135
msgid ""
"For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build of "
"a package called 'distribution', and is compatible with Python 2.7 (any "
"Python 2.7 implementation), with no ABI (pure Python), on any CPU "
"architecture."
msgstr ""
"例えば、 ``distribution-1.0.1-py27-none-any.whl`` とは、 'distribution' と呼"
"ばれるパッケージの最初のビルドであって、 Python 2.7 (任意の Python 2.7 実装) "
"で動作し、 ABI を持たず (即ち純 Python) 、任意の CPU アーキテクチャで動作する"
"ということです。"

#: ../source/specifications/binary-distribution-format.rst:140
msgid ""
"The last three components of the filename before the extension are called "
"\"compatibility tags.\"  The compatibility tags express the package's basic "
"interpreter requirements and are detailed in PEP 425."
msgstr ""
"ファイル名の拡張子を除いて最後の３個の構成要素は、\"互換性タグ\" と呼ばれま"
"す。互換性タグは、インタープリタに対するそのパッケージの基本的な要求事項を表"
"現しており、 PEP 425 に詳しく書かれています。"

#: ../source/specifications/binary-distribution-format.rst:145
msgid "Escaping and Unicode"
msgstr "エスケープとユニコード"

#: ../source/specifications/binary-distribution-format.rst:147
msgid ""
"As the components of the filename are separated by a dash (``-``, HYPHEN-"
"MINUS), this character cannot appear within any component. This is handled "
"as follows:"
msgstr ""
"ファイル名の構成要素がダッシュ (``-`` つまり HYPHEN-MINUS) で分離されているの"
"で、この文字は構成要素の中に出現してはなりません。これは次のように取り扱われ"
"ます:"

#: ../source/specifications/binary-distribution-format.rst:150
msgid ""
"In distribution names, any run of ``-_.`` characters (HYPHEN-MINUS, LOW LINE "
"and FULL STOP) should be replaced with ``_`` (LOW LINE), and uppercase "
"characters should be replaced with corresponding lowercase ones. This is "
"equivalent to regular :ref:`name normalization <name-normalization>` "
"followed by replacing ``-`` with ``_``. Tools consuming wheels must be "
"prepared to accept ``.`` (FULL STOP) and uppercase letters, however, as "
"these were allowed by an earlier version of this specification."
msgstr ""
"配布物の名前の部分では、 ``-_.`` (HYPHEN-MINUS ・ LOW LINE ・ FULL STOP) の文"
"字は、すべて ``_`` (LOW LINE) で置き換えられるべきで、かつ、大文字はすべて対"
"応する小文字に置き換えられるべきです。これは、通常の :ref:`名前の正規化 "
"<name-normalization>` の後に ``-`` を ``_`` で置き換えるのと同じです。 wheel "
"ファイルを入力とするツールは、 ``.`` (FULL STOP) や大文字を受け入れる準備がで"
"きていなければなりませんが、しかし、それはこの仕様の初期のバージョンで許され"
"ていたからです。"

#: ../source/specifications/binary-distribution-format.rst:157
msgid ""
"Version numbers should be normalised according to the :ref:`Version "
"specifier specification <version-specifiers>`. Normalised version numbers "
"cannot contain ``-``."
msgstr ""
"バージョン番号は、 `バージョン指定子仕様 <version-specifiers>` に従って正規化"
"されなければなりません。正規化済みのバージョン番号は ``-`` を含んでいてはなり"
"ません。"

#: ../source/specifications/binary-distribution-format.rst:159
msgid ""
"The remaining components may not contain ``-`` characters, so no escaping is "
"necessary."
msgstr ""
"残りの構成要素は、 ``-`` 文字を含んでいてはいけないので、エスケープ処理を行う"
"必要がありません。"

#: ../source/specifications/binary-distribution-format.rst:162
msgid ""
"Tools producing wheels should verify that the filename components do not "
"contain ``-``, as the resulting file may not be processed correctly if they "
"do."
msgstr ""
"wheel ファイルを生成するツールはファイル名部分の構成要素が ``-`` を含んでいな"
"いことを検証しなければなりませんが、これは、もし含んでいれば結果として生成さ"
"れたファイルが正しく処理されないかもしれないからです。"

#: ../source/specifications/binary-distribution-format.rst:165
msgid ""
"The archive filename is Unicode.  It will be some time before the tools are "
"updated to support non-ASCII filenames, but they are supported in this "
"specification."
msgstr ""
"アーカイブのファイル名は Unicode です。いくつかのツールでは非 ASCII 文字の"
"ファイル名をサポートするように更新されるまでに幾らかの時間がかかるかもしれま"
"せんが、しかし、この仕様ではサポートされているのです。"

#: ../source/specifications/binary-distribution-format.rst:169
msgid ""
"The filenames *inside* the archive are encoded as UTF-8.  Although some ZIP "
"clients in common use do not properly display UTF-8 filenames, the encoding "
"is supported by both the ZIP specification and Python's ``zipfile``."
msgstr ""
"アーカイブの *中にある* ファイルのファイル名は、 UTF-8 でエンコードされていま"
"す。 ZIP クライアントのいくつかは共通して UTF-8 のファイル名を正常に表示しま"
"せんが、このエンコーディングは ZIP の仕様でも Python の ``zipfile`` の仕様で"
"も、共にサポートされています。"

#: ../source/specifications/binary-distribution-format.rst:175
msgid "File contents"
msgstr "ファイルの内容"

#: ../source/specifications/binary-distribution-format.rst:177
#, fuzzy
#| msgid ""
#| "The contents of a wheel file, where {distribution} is replaced with the "
#| "name of the package, e.g. ``beaglevote`` and {version} is replaced with "
#| "its version, e.g. ``1.0.0``, consist of:"
msgid ""
"The contents of a wheel file, where {distribution} is replaced with the :ref:"
"`normalized name <name-normalization>` of the package, e.g. ``beaglevote`` "
"and {version} is replaced with its :ref:`normalized version <version-"
"specifiers-normalization>`, e.g. ``1.0.0``, (with dash/``-`` characters "
"replaced with underscore/``_`` characters in both fields) consist of:"
msgstr ""
"{distribution} の部分を例えば ``beaglevote`` のようなパッケージ名で置き換"
"え、 {version} の部分を例えば `1.0.0`` のようなバージョン番号で置き換えた "
"wheel ファイルの内容は次のもので構成されています:"

#: ../source/specifications/binary-distribution-format.rst:184
msgid ""
"``/``, the root of the archive, contains all files to be installed in "
"``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and "
"``platlib`` are usually both ``site-packages``."
msgstr ""
"アーカイブのルートディレクトリに当たる ``/`` は、``WHEEL`` で指定されている通"
"り ``purelib`` または ``platlib`` にインストールされるファイルをすべて含んで"
"います。通常は、 ``purelib`` や ``platlib`` はいずれも ``site-packages`` で"
"す。"

#: ../source/specifications/binary-distribution-format.rst:187
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr "``{distribution}-{version}.dist-info/`` はメタデータを含んでいます。"

#: ../source/specifications/binary-distribution-format.rst:188
#, fuzzy
#| msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgid ""
":file:`{distribution}-{version}.dist-info/licenses/` contains license files."
msgstr "``{distribution}-{version}.dist-info/`` はメタデータを含んでいます。"

#: ../source/specifications/binary-distribution-format.rst:189
msgid ""
"``{distribution}-{version}.data/`` contains one subdirectory for each non-"
"empty install scheme key not already covered, where the subdirectory name is "
"an index into a dictionary of install paths (e.g. ``data``, ``scripts``, "
"``headers``, ``purelib``, ``platlib``)."
msgstr ""
"``{distribution}-{version}.data/`` は、すでにカバーされているものは別として、"
"サブディレクトリ名がインストールパスの辞書への (例えば、 ``data``, "
"``scripts``, ``headers``, ``purelib``, ``platlib`` のような) 指示子になってい"
"るような、空ではないそれぞれのインストールスキームに対応したディレクトリを含"
"みます。"

#: ../source/specifications/binary-distribution-format.rst:193
#, fuzzy
#| msgid ""
#| "Python scripts must appear in ``scripts`` and begin with exactly ``b'#!"
#| "python'`` in order to enjoy script wrapper generation and ``#!python`` "
#| "rewriting at install time.  They may have any or no extension."
msgid ""
"Python scripts must appear in ``scripts`` and begin with exactly ``b'#!"
"python'`` in order to enjoy script wrapper generation and ``#!python`` "
"rewriting at install time.  They may have any or no extension.  The "
"``scripts`` directory may only contain regular files."
msgstr ""
"Python スクリプトは ``scripts`` ディレクトリに置かなければならず、また、イン"
"ストール時のスクリプトラッパの生成や ``#!python`` 書き換えといった利点を活用"
"するために、正確に ``b'#!python'`` で始まっていなければなりません。"

#: ../source/specifications/binary-distribution-format.rst:197
msgid ""
"``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 or "
"greater format metadata."
msgstr ""
"``{distribution}-{version}.dist-info/METADATA`` は、バージョン 1.1 またはそれ"
"以上のフォーマットのメタデータです。"

#: ../source/specifications/binary-distribution-format.rst:199
msgid ""
"``{distribution}-{version}.dist-info/WHEEL`` is metadata about the archive "
"itself in the same basic key: value format::"
msgstr ""
"``{distribution}-{version}.dist-info/WHEEL`` は、同様のキー:バリュー形式で表"
"現されたアーカイブそのものに関するメタデータです::"

#: ../source/specifications/binary-distribution-format.rst:209
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr "``Wheel-Version`` は、Wheel の仕様のバージョン番号です。"

#: ../source/specifications/binary-distribution-format.rst:210
msgid ""
"``Generator`` is the name and optionally the version of the software that "
"produced the archive."
msgstr ""
"``Generator`` は、そのアーカイブを作成したソフトウェアの名前で、バージョン番"
"号を付加しても構いません。"

#: ../source/specifications/binary-distribution-format.rst:212
msgid ""
"``Root-Is-Purelib`` is true if the top level directory of the archive should "
"be installed into purelib; otherwise the root should be installed into "
"platlib."
msgstr ""
"``Root-Is-Purelib`` は、アーカイブの最上位のディレクトリが pure lib へインス"
"トールされるべきものであれば true で、そうでなければ platlib へインストールさ"
"れます。"

#: ../source/specifications/binary-distribution-format.rst:215
msgid ""
"``Tag`` is the wheel's expanded compatibility tags; in the example the "
"filename would contain ``py2.py3-none-any``."
msgstr ""
"``Tag`` は、 wheel の拡張互換性タグで、例の中ではファイル名の ``py2.py3-none-"
"any`` の部分です。"

#: ../source/specifications/binary-distribution-format.rst:217
msgid ""
"``Build`` is the build number and is omitted if there is no build number."
msgstr ""
"``Build`` は、ビルドナンバーで、もしビルドナンバーがなければ省略されます。"

#: ../source/specifications/binary-distribution-format.rst:218
msgid ""
"A wheel installer should warn if Wheel-Version is greater than the version "
"it supports, and must fail if Wheel-Version has a greater major version than "
"the version it supports."
msgstr ""
"wheel インストーラは、もし自身がサポートしているものより Wheel-Version が大き"
"ければ警告するべきですし、 Wheel-Version のメジャーバージョンがサポートしてい"
"るものより大きい場合にはフェイルするべきです。"

#: ../source/specifications/binary-distribution-format.rst:221
msgid ""
"Wheel, being an installation format that is intended to work across multiple "
"versions of Python, does not generally include .pyc files."
msgstr ""
"Wheel は複数のバージョンの Python を跨いでも動作するように意図されたインス"
"トール用のフォーマットですが、通常は .pyc ファイルを含みません。"

#: ../source/specifications/binary-distribution-format.rst:223
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr "Wheel は、 setup.py ないし setup.cfg を含みません。"

#: ../source/specifications/binary-distribution-format.rst:225
msgid ""
"This version of the wheel specification is based on the distutils install "
"schemes and does not define how to install files to other locations. The "
"layout offers a superset of the functionality provided by the existing "
"wininst and egg binary formats."
msgstr ""
"このバージョンの wheel 仕様は、distutils のインストール方法論に基づいていて、"
"ファイルを他の場所にインストールする方法については定義していません。既存の "
"wininst や egg バイナリフォーマットが提供する機能の上位互換のレイアウトを提案"
"します。"

#: ../source/specifications/binary-distribution-format.rst:232
#: ../source/specifications/recording-installed-packages.rst:23
msgid "The .dist-info directory"
msgstr ".dist-info ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:234
msgid ""
"Wheel .dist-info directories include at a minimum METADATA, WHEEL, and "
"RECORD."
msgstr ""
"Wheel の .dist-info ディレクトリは、最低限でも METADATA ・ WHEEL ・RECORD を"
"含みます。"

#: ../source/specifications/binary-distribution-format.rst:236
msgid ""
"METADATA is the package metadata, the same format as PKG-INFO as found at "
"the root of sdists."
msgstr ""
"METADATA はパッケージのメタデータで、 sdists のルートディレクトリにある PKG-"
"INFO と同じフォーマットで記述されます。"

#: ../source/specifications/binary-distribution-format.rst:238
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""
"WHEEL は、パッケージをビルドする部分に特化した wheel のメタデータです。"

#: ../source/specifications/binary-distribution-format.rst:239
msgid ""
"RECORD is a list of (almost) all the files in the wheel and their secure "
"hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a "
"hash of itself, must include its hash.  The hash algorithm must be sha256 or "
"better; specifically, md5 and sha1 are not permitted, as signed wheel files "
"rely on the strong hashes in RECORD to validate the integrity of the archive."
msgstr ""
"RECORD は、 wheel に含まれる (ほとんど) 全てのファイルとそのセキュアなハッ"
"シュ値のリストです。 PEP 376 とは異なり、自分自身のハッシュ値を内包することは"
"不可能な RECORD を除く各ファイルのハッシュ値が含まれていなければなりません。"
"署名済みの wheel ファイルがアーカイブの完全性を検証するのに RECORD 内の暗号学"
"的に強いハッシュ値に依存しているので、ハッシュ計算のアルゴリズムは sha256 以"
"上でなければならず、特に md5 とsha1 は許されません。"

#: ../source/specifications/binary-distribution-format.rst:245
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr "PEP 376 の INSTALLER と REQUESTED はアーカイブに含まれません。"

#: ../source/specifications/binary-distribution-format.rst:246
msgid ""
"RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""
"RECORD.jws は、デジタル署名のために使われます。これについては RECORD では触れ"
"られません。"

#: ../source/specifications/binary-distribution-format.rst:248
msgid ""
"RECORD.p7s is allowed as a courtesy to anyone who would prefer to use S/MIME "
"signatures to secure their wheel files.  It is not mentioned in RECORD."
msgstr ""
"自分の wheel ファイルを S/MIME 署名でセキュアにすることを好む人は、 RECORD."
"p7s を使うことができます。これについては RECORD では触れられません。"

#: ../source/specifications/binary-distribution-format.rst:251
msgid ""
"During extraction, wheel installers verify all the hashes in RECORD against "
"the file contents.  Apart from RECORD and its signatures, installation will "
"fail if any file in the archive is not both mentioned and correctly hashed "
"in RECORD."
msgstr ""
"展開中に wheel インストーラは RECORD 内のハッシュ値と実際のファイルの内容 (の"
"ハッシュ値) をすべて検証します。 RECORD とその署名による検証に加えて、アーカ"
"イブの中のいずれかのファイルが RECORD にリストされていないか、または、正しく"
"ハッシュされていない時にはインストールがフェイルするでしょう。"

#: ../source/specifications/binary-distribution-format.rst:257
msgid "Subdirectories in :file:`.dist-info/`"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:259
msgid ""
"Subdirectories under :file:`.dist-info/` are reserved for future use. The "
"following subdirectory names under :file:`.dist-info/` are reserved for "
"specific usage:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:263
#, fuzzy
#| msgid "Project name"
msgid "Subdirectory name"
msgstr "プロジェクト名"

#: ../source/specifications/binary-distribution-format.rst:263
msgid "PEP / Standard"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:265
#, fuzzy
#| msgid "``license``"
msgid "``licenses``"
msgstr "``ライセンス``"

#: ../source/specifications/binary-distribution-format.rst:265
#: ../source/specifications/binary-distribution-format.rst:266
#, fuzzy
#| msgid ":pep:`600`"
msgid ":pep:`639`"
msgstr ":pep:`600`"

#: ../source/specifications/binary-distribution-format.rst:266
#, fuzzy
#| msgid "``license``"
msgid "``license_files``"
msgstr "``ライセンス``"

#: ../source/specifications/binary-distribution-format.rst:267
#, fuzzy
#| msgid "``LIB``"
msgid "``LICENSES``"
msgstr "``LIB``"

#: ../source/specifications/binary-distribution-format.rst:267
msgid "`REUSE licensing framework <https://reuse.software>`__"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:268
msgid "``sboms``"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:268
#, fuzzy
#| msgid ":pep:`571`"
msgid ":pep:`770`"
msgstr ":pep:`571`"

#: ../source/specifications/binary-distribution-format.rst:272
#, fuzzy
#| msgid "The .dist-info directory"
msgid "The :file:`.dist-info/licenses/` directory"
msgstr ".dist-info ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:274
msgid ""
"If the metadata version is 2.4 or greater and one or more ``License-File`` "
"fields is specified, the :file:`.dist-info/` directory MUST contain a :file:"
"`licenses/` subdirectory, which MUST contain the files listed in the "
"``License-File`` fields in the :file:`METADATA` file at their respective "
"paths relative to the :file:`licenses/` directory."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:281
#, fuzzy
#| msgid "The .dist-info directory"
msgid "The :file:`.dist-info/sboms/` directory"
msgstr ".dist-info ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:283
msgid ""
"All files contained within the :file:`.dist-info/sboms/` directory MUST be "
"Software Bill-of-Materials (SBOM) files that describe software contained "
"within the distribution archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:288
msgid "The .data directory"
msgstr ".data ディレクトリ"

#: ../source/specifications/binary-distribution-format.rst:290
msgid ""
"Any file that is not normally installed inside site-packages goes into the ."
"data directory, named as the .dist-info directory but with the .data/ "
"extension::"
msgstr ""
"site-packages 内に通常通りにインストールされなかったファイルはどれでも、."
"dist-info ディレクトリと同様に命名されるが .data/ 拡張子をつけられて .data "
"ディレクトリに行きます::"

#: ../source/specifications/binary-distribution-format.rst:298
msgid ""
"The .data directory contains subdirectories with the scripts, headers, "
"documentation and so forth from the distribution.  During installation the "
"contents of these subdirectories are moved onto their destination paths."
msgstr ""
".data ディレクトリでは、配布物からのスクリプト・ヘッダー・説明文書などをサブ"
"ディレクトリに収めています。インストール中に、これらのサブディレクトリの内容"
"を行き先となるパスへ動かします。"

#: ../source/specifications/binary-distribution-format.rst:304
msgid "Signed wheel files"
msgstr "署名済み wheel ファイル"

#: ../source/specifications/binary-distribution-format.rst:306
msgid ""
"Wheel files include an extended RECORD that enables digital signatures.  PEP "
"376's RECORD is altered to include a secure hash "
"``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding with "
"no trailing = characters) as the second column instead of an md5sum.  All "
"possible entries are hashed, including any generated files such as .pyc "
"files, but not RECORD which cannot contain its own hash. For example::"
msgstr ""
"Wheel ファイルは、デジタル署名を可能にした拡張 RECORD ファイルを含みます。 "
"PEP 376 の RECORD は、 md5sum の代わりにセキュアなハッシュ値 "
"``digestname=urlsafe_b64encode_nopad(digest)`` (末尾に = 文字を追加しない "
"url セーフな base64 エンコード) を二つ目のカラムとするように修正されました。"
"生成された .pyc ファイルなども含むすべての可能なエントリにハッシュ値が付加さ"
"れていますが、 RECORD は自身のハッシュ値を含むことができないので例外です。例"
"えば::"

#: ../source/specifications/binary-distribution-format.rst:317
msgid ""
"The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in RECORD "
"at all since they can only be added after RECORD is generated. Every other "
"file in the archive must have a correct hash in RECORD or the installation "
"will fail."
msgstr ""
"署名用のファイルである RECORD.jws と RECORD.p7s は、 RECORD ファイルが作成さ"
"れた後にしか追加できないので、RECORD ファイル内で言及されることは全くありませ"
"ん。アーカイブの中の他のファイルはすべて、RECORD ファイル内に正しいハッシュ値"
"を持たなければならず、そうでなければインストールに失敗します。"

#: ../source/specifications/binary-distribution-format.rst:322
msgid ""
"If JSON web signatures are used, one or more JSON Web Signature JSON "
"Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent to "
"RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of RECORD "
"as the signature's JSON payload:"
msgstr ""
"JSON ウェブ署名が使われる場合には、ひとつかそれ以上の JSON Web Signature "
"JSON Serialization (JWS-JS) 署名が RECORD ファイルの隣にある RECORD.jws ファ"
"イルの中に保存されます。 RECORD ファイルの SHA-256 ハッシュ値を署名の JSON ペ"
"イロードに含むことで RECORD ファイルに署名するために JWS が使われます:"

#: ../source/specifications/binary-distribution-format.rst:331
msgid "(The hash value is the same format used in RECORD.)"
msgstr "(ハッシュ値の書き方のフォーマットは RECORD で使われるものと同じです。)"

#: ../source/specifications/binary-distribution-format.rst:333
msgid ""
"If RECORD.p7s is used, it must contain a detached S/MIME format signature of "
"RECORD."
msgstr ""
"RECORD.p7s を使う場合は、このファイルに RECORD ファイルに関する分離型の S/"
"MIME 署名を入れておかなければなりません。"

#: ../source/specifications/binary-distribution-format.rst:336
msgid ""
"A wheel installer is not required to understand digital signatures but MUST "
"verify the hashes in RECORD against the extracted file contents. When the "
"installer checks file hashes against RECORD, a separate signature checker "
"only needs to establish that RECORD matches the signature."
msgstr ""
"wheel インストーラはデジタル署名を理解することを要求されてはいませんが、 "
"RECORD ファイル内のハッシュ値が展開されたファイル内容に対して妥当であることを"
"検証しなければなりません。インストーラが RECORD ファイルに対するハッシュ値を"
"確認する際には、別途用意された署名検証プログラムは RECORD ファイルが署名に対"
"して妥当であることだけを確認すれば十分です。"

#: ../source/specifications/binary-distribution-format.rst:341
msgid "See"
msgstr "以下を参照のこと"

#: ../source/specifications/binary-distribution-format.rst:343
msgid "https://datatracker.ietf.org/doc/html/rfc7515"
msgstr "https://datatracker.ietf.org/doc/html/rfc7515"

#: ../source/specifications/binary-distribution-format.rst:344
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"

#: ../source/specifications/binary-distribution-format.rst:345
msgid "https://datatracker.ietf.org/doc/html/rfc7517"
msgstr "https://datatracker.ietf.org/doc/html/rfc7517"

#: ../source/specifications/binary-distribution-format.rst:346
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"

#: ../source/specifications/binary-distribution-format.rst:350
#: ../source/specifications/platform-compatibility-tags.rst:370
msgid "FAQ"
msgstr "FAQ"

#: ../source/specifications/binary-distribution-format.rst:354
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""
"Wheel は .data ディレクトリを定義します。すべてのデータをそこに入れるべきで"
"しょうか？"

#: ../source/specifications/binary-distribution-format.rst:356
msgid ""
"This specification does not have an opinion on how you should organize your "
"code.  The .data directory is just a place for any files that are not "
"normally installed inside ``site-packages`` or on the PYTHONPATH. In other "
"words, you may continue to use ``pkgutil.get_data(package, resource)`` even "
"though *those* files will usually not be distributed in *wheel's* ``.data`` "
"directory."
msgstr ""
"この仕様では、あなたがあなたのソースコードをどのように組織立てて置くべきかに"
"ついては特に意見を表明していません。 .data ディレクトリは、 ``site-"
"packages`` 内や PYTHONPATH 内に通常ならインストールされない全てのファイルを置"
"く場所というだけのことです。換言すれば、 *そのような* ファイル群が通常なら "
"*wheel の* ``.data`` ディレクトリに置く形で配布されない時でさえも、 "
"``pkgutil.get_data(package, resource)`` を使い続けても構わないのです。"

#: ../source/specifications/binary-distribution-format.rst:365
msgid "Why does wheel include attached signatures?"
msgstr "なぜ wheel は添付された署名を持つのか？"

#: ../source/specifications/binary-distribution-format.rst:367
msgid ""
"Attached signatures are more convenient than detached signatures because "
"they travel with the archive.  Since only the individual files are signed, "
"the archive can be recompressed without invalidating the signature or "
"individual files can be verified without having to download the whole "
"archive."
msgstr ""
"添付された署名は、アーカイブと一体のものとして転送されるので、分離署名よりも"
"便利です。個々のファイルが署名されているだけなので、アーカイブを圧縮し直して"
"も署名が無効にならず、また、アーカイブ全体をダウンロードしなくても個々のファ"
"イルの検証を行うことができます。"

#: ../source/specifications/binary-distribution-format.rst:375
msgid "Why does wheel allow JWS signatures?"
msgstr "なぜ wheel は JWS 署名を許容するのか？"

#: ../source/specifications/binary-distribution-format.rst:377
msgid ""
"The JOSE specifications of which JWS is a part are designed to be easy to "
"implement, a feature that is also one of wheel's primary design goals.  JWS "
"yields a useful, concise pure-Python implementation."
msgstr ""
"JWS がその一部を構成する JOSE の仕様は実装を容易にするように設計されており、"
"その性質は wheel の基本的な設計目標のひとつでもあります。 JWS は使いやすくて"
"簡潔な純 Python の実装をもたらします。"

#: ../source/specifications/binary-distribution-format.rst:383
msgid "Why does wheel also allow S/MIME signatures?"
msgstr "なぜ wheel は S/MIME 署名をも許容するのか？"

#: ../source/specifications/binary-distribution-format.rst:385
msgid ""
"S/MIME signatures are allowed for users who need or want to use existing "
"public key infrastructure with wheel."
msgstr ""
"S/MIME 署名は、既存の公開鍵基盤を wheel でも採用する必要があるか、または、採"
"用したいユーザのために許容されています。"

#: ../source/specifications/binary-distribution-format.rst:388
msgid ""
"Signed packages are only a basic building block in a secure package update "
"system.  Wheel only provides the building block."
msgstr ""
"署名されたパッケージは、セキュアなパッケージ更新システムを構成するひとつのビ"
"ルディングブロックであるというだけのものです。 Wheel としては、単にビルディン"
"グブロックを提供するだけです。"

#: ../source/specifications/binary-distribution-format.rst:393
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr "\"pure lib\" と \"plat lib\" って、どう扱えばいいの？"

#: ../source/specifications/binary-distribution-format.rst:395
msgid ""
"Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is "
"significant on some platforms. For example, Fedora installs pure Python "
"packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent "
"packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""
"Wheel は \"purelib\" と \"platlib\" を区別して扱いますが、これらはプラット"
"フォームによっては大きな違いがあります。例えば、 Fedora では純 Python のパッ"
"ケージを '/usr/lib/pythonX.Y/site-packages' にインストールし、プラットフォー"
"ムに依存しないパッケージを '/usr/lib64/pythonX.Y/site-packages' にインストー"
"ルします。"

#: ../source/specifications/binary-distribution-format.rst:400
msgid ""
"A wheel with \"Root-Is-Purelib: false\" with all its files in ``{name}-"
"{version}.data/purelib`` is equivalent to a wheel with \"Root-Is-Purelib: "
"true\" with those same files in the root, and it is legal to have files in "
"both the \"purelib\" and \"platlib\" categories."
msgstr ""
"``{name}-{version}.data/purelib`` 内の全てのファイルについて \"Root-Is-"
"Purelib: false\" という設定になっている wheel ファイルは、同じファイルがルー"
"トディレクトリ内にあって \"Root-Is-Purelib: true\" になっている wheel ファイ"
"ルと相同であり、 \"purelib\" と \"platlib\" の両カテゴリにファイル群が存在す"
"ることには問題がありません。"

#: ../source/specifications/binary-distribution-format.rst:405
msgid ""
"In practice a wheel should have only one of \"purelib\" or \"platlib\" "
"depending on whether it is pure Python or not and those files should be at "
"the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""
"実際のところ、 wheel は、それが純 Python なのかそうでないのかによって "
"\"purelib\" または \"platlib\" のいずれか一方しか持たず、 \"Root-Is-"
"purelib\" を適切に設定しつつファイル群をルートディレクトリに置くべきです。"

#: ../source/specifications/binary-distribution-format.rst:413
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""
"Python のソースコードを wheel ファイルから直接にインポートすることはできます"
"か？"

#: ../source/specifications/binary-distribution-format.rst:415
msgid ""
"Technically, due to the combination of supporting installation via simple "
"extraction and using an archive format that is compatible with "
"``zipimport``, a subset of wheel files *do* support being placed directly on "
"``sys.path``. However, while this behaviour is a natural consequence of the "
"format design, actually relying on it is generally discouraged."
msgstr ""
"技術的な話としては、単純に展開するだけでインストールできる機能と "
"``zipimport`` と互換性のあるアーカイブフォーマットの両方をサポートしているの"
"で、一部の wheel ファイルは ``sys.path`` に直接に置くことを *サポートしていま"
"す* 。しかし、このような動作はフォーマット設計の自然な結果とはいうものの、実"
"際にはこれに依存することは一般的には推奨されていません。"

#: ../source/specifications/binary-distribution-format.rst:421
msgid ""
"Firstly, wheel *is* designed primarily as a distribution format, so skipping "
"the installation step also means deliberately avoiding any reliance on "
"features that assume full installation (such as being able to use standard "
"tools like ``pip`` and ``virtualenv`` to capture and manage dependencies in "
"a way that can be properly tracked for auditing and security update "
"purposes, or integrating fully with the standard build machinery for C "
"extensions by publishing header files in the appropriate place)."
msgstr ""
"第一に、wheel は一義的に配布物のフォーマットとして *設計されている* ので、イ"
"ンストールの段階を省略するということは、完全なインストールがなされているもの"
"と仮定している機能 (例えば、正当性監査やセキュリティアップデートのために正し"
"く追跡することができるひとつの方法であるところの ``pip`` や ``virtualenv`` の"
"ような標準ツールを使った依存関係の捕捉や管理の機能、あるいは、ヘッダファイル"
"を適切な場所に公開することによって C 言語拡張をビルドする標準的な機構を完全に"
"統合する機能) への信頼を故意に避けることになります。"

#: ../source/specifications/binary-distribution-format.rst:430
msgid ""
"Secondly, while some Python software is written to support running directly "
"from a zip archive, it is still common for code to be written assuming it "
"has been fully installed. When that assumption is broken by trying to run "
"the software from a zip archive, the failures can often be obscure and hard "
"to diagnose (especially when they occur in third party libraries). The two "
"most common sources of problems with this are the fact that importing C "
"extensions from a zip archive is *not* supported by CPython (since doing so "
"is not supported directly by the dynamic loading machinery on any platform) "
"and that when running from a zip archive the ``__file__`` attribute no "
"longer refers to an ordinary filesystem path, but to a combination path that "
"includes both the location of the zip archive on the filesystem and the "
"relative path to the module inside the archive. Even when software correctly "
"uses the abstract resource APIs internally, interfacing with external "
"components may still require the availability of an actual on-disk file."
msgstr ""
"第二に、 Python のソフトウェアの中には zip アーカイブから直接に動作させること"
"をサポートするように書かれているものもありますが、やはり完全にインストールさ"
"れることを前提にして書かれたソースコードが今も普通です。 zip アーカイブからソ"
"フトウェアを走らせようと試みてこの仮定を崩すと、 (とりわけ失敗動作がサード"
"パーティのライブラリで起きる場合には) しばしば失敗動作がわかりにくく原因究明"
"が困難になるでしょう。この問題の最もありがちなふたつの根源は、 C 言語拡張を "
"zip アーカイブからインポートすることが CPython では *サポートされていない* こ"
"と (というのは、どんなプラットフォームの動的ローディング機構でもこのような動"
"作が直接にはサポートされていないから) 、および、 zip アーカイブから動作する際"
"には ``__file__`` 属性がもはや普通のファイルシステム上のファイルパスを参照し"
"ておらず、 zip アーカイブのファイルシステム上の置き場所のパスとアーカイブ内の"
"モジュールへの相対パスの両方を含んだ連結パスになることです。ソフトウェア内で"
"は抽象化された資源への API 群を正しく扱えたとしても、外部の部品とのインタフェ"
"イスは依然として実際にディスク上に存在するファイルがないと動作できないかもし"
"れません。"

#: ../source/specifications/binary-distribution-format.rst:447
msgid ""
"Like metaclasses, monkeypatching and metapath importers, if you're not "
"already sure you need to take advantage of this feature, you almost "
"certainly don't need it. If you *do* decide to use it anyway, be aware that "
"many projects will require a failure to be reproduced with a fully installed "
"package before accepting it as a genuine bug."
msgstr ""
"メタクラスと同様に、モンキーパッチングとメタパスからのインポートは、この機能"
"を使う利点をあなたが本当に必要としていると確信しているのでなければ、おそらく"
"あなたはこの機能を使う必要がないと思われます。兎にも角にもこれを使う *意思を"
"固めた* のであれば、 (訳注、この機能を使った時に生じた) ある動作不良を真性の"
"バグであると認めてもらう前に、多くのプロジェクトではそれを完全インストールの"
"状態で再現するように要求されるであろうということを認識しておいてください。"

#: ../source/specifications/binary-distribution-format.rst:455
#: ../source/specifications/core-metadata.rst:924
#: ../source/specifications/dependency-groups.rst:250
#: ../source/specifications/dependency-specifiers.rst:516
#: ../source/specifications/direct-url-data-structure.rst:292
#: ../source/specifications/direct-url.rst:67
#: ../source/specifications/entry-points.rst:164
#: ../source/specifications/externally-managed-environments.rst:472
#: ../source/specifications/inline-script-metadata.rst:213
#: ../source/specifications/name-normalization.rst:50
#: ../source/specifications/platform-compatibility-tags.rst:434
#: ../source/specifications/pylock-toml.rst:826
#: ../source/specifications/pyproject-toml.rst:531
#: ../source/specifications/recording-installed-packages.rst:278
#: ../source/specifications/simple-repository-api.rst:1012
#: ../source/specifications/source-distribution-format.rst:153
#: ../source/specifications/version-specifiers.rst:1269
#: ../source/specifications/virtual-environments.rst:54
msgid "History"
msgstr "歴史"

#: ../source/specifications/binary-distribution-format.rst:457
msgid "February 2013: This specification was approved through :pep:`427`."
msgstr "2013年2月: :pep:`427` を通じてこの仕様書が承認されました。"

#: ../source/specifications/binary-distribution-format.rst:458
msgid ""
"February 2021: The rules on escaping in wheel filenames were revised, to "
"bring them into line with what popular tools actually do."
msgstr ""
"2021年2月: 他の普及しているツールが実際にやるのと同じやり方に合わせて、 "
"wheel のファイル名におけるエスケーピングの規則が修正されました。"

#: ../source/specifications/binary-distribution-format.rst:460
msgid ""
"December 2024: Clarified that the ``scripts`` folder should only contain "
"regular files (the expected behaviour of consuming tools when encountering "
"symlinks or subdirectories in this folder is not formally defined, and hence "
"may vary between tools)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:464
#: ../source/specifications/recording-installed-packages.rst:288
#, fuzzy
#| msgid ""
#| "September 2022: The filename of a source distribution was standardized "
#| "through :pep:`625`."
msgid ""
"December 2024: The :file:`.dist-info/licenses/` directory was specified "
"through :pep:`639`."
msgstr ""
"2022年9月: :pep:`625` を通じて、ソースコード配布物のファイル名を標準化した。"

#: ../source/specifications/binary-distribution-format.rst:466
msgid ""
"January 2025: Clarified that name and version needs to be normalized for ``."
"dist-info`` and ``.data`` directories."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:471
msgid "Appendix"
msgstr "補遺"

#: ../source/specifications/binary-distribution-format.rst:473
msgid "Example urlsafe-base64-nopad implementation::"
msgstr "urlsafe-base64-nopad の実装の例::"

#: ../source/specifications/build-details/index.rst:7
#: ../source/specifications/build-details/index.rst:41
msgid "v1.0"
msgstr ""

#: ../source/specifications/build-details/index.rst:5
msgid ":file:`build-details.json`"
msgstr ""

#: ../source/specifications/build-details/index.rst:13
msgid ""
"The ``build-details.json`` file is a standardized file format that provides "
"build-specfic information of a Python installation, such as its version, "
"extension ABI details, and other information that is specific to that "
"particular build of Python."
msgstr ""

#: ../source/specifications/build-details/index.rst:18
msgid ""
"Starting from Python 3.14, a ``build-details.json`` file is installed in the "
"platform-independent standard library directory (``stdlib``, e.g. ``/usr/lib/"
"python3.14/build-details.json``)."
msgstr ""

#: ../source/specifications/build-details/index.rst:22
msgid ""
"Please refer to the :ref:`latest version <build-details-v1.0>` for its "
"specification."
msgstr ""

#: ../source/specifications/build-details/index.rst:28
#: ../source/specifications/build-details/v1.0.rst:16
#: ../source/specifications/inline-script-metadata.rst:100
#: ../source/specifications/pylock-toml.rst:722
msgid "Example"
msgstr "例"

#: ../source/specifications/build-details/index.rst:35
#, fuzzy
#| msgid "Changes"
msgid "Changelog"
msgstr "変更点"

#: ../source/specifications/build-details/index.rst:45
#: ../source/specifications/build-details/v1.0.rst:9
#: ../source/specifications/dependency-groups.rst:20
#: ../source/specifications/dependency-specifiers.rst:26
#: ../source/specifications/direct-url-data-structure.rst:19
#: ../source/specifications/direct-url.rst:15
#: ../source/specifications/file-yanking.rst:20
#: ../source/specifications/index-hosted-attestations.rst:17
#: ../source/specifications/inline-script-metadata.rst:13
#: ../source/specifications/license-expression.rst:12
#: ../source/specifications/project-status-markers.rst:20
msgid "Specification"
msgstr "仕様"

#: ../source/specifications/build-details/index.rst:46
msgid ":ref:`build-details-v1.0`"
msgstr ""

#: ../source/specifications/build-details/index.rst:48
#, fuzzy
#| msgid "JSON Schema"
msgid "Schema"
msgstr "JSON スキーマ"

#: ../source/specifications/build-details/index.rst:49
#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"https://packaging.python.org/en/latest/specifications/schemas/build-details-"
"v1.0.schema.json"
msgstr ""

#: ../source/specifications/build-details/index.rst:52
msgid "Initial version, introduced by :pep:`739`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:5
msgid "``build-details.json`` v1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"*build-details.json — a static description file with build details of Python "
"installations*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "type"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Project"
msgid "*object*"
msgstr "プロジェクト"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "properties"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**schema\\_version**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Semantic versioning"
msgid "Schema version."
msgstr "セマンティックバージョニング"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This is a string following the format ``<MAJOR>.<MINOR>``, where ``<MAJOR>`` "
"and ``<MINOR>`` are unpaded numbers and represent the **major** and "
"**minor** components of the version. Versions may be arithmetically compared "
"by intrepreting the version string as a decimal number."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"For this specification version, this value is constant and **MUST** be "
"``1.0``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Future versions of this schema **MUST** use a higher version number. Future "
"versions of this schema **MUST NOT** use the same **major** version "
"component as other schema version unless its specification is deemed "
"backwards-compatible with them — it can't change, or extend, any parts of "
"the current specification in such a way as the semantics of the interpreted "
"data differ, or that data valid under the new specification is invalid under "
"the older specification, with the exception of additional properties (errors "
"caused by ``additionalProperties``)."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*string*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "enscons"
msgid "const"
msgstr "enscons"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**base\\_prefix**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Base prefix of the Python installation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Either an absolute path, or a path relative to directory where this file is "
"contained."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Examples"
msgid "examples"
msgstr "例"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "../.."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "base\\_interpreter"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the Python interprer of the base installation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Either an absolute path, or a path relative to ``base_prefix``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the installation provides an interpreter "
"executable."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/bin/python"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "bin/python"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "platform tag"
msgid "**platform**"
msgstr "プラットフォームタグ"

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "platform tag"
msgid "System platform string."
msgstr "プラットフォームタグ"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "This field **SHOULD** be equivalent to ``sysconfig.get_platform()``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "linux_x86_64"
msgid "linux-x86\\_64"
msgstr "linux_x86_64"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**language**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the Python language specification."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Versions"
msgid "**version**"
msgstr "バージョン指定子"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"String representation the Python language version — a version string "
"consisting only of the *major* and *minor* components."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **SHOULD** be equivalent to ``sysconfig.get_python_version()``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Versioning"
msgid "version\\_info"
msgstr "バージョニング"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object in the format of :py:data:`sys.version_info`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "This section **SHOULD** be equivalent to :py:data:`sys.version_info`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "major"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "3"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "minor"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "micro"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "1"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Release"
msgid "releaselevel"
msgstr "リリース"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "final"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Mercurial"
msgid "serial"
msgstr "Mercurial"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**major**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Numbers**"
msgid "*number*"
msgstr "**数値の書き方**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**minor**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**micro**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**releaselevel**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "enum"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "alpha, beta, candidate, final"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**serial**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Additional notes"
msgid "additionalProperties"
msgstr "補遺"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "False"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Implementation Notes"
msgid "**implementation**"
msgstr "実装に関する覚書"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to Python implementation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **SHOULD** be equivalent to :py:data:`sys.implementation`. It "
"follows specification defined in PEP 421, meaning that on top of the "
"required keys, implementation-specific keys can also exist, but must be "
"prefixed with an underscore."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**name**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Lower-case name of the Python implementation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "cpython"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "pypy"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Object in the format of :py:data:`sys.version_info`, containing the "
"implementation version."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "7"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "16"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "True"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "abi tag"
msgid "abi"
msgstr "abi タグ"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Headings**"
msgid "**flags**"
msgstr "**見出しの付け方**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Build configuration flags, used to calculate the extension suffix."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"The flags **MUST** be defined in the order they appear on the extension "
"suffix."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*array*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "t"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "d"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "extension\\_suffix"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Suffix used for extensions built against the current implementation version."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation supports "
"extensions, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".cpython-314-x86\\_64-linux-gnu.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "stable\\_abi\\_suffix"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Suffix used for extensions built against the stable ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation has a stable ABI "
"extension suffix, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".abi3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "suffixes"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Valid module suffixes grouped by type."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** be present if the Python installation supports "
"importing external files, and it **SHOULD** be equivalent to the ``importlib."
"machinery.*_SUFFIXES`` attributes."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Additionally, if a Python implementation provides extension kinds other than "
"the ones listed on ``importlib.machinery`` module, they **MAY** add a sub-"
"section for them."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "source"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".py"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".pyc"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "optimized_bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "debug_bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Versions"
msgid "extensions"
msgstr "バージョン指定子"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".cpython-313-x86\\_64-linux-gnu.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "libpython"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** by present if Python installation provides a "
"``libpython`` library, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "``dynamic``"
msgid "dynamic"
msgstr "``dynamic``"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the dynamic ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a dynamic "
"``libpython`` library, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/libpython3.14.so.1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/libpython3.14.so.1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "dynamic\\_stableabi"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the dynamic ``libpython`` library for the stable ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a dynamic "
"``libpython`` library targeting the Stable ABI, otherwise this entry will be "
"missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "If this key is present ``dynamic`` **MUST** also be set."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/libpython3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/libpython3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "static"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the static ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a static "
"``libpython`` library, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/python3.14/config-3.14-x86\\_64-linux-gnu/libpython3.14.a"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/python3.14/config-3.14-x86\\_64-linux-gnu/libpython3.14.a"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Building binary extensions"
msgid "link\\_extensions"
msgstr "バイナリ拡張をビルドする"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Should extensions built against a dynamic ``libpython`` link to it?"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*boolean*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "c\\_api"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the Python C API."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** be present if the Python implementation provides a C "
"API, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Numbers**"
msgid "**headers**"
msgstr "**数値の書き方**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the C API headers."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/include/python3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "include/python3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "pkgconfig\\_path"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the pkg-config definition files."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation provides pkg-"
"config definition files, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/pkgconfig"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/pkgconfig"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Arbitrary equality"
msgid "arbitrary\\_data"
msgstr "あらゆる意味での同一性 <Arbitrary equality>"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing extra arbitrary data."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This is meant to be used as an escape-hatch, to include any relevant data "
"that is not covered by this specification. Implementations may choose what "
"data to provide in this section."
msgstr ""

#: ../source/specifications/core-metadata.rst:7
msgid "Core metadata specifications"
msgstr "コアとなるメタデータの仕様"

#: ../source/specifications/core-metadata.rst:9
msgid "This page describes version 2.4, approved in August 2024."
msgstr ""

#: ../source/specifications/core-metadata.rst:11
msgid ""
"Fields defined in the following specification should be considered valid, "
"complete and not subject to change. The required fields are:"
msgstr ""
"この後の仕様の中で定義されるフィールドは、正当かつ完全であって、変更の可能性"
"がないものと見做されるべきです。必須のフィールドは以下の通り:"

#: ../source/specifications/core-metadata.rst:14
msgid "``Metadata-Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:15
msgid "``Name``"
msgstr "``Name``"

#: ../source/specifications/core-metadata.rst:16
msgid "``Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:18
msgid "All the other fields are optional."
msgstr "これら以外のすべてのフィールドは必須のものではありません。"

#: ../source/specifications/core-metadata.rst:20
msgid ""
"The standard file format for metadata (including in :doc:`wheels <binary-"
"distribution-format>` and :doc:`installed projects <recording-installed-"
"packages>`) is based on the format of email headers. However, email formats "
"have been revised several times, and exactly which email RFC applies to "
"packaging metadata is not specified. In the absence of a precise definition, "
"the practical standard is set by what the standard library :mod:`python:"
"email.parser` module can parse using the :data:`~.python:email.policy."
"compat32` policy."
msgstr ""
"(:doc:`wheels <binary-distribution-format>` および :doc:`インストール済みのプ"
"ロジェクト <recording-installed-packages>` の両文書に含まれる) メタデータのた"
"めの標準的なファイルフォーマットは、電子メールのヘッダーのフォーマットに基い"
"ています。しかしながら、電子メールのフォーマットは何度か修正が入っています"
"が、正確にはどの電子メールの RFC がパッケージングのメタデータに適用されるのか"
"については指定がありません。精密な定義が欠落しているので、標準ライブラリの :"
"mod:`python:email.parser` モジュールが :data:`~.python:email.policy."
"compat32` のポリシーを用いて読み込むことができるものを実務上の標準として設定"
"しています。"

#: ../source/specifications/core-metadata.rst:29
msgid ""
"Whenever metadata is serialised to a byte stream (for example, to save to a "
"file), strings must be serialised using the UTF-8 encoding."
msgstr ""
"メタデータをバイト列 (例えばファイルに保存するために) にシリアル化する際には"
"いつでも、文字列を UTF-8 エンコーディングを用いてシリアル化しなければなりませ"
"ん。"

#: ../source/specifications/core-metadata.rst:32
msgid ""
"Although :pep:`566` defined a way to transform metadata into a JSON-"
"compatible dictionary, this is not yet used as a standard interchange "
"format. The need for tools to work with years worth of existing packages "
"makes it difficult to shift to a new format."
msgstr ""
":pep:`566` でメタデータを JSON 互換の辞書型に変換する一つの方法を定義していま"
"すが、標準の交換フォーマットとしてはまだ使われていません。既に何年間も使われ"
"てきた既存のパッケージと共に動作するツールが必要なので、新しいフォーマットに"
"移行することは困難なのです。"

#: ../source/specifications/core-metadata.rst:37
msgid ""
"*Interpreting old metadata:* In :pep:`566`, the version specifier field "
"format specification was relaxed to accept the syntax used by popular "
"publishing tools (namely to remove the requirement that version specifiers "
"must be surrounded by parentheses). Metadata consumers may want to use the "
"more relaxed formatting rules even for metadata files that are nominally "
"less than version 2.1."
msgstr ""
"*古い形式のメタデータを翻訳する:* :pep:`566` では、バージョン指定子フィールド"
"のフォーマット仕様がよく用いられている公開ツール群で使われる構文を受け入れる "
"(正確にはバージョン指定子が丸括弧で囲まれていなければならないという要求事項を"
"削除することによって) ようにと緩められました。メタデータを使う側としては、メ"
"タデータファイルが名ばかりのものとなっている 2.1 よりも前のバージョンであって"
"さえも、もっと寛容なフォーマット規則を使いたいかもしれません。"

#: ../source/specifications/core-metadata.rst:48
msgid "Metadata-Version"
msgstr "Metadata-Version"

#: ../source/specifications/core-metadata.rst:52
#, fuzzy
#| msgid ""
#| "Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", "
#| "\"2.1\", \"2.2\", and \"2.3\"."
msgid ""
"Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", "
"\"2.1\", \"2.2\", \"2.3\", and \"2.4\"."
msgstr ""
"ファイルフォーマットのバージョン; 正しいものは \"1.0\", \"1.1\", \"1.2\", "
"\"2.1\", \"2.2\", と \"2.3\"。"

#: ../source/specifications/core-metadata.rst:55
msgid ""
"Automated tools consuming metadata SHOULD warn if ``metadata_version`` is "
"greater than the highest version they support, and MUST fail if "
"``metadata_version`` has a greater major version than the highest version "
"they support (as described in the :ref:`Version specifier specification "
"<version-specifiers>`, the major version is the value before the first dot)."
msgstr ""
"メタデータを処理する自動化ツールは、 ``metadata_version`` が自身のサポートす"
"る最大のものより大きい場合には警告を行うべきであり、かつ、 "
"``metadata_version`` が自身のサポートする最大のメジャーバージョンより大きいメ"
"ジャーバージョンを持つ場合には異常終了しなければなりません (:ref:`バージョン"
"指定子 <Version specifier>` に記述されている通り、メジャーバージョンとはバー"
"ジョンのうち最初のドットよりも前の部分です) 。"

#: ../source/specifications/core-metadata.rst:62
msgid ""
"For broader compatibility, build tools MAY choose to produce distribution "
"metadata using the lowest metadata version that includes all of the needed "
"fields."
msgstr ""
"より広く互換性を保つために、ビルドツールは、必要なフィールドをすべて含む前提"
"で最も古いバージョンのメタデータ仕様を使って配布物のメタデータを生成するとい"
"う選択を行なっても構いません。"

#: ../source/specifications/core-metadata.rst:66
#: ../source/specifications/core-metadata.rst:84
#: ../source/specifications/core-metadata.rst:101
#: ../source/specifications/core-metadata.rst:166
#: ../source/specifications/core-metadata.rst:181
#: ../source/specifications/core-metadata.rst:219
#: ../source/specifications/core-metadata.rst:291
#: ../source/specifications/core-metadata.rst:295
#: ../source/specifications/core-metadata.rst:299
#: ../source/specifications/core-metadata.rst:303
#: ../source/specifications/core-metadata.rst:335
#: ../source/specifications/core-metadata.rst:357
#: ../source/specifications/core-metadata.rst:375
#: ../source/specifications/core-metadata.rst:400
#: ../source/specifications/core-metadata.rst:422
#: ../source/specifications/core-metadata.rst:642
#: ../source/specifications/core-metadata.rst:677
#: ../source/specifications/core-metadata.rst:687
#: ../source/specifications/core-metadata.rst:821
#: ../source/specifications/core-metadata.rst:918
msgid "Example::"
msgstr "例::"

#: ../source/specifications/core-metadata.rst:74
msgid "Name"
msgstr ""

#: ../source/specifications/core-metadata.rst:77
msgid "Added restrictions on format from the :ref:`name format <name-format>`."
msgstr ""
":ref:`名称のフォーマット <name-format>` から採用したフォーマットに対する制限"
"を追加した。"

#: ../source/specifications/core-metadata.rst:80
msgid ""
"The name of the distribution. The name field is the primary identifier for a "
"distribution. It must conform to the :ref:`name format specification <name-"
"format>`."
msgstr ""
"配布物の名称。name フィールドは配布物の最も基本的な識別子です。 :ref:`名称"
"フォーマット仕様 <name-format>` を満たしていなければなりません。"

#: ../source/specifications/core-metadata.rst:88
msgid ""
"For comparison purposes, the names should be :ref:`normalized <name-"
"normalization>` before comparing."
msgstr ""
"比較の目的のためにも、名前は比較の前に :ref:`正規化 <name-normalization>` さ"
"れているべきです。"

#: ../source/specifications/core-metadata.rst:93
msgid "Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:97
msgid ""
"A string containing the distribution's version number.  This field  must be "
"in the format specified in the :ref:`Version specifier specification "
"<version-specifiers>`."
msgstr ""
"配布物のバージョン番号を格納する文字列。このフィールドは :ref:`バージョン指定"
"子仕様 <version-specifiers>` で規定されるフォーマットでなければなりません。"

#: ../source/specifications/core-metadata.rst:109
msgid "Dynamic (multiple use)"
msgstr "Dyanamic (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:113
msgid ""
"A string containing the name of another core metadata field. The field names "
"``Name``, ``Version``, and ``Metadata-Version`` may not be specified in this "
"field."
msgstr ""
"別のコアとなるメタデータのフィールドの名前を包含した文字列。フィールド名の "
"``Name`` ・ ``Version`` ・ ``Metadata-Version`` をこのフィールドに指定しては"
"なりません。"

#: ../source/specifications/core-metadata.rst:117
msgid ""
"When found in the metadata of a source distribution, the following rules "
"apply:"
msgstr ""
"ソースコード配布物のメタデータ中に見つかった場合には、以下の規則を適用します:"

#: ../source/specifications/core-metadata.rst:120
msgid ""
"If a field is *not* marked as ``Dynamic``, then the value of the field in "
"any wheel built from the sdist MUST match the value in the sdist. If the "
"field is not in the sdist, and not marked as ``Dynamic``, then it MUST NOT "
"be present in the wheel."
msgstr ""
"フィールドが ``Dynamic`` と *マークされていない* 場合は、 sdist からビルドさ"
"れたどの wheel であっても、そのフィールドの値が sdist での値と一致しなければ"
"なりません。そのフィールドが sdist には存在せず、かつ、 ``Dynamic`` とマーク"
"されていない場合には、そのようなフィールドは wheel に出現してはなりません。"

#: ../source/specifications/core-metadata.rst:124
msgid ""
"If a field is marked as ``Dynamic``, it may contain any valid value in a "
"wheel built from the sdist (including not being present at all)."
msgstr ""
"フィールドが ``Dynamic`` とマークされている場合、 (ひとつも存在しない場合も含"
"めて) sdist からビルドされた wheel 内のどんな正当な値を取っても構いません。"

#: ../source/specifications/core-metadata.rst:127
msgid ""
"If the sdist metadata version is older than version 2.2, then all fields "
"should be treated as if they were specified with ``Dynamic`` (i.e. there are "
"no special restrictions on the metadata of wheels built from the sdist)."
msgstr ""
"sdist のメタデータバージョンがバージョン 2.2 よりも古い場合には、すべての"
"フィールドが ``Dynamic`` であると指定されたかのように (つまり、その sdist か"
"らビルドされた wheel のメタデータに何も特別な制約がないかのように) 取り扱うべ"
"きです。"

#: ../source/specifications/core-metadata.rst:131
msgid ""
"In any context other than a source distribution, ``Dynamic`` is for "
"information only, and indicates that the field value was calculated at wheel "
"build time, and may not be the same as the value in the sdist or in other "
"wheels for the project."
msgstr ""
"ソースコード配布物を除くすべての文脈で、 ``Dynamic`` は情報提供の目的のみであ"
"り、そのフィールドの値がビルドの際に計算されたものであって、 sdist や同じプロ"
"ジェクトでも他の wheel ファイルでは異なる場合があることを示します。"

#: ../source/specifications/core-metadata.rst:136
msgid ""
"Full details of the semantics of ``Dynamic`` are described in :pep:`643`."
msgstr "``Dynamic`` の詳細かつ完全な意味は :pep:`643` に記述されています。"

#: ../source/specifications/core-metadata.rst:141
msgid "Platform (multiple use)"
msgstr "Platform (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:145
msgid ""
"A Platform specification describing an operating system supported by the "
"distribution which is not listed in the \"Operating System\" Trove "
"classifiers. See \"Classifier\" below."
msgstr ""
"Platform の仕様は、その配布物がサポートするオペレーティングシステムを記述した"
"もので、 \"Operating System\" Trove 分類子には記載されていないもの。後述の "
"\"分類子 <Classifier>\" を見てください。"

#: ../source/specifications/core-metadata.rst:149
#: ../source/specifications/core-metadata.rst:455
#: ../source/specifications/core-metadata.rst:476
#: ../source/specifications/core-metadata.rst:499
#: ../source/specifications/core-metadata.rst:528
#: ../source/specifications/core-metadata.rst:569
#: ../source/specifications/core-metadata.rst:625
#: ../source/specifications/core-metadata.rst:762
#: ../source/specifications/core-metadata.rst:792
#: ../source/specifications/core-metadata.rst:872
#: ../source/specifications/core-metadata.rst:894
msgid "Examples::"
msgstr "例::"

#: ../source/specifications/core-metadata.rst:157
msgid "Supported-Platform (multiple use)"
msgstr "Supported-Platform (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:161
msgid ""
"Binary distributions containing a PKG-INFO file will use the Supported-"
"Platform field in their metadata to specify the OS and CPU for which the "
"binary distribution was compiled.  The semantics of the Supported-Platform "
"field are not specified in this PEP."
msgstr ""
"PKG-INFO ファイルを含むバイナリ配布物は、内包するメタデータの中の Supported-"
"Platform フィールドを使って当該バイナリ配布物がどの OS や CPU 向けにコンパイ"
"ルされたかを指定することになるでしょう。 Supported-Platform フィールドのセマ"
"ンティクスは PEP には定義されたものがありません。"

#: ../source/specifications/core-metadata.rst:175
msgid "Summary"
msgstr "Summary"

#: ../source/specifications/core-metadata.rst:179
msgid "A one-line summary of what the distribution does."
msgstr "その配布物が何をするものかを１行で記述した要約。"

#: ../source/specifications/core-metadata.rst:199
msgid "This field may be specified in the message body instead."
msgstr "このフィールドの代わりにメッセージ本体で指定しても構いません。"

#: ../source/specifications/core-metadata.rst:202
msgid ""
"A longer description of the distribution that can run to several "
"paragraphs.  Software that deals with metadata should not assume any maximum "
"size for this field, though people shouldn't include their instruction "
"manual as the description."
msgstr ""
"配布物に関する長めの説明文で、いくつかの段落に渡ってもかまいません。取扱説明"
"書並みの記述をするべきではありませんが、メタデータを扱うソフトウェアはこの"
"フィールドに最大長さがあるものと仮定すべきではありません。"

#: ../source/specifications/core-metadata.rst:207
msgid ""
"The contents of this field can be written using reStructuredText markup "
"[1]_.  For programs that work with the metadata, supporting markup is "
"optional; programs can also display the contents of the field as-is.  This "
"means that authors should be conservative in the markup they use."
msgstr ""
"このフィールドの内容は、 reStructuredText マークアップ [1]_ を使って書いても"
"構いません。メタデータを取り扱うプログラムの側ではマークアップをサポートして"
"もしなくてもかまわず、サポートしない場合にはこのフィールドの内容をそのまま表"
"示することも可能です。つまり、作者の側は、自分が採用するマークアップ言語につ"
"いては保守的であるべきだということになります。"

#: ../source/specifications/core-metadata.rst:213
msgid ""
"To support empty lines and lines with indentation with respect to the RFC "
"822 format, any CRLF character has to be suffixed by 7 spaces followed by a "
"pipe (\"|\") char. As a result, the Description field is encoded into a "
"folded field that can be interpreted by RFC822 parser [2]_."
msgstr ""
"空行および RFC 822 に従う字下げをサポートするために、すべての CRLF 文字には７"
"個の空白文字と１個のパイプ文字 (\"|\") がこの順に並ぶ文字列が後続しなければな"
"りません。その結果として、Description フィールドが RFC 822 構文解析器 [2]_ で"
"解析可能な形の改行可能なフィールドにエンコードされます。"

#: ../source/specifications/core-metadata.rst:230
msgid ""
"This encoding implies that any occurrences of a CRLF followed by 7 spaces "
"and a pipe char have to be replaced by a single CRLF when the field is "
"unfolded using a RFC822 reader."
msgstr ""
"このエンコーディングが意味するところは、その折り畳まれたフィールドをRFC822 読"
"み取り器で読み取る時には、CRLF と７個の空白文字とそれに引き続くパイプ文字が出"
"現するたびにそれを単独の CRLF に置き換えなければならないということです。"

#: ../source/specifications/core-metadata.rst:234
msgid ""
"Alternatively, the distribution's description may instead be provided in the "
"message body (i.e., after a completely blank line following the headers, "
"with no indentation or other special formatting necessary)."
msgstr ""
"代替策として、配布物に関する説明を代わりにメッセージボディに書く (つまり、字"
"下げやその他の特別なフォーマットを使わずに、ヘッダの並びの後の完全な空行に続"
"けて書く) こともできます。"

#: ../source/specifications/core-metadata.rst:243
msgid "Description-Content-Type"
msgstr "Description-Content-Type"

#: ../source/specifications/core-metadata.rst:247
msgid ""
"A string stating the markup syntax (if any) used in the distribution's "
"description, so that tools can intelligently render the description."
msgstr ""
"配布物の説明で使われるマークアップ構文 (もしあれば) を述べる文字列で、ツール"
"の側が頭の良いやり方で説明を表示することができます。"

#: ../source/specifications/core-metadata.rst:250
msgid ""
"Historically, PyPI supported descriptions in plain text and "
"`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
"restructuredtext.html>`_, and could render reST into HTML. However, it is "
"common for distribution authors to write the description in `Markdown "
"<https://daringfireball.net/projects/markdown/>`_ (:rfc:`7763`) as many code "
"hosting sites render Markdown READMEs, and authors would reuse the file for "
"the description. PyPI didn't recognize the format and so could not render "
"the description correctly. This resulted in many packages on PyPI with "
"poorly-rendered descriptions when Markdown is left as plain text, or worse, "
"was attempted to be rendered as reST. This field allows the distribution "
"author to specify the format of their description, opening up the "
"possibility for PyPI and other tools to be able to render Markdown and other "
"formats."
msgstr ""
"歴史的には PyPI はプレーンテキストおよび `reStructuredText (reST) <https://"
"docutils.sourceforge.io/docs/ref/rst/restructuredtext.html>`_ での "
"description をサポートし、 reST を HTML として表示することができました。しか"
"しながら、多くのソースコード管理サイトが Markdown の README を表示するように"
"なったので、配布物の作者たちが description を `Markdown <https://"
"daringfireball.net/projects/markdown/>`_ (:rfc:`7763`) で書くことが普通にな"
"り、作者たちはそのファイルを description として再利用するようになってきまし"
"た。 PyPI はこのフォーマットを認識せず、従って description の内容を正しく表示"
"することができませんでした。その結果、 PyPI 上の多くのパッケージで Markdown "
"がプレーンテキストとして、もっと悪い場合には reST として解釈して、惨めな表示"
"になっていました。このフィールドは配布物の作者がその description のフォーマッ"
"トを指定できるようにしますので、 PyPI やその他のツールが Markdown やその他の"
"フォーマットを正しく表示できるようになる可能性を広げます。"

#: ../source/specifications/core-metadata.rst:263
msgid ""
"The format of this field is the same as the ``Content-Type`` header in HTTP "
"(i.e.: `RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type."
"html>`_). Briefly, this means that it has a ``type/subtype`` part and then "
"it can optionally have a number of parameters:"
msgstr ""
"このフィールドのフォーマットは HTTP (すなわち `RFC 1341 <https://www.w3.org/"
"Protocols/rfc1341/4_Content-Type.html>`_) における ``Content-Type`` ヘッダの"
"それと同じです。端的に言えば、これは ``type/subtype`` の部分を持っていて、オ"
"プションとしていくつかのパラメータを取ることができるというものです:"

#: ../source/specifications/core-metadata.rst:269
msgid "Format::"
msgstr "フォーマット::"

#: ../source/specifications/core-metadata.rst:273
msgid "The ``type/subtype`` part has only a few legal values:"
msgstr "``type/subtype`` 部分はいくつかの正当な値を取ります:"

#: ../source/specifications/core-metadata.rst:275
msgid "``text/plain``"
msgstr "``text/plain``"

#: ../source/specifications/core-metadata.rst:276
msgid "``text/x-rst``"
msgstr "``text/x-rst``"

#: ../source/specifications/core-metadata.rst:277
msgid "``text/markdown``"
msgstr "``text/markdown``"

#: ../source/specifications/core-metadata.rst:279
msgid ""
"The ``charset`` parameter can be used to specify the character encoding of "
"the description. The only legal value is ``UTF-8``. If omitted, it is "
"assumed to be ``UTF-8``."
msgstr ""
"``charset`` パラメータは、description のキャラクターのエンコーディングを指定"
"するために使われます。唯一の正当な値は ``UTF-8`` です。省略時には ``UTF-8`` "
"であるものと仮定します。"

#: ../source/specifications/core-metadata.rst:283
msgid ""
"Other parameters might be specific to the chosen subtype. For example, for "
"the ``markdown`` subtype, there is an optional ``variant`` parameter that "
"allows specifying the variant of Markdown in use (defaults to ``GFM`` if not "
"specified). Currently, two variants are recognized:"
msgstr ""
"サブタイプを選択するために他のパラメータが指定される場合もあります。例えば、 "
"``markdown`` サブタイプを指定する際に、使われている Markdown の異種 (指定がな"
"い場合にはデフォルトでは ``GFM``) を指定することができるオプションの "
"``variant`` パラメータが存在します。現時点ではふたつの異種が認識されます:"

#: ../source/specifications/core-metadata.rst:288
msgid "``GFM`` for :rfc:`GitHub-flavored Markdown <7764#section-3.2>`"
msgstr "``GFM`` すなわち :rfc:`Github 流の Markdown <7764#section-3.2>`"

#: ../source/specifications/core-metadata.rst:289
msgid "``CommonMark`` for :rfc:`CommonMark <7764#section-3.5>`"
msgstr ":rfc:`CommonMark <7764#section-3.5>` を指定する ``CommonMark``"

#: ../source/specifications/core-metadata.rst:307
msgid ""
"If a ``Description-Content-Type`` is not specified, then applications should "
"attempt to render it as ``text/x-rst; charset=UTF-8`` and fall back to "
"``text/plain`` if it is not valid rst."
msgstr ""
"``Description-Content-Type`` が指定されていない場合には、アプリケーションとし"
"ては、まず ``text/x-rst; charset=UTF-8`` として表示を試み、正当な rst ではな"
"い場合に ``text/plain`` にフォールバックするべきです。"

#: ../source/specifications/core-metadata.rst:311
msgid ""
"If a ``Description-Content-Type`` is an unrecognized value, then the assumed "
"content type is ``text/plain`` (Although PyPI will probably reject anything "
"with an unrecognized value)."
msgstr ""
"``Description-Content-Type`` が認識できない値である場合には、内容の型が "
"``text/plain`` であるものと仮定します (とはいえ、認識できない値であれば何で"
"あっても PyPI が拒否することになるでしょう) 。"

#: ../source/specifications/core-metadata.rst:315
msgid ""
"If the ``Description-Content-Type`` is ``text/markdown`` and ``variant`` is "
"not specified or is set to an unrecognized value, then the assumed "
"``variant`` is ``GFM``."
msgstr ""
"``Description-Content-Type`` が ``text/markdown`` で、 ``variant`` が指定され"
"ない場合や認識できない値が指定された場合には、 ``variant`` が ``GFM`` である"
"ものと仮定されます。"

#: ../source/specifications/core-metadata.rst:319
msgid ""
"So for the last example above, the ``charset`` defaults to ``UTF-8`` and the "
"``variant`` defaults to ``GFM`` and thus it is equivalent to the example "
"before it."
msgstr ""
"上記の最後の例を見ると ``charset`` はデフォルトでは ``UTF-8`` であり、 "
"``variant`` はデフォルトでは ``GFM`` ですので、それ以前の例と同等であるという"
"ことになります。"

#: ../source/specifications/core-metadata.rst:328
msgid "Keywords"
msgstr "キーワード"

#: ../source/specifications/core-metadata.rst:332
msgid ""
"A list of additional keywords, separated by commas, to be used to assist "
"searching for the distribution in a larger catalog."
msgstr ""
"より大きなカタログで配布物を検索する助けとなるべく使用される、コンマで区切ら"
"れた追加のキーワードのリスト。"

#: ../source/specifications/core-metadata.rst:341
msgid ""
"The specification previously showed keywords separated by spaces, but "
"distutils and setuptools implemented it with commas. These tools have been "
"very widely used for many years, so it was easier to update the "
"specification to match the de facto standard."
msgstr ""
"以前にお見せした仕様ではキーワードを区切るのに空白文字を使っていましたが、 "
"distutils と setuptools はコンマで区切ります。これらのツールは多年に渡って非"
"常に広く使われていますので、仕様をデファクト標準に合わせる形で更新する方が簡"
"単でした。"

#: ../source/specifications/core-metadata.rst:350
msgid "Author"
msgstr "Author"

#: ../source/specifications/core-metadata.rst:354
msgid ""
"A string containing the author's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"少なくとも作者の名前を含む文字列で、連絡先となる情報を追加しても構いません。"

#: ../source/specifications/core-metadata.rst:367
msgid "Author-email"
msgstr "Author-email"

#: ../source/specifications/core-metadata.rst:371
msgid ""
"A string containing the author's e-mail address.  It can contain a name and "
"e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"作者の電子メールアドレスを含む文字列。 RFC-822 の ``From:`` ヘッダの記述形式"
"として正当な形で名前と電子メールアドレスを含んでいても構いません。"

#: ../source/specifications/core-metadata.rst:379
#: ../source/specifications/core-metadata.rst:426
msgid ""
"Per RFC-822, this field may contain multiple comma-separated e-mail "
"addresses::"
msgstr ""
"RFC-822 によれば、このフィールドは、複数の電子メールアドレスをコンマで区切っ"
"て記述しても構いません::"

#: ../source/specifications/core-metadata.rst:389
msgid "Maintainer"
msgstr "メンテナ"

#: ../source/specifications/core-metadata.rst:393
msgid ""
"A string containing the maintainer's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"少なくともメンテナの名前を含む文字列で、連絡先となる情報を追加しても構いませ"
"ん。"

#: ../source/specifications/core-metadata.rst:396
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author``."
msgstr ""
"当該プロジェクトが元々の作者とは異なる誰かによって保守されている場合にこの"
"フィールドを使うことを想定しているということを覚えておいてください: もし "
"``Author`` と同一人物であれば、このフィールドを省略するべきです。"

#: ../source/specifications/core-metadata.rst:410
msgid "Maintainer-email"
msgstr "Maintainer-email"

#: ../source/specifications/core-metadata.rst:414
msgid ""
"A string containing the maintainer's e-mail address.  It can contain a name "
"and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"メンテナの電子メールアドレスを含む文字列。 RFC-822 の ``From:`` ヘッダの記述"
"形式として正当な形で名前と電子メールアドレスを含んでいても構いません。"

#: ../source/specifications/core-metadata.rst:418
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author-email``."
msgstr ""
"当該プロジェクトが元々の作者とは異なる誰かによって保守されている場合にこの"
"フィールドを使うことを想定しているということを覚えておいてください: もし "
"``Author-email`` と同一であれば、このフィールドを省略するべきです。"

#: ../source/specifications/core-metadata.rst:436
msgid "License"
msgstr "License"

#: ../source/specifications/core-metadata.rst:439
#, fuzzy
#| msgid "in favour of ``Requires-Dist``"
msgid "in favour of ``License-Expression``."
msgstr "``Requires-Dist`` に従って"

#: ../source/specifications/core-metadata.rst:443
msgid ""
"As of Metadata 2.4, ``License`` and ``License-Expression`` are mutually "
"exclusive. If both are specified, tools which parse metadata will disregard "
"``License`` and PyPI will reject uploads. See `PEP 639 <https://peps.python."
"org/pep-0639/#deprecate-license-field>`__."
msgstr ""

#: ../source/specifications/core-metadata.rst:448
msgid ""
"Text indicating the license covering the distribution where the license is "
"not a selection from the \"License\" Trove classifiers. See :ref:"
"`\"Classifier\" <metadata-classifier>` below. This field may also be used to "
"specify a particular version of a license which is named via the "
"``Classifier`` field, or to indicate a variation or exception to such a "
"license."
msgstr ""
"\"License\" Trove 分類子から選択したものではないライセンスの場合は、配布物を"
"カバーするライセンスを示すテキスト。後述の :ref:`\"Classifier\" <metadata-"
"classifier>` を見てください。このフィールドは、 ``Classifier`` フィールドを経"
"由して名指しされたライセンスの特定のバージョンを指定したり、そのようなライセ"
"ンスに対する変種や例外事項を示したりするのに使っても構いません。"

#: ../source/specifications/core-metadata.rst:468
msgid "License-Expression"
msgstr ""

#: ../source/specifications/core-metadata.rst:472
msgid ""
"Text string that is a valid SPDX :term:`license expression <License "
"Expression>`, as specified in :doc:`/specifications/license-expression`."
msgstr ""

#: ../source/specifications/core-metadata.rst:491
#, fuzzy
#| msgid "Requires-Dist (multiple use)"
msgid "License-File (multiple use)"
msgstr "Requires-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:495
msgid ""
"Each entry is a string representation of the path of a license-related file. "
"The path is located within the project source tree, relative to the project "
"root directory. For details see :pep:`639`."
msgstr ""

#: ../source/specifications/core-metadata.rst:512
msgid "Classifier (multiple use)"
msgstr "Classifier (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:516
msgid ""
"Each entry is a string giving a single classification value for the "
"distribution.  Classifiers are described in :pep:`301`, and the Python "
"Package Index publishes a dynamic list of `currently defined classifiers "
"<https://pypi.org/classifiers/>`__."
msgstr ""
"それぞれのエントリは、当該配布物を分類する値をひとつ与える文字列です。分類子"
"については :pep:`301` に記述されていて、The Python Package Index は `現在定義"
"されている分類子 <https://pypi.org/classifiers/>`__ という動的なリストを公開"
"しています。"

#: ../source/specifications/core-metadata.rst:522
msgid ""
"The use of ``License ::`` classifiers  is deprecated as of Metadata 2.4, use "
"``License-Expression`` instead. See `PEP 639 <https://peps.python.org/"
"pep-0639/#deprecate-license-classifiers>`_."
msgstr ""

#: ../source/specifications/core-metadata.rst:526
#: ../source/specifications/core-metadata.rst:616
#: ../source/specifications/core-metadata.rst:760
#: ../source/specifications/core-metadata.rst:785
msgid "This field may be followed by an environment marker after a semicolon."
msgstr "このフィールドでは、セミコロンの後に環境指標を続けても構いません。"

#: ../source/specifications/core-metadata.rst:537
msgid "Requires-Dist (multiple use)"
msgstr "Requires-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:540
#: ../source/specifications/core-metadata.rst:603
#: ../source/specifications/core-metadata.rst:732
#: ../source/specifications/core-metadata.rst:774
msgid ""
"The field format specification was relaxed to accept the syntax used by "
"popular publishing tools."
msgstr ""
"フィールドの仕様は、人気のある公開ツール群が用いる構文を許容するように緩めら"
"れました。"

#: ../source/specifications/core-metadata.rst:544
msgid ""
"Each entry contains a string naming some other distutils project required by "
"this distribution."
msgstr ""
"それぞれのエントリは、この配布物が要求する他の distutils のプロジェクトを名指"
"しする文字列を含みます。"

#: ../source/specifications/core-metadata.rst:547
msgid "The format of a requirement string contains from one to four parts:"
msgstr "要求事項を示す文字列のフォーマットは、１個から４個の部分を含みます:"

#: ../source/specifications/core-metadata.rst:549
msgid ""
"A project name, in the same format as the ``Name:`` field. The only "
"mandatory part."
msgstr ""
"``Name:`` フィールドと同じフォーマットのプロジェクト名。これだけが必須部分で"
"す。"

#: ../source/specifications/core-metadata.rst:551
msgid ""
"A comma-separated list of 'extra' names. These are defined by the required "
"project, referring to specific features which may need extra dependencies. "
"The names MUST conform to the restrictions specified by the ``Provides-Extra:"
"`` field."
msgstr ""
"コンマ区切りの '追加の' 名前のリスト。これらは、追加的な依存先を必要とする特"
"定の機能に応じて、要求されたプロジェクトによって定義されます。この名前は、 "
"``Provides-Extra:`` フィールドで指定された制約事項に従うものでなければなりま"
"せん。"

#: ../source/specifications/core-metadata.rst:555
msgid ""
"A version specifier. Tools parsing the format should accept optional "
"parentheses around this, but tools generating it should not use parentheses."
msgstr ""
"バージョン指定子。この部分をパースするツールはバージョンを囲む括弧を許容しな"
"ければならないが、生成する際には括弧を使ってはなりません。"

#: ../source/specifications/core-metadata.rst:558
msgid ""
"An environment marker after a semicolon. This means that the requirement is "
"only needed in the specified conditions."
msgstr ""
"セミコロンの後ろに環境マーカ。要求事項が必要となるのが指定された条件の時のみ"
"であることを示します。"

#: ../source/specifications/core-metadata.rst:561
msgid "See :pep:`508` for full details of the allowed format."
msgstr "許容されるフォーマットの詳細については :pep:`508` を見てください。"

#: ../source/specifications/core-metadata.rst:563
msgid ""
"The project names should correspond to names as found on the `Python Package "
"Index`_."
msgstr ""
"プロジェクト名は、 `Python パッケージインデックス <Python Package Index>`_ に"
"出現する名前に対応していなければなりません。"

#: ../source/specifications/core-metadata.rst:566
msgid ""
"Version specifiers must follow the rules described in :doc:`version-"
"specifiers`."
msgstr ""
"バージョン指定子は :doc:`version-specifiers` に記述された規則に従っていなけれ"
"ばなりません。"

#: ../source/specifications/core-metadata.rst:580
msgid "Requires-Python"
msgstr ""

#: ../source/specifications/core-metadata.rst:584
msgid ""
"This field specifies the Python version(s) that the distribution is "
"compatible with. Installation tools may look at this when picking which "
"version of a project to install."
msgstr ""
"このフィールドは、配布物が互換性を持つ Python のバージョン (複数可) を指定し"
"ます。インストールツールは、プロジェクトのインストールするべきバージョンを選"
"択する時にこのフィールドを参照しても構いません。"

#: ../source/specifications/core-metadata.rst:588
msgid "The value must be in the format specified in :doc:`version-specifiers`."
msgstr ""
"値は、 :doc:`version-specifiers` で指定されたフォーマットでなければなりませ"
"ん。"

#: ../source/specifications/core-metadata.rst:590
msgid ""
"For example, if a distribution uses :ref:`f-strings <whatsnew36-pep498>` "
"then it may prevent installation on Python < 3.6 by specifying::"
msgstr ""
"例えば、ある配布物が :ref:`f-strings <whatsnew36-pep498>` を使っているなら、"
"次のように指定することで Python < 3.6 上にインストールするのを抑止してもかま"
"いません::"

#: ../source/specifications/core-metadata.rst:595
msgid "This field cannot be followed by an environment marker."
msgstr "このフィールドでは、環境マーカを後ろに付けることはできません。"

#: ../source/specifications/core-metadata.rst:600
msgid "Requires-External (multiple use)"
msgstr "Requires-External (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:607
msgid ""
"Each entry contains a string describing some dependency in the system that "
"the distribution is to be used.  This field is intended to serve as a hint "
"to downstream project maintainers, and has no semantics which are meaningful "
"to the ``distutils`` distribution."
msgstr ""
"それぞれのエントリは、その配布物が使われるシステムにおける何らかの依存関係を"
"記述する文字列です。このフィールドは、ダウンストリームプロジェクトの維持管理"
"担当者向けにヒントを提供することを意図しており、 ``distutils`` 配布物にとって"
"は何ら意味を持ちません。"

#: ../source/specifications/core-metadata.rst:612
msgid ""
"The format of a requirement string is a name of an external dependency, "
"optionally followed by a version declaration within parentheses."
msgstr ""
"要求事項の文字列のフォーマットは外部の依存先の名前で、必須ではありませんが括"
"弧に入れたバージョンの宣言を後ろにつけても構いません。"

#: ../source/specifications/core-metadata.rst:618
msgid ""
"Because they refer to non-Python software releases, version numbers for this "
"field are **not** required to conform to the format specified in the :ref:"
"`Version specifier specification <version-specifiers>`: they should "
"correspond to the version scheme used by the external dependency."
msgstr ""
"それらは非 Python のソフトウェアリリースを参照するものですので、このフィール"
"ドでのバージョン番号は :ref:`バージョン指定子仕様 <version-specifiers>` で指"
"定されたフォーマットに適合することを **要求されていません** : それらは、外部"
"依存関係によって使われるバージョンスキームに対応するべきです。"

#: ../source/specifications/core-metadata.rst:623
msgid "Notice that there is no particular rule on the strings to be used."
msgstr "使用される文字列に対して特に規則がないという点に注意してください。"

#: ../source/specifications/core-metadata.rst:635
msgid "Project-URL (multiple-use)"
msgstr "Project-URL (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:639
msgid ""
"A string containing a browsable URL for the project and a label for it, "
"separated by a comma."
msgstr ""
"そのプロジェクトの閲覧可能な URL とラベルを含む文字列をコンマで区切ったもの。"

#: ../source/specifications/core-metadata.rst:646
msgid "The label is free text limited to 32 characters."
msgstr "このラベルは32 文字以内のフリーテキストです。"

#: ../source/specifications/core-metadata.rst:648
msgid ""
"Starting with :pep:`753`, project metadata consumers (such as the Python "
"Package Index) can use a standard normalization process to discover \"well-"
"known\" labels, which can then be given special presentations when being "
"rendered for human consumption. See :ref:`well-known-project-urls`."
msgstr ""

#: ../source/specifications/core-metadata.rst:658
msgid "Provides-Extra (multiple use)"
msgstr "Provides-Extra (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:661
msgid ""
":pep:`685` restricted valid values to be unambiguous (i.e. no normalization "
"required). For older metadata versions, value restrictions were brought into "
"line with ``Name:`` and normalization rules were introduced."
msgstr ""
"曖昧さ (すなわち正規化が要求されていない) を避けるために :pep:`685` で制限さ"
"れた正当な値を。古めのメタデータのバージョンでは、 ``Name:`` を伴う行で値に制"
"限が導入され、正規化規則も導入されました。"

#: ../source/specifications/core-metadata.rst:666
msgid ""
"A string containing the name of an optional feature. A valid name consists "
"only of lowercase ASCII letters, ASCII numbers, and hyphen. It must start "
"and end with a letter or number. Hyphens cannot be followed by another "
"hyphen. Names are limited to those which match the following regex (which "
"guarantees unambiguity)::"
msgstr ""
"追加的な機能の名前を含む文字列。正当な名前は、 ASCII 小文字・ ASCII 数字・ハ"
"イフンからのみ構成されます。先頭と末尾は文字か数字でなければなりません。ハイ"
"フンは連続してはいけません。名前は次の正規表現にマッチしなければなりません "
"(そうすることで曖昧さを排除します)::"

#: ../source/specifications/core-metadata.rst:674
msgid ""
"The specified name may be used to make a dependency conditional on whether "
"the optional feature has been requested."
msgstr ""
"指定された名前は、追加的な機能が要求されたか否かに応じて依存関係を構築するた"
"めに使われます。"

#: ../source/specifications/core-metadata.rst:682
msgid ""
"A second distribution requires an optional dependency by placing it inside "
"square brackets, and can request multiple features by separating them with a "
"comma (,). The requirements are evaluated for each requested feature and "
"added to the set of requirements for the distribution."
msgstr ""
"２番目の配布物は、角括弧の中に書くことで追加の依存先を要求し、コンマ (,) で区"
"切ることで複数の機能を要求することができます。要求事項は、要求されたそれぞれ"
"の機能について評価され、配布物の要求する依存関係の組に追加されます。"

#: ../source/specifications/core-metadata.rst:692
msgid ""
"Two feature names ``test`` and ``doc`` are reserved to mark dependencies "
"that are needed for running automated tests and generating documentation, "
"respectively."
msgstr ""
"``test`` と ``doc`` という二つの名前は、順に自動化されたテストと説明文書の生"
"成のために必要な依存先として予約されています。"

#: ../source/specifications/core-metadata.rst:696
msgid ""
"It is legal to specify ``Provides-Extra:`` without referencing it in any "
"``Requires-Dist:``."
msgstr ""
"``Requires-Diet:`` のどこからも参照されていなくても、 ``Provides-Extra:`` を"
"指定しても構いません。"

#: ../source/specifications/core-metadata.rst:699
msgid ""
"When writing data for older metadata versions, names MUST be normalized "
"following the same rules used for the ``Name:`` field when performing "
"comparisons. Tools writing metadata MUST raise an error if two ``Provides-"
"Extra:`` entries would clash after being normalized."
msgstr ""
"古めのメタデータのバージョンでデータを書く時、比較を行う時には ``Name:`` "
"フィールドに使われるのと同じ規則に従って正規化されなければなりません。ふたつ"
"の ``Provides-Extra:`` エントリが正規化後に衝突する場合には、メタデータを書き"
"込むツールはエラーを発生させなければなりません。"

#: ../source/specifications/core-metadata.rst:704
msgid ""
"When reading data for older metadata versions, tools SHOULD warn when values "
"for this field would be invalid under newer metadata versions. If a value "
"would be invalid following the rules for ``Name:`` in any core metadata "
"version, the user SHOULD be warned and the value ignored to avoid ambiguity. "
"Tools MAY choose to raise an error when reading an invalid name for older "
"metadata versions."
msgstr ""
"メタデータの古めのバージョンから読み込む時、このフィールドの値が新しめのメタ"
"データバージョンとして正当でない場合にツールが警告するべきです。コアとなるメ"
"タデータのバージョンで ``Name:`` に対する規則に照らして値が正当ではないとすれ"
"ばユーザは警告されるべきで、その値は曖昧さを避けるために無視されるべきです。"
"古めのメタデータバージョンとして不当な名前を読み取った場合には、ツールはエ"
"ラーを発出することを選択しても構いません。"

#: ../source/specifications/core-metadata.rst:712
msgid "Rarely Used Fields"
msgstr "稀に使われるフィールド"

#: ../source/specifications/core-metadata.rst:714
msgid ""
"The fields in this section are currently rarely used, as their design was "
"inspired by comparable mechanisms in Linux package management systems, and "
"it isn't at all clear how tools should interpret them in the context of an "
"open index server such as `PyPI <https://pypi.org>`__."
msgstr ""
"この節のフィールドは、 Linux のパッケージ管理システムにおける類似の機構に触発"
"されて設計されましたが、 `PyPI <https://pypi.org>`__ のような開放的なインデッ"
"クスサーバの文脈でツールがどのように翻案するべきかが全く明らかではないので、"
"現在ではほとんど使われません。"

#: ../source/specifications/core-metadata.rst:719
msgid ""
"As a result, popular installation tools ignore them completely, which in "
"turn means there is little incentive for package publishers to set them "
"appropriately. However, they're retained in the metadata specification, as "
"they're still potentially useful for informational purposes, and can also be "
"used for their originally intended purpose in combination with a curated "
"package repository."
msgstr ""
"その結果として、人気のあるインストールツールでは完全に無視されていて、そのた"
"めに今度はパッケージを公開する側でもこれらのフィールドを適切に設定しておく誘"
"因がほとんどなくなっています。しかしながら、これらのフィールドは、情報提供の"
"目的ではまだ潜在的に役に立つことと、細かく注釈をつけるようなパッケージリポジ"
"トリと組み合わせれば本来意図された目的に用いることができることから、メタデー"
"タの仕様には残されています。"

#: ../source/specifications/core-metadata.rst:729
msgid "Provides-Dist (multiple use)"
msgstr "Provides-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:736
msgid ""
"Each entry contains a string naming a Distutils project which is contained "
"within this distribution.  This field *must* include the project identified "
"in the ``Name`` field, followed by the version : Name (Version)."
msgstr ""
"それぞれのエントリは、この配布物に含まれている Distutils プロジェクトの名前を"
"文字列で含みます。このフィールドは、プロジェクトを特定する ``Name`` フィール"
"ドと後続するバージョンを *含んでいなければなりません*: Name (Version) 。"

#: ../source/specifications/core-metadata.rst:741
msgid ""
"A distribution may provide additional names, e.g. to indicate that multiple "
"projects have been bundled together.  For instance, source distributions of "
"the ``ZODB`` project have historically included the ``transaction`` project, "
"which is now available as a separate distribution.  Installing such a source "
"distribution satisfies requirements for both ``ZODB`` and ``transaction``."
msgstr ""
"配布物は、複数のプロジェクトが一緒に束ねられている場合には、それを示す追加の"
"名前を持っていても構いません。例えば、 ``ZODB`` プロジェクトのソースコード配"
"布物は、歴史的に ``transaction`` プロジェクトを包含していましたが、今では個別"
"の配布物として利用可能です。そのようなソースコード配布物をインストールする"
"と、 ``ZODB`` と ``transaction`` の両方の要求事項を満たします。"

#: ../source/specifications/core-metadata.rst:748
msgid ""
"A distribution may also provide a \"virtual\" project name, which does not "
"correspond to any separately-distributed project:  such a name might be used "
"to indicate an abstract capability which could be supplied by one of "
"multiple projects.  E.g., multiple projects might supply RDBMS bindings for "
"use by a given ORM:  each project might declare that it provides ``ORM-"
"bindings``, allowing other projects to depend only on having at most one of "
"them installed."
msgstr ""
"配布物は、また、個別に配布されているどんなプロジェクトにも紐付かない \"仮想の"
"\" プロジェクト名を持っていても構いません: そのような名前は、複数のプロジェク"
"トのうちのひとつで供給される抽象的な能力を示すために使われるかもしれません。"
"例えば、複数のプロジェクトがとある ORM で使われる RDBMS バインディングを提供"
"していても構いません: それぞれのプロジェクトが、他のプロジェクトが依存する時"
"にはそのうちの高々１個だけがインストールされていれば十分な ``ORM-bindings`` "
"を提供すると宣言していても構わないのです。"

#: ../source/specifications/core-metadata.rst:756
msgid ""
"A version declaration may be supplied and must follow the rules described "
"in :doc:`version-specifiers`. The distribution's version number will be "
"implied if none is specified."
msgstr ""
"バージョンの宣言があっても構いませんが、 :doc:`バージョン指定子 <version-"
"specifiers>` に記述された規則に従ったものでなければなりません。もし指定されて"
"いなければ、配布物のバージョン番号が暗黙理に使われます。"

#: ../source/specifications/core-metadata.rst:771
msgid "Obsoletes-Dist (multiple use)"
msgstr "Obsoletes-Dist (複数回の使用可)"

#: ../source/specifications/core-metadata.rst:778
msgid ""
"Each entry contains a string describing a distutils project's distribution "
"which this distribution renders obsolete, meaning that the two projects "
"should not be installed at the same time."
msgstr ""
"それぞれのエントリは、この配布物が出たことで旧式化した、従ってこれらふたつの"
"プロジェクトが同時にインストールされるべきではない distutils プロジェクトの配"
"布物を記述する文字列を含みます。"

#: ../source/specifications/core-metadata.rst:782
msgid ""
"Version declarations can be supplied.  Version numbers must be in the format "
"specified in :doc:`version-specifiers`."
msgstr ""
"バージョンの宣言があっても構いません。バージョン番号は :doc:`バージョン指定"
"子 <version-specifiers>` で指定されたフォーマットでなければなりません。"

#: ../source/specifications/core-metadata.rst:787
msgid ""
"The most common use of this field will be in case a project name changes, e."
"g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install "
"Torqued Python, the Gorgon distribution should be removed."
msgstr ""
"このフィールドの最もよくある使い方は、例えば Gorgon 2.3 が Torqued Python "
"1.0 の一部として組み込まれた時のように、プロジェクトの名前が変更された場合で"
"しょう。 Torqued Python をインストールするなら、 Gorgon 配布物は削除されるべ"
"きです。"

#: ../source/specifications/core-metadata.rst:800
msgid "Deprecated Fields"
msgstr "非推奨となったフィールド"

#: ../source/specifications/core-metadata.rst:802
msgid ""
"Deprecated fields should be avoided, but they are valid metadata fields. "
"They may be removed in future versions of the core metadata standard (at "
"which point they will only be valid in files that specify a metadata version "
"prior to the removal). Tools SHOULD warn users when deprecated fields are "
"used."
msgstr ""

#: ../source/specifications/core-metadata.rst:811
msgid "Home-page"
msgstr "Home-page"

#: ../source/specifications/core-metadata.rst:817
#: ../source/specifications/core-metadata.rst:834
msgid "Per :pep:`753`, use :ref:`core-metadata-project-url` instead."
msgstr ""

#: ../source/specifications/core-metadata.rst:819
msgid "A string containing the URL for the distribution's home page."
msgstr "配布物のホームページを示す URL を含んだ文字列。"

#: ../source/specifications/core-metadata.rst:828
msgid "Download-URL"
msgstr "Download-URL"

#: ../source/specifications/core-metadata.rst:836
#, fuzzy
#| msgid ""
#| "A string containing the URL from which this version of the distribution "
#| "can be downloaded.  (This means that the URL can't be something like "
#| "\".../BeagleVote-latest.tgz\", but instead must be \".../BeagleVote-0.45."
#| "tgz\".)"
msgid ""
"A string containing the URL from which this version of the distribution can "
"be downloaded.  (This means that the URL can't be something like \"``.../"
"BeagleVote-latest.tgz``\", but instead must be \"``.../BeagleVote-0.45."
"tgz``\".)"
msgstr ""
"そこからこのバージョンの配布物をダウンロードすることができる URL を含んだ文字"
"列。 (これが意味するところは、 URL は何か \".../BeagleVote-latest.tgz\" のよ"
"うなものでは駄目で、 \".../BeagleVote-0.45.tgz\" のようにバージョンを含むもの"
"でなければならないということです。)"

#: ../source/specifications/core-metadata.rst:842
msgid "Requires"
msgstr "要求事項"

#: ../source/specifications/core-metadata.rst:845
msgid "in favour of ``Requires-Dist``"
msgstr "``Requires-Dist`` に従って"

#: ../source/specifications/core-metadata.rst:848
msgid ""
"Each entry contains a string describing some other module or package "
"required by this package."
msgstr ""
"それぞれのエントリは、このパッケージが必要とする他のモジュールやパッケージを"
"記述した文字列を含みます。"

#: ../source/specifications/core-metadata.rst:851
msgid ""
"The format of a requirement string is identical to that of a module or "
"package name usable with the ``import`` statement, optionally followed by a "
"version declaration within parentheses."
msgstr ""
"要求事項の文字列のフォーマットは、 ``import`` ステートメントで使うことができ"
"るモジュールやパッケージの名前のフォーマットと同一のもので、オプションとして"
"カッコ内に入れたバージョン宣言を伴うことがあります。"

#: ../source/specifications/core-metadata.rst:855
msgid ""
"A version declaration is a series of conditional operators and version "
"numbers, separated by commas. Conditional operators must be one of \"<\", "
"\">\"', \"<=\", \">=\", \"==\", and \"!=\". Version numbers must be in the "
"format accepted by the ``distutils.version.StrictVersion`` class: two or "
"three dot-separated numeric components, with an optional \"pre-release\" tag "
"on the end consisting of the letter 'a' or 'b' followed by a number. Example "
"version numbers are \"1.0\", \"2.3a2\", \"1.3.99\","
msgstr ""
"バージョン宣言は、一連の比較演算子とバージョン番号をカンマで区切ったもので"
"す。比較演算子は、\"<\", \">\", \"<=\", \">=\", \"==\", \"!=\" のいずれかひと"
"つでなければなりません。バージョン番号は、オプションとして 'a' か 'b' の後ろ"
"に数字が続く形の \"pre-release\" タグを末尾につけた、二つか三つの数字部分を"
"ドットで区切ったものです。バージョン番号の例としては、 \"1.0\" や \"2.3a2\" "
"や \"1.3.99\" 、"

#: ../source/specifications/core-metadata.rst:863
msgid ""
"Any number of conditional operators can be specified, e.g. the string "
"\">1.0, !=1.3.4, <2.0\" is a legal version declaration."
msgstr ""
"例えば \">1.0, !=1.3.4, <2.0\" という文字列が正当なバージョン宣言であるよう"
"に、比較演算子はいくつでも指定することができます。"

#: ../source/specifications/core-metadata.rst:866
msgid ""
"All of the following are possible requirement strings: \"rfc822\", \"zlib "
"(>=1.1.4)\", \"zope\"."
msgstr ""
"次に示すすべての要求仕様文字列 <requirement strings> は実際に可能なものです: "
"\"rfc822\", \"zlib (>=1.1.4)\", \"zope\"。"

#: ../source/specifications/core-metadata.rst:869
msgid ""
"There’s no canonical list of what strings should be used; the Python "
"community is left to choose its own standards."
msgstr ""
"どのような文字列が用いられるべきであるかについては、公式に認められたリストは"
"ありません; 独自の標準を選択することが Python コミュニティに委ねられていま"
"す。"

#: ../source/specifications/core-metadata.rst:882
msgid "Provides"
msgstr "提供する"

#: ../source/specifications/core-metadata.rst:885
msgid "in favour of ``Provides-Dist``"
msgstr "``Provides-Dist`` を支持して <in favour of>"

#: ../source/specifications/core-metadata.rst:888
msgid ""
"Each entry contains a string describing a package or module that will be "
"provided by this package once it is installed. These strings should match "
"the ones used in Requirements fields. A version declaration may be supplied "
"(without a comparison operator); the package’s version number will be "
"implied if none is specified."
msgstr ""
"それぞれのエントリには、そのパッケージをインストールすると提供されるであろう"
"パッケージなりモジュールなりについて記述した文字列を含みます。このような文字"
"列は、Requirements フィールドで使われるものに合致しているべきです。 (比較演算"
"子なしなら) バージョン宣言もあっても構いません; もしバージョン宣言がなけれ"
"ば、そのパッケージのバージョン番号を援用します。"

#: ../source/specifications/core-metadata.rst:904
msgid "Obsoletes"
msgstr "古くなった <Obsoletes>"

#: ../source/specifications/core-metadata.rst:907
msgid "in favour of ``Obsoletes-Dist``"
msgstr "``Obsoletes-Dist`` に従って"

#: ../source/specifications/core-metadata.rst:910
msgid ""
"Each entry contains a string describing a package or module that this "
"package renders obsolete, meaning that the two packages should not be "
"installed at the same time. Version declarations can be supplied."
msgstr ""
"それぞれのエントリには、あるパッケージなりモジュールなりがあることで、この"
"パッケージが使われなくなっている <obsolete> ということを記述する、すなわち、"
"これら二つのパッケージは同時にはインストールされるべきではないことを示す、そ"
"のような文字列が含まれます。バージョン宣言を書いておくことができます。"

#: ../source/specifications/core-metadata.rst:914
msgid ""
"The most common use of this field will be in case a package name changes, e."
"g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install "
"Torqued Python, the Gorgon package should be removed."
msgstr ""
"このフィールドの最もよくある使い方は、例えば Gorgon 2.3 が Torqued Python "
"1.0 の一部として組み込まれた時のように、プロジェクトの名前が変更された場合で"
"しょう。 Torqued Python をインストールするなら、 Gorgon パッケージは削除され"
"るべきです。"

#: ../source/specifications/core-metadata.rst:926
#, fuzzy
#| msgid "October 2020: Core metadata 2.2 was approved through :pep:`643`."
msgid "August 2024: Core metadata 2.4 was approved through :pep:`639`."
msgstr ""
"2020年10月: :pep:`643` を通じてコアとなるメタデータ 2.2 が承認されました。"

#: ../source/specifications/core-metadata.rst:928
#, fuzzy
#| msgid "Added the ``Dynamic`` field."
msgid "Added the ``License-Expression`` field."
msgstr "``Dynamic`` フィールドを追加しました。"

#: ../source/specifications/core-metadata.rst:929
#, fuzzy
#| msgid "Added the ``Dynamic`` field."
msgid "Added the ``License-File`` field."
msgstr "``Dynamic`` フィールドを追加しました。"

#: ../source/specifications/core-metadata.rst:931
msgid "March 2022: Core metadata 2.3 was approved through :pep:`685`."
msgstr ""
"2022年3月: :pep:`685` を通じてコアとなるメタデータ 2.3 が承認されました。"

#: ../source/specifications/core-metadata.rst:933
msgid "Restricted extra names to be normalized."
msgstr "その他の名称 <extra names> の標準化に制限を加えました。"

#: ../source/specifications/core-metadata.rst:935
msgid "October 2020: Core metadata 2.2 was approved through :pep:`643`."
msgstr ""
"2020年10月: :pep:`643` を通じてコアとなるメタデータ 2.2 が承認されました。"

#: ../source/specifications/core-metadata.rst:937
msgid "Added the ``Dynamic`` field."
msgstr "``Dynamic`` フィールドを追加しました。"

#: ../source/specifications/core-metadata.rst:939
msgid "February 2018: Core metadata 2.1 was approved through :pep:`566`."
msgstr ""
"2018年2月: :pep:`566` を通じてコアとなるメタデータ 2.1 が承認されました。"

#: ../source/specifications/core-metadata.rst:941
msgid "Added ``Description-Content-Type`` and ``Provides-Extra``."
msgstr "``Description-Content-Type`` と ``Provides-Extra`` を追加しました。"

#: ../source/specifications/core-metadata.rst:942
msgid "Added canonical method for transforming metadata to JSON."
msgstr "メタデータを JSON に変換する正規化された方法を追加しました。"

#: ../source/specifications/core-metadata.rst:943
msgid "Restricted the grammar of the ``Name`` field."
msgstr "``Name`` フィールドの文法に制限を加えました。"

#: ../source/specifications/core-metadata.rst:945
msgid "February 2010: Core metadata 1.2 was approved through :pep:`345`."
msgstr ""
"2010年2月: :pep:`345` を通じてコアとなるメタデータ 1.2 が承認されました。"

#: ../source/specifications/core-metadata.rst:947
msgid "April 2003: Core metadata 1.1 was approved through :pep:`314`:"
msgstr ""
"2003年4月: :pep:`314` を通じてコアとなるメタデータ 1.1 が承認されました:"

#: ../source/specifications/core-metadata.rst:949
msgid "March 2001: Core metadata 1.0 was approved through :pep:`241`."
msgstr ""
"2001年3月: :pep:`241` を通じてコアとなるメタデータ 1.0 が承認されました。"

#: ../source/specifications/core-metadata.rst:953
msgid "reStructuredText markup: https://docutils.sourceforge.io/"
msgstr "reStructuredText マークアップ言語: https://docutils.sourceforge.io/"

#: ../source/specifications/core-metadata.rst:958
msgid "RFC 822 Long Header Fields: :rfc:`822#section-3.1.1`"
msgstr "RFC 822 長形式ヘッダフィールド: :rfc:`822#section-3.1.1`"

#: ../source/specifications/dependency-groups.rst:5
#, fuzzy
#| msgid "Dependency Overrides"
msgid "Dependency Groups"
msgstr "依存関係を上書きする"

#: ../source/specifications/dependency-groups.rst:7
msgid ""
"This specification defines Dependency Groups, a mechanism for storing "
"package requirements in ``pyproject.toml`` files such that they are not "
"included in project metadata when it is built."
msgstr ""

#: ../source/specifications/dependency-groups.rst:11
msgid ""
"Dependency Groups are suitable for internal development use-cases like "
"linting and testing, as well as for projects which are not built for "
"distribution, like collections of related scripts."
msgstr ""

#: ../source/specifications/dependency-groups.rst:15
msgid ""
"Fundamentally, Dependency Groups should be thought of as being a "
"standardized subset of the capabilities of ``requirements.txt`` files (which "
"are ``pip``-specific)."
msgstr ""

#: ../source/specifications/dependency-groups.rst:25
msgid "This is a simple table which shows ``docs`` and ``test`` groups::"
msgstr ""

#: ../source/specifications/dependency-groups.rst:31
msgid ""
"and a similar table which defines ``docs``, ``test``, and ``coverage`` "
"groups::"
msgstr ""

#: ../source/specifications/dependency-groups.rst:39
msgid "The ``[dependency-groups]`` Table"
msgstr ""

#: ../source/specifications/dependency-groups.rst:41
msgid ""
"Dependency Groups are defined as a table in ``pyproject.toml`` named "
"``dependency-groups``. The ``dependency-groups`` table contains an arbitrary "
"number of user-defined keys, each of which has, as its value, a list of "
"requirements."
msgstr ""

#: ../source/specifications/dependency-groups.rst:46
msgid ""
"``[dependency-groups]`` keys, sometimes also called \"group names\", must "
"be :ref:`valid non-normalized names <name-format>`. Tools which handle "
"Dependency Groups MUST :ref:`normalize <name-normalization>` these names "
"before comparisons."
msgstr ""

#: ../source/specifications/dependency-groups.rst:51
msgid ""
"Tools SHOULD prefer to present the original, non-normalized name to users, "
"and if duplicate names are detected after normalization, tools SHOULD emit "
"an error."
msgstr ""

#: ../source/specifications/dependency-groups.rst:55
msgid ""
"Requirement lists, the values in ``[dependency-groups]``, may contain "
"strings, tables (``dict`` in Python), or a mix of strings and tables. "
"Strings must be valid :ref:`dependency specifiers <dependency-specifiers>`, "
"and tables must be valid Dependency Group Includes."
msgstr ""

#: ../source/specifications/dependency-groups.rst:61
#, fuzzy
#| msgid "Dependency Overrides"
msgid "Dependency Group Include"
msgstr "依存関係を上書きする"

#: ../source/specifications/dependency-groups.rst:63
msgid ""
"A Dependency Group Include includes another Dependency Group in the current "
"group."
msgstr ""

#: ../source/specifications/dependency-groups.rst:66
msgid ""
"An include is a table with exactly one key, ``\"include-group\"``, whose "
"value is a string, the name of another Dependency Group."
msgstr ""

#: ../source/specifications/dependency-groups.rst:69
msgid ""
"Includes are defined to be exactly equivalent to the contents of the named "
"Dependency Group, inserted into the current group at the location of the "
"include. For example, if ``foo = [\"a\", \"b\"]`` is one group, and ``bar = "
"[\"c\", {include-group = \"foo\"}, \"d\"]`` is another, then ``bar`` should "
"evaluate to ``[\"c\", \"a\", \"b\", \"d\"]`` when Dependency Group Includes "
"are expanded."
msgstr ""

#: ../source/specifications/dependency-groups.rst:75
msgid ""
"Dependency Group Includes may specify the same package multiple times. Tools "
"SHOULD NOT deduplicate or otherwise alter the list contents produced by the "
"include. For example, given the following table:"
msgstr ""

#: ../source/specifications/dependency-groups.rst:92
msgid ""
"The resolved value of ``all`` SHOULD be ``[\"foo\", \"foo\", \"foo>1.0\", "
"\"foo<1.0\"]``. Tools should handle such a list exactly as they would handle "
"any other case in which they are asked to process the same requirement "
"multiple times with different version constraints."
msgstr ""

#: ../source/specifications/dependency-groups.rst:97
msgid ""
"Dependency Group Includes may include groups containing Dependency Group "
"Includes, in which case those includes should be expanded as well. "
"Dependency Group Includes MUST NOT include cycles, and tools SHOULD report "
"an error if they detect a cycle."
msgstr ""

#: ../source/specifications/dependency-groups.rst:102
#, fuzzy
#| msgid "Package upload"
msgid "Package Building"
msgstr "パッケージアップロード"

#: ../source/specifications/dependency-groups.rst:104
msgid ""
"Build backends MUST NOT include Dependency Group data in built distributions "
"as package metadata. This means that sdist ``PKG-INFO`` and wheel "
"``METADATA`` files should not include referenceable fields containing "
"Dependency Groups."
msgstr ""

#: ../source/specifications/dependency-groups.rst:108
msgid ""
"It is, however, valid to use Dependency Groups in the evaluation of dynamic "
"metadata, and ``pyproject.toml`` files included in sdists will still contain "
"``[dependency-groups]``. However, the table's contents are not part of a "
"built package's interfaces."
msgstr ""

#: ../source/specifications/dependency-groups.rst:114
#, fuzzy
#| msgid "Installing Setuptools \"Extras\""
msgid "Installing Dependency Groups & Extras"
msgstr "Setuptools の \"Extras\" をインストールする"

#: ../source/specifications/dependency-groups.rst:116
msgid ""
"There is no syntax or specification-defined interface for installing or "
"referring to Dependency Groups. Tools are expected to provide dedicated "
"interfaces for this purpose."
msgstr ""

#: ../source/specifications/dependency-groups.rst:120
msgid ""
"Tools MAY choose to provide the same or similar interfaces for interacting "
"with Dependency Groups as they do for managing extras. Tools authors are "
"advised that the specification does not forbid having an extra whose name "
"matches a Dependency Group. Separately, users are advised to avoid creating "
"Dependency Groups whose names match extras, and tools MAY treat such "
"matching as an error."
msgstr ""

#: ../source/specifications/dependency-groups.rst:128
#, fuzzy
#| msgid "Backwards Compatibility"
msgid "Validation and Compatibility"
msgstr "後方互換性"

#: ../source/specifications/dependency-groups.rst:130
msgid ""
"Tools supporting Dependency Groups may want to validate data before using "
"it. When implementing such validation, authors should be aware of the "
"possibility of future extensions to the specification, so that they do not "
"unnecessarily emit errors or warnings."
msgstr ""

#: ../source/specifications/dependency-groups.rst:135
msgid ""
"Tools SHOULD error when evaluating or processing unrecognized data in "
"Dependency Groups."
msgstr ""

#: ../source/specifications/dependency-groups.rst:138
msgid ""
"Tools SHOULD NOT eagerly validate the contents of *all* Dependency Groups "
"unless they have a need to do so."
msgstr ""

#: ../source/specifications/dependency-groups.rst:141
msgid ""
"This means that in the presence of the following data, most tools should "
"allow the ``foo`` group to be used and only error if the ``bar`` group is "
"used:"
msgstr ""

#: ../source/specifications/dependency-groups.rst:152
msgid ""
"There are several known cases of tools which have good cause to be stricter. "
"Linters and validators are an example, as their purpose is to validate the "
"contents of all Dependency Groups."
msgstr ""

#: ../source/specifications/dependency-groups.rst:157
#: ../source/specifications/inline-script-metadata.rst:123
msgid "Reference Implementation"
msgstr "参照実装"

#: ../source/specifications/dependency-groups.rst:159
msgid ""
"The following Reference Implementation prints the contents of a Dependency "
"Group to stdout, newline delimited. The output is therefore valid "
"``requirements.txt`` data."
msgstr ""

#: ../source/specifications/dependency-groups.rst:252
#, fuzzy
#| msgid "November 2015: This specification was approved through :pep:`508`."
msgid "October 2024: This specification was approved through :pep:`735`."
msgstr "2015年11月: :pep:`508` を通じてこの仕様が承認されました。"

#: ../source/specifications/dependency-specifiers.rst:7
msgid "Dependency specifiers"
msgstr "依存関係指定子"

#: ../source/specifications/dependency-specifiers.rst:9
msgid ""
"This document describes the dependency specifiers format as originally "
"specified in :pep:`508`."
msgstr ""
"元々は :pep:`508` で指定されていた依存関係指定子のフォーマットを、この説明文"
"書は記述します。"

#: ../source/specifications/dependency-specifiers.rst:12
msgid ""
"The job of a dependency is to enable tools like pip [#pip]_ to find the "
"right package to install. Sometimes this is very loose - just specifying a "
"name, and sometimes very specific - referring to a specific file to install. "
"Sometimes dependencies are only relevant in one platform, or only some "
"versions are acceptable, so the language permits describing all these cases."
msgstr ""
"依存関係 <dependency> の任務は、 pip [#pip]_ のようなツールがインストールする"
"べき正しいパッケージを探し出すことができるようにすることです。これは時には大"
"変に曖昧で名称を指定するだけであったり、別の時には非常に限定的でインストール"
"するべき特定のファイルを参照したりします。場合によっては、依存関係 "
"<dependency> がひとつのプラットフォームでのみ妥当であったり、いくつかのバー"
"ジョンだけが受け入れ可能であったりするので、(依存関係 <dependency> を記述す"
"る) 言語としてはこれらすべてのケースを記述できるものでなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:18
msgid ""
"The language defined is a compact line based format which is already in "
"widespread use in pip requirements files, though we do not specify the "
"command line option handling that those files permit. There is one caveat - "
"the URL reference form, specified in :ref:`Versioning specifier "
"specification <version-specifiers>` is not actually implemented in pip, but "
"we use that format rather than pip's current native format."
msgstr ""
"定義された言語は、簡潔な行単位のフォーマットであって pip の requirements ファ"
"イルで既に広く使われているものですが、そのようなファイル群を許容するようなコ"
"マンドラインオプションを指定することはしていません。ひとつ注意しなければなら"
"ないのは、 :ref:`バージョン指定子仕様 <version-specifiers>` で指定されている"
"ような URL を参照する形式は実は pip では実装されていないのに、現在の pip の本"
"来のフォーマットよりもむしろそちらのフォーマットを使っているという点です。"

#: ../source/specifications/dependency-specifiers.rst:31
msgid "All features of the language shown with a name based lookup::"
msgstr "この言語のすべての機能を、名前に基づいた参照とともに示します::"

#: ../source/specifications/dependency-specifiers.rst:35
msgid "A minimal URL based lookup::"
msgstr "最低限の URL に基づいた参照::"

#: ../source/specifications/dependency-specifiers.rst:40
msgid "Concepts"
msgstr "概念"

#: ../source/specifications/dependency-specifiers.rst:42
msgid ""
"A dependency specification always specifies a distribution name. It may "
"include extras, which expand the dependencies of the named distribution to "
"enable optional features. The version installed can be controlled using "
"version limits, or giving the URL to a specific artifact to install. Finally "
"the dependency can be made conditional using environment markers."
msgstr ""
"依存関係の指定では、常に、配布物の名前を指定します。名前で指定された配布物で"
"特定の追加機能を有効にするように依存関係を拡張するような追加物 <extra> を含ん"
"でいても構いません。インストールされたバージョンをバージョンリミットで制御す"
"ることもできますし、特定のアーティファクトをインストールするために URL を与え"
"ることもできます。依存関係は最終的に環境マーカを用いて条件別に作成することも"
"できます。"

#: ../source/specifications/dependency-specifiers.rst:49
msgid "Grammar"
msgstr "文法"

#: ../source/specifications/dependency-specifiers.rst:51
msgid ""
"We first cover the grammar briefly and then drill into the semantics of each "
"section later."
msgstr ""
"最初に文法について簡単に触れた後、それぞれの節の意味論 <semantics> について深"
"く掘り下げることにしましょう。"

#: ../source/specifications/dependency-specifiers.rst:54
msgid ""
"A distribution specification is written in ASCII text. We use a parsley "
"[#parsley]_ grammar to provide a precise grammar. It is expected that the "
"specification will be embedded into a larger system which offers framing "
"such as comments, multiple line support via continuations, or other such "
"features."
msgstr ""
"配布物の仕様は ASCII テキストで書かれています。厳密な文法としては parsley "
"[#parsley]_ の文法を使っています。この仕様は、コメントや継続による複数行サ"
"ポートやその他の機能の枠組みを与えるもっと大きなシステムの中に組み込まれるこ"
"とを期待しています。"

#: ../source/specifications/dependency-specifiers.rst:59
msgid ""
"The full grammar including annotations to build a useful parse tree is "
"included at the end of this document."
msgstr ""
"役に立つ構文解析ツリーを構成するための注釈機能を含む完全な文法は、この説明文"
"書の末尾に置きました。"

#: ../source/specifications/dependency-specifiers.rst:62
msgid ""
"Versions may be specified according to the rules of the :ref:`Version "
"specifier specification <version-specifiers>`. (Note: URI is defined in :rfc:"
"`std-66 <3986>`)::"
msgstr ""
":ref:`バージョン指定子仕様 <version-specifiers>` の規則に従ってバージョンを指"
"定しても構いません。(ノート: URI は :rfc:`std-66 <3986>` で定義されていま"
"す)::"

#: ../source/specifications/dependency-specifiers.rst:73
msgid ""
"Environment markers allow making a specification only take effect in some "
"environments::"
msgstr ""
"環境マーカを使うことで、ある仕様が特定の環境でのみ有効であることを示すことが"
"できます::"

#: ../source/specifications/dependency-specifiers.rst:102
msgid ""
"Optional components of a distribution may be specified using the extras "
"field::"
msgstr ""
"配布物のうちの必須ではない部分については extras フィールドを使って指定するこ"
"とができます::"

#: ../source/specifications/dependency-specifiers.rst:111
msgid "Restrictions on names for extras is defined in :pep:`685`."
msgstr "追加物の名前に対する制限事項は :pep:`685` で定義されています。"

#: ../source/specifications/dependency-specifiers.rst:113
msgid "Giving us a rule for name based requirements::"
msgstr "私たちに名前に基づいた要求仕様を与えてください::"

#: ../source/specifications/dependency-specifiers.rst:117
msgid "And a rule for direct reference specifications::"
msgstr "そして、直接参照に用いる要求仕様のための規則はこちら::"

#: ../source/specifications/dependency-specifiers.rst:121
msgid "Leading to the unified rule that can specify a dependency.::"
msgstr "依存関係を指定することができる統一規則への案内はこちら::"

#: ../source/specifications/dependency-specifiers.rst:126
msgid "Whitespace"
msgstr "空白文字 <Whitespace>"

#: ../source/specifications/dependency-specifiers.rst:128
msgid ""
"Non line-breaking whitespace is mostly optional with no semantic meaning. "
"The sole exception is detecting the end of a URL requirement."
msgstr ""
"行を分割するものではない空白文字には特に意味はなく、ほとんどの場合には必須で"
"はないものです。唯一の例外は、 URL による要求事項の末尾を検出するためのもので"
"す。"

#: ../source/specifications/dependency-specifiers.rst:134
msgid "Names"
msgstr "名前 <Names>"

#: ../source/specifications/dependency-specifiers.rst:136
msgid ""
"Python distribution names are currently defined in :pep:`345`. Names act as "
"the primary identifier for distributions. They are present in all dependency "
"specifications, and are sufficient to be a specification on their own. "
"However, PyPI places strict restrictions on names - they must match a case "
"insensitive regex or they won't be accepted. Accordingly, in this document "
"we limit the acceptable values for identifiers to that regex. A full "
"redefinition of name may take place in a future metadata PEP. The regex (run "
"with re.IGNORECASE) is::"
msgstr ""
"Python の配布物の名前は、現時点では :pep:`345` で定義されています。名前は配布"
"物の最も基本的な識別子として働きます。(名前は) あらゆる依存関係の指定に出現"
"し、それだけで十分に指定することができます。しかしながら、 PyPI では名前に厳"
"密な制約を課しています - 名前は大文字小文字を区別しない正規表現に合致しなけれ"
"ば受け入れられません。従って、この説明文書では、その正規表現に合致する識別子"
"だけを受け入れ可能な値として扱うことにしましょう。名前の完全な再定義はメタ"
"データ PEP として将来に出現するかもしれません。ここでいう (re.IGNORECASE とと"
"もに評価されるべき) 正規表現とは、次のようなものです::"

#: ../source/specifications/dependency-specifiers.rst:150
msgid "Extras"
msgstr "追加物 <Extras>"

#: ../source/specifications/dependency-specifiers.rst:152
msgid ""
"An extra is an optional part of a distribution. Distributions can specify as "
"many extras as they wish, and each extra results in the declaration of "
"additional dependencies of the distribution **when** the extra is used in a "
"dependency specification. For instance::"
msgstr ""
"追加物とは、配布物の必須ではない部分のことです。配布物では追加物を幾つでも指"
"定することができ、追加物が依存関係の指定場所で使われた **場合** には、それぞ"
"れの追加物が配布物の追加的な依存関係を宣言する結果になります。例えば::"

#: ../source/specifications/dependency-specifiers.rst:159
msgid ""
"Extras union in the dependencies they define with the dependencies of the "
"distribution they are attached to. The example above would result in "
"requests being installed, and requests own dependencies, and also any "
"dependencies that are listed in the \"security\" extra of requests."
msgstr ""
"追加物 <extras> の依存関係の合併とは、その追加物が添付されている配布物 "
"<distribution> の依存関係と一緒に定義されることです。上に示した例では、結果と"
"して requests がインストールされることになり、requests は自身の依存関係を持つ"
"ので requests の \"security\" 追加物 <extra> に列挙されたすべての依存関係 "
"(先) もインストールされることになります。"

#: ../source/specifications/dependency-specifiers.rst:164
msgid ""
"If multiple extras are listed, all the dependencies are unioned together."
msgstr ""
"複数の追加物 <extra> が列挙されている場合には、すべての依存関係の合併集合が依"
"存関係になります。"

#: ../source/specifications/dependency-specifiers.rst:169
msgid "Versions"
msgstr "バージョン指定子"

#: ../source/specifications/dependency-specifiers.rst:171
msgid ""
"See the :ref:`Version specifier specification <version-specifiers>` for more "
"detail on both version numbers and version comparisons. Version "
"specifications limit the versions of a distribution that can be used. They "
"only apply to distributions looked up by name, rather than via a URL. "
"Version comparison are also used in the markers feature. The optional "
"brackets around a version are present for compatibility with :pep:`345` but "
"should not be generated, only accepted."
msgstr ""
"バージョン番号やその比較方法について、詳しくは :ref:`バージョン指定子仕様 "
"<version-specifiers>` をみてください。バージョン仕様は、配布物のバージョンと"
"して使うことができる範囲を定めています。これは、名前によって参照される配布物"
"にのみ適用されるのであって、URL を通じて指定されるものには該当しません。バー"
"ジョン番号の比較は、また、マーカー機能においても使われます。バージョンの周囲"
"にある必須でない括弧は :pep:`345` との互換性を保つために存在していますが、そ"
"のようなものを生成すべきではなくて受容するだけにとどめるべきです。"

#: ../source/specifications/dependency-specifiers.rst:182
msgid "Environment Markers"
msgstr "環境マーカ"

#: ../source/specifications/dependency-specifiers.rst:184
msgid ""
"Environment markers allow a dependency specification to provide a rule that "
"describes when the dependency should be used. For instance, consider a "
"package that needs argparse. In Python 2.7 argparse is always present. On "
"older Python versions it has to be installed as a dependency. This can be "
"expressed as so::"
msgstr ""
"環境マーカは、依存関係の指定においてその依存関係がいつ使われるべきであるかを"
"記述する規則を提供します。例えば、あるパッケージが argparse を必要とするとし"
"ましょう。Python 2.7 では argparse は常に存在します。もっと古いバージョンの "
"Python では依存関係としてインストールされなければなりません。これは次のように"
"表現することができます::"

#: ../source/specifications/dependency-specifiers.rst:191
msgid ""
"A marker expression evaluates to either True or False. When it evaluates to "
"False, the dependency specification should be ignored."
msgstr ""
"マーカ表現は評価されると真か偽に帰着します。偽と評価された場合には、その依存"
"関係の指定は無視されなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:194
msgid ""
"The marker language is inspired by Python itself, chosen for the ability to "
"safely evaluate it without running arbitrary code that could become a "
"security vulnerability. Markers were first standardised in :pep:`345`. This "
"document fixes some issues that were observed in the design described in :"
"pep:`426`."
msgstr ""
"マーカ言語は Python そのものに触発されたもので、セキュリティ上の脆弱性になり"
"かねない任意コードの実行を伴わずに安全に評価を行うことができるので選ばれまし"
"た。マーカは:pep:`345` で初めて標準化されました。この説明文書では、 :pep:"
"`426` に記述されたデザインに見られるいくつかの問題点を修正しています。"

#: ../source/specifications/dependency-specifiers.rst:199
#, fuzzy
#| msgid ""
#| "Comparisons in marker expressions are typed by the comparison operator.  "
#| "The <marker_op> operators that are not in <version_cmp> perform the same "
#| "as they do for strings in Python. The <version_cmp> operators use the "
#| "version comparison rules of the :ref:`Version specifier specification "
#| "<version-specifiers>` when those are defined (that is when both sides "
#| "have a valid version specifier). If there is no defined behaviour of this "
#| "specification and the operator exists in Python, then the operator falls "
#| "back to the Python behaviour. Otherwise an error should be raised. e.g. "
#| "the following will result in  errors::"
msgid ""
"Comparisons in marker expressions are typed by the comparison operator and "
"the type of the marker value. The <marker_op> operators that are not in "
"<version_cmp> perform the same as they do for strings or sets in Python "
"based on whether the marker value is a string or set itself. The "
"<version_cmp> operators use the version comparison rules of the :ref:"
"`Version specifier specification <version-specifiers>` when those are "
"defined (that is when both sides have a valid version specifier). If there "
"is no defined behaviour of this specification and the operator exists in "
"Python, then the operator falls back to the Python behaviour for the types "
"involved. Otherwise an error should be raised. e.g. the following will "
"result in errors::"
msgstr ""
"マーカ表現の比較は比較演算子によって分類されます。 <version_cmp> の中に入って"
"いない <marker_op> 演算子は、 Python における文字列でのそれと同様に動作しま"
"す。 <version_cmp> 演算子は、定義されている場合 (つまり両側に正当はバージョン"
"指定子を伴う場合) には、 :ref:`バージョン指定子仕様 <version-specifiers>` の"
"バージョン比較規則を採用しています。演算子の動作がこの仕様で定義されておら"
"ず、かつ、その演算子が Python に存在する場合には、当該演算子は Python での動"
"作にフォールバックします。そうでない場合にはエラーを発生させるべきです。例え"
"ば、次の表現はエラーを発生させる結果となるでしょう::"

#: ../source/specifications/dependency-specifiers.rst:213
msgid ""
"User supplied constants are always encoded as strings with either ``'`` or "
"``\"`` quote marks. Note that backslash escapes are not defined, but "
"existing implementations do support them. They are not included in this "
"specification because they add complexity and there is no observable need "
"for them today. Similarly we do not define non-ASCII character support: all "
"the runtime variables we are referencing are expected to be ASCII-only."
msgstr ""
"ユーザ側から供給された定数は、常に ``'`` または ``\"`` なる引用記号を伴った文"
"字列として符号化されます。バックスラッシュによるエスケープは定義されていませ"
"んが、現存する実装ではサポートされているということを忘れないでください。この"
"仕様には (バックスラッシュエスケープは) 含まれていませんが、それは、複雑性を"
"増加させてしまうことと、現時点では目に見えるほどの必要性がないことが理由で"
"す。同様に、非 ASCII 文字のサポートも定義していません: 我々が参照するようなラ"
"ンタイムのすべての変数は、 ASCII 文字のみで構成されているものと期待されていま"
"す。"

#: ../source/specifications/dependency-specifiers.rst:220
msgid ""
"The variables in the marker grammar such as \"os_name\" resolve to values "
"looked up in the Python runtime. With the exception of \"extra\" all values "
"are defined on all Python versions today - it is an error in the "
"implementation of markers if a value is not defined."
msgstr ""
"\"os_name\" のようなマーカの文法内の変数は、 Python のランタイム内でルック"
"アップすることで値へと解決されます。 \"extra\" を例外として、すべての値は現在"
"のすべてのバージョンの Python で定義されています - もし値が定義されていなけれ"
"ば、それはマーカの実装のエラーです。"

#: ../source/specifications/dependency-specifiers.rst:225
msgid ""
"Unknown variables must raise an error rather than resulting in a comparison "
"that evaluates to True or False."
msgstr ""
"未知の変数は、評価して真 <True> か偽 <False> となる比較の結果を返すのではな"
"く、エラーを生成しなければなりません。"

#: ../source/specifications/dependency-specifiers.rst:228
msgid ""
"Variables whose value cannot be calculated on a given Python implementation "
"should evaluate to ``0`` for versions, and an empty string for all other "
"variables."
msgstr ""
"特定の Python 実装で値を計算することができない変数は、バージョンについては "
"``0`` として、その他のすべての変数については空文字列として評価されるべきで"
"す。"

#: ../source/specifications/dependency-specifiers.rst:232
msgid ""
"The \"extra\" variable is special. It is used by wheels to signal which "
"specifications apply to a given extra in the wheel ``METADATA`` file, but "
"since the ``METADATA`` file is based on a draft version of :pep:`426`, there "
"is no current specification for this. Regardless, outside of a context where "
"this special handling is taking place, the \"extra\" variable should result "
"in an error like all other unknown variables."
msgstr ""
"\"extra\" 変数は、扱いが特別です。それは wheel ファイルにおいて、その wheel "
"の ``METADATA`` ファイル内の特定の追加物 <extra> にどの仕様を適用するべきであ"
"るかを知らせるために使われますが、 ``METADATA`` ファイルの様式が :pep:`426` "
"のドラフトバージョンに基づいているので、現時点ではその仕様が存在していないの"
"です。それにも関わらず、この特別な扱いが行われる場所ではない文脈においては、 "
"\"extra\" 変数はその他の未知の変数と同様にエラーに帰着するべきです。"

#: ../source/specifications/dependency-specifiers.rst:239
msgid ""
"The \"extras\" and \"dependency_groups\" variables are also special. They "
"are used to specify any requested extras or dependency groups when "
"installing from a lock file. Outside of the context of lock files, these two "
"variables should result in an error like all other unknown variables."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:247
msgid "Marker"
msgstr "マーカ <Marker>"

#: ../source/specifications/dependency-specifiers.rst:248
msgid "Python equivalent"
msgstr "Python 同等物"

#: ../source/specifications/dependency-specifiers.rst:249
msgid "Type"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:250
msgid "Sample values"
msgstr "値の例"

#: ../source/specifications/dependency-specifiers.rst:251
msgid "``os_name``"
msgstr "``OS の名称 <os_name>``"

#: ../source/specifications/dependency-specifiers.rst:252
msgid ":py:data:`os.name`"
msgstr ":py:data:`os.name`"

#: ../source/specifications/dependency-specifiers.rst:253
#: ../source/specifications/dependency-specifiers.rst:257
#: ../source/specifications/dependency-specifiers.rst:262
#: ../source/specifications/dependency-specifiers.rst:266
#: ../source/specifications/dependency-specifiers.rst:270
#: ../source/specifications/dependency-specifiers.rst:274
#: ../source/specifications/dependency-specifiers.rst:278
#: ../source/specifications/dependency-specifiers.rst:292
#: ../source/specifications/dependency-specifiers.rst:301
msgid "String"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:254
msgid "``posix``, ``java``"
msgstr "``posix``, ``java``"

#: ../source/specifications/dependency-specifiers.rst:255
msgid "``sys_platform``"
msgstr "``sys_platform``"

#: ../source/specifications/dependency-specifiers.rst:256
msgid ":py:data:`sys.platform`"
msgstr ":py:data:`sys.platform`"

#: ../source/specifications/dependency-specifiers.rst:258
msgid ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (note that \"linux\" is "
"from Python3 and \"linux2\" from Python2)"
msgstr ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (\"linux\" は Python3 か"
"ら、\"linux2\" は Python2 からであることに注意してください)"

#: ../source/specifications/dependency-specifiers.rst:260
msgid "``platform_machine``"
msgstr "``platform_machine``"

#: ../source/specifications/dependency-specifiers.rst:261
msgid ":py:func:`platform.machine()`"
msgstr ":py:func:`platform.machine()`"

#: ../source/specifications/dependency-specifiers.rst:263
#: ../source/specifications/platform-compatibility-tags.rst:256
msgid "``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/dependency-specifiers.rst:264
msgid "``platform_python_implementation``"
msgstr "``platform_python_implementation``"

#: ../source/specifications/dependency-specifiers.rst:265
msgid ":py:func:`platform.python_implementation()`"
msgstr ":py:func:`platform.python_implementation()`"

#: ../source/specifications/dependency-specifiers.rst:267
msgid "``CPython``, ``Jython``"
msgstr "``CPython``, ``Jython``"

#: ../source/specifications/dependency-specifiers.rst:268
msgid "``platform_release``"
msgstr "``platform_release``"

#: ../source/specifications/dependency-specifiers.rst:269
msgid ":py:func:`platform.release()`"
msgstr ":py:func:`platform.release()`"

#: ../source/specifications/dependency-specifiers.rst:271
msgid "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"
msgstr "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"

#: ../source/specifications/dependency-specifiers.rst:272
msgid "``platform_system``"
msgstr "``platform_system``"

#: ../source/specifications/dependency-specifiers.rst:273
msgid ":py:func:`platform.system()`"
msgstr ":py:func:`platform.system()`"

#: ../source/specifications/dependency-specifiers.rst:275
msgid "``Linux``, ``Windows``, ``Java``"
msgstr "``Linux``, ``Windows``, ``Java``"

#: ../source/specifications/dependency-specifiers.rst:276
msgid "``platform_version``"
msgstr "``platform_version``"

#: ../source/specifications/dependency-specifiers.rst:277
msgid ":py:func:`platform.version()`"
msgstr ":py:func:`platform.version()`"

#: ../source/specifications/dependency-specifiers.rst:279
msgid ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"
msgstr ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"

#: ../source/specifications/dependency-specifiers.rst:282
msgid "``python_version``"
msgstr "``python_version``"

#: ../source/specifications/dependency-specifiers.rst:283
msgid "``'.'.join(platform.python_version_tuple()[:2])``"
msgstr "``'.'.join(platform.python_version_tuple()[:2])``"

#: ../source/specifications/dependency-specifiers.rst:284
#: ../source/specifications/dependency-specifiers.rst:288
#: ../source/specifications/dependency-specifiers.rst:296
#, fuzzy
#| msgid "Version specifiers"
msgid ":ref:`Version <version-specifiers>`"
msgstr "バージョン指定子"

#: ../source/specifications/dependency-specifiers.rst:285
msgid "``3.4``, ``2.7``"
msgstr "``3.4``, ``2.7``"

#: ../source/specifications/dependency-specifiers.rst:286
msgid "``python_full_version``"
msgstr "``python_full_version``"

#: ../source/specifications/dependency-specifiers.rst:287
msgid ":py:func:`platform.python_version()`"
msgstr ":py:func:`platform.python_version()`"

#: ../source/specifications/dependency-specifiers.rst:289
#: ../source/specifications/dependency-specifiers.rst:297
msgid "``3.4.0``, ``3.5.0b1``"
msgstr "``3.4.0``, ``3.5.0b1``"

#: ../source/specifications/dependency-specifiers.rst:290
msgid "``implementation_name``"
msgstr "``implementation_name``"

#: ../source/specifications/dependency-specifiers.rst:291
msgid ":py:data:`sys.implementation.name <sys.implementation>`"
msgstr ":py:data:`sys.implementation.name <sys.implementation>`"

#: ../source/specifications/dependency-specifiers.rst:293
msgid "``cpython``"
msgstr "``cpython``"

#: ../source/specifications/dependency-specifiers.rst:294
msgid "``implementation_version``"
msgstr "``implementation_version``"

#: ../source/specifications/dependency-specifiers.rst:295
msgid "see definition below"
msgstr "下方の定義を見てください"

#: ../source/specifications/dependency-specifiers.rst:298
msgid "``extra``"
msgstr "``extra``"

#: ../source/specifications/dependency-specifiers.rst:299
#: ../source/specifications/dependency-specifiers.rst:304
#: ../source/specifications/dependency-specifiers.rst:309
msgid ""
"An error except when defined by the context interpreting the specification."
msgstr "仕様を通訳する文脈で定義された場合を除くエラー。"

#: ../source/specifications/dependency-specifiers.rst:302
#, fuzzy
#| msgid "pyproject.toml"
msgid "``toml``"
msgstr "pyproject.toml"

#: ../source/specifications/dependency-specifiers.rst:303
#: ../source/specifications/pylock-toml.rst:108
#, fuzzy
#| msgid "``extra``"
msgid "``extras``"
msgstr "``extra``"

#: ../source/specifications/dependency-specifiers.rst:306
#: ../source/specifications/dependency-specifiers.rst:311
msgid "Set of strings"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:307
msgid "``{\"toml\"}``"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:308
#, fuzzy
#| msgid "``dependencies``"
msgid "``dependency_groups``"
msgstr "``依存関係 <dependencies``"

#: ../source/specifications/dependency-specifiers.rst:312
#, fuzzy
#| msgid "``test``"
msgid "``{\"test\"}``"
msgstr "``test``"

#: ../source/specifications/dependency-specifiers.rst:314
msgid ""
"The ``implementation_version`` marker variable is derived from :py:data:`sys."
"implementation.version <sys.implementation>`:"
msgstr ""
"``implementation_version`` マーカ変数は、 :py:data:`sys.implementation."
"version <sys.implementation>` から派生したものです :"

#: ../source/specifications/dependency-specifiers.rst:331
msgid ""
"This environment markers section, initially defined through :pep:`508`, "
"supersedes the environment markers section in :pep:`345`."
msgstr ""
"この環境マーカの節は、当初は :pep:`508` を通して定義されましたが、 :pep:"
"`345` における環境マーカの節を置き換えます。"

#: ../source/specifications/dependency-specifiers.rst:337
msgid "Complete Grammar"
msgstr "完全な文法"

#: ../source/specifications/dependency-specifiers.rst:339
msgid "The complete parsley grammar::"
msgstr "完全な parsley 文法::"

#: ../source/specifications/dependency-specifiers.rst:446
msgid "A test program - if the grammar is in a string ``grammar``:"
msgstr "テストプログラム - もし ``grammar`` 文字列内に文法があれば:"

#: ../source/specifications/dependency-specifiers.rst:518
msgid "November 2015: This specification was approved through :pep:`508`."
msgstr "2015年11月: :pep:`508` を通じてこの仕様が承認されました。"

#: ../source/specifications/dependency-specifiers.rst:519
msgid ""
"July 2019: The definition of ``python_version`` was `changed <python-version-"
"change_>`_ from ``platform.python_version()[:3]`` to ``'.'.join(platform."
"python_version_tuple()[:2])``, to accommodate potential future versions of "
"Python with 2-digit major and minor versions (e.g. 3.10). [#future_versions]_"
msgstr ""
"2019年6月: ``python_version`` の定義は、Python の将来のバージョンが二桁のメ"
"ジャーバージョンやマイナーバージョンを持つ場合 (例えば 3.10) でもそれを収容で"
"きるように、 ``platform.python_version()[:3]`` から ``'.'.join(platform."
"python_version_tuple()[:2])`` へ `変更されました <python-version-"
"change_>`_ 。 [#future_versions]_"

#: ../source/specifications/dependency-specifiers.rst:524
msgid ""
"June 2024: The definition of ``version_many`` was changed to allow trailing "
"commas, matching with the behavior of the Python implementation that has "
"been in use since late 2022."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:527
msgid ""
"April 2025: Added ``extras`` and ``dependency_groups`` for :ref:`lock-file-"
"spec` as approved through :pep:`751`."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:529
#: ../source/specifications/name-normalization.rst:56
msgid ""
"August 2025: The suggested name validation regex was fixed to match the "
"field specification (it previously finished with ``$`` instead of ``\\Z``, "
"incorrectly permitting trailing newlines)"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:537
msgid ""
"pip, the recommended installer for Python packages (http://pip.readthedocs."
"org/en/stable/)"
msgstr ""
"Python のパッケージをインストールする際に推奨されるツールである pip (http://"
"pip.readthedocs.org/en/stable/)"

#: ../source/specifications/dependency-specifiers.rst:540
msgid "The parsley PEG library. (https://pypi.python.org/pypi/parsley/)"
msgstr "parsley PEG ライブラリ。 (https://pypi.python.org/pypi/parsley/)"

#: ../source/specifications/dependency-specifiers.rst:543
msgid ""
"Future Python versions might be problematic with the definition of "
"Environment Marker Variable ``python_version`` (https://github.com/python/"
"peps/issues/560)"
msgstr ""
"Python の将来のバージョンでは、環境マーカ変数の ``python_version`` の定義が問"
"題をはらむかもしれません。 (https://github.com/python/peps/issues/560)"

#: ../source/specifications/direct-url.rst:6
msgid "Recording the Direct URL Origin of installed distributions"
msgstr "インストールされた配布物の配布元へ直接アクセスする URL を記録する"

#: ../source/specifications/direct-url.rst:8
msgid ""
"This document specifies a :file:`direct_url.json` file in the ``*.dist-"
"info`` directory of an installed distribution, to record the Direct URL "
"Origin of the distribution. The general structure and usage of ``*.dist-"
"info`` directories is described in :ref:`recording-installed-packages`."
msgstr ""
"この説明文書では、インストール済みの配布物の `*.dist-info` ディレクトリにあ"
"る :file:`direct_url.json` ファイルによって配布物の配布元へ直接アクセスする "
"URL を記録する方法を指定します。 ``*.dist-info`` ディレクトリの一般的な構造と"
"使用方法は、 :ref:`インストール済みパッケージを記録する <recording-installed-"
"packages>` に記述されています。"

#: ../source/specifications/direct-url.rst:17
msgid ""
"The :file:`direct_url.json` file MUST be created in the :file:`*.dist-info` "
"directory by installers when installing a distribution from a requirement "
"specifying a direct URL reference (including a VCS URL)."
msgstr ""
":file:`direct_url.json` ファイルは、要求事項が指定するダイレクト (VCS の URL "
"を含む) 参照 URL からインストールしている時に、インストーラによって :file:`*."
"dist-info` ディレクトリに生成されなければなりません。"

#: ../source/specifications/direct-url.rst:21
#: ../source/specifications/recording-installed-packages.rst:222
msgid ""
"This file MUST NOT be created when installing a distribution from an other "
"type of requirement (i.e. name plus version specifier)."
msgstr ""
"他のタイプの要求事項 (すなわち、名前とバージョン指定子) から配布物をインス"
"トールする際には、このファイルを生成してはなりません。"

#: ../source/specifications/direct-url.rst:24
msgid ""
"This JSON file MUST be a UTF-8 encoded, :rfc:`8259` compliant, serialization "
"of the :doc:`direct-url-data-structure`."
msgstr ""
"この JSON ファイルは、 :rfc:`8259` に準拠するように UTF-8 で符号化されていな"
"ければならず、シリアル化の方法は :doc:`direct-url-data-structure` でなければ"
"なりません。"

#: ../source/specifications/direct-url.rst:29
msgid ""
"When the requested URL has the file:// scheme and points to a local "
"directory that happens to contain a VCS checkout, installers MUST NOT "
"attempt to infer any VCS information and therefore MUST NOT output any VCS "
"related information (such as ``vcs_info``) in :file:`direct_url.json`."
msgstr ""
"要求された URL が file:// スキームであって VCS からチェックアウトしたものを含"
"むローカルディレクトリを指し示している場合には、インストーラはいかなる VCS 情"
"報をも推定してはならず、従って、いかなる (``vcs_info`` のような) VCS 関連情報"
"をも :file:`direct_url.json` に出力してはなりません。"

#: ../source/specifications/direct-url.rst:36
msgid ""
"As a general rule, installers should as much as possible preserve the "
"information that was provided in the requested URL when generating :file:"
"`direct_url.json`. For example user:password environment variables should be "
"preserved and ``requested_revision`` should reflect the revision that was "
"provided in the requested URL as faithfully as possible. This information is "
"however *enriched* with more precise data, such as ``commit_id``."
msgstr ""
"一般的な規則として、 :file:`direct_url.json` を生成する際には、インストーラは"
"可能な限り要求された URL に含まれる情報を保存するべきです。例えば、 user:"
"password を環境変数から読み込むなら環境変数を参照するような URL として保存さ"
"れるべきであり、 ``requested_revision`` は要求された URL の中に出現するものを"
"極力そのまま反映するべきです。しかしながら、この情報は (``commit_id`` のよう"
"な) もっと精密なデータを使って *精製* されます。"

#: ../source/specifications/direct-url.rst:45
msgid "Example pip commands and their effect on direct_url.json"
msgstr "pip コマンドの例と direct_url.json に与える影響"

#: ../source/specifications/direct-url.rst:47
msgid "Commands that generate a ``direct_url.json``:"
msgstr "``direct_url.json`` を生成するコマンド:"

#: ../source/specifications/direct-url.rst:49
msgid "``pip install https://example.com/app-1.0.tgz``"
msgstr ""

#: ../source/specifications/direct-url.rst:50
msgid "``pip install https://example.com/app-1.0.whl``"
msgstr ""

#: ../source/specifications/direct-url.rst:51
msgid ""
"``pip install \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"``"
msgstr ""
"``pip install \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"``"

#: ../source/specifications/direct-url.rst:52
msgid "``pip install ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:53
msgid "``pip install file:///home/user/app``"
msgstr ""

#: ../source/specifications/direct-url.rst:54
msgid ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (in which case, ``url`` will be the local "
"directory where the git repository has been cloned to, and ``dir_info`` will "
"be present with ``\"editable\": true`` and no ``vcs_info`` will be set)"
msgstr ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (この場合、 ``url`` は git リポジトリのクローン先"
"のローカルディレクトリになり、 ``dir_info`` は ``\"editable\": true`` という"
"形で存在し、 ``vcs_info`` は設定されないということになるでしょう)"

#: ../source/specifications/direct-url.rst:58
msgid "``pip install -e ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:60
msgid "Commands that *do not* generate a ``direct_url.json``"
msgstr "``direct_url.json`` を *生成しない* コマンド"

#: ../source/specifications/direct-url.rst:62
msgid "``pip install app``"
msgstr ""

#: ../source/specifications/direct-url.rst:63
msgid "``pip install app --no-index --find-links https://example.com/``"
msgstr ""

#: ../source/specifications/direct-url.rst:69
msgid "March 2020: This specification was approved through :pep:`610`."
msgstr "2020年3月: :pep:`610` を通じてこの仕様が承認されました。"

#: ../source/specifications/direct-url-data-structure.rst:7
msgid "Direct URL Data Structure"
msgstr "ダイレクト URL データ構造 <Direct URL Data Structure>"

#: ../source/specifications/direct-url-data-structure.rst:9
msgid ""
"This document specifies a JSON-serializable abstract data structure that can "
"represent URLs to python projects and distribution artifacts such as VCS "
"source trees, local source trees, source distributions and wheels."
msgstr ""
"この説明文書では、python プロジェクトや VCS 上のソースツリーやローカルのソー"
"スツリーやソースコード配布物や wheel ファイルのような配布物アーティファクトに"
"対してURLを表現することを可能とする、 JSON のシリアル化抽象データ構造の仕様を"
"定義します。"

#: ../source/specifications/direct-url-data-structure.rst:13
msgid ""
"At time of writing, it is not formally specified how to merge the parts of "
"this data structure into a single URL that can be passed to tools. A common "
"representation is the pip URL format (`VCS Support <pip-vcs-support_>`_), "
"other examples are provided in the :ref:`Version specifier specification "
"<version-specifiers>`."
msgstr ""
"本稿執筆時点では、ツール群に渡せるようにこのデータ構造の各部分を単一の URL に"
"まとめる方法については公式には指定されていません。よく見られる表現形式は pip "
"URL フォーマット (`VCS サポート <pip-vcs-support_>`_) で、他の例が :ref:`バー"
"ジョン指定子仕様 <version-specifiers>` の中で提供されています。"

#: ../source/specifications/direct-url-data-structure.rst:21
msgid ""
"The Direct URL Data Structure MUST be a dictionary, serializable to JSON "
"according to :rfc:`8259`."
msgstr ""
"直接 URL データ構造は辞書でなければならず、 :rfc:`8259` に従って JSON にシリ"
"アライズできなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:24
msgid ""
"It MUST contain at least two fields. The first one is ``url``, with type "
"``string``. Its content must be a valid URL according to the `WHATWG URL "
"Standard <whatwg-url-standard_>`_."
msgstr ""
"少なくとも二つのフィールドが含まれていなければなりません。一つ目は "
"``string`` 型の ``url`` です。その内容は、 `WHATWG URL 標準 <whatwg-url-"
"standard_>`_ に従う正当な URL でなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:28
msgid ""
"Depending on what ``url`` refers to, the second field MUST be one of "
"``vcs_info`` (if ``url`` is a VCS reference), ``archive_info`` (if ``url`` "
"is a source archive or a wheel), or ``dir_info`` (if ``url``  is a local "
"directory). These info fields have a (possibly empty) subdictionary as "
"value, with the possible keys defined below."
msgstr ""
"``url`` が何を参照しているかによって、二つ目のフィールドは ``vcs_info`` "
"(``url`` が VCS 参照である場合)・ ``archive_info`` (``url`` がソースコード"
"アーカイブか wheel である場合)・ ``dir_info`` (``url`` がローカルディレクトリ"
"である場合) のうちのいずれか一つでなければなりません。これらの info フィール"
"ドは、(空である場合もありますが) 以下に定義するキー群を持つことができるサブ"
"ディレクトリを値として持ちます。"

#: ../source/specifications/direct-url-data-structure.rst:35
msgid "Security Considerations"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:37
msgid ""
"When persisted, ``url`` MUST be stripped of any sensitive authentication "
"information, for security reasons."
msgstr ""
"固持する場合には、``url`` は、セキュリティ上の理由から、機微に関わる認証情報"
"をすべて削除しておかなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:40
msgid ""
"The user:password section of the URL MAY however be composed of environment "
"variables, matching the following regular expression:"
msgstr ""
"URLの user:password の部分は、しかしながら、次に述べる正規表現に合致する形"
"で、環境変数から構成しても構いません:"

#: ../source/specifications/direct-url-data-structure.rst:48
#, fuzzy
#| msgid ""
#| "Additionally, the user:password section of the URL MAY be a well-known, "
#| "non security sensitive string. A typical example is ``git`` in the case "
#| "of an URL such as ``ssh://git@gitlab.com/user/repo``."
msgid ""
"Additionally, the user:password section of the URL MAY be a well-known, non "
"security sensitive string. A typical example is ``git`` in the case of a URL "
"such as ``ssh://git@gitlab.com/user/repo``."
msgstr ""
"さらに、 URL の user:password 部分は、広く知られたセキュリティ的に問題のない"
"文字列であっても構いません。典型的な例としては、 ``ssh://git@gitlab.com/user/"
"repo`` のような URL における ``git`` を挙げることができます。"

#: ../source/specifications/direct-url-data-structure.rst:55
msgid "VCS URLs"
msgstr "VCS URL群"

#: ../source/specifications/direct-url-data-structure.rst:57
msgid ""
"When ``url`` refers to a VCS repository, the ``vcs_info`` key MUST be "
"present as a dictionary with the following keys:"
msgstr ""
"``url`` が VCS リポジトリを参照している場合、 以下のキー群を伴った "
"``vcs_info`` キーが辞書に存在していなければなりません:"

#: ../source/specifications/direct-url-data-structure.rst:60
msgid ""
"A ``vcs`` key (type ``string``) MUST be present, containing the name of the "
"VCS (i.e. one of ``git``, ``hg``, ``bzr``, ``svn``). Other VCS's SHOULD be "
"registered by writing a PEP to amend this specification. The ``url`` value "
"MUST be compatible with the corresponding VCS, so an installer can hand it "
"off without transformation to a checkout/download command of the VCS."
msgstr ""
"(``git`` ・ ``hg`` ・ ``bzr`` ・ ``svn`` のいずれかのような) VCS の名前を含ん"
"だ ``vcs`` キー (``string`` 型) が存在していなければなりません。その他の VCS "
"については、この仕様を修正するための PEP を書くことによって登録されるべきで"
"す。当該 VCS の checkout/download コマンドへの翻訳をしなくてもインストーラが "
"手を離してしまえるようにするために、 ``url`` の値は対応する VCS と齟齬のない"
"ものでなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:66
msgid ""
"A ``requested_revision`` key (type ``string``) MAY be present naming a "
"branch/tag/ref/commit/revision/etc (in a format compatible with the VCS). "
"This field MUST match the revision requested by the user and MUST NOT exist "
"when the user did not select a specific revision."
msgstr ""
"``requested_revision`` キー (``string`` 型) は、 (VCS と互換性のあるフォー"
"マットであれば) どのブランチ・タグ・リファレンス・コミット・リビジョンその他"
"を指定するために存在していても構いません。このフィールドは、ユーザが要求する"
"リビジョンに合致しなければなりませんし、ユーザが特定のリビジョンを選択してい"
"ない場合には存在してはなりません。"

#: ../source/specifications/direct-url-data-structure.rst:70
msgid ""
"A ``commit_id`` key (type ``string``) MUST be present, containing the exact "
"commit/revision number that was/is to be installed. If the VCS supports "
"commit-hash based revision identifiers, such commit-hash MUST be used as "
"``commit_id`` in order to reference an immutable version of the source code."
msgstr ""
"``commit_id`` キー (``string`` 型) は、正確にどのコミットまたはリビジョンがイ"
"ンストールされた/されるかを示すもので、必須のキーです。 VCS がリビジョン識別"
"子に基づくコミットハッシュをサポートしているなら、インストールされたものの"
"ソースコードの不変のバージョンを指し示す目的で、そのようなコミットハッシュを "
"``commit_id`` として使わなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:80
msgid "Archive URLs"
msgstr "アーカイブ URL 群"

#: ../source/specifications/direct-url-data-structure.rst:82
msgid ""
"When ``url`` refers to a source archive or a wheel, the ``archive_info`` key "
"MUST be present as a dictionary with the following keys:"
msgstr ""
"``url`` がソースコードのアーカイブや wheel ファイルを指し示す場合には、 "
"``archive_info`` キーが次のようなキーを持つ辞書の形で存在しなければなりませ"
"ん:"

#: ../source/specifications/direct-url-data-structure.rst:85
msgid ""
"A ``hashes`` key SHOULD be present as a dictionary mapping a hash name to a "
"hex encoded digest of the file."
msgstr ""
"``hashes`` キーは、ハッシュ名から16進数表記のファイルハッシュ値への対応を保持"
"する辞書として存在するべきです。"

#: ../source/specifications/direct-url-data-structure.rst:88
msgid ""
"Multiple hashes can be included, and it is up to the consumer to decide what "
"to do with multiple hashes (it may validate all of them or a subset of them, "
"or nothing at all)."
msgstr ""
"複数のハッシュ値を含めることが可能で、そのような複数のハッシュ値を使って何を"
"するか (すべてのハッシュ値を検証しても一部だけを検証しても構いませんし、何も"
"しなくても構いません) については利用する側次第です。"

#: ../source/specifications/direct-url-data-structure.rst:92
msgid "These hash names SHOULD always be normalized to be lowercase."
msgstr "これらのハッシュの名前は、常に小文字に正規化されているべきです。"

#: ../source/specifications/direct-url-data-structure.rst:94
msgid ""
"Any hash algorithm available via :py:mod:`hashlib` (specifically any that "
"can be passed to :py:func:`hashlib.new()` and do not require additional "
"parameters) can be used as a key for the hashes dictionary. At least one "
"secure algorithm from :py:data:`hashlib.algorithms_guaranteed` SHOULD always "
"be included. At time of writing, ``sha256`` specifically is recommended."
msgstr ""
":py:mod:`hash lib` 経由で利用可能なハッシュアルゴリズム (とりわけ、 :py:func:"
"`hashlib.new()` に渡すことができて、かつ、それ以上のパラメータを必要としない"
"もの) はどれでも、ハッシュ値を格納する辞書のキーとして用いることができま"
"す。 :py:data:`hashlib.algorithms_garanteed` から安全なアルゴリズムを少なくと"
"もひとつ選択して含めるべきです。執筆時点では、 ``sha256`` が特に推奨されてい"
"ます。"

#: ../source/specifications/direct-url-data-structure.rst:100
msgid ""
"A deprecated ``hash`` key (type ``string``) MAY be present for backwards "
"compatibility purposes, with value ``<hash-algorithm>=<expected-hash>``."
msgstr ""
"非推奨となった ``hash`` キー (``string`` 型) は、後方互換性を保つ目的でなら "
"``<hash-algorithm>=<expected-hash>`` を値に取る形で存在していても構いません。"

#: ../source/specifications/direct-url-data-structure.rst:103
msgid ""
"Producers of the data structure SHOULD emit the ``hashes`` key whether one "
"or multiple hashes are available. Producers SHOULD continue to emit the "
"``hash`` key in contexts where they did so before, so as to keep backwards "
"compatibility for existing clients."
msgstr ""
"データ構造を生成する側では、ひとつまたは複数のハッシュが利用できるなら "
"``hashes`` キーを生成するべきです。以前からそうしていたので既存のクライアント"
"のために後方互換性を保つためなら、生成側は ``hash`` キーの生成を継続するべき"
"です。"

#: ../source/specifications/direct-url-data-structure.rst:107
msgid ""
"When both the ``hash`` and ``hashes`` keys are present, the hash represented "
"in the ``hash`` key MUST also be present in the ``hashes`` dictionary, so "
"consumers can consider the ``hashes`` key only if it is present, and fall "
"back to ``hash`` otherwise."
msgstr ""
"``hash`` と ``hashes`` の両方のキーが存在する時は、 ``hash`` キーの中に現れる"
"ハッシュは、 ``hashes`` の辞書の中にも存在しなければならず、そうすることで利"
"用する側では ``hashes`` キーがあればそれだけを考慮し、なければ ``hash`` に"
"フォールバックすることが可能になります。"

#: ../source/specifications/direct-url-data-structure.rst:114
msgid "Local directories"
msgstr "ローカルディレクトリ"

#: ../source/specifications/direct-url-data-structure.rst:116
msgid ""
"When ``url`` refers to a local directory, the ``dir_info`` key MUST be "
"present as a dictionary with the following key:"
msgstr ""
"``url`` がローカルのディレクトリを参照している場合には、以下のキーを含む辞書"
"として ``dir_info`` キーが存在していなければなりません。"

#: ../source/specifications/direct-url-data-structure.rst:119
msgid ""
"``editable`` (type: ``boolean``): ``true`` if the distribution was/is to be "
"installed in editable mode, ``false`` otherwise. If absent, default to "
"``false``."
msgstr ""
"配布物が編集可能モードでインストールされた/される場合には ``editable`` "
"(``boolean`` 型): ``true`` 、そうでなければ ``false`` 。存在していない場合の"
"デフォルトは ``false`` です。"

#: ../source/specifications/direct-url-data-structure.rst:122
msgid ""
"When ``url`` refers to a local directory, it MUST have the ``file`` scheme "
"and be compliant with :rfc:`8089`. In particular, the path component must be "
"absolute. Symbolic links SHOULD be preserved when making relative paths "
"absolute."
msgstr ""
"``url`` がローカルのディレクトリを参照している場合、 :rfc:``8089` に適合する "
"``file`` スキームが存在していなければなりません。特にパス部分は絶対パスでなけ"
"ればなりません。相対パスを絶対パスに変換する際には、シンボリックリンクはその"
"まま保存されているべきです。"

#: ../source/specifications/direct-url-data-structure.rst:130
msgid "Projects in subdirectories"
msgstr "サブディレクトリ内のプロジェクト群"

#: ../source/specifications/direct-url-data-structure.rst:132
msgid ""
"A top-level ``subdirectory`` field MAY be present containing a directory "
"path, relative to the root of the VCS repository, source archive or local "
"directory, to specify where ``pyproject.toml`` or ``setup.py`` is located."
msgstr ""
"トップレベルの ``subdirectory`` フィールドは、 ``pyproject.toml`` または "
"``setup.py`` が存在する場所を指定するために、 VCS リポジトリやソースコードの"
"アーカイブやローカルのディレクトリのルートディレクトリに対する相対パスとして"
"示したディレクトリパスを値とするものとして存在することが許されています。"

#: ../source/specifications/direct-url-data-structure.rst:139
msgid "Registered VCS"
msgstr "登録済みの VCS"

#: ../source/specifications/direct-url-data-structure.rst:141
msgid ""
"This section lists the registered VCS's; expanded, VCS-specific information "
"on how to use the ``vcs``, ``requested_revision``, and other fields of "
"``vcs_info``; and in some cases additional VCS-specific fields. Tools MAY "
"support other VCS's although it is RECOMMENDED to register them by writing a "
"PEP to amend this specification. The ``vcs`` field SHOULD be the command "
"name (lowercased). Additional fields that would be necessary to support such "
"VCS SHOULD be prefixed with the VCS command name."
msgstr ""
"この節では登録済み VCS; ``vcs`` や ``requested_revision`` やその他の "
"``vcs_info`` 内のフィールドや、さらにある場合には特定の VCS に特有のフィール"
"ドなどの使い方のような拡張された VCS 特有の情報 の一覧を示します。 PEP を書く"
"ことでこの仕様を修正する形で別の VCS を登録することが推奨されていますが、ツー"
"ルの側で他の VCS を (訳注、VCS 登録作業抜きで) サポートしても構いません。 "
"``vcs`` フィールドの値は、 (小文字の) コマンド名であるべきです。当該 VCS をサ"
"ポートするのに必要であると思われるその他のフィールドについては、当該 VCS のコ"
"マンド名で始まる名前にするべきです。"

#: ../source/specifications/direct-url-data-structure.rst:151
msgid "Git"
msgstr "Git"

#: ../source/specifications/direct-url-data-structure.rst:154
#: ../source/specifications/direct-url-data-structure.rst:181
#: ../source/specifications/direct-url-data-structure.rst:199
#: ../source/specifications/direct-url-data-structure.rst:217
msgid "Home page"
msgstr "ホームページ"

#: ../source/specifications/direct-url-data-structure.rst:154
msgid "https://git-scm.com/"
msgstr "https://git-scm.com/"

#: ../source/specifications/direct-url-data-structure.rst:157
#: ../source/specifications/direct-url-data-structure.rst:184
#: ../source/specifications/direct-url-data-structure.rst:202
#: ../source/specifications/direct-url-data-structure.rst:220
msgid "vcs command"
msgstr "vcs コマンド"

#: ../source/specifications/direct-url-data-structure.rst:157
#: ../source/specifications/direct-url-data-structure.rst:160
msgid "git"
msgstr "git"

#: ../source/specifications/direct-url-data-structure.rst:160
#: ../source/specifications/direct-url-data-structure.rst:187
#: ../source/specifications/direct-url-data-structure.rst:205
#: ../source/specifications/direct-url-data-structure.rst:223
msgid "``vcs`` field"
msgstr "``vcs`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:164
#: ../source/specifications/direct-url-data-structure.rst:190
#: ../source/specifications/direct-url-data-structure.rst:208
#: ../source/specifications/direct-url-data-structure.rst:227
msgid "``requested_revision`` field"
msgstr "``requested_revision`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:163
msgid ""
"A tag name, branch name, Git ref, commit hash, shortened commit hash, or "
"other commit-ish."
msgstr ""
"タグ名・ブランチ名・Git 参照・コミットハッシュ・短縮型コミットハッシュ・その"
"他のコミットハッシュ的なもの。"

#: ../source/specifications/direct-url-data-structure.rst:167
#: ../source/specifications/direct-url-data-structure.rst:193
#: ../source/specifications/direct-url-data-structure.rst:211
#: ../source/specifications/direct-url-data-structure.rst:232
msgid "``commit_id`` field"
msgstr "``commit_id`` フィールド"

#: ../source/specifications/direct-url-data-structure.rst:167
msgid "A commit hash (40 hexadecimal characters sha1)."
msgstr "コミットハッシュ (16進数で40文字のSHA1)。"

#: ../source/specifications/direct-url-data-structure.rst:171
msgid ""
"Tools can use the ``git show-ref`` and ``git symbolic-ref`` commands to "
"determine if the ``requested_revision`` corresponds to a Git ref. In turn, a "
"ref beginning with ``refs/tags/`` corresponds to a tag, and a ref beginning "
"with ``refs/remotes/origin/`` after cloning corresponds to a branch."
msgstr ""
"ツールは、 ``requested_revision`` が Git 参照に対応しているか否かを判断するた"
"めに ``git show-ref`` や ``git symbolic-ref`` コマンドを使うことができます。"
"さらに、 ``refs/tags/`` で始まる参照はタグに対応し、クローンした後に ``refs/"
"remotes/origin/`` で始まる参照はブランチに対応します。"

#: ../source/specifications/direct-url-data-structure.rst:178
msgid "Mercurial"
msgstr "Mercurial"

#: ../source/specifications/direct-url-data-structure.rst:181
msgid "https://www.mercurial-scm.org/"
msgstr "https://www.mercurial-scm.org/"

#: ../source/specifications/direct-url-data-structure.rst:184
#: ../source/specifications/direct-url-data-structure.rst:187
msgid "hg"
msgstr "hg"

#: ../source/specifications/direct-url-data-structure.rst:190
msgid "A tag name, branch name, changeset ID, shortened changeset ID."
msgstr "タグ名・ブランチ名・チェンジセット ID ・短縮型チェンジセット ID。"

#: ../source/specifications/direct-url-data-structure.rst:193
msgid "A changeset ID (40 hexadecimal characters)."
msgstr "チェンジセット ID (16 進数で 40 文字)。"

#: ../source/specifications/direct-url-data-structure.rst:196
msgid "Bazaar"
msgstr "Bazaar"

#: ../source/specifications/direct-url-data-structure.rst:199
msgid "https://www.breezy-vcs.org/"
msgstr "https://www.breezy-vcs.org/"

#: ../source/specifications/direct-url-data-structure.rst:202
#: ../source/specifications/direct-url-data-structure.rst:205
msgid "bzr"
msgstr "bzr"

#: ../source/specifications/direct-url-data-structure.rst:208
msgid "A tag name, branch name, revision id."
msgstr "タグ名・ブランチ名・リビジョン id 。"

#: ../source/specifications/direct-url-data-structure.rst:211
msgid "A revision id."
msgstr "リビジョン id 。"

#: ../source/specifications/direct-url-data-structure.rst:214
msgid "Subversion"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:217
msgid "https://subversion.apache.org/"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:220
#: ../source/specifications/direct-url-data-structure.rst:223
msgid "svn"
msgstr "svn"

#: ../source/specifications/direct-url-data-structure.rst:226
msgid ""
"``requested_revision`` must be compatible with ``svn checkout`` ``--"
"revision`` option. In Subversion, branch or tag is part of ``url``."
msgstr ""
"``requested_revision`` は、 ``svn checkout`` ``--revision`` オプションと互換"
"でなければなりません。 Subversion では、ブランチまたはタグは ``url`` の一部で"
"す。"

#: ../source/specifications/direct-url-data-structure.rst:230
msgid ""
"Since Subversion does not support globally unique identifiers, this field is "
"the Subversion revision number in the corresponding repository."
msgstr ""
"Subversion は大域的にユニークな識別子をサポートしていないので、このフィールド"
"は当該リポジトリにおける Subversion のリビジョン番号です。"

#: ../source/specifications/direct-url-data-structure.rst:235
msgid "JSON Schema"
msgstr "JSON スキーマ"

#: ../source/specifications/direct-url-data-structure.rst:237
msgid ""
"The following JSON Schema can be used to validate the contents of "
"``direct_url.json``:"
msgstr ""
"以下に述べる JSON スキーマを ``direct_url.json`` の内容を検証するために使うこ"
"とができます:"

#: ../source/specifications/direct-url-data-structure.rst:244
msgid "Source archive:"
msgstr "ソースコードアーカイブ:"

#: ../source/specifications/direct-url-data-structure.rst:257
msgid "Git URL with tag and commit-hash:"
msgstr "タグおよびコミットハッシュ付きの Git のURL:"

#: ../source/specifications/direct-url-data-structure.rst:270
msgid "Local directory:"
msgstr "ローカルディレクトリ:"

#: ../source/specifications/direct-url-data-structure.rst:279
msgid "Local directory in editable mode:"
msgstr "編集可能モード状態にあるローカルディレクトリ:"

#: ../source/specifications/direct-url-data-structure.rst:294
msgid ""
"March 2020: This specification was approved through :pep:`610`, defining the "
"``direct_url.json`` metadata file."
msgstr ""
"2020年3月: ``direct_url.json`` メタデータファイルを定義するこの仕様は、 :pep:"
"`610` を通じて承認されました。"

#: ../source/specifications/direct-url-data-structure.rst:296
msgid ""
"January 2023: Added the ``archive_info.hashes`` key (`discussion <archive-"
"info-hashes_>`_)."
msgstr ""
"2023年1月: ``archive_info.hashes`` キーを追加しました (`議論 <archive-info-"
"hashes_>`_) 。"

#: ../source/specifications/entry-points.rst:5
msgid "Entry points specification"
msgstr "エントリポイントの仕様"

#: ../source/specifications/entry-points.rst:7
msgid ""
"*Entry points* are a mechanism for an installed distribution to advertise "
"components it provides to be discovered and used by other code. For example:"
msgstr ""
"*エントリポイント* は、インストールされた配布物が他のプログラムから発見され使"
"用されるように提供するコンポーネントを広報するためのメカニズムです。例えば:"

#: ../source/specifications/entry-points.rst:11
msgid ""
"Distributions can specify ``console_scripts`` entry points, each referring "
"to a function. When *pip* (or another console_scripts aware installer) "
"installs the distribution, it will create a command-line wrapper for each "
"entry point."
msgstr ""
"配布物では、それぞれが関数を参照するような ``console_scripts`` エントリポイン"
"トを指定することができます。 *pip* (または console_scripts を認識する他のイン"
"ストーラ) が配布物をインストールする際に、各エントリポイントのコマンドライン"
"ラッパを生成します。"

#: ../source/specifications/entry-points.rst:14
msgid ""
"Applications can use entry points to load plugins; e.g. Pygments (a syntax "
"highlighting tool) can use additional lexers and styles from separately "
"installed packages. For more about this, see :doc:`/guides/creating-and-"
"discovering-plugins`."
msgstr ""
"アプリケーションは、プラグインをロードするためにエントリポイントを用いること"
"ができます; 例えば、 Pygments (シンタックスハイライトを行うツール) は追加的な"
"字句解析器を使うことが可能であり、また、別にインストールされたパッケージから"
"提供されるスタイルを使うことができます。この件の詳細については、 :doc:`/"
"guides/creating-and-discovering-plugins` を見てください。"

#: ../source/specifications/entry-points.rst:19
msgid ""
"The entry point file format was originally developed to allow packages built "
"with setuptools to provide integration point metadata that would be read at "
"runtime with :py:mod:`importlib.metadata`. It is now defined as a PyPA "
"interoperability specification in order to allow build tools other than "
"``setuptools`` to publish :py:mod:`importlib.metadata` compatible entry "
"point metadata, and runtime libraries other than :py:mod:`importlib."
"metadata` to portably read published entry point metadata (potentially with "
"different caching and conflict resolution strategies)."
msgstr ""
"エントリポイントのファイルフォーマットは、元々は、 setuptools でビルドされた"
"パッケージが、動作時 (ランタイム) に :py:mod:`importlib.metadata` で読み取ら"
"れるであろうと思われるインテグレーションポイントメタデータを提供できるように"
"と開発されました。現在では、 ``setuptools`` 以外のビルドツールが :py:mod:"
"`importlib.metadata` と互換性のあるエントリポイントのメタデータを公開し、 :"
"py:mod:`importlib.metadata` 以外のランタイムライブラリが移植可能な形で公開さ"
"れているエントリポイントのメタデータを (潜在的には、たとえ異なるキャッシング"
"と衝突回避の戦略を採用していたとしても) 読み取ることができるようにと PyPA 相"
"互互換性仕様において定義されています。"

#: ../source/specifications/entry-points.rst:28
msgid "Data model"
msgstr "データモデル"

#: ../source/specifications/entry-points.rst:30
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr ""
"概念的に、エントリポイントは３個の属性を持たなければならないと定義されていま"
"す:"

#: ../source/specifications/entry-points.rst:32
msgid ""
"The **group** that an entry point belongs to indicates what sort of object "
"it provides. For instance, the group ``console_scripts`` is for entry points "
"referring to functions which can be used as a command, while ``pygments."
"styles`` is the group for classes defining pygments styles. The consumer "
"typically defines the expected interface. To avoid clashes, consumers "
"defining a new group should use names starting with a PyPI name owned by the "
"consumer project, followed by ``.``. Group names must be one or more groups "
"of letters, numbers and underscores, separated by dots (regex ``^\\w+(\\."
"\\w+)*$``)."
msgstr ""
"エントリポイントが属する *group* は、それがどのような種類のオブジェクトを提供"
"するのかを示します。例えば、 ``console_scripts`` グループはコマンドとして使え"
"る関数を参照するエントリポイント用であり、一方、 ``pygments.styles`` は "
"pygments スタイルを定義するクラスを提供するグループです。利用する側 (コン"
"シューマ) は、通常、期待するインタフェースを定義しています。衝突を避けるため"
"に、新しいグループを定義するのであればコンシューマは自身の PyPI での名前の後"
"に ``.`` を後置したもので始まるグループ名を使うべきです。グループ名は、ひとつ"
"かそれ以上の文字・数字・アンダースコアをドット文字で区切ったもの (正規表現で "
"``^\\w+(\\.\\w)*$``) でなければなりません。"

#: ../source/specifications/entry-points.rst:42
msgid ""
"The **name** identifies this entry point within its group. The precise "
"meaning of this is up to the consumer. For console scripts, the name of the "
"entry point is the command that will be used to launch it. Within a "
"distribution, entry point names should be unique. If different distributions "
"provide the same name, the consumer decides how to handle such conflicts. "
"The name may contain any characters except ``=``, but it cannot start or end "
"with any whitespace character, or start with ``[``. For new entry points, it "
"is recommended to use only letters, numbers, underscores, dots and dashes "
"(regex ``[\\w.-]+``)."
msgstr ""
"グループ内では、エントリポイントを **name** で識別します。このことの正確な意"
"味は利用する側次第です。コンソールスクリプトでは、エントリポイントの名前はそ"
"のコマンドを起動するのに使われる名前です。配布物の内部では、エントリポイント"
"の名前は一意に決まるべきです。別の配布物が同じ名前を提供する場合には、利用す"
"る側でそのような衝突をどのように扱うのかを決めます。名前は ``=`` を除いてどん"
"な文字を含んでいても構いませんが、空白文字で始まったり終わったりすることはで"
"きず、 ``[`` で始まることもできません。エントリポイントをこれから作るのであれ"
"ば、文字・数字・アンダースコア・ドットとダッシュ (正規表現で言うと "
"``[\\w.-]+``) だけを用いることが推奨されています。"

#: ../source/specifications/entry-points.rst:51
msgid ""
"The **object reference** points to a Python object. It is either in the form "
"``importable.module``, or ``importable.module:object.attr``. Each of the "
"parts delimited by dots and the colon is a valid Python identifier. It is "
"intended to be looked up like this::"
msgstr ""
"**object reference** は Python のオブジェクトを指し示しています。 "
"``importable.module`` 、または、 ``importable.module:object.attr`` の形式のい"
"ずれかです。ドットやコロンで区切られた各部分は、 Python の正当な識別子です。"
"次のようにルックアップされることを意図したものです::"

#: ../source/specifications/entry-points.rst:64
msgid ""
"Some tools call this kind of object reference by itself an 'entry point', "
"for want of a better term, especially where it points to a function to "
"launch a program."
msgstr ""
"とりわけそれがプログラムを起動する関数を指し示している場合には、いくつかの"
"ツールはこの種のオブジェクトへの参照、もっと良い用語で言えば 'エントリポイン"
"ト' を自分自身で呼び出します。"

#: ../source/specifications/entry-points.rst:68
msgid ""
"There is also an optional property: the **extras** are a set of strings "
"identifying optional features of the distribution providing the entry point. "
"If these are specified, the entry point requires the dependencies of those "
"'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""
"さらに追加のプロパティがあります: **extras** は、エントリポイントを提供する配"
"布物の追加的な機能をを識別する１組みの文字列です。もし指定されていれば、その"
"ような 'extras' の依存関係をエントリポイントが要求しています。メタデータの"
"フィールド :ref:`metadata_provides_extra` を見てください。"

#: ../source/specifications/entry-points.rst:73
msgid ""
"Using extras for an entry point is no longer recommended. Consumers should "
"support parsing them from existing distributions, but may then ignore them. "
"New publishing tools need not support specifying extras. The functionality "
"of handling extras was tied to setuptools' model of managing 'egg' packages, "
"but newer tools such as pip and virtualenv use a different model."
msgstr ""
"エントリポイント用に extras を使うことはもはや推奨されていません。利用する側"
"は、既存の配布物からそれを取り出して解析することをサポートするべきですが、し"
"かし、無視しても構いません。新しい公開用ツールは、 extras を指定することをサ"
"ポートする必要はありません。 extras を扱う機能は setuptools が 'egg' パッケー"
"ジを管理するモデルに紐づいたものですが、しかし、 pip や virtualenv のような"
"もっと新しいツールでは異なるモデルを採用しています。"

#: ../source/specifications/entry-points.rst:80
msgid "File format"
msgstr "ファイルフォーマット"

#: ../source/specifications/entry-points.rst:82
msgid ""
"Entry points are defined in a file called :file:`entry_points.txt` in the :"
"file:`*.dist-info` directory of the distribution. This is the directory "
"described in :ref:`recording-installed-packages` for installed "
"distributions, and in :ref:`binary-distribution-format` for wheels. The file "
"uses the UTF-8 character encoding."
msgstr ""
"エントリポイントは、配布物の `*.dist-info` ディレクトリの中の :file:"
"`entry_points.txt` と呼ばれるファイル内で定義されます。これは、インストール済"
"みの配布物に関しては :ref:`インストール済みパッケージを記録する <recording-"
"installed-packages>` 、 wheels に関しては :ref:`バイナリ配布物のフォーマット "
"<binary-distribution-format>` に記述されます。このファイルでは UTF-8 エンコー"
"ディングを使います。"

#: ../source/specifications/entry-points.rst:88
msgid ""
"The file contents are in INI format, as read by Python's :mod:`configparser` "
"module. However, configparser treats names as case-insensitive by default, "
"whereas entry point names are case sensitive. A case-sensitive config parser "
"can be made like this::"
msgstr ""
"ファイルの内容は、 Python の :mod:`configparser` モジュールで読み取ることがで"
"きる INI フォーマットです。しかしながら、 configparser はデフォルトでは変数名"
"を大文字小文字の区別をせずに扱う一方で、エントリポイントでは区別をします。大"
"文字小文字の区別をする configparser はこのようにして作成できます::"

#: ../source/specifications/entry-points.rst:98
msgid ""
"The entry points file must always use ``=`` to delimit names from values "
"(whereas configparser also allows using ``:``)."
msgstr ""
"エントリポイントのファイルでは、名前と値を区切るのに常に ``=`` を使わなければ"
"なりません (他方で configparser は ``:`` で区切ることも許容します) 。"

#: ../source/specifications/entry-points.rst:101
msgid ""
"The sections of the config file represent entry point groups, the names are "
"names, and the values encode both the object reference and the optional "
"extras. If extras are used, they are a comma-separated list inside square "
"brackets."
msgstr ""
"設定ファイルの各セクションはエントリポイントの各グループを表していて、名前は"
"名前であり、値はオブジェクトへの参照と任意の extras の両方をエンコードしま"
"す。 extras が使われる場合には、角括弧の中にコンマ区切りで列挙します。"

#: ../source/specifications/entry-points.rst:105
msgid ""
"Within a value, readers must accept and ignore spaces (including multiple "
"consecutive spaces) before or after the colon, between the object reference "
"and the left square bracket, between the extra names and the square brackets "
"and colons delimiting them, and after the right square bracket. The syntax "
"for extras is formally specified as part of :pep:`508` (as ``extras``) and "
"restrictions on values specified in :pep:`685`. For tools writing the file, "
"it is recommended only to insert a space between the object reference and "
"the left square bracket."
msgstr ""
"値の内部では、読み取る側はコロンの前後・オブジェクト参照と左角括弧の間・extra"
"の名前と角括弧や区切り文字のコロンの間・右角括弧の後にある空白文字 (連続する"
"複数の空白文字を含む) を許容し無視しなければなりません。 extras の文法は公式"
"に :pep:`508` の一部 (の ``extras`` 部分) として指定されており、値に関する制"
"限事項は :pep:`685` で指定されています。ファイルを書き出すようなツールでは、"
"オブジェクト参照と左角括弧の間に限って空白文字を挿入することが推奨されていま"
"す。"

#: ../source/specifications/entry-points.rst:128
msgid "Use for scripts"
msgstr "スクリプト向けの使用法"

#: ../source/specifications/entry-points.rst:130
msgid ""
"Two groups of entry points have special significance in packaging: "
"``console_scripts`` and ``gui_scripts``. In both groups, the name of the "
"entry point should be usable as a command in a system shell after the "
"package is installed. The object reference points to a function which will "
"be called with no arguments when this command is run. The function may "
"return an integer to be used as a process exit code, and returning ``None`` "
"is equivalent to returning ``0``."
msgstr ""
"``console_scripts`` と ``gui_scripts``: エントリポイントのふたつのグループ"
"は、パッケージング全体の中で特別な重要性を持っています。このふたつのグループ"
"では、エントリポイントの名前は、パッケージがインストールされた後にシステムの"
"シェルでコマンドとして使えるものでなければなりません。オブジェクト参照は、こ"
"のコマンドが動作する際に引数なしで呼び出される関数を指し示しています。関数"
"は、プロセスの終了コードとして使われる整数を返しても構わず、 ``None`` を返す"
"と ``0`` を返したのと同じに扱われます。"

#: ../source/specifications/entry-points.rst:138
msgid ""
"For instance, the entry point ``mycmd = mymod:main`` would create a command "
"``mycmd`` launching a script like this::"
msgstr ""
"例えば、 ``micmd = memo:main`` というエントリポイントは、 ``micmd`` というコ"
"マンドを生成し、このようにスクリプトを起動することになるでしょう::"

#: ../source/specifications/entry-points.rst:145
msgid ""
"The difference between ``console_scripts`` and ``gui_scripts`` only affects "
"Windows systems. ``console_scripts`` are wrapped in a console executable, so "
"they are attached to a console and can use :py:data:`sys.stdin`, :py:data:"
"`sys.stdout` and :py:data:`sys.stderr` for input and output. ``gui_scripts`` "
"are wrapped in a GUI executable, so they can be started without a console, "
"but cannot use standard streams unless application code redirects them. "
"Other platforms do not have the same distinction."
msgstr ""
"``console_scripts`` と ``gui_scripts`` の違いは、 Windows システムにだけ影響"
"を与えます。 ``console_scripts`` はコンソールで実行できるようにラップされるの"
"で、コンソールに接続されて 入出力に :py:data:`sys.stdin` ・ :py:data:`sys."
"stdout` ・ :py:data:`sys.stderr` を使えます。 ``gui_scripts`` は GUI で実行可"
"能となるようにラップされるので、コンソールなしで起動することができ、しかし、"
"アプリケーション側でリダイレクトしておかない限りは標準入出力を使うことができ"
"ません。他のプラットフォームではこのような区別をしません。"

#: ../source/specifications/entry-points.rst:153
msgid ""
"Install tools are expected to set up wrappers for both ``console_scripts`` "
"and ``gui_scripts`` in the scripts directory of the install scheme. They are "
"not responsible for putting this directory in the ``PATH`` environment "
"variable which defines where command-line tools are found."
msgstr ""
"インストールツールは、 ``console_scripts`` と ``gui_scripts`` の両方につい"
"て、インストールスキームのスクリプト用ディレクトリにラッパをセットアップする"
"ものと期待されています。(しかし、インストールツールは) このディレクトリをコマ"
"ンドラインツールを探索するために定義される ``PATH`` 環境変数に入れることにつ"
"いては責任を持ちません。"

#: ../source/specifications/entry-points.rst:158
msgid ""
"As files are created from the names, and some filesystems are case-"
"insensitive, packages should avoid using names in these groups which differ "
"only in case. The behaviour of install tools when names differ only in case "
"is undefined."
msgstr ""
"名前からファイルが作られることと、いくつかのファイルシステムでは大文字小文字"
"を区別しないことから、パッケージはこれらのグループについては大文字か小文字か"
"の違いしかないような名前を使うことを避けるべきです。名前が大文字小文字しか違"
"わない場合のインストールツールの挙動は未定義です。"

#: ../source/specifications/entry-points.rst:166
msgid ""
"October 2017: This specification was written to formalize the existing entry "
"points feature of setuptools (discussion_)."
msgstr ""
"2017年10月: setuptools の既存のエントリポイント機能を公式のものとするためのこ"
"の仕様が書かれました (discussion_) 。"

#: ../source/specifications/externally-managed-environments.rst:6
msgid "Externally Managed Environments"
msgstr "外部から管理される環境"

#: ../source/specifications/externally-managed-environments.rst:8
msgid ""
"While some Python installations are entirely managed by the user that "
"installed Python, others may be provided and managed by another means (such "
"as the operating system package manager in a Linux distribution, or as a "
"bundled Python environment in an application with a dedicated installer)."
msgstr ""
"Python の導入方法の中には Python をインストールするユーザが全てを管理するもの"
"もある一方で、(Linux ディストリビューションのオペレーティングシステムが提供す"
"るパッケージマネージャや、専用のインストーラを伴うアプリケーションにおけるバ"
"ンドルされた Python 環境のような) 別の手段で準備され管理されるものもありま"
"す。"

#: ../source/specifications/externally-managed-environments.rst:13
msgid ""
"Attempting to use conventional Python packaging tools to manipulate such "
"environments can be confusing at best and outright break the entire "
"underlying operating system at worst. Documentation and interoperability "
"guides only go so far in resolving such problems."
msgstr ""
"そのような環境下で従来の Python のパッケージングツール類を使おうと試みること"
"は、最もうまくいったときでも混乱を招く結果になり、最悪の場合には根底にあるオ"
"ペレーティングシステム全体を完全に破壊してしまうことにもなりかねません。この"
"ような問題を解決する上では、説明文書と互換性ガイドだけが頼りになります。"

#: ../source/specifications/externally-managed-environments.rst:18
msgid ""
"This specification defines an ``EXTERNALLY-MANAGED`` marker file that allows "
"a Python installation to indicate to Python-specific tools such as ``pip`` "
"that they neither install nor remove packages into the interpreter’s default "
"installation environment, and should instead guide the end user towards "
"using :ref:`virtual-environments`."
msgstr ""
"この仕様では ``EXTERNALLY-MANAGED`` というマーカファイルを定義しており、これ"
"によって Python をインストールする際に ``pip`` のような Python に特有のツール"
"群に対してインタプリタのデフォルトのインストール環境にパッケージをインストー"
"ルしたり取り除いたりしないように指示し、その代わりに、エンドユーザに対して :"
"ref:`仮想環境 <virtual-environments` を使うようにガイドするべきです。"

#: ../source/specifications/externally-managed-environments.rst:24
msgid ""
"It also standardizes an interpretation of the ``sysconfig`` schemes so that, "
"if a Python-specific package manager is about to install a package in an "
"interpreter-wide context, it can do so in a manner that will avoid "
"conflicting with the external package manager and reduces the risk of "
"breaking software shipped by the external package manager."
msgstr ""
"また、 Python 特有のパッケージマネージャがインタープリタ全体のコンテキストで"
"パッケージをインストールしようとしている場合に、外部のパッケージマネージャと"
"相互干渉を避け、また、外部のパッケージマネージャから導入されたソフトウェアを"
"破壊する危険を避けるであろうやり方でインストールすることができるように "
"``sysconifg`` の翻訳を標準化しています。"

#: ../source/specifications/externally-managed-environments.rst:32
msgid "Terminology"
msgstr "用語集"

#: ../source/specifications/externally-managed-environments.rst:34
msgid ""
"A few terms used in this specification have multiple meanings in the "
"contexts that it spans. For clarity, this specification uses the following "
"terms in specific ways:"
msgstr ""
"この仕様書で用いられる用語のいくつかには、それが置かれた文脈に従って複数の意"
"味を持つものがあります。明確性のために、この仕様書では以下の用語を特定の意味"
"で使用します:"

#: ../source/specifications/externally-managed-environments.rst:61
msgid "distro"
msgstr "配布物 <distro>"

#: ../source/specifications/externally-managed-environments.rst:39
msgid ""
"Short for \"distribution,\" a collection of various sorts of software, "
"ideally designed to work properly together, including (in contexts relevant "
"to this document) the Python interpreter itself, software written in Python, "
"and software written in other languages. That is, this is the sense used in "
"phrases such as \"Linux distro\" or \"Berkeley Software Distribution.\""
msgstr ""
"短く言うと \"配布物 <distribution>\" で、適切に協働した動作をするように理想的"
"に設計され、(この説明文書に適合する文脈で) Python インタープリタそのものを含"
"み、Python で書かれたソフトウェアであり他の言語で書かれたソフトウェアでもあ"
"る、さまざまな種類のソフトウェアの集合体。すなわち、これが \"Linux ディスト"
"ロ <Linux　distro>\" や \"バークレーソフトウェア配布物 <Berkeley Software "
"Distribution>\" といったフレーズで使われる意味です。"

#: ../source/specifications/externally-managed-environments.rst:46
msgid ""
"A distro can be an operating system (OS) of its own, such as Debian, Fedora, "
"or FreeBSD. It can also be an overlay distribution that installs on top of "
"an existing OS, such as Homebrew or MacPorts."
msgstr ""
"配布物 <distro> は、Debian 、 Fedora や FreeBSD のようなそれ自身のオペレー"
"ティングシステム (OS) であっても構いません。あるいは、 Homebrew や MacPorts "
"のような既存の OS の上に重ねて配布物をインストールするものであっても構いませ"
"ん。"

#: ../source/specifications/externally-managed-environments.rst:51
msgid ""
"This document uses the short term \"distro,\" because the term "
"\"distribution\" has another meaning in Python packaging contexts: a source "
"or binary distribution package of a single piece of Python language "
"software, that is, in the sense of ``setuptools.dist.Distribution`` or "
"\"sdist\". To avoid confusion, this document does not use the plain term "
"\"distribution\" at all. In the Python packaging sense, it uses the full "
"phrase \"distribution package\" or just \"package\" (see below)."
msgstr ""
"Python のパッケージングの文脈では、\"ディストリビューション <distribution>\" "
"という用語は別の意味、つまり、 Python 言語で書かれたソフトウェアのひとつの部"
"品のソースコード配布パッケージまたはバイナリ配布パッケージ、即ち "
"``setuptools.dist.Distribution`` 乃至 \"sdist\" の意味での配布物という意味を"
"持つので、この文書では短縮された用語である \"ディストロ <distro>\" を使いま"
"す。混乱を避けるために、この文書では \"ディストリビューション "
"<distribution>\" をそのままでは使わないことにします。 Python パッケージングの"
"意味で使う時は完全形の \"配布パッケージ <distribution package>\" または単に "
"\"パッケージ <package>\" を使います (後述します)。"

#: ../source/specifications/externally-managed-environments.rst:60
msgid ""
"The provider of a distro - the team or company that collects and publishes "
"the software and makes any needed modifications - is its **distributor**."
msgstr ""
"ディストロを提供する者 - ソフトウェアを収集して公開し、何であれ必要とされる修"
"正を加えるチームまたは企業 - は、その **配布者 <distributor>** です。"

#: ../source/specifications/externally-managed-environments.rst:79
msgid "package"
msgstr "パッケージ"

#: ../source/specifications/externally-managed-environments.rst:64
msgid ""
"A unit of software that can be installed and used within Python. That is, "
"this refers to what Python-specific packaging tools tend to call a :term:"
"`distribution package` or simply a \"distribution\"; the colloquial "
"abbreviation \"package\" is used in the sense of the Python Package Index."
msgstr ""
"インストールすることができ、Python 内で使うことができるソフトウエアの単位。つ"
"まり、これは Python 特有のパッケージングツールが :term:`配布パッケージ "
"<Distribution Package>` または単に \"配布物\" と呼びがちなものを参照していま"
"す; 口語的な省略形である \"配布物\" は Python Package Index の意味で使われま"
"す。"

#: ../source/specifications/externally-managed-environments.rst:70
msgid ""
"This document does not use \"package\" in the sense of an importable name "
"that contains Python modules, though in many cases, a distribution package "
"consists of a single importable package of the same name."
msgstr ""
"この説明文書は \"配布物 <package>\" を Python モジュールを含んでいてインポー"
"ト可能なものの名前という意味では使いませんが、多くの場合、 配布パッケージは同"
"名のインポート可能な単一のパッケージから構成されています。"

#: ../source/specifications/externally-managed-environments.rst:75
msgid ""
"This document generally does not use the term \"package\" to refer to units "
"of installation by a distro's package manager (such as ``.deb`` or ``.rpm`` "
"files). When needed, it uses phrasing such as \"a distro's package."
"\" (Again, in many cases, a Python package is shipped inside a distro's "
"package named something like ``python-`` plus the Python package name.)"
msgstr ""
"この説明文書では、\"パッケージ <package>\" という言葉で (``.deb`` や ``."
"rpm`` ファイルのような) ディストロのパッケージマネージャがインストールする単"
"位を参照することはしません。必要な場合には \"ディストロのパッケージ\" などと"
"言い換えて使います。 (再掲になりますが、多くの場合には、 Python パッケージが"
"ディストロのパッケージとして出荷される場合には Python パッケージの名称に "
"``python-`` を付け加えます。)"

#: ../source/specifications/externally-managed-environments.rst:102
msgid "Python-specific package manager"
msgstr "Python 特有のパッケージマネージャ"

#: ../source/specifications/externally-managed-environments.rst:82
msgid ""
"A tool for installing, upgrading, and/or removing Python packages in a "
"manner that conforms to Python packaging standards. The most popular Python-"
"specific package manager is pip_; other examples include the old `Easy "
"Install command <easy-install_>`_ as well as direct usage of a ``setup.py`` "
"command."
msgstr ""
"Python パッケージング標準 <Python packaging standard> を満足する形で Python "
"パッケージをインストール・アップグレード・削除するためのツール。最もよく知ら"
"れた Python 特有のパッケージマネージャは pip_ です; 他の例には、 ``setup."
"py`` コマンドを直接に使う方法と同様、古い `Easy Install コマンド <easy-"
"install_>`_ が含まれます。"

#: ../source/specifications/externally-managed-environments.rst:92
msgid ""
"(Note that the ``easy_install`` command was removed in setuptools version "
"52, released 23 January 2021.)"
msgstr ""
"(``easy_install`` コマンドは、2021 年 1 月 23 日にリリースされた setuptools "
"のバージョン 52 で除去されています。)"

#: ../source/specifications/externally-managed-environments.rst:96
msgid ""
"(Conda_ is a bit of a special case, as the ``conda`` command can install "
"much more than just Python packages, making it more like a distro package "
"manager in some senses. Since the ``conda`` command generally only operates "
"on Conda-created environments, most of the concerns in this document do not "
"apply to ``conda`` when acting as a Python-specific package manager.)"
msgstr ""
"(Conda_ は少々特別なケースです、というのは、 `conda` コマンドを使えば単に "
"Python パッケージだけではなくずっと多くのものをインストールすることができるか"
"らで、いくつかの意味ではディストロ <distro> 付属のパッケージマネージャにもっ"
"と似ていると言えるでしょう。 ``conda`` コマンドは一般的には Conda が作成した"
"環境の上でのみ動作するので、Python 特有のパッケージマネージャとして動作する場"
"合には、この説明文書における関心のほとんどは ``conda`` には適用されません。)"

#: ../source/specifications/externally-managed-environments.rst:118
msgid "distro package manager"
msgstr "ディストロ <distro> パッケージマネージャ"

#: ../source/specifications/externally-managed-environments.rst:105
msgid ""
"A tool for installing, upgrading, and/or removing a distro's packages in an "
"installed instance of that distro, which is capable of installing Python "
"packages as well as non-Python packages, and therefore generally has its own "
"database of installed software unrelated to the :ref:`database of installed "
"distributions <recording-installed-packages>`. Examples include ``apt``, "
"``dpkg``, ``dnf``, ``rpm``, ``pacman``, and ``brew``. The salient feature is "
"that if a package was installed by a distro package manager, removing or "
"upgrading it in a way that would satisfy a Python-specific package manager "
"will generally leave a distro package manager in an inconsistent state."
msgstr ""
"当該ディストロのインストール済みインスタンス内でディストロ提供のパッケージを"
"インストール・更新・削除するためのツールで、 Python パッケージか非 Python "
"パッケージかに依らずインストールする能力を持つものであり、従って、一般的にそ"
"のツールに特有のインストール済みソフトウェアのデータベースで :ref:`インストー"
"ル済み配布物のデータベース <recording-installed-packages>` とは無関係のものを"
"持つもの。例には ``apt`` ・ ``dpkg`` ・ ``def`` ・ ``rpm`` ・ ``pacman`` ・ "
"``brew`` を含みます。顕著な特徴としては、あるパッケージがディストロのパッケー"
"ジマネージャによってインストールされていた場合に、 Python 特有のパッケージマ"
"ネージャを満足させる方法でそのパッケージを削除したり更新したりすることが、一"
"般にディストロのパッケージマネージャの状態を不整合なまま放置するであろうとい"
"うことです。"

#: ../source/specifications/externally-managed-environments.rst:117
msgid ""
"This document also uses phrases like \"external package manager\" or "
"\"system's package manager\" to refer to a distro package manager in certain "
"contexts."
msgstr ""
"この説明文書は、また、ある種の文脈ではディストロのパッケージマネージャのこと"
"を指し示すのに \"外部パッケージマネージャ <external package manager>\" や "
"\"システムのパッケージマネージャ <system's package manager>\" のような言い回"
"しを用います。"

#: ../source/specifications/externally-managed-environments.rst:127
msgid "shadow"
msgstr "シャドー <shadow>"

#: ../source/specifications/externally-managed-environments.rst:121
msgid ""
"To shadow an installed Python package is to cause some other package to be "
"preferred for imports without removing any files from the shadowed package. "
"This requires multiple entries on ``sys.path``: if package A 2.0 installs "
"module ``a.py`` in one ``sys.path`` entry, and package A 1.0 installs module "
"``a.py`` in a later ``sys.path`` entry, then ``import a`` returns the module "
"from the former, and we say that A 2.0 shadows A 1.0."
msgstr ""
"インストール済みの Python パッケージをシャドー <shadow> するというのは、シャ"
"ドーされたパッケージに由来するファイルをひとつも削除することなしに、インポー"
"ト時に別のパッケージを選好させることです。これは ``sys.path`` に複数のエント"
"リーを要求します: パッケージ A 2.0 がある ``sys.path`` エントリに ``a.py`` モ"
"ジュールをインストールし、かつ、パッケージ A 1.0 が ``a.py`` モジュールを後続"
"の ``sys.path`` エントリにインストールしている時に、 ``import a`` が前者のモ"
"ジュールを返し、これを A 2.0 が A 1.0 をシャドーしたと言います。"

#: ../source/specifications/externally-managed-environments.rst:132
msgid "This specification is twofold."
msgstr "この仕様には二つの部分があります。"

#: ../source/specifications/externally-managed-environments.rst:134
msgid ""
"First, it describes **a way for distributors of a Python interpreter to mark "
"that interpreter as having its packages managed by means external to "
"Python**, such that Python-specific tools like pip should not change the "
"installed packages in the interpreter's global ``sys.path`` in any way (add, "
"upgrade/downgrade, or remove) unless specifically overridden. It also "
"provides a means for the distributor to indicate how to use a virtual "
"environment as an alternative."
msgstr ""
"第一に、 ** Python インタープリタの配布を行う者が、そのインタープリタを"
"Python の外側にある手段によって管理されるパッケージを持ち** 、従って、 pip の"
"ような Python 特有のツール類が、特別にオーバーライドされない限りは、当該イン"
"タープリタのグローバルな ``sys.path`` に存在するインストール済みパッケージ"
"を、いかなる意味でも変更 (追加、更新・ダウングレード、あるいは削除) するべき"
"ではないという印を付ける方法を記述しています。また、代替手段としての仮想環境"
"をどのように使うのかを配布者 <distributor> が指示する手段を提供します。"

#: ../source/specifications/externally-managed-environments.rst:142
msgid ""
"This is an opt-in mechanism: by default, the Python interpreter compiled "
"from upstream sources will not be so marked, and so running ``pip install`` "
"with a self-compiled interpreter, or with a distro that has not explicitly "
"marked its interpreter, will work as it always has worked."
msgstr ""
"これは、オプトインのメカニズムです: デフォルトでは、アップストリームのソース"
"からコンパイルされた Python インタープリタは、そのようにマークを付けられるこ"
"とはなく、また、セルフコンパイルされたインタープリタやディストロのものを使っ"
"て ``pip install`` を実行すると、それまでと同様に動作するはずです。"

#: ../source/specifications/externally-managed-environments.rst:148
msgid ""
"Second, it sets the rule that when installing packages to an interpreter's "
"global context (either to an unmarked interpreter, or if overriding the "
"marking), **Python-specific package managers should modify or delete files "
"only within the directories of the sysconfig scheme in which they would "
"create files**. This permits a distributor of a Python interpreter to set up "
"two directories, one for its own managed packages, and one for unmanaged "
"packages installed by the end user, and ensure that installing unmanaged "
"packages will not delete (or overwrite) files owned by the external package "
"manager."
msgstr ""
"第二に、パッケージをインタープリタのグローバルコンテキスト (マークされていな"
"いインタープリタの場合やマークをオーバーライドした場合) にインストールする際"
"に、 ** Python 特有のパッケージマネージャが修正・削除しても構わないのは、今ま"
"さにファイル群を作成しようとしている sysconfig スキームのディレクトリ内にある"
"ものだけである ** というルールを設定します。これによって、 Python インタープ"
"リタの配布者 <distributor> がふたつのディレクトリをセットアップすることを許"
"し、つまり、一つは自分で管理しているパッケージ群 (のためのディレクトリ) でも"
"う一つはエンドユーザがインストールした管理対象外のパッケージ群 (のためのディ"
"レクトリ) で、管理対象外のパッケージをインストールしたとしても外部パッケージ"
"マネージャ <external package manager> が管理しているファイル群が削除 (または"
"上書き) されることがないことを保証します。"

#: ../source/specifications/externally-managed-environments.rst:160
msgid "Marking an interpreter as using an external package manager"
msgstr ""
"外部パッケージマネージャ <external package manager> を用いるものとしてイン"
"タープリタにマークを付ける"

#: ../source/specifications/externally-managed-environments.rst:162
msgid ""
"Before a Python-specific package installer (that is, a tool such as pip - "
"not an external tool such as apt) installs a package into a certain Python "
"context, it should make the following checks by default:"
msgstr ""
"Python 特有のパッケージインストーラ (つまり pip のようなツール - apt のような"
"外部ツールではない) がある Python コンテキストにパッケージをインストールする"
"前に、デフォルトで以下の項目を確認するべきです:"

#: ../source/specifications/externally-managed-environments.rst:167
msgid ""
"Is it running outside of a virtual environment? It can determine this by "
"whether ``sys.prefix == sys.base_prefix``."
msgstr ""
"仮想環境の外側で動作しているのか？ ``sys.prefix == sys.base_prefix`` が成立す"
"るか否かで判断することができます。"

#: ../source/specifications/externally-managed-environments.rst:170
msgid ""
"Is there an ``EXTERNALLY-MANAGED`` file in the directory identified by "
"``sysconfig.get_path(\"stdlib\", sysconfig.get_default_scheme())``?"
msgstr ""
"``sysconfig.get_path(\"stdlib\", sysconfig.get_default_scheme())`` で同定され"
"るディレクトリの中に ``EXTERNALLY-MANAGED`` ファイルが存在するか否か？"

#: ../source/specifications/externally-managed-environments.rst:173
msgid ""
"If both of these conditions are true, the installer should exit with an "
"error message indicating that package installation into this Python "
"interpreter's directory are disabled outside of a virtual environment."
msgstr ""
"両方の条件が真であれば、仮想環境の外側ではこの Python インタープリタのディレ"
"クトリへパッケージをインストールすることが無効にされていることを示すエラー"
"メッセージとともに、インストーラは終了するべきです。"

#: ../source/specifications/externally-managed-environments.rst:177
msgid ""
"The installer should have a way for the user to override these rules, such "
"as a command-line flag ``--break-system-packages``. This option should not "
"be enabled by default and should carry some connotation that its use is "
"risky."
msgstr ""
"インストーラは、コマンドライン上の ``--break-system-packages`` フラグのよう"
"に、ユーザがこれらのルールをオーバーライドする方法を持っているべきです。この"
"オプションはデフォルトでは無効であるべきで、有効にするとリスクを伴うことを含"
"意する何らかのメッセージを伴うべきです。"

#: ../source/specifications/externally-managed-environments.rst:182
msgid ""
"The ``EXTERNALLY-MANAGED`` file is an INI-style metadata file intended to be "
"parsable by the standard library configparser_ module. If the file can be "
"parsed by ``configparser.ConfigParser(interpolation=None)`` using the UTF-8 "
"encoding, and it contains a section ``[externally-managed]``, then the "
"installer should look for an error message specified in the file and output "
"it as part of its error. If the first element of the tuple returned by "
"``locale.getlocale(locale.LC_MESSAGES)``, i.e., the language code, is not "
"``None``, it should look for the error message as the value of a key named "
"``Error-`` followed by the language code. If that key does not exist, and if "
"the language code contains underscore or hyphen, it should look for a key "
"named ``Error-`` followed by the portion of the language code before the "
"underscore or hyphen. If it cannot find either of those, or if the language "
"code is ``None``, it should look for a key simply named ``Error``."
msgstr ""
"``EXTERNALLY-MANAGED`` ファイルは INI スタイルのメタデータファイルで、標準ラ"
"イブラリの configparser_ モジュールでパースできることを意図しています。この"
"ファイルが UTF-8 エンコーディングを用いて ``configparser."
"ConfigParser(interpolation=None)`` によってパースできて、かつ、ファイル内に "
"``[externally-managed]`` セクションがあれば、インストーラはこのファイル内で指"
"定されたエラーメッセージを探して、エラーの一部として出力するべきです。 "
"``locale.getlocale(locale.LC_MESSAGES)`` によって返されるタプルの最初の要素"
"が ``None`` ではない場合には、 ``Error-`` の後に言語コードが続く名前を持つ"
"キーの値として提供されるエラーメッセージを探すべきです。そのようなキーが存在"
"しない場合でも、言語コードがアンダースコアかハイフンを含むのであれば、 "
"``Error-`` の後に言語コードのアンダースコアかハイフンの前までの部分が続くキー"
"を探すべきです。これらのいずれも発見できない場合や、言語コードが ``None`` の"
"場合には、単に ``Error`` というキーを探すべきです。"

#: ../source/specifications/externally-managed-environments.rst:200
msgid ""
"If the installer cannot find an error message in the file (either because "
"the file cannot be parsed or because no suitable error key exists), then the "
"installer should just use a pre-defined error message of its own, which "
"should suggest that the user create a virtual environment to install "
"packages."
msgstr ""
"インストーラがファイル内のエラーメッセージを見つけられない (ファイルをパース"
"できないか、適切なエラーキーが存在しないのいずれか) 時は、インストーラは自身"
"の内部に予め定義されたエラーメッセージ、それは当該パッケージをインストールす"
"るためにユーザが仮想環境を作成することを示唆するものであるべきですが、それを"
"使うべきです。"

#: ../source/specifications/externally-managed-environments.rst:206
#, fuzzy
#| msgid ""
#| "Software distributors who have a non-Python-specific package manager that "
#| "manages libraries in the ``sys.path`` of their Python package should, in "
#| "general, ship a ``EXTERNALLY-MANAGED`` file in their standard library "
#| "directory. For instance, Debian may ship a file in ``/usr/lib/python3.9/"
#| "EXTERNALLY-MANAGED`` consisting of something like"
msgid ""
"Software distributors who have a non-Python-specific package manager that "
"manages libraries in the ``sys.path`` of their Python package should, in "
"general, ship an ``EXTERNALLY-MANAGED`` file in their standard library "
"directory. For instance, Debian may ship a file in ``/usr/lib/python3.9/"
"EXTERNALLY-MANAGED`` consisting of something like"
msgstr "Python 特有のものではないパッケージマネージャを持つソフトウェア配布者"

#: ../source/specifications/externally-managed-environments.rst:230
msgid ""
"which provides useful and distro-relevant information to a user trying to "
"install a package. Optionally, translations can be provided in the same file:"
msgstr ""
"パッケージのインストールを試みるユーザ向けに役に立つとともにディストロに適合"
"した情報を適合すること。オプションとして、同一ファイル内に提供されるトランザ"
"クション:"

#: ../source/specifications/externally-managed-environments.rst:240
msgid ""
"In certain contexts, such as single-application container images that aren't "
"updated after creation, a distributor may choose not to ship an ``EXTERNALLY-"
"MANAGED`` file, so that users can install whatever they like (as they can "
"today) without having to manually override this rule."
msgstr ""
"作成後には更新できない単一アプリケーションのコンテナイメージのようなある種の"
"コンテキストでは、配布者 <distributor> は、このルールを手動でオーバーライドせ"
"ざるを得ないということがなくてもユーザが何であれ彼らの望むものを (その時に) "
"インストールできるように、 ``EXTERNALLY-MANAGED`` ファイルを同梱しない選択を"
"行っても構いません。"

#: ../source/specifications/externally-managed-environments.rst:247
msgid "Writing to only the target ``sysconfig`` scheme"
msgstr "ターゲットとなる ``sysconfig`` スキームだけを書く"

#: ../source/specifications/externally-managed-environments.rst:249
msgid ""
"Usually, a Python package installer installs to directories in a scheme "
"returned by the ``sysconfig`` standard library package. Ordinarily, this is "
"the scheme returned by ``sysconfig.get_default_scheme()``, but based on "
"configuration (e.g. ``pip install --user``), it may use a different scheme."
msgstr ""
"通常は、 Python パッケージインストーラは、標準ライブラリパッケージの "
"``sysconfig`` によって返されるスキームにあるディレクトリへインストールを行い"
"ます。普通は、これは、 ``sysconfig.get_default_scheme()`` が返すスキームのこ"
"とですが、設定 (例えば ``pip install --user``) に基づいて異なるスキームを用い"
"ることもあります。"

#: ../source/specifications/externally-managed-environments.rst:255
msgid ""
"Whenever the installer is installing to a ``sysconfig`` scheme, this "
"specification declares that the installer should never modify or delete "
"files outside of that scheme. For instance, if it's upgrading a package, and "
"the package is already installed in a directory outside that scheme (perhaps "
"in a directory from another scheme), it should leave the existing files "
"alone."
msgstr ""
"インストーラが ``sysconfig`` スキームへインストールする時はいつでも、そのス"
"キームの外側のファイルをインストーラが決して変更したり削除したりするべきでは"
"ないことをこの仕様が宣言しています。例えば、パッケージのアップグレードを行う"
"時にそのパッケージがスキームの外側のディレクトリ (おそらく別のスキームのも"
"の) にすでにインストールされているなら、既存のファイル群をそのままにしておく"
"べきです。"

#: ../source/specifications/externally-managed-environments.rst:262
msgid ""
"If the installer does end up shadowing an existing installation during an "
"upgrade, we recommend that it produces a warning at the end of its run."
msgstr ""
"もし、アップグレードの最中にインストーラが既存のインストール (済のファイル"
"群) をシャドーしてしまうのであれば、警告を生成して実行を中止することを推奨し"
"ます。"

#: ../source/specifications/externally-managed-environments.rst:266
msgid ""
"If the installer is installing to a location outside of a ``sysconfig`` "
"scheme (e.g., ``pip install --target``), then this subsection does not apply."
msgstr ""
"インストーラが ``sysconfig`` スキームの外側の場所 (即ち ``pip install --"
"target``) へインストールしようとしているなら、このサブセクションは適用されま"
"せん。"

#: ../source/specifications/externally-managed-environments.rst:271
msgid "Recommendations for distros"
msgstr "ディストロへの推奨"

#: ../source/specifications/externally-managed-environments.rst:273
msgid ""
"This section is non-normative. It provides best practices we believe distros "
"should follow unless they have a specific reason otherwise."
msgstr ""
"この節は規範的なものではありません。特に他の理由がなければディストロが従うべ"
"きであると信じられるベストプラクティスを提供するものです。"

#: ../source/specifications/externally-managed-environments.rst:277
msgid "Mark the installation as externally managed"
msgstr "インストールされたものを外部管理のものとしてマークする"

#: ../source/specifications/externally-managed-environments.rst:279
msgid ""
"Distros should create an ``EXTERNALLY-MANAGED`` file in their ``stdlib`` "
"directory."
msgstr ""
"ディストロは、その ``stdlib`` ディレクトリ内に ``EXTERNALLY-MANAGED`` ファイ"
"ルを作成するべきです。"

#: ../source/specifications/externally-managed-environments.rst:283
msgid "Guide users towards virtual environments"
msgstr "仮想環境へ向かうユーザへのガイド文書"

#: ../source/specifications/externally-managed-environments.rst:285
msgid ""
"The file should contain a useful and distro-relevant error message "
"indicating both how to install system-wide packages via the distro's package "
"manager and how to set up a virtual environment. If your distro is often "
"used by users in a state where the ``python3`` command is available (and "
"especially where ``pip`` or ``get-pip`` is available) but ``python3 -m "
"venv`` does not work, the message should indicate clearly how to make "
"``python3 -m venv`` work properly."
msgstr ""
"このファイルは、ディストロのパッケージマネージャを使ってシステムワイドのパッ"
"ケージをインストールする方法と仮想鑑賞を構築する方法の両方を示す、役に立ち、"
"かつ、ディストロに適合したエラーメッセージを含んでいるべきです。もし、その"
"ディストロが ``python3`` コマンドは利用できる (かつ、とりわけ ``pip`` か "
"``get-pip`` が利用できる) が、 ``python3 -m venv`` は動作しない状態で使われる"
"ことが多いのであれば、当該メッセージは、 ``python3 -m venv`` を正しく動作させ"
"るにはどうすれば良いかをはっきりと示すべきです。"

#: ../source/specifications/externally-managed-environments.rst:293
msgid ""
"Consider packaging pipx_, a tool for installing Python-language "
"applications, and suggesting it in the error. pipx automatically creates a "
"virtual environment for that application alone, which is a much better "
"default for end users who want to install some Python-language software "
"(which isn't available in the distro) but are not themselves Python users. "
"Packaging pipx in the distro avoids the irony of instructing users to ``pip "
"install --user --break-system-packages pipx`` to *avoid* breaking system "
"packages. Consider arranging things so your distro's package / environment "
"for Python for end users (e.g., ``python3`` on Fedora or ``python3-full`` on "
"Debian) depends on pipx."
msgstr ""
"Python 言語で書かれたアプリケーションをインストールするツールである "
"packaging pipx_ を採用して、エラーの中で示唆することを検討してください。 "
"pipx はそのアプリケーションだけのための仮想環境を自動的に構築しますし、何らか"
"の Python 言語で書かれたソフトウェア (であって、ディストロ側では利用可能では"
"ないもの) をインストールしたいけれども自身は Python ユーザではないエンドユー"
"ザにとってはずっと良いデフォルト動作です。 Packaging pipx がディストロ側で準"
"備されていれば、システム側のパッケージ群を破壊することを *避ける* ために "
"``pip install --user --break-system-packages pipx`` を使うようにユーザに指示"
"すると言う皮肉を避けることができます。このように整えることで、ディストロ側"
"パッケージとエンドユーザ用 Python 環境 (例えば、 Fedora での ``python3`` や "
"Debian での ``python3-full`` ) がともに pipx に依存するようにすることができま"
"す。"

#: ../source/specifications/externally-managed-environments.rst:308
msgid "Keep the marker file in container images"
msgstr "コンテナイメージ内のマーカーファイルを維持する"

#: ../source/specifications/externally-managed-environments.rst:310
msgid ""
"Distros that produce official images for single-application containers (e."
"g., Docker container images) should keep the ``EXTERNALLY-MANAGED`` file, "
"preferably in a way that makes it not go away if a user of that image "
"installs package updates inside their image (think ``RUN apt-get dist-"
"upgrade``)."
msgstr ""
"単一アプリケーションのコンテナ用の公式イメージ (即ち Docker コンテナイメー"
"ジ) を作成するようなディストロは、 ``EXTERNALLY-MANAGED`` ファイルを維持すべ"
"きで、さらに言えば、ユーザがそのイメージなでパッケージのアップデートをインス"
"トールしたとしても (``RUN apt-get dist-upgrade`` のようなものを考えてみてほし"
"い) 失われることのないようなやり方で行うのが望ましいことです。"

#: ../source/specifications/externally-managed-environments.rst:317
msgid "Create separate distro and local directories"
msgstr "ディストロとローカルのディレクトリを別々に作成する"

#: ../source/specifications/externally-managed-environments.rst:319
msgid ""
"Distros should place two separate paths on the system interpreter's ``sys."
"path``, one for distro-installed packages and one for packages installed by "
"the local system administrator, and configure ``sysconfig."
"get_default_scheme()`` to point at the latter path. This ensures that tools "
"like pip will not modify distro-installed packages. The path for the local "
"system administrator should come before the distro path on ``sys.path`` so "
"that local installs take preference over distro packages."
msgstr ""
"ディストロは、ディストロがインストールしたパッケージのためのものと、ローカル"
"のシステム管理者がインストールしたパッケージのためのものというふたつの別々の"
"パスをシステム側に持っているインタープリタの ``sys.path`` に置くべきであり、"
"また、 ``sysconfig.get_default_scheme()`` が後者のパスを指し示すように設定す"
"るべきです。こうすることで、pip のようなツール類がディストロ側でインストール"
"したパッケージを修正してしまうことがなくなります。ローカルのシステム管理者用"
"のパスは ``sys.path`` 内でディストロ側のパスの前にくるべきで、そうすることで"
"ローカルにインストールされたものがディストロ側のパッケージよりも選好されるよ"
"うになります。"

#: ../source/specifications/externally-managed-environments.rst:328
msgid ""
"For example, Fedora and Debian (and their derivatives) both implement this "
"split by using ``/usr/local`` for locally-installed packages and ``/usr`` "
"for distro-installed packages. Fedora uses ``/usr/local/lib/python3.x/site-"
"packages`` vs. ``/usr/lib/python3.x/site-packages``. (Debian uses ``/usr/"
"local/lib/python3/dist-packages`` vs. ``/usr/lib/python3/dist-packages`` as "
"an additional layer of separation from a locally-compiled Python "
"interpreter: if you build and install upstream CPython in ``/usr/local/"
"bin``, it will look at ``/usr/local/lib/python3/site-packages``, and Debian "
"wishes to make sure that packages installed via the locally-built "
"interpreter don't show up on ``sys.path`` for the distro interpreter.)"
msgstr ""
"例えば、Fedora や Debian (およびその派生物) は共に、ローカルにインストールさ"
"れたパッケージ用に ``/usr/local`` を使い、ディストロがインストールしたパッ"
"ケージ用に ``/usr`` を用いることでこの分離を実装しています。Fedora では、 ``/"
"usr/local/lib/python3.x/site-packages`` 対 ``/usr/lib/python3.x/site-"
"packages`` です。 (Debian では ``/usr/local/lib/python3/dist-packages`` 対 "
"``/usr/lib/python3/dist-packages`` をローカルにコンパイルされた Python イン"
"タープリタ用にさらに分離して使っています: もしアップストリームの Python をビ"
"ルドして ``/usr/local/bin`` にインストールしていれば、 ``/usr/local/lib/"
"python3/site-packages`` を見るでしょうし、 Debian ではローカルにビルドされた"
"インタープリタ経由でインストールされたパッケージがディストロ側のインタープリ"
"タ用の ``sys.path`` 上には出現しないことを確実にしようと願っています。)"

#: ../source/specifications/externally-managed-environments.rst:341
msgid ""
"Note that the ``/usr/local`` vs. ``/usr`` split is analogous to how the "
"``PATH`` environment variable typically includes ``/usr/local/bin:/usr/bin`` "
"and non-distro software installs to ``/usr/local`` by default. This split is "
"`recommended by the Filesystem Hierarchy Standard`__."
msgstr ""
"``/usr/local`` 対 ``/usr`` の分離が、 ``PATH`` 環境変数が典型的に ``/usr/"
"local/bin:/usr/bin`` を含んでいて、デフォルトで非ディストロのソフトウェアが "
"``/usr/local`` にインストールされることのアナロジーになっていることに注目して"
"ください。この分離は、 `推奨されるファイルシステム階層標準 <recommended by "
"the Filesystem Hierarchy Standard>`__ です。"

#: ../source/specifications/externally-managed-environments.rst:349
msgid ""
"There are two ways you could do this. One is, if you are building and "
"packaging Python libraries directly (e.g., your packaging helpers unpack a "
"wheel or call ``setup.py install``), arrange for those tools to use a "
"directory that is not in a ``sysconfig`` scheme but is still on ``sys.path``."
msgstr ""
"これを行うにはふたつの方法があります。ひとつは、Python ライブラリを直接にビル"
"ドしてパッケージしようとしている (例えば、使っているパッケージングヘルパーが "
"wheel をアンパックするか、または、 ``setup.py install`` を呼び出す場合) 時"
"に、 ``sys.path`` には含まれているけれども ``sysconfig`` スキームには入ってい"
"ないようなディレクトリを使って実行するようにそれらツール群を調整することで"
"す。"

#: ../source/specifications/externally-managed-environments.rst:355
msgid ""
"The other is to arrange for the default ``sysconfig`` scheme to change when "
"running inside a package build versus when running on an installed system. "
"The ``sysconfig`` customization hooks from bpo-43976_ should make this easy "
"(once accepted and implemented): make your packaging tool set an environment "
"variable or some other detectable configuration, and define a "
"``get_preferred_schemes`` function to return a different scheme when called "
"from inside a package build. Then you can use ``pip install`` as part of "
"your distro packaging."
msgstr ""
"もうひとつは、パッケージのビルド中とインストール済みのシステムで実行する時と"
"でデフォルトの ``sysconfig`` スキームを変えるように調整することです。 (アクセ"
"プトされ実装されればですが) bpo-43976_ からの ``sysconfig`` カスタマイズフッ"
"ク群がこれを容易にするでしょう: パッケージングツールに環境変数他のなんらかの"
"検出可能な設定項目を設定させ、 ``get_preferred_schemes`` 関数がパッケージビル"
"ドの中から呼ばれた場合には異なるスキームを返すようにするのです。そうすれば、 "
"``pip install`` をディストロパッケージングの一部として使用できるようになりま"
"す。"

#: ../source/specifications/externally-managed-environments.rst:367
msgid ""
"We propose adding a ``--scheme=...`` option to instruct pip to run against a "
"specific scheme. (See `Implementation Notes`_ below for how pip currently "
"determines schemes.) Once that's available, for local testing and possibly "
"for actual packaging, you would be able to run something like ``pip install "
"--scheme=posix_distro`` to explicitly install a package into your distro's "
"location (bypassing ``get_preferred_schemes``). One could also, if "
"absolutely needed, use ``pip uninstall --scheme=posix_distro`` to use pip to "
"remove packages from the system-managed directory."
msgstr ""
"我々は、 pip が指定されたスキームで走るように指示する ``--scheme=...`` オプ"
"ションを追加することを提案します。(現在の pip がスキームを決定する方法につい"
"ては後述の `実装ノート <Implementation Notes>`_ を参照してください。) これが"
"利用可能になり次第、ローカルのテストやおそらく実際のパッケージングで、 "
"(``get_preferred_schemes`` をバイパスして) 明示的にディストロ側の場所へパッ"
"ケージをインストールするために ``pip install --scheme=posix_distro`` のような"
"形で実行することができるようになるでしょう。また、もし本当に必要であれば、 "
"pip を使ってシステム側が管理するディレクトリからパッケージを削除するために "
"``pip uninstall --scheme=posix_distro`` を使うことさえできるでしょう。"

#: ../source/specifications/externally-managed-environments.rst:377
msgid ""
"To install packages with pip, you would also need to either suppress the "
"``EXTERNALLY-MANAGED`` marker file to allow pip to run or to override it on "
"the command line. You may want to use the same means for suppressing the "
"marker file in build chroots as you do in container images."
msgstr ""
"pip でパッケージをインストールするには、 ``EXTERNALLY-MANAGED`` マーカーファ"
"イルを抑止して pip を実行できるようにするか、コマンドラインでオーバーライドす"
"るかのいずれかが必要です。コンテナイメージ内で作業している時は、ビルドのため"
"に chroot した環境においても同じ方法でマーカーファイルを抑止したくなるかもし"
"れません。"

#: ../source/specifications/externally-managed-environments.rst:383
msgid ""
"The advantage of setting these up to be automatic (suppressing the marker "
"file in your build environment and having ``get_preferred_schemes`` "
"automatically return your distro's scheme) is that an unadorned ``pip "
"install`` will work inside a package build, which generally means that an "
"unmodified upstream build script that happens to internally call ``pip "
"install`` will do the right thing. You can, of course, just ensure that your "
"packaging process always calls ``pip install --scheme=posix_distro --break-"
"system-packages``, which would work too."
msgstr ""
"これらの設定 (ビルド環境ではマーカーファイルを抑止し、 "
"``get_preferred_schemes`` が自動的にディストロのスキームを返すようにするこ"
"と) を自動で行うことのアドバンテージは、素のままの ``pip install`` であっても"
"パッケージビルド内で動作することで、それは一般的にはアップストリームのビルド"
"スクリプトで内部で偶々 ``pip install`` を呼ぶものでも修正なしで正しく動作する"
"ということです。もちろん、パッケージングプロセスが常に ``pip install --"
"scheme=posix_distro --break-system-packages`` を呼び出すようにすることもでき"
"ますし、それも動作します。"

#: ../source/specifications/externally-managed-environments.rst:393
msgid ""
"The best approach here depends a lot on your distro's conventions and "
"mechanisms for packaging."
msgstr ""
"ここでの最善のアプローチは、ディストロの慣習やパッケージング機構に大きく依存"
"します。"

#: ../source/specifications/externally-managed-environments.rst:396
msgid ""
"Similarly, the ``sysconfig`` paths that are not for importable Python code - "
"that is, ``include``, ``platinclude``, ``scripts``, and ``data`` - should "
"also have two variants, one for use by distro-packaged software and one for "
"use for locally-installed software, and the distro should be set up such "
"that both are usable. For instance, a typical FHS-compliant distro will use "
"``/usr/local/include`` for the default scheme's ``include`` and ``/usr/"
"include`` for distro-packaged headers and place both on the compiler's "
"search path, and it will use ``/usr/local/bin`` for the default scheme's "
"``scripts`` and ``/usr/bin`` for distro-packaged entry points and place both "
"on ``$PATH``."
msgstr ""
"同様に、 ``sysconfig`` パスでインポート可能な Python のコード向けのものではな"
"いもの - つまり、 ``include`` ・ ``platinclude`` ・ ``scripts`` ・ ``data`` "
"- にもふたつの変種があって、ひとつはディストロ側でパッケージしたソフトウェ"
"ア、もう一つはローカルにインストールされたソフトウェアですが、ディストロはこ"
"れらのどちらでも使用できるように設定されているべきです。例えば、典型的な FHS "
"を遵守するディストロでは、 ``/usr/local/include`` をデフォルトのスキームの "
"``include`` 用に、 ``/usr/include`` をディストロ側でパッケージかしたヘッダ"
"ファイル用に使って、両方をコンパイラのサーチパスに含めておくことになるでしょ"
"うし、また、 ``/usr/local/bin`` をデフォルトのスキームの ``scripts`` 用に、 "
"``/usr/bin`` をディストロ側のパッケージのエントリポイント用に使って、両方を "
"``$PATH`` に含めておくでしょう。"

#: ../source/specifications/externally-managed-environments.rst:410
msgid "Implementation Notes"
msgstr "実装に関する覚書"

#: ../source/specifications/externally-managed-environments.rst:412
msgid ""
"This section is non-normative and contains notes relevant to both the "
"specification and potential implementations."
msgstr ""
"この節は規範的なものではなく、仕様と潜在的な実装の両方に関連する覚え書きを含"
"んでいます。"

#: ../source/specifications/externally-managed-environments.rst:415
msgid ""
"Currently (as of May 2021), pip does not directly expose a way to choose a "
"target ``sysconfig`` scheme, but it has three ways of looking up schemes "
"when installing:"
msgstr ""
"現在 (2021年5月時点) 、 pip はターゲットとなる ``sysconfig`` スキームを選択す"
"る方法を直接には外部に見せていませんが、インストールの際にルックアップする３"
"個の方法があります:"

#: ../source/specifications/externally-managed-environments.rst:422
msgid "``pip install``"
msgstr "``pip install``"

#: ../source/specifications/externally-managed-environments.rst:420
msgid ""
"Calls ``sysconfig.get_default_scheme()``, which is usually (in upstream "
"CPython and most current distros) the same as "
"``get_preferred_scheme('prefix')``."
msgstr ""
"``sysconfig.get_default_scheme()`` を呼び出す方法で、 (アップストリームの "
"CPython や今使われているほとんどのディストロでは) 普通は "
"``get_preferred_scheme('prefix')`` と同じ結果になるもの。"

#: ../source/specifications/externally-managed-environments.rst:425
msgid "``pip install --prefix=/some/path``"
msgstr "``pip install --prefix=/some/path``"

#: ../source/specifications/externally-managed-environments.rst:425
msgid "Calls ``sysconfig.get_preferred_scheme('prefix')``."
msgstr "``sysconfig.get_preferred_scheme('prefix')`` を呼び出す。"

#: ../source/specifications/externally-managed-environments.rst:428
msgid "``pip install --user``"
msgstr "``pip install --user``"

#: ../source/specifications/externally-managed-environments.rst:428
msgid "Calls ``sysconfig.get_preferred_scheme('user')``."
msgstr "``sysconfig.get_preferred_scheme('user')`` を呼び出す。"

#: ../source/specifications/externally-managed-environments.rst:430
msgid ""
"Finally, ``pip install --target=/some/path`` writes directly to ``/some/"
"path`` without looking up any schemes."
msgstr ""
"最後に、 ``pip install --target=/some/path`` でスキームをルックアップすること"
"なしに ``/some/path`` を書きます。"

#: ../source/specifications/externally-managed-environments.rst:433
msgid ""
"Debian currently carries a `patch to change the default install location "
"inside a virtual environment`__, using a few heuristics (including checking "
"for the ``VIRTUAL_ENV`` environment variable), largely so that the directory "
"used in a virtual environment remains ``site-packages`` and not ``dist-"
"packages``. This does not particularly affect this proposal, because the "
"implementation of that patch does not actually change the default "
"``sysconfig`` scheme, and notably does not change the result of ``sysconfig."
"get_path(\"stdlib\")``."
msgstr ""
"Debian は、現在、 (``VIRTUAL_ENV`` 環境変数を確認することを含む) いくつかの発"
"見的な解法を使った `仮想環境内のデフォルトのインストール先を変更するパッチ "
"<patch to change the default install location inside a virtual "
"environment>`__ を入れていて、仮想環境内で使われるディレクトリが ``dist-"
"packages`` ではなく ``site-packages`` に留まるようになっています。これは、こ"
"の提案に特に影響を与えません、というのは、そのパッチの実装は、実際にはデフォ"
"ルトの ``sysconfig`` スキームを変更するわけではなく、特に ``sysconfig."
"get_path(\"stdlib\")`` の結果を変更しないからです。"

#: ../source/specifications/externally-managed-environments.rst:445
msgid ""
"Fedora currently carries a `patch to change the default install location "
"when not running inside rpmbuild`__, which they use to implement the two-"
"system-wide-directories approach. This is conceptually the sort of hook "
"envisioned by bpo-43976_, except implemented as a code patch to "
"``distutils`` instead of as a changed ``sysconfig`` scheme."
msgstr ""
"Fedora は、現在、`rpmbuild 内で実行しているのでなければデフォルトのインストー"
"ル先を変更するパッチ <patch to change the default install location when not "
"running inside rpmbuild>`__ を適用していて、「ふたつのシステムワイドなディレ"
"クトリ」のアプローチを使っています。これは、概念としては、 ``sysconfig`` ス"
"キームを変更するものとしてではなく ``distutils`` へのソースコードパッチとして"
"実装されていることを除けば、 bpo-43976_ によって可視化されたある種のフックで"
"す。"

#: ../source/specifications/externally-managed-environments.rst:454
msgid ""
"The implementation of ``is_virtual_environment`` above, as well as the logic "
"to load the ``EXTERNALLY-MANAGED`` file and find the error message from it, "
"may as well get added to the standard library (``sys`` and ``sysconfig``, "
"respectively), to centralize their implementations, but they don't need to "
"be added yet."
msgstr ""
"上記の ``is_virtual_environment`` の実装は、 ``EXTERNALLY-MANAGED`` ファイル"
"をロードしてそこからエラーメッセージを探す論理と同様に、実装を中央一括管理に"
"するために標準ライブラリ (順に ``sys`` と ``sysconfig``) に追加されるかもしれ"
"ませんが、まだそのようにはなっていません。"

#: ../source/specifications/externally-managed-environments.rst:464
msgid "Copyright"
msgstr "著作権"

#: ../source/specifications/externally-managed-environments.rst:466
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
"この説明文書は、パブリックドメインに置かれるか、または、 CC0-1.0-Universal ラ"
"イセンスの下に置かれるかですが、いずれにしてもかなり寛大なものです。"

#: ../source/specifications/externally-managed-environments.rst:474
msgid "June 2022: This specification was approved through :pep:`668`."
msgstr "2022年6月: :pep:`668` を通じてこの仕様が承認されました。"

#: ../source/specifications/file-yanking.rst:5
msgid "File Yanking"
msgstr ""

#: ../source/specifications/file-yanking.rst:9
#, fuzzy
#| msgid ""
#| "This specification was originally defined in :pep:`518` and :pep:`621`."
msgid "This specification was originally defined in :pep:`592`."
msgstr "この仕様は、元々は :pep:`518` 及び :pep:`621` で定義されました。"

#: ../source/specifications/file-yanking.rst:14
msgid ""
":pep:`592` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`HTML - "
"Project Detail <simple-repository-html-project-detail>` and :ref:`JSON - "
"Project Detail <simple-repository-json-project-detail>`."
msgstr ""

#: ../source/specifications/file-yanking.rst:22
msgid ""
"Links in the simple repository **MAY** have a ``data-yanked`` attribute "
"which may have no value, or may have an arbitrary string as a value. The "
"presence of a ``data-yanked`` attribute **SHOULD** be interpreted as "
"indicating that the file pointed to by this particular link has been "
"\"Yanked\", and should not generally be selected by an installer, except "
"under specific scenarios."
msgstr ""
"シンプルなリポジトリの中のリンク群は、値を持たないか任意の文字列を値に取る "
"``data-yanked`` アトリビュートを持っていても **構いません** 。 ``data-"
"yanked`` アトリビュートが存在していれば、この特定のリンクによって指し示された"
"ファイルが \"ヤンクされた <Yanked>\" ものだと解釈される **べきであって** 、特"
"定のシナリオ下を除けば一般的にはインストーラによって選択されるべきものではあ"
"りません。"

#: ../source/specifications/file-yanking.rst:29
msgid ""
"The value of the ``data-yanked`` attribute, if present, is an arbitrary "
"string that represents the reason for why the file has been yanked. Tools "
"that process the simple repository API **MAY** surface this string to end "
"users."
msgstr ""
"``data-yanked`` アトリビュートの値は、もし値が存在するなら、そのファイルがヤ"
"ンクされた理由を表現する任意の文字列です。シンプルなリポジトリ API を処理する"
"ツール類は、エンドユーザ向けにその文字列を表示しても **構いません** 。"

#: ../source/specifications/file-yanking.rst:34
msgid ""
"The yanked attribute is not immutable once set, and may be rescinded in the "
"future (and once rescinded, may be reset as well). Thus API users **MUST** "
"be able to cope with a yanked file being \"unyanked\" (and even yanked "
"again)."
msgstr ""
"ヤンクされたアトリビュートは一旦設定されると変更できないというわけではなく、"
"将来の時点で廃止されても構いません (そして、一旦廃止されても再設定することが"
"できます) 。そういうことですので、 API ユーザは、ヤンクされたファイルが \"ヤ"
"ンク解除\" され (さらに再びヤンクされ) ることに対処でき **なければなりません"
"** 。"

#: ../source/specifications/file-yanking.rst:40
msgid "Installers"
msgstr "インストーラ類"

#: ../source/specifications/file-yanking.rst:42
msgid ""
"The desirable experience for users is that once a file is yanked, when a "
"human being is currently trying to directly install a yanked file, that it "
"fails as if that file had been deleted. However, when a human did that "
"awhile ago, and now a computer is just continuing to mechanically follow the "
"original order to install the now yanked file, then it acts as if it had not "
"been yanked."
msgstr ""
"ユーザにとって望ましい経験とは、あるファイルが一旦ヤンクされたら、人間側が今"
"まさにヤンクされたファイルを直接にインストールしようと試みている時、まるでそ"
"のファイルが削除されたかのように失敗することです。しかしながら、その人が少し"
"前の時点で試みた場合には、今回はコンピュータが機械的にオリジナルの順序にした"
"がって今まさにヤンクされたファイルをインストールし、それがヤンクされたファイ"
"ルなどではなかったかのように振る舞うことです。"

#: ../source/specifications/file-yanking.rst:49
msgid ""
"An installer **MUST** ignore yanked releases, if the selection constraints "
"can be satisfied with a non-yanked version, and **MAY** refuse to use a "
"yanked release even if it means that the request cannot be satisfied at all. "
"An implementation **SHOULD** choose a policy that follows the spirit of the "
"intention above, and that prevents \"new\" dependencies on yanked releases/"
"files."
msgstr ""
"インストーラは、ヤンクされたバージョン以外のもので選択上の制約を満足すること"
"が可能なら、ヤンクされたリリース群を **無視しなければならず** 、要求が全く満"
"たされないことを意味する場合でさえもヤンクされたリリースを **拒否しても構いま"
"せん** 。実装では、上記の意図を汲んだポリシーで、かつ、 \"新しい\" 依存関係を"
"訳されたリリースやファイルに課すことを避けポリシーを **選択するべきです** 。"

#: ../source/specifications/file-yanking.rst:56
msgid ""
"What this means is left up to the specific installer, to decide how to best "
"fit into the overall usage of their installer. However, there are two "
"suggested approaches to take:"
msgstr ""
"これが意味するものは、特定のインストーラの全体的な使い方に一番うまく合致する"
"方法を決定するということで、インストーラの裁量に任されています。"

#: ../source/specifications/file-yanking.rst:60
msgid ""
"Yanked files are always ignored, unless they are the only file that matches "
"a version specifier that \"pins\" to an exact version using either ``==`` "
"(without any modifiers that make it a range, such as ``.*``) or ``===``. "
"Matching this version specifier should otherwise be done as per :ref:`the "
"version specifiers specification <version-specifiers>` for things like local "
"versions, zero padding, etc."
msgstr ""
"ヤンクされたファイル群は、それが (``.*`` のような範囲を構成するいかなる修正子"
"も付いていない) ``==`` か ``===`` を使って特定のバージョンに \"ピン留め\" さ"
"れたバージョン指定子に合致する唯一のファイルでない限り、常に無視されます。そ"
"れ以外の場合、このバージョン指定子とのマッチングは、ローカルバージョン・ゼロ"
"でのパディング・その他のような事柄について :ref:`バージョン指定子仕様 "
"<version-specifiers>` にしたがって行われるべきです。"

#: ../source/specifications/file-yanking.rst:67
msgid ""
"Yanked files are always ignored, unless they are the only file that matches "
"what a lock file (such as ``Pipfile.lock`` or ``poetry.lock``) specifies to "
"be installed. In this case, a yanked file **SHOULD** not be used when "
"creating or updating a lock file from some input file or command."
msgstr ""
"ヤンクされたファイル群は、 (``Pipfile.lock`` や ``poetry.lock`` のような) "
"ロックファイルがインストールされるべきものとして指定しているものに合致する唯"
"一のファイル出ない限り、常に無視されます。この場合には、ヤンクされたファイル"
"は、何らかの入力ファイルやコマンドからそのロックファイルを作成したり更新した"
"りする場合には、 **使われるべきではありません** 。"

#: ../source/specifications/file-yanking.rst:73
msgid ""
"Regardless of the specific strategy that an installer chooses for deciding "
"when to install yanked files, an installer **SHOULD** emit a warning when it "
"does decide to install a yanked file. That warning **MAY** utilize the value "
"of the ``data-yanked`` attribute (if it has a value) to provide more "
"specific feedback to the user about why that file had been yanked."
msgstr ""
"あるインストーラがヤンクされたファイルをいつインストールするのかを決めるにあ"
"たって、ヤンクされたファイルをインストールすると決定した時にインストーラが警"
"告を **発出するべきです** 。そのような警告は、そのファイルがヤンクされた理由"
"についてユーザにより詳しいフィードバックを提供するために、 (もし値があれば) "
"``data-yanked`` アトリビュートの値を **使っても構いません** 。"

#: ../source/specifications/file-yanking.rst:81
msgid "Mirrors"
msgstr "ミラー"

#: ../source/specifications/file-yanking.rst:83
msgid "Mirrors can generally treat yanked files one of two ways:"
msgstr "ミラーは、ヤンクされたファイルを次の二つの方法のうちの一つで扱います:"

#: ../source/specifications/file-yanking.rst:85
msgid ""
"They may choose to omit them from their simple repository API completely, "
"providing a view over the repository that shows only \"active\", unyanked "
"files."
msgstr ""
"\"アクティブ\" なヤンクされたものではないファイル群だけを見せるリポジトリの"
"ビューを提供して、シンプルなリポジトリ API から (ヤンクされたファイル群を) 完"
"全に排除する選択をしても構いません。"

#: ../source/specifications/file-yanking.rst:88
msgid ""
"They may choose to include yanked files, and additionally mirror the ``data-"
"yanked`` attribute as well."
msgstr ""
"ヤンクされたファイルも表示するとともに、 ``data-yanked`` アトリビュートをもミ"
"ラーするという選択をしても構いません。"

#: ../source/specifications/file-yanking.rst:91
msgid ""
"Mirrors **MUST NOT** mirror a yanked file without also mirroring the ``data-"
"yanked`` attribute for it."
msgstr ""
"ミラーは、 ``data-yanked`` アトリビュートを同時にミラーするのでなければヤンク"
"されたファイルを **ミラーしてはいけません** 。"

#: ../source/specifications/glob-patterns.rst:3
msgid "``glob`` patterns"
msgstr ""

#: ../source/specifications/glob-patterns.rst:5
msgid ""
"Some PyPA specifications, e.g. :ref:`pyproject.toml's license-files "
"<pyproject-toml-license-files>`, accept certain types of *glob patterns* to "
"match a given string containing wildcards and character ranges against files "
"and directories. This specification defines which patterns are acceptable "
"and how they should be handled."
msgstr ""

#: ../source/specifications/glob-patterns.rst:13
msgid "Valid glob patterns"
msgstr ""

#: ../source/specifications/glob-patterns.rst:15
msgid ""
"For PyPA purposes, a *valid glob pattern* MUST be a string matched against "
"filesystem entries as specified below:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:18
msgid ""
"Alphanumeric characters, underscores (``_``), hyphens (``-``) and dots (``."
"``) MUST be matched verbatim."
msgstr ""

#: ../source/specifications/glob-patterns.rst:21
msgid ""
"Special glob characters: ``*``, ``?``, ``**`` and character ranges: ``[]`` "
"containing only the verbatim matched characters MUST be supported. Within "
"``[...]``, the hyphen indicates a locale-agnostic range (e.g. ``a-z``, order "
"based on Unicode code points). Hyphens at the start or end are matched "
"literally."
msgstr ""

#: ../source/specifications/glob-patterns.rst:27
msgid "Path delimiters MUST be the forward slash character (``/``)."
msgstr ""

#: ../source/specifications/glob-patterns.rst:29
msgid ""
"Patterns always refer to *relative paths*, e.g., when used in :file:"
"`pyproject.toml`, patterns should always be relative to the directory "
"containing that file. Therefore the leading slash character MUST NOT be used."
msgstr ""

#: ../source/specifications/glob-patterns.rst:34
msgid "Parent directory indicators (``..``) MUST NOT be used."
msgstr ""

#: ../source/specifications/glob-patterns.rst:36
msgid ""
"Any characters or character sequences not covered by this specification are "
"invalid. Projects MUST NOT use such values. Tools consuming glob patterns "
"SHOULD reject invalid values with an error."
msgstr ""

#: ../source/specifications/glob-patterns.rst:40
msgid ""
"Literal paths (e.g. :file:`LICENSE`) are valid globs which means they can "
"also be defined."
msgstr ""

#: ../source/specifications/glob-patterns.rst:43
msgid "Tools consuming glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:45
msgid ""
"MUST treat each value as a glob pattern, and MUST raise an error if the "
"pattern contains invalid glob syntax."
msgstr ""

#: ../source/specifications/glob-patterns.rst:47
msgid ""
"MUST raise an error if any individual user-specified pattern does not match "
"at least one file."
msgstr ""

#: ../source/specifications/glob-patterns.rst:50
msgid "Examples of valid glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:61
msgid "Examples of invalid glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:74
#, fuzzy
#| msgid "Reference Implementation"
msgid "Reference implementation in Python"
msgstr "参照実装"

#: ../source/specifications/glob-patterns.rst:76
msgid ""
"It is possible to defer the majority of the pattern matching against the "
"file system to the :mod:`glob` module in Python's standard library. It is "
"necessary however to perform additional validations."
msgstr ""

#: ../source/specifications/glob-patterns.rst:80
msgid "The code below is as a simple reference implementation:"
msgstr ""

#: ../source/specifications/index.rst:4
msgid "PyPA specifications"
msgstr "PyPA 仕様"

#: ../source/specifications/index.rst:6
msgid ""
"This is a list of currently active interoperability specifications "
"maintained by the Python Packaging Authority. The process for updating these "
"standards, and for proposing new ones, is documented on `pypa.io <https://"
"www.pypa.io/en/latest/specifications/>`__."
msgstr ""
"これは、 Python パッケージングオーソリティが維持管理している現時点で有効な相"
"互互換性の使用です。これらの標準を更新し新たな標準を提案するプロセスは、 "
"`pypa.io <https://www.pypa.io/en/latest/specifications/>`__ に文書化されてい"
"ます。"

#: ../source/specifications/index-hosted-attestations.rst:6
msgid "Index hosted attestations"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:8
msgid "This specification was originally defined in :pep:`740`."
msgstr "この仕様は、元々は :pep:`740` で定義されました。"

#: ../source/specifications/index-hosted-attestations.rst:12
msgid ""
":pep:`740` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`simple-"
"repository-api-base` and :ref:`json-serialization`."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:22
msgid "Upload endpoint changes"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:26
msgid ""
"The \"legacy\" upload API is not standardized. See `PyPI's Upload API "
"documentation <https://docs.pypi.org/api/upload/>`_ for how attestations are "
"uploaded."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:33
#, fuzzy
#| msgid "Existing projects"
msgid "Attestation objects"
msgstr "既存のプロジェクト"

#: ../source/specifications/index-hosted-attestations.rst:35
msgid ""
"An attestation object is a JSON object with several required keys; "
"applications or signers may include additional keys so long as all "
"explicitly listed keys are provided. The required layout of an attestation "
"object is provided as pseudocode below."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:88
msgid ""
"A full data model for each object in ``transparency_entries`` is provided "
"in :ref:`appendix`. Attestation objects **SHOULD** include one or more "
"transparency log entries, and **MAY** include additional keys for other "
"sources of signed time (such as an :rfc:`3161` Time Stamping Authority or a "
"`Roughtime <https://blog.cloudflare.com/roughtime>`__ server)."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:94
msgid ""
"Attestation objects are versioned; this PEP specifies version 1. Each "
"version is tied to a single cryptographic suite to minimize unnecessary "
"cryptographic agility. In version 1, the suite is as follows:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:98
msgid ""
"Certificates are specified as X.509 certificates, and comply with the "
"profile in :rfc:`5280`."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:100
msgid ""
"The message signature algorithm is ECDSA, with the P-256 curve for public "
"keys and SHA-256 as the cryptographic digest function."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:103
msgid ""
"Future PEPs may change this suite (and the overall shape of the attestation "
"object) by selecting a new version number."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:109
msgid "Attestation statement and signature generation"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:111
msgid ""
"The *attestation statement* is the actual claim that is cryptographically "
"signed over within the attestation object (i.e., the ``envelope.statement``)."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:114
msgid ""
"The attestation statement is encoded as a `v1 in-toto Statement object "
"<https://github.com/in-toto/attestation/blob/v1.0/spec/v1.0/statement."
"md>`__, in JSON form. When serialized the statement is treated as an opaque "
"binary blob, avoiding the need for canonicalization."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:119
msgid ""
"In addition to being a v1 in-toto Statement, the attestation statement is "
"constrained in the following ways:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:122
msgid "The in-toto ``subject`` **MUST** contain only a single subject."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:123
msgid ""
"``subject[0].name`` is the distribution's filename, which **MUST** be a "
"valid :ref:`source distribution <source-distribution-format>` or :ref:`wheel "
"distribution <binary-distribution-format>` filename."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:126
msgid ""
"``subject[0].digest`` **MUST** contain a SHA-256 digest. Other digests "
"**MAY** be present. The digests **MUST** be represented as hexadecimal "
"strings."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:128
msgid "The following ``predicateType`` values are supported:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:130
msgid ""
"`SLSA Provenance <https://slsa.dev/provenance/v1>`__: ``https://slsa.dev/"
"provenance/v1``"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:131
msgid ""
"`PyPI Publish Attestation <https://docs.pypi.org/attestations/publish/"
"v1>`__: ``https://docs.pypi.org/attestations/publish/v1``"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:133
msgid ""
"The signature over this statement is constructed using the `v1 DSSE "
"signature protocol <https://github.com/secure-systems-lab/dsse/blob/v1.0.0/"
"protocol.md>`__, with a ``PAYLOAD_TYPE`` of ``application/vnd.in-toto+json`` "
"and a ``PAYLOAD_BODY`` of the JSON-encoded statement above. No other "
"``PAYLOAD_TYPE`` is permitted."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:141
msgid "Provenance objects"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:143
msgid ""
"The index will serve uploaded attestations along with metadata that can "
"assist in verifying them in the form of JSON serialized objects."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:146
msgid ""
"These *provenance objects* will be available via both the Simple Index and "
"JSON-based Simple API as described above, and will have the following layout:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:169
msgid "or, as pseudocode:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:217
msgid ""
"``version`` is ``1``. Like attestation objects, provenance objects are "
"versioned, and this PEP only defines version ``1``."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:219
msgid ""
"``attestation_bundles`` is a **required** JSON array, containing one or more "
"\"bundles\" of attestations. Each bundle corresponds to a signing identity "
"(such as a Trusted Publishing identity), and contains one or more "
"attestation objects."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:224
msgid ""
"As noted in the ``Publisher`` model, each ``AttestationBundle.publisher`` "
"object is specific to its Trusted Publisher but must include at minimum:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:228
msgid ""
"A ``kind`` key, which **MUST** be a JSON string that uniquely identifies the "
"kind of Trusted Publisher."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:230
msgid ""
"A ``claims`` key, which **MUST** be a JSON object containing any context-"
"specific claims retained by the index during Trusted Publisher "
"authentication."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:233
msgid "All other keys in the publisher object are publisher-specific."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:235
msgid ""
"Each array of attestation objects is a superset of the ``attestations`` "
"array supplied by the uploaded through the ``attestations`` field at upload "
"time, as described in :ref:`upload-endpoint` and :ref:`changes-to-provenance-"
"objects`."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:243
msgid "Changes to provenance objects"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:245
msgid ""
"Provenance objects are *not* immutable, and may change over time. Reasons "
"for changes to the provenance object include but are not limited to:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:248
msgid ""
"Addition of new attestations for a pre-existing signing identity: the index "
"**MAY** choose to allow additional attestations by pre-existing signing "
"identities, such as newer attestation versions for already uploaded files."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:253
msgid ""
"Addition of new signing identities and associated attestations: the index "
"**MAY** choose to support attestations from sources other than the file's "
"uploader, such as third-party auditors or the index itself. These "
"attestations may be performed asynchronously, requiring the index to insert "
"them into the provenance object *post facto*."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:262
msgid "Attestation verification"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:264
msgid ""
"Verifying an attestation object against a distribution file requires "
"verification of each of the following:"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:267
msgid "``version`` is ``1``. The verifier **MUST** reject any other version."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:268
msgid ""
"``verification_material.certificate`` is a valid signing certificate, as "
"issued by an *a priori* trusted authority (such as a root of trust already "
"present within the verifying client)."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:271
msgid ""
"``verification_material.certificate`` identifies an appropriate signing "
"subject, such as the machine identity of the Trusted Publisher that "
"published the package."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:274
msgid ""
"``envelope.statement`` is a valid in-toto v1 Statement, with a subject and "
"digest that **MUST** match the distribution's filename and contents. For the "
"distribution's filename, matching **MUST** be performed by parsing using the "
"appropriate source distribution or wheel filename format, as the statement's "
"subject may be equivalent but normalized."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:279
msgid ""
"``envelope.signature`` is a valid signature for ``envelope.statement`` "
"corresponding to ``verification_material.certificate``, as reconstituted via "
"the `v1 DSSE signature protocol <https://github.com/secure-systems-lab/dsse/"
"blob/v1.0.0/protocol.md>`__."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:284
msgid ""
"In addition to the above required steps, a verifier **MAY** additionally "
"verify ``verification_material.transparency_entries`` on a policy basis, e."
"g. requiring at least one transparency log entry or a threshold of entries. "
"When verifying transparency entries, the verifier **MUST** confirm that the "
"inclusion time for each entry lies within the signing certificate's validity "
"period."
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:293
msgid "Appendix: Data models for Transparency Log Entries"
msgstr ""

#: ../source/specifications/index-hosted-attestations.rst:295
msgid ""
"This appendix contains pseudocoded data models for transparency log entries "
"in attestation objects. Each transparency log entry serves as a source of "
"signed inclusion time, and can be verified either online or offline."
msgstr ""

#: ../source/specifications/inline-script-metadata.rst:5
msgid "Inline script metadata"
msgstr "インラインスクリプトのメタデータ"

#: ../source/specifications/inline-script-metadata.rst:7
msgid ""
"This specification defines a metadata format that can be embedded in single-"
"file Python scripts to assist launchers, IDEs and other external tools which "
"may need to interact with such scripts."
msgstr ""
"この仕様では、単一ファイルの Python スクリプトがそのようなスクリプトと相互作"
"用するローンチャー・ IDE ・その他外部ツールを手助けするために、スクリプト内に"
"埋め込むことができるメタデータフォーマットを定義しています。"

#: ../source/specifications/inline-script-metadata.rst:15
msgid ""
"This specification defines a metadata comment block format (loosely inspired "
"by `reStructuredText Directives`__)."
msgstr ""
"この仕様では、メタデータのコメントブロックの (`reStructuredText "
"Directives`__ に大雑把に基づく) フォーマットを定義します。"

#: ../source/specifications/inline-script-metadata.rst:20
msgid ""
"Any Python script may have top-level comment blocks that MUST start with the "
"line ``# /// TYPE`` where ``TYPE`` determines how to process the content. "
"That is: a single ``#``, followed by a single space, followed by three "
"forward slashes, followed by a single space, followed by the type of "
"metadata. Block MUST end with the line ``# ///``. That is: a single ``#``, "
"followed by a single space, followed by three forward slashes. The ``TYPE`` "
"MUST only consist of ASCII letters, numbers and hyphens."
msgstr ""
"すべての Python スクリプトについて、トップレベルのコメントブロックがあっても"
"かまいませんが、 (そのようなコメントブロックは) ``TYPE`` によって内容物をどの"
"ように処理するべきかが決まるような ``# /// TYPE`` の行で始まらなければなりま"
"せん。つまり: 単独の ``#`` 、これに後続する単独の空白文字、さらに後続する３個"
"のスラッシュ文字 <forward slash> 、さらに空白文字、メタデータのタイプ。ブロッ"
"クは ``# ///`` の行で終わらなければなりません。つまり: 単独の ``#`` 、後続す"
"る空白文字、３個のスラッシュ文字。 ``TYPE`` は、 ASCII 文字・数字・ハイフンだ"
"けで構成されていなければなりません。"

#: ../source/specifications/inline-script-metadata.rst:28
msgid ""
"Every line between these two lines (``# /// TYPE`` and ``# ///``) MUST be a "
"comment starting with ``#``. If there are characters after the ``#`` then "
"the first character MUST be a space. The embedded content is formed by "
"taking away the first two characters of each line if the second character is "
"a space, otherwise just the first character (which means the line consists "
"of only a single ``#``)."
msgstr ""
"これらふたつの行 (``# /// TYPE`` と ``# ///``) の間に入る各行は、 ``#`` で始"
"まるコメントでなければなりません。もし、 ``#`` に文字が続くのであれば、その最"
"初の文字は空白文字でなければなりません。ここに置かれる内容は、２文字目が空白"
"文字であれば最初の２文字を削除して整形されますが、さもなければ最初の文字だけ "
"(つまり、単独の ``#`` だけから構成される行) になります。"

#: ../source/specifications/inline-script-metadata.rst:35
msgid ""
"Precedence for an ending line ``# ///`` is given when the next line is not a "
"valid embedded content line as described above. For example, the following "
"is a single fully valid block:"
msgstr ""
"次の行が上述の埋め込みコメント行として正当なものではない場合に、 (コメントブ"
"ロックの) 終わりの行である ``# ///`` が優先されます。例えば、次に示すものはひ"
"とつの完全に正当なブロックです:"

#: ../source/specifications/inline-script-metadata.rst:51
msgid ""
"A starting line MUST NOT be placed between another starting line and its "
"ending line. In such cases tools MAY produce an error. Unclosed blocks MUST "
"be ignored."
msgstr ""
"開始行は、他の開始行とその終了行の間に位置してはいけません。そのような場合に"
"は、ツール類はエラーを生成しても構いません。閉じられていないブロックは無視さ"
"れなければなりません。"

#: ../source/specifications/inline-script-metadata.rst:54
msgid ""
"When there are multiple comment blocks of the same ``TYPE`` defined, tools "
"MUST produce an error."
msgstr ""
"同じ ``TYPE`` が定義されたコメントブロックが複数存在する場合、ツール類はエ"
"ラーを生成しなければなりません。"

#: ../source/specifications/inline-script-metadata.rst:57
msgid ""
"Tools reading embedded metadata MAY respect the standard Python encoding "
"declaration. If they choose not to do so, they MUST process the file as "
"UTF-8."
msgstr ""
"組み込みのメタデータを読み取るツール類は、 Python 標準のエンコーディング宣言"
"を尊重しても構いません。もし、そうしないことを選択するのであれば、UTF-8 であ"
"るものとしてファイルを扱わなければなりません。"

#: ../source/specifications/inline-script-metadata.rst:60
msgid ""
"This is the canonical regular expression that MAY be used to parse the "
"metadata:"
msgstr "これは、メタデータをパースするのに使っても構わない正統な正規表現です:"

#: ../source/specifications/inline-script-metadata.rst:67
msgid ""
"In circumstances where there is a discrepancy between the text specification "
"and the regular expression, the text specification takes precedence."
msgstr ""
"テキストの仕様と正規表現の間に矛盾のある環境下では、テキストの仕様が優先され"
"ます。"

#: ../source/specifications/inline-script-metadata.rst:70
msgid ""
"Tools MUST NOT read from metadata blocks with types that have not been "
"standardized by this specification."
msgstr ""
"ツール類は、この仕様によって標準化されていないタイプを伴ったメタデータブロッ"
"クから読み取ることがあってはなりません。"

#: ../source/specifications/inline-script-metadata.rst:74
msgid "script type"
msgstr "スクリプトのタイプ"

#: ../source/specifications/inline-script-metadata.rst:76
msgid ""
"The first type of metadata block is named ``script``, which contains script "
"metadata (dependency data and tool configuration)."
msgstr ""
"メタデータブロックのひとつめのタイプは ``script`` という名前で、スクリプトメ"
"タデータ (依存関係のデータとツールの設定) を格納しています。"

#: ../source/specifications/inline-script-metadata.rst:79
msgid ""
"This document MAY include the top-level fields ``dependencies`` and "
"``requires-python``, and MAY optionally include a ``[tool]`` table."
msgstr ""
"このドキュメント (訳註、メタデータブロックのことか) は、トップレベルのフィー"
"ルドとして ``dependencies`` と ``requires-python`` を含むことができ、また、オ"
"プションとして ``[tool]`` テーブルを含んでいても構いません。"

#: ../source/specifications/inline-script-metadata.rst:82
#, fuzzy
#| msgid ""
#| "The ``[tool]`` MAY be used by any tool, script runner or otherwise, to "
#| "configure behavior. It has the same semantics as the :ref:`[tool] table "
#| "in pyproject.toml <pyproject-tool-table>`."
msgid ""
"The ``[tool]`` table MAY be used by any tool, script runner or otherwise, to "
"configure behavior. It has the same semantics as the :ref:`[tool] table in "
"pyproject.toml <pyproject-tool-table>`."
msgstr ""
"``[tool]`` は、どんなツールでもスクリプトランナーでもその他のものでも、振る舞"
"いを設定するのに使うことができます。:ref:`pyproject.toml <pyproject-tool-"
"table> 内の [tool] テーブル` と同一のセマンティクスを持ちます。"

#: ../source/specifications/inline-script-metadata.rst:86
msgid "The top-level fields are:"
msgstr "トップレベルのフィールドは:"

#: ../source/specifications/inline-script-metadata.rst:88
msgid ""
"``dependencies``: A list of strings that specifies the runtime dependencies "
"of the script. Each entry MUST be a valid :ref:`dependency specifier "
"<dependency-specifiers>`."
msgstr ""
"``dependencies``: スクリプトの動作時の依存関係を指定する文字列のリスト。それ"
"ぞれの項目は正当な :ref:`依存関係指定子 <dependency-specifiers>` でなければな"
"りません。"

#: ../source/specifications/inline-script-metadata.rst:91
msgid ""
"``requires-python``: A string that specifies the Python version(s) with "
"which the script is compatible. The value of this field MUST be a valid :ref:"
"`version specifier <version-specifiers>`."
msgstr ""
"``requires-python``: そのスクリプトと互換性のある Python のバージョン(群) を"
"指定する文字列。このフィールドの値は正当な :ref:`バージョン指定子 <version-"
"specifiers>` でなければなりません。"

#: ../source/specifications/inline-script-metadata.rst:95
msgid ""
"Script runners MUST error if the specified ``dependencies`` cannot be "
"provided. Script runners SHOULD error if no version of Python that satisfies "
"the specified ``requires-python`` can be provided."
msgstr ""
"スクリプトを走らせる側では、指定された ``dependencies`` を提供できない場合に"
"はエラーを起こさなければなりません。指定された ``requires-python`` で指定され"
"たバージョンの Python を提供できない場合には、スクリプトを走らせる側でエラー"
"を起こすべきです。"

#: ../source/specifications/inline-script-metadata.rst:102
msgid "The following is an example of a script with embedded metadata:"
msgstr "組み込まれたメタデータを伴うスクリプトの例を以下に示します:"

#: ../source/specifications/inline-script-metadata.rst:125
msgid ""
"The following is an example of how to read the metadata on Python 3.11 or "
"higher."
msgstr ""
"3.11 およびそれ以降の Python でどのようにメタデータを読み取るのかについて例を"
"以下に示します。"

#: ../source/specifications/inline-script-metadata.rst:151
msgid ""
"Often tools will edit dependencies like package managers or dependency "
"update automation in CI. The following is a crude example of modifying the "
"content using the ``tomlkit`` library__."
msgstr ""
"ツール類は、しばしば、パッケージ管理機構や CI における依存関係更新の自動化機"
"構のように、依存関係を編集するでしょう。以下に、 ``tomlkit`` library__ を使っ"
"て内容を書き換える際のおおまかな例を示します。"

#: ../source/specifications/inline-script-metadata.rst:182
msgid ""
"Note that this example used a library that preserves TOML formatting. This "
"is not a requirement for editing by any means but rather is a \"nice to "
"have\" feature."
msgstr ""
"この例では、TOML フォーマッティングを保存するライブラリを使っていることに留意"
"してください。これは、決して編集することに対する要求事項というわけではなく、"
"むしろ \"あったらいいね <nice to have>\" 的なものです。"

#: ../source/specifications/inline-script-metadata.rst:186
msgid ""
"The following is an example of how to read a stream of arbitrary metadata "
"blocks."
msgstr ""
"任意のメタデータブロックのストリームをどのように読み取るかの例を以下に示しま"
"す。"

#: ../source/specifications/inline-script-metadata.rst:205
#: ../source/specifications/simple-repository-api.rst:954
msgid "Recommendations"
msgstr "推奨事項"

#: ../source/specifications/inline-script-metadata.rst:207
msgid ""
"Tools that support managing different versions of Python should attempt to "
"use the highest available version of Python that is compatible with the "
"script's ``requires-python`` metadata, if defined."
msgstr ""
"異なるバージョンの Python を管理する機能を持つツール類は、スクリプトの "
"``requires-python`` メタデータと互換性のある Python のバージョンのうちの利用"
"可能な最も新しい版を使うことを試みるべきです。"

#: ../source/specifications/inline-script-metadata.rst:215
msgid ""
"October 2023: This specification was conditionally approved through :pep:"
"`723`."
msgstr "2023年10月: :pep:`723` を通じて、この仕様が条件付きで承認されました。"

#: ../source/specifications/inline-script-metadata.rst:216
msgid ""
"January 2024: Through amendments to :pep:`723`, the ``pyproject`` metadata "
"block type was renamed to ``script``, and the ``[run]`` table was dropped, "
"making the ``dependencies`` and ``requires-python`` keys top-level. "
"Additionally, the specification is no longer provisional."
msgstr ""
"2024年1月: :pep:`723` に対する修正を通じて、 ``pyproject`` メタデータブロック"
"のタイプが ``script`` に改名され、 ``dependencies`` キーと ``require-"
"python`` キーがトップレベルに昇格する形で ``[run]`` テーブルが廃止されまし"
"た。さらに、この仕様はもはや暫定的なものではなくなりました。"

#: ../source/specifications/license-expression.rst:5
msgid ""
":pep:`639` defined a new :ref:`pyproject.toml's license <pyproject-toml-"
"license>` value and added a corresponding :ref:`core metadata License-"
"Expression field <core-metadata-license-expression>`. This specification "
"defines which license expressions are acceptable."
msgstr ""

#: ../source/specifications/license-expression.rst:14
msgid ""
"License can be defined as a text string that is a valid SPDX :term:`license "
"expression <License Expression>`, as documented in the `SPDX specification "
"<spdxpression_>`__, either Version 2.2 or a later compatible version."
msgstr ""

#: ../source/specifications/license-expression.rst:19
msgid "A license expression can use the following license identifiers:"
msgstr ""

#: ../source/specifications/license-expression.rst:21
msgid ""
"Any SPDX-listed license short-form identifiers that are published in the "
"`SPDX License List <spdxlist_>`__, version 3.17 or any later compatible "
"version."
msgstr ""

#: ../source/specifications/license-expression.rst:25
msgid ""
"The custom ``LicenseRef-[idstring]`` string(s), where ``[idstring]`` is a "
"unique string containing letters, numbers, ``.`` and/or ``-``, to identify "
"licenses that are not included in the SPDX license list. The custom "
"identifiers must follow the SPDX specification, `clause 10.1 "
"<spdxcustom_>`__ of the given specification version."
msgstr ""

#: ../source/specifications/license-expression.rst:32
#, fuzzy
#| msgid "Examples of compliant version schemes"
msgid "Examples of valid license expressions:"
msgstr "枠組みに合致したバージョン番号の例"

#: ../source/specifications/license-expression.rst:45
msgid "Examples of invalid license expressions:"
msgstr ""

#: ../source/specifications/name-normalization.rst:3
msgid "Names and normalization"
msgstr "名前と正規化"

#: ../source/specifications/name-normalization.rst:5
msgid ""
"This specification defines the format that names for packages and extras are "
"required to follow. It also describes how to normalize them, which should be "
"done before lookups and comparisons."
msgstr ""
"この仕様では、パッケージや追加物の名前が従うことを要求されるフォーマットを定"
"義します。あわせて、ルックアップや比較を行う前に行われるべき標準化方法につい"
"ても記述します。"

#: ../source/specifications/name-normalization.rst:13
msgid "Name format"
msgstr "名前のフォーマット"

#: ../source/specifications/name-normalization.rst:15
msgid ""
"A valid name consists only of ASCII letters and numbers, period, underscore "
"and hyphen. It must start and end with a letter or number. This means that "
"valid project names are limited to those which match the following regex "
"(run with :py:data:`re.IGNORECASE`)::"
msgstr ""
"正当な名前は ASCII 文字・数字・ピリオド・アンダースコア・ハイフンだけで構成さ"
"れているものです。名前の先頭と末尾は文字か数字でなければなりません。正当なプ"
"ロジェクト名は、次の正規表現に (``re.IGNORECASE`` 付きで) マッチするものに限"
"られるということになります::"

#: ../source/specifications/name-normalization.rst:26
msgid "Name normalization"
msgstr "名前の正規化"

#: ../source/specifications/name-normalization.rst:28
msgid ""
"The name should be lowercased with all runs of the characters ``.``, ``-``, "
"or ``_`` replaced with a single ``-`` character. This can be implemented in "
"Python with the re module:"
msgstr ""
"名前は、すべての文字を小文字にして、 ``.`` ・ ``,`` ・ ``_`` の文字が連続で１"
"個以上出現したらそれを単独の ``-`` の文字に置き換えるべきです。これは、 "
"Python の re モジュールを使って実装することができます:"

#: ../source/specifications/name-normalization.rst:39
msgid "This means that the following names are all equivalent:"
msgstr "次に挙げる名前はすべて同等ということになります:"

#: ../source/specifications/name-normalization.rst:41
msgid "``friendly-bard`` (normalized form)"
msgstr "``friendly-bard`` (正規化形式)"

#: ../source/specifications/name-normalization.rst:42
msgid "``Friendly-Bard``"
msgstr "``Friendly-Bard``"

#: ../source/specifications/name-normalization.rst:43
msgid "``FRIENDLY-BARD``"
msgstr "``FRIENDLY-BARD``"

#: ../source/specifications/name-normalization.rst:44
msgid "``friendly.bard``"
msgstr "``friendly.bard``"

#: ../source/specifications/name-normalization.rst:45
msgid "``friendly_bard``"
msgstr "``friendly_bard``"

#: ../source/specifications/name-normalization.rst:46
msgid "``friendly--bard``"
msgstr "``friendly--bard``"

#: ../source/specifications/name-normalization.rst:47
msgid ""
"``FrIeNdLy-._.-bArD`` (a *terrible* way to write a name, but it is valid)"
msgstr "``FrIeNdLy-._.-bArD`` ( *ひどい* 書き方の名前の例だが、正当である)"

#: ../source/specifications/name-normalization.rst:52
msgid ""
"September 2015: The specification of name normalized was approved through :"
"pep:`503 <503#normalized-names>`."
msgstr ""
"2015年9月: :pep:`503 <503#normalized-names>` を通じて名前の正規化に関わる仕様"
"が承認されました。"

#: ../source/specifications/name-normalization.rst:54
msgid ""
"November 2015: The specification of valid names was approved through :pep:"
"`508 <508#names>`."
msgstr ""
"2015年11月: :pep:`508 <508#名前>` を通じて正当な名前に関する仕様が承認されま"
"した。"

#: ../source/specifications/platform-compatibility-tags.rst:6
msgid "Platform compatibility tags"
msgstr "プラットフォームの互換性タグ"

#: ../source/specifications/platform-compatibility-tags.rst:8
msgid ""
"Platform compatibility tags allow build tools to mark distributions as being "
"compatible with specific platforms, and allows installers to understand "
"which distributions are compatible with the system they are running on."
msgstr ""
"プラットフォーム相互互換性タグは、特定のプラットフォームと互換であるとビルド"
"ツールが配布物にマークを付けることができるようにし、インストーラが自身が動作"
"しているシステムと互換であるのはどの配布物であるかを理解できるようにします。"

#: ../source/specifications/platform-compatibility-tags.rst:16
msgid "The tag format is ``{python tag}-{abi tag}-{platform tag}``."
msgstr "タグの書式は、 ``{python tag}-{abi tag}-{platform tag}`` です。"

#: ../source/specifications/platform-compatibility-tags.rst:18
msgid "python tag"
msgstr "python タグ"

#: ../source/specifications/platform-compatibility-tags.rst:19
msgid "'py27', 'cp33'"
msgstr "'py27' ・ 'cp33'"

#: ../source/specifications/platform-compatibility-tags.rst:21
msgid "'cp32dmu', 'none'"
msgstr "'cp33dmu' ・ 'none'"

#: ../source/specifications/platform-compatibility-tags.rst:23
msgid "'linux_x86_64', 'any'"
msgstr "'linux_x86_64' ・ 'any'"

#: ../source/specifications/platform-compatibility-tags.rst:25
msgid ""
"For example, the tag ``py27-none-any`` indicates compatibility with Python "
"2.7 (any Python 2.7 implementation) with no abi requirement, on any platform."
msgstr ""
"例えば、``py27-none-any`` というタグは、abi に対する要求なしに任意のプラット"
"フォームで Python 2.7 (任意の Python 2.7 実装) との互換性を持つことを意味しま"
"す。"

#: ../source/specifications/platform-compatibility-tags.rst:28
msgid ""
"The ``wheel`` built package format includes these tags in its filenames, of "
"the form ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl``. Other package formats may have their own conventions."
msgstr ""
"``wheel`` ビルド済みパッケージのフォーマットは、ファイル名の中にこのようなタ"
"グを ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl`` の形で包含しています。他のパッケージフォーマットにはそれ"
"ぞれ独自の慣習があるかもしれません。"

#: ../source/specifications/platform-compatibility-tags.rst:33
msgid "Any potential spaces in any tag should be replaced with ``_``."
msgstr ""
"どのようなタグであれ、その中に潜在的に含まれる空白文字は ``_`` で置換されるべ"
"きです。"

#: ../source/specifications/platform-compatibility-tags.rst:37
msgid "Python Tag"
msgstr "Python タグ"

#: ../source/specifications/platform-compatibility-tags.rst:39
msgid ""
"The Python tag indicates the implementation and version required by a "
"distribution.  Major implementations have abbreviated codes, initially:"
msgstr ""
"Python タグは、配布物が必要とする実装やバージョンを示します。主要な実装には短"
"縮系のコードがあって、当初は:"

#: ../source/specifications/platform-compatibility-tags.rst:42
msgid "py: Generic Python (does not require implementation-specific features)"
msgstr "py: 一般的な Python (実装に特有な機能を要求しません)"

#: ../source/specifications/platform-compatibility-tags.rst:43
msgid "cp: CPython"
msgstr "cp: CPython"

#: ../source/specifications/platform-compatibility-tags.rst:44
msgid "ip: IronPython"
msgstr "ip: IronPython"

#: ../source/specifications/platform-compatibility-tags.rst:45
msgid "pp: PyPy"
msgstr "pp: PyPy"

#: ../source/specifications/platform-compatibility-tags.rst:46
msgid "jy: Jython"
msgstr "jy: Jython"

#: ../source/specifications/platform-compatibility-tags.rst:48
msgid ""
"Other Python implementations should use :py:data:`sys.implementation.name "
"<sys.implementation>`."
msgstr ""
"他の Python 実装には :py:data:`sys.implementation.name <sys.implementation>` "
"を用いるべきです。"

#: ../source/specifications/platform-compatibility-tags.rst:50
msgid ""
"The version is ``py_version_nodot``.  CPython gets away with no dot, but if "
"one is needed the underscore ``_`` is used instead.  PyPy should probably "
"use its own versions here ``pp18``, ``pp19``."
msgstr ""
"バージョンは ``py_version_nodot`` です。 CPython は no dot にせずに済ませます"
"が、必要な場合には代わりにアンダースコア文字 ``_`` が使用されます。 PyPy は、"
"おそらく、ここに ``pp18`` や ``pp19`` といったそれ自身のバージョンを使いま"
"す。"

#: ../source/specifications/platform-compatibility-tags.rst:54
msgid ""
"The version can be just the major version ``2`` or ``3`` ``py2``, ``py3`` "
"for many pure-Python distributions."
msgstr ""
"多くの純 Python 配布物では、バージョンは ``2`` や ``3`` や ``py2`` ・ "
"``py3`` といったメジャーバージョンだけにしておくことができます。"

#: ../source/specifications/platform-compatibility-tags.rst:57
msgid ""
"Importantly, major-version-only tags like ``py2`` and ``py3`` are not "
"shorthand for ``py20`` and ``py30``.  Instead, these tags mean the packager "
"intentionally released a cross-version-compatible distribution."
msgstr ""
"重要なことは、 ``py2`` や ``py3`` のような major-version-only タグは "
"``py20`` や ``py30`` の短縮形であるわけではないということです。そうではなく"
"て、これらのタグは、パッケージ作成者がいくつものバージョンに互換性を持つ配布"
"物を意図的にリリースしたのです。"

#: ../source/specifications/platform-compatibility-tags.rst:61
msgid ""
"A single-source Python 2/3 compatible distribution can use the compound tag "
"``py2.py3``.  See `Compressed Tag Sets`_, below."
msgstr ""
"単一ソースで Python 2/3 に互換性を持つ配布物は、合成タグ ``py2.py3`` を用いる"
"ことができます。 後述の `タグの圧縮された組み合わせ <Compressed Tag Sets>`_ "
"を参照してください。"

#: ../source/specifications/platform-compatibility-tags.rst:66
msgid "ABI Tag"
msgstr "ABI タグ"

#: ../source/specifications/platform-compatibility-tags.rst:68
msgid ""
"The ABI tag indicates which Python ABI is required by any included extension "
"modules.  For implementation-specific ABIs, the implementation is "
"abbreviated in the same way as the Python Tag, e.g. ``cp33d`` would be the "
"CPython 3.3 ABI with debugging."
msgstr ""
"ABI タグは、いずれかの拡張モジュールによってどのような Python ABI が要求され"
"ているのかを示します。実装依存の ABI 群については、実装 (の名前) は、たとえ"
"ば ``cp33d`` がデバッグオプション付きの CPython 3.3 ABI のことを指すように、 "
"Python タグと同様のやり方で短縮したものを使います。"

#: ../source/specifications/platform-compatibility-tags.rst:73
msgid "The CPython stable ABI is ``abi3`` as in the shared library suffix."
msgstr ""
"CPython の安定版 ABI のことは、共有ライブラリの拡張子と同様に ``abi3`` と書き"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:75
msgid ""
"Implementations with a very unstable ABI may use the first 6 bytes (as 8 "
"base64-encoded characters) of the SHA-256 hash of their source code revision "
"and compiler flags, etc, but will probably not have a great need to "
"distribute binary distributions. Each implementation's community may decide "
"how to best use the ABI tag."
msgstr ""
"非常に不安定な ABI を持つ実装は、そのソースコードのリビジョンやコンパイラフラ"
"グその他の SHA-256 ハッシュ値の最初の６バイトを (BASE64にエンコードされた８文"
"字として) 用いても構いませんが、おそらくはバイナリ配布物を配布することには大"
"きな需要はないでしょう。それぞれの実装のコミュニティで ABI タグをどのように用"
"いるのが最適かを決定すればよいでしょう。"

#: ../source/specifications/platform-compatibility-tags.rst:83
msgid "Platform Tag"
msgstr "プラットフォームタグ"

#: ../source/specifications/platform-compatibility-tags.rst:86
msgid "Basic platform tags"
msgstr "基本的なプラットフォームタグ"

#: ../source/specifications/platform-compatibility-tags.rst:88
msgid ""
"In its simplest form, the platform tag is :py:func:`sysconfig."
"get_platform()` with all hyphens ``-`` and periods ``.`` replaced with "
"underscore ``_``. Until the removal of :ref:`distutils` in Python 3.12, this "
"was ``distutils.util.get_platform()``. For example:"
msgstr ""
"最も単純な形式では、プラットフォームタグは、 :py:func:`sysconfig."
"get_platform()` (の出力) のすべてのハイフン ``-`` と ピリオド ``.`` をアン"
"ダースコア ``_`` で置き換えたものです。 Python 3.12 における :ref:"
"`distutils` の削除があるまでは、これは ``distutils.util.get_platform()`` でし"
"た。例えば:"

#: ../source/specifications/platform-compatibility-tags.rst:93
msgid "win32"
msgstr "win32"

#: ../source/specifications/platform-compatibility-tags.rst:94
msgid "linux_i386"
msgstr "linux_i386"

#: ../source/specifications/platform-compatibility-tags.rst:95
msgid "linux_x86_64"
msgstr "linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:101
msgid "``manylinux``"
msgstr "``manylinux``"

#: ../source/specifications/platform-compatibility-tags.rst:103
msgid ""
"The simple scheme above is insufficient for public distribution of wheel "
"files to Linux platforms, due to the large ecosystem of Linux platforms and "
"subtle differences between them."
msgstr ""
"上記のような単純なスキームでは、Linux プラットフォーム向けに公開するための "
"wheel ファイルの配布物用としては不十分で、それは、 Linux プラットフォーム群が"
"巨大なエコシステムであって、プラットフォーム間に微妙な際が見られるためです。"

#: ../source/specifications/platform-compatibility-tags.rst:107
msgid ""
"Instead, for those platforms, the ``manylinux`` standard represents a common "
"subset of Linux platforms, and allows building wheels tagged with the "
"``manylinux`` platform tag which can be used across most common Linux "
"distributions."
msgstr ""
"代わりに、そのようなプラットフォーム向けには、 ``manylinux`` という標準が "
"Linux プラットフォームの共通のサブセットを体現していて、 ``manylinux`` プラッ"
"トフォームタグを付けて wheel をビルドすることで一般的な Linux のディストリ"
"ビューションのほとんどで使えるようにすることができます。"

#: ../source/specifications/platform-compatibility-tags.rst:112
#, fuzzy
#| msgid ""
#| "The current standard is the future-proof ``manylinux_x_y`` standard. It "
#| "defines tags of the form ``manylinux_x_y_arch``, where ``x`` and ``y`` "
#| "are glibc major and minor versions supported (e.g. ``manylinux_2_24_xxx`` "
#| "should work on any distro using glibc 2.24+), and ``arch`` is the "
#| "architecture, matching the value of :py:func:`sysconfig.get_platform()` "
#| "on the system as in the \"simple\" form above."
msgid ""
"The current standard is the future-proof :file:`manylinux_{x}_{y}` standard. "
"It defines tags of the form :file:`manylinux_{x}_{y}_{arch}`, where ``x`` "
"and ``y`` are glibc major and minor versions supported (e.g. "
"``manylinux_2_24_xxx`` should work on any distro using glibc 2.24+), and "
"``arch`` is the architecture, matching the value of :py:func:`sysconfig."
"get_platform()` on the system as in the \"simple\" form above."
msgstr ""
"現在の標準は、将来性が約束された ``manylinux_x_y`` 標準です。 "
"``manylinux_x_y_arch`` の形でタグを定義していて、 ``x`` と ``y`` には glibc "
"のメジャーバージョンとマイナーバージョンがサポート (例えば "
"``manylinux_2_24_xxx`` であれば、 glibc 2.24+ を使うディストロならどれでも動"
"作するはず) されており、 ``arch`` はアーキテクチャで、上記の \"simple\" 形式"
"での :py:func:`sysconfig.get_platform()` の値に合致するものです。"

#: ../source/specifications/platform-compatibility-tags.rst:118
msgid ""
"The following older tags are still supported for backward compatibility:"
msgstr ""
"この後に述べる古めのタグ群は、後方互換性のために今もサポートされています:"

#: ../source/specifications/platform-compatibility-tags.rst:120
msgid ""
"``manylinux1`` supports glibc 2.5 on ``x86_64`` and ``i686`` architectures."
msgstr ""
"``manylinux1`` は、 ``x86_64`` と ``i686`` のアーキテクチャで libc 2.5 をサ"
"ポートしています。"

#: ../source/specifications/platform-compatibility-tags.rst:121
msgid "``manylinux2010`` supports glibc 2.12 on ``x86_64`` and ``i686``."
msgstr ""
"``manylinux2010`` は、 ``x86_64`` と ``i686`` 上で libc 2.12 をサポートしてい"
"ます。"

#: ../source/specifications/platform-compatibility-tags.rst:122
msgid ""
"``manylinux2014`` supports glibc 2.17 on ``x86_64``, ``i686``, ``aarch64``, "
"``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``."
msgstr ""
"``manylinux2014`` は、 ``x86_64`` ・ ``i686`` ・ ``aarch64`` ・ ``armv7l`` "
"・ ``ppc64`` ・ ``ppc64le`` ・ ``s390x`` 上で glibc 2.17 をサポートしていま"
"す。"

#: ../source/specifications/platform-compatibility-tags.rst:125
msgid ""
"In general, distributions built for older versions of the specification are "
"forwards-compatible (meaning that ``manylinux1`` distributions should "
"continue to work on modern systems) but not backwards-compatible (meaning "
"that ``manylinux2010`` distributions are not expected to work on platforms "
"that existed before 2010)."
msgstr ""
"一般に、古めのバージョンの仕様向けにビルドされた配布物には前方互換性がありま"
"す (というのは、 ``manylinux1`` の配布物はより新しいシステムでも同様に動作す"
"るはずだということです) が、後方互換性はありません (``manylinux2010`` の配布"
"物が 2010 年よりも前に存在していたプラットフォームで動作するとは想定されてい"
"ないということです) 。"

#: ../source/specifications/platform-compatibility-tags.rst:131
msgid ""
"Package maintainers should attempt to target the most compatible "
"specification possible, with the caveat that the provided build environment "
"for ``manylinux1`` and ``manylinux2010`` have reached end-of-life meaning "
"that these images will no longer receive security updates."
msgstr ""
"``manylinux1`` と ``manylinux2010`` は既に end-of-life に達していて、提供され"
"ているビルド環境にはもはやセキュリティアップデートが提供されることはないであ"
"ろうという警告されていることもあって、パッケージ保守者は最も互換性のある仕様"
"をターゲットにするように努力するべきです。"

#: ../source/specifications/platform-compatibility-tags.rst:136
msgid ""
"The following table shows the minimum versions of relevant projects to "
"support the various ``manylinux`` standards:"
msgstr ""
"適切なプロジェクトがサポートするさまざまな ``manylinux`` 標準の最低限のバー"
"ジョンを次に掲げる表に示します:"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "Tool"
msgstr "ツール"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux1``"
msgstr "``manylinux1``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux2010``"
msgstr "``manylinux2010``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux2014``"
msgstr "``manylinux2014``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux_x_y``"
msgstr "``manylinux_x_y``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=8.1.0``"
msgstr "``>=8.1.0``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=19.0``"
msgstr "``>=19.0``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=19.3``"
msgstr "``>=19.3``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=20.3``"
msgstr "``>=20.3``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "auditwheel"
msgstr "auditwheel"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=1.0.0``"
msgstr "``>=1.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=2.0.0``"
msgstr "``>=2.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=3.0.0``"
msgstr "``>=3.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=3.3.0`` [#]_"
msgstr "``>=3.3.0`` [#]_"

#: ../source/specifications/platform-compatibility-tags.rst:146
msgid "Only support for ``manylinux_2_24`` has been added in auditwheel 3.3.0"
msgstr ""
"audit wheel 3.3.0 では ``manylinux_2_24`` へのサポートだけが追加されました"

#: ../source/specifications/platform-compatibility-tags.rst:150
msgid "``musllinux``"
msgstr "``musllinux``"

#: ../source/specifications/platform-compatibility-tags.rst:152
#, fuzzy
#| msgid ""
#| "The ``musllinux`` family of tags is similar to ``manylinux``, but for "
#| "Linux platforms that use the musl_ libc rather than glibc (a prime "
#| "example being Alpine Linux). The schema is ``musllinux_x_y_arch``, "
#| "supporting musl ``x.y`` and higher on the architecture ``arch``."
msgid ""
"The ``musllinux`` family of tags is similar to ``manylinux``, but for Linux "
"platforms that use the musl_ libc rather than glibc (a prime example being "
"Alpine Linux). The schema is :file:`musllinux_{x}_{y}_{arch}`, supporting "
"musl ``x.y`` and higher on the architecture ``arch``."
msgstr ""
"``musllinux`` ファミリーに含まれるタグは ``manylinux`` に似ていますが、 "
"glibc ではなくて musl_libc を使う Linux プラットフォーム (最重要な例としては "
"Alpine Linux) 向けのものです。文法としては ``musllinux_x_y_arch`` で、 musl "
"``x.y`` およびそれ以降で ``arch`` なるアーキテクチャをサポートします。"

#: ../source/specifications/platform-compatibility-tags.rst:157
msgid ""
"The musl version values can be obtained by executing the musl libc shared "
"library the Python interpreter is currently running on, and parsing the "
"output:"
msgstr ""
"musl のバージョンの値は、 Python インタープリタが現在その上で走行している "
"musl libc 共有ライブラリを実行し、その出力を字句解析することで得られます:"

#: ../source/specifications/platform-compatibility-tags.rst:188
msgid ""
"There are currently two possible ways to find the musl library’s location "
"that a Python interpreter is running on, either with the system ldd_ "
"command, or by parsing the ``PT_INTERP`` section’s value from the "
"executable’s ELF_ header."
msgstr ""
"Python インタープリタがその上で走行している musl ライブラリの場所を見つけるた"
"めには、現在、二つの可能なやり方があり、ひとつはシステムの ldd_ コマンドによ"
"るもの、もうひとつは 実行ファイルの ELF_ ヘッダから ``PT_INTERP`` セクション"
"の値をパースする方法です。"

#: ../source/specifications/platform-compatibility-tags.rst:197
msgid ""
"macOS uses the ``macosx`` family of tags (the ``x`` suffix is a historical "
"artefact of Apple's official macOS naming scheme). The schema for "
"compatibility tags is :file:`macosx_{x}_{y}_{arch}`, indicating that the "
"wheel is compatible with macOS ``x.y`` or later on the architecture ``arch``."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:202
msgid ""
"The values of ``x`` and ``y`` correspond to the major and minor version "
"number of the macOS release, respectively. They must both be positive "
"integers, with the ``x`` value being ``>= 10``. The version number always "
"includes a major *and* minor version, even if Apple's official version "
"numbering only refers to the major value. For example, ``macosx_11_0_arm64`` "
"indicates compatibility with macOS 11 or later."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:209
msgid ""
"macOS binaries can be compiled for a single architecture, or can include "
"support for multiple architectures in the same binary (sometimes called "
"\"fat\" binaries). To indicate support for a single architecture, the value "
"of ``arch`` must match the value of :py:func:`platform.machine()` on the "
"system. To indicate support multiple architectures, the ``arch`` tag should "
"be an identifier from the following list that describes the set of supported "
"architectures:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:217
msgid "``arch``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:217
msgid "Architectures supported"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:219
msgid "``universal2``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:219
#, fuzzy
#| msgid "``x86_64``"
msgid "``arm64``, ``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:220
msgid "``universal``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:220
msgid "``i386``, ``ppc``, ``ppc64``, ``x86_64``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:221
#, fuzzy
#| msgid "``install``"
msgid "``intel``"
msgstr "``install``"

#: ../source/specifications/platform-compatibility-tags.rst:221
#, fuzzy
#| msgid "``x86_64``"
msgid "``i386``, ``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:222
msgid "``fat``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:222
#, fuzzy
#| msgid "``3.4``, ``2.7``"
msgid "``i386``, ``ppc``"
msgstr "``3.4``, ``2.7``"

#: ../source/specifications/platform-compatibility-tags.rst:223
msgid "``fat3``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:223
msgid "``i386``, ``ppc``, ``x86_64``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:224
#, fuzzy
#| msgid "``x86_64``"
msgid "``fat64``"
msgstr "``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:224
#, fuzzy
#| msgid "``x86_64``"
msgid "``ppc64``, ``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:227
msgid ""
"The minimum supported macOS version may also be constrained by architecture. "
"For example, macOS 11 (Big Sur) was the first release to support arm64. "
"These additional constraints are enforced transparently by the macOS "
"compilation toolchain when building binaries that support multiple "
"architectures."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:235
msgid "Android"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:237
msgid ""
"Android uses the schema :file:`android_{apilevel}_{abi}`, indicating "
"compatibility with the given Android API level or later, on the given ABI. "
"For example, ``android_27_arm64_v8a`` indicates support for API level 27 or "
"later, on ``arm64_v8a`` devices. Android makes no distinction between "
"physical devices and emulated devices."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:243
msgid ""
"The API level should be a positive integer. This is *not* the same thing as "
"the user-facing Android version. For example, the release known as Android "
"12 (code named \"Snow Cone\") uses API level 31 or 32, depending on the "
"specific Android version in use. Android's release documentation contains "
"the `full list of Android versions and their corresponding API levels "
"<https://developer.android.com/tools/releases/platforms>`__."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:250
msgid ""
"There are 4 `supported ABIs <https://developer.android.com/ndk/guides/"
"abis>`__. Normalized according to the rules above, they are:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:253
msgid "``armeabi_v7a``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:254
msgid "``arm64_v8a``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:255
#, fuzzy
#| msgid "``x86_64``"
msgid "``x86``"
msgstr "``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:258
msgid ""
"Virtually all current physical devices use one of the ARM architectures. "
"``x86`` and ``x86_64`` are supported for use in the emulator. ``x86`` has "
"not been supported as a development platform since 2020, and no new emulator "
"images have been released since then."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:266
msgid "iOS"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:268
msgid ""
"iOS uses the schema :file:`ios_{x}_{y}_{arch}_{sdk}`, indicating "
"compatibility with iOS ``x.y`` or later, on the ``arch`` architecture, using "
"the ``sdk`` SDK."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:271
msgid ""
"The value of ``x`` and ``y`` correspond to the major and minor version "
"number of the iOS release, respectively. They must both be positive "
"integers. The version number always includes a major *and* minor version, "
"even if Apple's official version numbering only refers to the major value. "
"For example, a ``ios_13_0_arm64_iphonesimulator`` indicates compatibility "
"with iOS 13 or later."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:277
msgid ""
"The value of ``arch`` must match the value of :py:func:`platform.machine()` "
"on the system."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:280
msgid ""
"The value of ``sdk`` must be either ``iphoneos`` (for physical devices), or "
"``iphonesimulator`` (for device simulators). These SDKs have the same API "
"surface, but are incompatible at the binary level, even if they are running "
"on the same CPU architecture. Code compiled for an arm64 simulator will not "
"run on an arm64 device."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:286
msgid ""
"The combination of :file:`{arch}_{sdk}` is referred to as the \"multiarch\". "
"There are three possible values for multiarch:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:289
msgid ""
"``arm64_iphoneos``, for physical iPhone/iPad devices. This includes every "
"iOS device manufactured since ~2015;"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:291
msgid ""
"``arm64_iphonesimulator``, for simulators running on Apple Silicon macOS "
"hardware; and"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:293
msgid "``x86_64_iphonesimulator``, for simulators running on x86_64 hardware."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:296
msgid "Use"
msgstr "使い方"

#: ../source/specifications/platform-compatibility-tags.rst:298
msgid ""
"The tags are used by installers to decide which built distribution (if any) "
"to download from a list of potential built distributions. The installer "
"maintains a list of (pyver, abi, arch) tuples that it will support.  If the "
"built distribution's tag is ``in`` the list, then it can be installed."
msgstr ""
"タグ類は、 (もしダウンロードが必要なら) 選択可能なビルド済配布物のリストの中"
"からどれをダウンロードするのかをインストーラが決定するために使われます。イン"
"ストーラは、自身がサポートする (pyver, abi, arch) タプルのリストを維持管理し"
"ています。ビルド済配布物のタグがリストに含まれて (``in`` ) いれば、それをイン"
"ストールすることができます。"

#: ../source/specifications/platform-compatibility-tags.rst:304
msgid ""
"It is recommended that installers try to choose the most feature complete "
"built distribution available (the one most specific to the installation "
"environment) by default before falling back to pure Python versions "
"published for older Python releases. Installers are also recommended to "
"provide a way to configure and re-order the list of allowed compatibility "
"tags; for example, a user might accept only the ``*-none-any`` tags to only "
"download built packages that advertise themselves as being pure Python."
msgstr ""
"古い Python リリース向けに発行された純 Python のバージョンにフォールバックす"
"るよりも前に、利用できる中で最も機能を網羅したビルド済配布物 (インストールす"
"る先の環境に最も適したもの) をインストーラがデフォルトで選択することが推奨さ"
"れています。インストーラは、また、受け入れ可能な互換性タグのリストを設定変更"
"したり順序を入れ替えたりする方法を持つことが推奨されています; 例えば、ユーザ"
"は、純 Python であると広報しているビルド済みパッケージだけをダウンロードする"
"ために、 ``*-none-any`` タグだけを受容しても構いません。"

#: ../source/specifications/platform-compatibility-tags.rst:312
msgid ""
"Another desirable installer feature might be to include \"re-compile from "
"source if possible\" as more preferable than some of the compatible but "
"legacy pre-built options."
msgstr ""
"互換性はあるがもはや古くなってしまったビルド済みのものを使う選択肢よりもより"
"好ましいという点で、インストーラに望まれるもうひとつの機能は \"可能ならソース"
"コードから再コンパイルする\" でしょう。"

#: ../source/specifications/platform-compatibility-tags.rst:316
msgid ""
"This example list is for an installer running under CPython 3.3 on a "
"linux_x86_64 system. It is in order from most-preferred (a distribution with "
"a compiled extension module, built for the current version of Python) to "
"least-preferred (a pure-Python distribution built with an older version of "
"Python):"
msgstr ""
"この事例集は、インストーラを linux_x86_64 システム上の CPython 3.3 のもとで走"
"らせるためのものです。最も好ましいもの (最新版の Python 向けにビルドされたコ"
"ンパイル済みの拡張モジュールが付属している配布物) から、最も好ましくはないも"
"の (古いバージョンの Python でビルドされた純 Python の配布物) へ、という順序"
"で並んでいます:"

#: ../source/specifications/platform-compatibility-tags.rst:322
msgid "cp33-cp33m-linux_x86_64"
msgstr "cp33-cp33m-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:323
msgid "cp33-abi3-linux_x86_64"
msgstr "cp33-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:324
msgid "cp3-abi3-linux_x86_64"
msgstr "cp3-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:325
msgid "cp33-none-linux_x86_64*"
msgstr "cp33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:326
msgid "cp3-none-linux_x86_64*"
msgstr "cp3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:327
msgid "py33-none-linux_x86_64*"
msgstr "py33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:328
msgid "py3-none-linux_x86_64*"
msgstr "py3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:329
msgid "cp33-none-any"
msgstr "cp33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:330
msgid "cp3-none-any"
msgstr "cp3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:331
msgid "py33-none-any"
msgstr "py33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:332
msgid "py3-none-any"
msgstr "py3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:333
msgid "py32-none-any"
msgstr "py32-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:334
msgid "py31-none-any"
msgstr "py31-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:335
msgid "py30-none-any"
msgstr "py30-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:337
msgid ""
"Built distributions may be platform specific for reasons other than C "
"extensions, such as by including a native executable invoked as a subprocess."
msgstr ""
"ビルド済み配布物は、サブプロセスとして起動されるネーティブの実行可能ファイル"
"を含んでいるなどのようなC 言語拡張以外の理由によって、特定のプラットフォーム"
"向けであっても構いません。"

#: ../source/specifications/platform-compatibility-tags.rst:341
msgid ""
"Sometimes there will be more than one supported built distribution for a "
"particular version of a package.  For example, a packager could release a "
"package tagged ``cp33-abi3-linux_x86_64`` that contains an optional C "
"extension and the same distribution tagged ``py3-none-any`` that does not. "
"The index of the tag in the supported tags list breaks the tie, and the "
"package with the C extension is installed in preference to the package "
"without because that tag appears first in the list."
msgstr ""
"時々、あるパッケージの特定のバージョンとして複数のビルド済み配布物が存在する"
"ことがあるでしょう。例えば、パッケージ製作者が、 ``cp33-abi3-linux_x86_64`` "
"というタグを付けて追加的な C 言語拡張を含むパッケージをリリースし、そのような"
"ものを含まない同じ配布物に ``py3-none-any`` というタグを付けてリリースするよ"
"うな場合です。(このような場合でも) サポートされるタグのリストで先に出現する方"
"を優先するという理由によって C 言語拡張付きのパッケージがそうでないパッケージ"
"よりも選好されてインストールされるという形で、インデックスによってどちらかに"
"決めることができます。"

#: ../source/specifications/platform-compatibility-tags.rst:350
msgid "Compressed Tag Sets"
msgstr "圧縮されたタグのセット"

#: ../source/specifications/platform-compatibility-tags.rst:352
#, fuzzy
#| msgid ""
#| "To allow for compact filenames of bdists that work with more than one "
#| "compatibility tag triple, each tag in a filename can instead be a '.'-"
#| "separated, sorted, set of tags.  For example, pip, a pure-Python package "
#| "that is written to run under Python 2 and 3 with the same source code, "
#| "could distribute a bdist with the tag ``py2.py3-none-any``. The full list "
#| "of simple tags is::"
msgid ""
"To allow for compact filenames of bdists that work with more than one "
"compatibility tag triple, each tag in a filename can instead be a '.'-"
"separated, sorted, collection of tags.  For example, pip, a pure-Python "
"package that is written to run under Python 2 and 3 with the same source "
"code, could distribute a bdist with the tag ``py2.py3-none-any``. The full "
"list of simple tags is::"
msgstr ""
"bdists のコンパクトなファイル名で、互換性のあるタグトリプルが複数ある場合にも"
"きちんと動作するものを許容するためには、代わりにファイル名の中のそれぞれのタ"
"グが '.' で分割可能でありソート可能であるような一連のタグになっていることが可"
"能です。例えば、 pip は純 Python のパッケージで、同一のソースコードで Python "
"2 でも 3 でも動作するように書かれていますが、これは ``py2.py3-none-any`` とい"
"うタグを付けた bdist として配布することができるでしょう。単純なタグの完全なリ"
"ストは::"

#: ../source/specifications/platform-compatibility-tags.rst:364
msgid ""
"A bdist format that implements this scheme should include the expanded tags "
"in bdist-specific metadata.  This compression scheme can generate large "
"numbers of unsupported tags and \"impossible\" tags that are supported by no "
"Python implementation e.g. \"cp33-cp31u-win64\", so use it sparingly."
msgstr ""
"このスキームを実装する bdist フォーマットは、拡張されたタグ群を bdist に特有"
"のメタデータの中に含んでいるべきです。この圧縮スキームは、サポートされていな"
"いタグや例えば \"cp33-cp31u-win64\" のようにいかなる Python 実装においてもサ"
"ポートされていない \"不可能な\" タグを大量に生成すると思われるので、控えめに"
"使うようにしてください。"

#: ../source/specifications/platform-compatibility-tags.rst:377
msgid "What tags are used by default?"
msgstr "デフォルトではどんなタグが使われますか？"

#: ../source/specifications/platform-compatibility-tags.rst:373
msgid ""
"Tools should use the most-preferred architecture dependent tag e.g. ``cp33-"
"cp33m-win32`` or the most-preferred pure python tag e.g. ``py33-none-any`` "
"by default.  If the packager overrides the default it indicates that they "
"intended to provide cross-Python compatibility."
msgstr ""
"ツール類は、 ``cp33-cp33m-win32`` のようなアーキテクチャへの依存を示すタグや "
"``py33-none-any`` のような純 Python タグの中で最も好ましいものをデフォルトで"
"採用するべきです。パッケージ製作者がデフォルトをオーバーライドしていたとすれ"
"ば、それは彼らが異なる Python 間での互換性を提供しようという意図があったこと"
"を示しています。"

#: ../source/specifications/platform-compatibility-tags.rst:387
msgid ""
"What tag do I use if my distribution uses a feature exclusive to the newest "
"version of Python?"
msgstr ""
"自分の配布物が最新版の Python と相容れない機能を使っているとしたら、どんなタ"
"グを使いますか？"

#: ../source/specifications/platform-compatibility-tags.rst:380
msgid ""
"Compatibility tags aid installers in selecting the *most compatible* build "
"of a *single version* of a distribution. For example, when there is no "
"Python 3.3 compatible build of ``beaglevote-1.2.0`` (it uses a Python 3.4 "
"exclusive feature) it may still use the ``py3-none-any`` tag instead of the "
"``py34-none-any`` tag. A Python 3.3 user must combine other qualifiers, such "
"as a requirement for the older release ``beaglevote-1.1.0`` that does not "
"use the new feature, to get a compatible build."
msgstr ""
"互換性タグは、インストーラがある配布物の *単一のバージョン* の *最も互換性が"
"ある* ビルドを選択する際に助けとなります。例えば、 (Python 3.4 に特有の機能を"
"使っている) ``beaglevote-1.2.0``には Python 3.3 と互換性を持つビルドがひとつ"
"もないという場合でも、 ``py34-none-any`` タグの代わりに ``py3-none-any`` タグ"
"を使っても構いません。 Python 3.3 のユーザが互換性のあるビルドを得るために"
"は、新しい機能を使う前のリリースである ``beaglevote-1.1.0`` 用の要求 "
"(requirement) などを他の指定子を組み合わせなければなりません。"

#: ../source/specifications/platform-compatibility-tags.rst:392
msgid "Why isn't there a ``.`` in the Python version number?"
msgstr "Python のバージョン番号に ``.`` がないのはなぜですか?"

#: ../source/specifications/platform-compatibility-tags.rst:390
msgid ""
"CPython has lasted 20+ years without a 3-digit major release. This should "
"continue for some time.  Other implementations may use _ as a delimiter, "
"since both - and . delimit the surrounding filename."
msgstr ""
"CPython は、数字３個のメジャーリリースなしで 20 年以上にわたって存続してきま"
"した。これはしばらくの間は続くに違いありません。 - や . が周辺のファイル名を"
"区切る役割を果たしているので、他の実装では _ を区切り子として使っても構いませ"
"ん。"

#: ../source/specifications/platform-compatibility-tags.rst:398
msgid ""
"Why normalise hyphens and other non-alphanumeric characters to underscores?"
msgstr ""
"ハイフンやその他の英数字以外の文字をアンダースコアに正規化するのはなぜですか?"

#: ../source/specifications/platform-compatibility-tags.rst:395
msgid ""
"To avoid conflicting with the ``.`` and ``-`` characters that separate "
"components of the filename, and for better compatibility with the widest "
"range of filesystem limitations for filenames (including being usable in URL "
"paths without quoting)."
msgstr ""
"ファイル名の部分部分を区分けする ``.`` 文字や ``-`` 文字との干渉を避けるため"
"に、かつ、 (クォートすることなく URL パス内で使用可能であることを含む) 数多あ"
"るファイルシステムのファイル名に対する制限事項との間のより良い互換性のため"
"に。"

#: ../source/specifications/platform-compatibility-tags.rst:407
msgid "Why not use special character <X> rather than ``.`` or ``-``?"
msgstr "何故、 ``.`` や ``-`` の代わりに特殊な文字 <X> を使わないのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:401
msgid ""
"Either because that character is inconvenient or potentially confusing in "
"some contexts (for example, ``+`` must be quoted in URLs, ``~`` is used to "
"denote the user's home directory in POSIX), or because the advantages "
"weren't sufficiently compelling to justify changing the existing reference "
"implementation for the wheel format defined in :pep:`427` (for example, "
"using ``,`` rather than ``.`` to separate components in a compressed tag)."
msgstr ""
"それは、その文字が不便であるかコンテクストによっては潜在的に混乱を招きやすい "
"(例えば ``+`` は URL 内ではクォートしなければなりませんし、 ``~`` は POSIX で"
"ユーザのホームディレクトリを示すために使われます) から、あるいは、 :pep:"
"`427` で定義された wheel フォーマットを参照して作成された既存の参照実装を変更"
"すること (例えば、圧縮タグで部分部分を分割するのに ``.`` ではなく ``,`` を使"
"うようにすること) を正当化するに足りるだけのアドバンテージがないから、のいず"
"れかです。"

#: ../source/specifications/platform-compatibility-tags.rst:412
msgid "Who will maintain the registry of abbreviated implementations?"
msgstr "誰が実装に関する短縮形のレジストリの維持管理をしているのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:410
msgid ""
"New two-letter abbreviations can be requested on the python-dev mailing "
"list.  As a rule of thumb, abbreviations are reserved for the current 4 most "
"prominent implementations."
msgstr ""
"python-dev メーリングリストで要求することで、新しい２文字省略形の割り当てを受"
"けることができるでしょう。経験上は、その時点で最も卓越した４個の実装のために"
"省略形が予約されています。"

#: ../source/specifications/platform-compatibility-tags.rst:417
msgid "Does the compatibility tag go into METADATA or PKG-INFO?"
msgstr "互換性タグは METADATA に含まれるのか、あるいは PKG-INFO か？"

#: ../source/specifications/platform-compatibility-tags.rst:415
msgid ""
"No.  The compatibility tag is part of the built distribution's metadata.  "
"METADATA / PKG-INFO should be valid for an entire distribution, not a single "
"build of that distribution."
msgstr ""
"否。互換性タグはビルド済み配布物のメタデータの一部です。METADATA / PKG-INFO "
"は、その配布物の単一のビルドではなく配布物の全体にとって正当なものであるべき"
"です。"

#: ../source/specifications/platform-compatibility-tags.rst:423
msgid "Why didn't you mention my favorite Python implementation?"
msgstr "どうして私のお気に入りの Python 実装について言及しなかったの？"

#: ../source/specifications/platform-compatibility-tags.rst:420
msgid ""
"The abbreviated tags facilitate sharing compiled Python code in a public "
"index.  Your Python implementation can use this specification too, but with "
"longer tags. Recall that all \"pure Python\" built distributions just use "
"``py``."
msgstr ""
"省略形タグは、コンパイル済みの Python コードを公開のインデックスでシェアする"
"ことを促進します。あなたの Python 実装においてもこの仕様を使うことができます"
"が、しかしもっと長いタグになってしまうことでしょう。すべての \"純 Python\" な"
"ビルド済み配布物が単に ``py`` を使うだけであることを思い出してください。"

#: ../source/specifications/platform-compatibility-tags.rst:431
msgid ""
"Why is the ABI tag (the second tag) sometimes \"none\" in the reference "
"implementation?"
msgstr ""
"どうして参照実装における ABI タグ (第２のタグ) は時々 \"none\" なのですか？"

#: ../source/specifications/platform-compatibility-tags.rst:426
msgid ""
"Since Python 2 does not have an easy way to get to the SOABI (the concept "
"comes from newer versions of Python 3) the reference implementation at the "
"time of writing guesses \"none\".  Ideally it would detect \"py27(d|m|u)\" "
"analogous to newer versions of Python, but in the meantime \"none\" is a "
"good enough way to say \"don't know\"."
msgstr ""
"Python 2 では SOABI (より新しい版の Python 3 から来た概念) を作成する簡単な方"
"法がないので、本稿執筆時点の参照実装は \"none\" なのです。理想的には、それは"
"もっと新しい版の Python に相似の \"py27(d|m|u)\" を検出するようになるでしょう"
"が、それまでの間は \"知られていない\" ことを示すのに \"none\" とすることが必"
"要十分な方法なのです。"

#: ../source/specifications/platform-compatibility-tags.rst:436
msgid ""
"February 2013: The original version of this specification was approved "
"through :pep:`425`."
msgstr ""
"2013年2月: :pep:`425` を通じてこの仕様の元々のバージョンが承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:438
msgid "January 2016: The ``manylinux1`` tag was approved through :pep:`513`."
msgstr "2016年1月: :pep:`513` を通じて ``manylinux1`` タグが承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:439
msgid "April 2018: The ``manylinux2010`` tag was approved through :pep:`571`."
msgstr ""
"2018年4月: :pep:`571` を通じて ``manylinux2010`` タグが承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:440
msgid "July 2019: The ``manylinux2014`` tag was approved through :pep:`599`."
msgstr ""
"2019年7月: :pep:`599` を通じて ``manylinux2014`` タグが承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:441
msgid ""
"November 2019: The ``manylinux_x_y`` perennial tag was approved through :pep:"
"`600`."
msgstr ""
"2019年11月: :pep:`600` を通じて多年性の ``manylinux_x_y`` タグが承認されまし"
"た。"

#: ../source/specifications/platform-compatibility-tags.rst:443
msgid "April 2021: The ``musllinux_x_y`` tag was approved through :pep:`656`."
msgstr ""
"2021年4月: :pep:`656` を通じて ``musllinux_x_y`` タグが承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:444
#, fuzzy
#| msgid "November 2015: This specification was approved through :pep:`508`."
msgid "December 2023: The tags for iOS were approved through :pep:`730`."
msgstr "2015年11月: :pep:`508` を通じてこの仕様が承認されました。"

#: ../source/specifications/platform-compatibility-tags.rst:445
#, fuzzy
#| msgid "March 2020: This specification was approved through :pep:`610`."
msgid "March 2024: The tags for Android were approved through :pep:`738`."
msgstr "2020年3月: :pep:`610` を通じてこの仕様が承認されました。"

#: ../source/specifications/project-status-markers.rst:5
#, fuzzy
#| msgid "Project Summaries"
msgid "Project Status Markers"
msgstr "プロジェクト概要"

#: ../source/specifications/project-status-markers.rst:9
#, fuzzy
#| msgid "This specification was originally defined in :pep:`740`."
msgid "This specification was originally defined in :pep:`792`."
msgstr "この仕様は、元々は :pep:`740` で定義されました。"

#: ../source/specifications/project-status-markers.rst:14
msgid ""
":pep:`792` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`HTML - "
"Project Detail <simple-repository-html-project-detail>` and :ref:`JSON - "
"Project Detail <simple-repository-json-project-detail>`."
msgstr ""

#: ../source/specifications/project-status-markers.rst:22
msgid ""
"A project always has exactly one status. If no status is explicitly noted, "
"then the project is considered to be in the ``active`` state."
msgstr ""

#: ../source/specifications/project-status-markers.rst:25
msgid ""
"Indices **MAY** implement any subset of the status markers specified, as "
"applicable to their needs."
msgstr ""

#: ../source/specifications/project-status-markers.rst:28
msgid ""
"This standard does not prescribe *which* principals (i.e. project "
"maintainers, index administrators, etc.) are allowed to set and unset which "
"statuses."
msgstr ""

#: ../source/specifications/project-status-markers.rst:32
msgid "``active``"
msgstr ""

#: ../source/specifications/project-status-markers.rst:34
msgid ""
"Description: The project is active. This is the default status for a project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:36
#: ../source/specifications/project-status-markers.rst:49
#: ../source/specifications/project-status-markers.rst:65
#: ../source/specifications/project-status-markers.rst:83
msgid "Index semantics:"
msgstr ""

#: ../source/specifications/project-status-markers.rst:38
msgid ""
"The index hosting the project **MUST** allow uploads of new distributions to "
"the project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:40
#: ../source/specifications/project-status-markers.rst:53
msgid ""
"The index **MUST** offer existing distributions of the project for download."
msgstr ""

#: ../source/specifications/project-status-markers.rst:42
#, fuzzy
#| msgid "Installation"
msgid "Installer semantics: none."
msgstr "インストール"

#: ../source/specifications/project-status-markers.rst:45
#, fuzzy
#| msgid "``packages``"
msgid "``archived``"
msgstr "``packages``"

#: ../source/specifications/project-status-markers.rst:47
msgid "Description: The project does not expect to be updated in the future."
msgstr ""

#: ../source/specifications/project-status-markers.rst:51
#: ../source/specifications/project-status-markers.rst:67
msgid ""
"The index hosting the project **MUST NOT** allow uploads of new "
"distributions to the project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:55
#: ../source/specifications/project-status-markers.rst:71
#: ../source/specifications/project-status-markers.rst:87
#, fuzzy
#| msgid "Installers"
msgid "Installer semantics:"
msgstr "インストーラ類"

#: ../source/specifications/project-status-markers.rst:57
msgid "Installers **MAY** produce warnings about a project's archival."
msgstr ""

#: ../source/specifications/project-status-markers.rst:60
msgid "``quarantined``"
msgstr ""

#: ../source/specifications/project-status-markers.rst:62
msgid ""
"Description: The project is considered generally unsafe for use, e.g. due to "
"malware."
msgstr ""

#: ../source/specifications/project-status-markers.rst:69
msgid ""
"The index **MUST NOT** offer any distributions of the project for download."
msgstr ""

#: ../source/specifications/project-status-markers.rst:73
msgid ""
"Installers **MAY** produce warnings about a project's quarantine, although "
"doing so is effectively moot (as the index will not offer any distributions "
"for installation)."
msgstr ""

#: ../source/specifications/project-status-markers.rst:78
#, fuzzy
#| msgid "Deprecated"
msgid "``deprecated``"
msgstr "非推奨"

#: ../source/specifications/project-status-markers.rst:80
msgid ""
"Description: The project is considered obsolete, and may have been "
"superseded by another project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:85
msgid "This status shares the same semantics as ``active``."
msgstr ""

#: ../source/specifications/project-status-markers.rst:89
msgid "Installers **MAY** produce warnings about a project's deprecation."
msgstr ""

#: ../source/specifications/pylock-toml.rst:6
#, fuzzy
#| msgid "``pyproject.toml`` specification"
msgid "``pylock.toml`` Specification"
msgstr "``pyproject.toml`` の仕様"

#: ../source/specifications/pylock-toml.rst:8
msgid ""
"The ``pylock.toml`` file format is for specifying dependencies to enable "
"reproducible installation in a Python environment."
msgstr ""

#: ../source/specifications/pylock-toml.rst:11
#, fuzzy
#| msgid ""
#| "This specification was originally defined in :pep:`518` and :pep:`621`."
msgid "This specification was originally defined in :pep:`751`."
msgstr "この仕様は、元々は :pep:`518` 及び :pep:`621` で定義されました。"

#: ../source/specifications/pylock-toml.rst:16
#, fuzzy
#| msgid "File Format"
msgid "File Name"
msgstr "ファイルフォーマット"

#: ../source/specifications/pylock-toml.rst:18
msgid ""
"A lock file MUST be named :file:`pylock.toml` or match the regular "
"expression ``r\"^pylock\\.([^.]+)\\.toml$\"`` if a name for the lock file is "
"desired or if multiple lock files exist (i.e. the regular expression "
"``r\"^pylock\\.([^.]+\\.)?toml$\"`` for any file name). The prefix and "
"suffix of a named file MUST be lowercase when possible, for easy detection "
"and removal, e.g.:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:30
msgid ""
"The expectation is that services that automatically install from lock files "
"will search for:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:33
msgid "The lock file with the service's name and doing the default install"
msgstr ""

#: ../source/specifications/pylock-toml.rst:34
msgid ""
"A multi-use :file:`pylock.toml` with a dependency group with the name of the "
"service"
msgstr ""

#: ../source/specifications/pylock-toml.rst:35
msgid "The default install of :file:`pylock.toml`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:37
msgid ""
"E.g. a cloud host service named \"spam\" would first look for :file:`pylock."
"spam.toml` to install from, and if that file didn't exist then install from :"
"file:`pylock.toml` and look for a dependency group named \"spam\" to use if "
"present."
msgstr ""

#: ../source/specifications/pylock-toml.rst:42
msgid ""
"The lock file(s) SHOULD be located in the directory as appropriate for the "
"scope of the lock file. Locking against a single :file:`pyproject.toml`, for "
"instance, would place the :file:`pylock.toml` in the same directory. If the "
"lock file covered multiple projects in a monorepo, then the expectation is "
"the :file:`pylock.toml` file would be in the directory that held all the "
"projects being locked."
msgstr ""

#: ../source/specifications/pylock-toml.rst:53
msgid "The format of the file is TOML_."
msgstr ""

#: ../source/specifications/pylock-toml.rst:55
msgid ""
"Tools SHOULD write their lock files in a consistent way to minimize noise in "
"diff output. Keys in tables -- including the top-level table -- SHOULD be "
"recorded in a consistent order (if inspiration is desired, this "
"specification has tried to write down keys in a logical order). As well, "
"tools SHOULD sort arrays in consistent order. Usage of inline tables SHOULD "
"also be kept consistent."
msgstr ""

#: ../source/specifications/pylock-toml.rst:65
#, fuzzy
#| msgid "``platform_version``"
msgid "``lock-version``"
msgstr "``platform_version``"

#: ../source/specifications/pylock-toml.rst:67
msgid "**Type**: string; value of ``\"1.0\"``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:68
#: ../source/specifications/pylock-toml.rst:174
#: ../source/specifications/pylock-toml.rst:189
#: ../source/specifications/pylock-toml.rst:202
#: ../source/specifications/pylock-toml.rst:298
#: ../source/specifications/pylock-toml.rst:348
#: ../source/specifications/pylock-toml.rst:397
#: ../source/specifications/pylock-toml.rst:494
#: ../source/specifications/pylock-toml.rst:689
#, fuzzy
#| msgid "Requires"
msgid "**Required?**: yes"
msgstr "要求事項"

#: ../source/specifications/pylock-toml.rst:69
msgid "**Inspiration**: :ref:`core-metadata-metadata-version`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:70
msgid "Record the file format version that the file adheres to."
msgstr ""

#: ../source/specifications/pylock-toml.rst:71
msgid ""
"This PEP specifies the initial version -- and only valid value until future "
"updates to the standard change it -- as ``\"1.0\"``."
msgstr ""

#: ../source/specifications/pylock-toml.rst:73
msgid ""
"If a tool supports the major version but not the minor version, a tool "
"SHOULD warn when an unknown key is seen."
msgstr ""

#: ../source/specifications/pylock-toml.rst:75
msgid "If a tool doesn't support a major version, it MUST raise an error."
msgstr ""

#: ../source/specifications/pylock-toml.rst:81
#, fuzzy
#| msgid "``entry-points``"
msgid "``environments``"
msgstr "``entry-points``"

#: ../source/specifications/pylock-toml.rst:83
#: ../source/specifications/pylock-toml.rst:110
#: ../source/specifications/pylock-toml.rst:132
#: ../source/specifications/pylock-toml.rst:154
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: Array of strings"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/pylock-toml.rst:84
#: ../source/specifications/pylock-toml.rst:98
#: ../source/specifications/pylock-toml.rst:213
#: ../source/specifications/pylock-toml.rst:230
#: ../source/specifications/pylock-toml.rst:243
#: ../source/specifications/pylock-toml.rst:255
#: ../source/specifications/pylock-toml.rst:334
#: ../source/specifications/pylock-toml.rst:362
#: ../source/specifications/pylock-toml.rst:435
#: ../source/specifications/pylock-toml.rst:469
#: ../source/specifications/pylock-toml.rst:482
#: ../source/specifications/pylock-toml.rst:519
#: ../source/specifications/pylock-toml.rst:674
#: ../source/specifications/pylock-toml.rst:700
#: ../source/specifications/pylock-toml.rst:715
msgid "**Required?**: no"
msgstr ""

#: ../source/specifications/pylock-toml.rst:85
#: ../source/specifications/pylock-toml.rst:520
#: ../source/specifications/pylock-toml.rst:538
msgid "**Inspiration**: uv_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:86
msgid ""
"A list of :ref:`dependency-specifiers-environment-markers` for which the "
"lock file is considered compatible with."
msgstr ""

#: ../source/specifications/pylock-toml.rst:88
msgid ""
"Tools SHOULD write exclusive/non-overlapping environment markers to ease in "
"understanding."
msgstr ""

#: ../source/specifications/pylock-toml.rst:97
#: ../source/specifications/pylock-toml.rst:173
#: ../source/specifications/pylock-toml.rst:201
#: ../source/specifications/pylock-toml.rst:212
#: ../source/specifications/pylock-toml.rst:229
#: ../source/specifications/pylock-toml.rst:242
#: ../source/specifications/pylock-toml.rst:308
#: ../source/specifications/pylock-toml.rst:319
#: ../source/specifications/pylock-toml.rst:333
#: ../source/specifications/pylock-toml.rst:347
#: ../source/specifications/pylock-toml.rst:361
#: ../source/specifications/pylock-toml.rst:396
#: ../source/specifications/pylock-toml.rst:518
#: ../source/specifications/pylock-toml.rst:551
#: ../source/specifications/pylock-toml.rst:620
#: ../source/specifications/pylock-toml.rst:688
#, fuzzy
#| msgid "TOML_ type: string"
msgid "**Type**: string"
msgstr "TOML_ 型: 文字列"

#: ../source/specifications/pylock-toml.rst:99
#: ../source/specifications/pylock-toml.rst:190
#: ../source/specifications/pylock-toml.rst:256
#: ../source/specifications/pylock-toml.rst:555
#: ../source/specifications/pylock-toml.rst:608
#: ../source/specifications/pylock-toml.rst:624
msgid "**Inspiration**: PDM_, Poetry_, uv_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:100
msgid ""
"Specifies the :ref:`core-metadata-requires-python` for the minimum Python "
"version compatible for any environment supported by the lock file (i.e. the "
"minimum viable Python version for the lock file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:111
#: ../source/specifications/pylock-toml.rst:133
#: ../source/specifications/pylock-toml.rst:155
msgid "**Required?**: no; defaults to ``[]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:112
msgid "**Inspiration**: :ref:`core-metadata-provides-extra`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:113
msgid ""
"The list of :ref:`extras <core-metadata-provides-extra>` supported by this "
"lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:115
#: ../source/specifications/pylock-toml.rst:138
msgid ""
"Lockers MAY choose to not support writing lock files that support extras and "
"dependency groups (i.e. tools may only support exporting a single-use lock "
"file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:118
msgid "Tools supporting extras MUST also support dependency groups."
msgstr ""

#: ../source/specifications/pylock-toml.rst:119
msgid ""
"Tools should explicitly set this key to an empty array to signal that the "
"inputs used to generate the lock file had no extras (e.g. a :ref:`pyproject."
"toml <pyproject-toml-spec>` file had no :ref:`[project.optional-"
"dependencies] <pyproject-toml-optional-dependencies>` table), signalling "
"that the lock file is, in effect, multi-use even if it only looks to be "
"single-use."
msgstr ""

#: ../source/specifications/pylock-toml.rst:130
#, fuzzy
#| msgid "``dependencies``"
msgid "``dependency-groups``"
msgstr "``依存関係 <dependencies``"

#: ../source/specifications/pylock-toml.rst:134
#: ../source/specifications/pylock-toml.rst:701
#: ../source/specifications/pylock-toml.rst:716
#, fuzzy
#| msgid ":ref:`pyproject-toml-spec`"
msgid "**Inspiration**: :ref:`pyproject-tool-table`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/specifications/pylock-toml.rst:135
msgid ""
"The list of :ref:`dependency-groups` publicly supported by this lock file (i."
"e. dependency groups users are expected to be able to specify via a tool's "
"UI)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:141
msgid "Tools supporting dependency groups MUST also support extras."
msgstr ""

#: ../source/specifications/pylock-toml.rst:142
msgid ""
"Tools SHOULD explicitly set this key to an empty array to signal that the "
"inputs used to generate the lock file had no dependency groups (e.g. a :ref:"
"`pyproject.toml <pyproject-toml-spec>` file had no :ref:`[dependency-groups] "
"<dependency-groups>` table), signalling that the lock file is, in effect, "
"multi-use even if it only looks to be single-use."
msgstr ""

#: ../source/specifications/pylock-toml.rst:152
msgid "``default-groups``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:156
msgid "**Inspiration**: Poetry_, PDM_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:157
msgid ""
"The name of synthetic dependency groups to represent what should be "
"installed by default (e.g. what :ref:`[project.dependencies] <pyproject-toml-"
"dependencies>` implicitly represents)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:161
msgid ""
"Meant to be used in situations where :ref:`pylock-packages-marker` "
"necessitates such a group to exist."
msgstr ""

#: ../source/specifications/pylock-toml.rst:163
msgid ""
"The groups listed by this key SHOULD NOT be listed in :ref:`pylock-"
"dependency-groups` as the groups are not meant to be directly exposed to "
"users by name but instead via an installer's UI."
msgstr ""

#: ../source/specifications/pylock-toml.rst:171
msgid "``created-by``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:175
msgid "**Inspiration**: Tools with their name in their lock file name"
msgstr ""

#: ../source/specifications/pylock-toml.rst:176
#, fuzzy
#| msgid ""
#| "``INSTALLER``: records the name of the tool used to install the project."
msgid "Records the name of the tool used to create the lock file."
msgstr ""
"``INSTALLER``: プロジェクトをインストールするのに使われるツールの名前を記録し"
"ます。"

#: ../source/specifications/pylock-toml.rst:177
msgid ""
"Tools MAY use the :ref:`pylock-tool` table to record enough details that it "
"can be inferred what inputs were used to create the lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:179
msgid ""
"Tools SHOULD record the normalized name of the tool if it is available as a "
"Python package to facilitate finding the tool."
msgstr ""

#: ../source/specifications/pylock-toml.rst:186
#, fuzzy
#| msgid "``packages``"
msgid "``[[packages]]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:188
#: ../source/specifications/pylock-toml.rst:254
#: ../source/specifications/pylock-toml.rst:605
#: ../source/specifications/pylock-toml.rst:673
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: array of tables"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/pylock-toml.rst:191
msgid "An array containing all packages that *may* be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:192
msgid ""
"Packages MAY be listed multiple times with varying data, but all packages to "
"be installed MUST narrow down to a single entry at install time."
msgstr ""

#: ../source/specifications/pylock-toml.rst:199
#, fuzzy
#| msgid "``packages``"
msgid "``packages.name``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:203
msgid "**Inspiration**: :ref:`core-metadata-name`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:204
#, fuzzy
#| msgid ""
#| "For comparison purposes, the names should be :ref:`normalized <name-"
#| "normalization>` before comparing."
msgid "The name of the package :ref:`normalized <name-normalization>`."
msgstr ""
"比較の目的のためにも、名前は比較の前に :ref:`正規化 <name-normalization>` さ"
"れているべきです。"

#: ../source/specifications/pylock-toml.rst:210
#, fuzzy
#| msgid "``packages``"
msgid "``packages.version``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:214
msgid "**Inspiration**: :ref:`core-metadata-version`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:215
#, fuzzy
#| msgid "Creating the package files"
msgid "The version of the package."
msgstr "パッケージファイルを作成する"

#: ../source/specifications/pylock-toml.rst:216
msgid ""
"The version SHOULD be specified when the version is known to be stable (i.e. "
"when an :ref:`sdist <source-distribution-format>` or :ref:`wheels <binary-"
"distribution-format>` are specified)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:219
msgid ""
"The version MUST NOT be included when it cannot be guaranteed to be "
"consistent with the code used (i.e. when a :ref:`source tree <source-"
"distribution-format-source-tree>` is used)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:227
#, fuzzy
#| msgid "``packages``"
msgid "``packages.marker``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:231
msgid "**Inspiration**: PDM_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:232
msgid ""
"The :ref:`environment marker <dependency-specifiers-environment-markers>` "
"which specify when the package should be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:240
#, fuzzy
#| msgid "``requires-python``"
msgid "``packages.requires-python``"
msgstr "``requires-python``"

#: ../source/specifications/pylock-toml.rst:244
msgid "**Inspiration**: :ref:`core-metadata-requires-python`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:245
msgid ""
"Holds the :ref:`version-specifiers` for Python version compatibility for the "
"package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:252
#, fuzzy
#| msgid "``dependencies``"
msgid "``[[packages.dependencies]]``"
msgstr "``依存関係 <dependencies``"

#: ../source/specifications/pylock-toml.rst:257
msgid ""
"Records the other entries in :ref:`pylock-packages` which are direct "
"dependencies of this package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:259
msgid ""
"Each entry is a table which contains the minimum information required to "
"tell which other package entry it corresponds to where doing a key-by-key "
"comparison would find the appropriate package with no ambiguity (e.g. if "
"there are two entries for the ``spam`` package, then you can include the "
"version number like ``{name = \"spam\", version = \"1.0.0\"}``, or by source "
"like ``{name = \"spam\", vcs = { url = \"...\"}``)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:265
msgid ""
"Tools MUST NOT use this information when doing installation; it is purely "
"informational for auditing purposes."
msgstr ""

#: ../source/specifications/pylock-toml.rst:272
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.vcs]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:274
#: ../source/specifications/pylock-toml.rst:376
#: ../source/specifications/pylock-toml.rst:434
#: ../source/specifications/pylock-toml.rst:535
#: ../source/specifications/pylock-toml.rst:699
#: ../source/specifications/pylock-toml.rst:714
#, fuzzy
#| msgid "TOML_ type: table"
msgid "**Type**: table"
msgstr "TOML_ 型: テーブル"

#: ../source/specifications/pylock-toml.rst:275
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-"
"directory`, :ref:`pylock-packages-archive`, :ref:`pylock-packages-sdist`, "
"and :ref:`pylock-packages-wheels`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:278
msgid "**Inspiration**: :ref:`direct-url-data-structure`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:279
msgid ""
"Record the version control system details for the :ref:`source tree <source-"
"distribution-format-source-tree>` it contains."
msgstr ""

#: ../source/specifications/pylock-toml.rst:282
msgid ""
"Tools MAY choose to not support version control systems, both from a locking "
"and/or installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:284
msgid "Tools MAY choose to only support a subset of the available VCS types."
msgstr ""

#: ../source/specifications/pylock-toml.rst:285
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using version control "
"systems."
msgstr ""

#: ../source/specifications/pylock-toml.rst:287
msgid ""
"Installation from a version control system is considered originating from a :"
"ref:`direct URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:294
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.type``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:296
msgid ""
"**Type**: string; supported values specified in :ref:`direct-url-data-"
"structure-registered-vcs`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:299
#: ../source/specifications/pylock-toml.rst:310
#: ../source/specifications/pylock-toml.rst:321
#: ../source/specifications/pylock-toml.rst:335
#: ../source/specifications/pylock-toml.rst:349
msgid "**Inspiration**: :ref:`direct-url-data-structure-vcs`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:300
#, fuzzy
#| msgid "Install from version control systems"
msgid "The type of version control system used."
msgstr "バージョン管理システムからインストールする"

#: ../source/specifications/pylock-toml.rst:306
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.url``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:309
msgid "**Required?**: if :ref:`pylock-packages-vcs-path` is not specified"
msgstr ""

#: ../source/specifications/pylock-toml.rst:311
#, fuzzy
#| msgid "The source tree"
msgid "The URL_ to the source tree."
msgstr "ソースコードツリー"

#: ../source/specifications/pylock-toml.rst:317
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.path``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:320
msgid "**Required?**: if :ref:`pylock-packages-vcs-url` is not specified"
msgstr ""

#: ../source/specifications/pylock-toml.rst:322
msgid "The path to the local directory of the source tree."
msgstr ""

#: ../source/specifications/pylock-toml.rst:323
msgid ""
"If a relative path is used it MUST be relative to the location of this file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:324
msgid ""
"If the path is relative it MAY use POSIX-style path separators explicitly "
"for portability."
msgstr ""

#: ../source/specifications/pylock-toml.rst:331
#, fuzzy
#| msgid "``requested_revision`` field"
msgid "``packages.vcs.requested-revision``"
msgstr "``requested_revision`` フィールド"

#: ../source/specifications/pylock-toml.rst:336
msgid "The branch/tag/ref/commit/revision/etc. that the user requested."
msgstr ""

#: ../source/specifications/pylock-toml.rst:337
msgid ""
"This is purely informational and to facilitate writing the :ref:`direct-url-"
"data-structure`; it MUST NOT be used to checkout the repository."
msgstr ""

#: ../source/specifications/pylock-toml.rst:345
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.commit-id``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:350
msgid "The exact commit/revision number that is to be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:351
#, fuzzy
#| msgid ""
#| "A ``commit_id`` key (type ``string``) MUST be present, containing the "
#| "exact commit/revision number that was/is to be installed. If the VCS "
#| "supports commit-hash based revision identifiers, such commit-hash MUST be "
#| "used as ``commit_id`` in order to reference an immutable version of the "
#| "source code."
msgid ""
"If the VCS supports commit-hash based revision identifiers, such a commit-"
"hash, it MUST be used as the commit ID in order to reference an immutable "
"version of the source code."
msgstr ""
"``commit_id`` キー (``string`` 型) は、正確にどのコミットまたはリビジョンがイ"
"ンストールされた/されるかを示すもので、必須のキーです。 VCS がリビジョン識別"
"子に基づくコミットハッシュをサポートしているなら、インストールされたものの"
"ソースコードの不変のバージョンを指し示す目的で、そのようなコミットハッシュを "
"``commit_id`` として使わなければなりません。"

#: ../source/specifications/pylock-toml.rst:359
msgid "``packages.vcs.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:363
msgid "**Inspiration**: :ref:`direct-url-data-structure-subdirectories`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:364
msgid ""
"The subdirectory within the :ref:`source tree <source-distribution-format-"
"source-tree>` where the project root of the project is (e.g. the location of "
"the :ref:`pyproject.toml <pyproject-toml-spec>` file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:368
msgid "The path MUST be relative to the root of the source tree structure."
msgstr ""

#: ../source/specifications/pylock-toml.rst:374
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.directory]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:377
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-vcs`, :ref:"
"`pylock-packages-archive`, :ref:`pylock-packages-sdist`, and :ref:`pylock-"
"packages-wheels`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:380
#: ../source/specifications/pylock-toml.rst:398
#: ../source/specifications/pylock-toml.rst:412
msgid "**Inspiration**: :ref:`direct-url-data-structure-local-directory`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:381
msgid ""
"Record the local directory details for the :ref:`source tree <source-"
"distribution-format-source-tree>` it contains."
msgstr ""

#: ../source/specifications/pylock-toml.rst:384
msgid ""
"Tools MAY choose to not support local directories, both from a locking and/"
"or installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:386
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using local "
"directories."
msgstr ""

#: ../source/specifications/pylock-toml.rst:387
msgid ""
"Installation from a directory is considered originating from a :ref:`direct "
"URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:394
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.directory.path``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:399
msgid "The local directory where the source tree is."
msgstr ""

#: ../source/specifications/pylock-toml.rst:400
msgid ""
"If the path is relative it MUST be relative to the location of the lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:401
msgid ""
"If the path is relative it MAY use POSIX-style path separators for "
"portability."
msgstr ""

#: ../source/specifications/pylock-toml.rst:408
msgid "``packages.directory.editable``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:410
msgid "**Type**: boolean"
msgstr ""

#: ../source/specifications/pylock-toml.rst:411
msgid "**Required?**: no; defaults to ``false``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:413
msgid ""
"A flag representing whether the source tree was an editable install at lock "
"time."
msgstr ""

#: ../source/specifications/pylock-toml.rst:415
msgid ""
"An installer MAY choose to ignore this flag if user actions or context would "
"make an editable install unnecessary or undesirable (e.g. a container image "
"that will not be mounted for development purposes but instead deployed to "
"production where it would be treated at read-only)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:424
msgid "``packages.directory.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:426
#: ../source/specifications/pylock-toml.rst:510
msgid "See :ref:`pylock-packages-vcs-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:432
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.archive]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:436
msgid "**Inspiration**: :ref:`direct-url-data-structure-archive`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:437
msgid ""
"A direct reference to an archive file to install from (this can include "
"wheels and sdists, as well as other archive formats containing a source "
"tree)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:440
msgid ""
"Tools MAY choose to not support archive files, both from a locking and/or "
"installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:442
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using archive files."
msgstr ""

#: ../source/specifications/pylock-toml.rst:443
msgid ""
"Installation from an archive file is considered originating from a :ref:"
"`direct URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:450
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.url``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:452
msgid "See :ref:`pylock-packages-vcs-url`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:458
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.path``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:460
msgid "See :ref:`pylock-packages-vcs-path`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:466
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.size``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:468
msgid "**Type**: integer"
msgstr ""

#: ../source/specifications/pylock-toml.rst:470
msgid "**Inspiration**: uv_, :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:471
#, fuzzy
#| msgid "The name of the project."
msgid "The size of the archive file."
msgstr "プロジェクトの名前。"

#: ../source/specifications/pylock-toml.rst:472
msgid ""
"Tools SHOULD provide the file size when reasonably possible (e.g. the file "
"size is available via the Content-Length_ header from a HEAD_ HTTP request)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:479
msgid "``packages.archive.upload-time``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:481
msgid "**Type**: datetime"
msgstr ""

#: ../source/specifications/pylock-toml.rst:483
msgid "**Inspiration**: :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:484
#, fuzzy
#| msgid "Where the guide is deployed"
msgid "The time the file was uploaded."
msgstr "この文書が展開される場所"

#: ../source/specifications/pylock-toml.rst:485
msgid "The date and time MUST be recorded in UTC."
msgstr ""

#: ../source/specifications/pylock-toml.rst:491
msgid "``[packages.archive.hashes]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:493
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: Table of strings"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/pylock-toml.rst:495
msgid "**Inspiration**: PDM_, Poetry_, uv_, :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:496
#, fuzzy
#| msgid ""
#| "A table of URLs where the key is the URL label and the value is the URL "
#| "itself."
msgid ""
"A table listing known hash values of the file where the key is the hash "
"algorithm and the value is the hash value."
msgstr ""
"URL のテーブルで、 URL に付けられたラベルがキーで URL そのものが値になってい"
"るもの。"

#: ../source/specifications/pylock-toml.rst:498
msgid "The table MUST contain at least one entry."
msgstr ""

#: ../source/specifications/pylock-toml.rst:499
msgid "Hash algorithm keys SHOULD be lowercase."
msgstr ""

#: ../source/specifications/pylock-toml.rst:500
msgid ""
"At least one secure algorithm from :py:data:`hashlib.algorithms_guaranteed` "
"SHOULD always be included (at time of writing, sha256 specifically is "
"recommended."
msgstr ""

#: ../source/specifications/pylock-toml.rst:508
msgid "``packages.archive.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:516
#, fuzzy
#| msgid "``packages``"
msgid "``packages.index``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:521
msgid ""
"The base URL for the package index from :ref:`simple-repository-api` where "
"the sdist and/or wheels were found (e.g. ``https://pypi.org/simple/``)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:523
msgid ""
"When possible, this SHOULD be specified to assist with generating `software "
"bill of materials`_ -- aka SBOMs -- and to assist in finding a file if a URL "
"ceases to be valid."
msgstr ""

#: ../source/specifications/pylock-toml.rst:526
msgid ""
"Tools MAY support installing from an index if the URL recorded for a "
"specific file is no longer valid (e.g. returns a 404 HTTP error code)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:533
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.sdist]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:536
#: ../source/specifications/pylock-toml.rst:606
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-vcs`, :ref:"
"`pylock-packages-directory`, and :ref:`pylock-packages-archive`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:539
msgid "Details of a :ref:`source-distribution-format-sdist` for the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:541
msgid ""
"Tools MAY choose to not support sdist files, both from a locking and/or "
"installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:543
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using sdist files."
msgstr ""

#: ../source/specifications/pylock-toml.rst:549
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.name``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:552
msgid ""
"**Required?**: no, not when the last component of :ref:`pylock-packages-"
"sdist-path`/ :ref:`pylock-packages-sdist-url` would be the same value"
msgstr ""

#: ../source/specifications/pylock-toml.rst:556
msgid "The file name of the :ref:`source-distribution-format-sdist` file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:562
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.upload-time``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:564
#: ../source/specifications/pylock-toml.rst:633
msgid "See :ref:`pylock-packages-archive-upload-time`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:570
#, fuzzy
#| msgid "``packages``"
msgid "``packages.sdist.url``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:572
#: ../source/specifications/pylock-toml.rst:641
msgid "See :ref:`pylock-packages-archive-url`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:578
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.path``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:580
#: ../source/specifications/pylock-toml.rst:649
msgid "See :ref:`pylock-packages-archive-path`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:586
#, fuzzy
#| msgid "``packages``"
msgid "``packages.sdist.size``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:588
#: ../source/specifications/pylock-toml.rst:657
msgid "See :ref:`pylock-packages-archive-size`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:594
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.hashes``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:596
#: ../source/specifications/pylock-toml.rst:665
msgid "See :ref:`pylock-packages-archive-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:603
#, fuzzy
#| msgid "``packages``"
msgid "``[[packages.wheels]]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:609
msgid ""
"For recording the wheel files as specified by :ref:`binary-distribution-"
"format` for the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:611
msgid ""
"Tools MUST support wheel files, both from a locking and installation "
"perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:618
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.name``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:621
msgid ""
"**Required?**: no, not when the last component of :ref:`pylock-packages-"
"wheels-path`/ :ref:`pylock-packages-wheels-url` would be the same value"
msgstr ""

#: ../source/specifications/pylock-toml.rst:625
msgid "The file name of the :ref:`binary-distribution-format` file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:631
msgid "``packages.wheels.upload-time``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:639
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.url``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:647
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.path``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:655
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.size``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:663
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.hashes``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:671
msgid "``[[packages.attestation-identities]]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:675
#: ../source/specifications/pylock-toml.rst:690
#, fuzzy
#| msgid ":ref:`pyproject-toml-spec`"
msgid "**Inspiration**: :ref:`provenance-object`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/specifications/pylock-toml.rst:676
msgid ""
"A recording of the attestations for **any** file recorded for this package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:677
msgid "If available, tools SHOULD include the attestation identities found."
msgstr ""

#: ../source/specifications/pylock-toml.rst:678
msgid ""
"Publisher-specific keys are to be included in the table as-is (i.e. top-"
"level), following the spec at :ref:`index-hosted-attestations`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:686
msgid "``packages.attestation-identities.kind``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:691
msgid "The unique identity of the Trusted Publisher."
msgstr ""

#: ../source/specifications/pylock-toml.rst:697
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.tool]``"
msgstr "``packages``"

#: ../source/specifications/pylock-toml.rst:702
msgid ""
"Similar usage as that of the :ref:`pylock-tool` table from the :ref:"
"`pyproject-toml-spec`, but at the package version level instead of at the "
"lock file level (which is also available via :ref:`pylock-tool`)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:705
msgid ""
"Data recorded in the table MUST be disposable (i.e. it MUST NOT affect "
"installation)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:712
msgid "``[tool]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:717
msgid "See :ref:`pylock-packages-tool`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:731
msgid ""
"The following outlines the steps to be taken to install from a lock file "
"(while the requirements are prescriptive, the general steps and order are a "
"suggestion):"
msgstr ""

#: ../source/specifications/pylock-toml.rst:735
msgid ""
"Gather the extras and dependency groups to install and set ``extras`` and "
"``dependency_groups`` for marker evaluation, respectively."
msgstr ""

#: ../source/specifications/pylock-toml.rst:738
msgid "``extras`` SHOULD be set to the empty set by default."
msgstr ""

#: ../source/specifications/pylock-toml.rst:739
msgid ""
"``dependency_groups`` SHOULD be the set created from :ref:`pylock-default-"
"groups` by default."
msgstr ""

#: ../source/specifications/pylock-toml.rst:742
msgid ""
"Check if the metadata version specified by :ref:`pylock-lock-version` is "
"supported; an error or warning MUST be raised as appropriate."
msgstr ""

#: ../source/specifications/pylock-toml.rst:744
msgid ""
"If :ref:`pylock-requires-python` is specified, check that the environment "
"being installed for meets the requirement; an error MUST be raised if it is "
"not met."
msgstr ""

#: ../source/specifications/pylock-toml.rst:747
msgid ""
"If :ref:`pylock-environments` is specified, check that at least one of the "
"environment marker expressions is satisfied; an error MUST be raised if no "
"expression is satisfied."
msgstr ""

#: ../source/specifications/pylock-toml.rst:750
msgid "For each package listed in :ref:`pylock-packages`:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:752
msgid ""
"If :ref:`pylock-packages-marker` is specified, check if it is satisfied; if "
"it isn't, skip to the next package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:754
msgid ""
"If :ref:`pylock-packages-requires-python` is specified, check if it is "
"satisfied; an error MUST be raised if it isn't."
msgstr ""

#: ../source/specifications/pylock-toml.rst:756
msgid ""
"Check that no other conflicting instance of the package has been slated to "
"be installed; an error about the ambiguity MUST be raised otherwise."
msgstr ""

#: ../source/specifications/pylock-toml.rst:758
msgid ""
"Check that the source of the package is specified appropriately (i.e. there "
"are no conflicting sources in the package entry); an error MUST be raised if "
"any issues are found."
msgstr ""

#: ../source/specifications/pylock-toml.rst:761
msgid "Add the package to the set of packages to install."
msgstr ""

#: ../source/specifications/pylock-toml.rst:763
msgid "For each package to be installed:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:765
msgid "If :ref:`pylock-packages-vcs` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:767
msgid ""
"Clone the repository to the commit ID specified in :ref:`pylock-packages-vcs-"
"commit-id`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:769
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-vcs-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:771
#: ../source/specifications/pylock-toml.rst:777
#: ../source/specifications/pylock-toml.rst:786
#: ../source/specifications/pylock-toml.rst:806
#: ../source/specifications/pylock-toml.rst:821
#, fuzzy
#| msgid "Binary distribution format"
msgid ":ref:`Install <binary-distribution-format>`."
msgstr "バイナリ配布物のフォーマット"

#: ../source/specifications/pylock-toml.rst:773
msgid "Else if :ref:`pylock-packages-directory` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:775
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-directory-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:779
msgid "Else if :ref:`pylock-packages-archive` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:781
#: ../source/specifications/pylock-toml.rst:811
msgid "Get the file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:782
msgid ""
"Validate using :ref:`pylock-packages-archive-size` and :ref:`pylock-packages-"
"archive-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:784
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-archive-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:788
msgid "Else if there are entries for :ref:`pylock-packages-wheels`:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:790
msgid ""
"Look for the appropriate wheel file based on :ref:`pylock-packages-wheels-"
"name`; if one is not found then move on to :ref:`pylock-packages-sdist` or "
"an error MUST be raised about a lack of source for the project."
msgstr ""

#: ../source/specifications/pylock-toml.rst:794
msgid "Get the file:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:796
msgid "If :ref:`pylock-packages-wheels-path` is set, use it."
msgstr ""

#: ../source/specifications/pylock-toml.rst:797
msgid ""
"Else if :ref:`pylock-packages-wheels-url` is set, try to use it; optionally "
"tools MAY use :ref:`pylock-packages-index` or some tool-specific mechanism "
"to download the selected wheel file (tools MUST NOT try to change what wheel "
"file to download based on what's available; what file to install should be "
"determined in an offline fashion for reproducibility)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:804
msgid ""
"Validate using :ref:`pylock-packages-wheels-size` and :ref:`pylock-packages-"
"wheels-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:808
msgid ""
"Else if no :ref:`pylock-packages-wheels` file is found or :ref:`pylock-"
"packages-sdist` is solely set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:813
msgid "If :ref:`pylock-packages-sdist-path` is set, use it."
msgstr ""

#: ../source/specifications/pylock-toml.rst:814
msgid ""
"Else if :ref:`pylock-packages-sdist-url` is set, try to use it; tools MAY "
"use :ref:`pylock-packages-index` or some tool-specific mechanism to download "
"the file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:818
msgid ""
"Validate using :ref:`pylock-packages-sdist-size` and :ref:`pylock-packages-"
"sdist-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:820
msgid ":ref:`Build <source-distribution-format-sdist>` the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:828
#, fuzzy
#| msgid ""
#| "April 2018: The ``manylinux2010`` tag was approved through :pep:`571`."
msgid "April 2025: Initial version, approved via :pep:`751`."
msgstr ""
"2018年4月: :pep:`571` を通じて ``manylinux2010`` タグが承認されました。"

#: ../source/specifications/pypirc.rst:6
msgid "The :file:`.pypirc` file"
msgstr ":file:`.pypirc` ファイル"

#: ../source/specifications/pypirc.rst:8
msgid ""
"A :file:`.pypirc` file allows you to define the configuration for :term:"
"`package indexes <Package Index>` (referred to here as \"repositories\"), so "
"that you don't have to enter the URL, username, or password whenever you "
"upload a package with :ref:`twine` or :ref:`flit`."
msgstr ""
":file:`.pypirc` ファイルを使うと、 :term:`パッケージインデックス <Package "
"Index>` (ここでは \"リポジトリ\" と呼びます) 向けの設定を定義しておけば、 :"
"ref:`twine` や :ref:`flit` でパッケージをアップロードする際に URL ・ユーザ"
"名・パスワードなどの入力を省くことができます。"

#: ../source/specifications/pypirc.rst:13
msgid "The format (originally defined by the :ref:`distutils` package) is:"
msgstr "(元々は :ref:`distutils` パッケージで定義された) フォーマットは:"

#: ../source/specifications/pypirc.rst:32
msgid ""
"The ``distutils`` section defines an ``index-servers`` field that lists the "
"name of all sections describing a repository."
msgstr ""
"``distutils`` の節では、リポジトリを説明するようなすべての節の名前を列挙する "
"``index-servers`` フィールドを定義しています。"

#: ../source/specifications/pypirc.rst:35
msgid "Each section describing a repository defines three fields:"
msgstr "リポジトリを記述する各節では、３個のフィールドを定義しています:"

#: ../source/specifications/pypirc.rst:37
msgid "``repository``: The URL of the repository."
msgstr "``repository``: リポジトリの URL。"

#: ../source/specifications/pypirc.rst:38
msgid "``username``: The registered username on the repository."
msgstr "``username``: リポジトリで登録済みのユーザ名。"

#: ../source/specifications/pypirc.rst:39
msgid "``password``: The password that will used to authenticate the username."
msgstr "``password``: ユーザ名を認証するために使われるパスワード。"

#: ../source/specifications/pypirc.rst:43
msgid ""
"Be aware that this stores your password in plain text. For better security, "
"consider an alternative like `keyring`_, setting environment variables, or "
"providing the password on the command line."
msgstr ""
"あなたのパスワードが平文で保存されることに注意してください。より良いセキュリ"
"ティのために `キーリング <keyring>`_ ・環境変数での設定・コマンドラインでのパ"
"スワード供給のような代替策を検討してください。"

#: ../source/specifications/pypirc.rst:47
msgid ""
"Otherwise, set the permissions on :file:`.pypirc` so that only you can view "
"or modify it. For example, on Linux or macOS, run:"
msgstr ""
"そうでなければ、 :file:`.pypirc` のパーミッションを設定して、自分だけが閲覧や"
"修正を行えるようにしてください。例えば、 Linux や macOS では次のようにします:"

#: ../source/specifications/pypirc.rst:57
msgid "Common configurations"
msgstr "共通の設定"

#: ../source/specifications/pypirc.rst:61
msgid ""
"These examples apply to :ref:`twine`. Other projects (e.g. :ref:`flit`) also "
"use :file:`.pypirc`, but with different defaults. Please refer to each "
"project's documentation for more details and usage instructions."
msgstr ""
"これらの例は :ref:`twine` に当てはまります。他のプロジェクト (例えば :ref:"
"`flit`) でも :file:`.pypirc` ファイルを利用しますが、デフォルトの値が異なりま"
"す。もっと詳しい情報や使い方の指南については、それぞれのプロジェクトの説明文"
"書を参照してください。"

#: ../source/specifications/pypirc.rst:65
msgid ""
"Twine's default configuration mimics a :file:`.pypirc` with repository "
"sections for PyPI and TestPyPI:"
msgstr ""
"Twine のデフォルト設定は、 PyPI と TestPyPI のリポジトリ節を含んだ :file:`."
"pypirc` を真似ています:"

#: ../source/specifications/pypirc.rst:81
msgid ""
"Twine will add additional configuration from :file:`$HOME/.pypirc`, the "
"command line, and environment variables to this default configuration."
msgstr ""
"Twine は、 :file:`$HOME/.pypirc` からの設定に対して、コマンドラインや環境変数"
"といった追加の設定をデフォルト設定に追加するでしょう。"

#: ../source/specifications/pypirc.rst:85
msgid "Using a PyPI token"
msgstr "PyPI トークンを使う"

#: ../source/specifications/pypirc.rst:87
msgid ""
"To set your `API token`_ for PyPI, you can create a :file:`$HOME/.pypirc` "
"similar to:"
msgstr ""
"自分の PyPI 用 `API トークン`_ を設定するには、次のような :file:`$HOME/."
"pypirc` を作れば良いでしょう:"

#: ../source/specifications/pypirc.rst:96
msgid ""
"For :ref:`TestPyPI <using-test-pypi>`, add a ``[testpypi]`` section, using "
"the API token from your TestPyPI account."
msgstr ""
":ref:`TestPyPI <using-test-pypi>` 用には、Test PyPI アカウントで作成した API"
"トークンを使った ``[testpypi]`` 節を追加してください。"

#: ../source/specifications/pypirc.rst:102
msgid "Using another package index"
msgstr "別のパッケージインデックスを使う"

#: ../source/specifications/pypirc.rst:104
msgid ""
"To configure an additional repository, you'll need to redefine the ``index-"
"servers`` field to include the repository name. Here is a complete example "
"of a :file:`$HOME/.pypirc` for PyPI, TestPyPI, and a private repository:"
msgstr ""
"追加のリポジトリの設定を行うには、 ``index-servers`` フィールドにそのリポジト"
"リの名前が含まれるように再定義する必要があるでしょう。PyPI と TestPyPI とプラ"
"イベートなリポジトリの設定をした :file:`$HOME/.pypirc` の完全な例を示します:"

#: ../source/specifications/pypirc.rst:131
msgid ""
"Instead of using the ``password`` field, consider saving your API tokens and "
"passwords securely using `keyring`_ (which is installed by Twine):"
msgstr ""
"``password`` フィールドを使う代わりに、 (Twineによってインストールされる) `"
"キーリング <keyring>`_ を使って API トークンやパスワードを安全に保存すること"
"を検討してください:"

#: ../source/specifications/pyproject-toml.rst:6
msgid "``pyproject.toml`` specification"
msgstr "``pyproject.toml`` の仕様"

#: ../source/specifications/pyproject-toml.rst:10
msgid ""
"This is a **technical, formal specification**. For a gentle, user-friendly "
"guide to ``pyproject.toml``, see :ref:`writing-pyproject-toml`."
msgstr ""
"これは **技術的な正式の仕様** です。 ``pyproject.toml`` の配慮があってユーザ"
"に優しいガイド文書としては、 :ref:`wriging-pyproject-toml` を見てください。"

#: ../source/specifications/pyproject-toml.rst:14
msgid ""
"The ``pyproject.toml`` file acts as a configuration file for packaging-"
"related tools (as well as other tools)."
msgstr ""
"``pyproject.toml`` ファイルは、(他のツール類と同様に) パッケージング関係の"
"ツール類向けの設定ファイルとして働きます。"

#: ../source/specifications/pyproject-toml.rst:17
msgid "This specification was originally defined in :pep:`518` and :pep:`621`."
msgstr "この仕様は、元々は :pep:`518` 及び :pep:`621` で定義されました。"

#: ../source/specifications/pyproject-toml.rst:19
msgid ""
"The ``pyproject.toml`` file is written in `TOML <https://toml.io>`_. Three "
"tables are currently specified, namely :ref:`[build-system] <pyproject-build-"
"system-table>`, :ref:`[project] <pyproject-project-table>` and :ref:`[tool] "
"<pyproject-tool-table>`. Other tables are reserved for future use (tool-"
"specific configuration should use the ``[tool]`` table)."
msgstr ""
"``pyproject.toml`` ファイルは `TOML <https://toml.io>`_ で書かれています。現"
"在は、 :ref:`[build-system] <pyproject-build-system-table>` ・ :ref:"
"`[project] <pyproject-project-table>` ・ :ref:`[tool] <pyproject-tool-"
"table>` の３個のテーブルが制定されています。他のテーブル群は将来の使用 (ツー"
"ルに特有の設定は ``[tool]`` テーブルを使うべきです) に備えて予約されていま"
"す。"

#: ../source/specifications/pyproject-toml.rst:29
msgid "Declaring build system dependencies: the ``[build-system]`` table"
msgstr "ビルドシステムの依存関係を宣言する: ``[build-system]`` テーブル"

#: ../source/specifications/pyproject-toml.rst:31
msgid ""
"The ``[build-system]`` table declares any Python level dependencies that "
"must be installed in order to run the project's build system successfully."
msgstr ""
"``[build-system]`` テーブルでは、プロジェクトのビルドシステムが成功裡に動作す"
"るためにインストールされていなくてはならない Python レベルの依存関係をすべて"
"宣言します。"

#: ../source/specifications/pyproject-toml.rst:37
msgid ""
"The ``[build-system]`` table is used to store build-related data. Initially, "
"only one key of the table is valid and is mandatory for the table: "
"``requires``. This key must have a value of a list of strings representing "
"dependencies required to execute the build system. The strings in this list "
"follow the :ref:`version specifier specification <version-specifiers>`."
msgstr ""
"``[build-system]`` テーブルは、ビルドに関連したデータを格納するために使われま"
"す。当初は、テーブル内に ``requires`` というたったひとつのキーだけが正当、か"
"つ、必須とされました。このキーは、ビルドシステムを実行するのに要求される依存"
"関係を表現する文字列のリストを値に取らなければなりません。このリストの中の文"
"字列は、 :ref:`バージョン指定子仕様 <version-specifiers>` に従います。"

#: ../source/specifications/pyproject-toml.rst:44
msgid ""
"An example ``[build-system]`` table for a project built with ``setuptools`` "
"is:"
msgstr ""
"``setuptools`` と共にビルドされるプロジェクトにおける ``[build-system]`` の例"
"は:"

#: ../source/specifications/pyproject-toml.rst:53
msgid ""
"Build tools are expected to use the example configuration file above as "
"their default semantics when a ``pyproject.toml`` file is not present."
msgstr ""
"ビルドツール群は、 ``pyproject.toml`` ファイルが存在しない場合には、上に例示"
"された設定ファイルをデフォルトのセマンティクスとして使用することを期待されて"
"います。"

#: ../source/specifications/pyproject-toml.rst:56
msgid ""
"Tools should not require the existence of the ``[build-system]`` table. A "
"``pyproject.toml`` file may be used to store configuration details other "
"than build-related data and thus lack a ``[build-system]`` table "
"legitimately. If the file exists but is lacking the ``[build-system]`` table "
"then the default values as specified above should be used. If the table is "
"specified but is missing required fields then the tool should consider it an "
"error."
msgstr ""
"ツール類は、 ``[build-system]`` テーブルの存在を (必須のものとして) 要求する"
"べきではありません。 ``pyproject.toml`` ファイルにはビルドに関係するデータ以"
"外の設定の詳細を格納して使われることがあるので、 ``[build-system`` テーブルが"
"存在していなくても正当なものであると言えます。ファイルは存在するが ``[build-"
"system]`` テーブルが欠けている場合、上記のデフォルトの値を使用するべきです。"
"テーブルは存在しているけれども必須のフィールドが欠けている場合には、ツールは"
"これをエラーであると判断するべきです。"

#: ../source/specifications/pyproject-toml.rst:65
msgid ""
"To provide a type-specific representation of the resulting data from the "
"TOML file for illustrative purposes only, the following `JSON Schema "
"<https://json-schema.org>`_ would match the data format:"
msgstr ""
"TOMLファイルからのデータで実例を示す目的だけに使われるようなタイプ特有の表現"
"を提供するためには、後述の `JSON スキーマ <https://json-schema.org>`_ がデー"
"タフォーマットとして適しているでしょう:"

#: ../source/specifications/pyproject-toml.rst:103
msgid "Declaring project metadata: the ``[project]`` table"
msgstr "プロジェクトのメタデータを宣言する: ``[project]`` テーブル"

#: ../source/specifications/pyproject-toml.rst:105
msgid ""
"The ``[project]`` table specifies the project's :ref:`core metadata <core-"
"metadata>`."
msgstr ""
"``[project]`` テーブルは、プロジェクトの :ref:`コアとなるメタデータ <core-"
"metadata>` を定義します。"

#: ../source/specifications/pyproject-toml.rst:107
msgid ""
"There are two kinds of metadata: *static* and *dynamic*. Static metadata is "
"specified in the ``pyproject.toml`` file directly and cannot be specified or "
"changed by a tool (this includes data *referred* to by the metadata, e.g. "
"the contents of files referenced by the metadata). Dynamic metadata is "
"listed via the ``dynamic`` key (defined later in this specification) and "
"represents metadata that a tool will later provide."
msgstr ""
"メタデータにはふたつの種類があります: *静的* なものと *動的* なものです。静的"
"なメタデータは ``pyproject.toml`` ファイルで直接指定されていて、ツール側では"
"指定したり変更したりできません (これは、例えばメタデータが参照するファイルの"
"内容のような、メタデータによって *参照* されるデータを含みます)。動的なメタ"
"データは ``dynamic`` キー (この仕様内で後で定義します) を経由して一覧化されて"
"いて、ツール側が後から提供することになるでしょう。"

#: ../source/specifications/pyproject-toml.rst:115
msgid ""
"The lack of a ``[project]`` table implicitly means the :term:`build backend "
"<Build Backend>` will dynamically provide all keys."
msgstr ""
"``[project]`` テーブルが欠損している場合は、暗黙理に、 :term:`ビルドバックエ"
"ンド <Build Backend>` が動的にすべてのキーを準備することを意味します。"

#: ../source/specifications/pyproject-toml.rst:118
msgid "The only keys required to be statically defined are:"
msgstr "必ず静的に定義しなければならない必須のキーは次の通り:"

#: ../source/specifications/pyproject-toml.rst:122
msgid ""
"The keys which are required but may be specified *either* statically or "
"listed as dynamic are:"
msgstr ""
"必須フィールドだが、静的に指定しても動的に指定しても *いずれでも構わない* "
"キーは以下の通り:"

#: ../source/specifications/pyproject-toml.rst:127
msgid ""
"All other keys are considered optional and may be specified statically, "
"listed as dynamic, or left unspecified."
msgstr ""
"他の全てのキーは必須ではないものと解釈され、これらは静的に指定しても動的にリ"
"ストしても未指定のままにしていても構いません。"

#: ../source/specifications/pyproject-toml.rst:130
msgid "The complete list of keys allowed in the ``[project]`` table are:"
msgstr "``[project]`` テーブルで許容されるキーの完全なリストは次のとおりです:"

#: ../source/specifications/pyproject-toml.rst:132
msgid "``authors``"
msgstr "``著者 <authors>``"

#: ../source/specifications/pyproject-toml.rst:134
msgid "``dependencies``"
msgstr "``依存関係 <dependencies``"

#: ../source/specifications/pyproject-toml.rst:136
#: ../source/specifications/pyproject-toml.rst:473
msgid "``dynamic``"
msgstr "``dynamic``"

#: ../source/specifications/pyproject-toml.rst:137
msgid "``entry-points``"
msgstr "``entry-points``"

#: ../source/specifications/pyproject-toml.rst:138
msgid "``gui-scripts``"
msgstr "``gui スクリプト <gui-scripts>``"

#: ../source/specifications/pyproject-toml.rst:142
msgid "``maintainers``"
msgstr "``保守者 <maintainers>``"

#: ../source/specifications/pyproject-toml.rst:144
msgid "``optional-dependencies``"
msgstr "``optional-dependencies``"

#: ../source/specifications/pyproject-toml.rst:157
#: ../source/specifications/pyproject-toml.rst:172
#: ../source/specifications/pyproject-toml.rst:187
#: ../source/specifications/pyproject-toml.rst:241
#: ../source/specifications/pyproject-toml.rst:253
msgid "TOML_ type: string"
msgstr "TOML_ 型: 文字列"

#: ../source/specifications/pyproject-toml.rst:158
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name <core-"
"metadata-name>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`名前 "
"<core-metadata-name>` フィールド"

#: ../source/specifications/pyproject-toml.rst:161
msgid "The name of the project."
msgstr "プロジェクトの名前。"

#: ../source/specifications/pyproject-toml.rst:163
msgid ""
"Tools SHOULD :ref:`normalize <name-normalization>` this name, as soon as it "
"is read for internal consistency."
msgstr ""
"内部的な一貫性を保つために、ツール側では読み取ったらすぐに、この名前を :ref:`"
"正規化 <name-normalization>` するべきです。"

#: ../source/specifications/pyproject-toml.rst:173
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Version "
"<core-metadata-version>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` に対応する: :ref:`バージョン "
"<core-metadata-version>`"

#: ../source/specifications/pyproject-toml.rst:176
msgid ""
"The version of the project, as defined in the :ref:`Version specifier "
"specification <version-specifiers>`."
msgstr ""
":ref:`バージョン指定子仕様 <version-specifiers>` で定義されるものとしての、プ"
"ロジェクトのバージョン。"

#: ../source/specifications/pyproject-toml.rst:179
msgid "Users SHOULD prefer to specify already-normalized versions."
msgstr "ユーザは正規化済みのバージョンを指定するようにするべきです。"

#: ../source/specifications/pyproject-toml.rst:188
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Summary "
"<core-metadata-summary>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`要約 "
"<core-metadata-summary>`"

#: ../source/specifications/pyproject-toml.rst:191
msgid ""
"The summary description of the project in one line. Tools MAY error if this "
"includes multiple lines."
msgstr ""
"１行で書かれたプロジェクトに関する説明の要約。これが複数行に渡る場合には、"
"ツールはエラーを発生させても構いません。"

#: ../source/specifications/pyproject-toml.rst:200
msgid "TOML_ type: string or table"
msgstr "TOML_ 型: 文字列またはテーブル"

#: ../source/specifications/pyproject-toml.rst:201
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Description "
"<core-metadata-description>` and :ref:`Description-Content-Type <core-"
"metadata-description-content-type>`"
msgstr ""
"対応する `コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Description <core-metadata-description>` and :ref:`Description-Content-Type "
"<core-metadata-description-content-type>`"

#: ../source/specifications/pyproject-toml.rst:205
msgid "The full description of the project (i.e. the README)."
msgstr "プロジェクトの説明全体 (すなわち README)。"

#: ../source/specifications/pyproject-toml.rst:207
msgid ""
"The key accepts either a string or a table. If it is a string then it is a "
"path relative to ``pyproject.toml`` to a text file containing the full "
"description. Tools MUST assume the file's encoding is UTF-8. If the file "
"path ends in a case-insensitive ``.md`` suffix, then tools MUST assume the "
"content-type is ``text/markdown``. If the file path ends in a case-"
"insensitive ``.rst``, then tools MUST assume the content-type is ``text/x-"
"rst``. If a tool recognizes more extensions than this PEP, they MAY infer "
"the content-type for the user without specifying this key as ``dynamic``. "
"For all unrecognized suffixes when a content-type is not provided, tools "
"MUST raise an error."
msgstr ""
"このキーは文字列かテーブルを受け付けます。もし文字列なら、完全な説明を含むテ"
"キストファイルの位置を ``pyproject.toml`` からの相対パスで示したものです。"
"ツールの側ではこのファイルが UTF-8 でエンコードされているものと想定しなければ"
"なりません。ファイルパスが大文字小文字を問わず ``.md`` 拡張子で終わっている場"
"合は、ツールはそのファイルの content-type が ``text/markdown`` であるものと仮"
"定しなければなりません。ファイルパスが大文字小文字を問わず ``.rst`` で終わっ"
"ている場合は、ツールは content-type が ``text/x-rst`` であるものと仮定しなけ"
"ればなりません。この PEP で指定するよりも多くの拡張子をツールが認識するなら、"
"そのようなツールは、このキーを ``dynamic`` であると指定していなくても、ユーザ"
"のために content-type を推測しても構いません。content-type が与えられていない"
"場合には、全ての認識できない拡張子についてツールはエラーを発生させなければな"
"りません。"

#: ../source/specifications/pyproject-toml.rst:218
msgid ""
"The ``readme`` key may also take a table. The ``file`` key has a string "
"value representing a path relative to ``pyproject.toml`` to a file "
"containing the full description. The ``text`` key has a string value which "
"is the full description. These keys are mutually-exclusive, thus tools MUST "
"raise an error if the metadata specifies both keys."
msgstr ""
"``readme`` キーはその値がテーブルでも構いません。 ``file`` キーは、完全な説明"
"を含むファイルへの ``pyproject.toml`` ファイルからの相対パスを表現する文字列"
"を値として持ちます。 ``text`` キーは、完全な説明そのものである文字列を値に持"
"ちます。これらのキーは排他的にいずれかひとつしか使えないので、もしメタデータ"
"がこれら両方のキーを同時に指定していたらツールはエラーを発生させなければなり"
"ません。"

#: ../source/specifications/pyproject-toml.rst:225
msgid ""
"A table specified in the ``readme`` key also has a ``content-type`` key "
"which takes a string specifying the content-type of the full description. A "
"tool MUST raise an error if the metadata does not specify this key in the "
"table. If the metadata does not specify the ``charset`` parameter, then it "
"is assumed to be UTF-8. Tools MAY support other encodings if they choose to. "
"Tools MAY support alternative content-types which they can transform to a "
"content-type as supported by the :ref:`core metadata <core-metadata>`. "
"Otherwise tools MUST raise an error for unsupported content-types."
msgstr ""
"``readme`` キーに指定されたテーブルには、完全な説明の content-type を指定する"
"文字列を値とする ``content-type`` キーも含まれています。メタデータがこのキー"
"をテーブルの中で指定していない場合には、ツールはエラーを発生させなければなり"
"ません。メタデータで ``charset`` パラメータが指定されていない場合には、 "
"UTF-8 であるものと想定されます。ツールは各ツールが独自に選択した他のエンコー"
"ディングをサポートしても構いません。 :ref:`コアとなるメタデータ <core-"
"metadata>` によってサポートされている content-type に変換することができるので"
"あれば、ツールはそのような代替 content-type をサポートしても構いません。そう"
"でなければ、ツールはサポートしていない content-type に対してエラーを発生させ"
"なければなりません。"

#: ../source/specifications/pyproject-toml.rst:242
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Python <core-metadata-requires-python>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:"
"`Requires-Python <core-metadata-requires-python>`"

#: ../source/specifications/pyproject-toml.rst:245
msgid "The Python version requirements of the project."
msgstr "プロジェクトが要求する Python のバージョン。"

#: ../source/specifications/pyproject-toml.rst:254
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
#| "<core-metadata-license>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License-"
"Expression <core-metadata-license-expression>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`License <core-metadata-license>`"

#: ../source/specifications/pyproject-toml.rst:257
msgid ""
"Text string that is a valid SPDX :term:`license expression <License "
"Expression>`, as specified in :doc:`/specifications/license-expression`. "
"Tools SHOULD validate and perform case normalization of the expression."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:263
#, fuzzy
#| msgid "PyPA specifications"
msgid "Legacy specification"
msgstr "PyPA 仕様"

#: ../source/specifications/pyproject-toml.rst:265
msgid "TOML_ type: table"
msgstr "TOML_ 型: テーブル"

#: ../source/specifications/pyproject-toml.rst:266
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
#| "<core-metadata-license>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
"<core-metadata-license>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`License <core-metadata-license>`"

#: ../source/specifications/pyproject-toml.rst:269
#, fuzzy
#| msgid ""
#| "The table may have one of two keys. The ``file`` key has a string value "
#| "that is a file path relative to ``pyproject.toml`` to the file which "
#| "contains the license for the project. Tools MUST assume the file's "
#| "encoding is UTF-8. The ``text`` key has a string value which is the "
#| "license of the project.  These keys are mutually exclusive, so a tool "
#| "MUST raise an error if the metadata specifies both keys."
msgid ""
"The table may have one of two keys. The ``file`` key has a string value that "
"is a file path relative to :file:`pyproject.toml` to the file which contains "
"the license for the project. Tools MUST assume the file's encoding is UTF-8. "
"The ``text`` key has a string value which is the license of the project.  "
"These keys are mutually exclusive, so a tool MUST raise an error if the "
"metadata specifies both keys."
msgstr ""
"テーブルには二つのキーのうちのいずれか一つを書くことができます。 ``file`` "
"キーは、 ``pyproject.toml`` からプロジェクトのライセンス情報を含むファイルへ"
"の相対パスを値とする文字列です。ツールの側では、そのファイルのエンコーディン"
"グが UTF-8 であるものと仮定しなければなりません。 ``text`` キーは、プロジェク"
"トのライセンス条項そのものである文字列を値に取ります。これらのキーは相互に排"
"他的で、従って、両方のキーが指定されているメタデータについてツールの側ではエ"
"ラーを発生させなければなりません。"

#: ../source/specifications/pyproject-toml.rst:276
msgid ""
"The table subkeys were deprecated by :pep:`639` in favor of the string value."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:283
#: ../source/specifications/pyproject-toml.rst:366
#: ../source/specifications/pyproject-toml.rst:378
msgid "TOML_ type: array of strings"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/pyproject-toml.rst:284
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
#| "<core-metadata-license>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License-File "
"<core-metadata-license-file>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`License <core-metadata-license>`"

#: ../source/specifications/pyproject-toml.rst:287
msgid ""
"An array specifying paths in the project source tree relative to the project "
"root directory (i.e. directory containing :file:`pyproject.toml` or legacy "
"project configuration files, e.g. :file:`setup.py`, :file:`setup.cfg`, etc.) "
"to file(s) containing licenses and other legal notices to be distributed "
"with the package."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:293
msgid ""
"The strings MUST contain valid glob patterns, as specified in :doc:`/"
"specifications/glob-patterns`."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:296
msgid ""
"Patterns are relative to the directory containing :file:`pyproject.toml`,"
msgstr ""

#: ../source/specifications/pyproject-toml.rst:298
msgid ""
"Tools MUST assume that license file content is valid UTF-8 encoded text, and "
"SHOULD validate this and raise an error if it is not."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:301
msgid "Build tools:"
msgstr ""

#: ../source/specifications/pyproject-toml.rst:303
msgid ""
"MUST include all files matched by a listed pattern in all distribution "
"archives."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:305
msgid ""
"MUST list each matched file path under a License-File field in the Core "
"Metadata."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:308
msgid ""
"If the ``license-files`` key is present and is set to a value of an empty "
"array, then tools MUST NOT include any license files and MUST NOT raise an "
"error. If the ``license-files`` key is not defined, tools can decide how to "
"handle license files. For example they can choose not to include any files "
"or use their own logic to discover the appropriate files in the distribution."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:322
msgid "TOML_ type: Array of inline tables with string keys and values"
msgstr "TOML_ 型: 文字列のキー・バリュー組を伴ったインラインテーブルの配列"

#: ../source/specifications/pyproject-toml.rst:323
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Author <core-"
"metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :ref:"
"`Maintainer <core-metadata-maintainer>`, and :ref:`Maintainer-email <core-"
"metadata-maintainer-email>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Author <core-metadata-author>` ・ :ref:`Author-email <core-metadata-author-"
"email>` ・ :ref:`Maintainer <core-metadata-maintainer>` ・ :ref:`Maintainer-"
"email <core-metadata-maintainer-email>`"

#: ../source/specifications/pyproject-toml.rst:329
msgid ""
"The people or organizations considered to be the \"authors\" of the project. "
"The exact meaning is open to interpretation — it may list the original or "
"primary authors, current maintainers, or owners of the package."
msgstr ""
"プロジェクトの \"作者\" であると考えられる人々ないし組織。正確な意味はさまざ"
"まに解釈可能です — 元々のまたは主要な作者でも構わないし、現在の保守者やパッ"
"ケージのオーナでも構いません。"

#: ../source/specifications/pyproject-toml.rst:334
msgid ""
"The \"maintainers\" key is similar to \"authors\" in that its exact meaning "
"is open to interpretation."
msgstr ""
"\"maintainers\" キーは \"authors\" キーに似ていて、その正確な意味はさまざまに"
"解釈可能です。"

#: ../source/specifications/pyproject-toml.rst:337
msgid ""
"These keys accept an array of tables with 2 keys: ``name`` and ``email``. "
"Both values must be strings. The ``name`` value MUST be a valid email name "
"(i.e. whatever can be put as a name, before an email, in :rfc:`822`) and not "
"contain commas. The ``email`` value MUST be a valid email address. Both keys "
"are optional, but at least one of the keys must be specified in the table."
msgstr ""
"これらのキーは、 ``name`` と ``email`` のふたつのキーを伴ったテーブルの配列を"
"受け入れます。両方の値は文字列でなければなりません。 ``name`` の値は、電子"
"メールアドレスにおける正当な名前 (すなわち、 :rfc:`822` における電子メールア"
"ドレスのアドレス部分に前置できる名前なら何でも可) で、コンマを含まないもので"
"なければなりません。 ``email`` の値は、正当な電子メールアドレスでなければなり"
"ません。これらのキーは共に必須ではありませんが、少なくともいずれかのキーが"
"テーブル内で指定されていなければなりません。"

#: ../source/specifications/pyproject-toml.rst:344
msgid ""
"Using the data to fill in :ref:`core metadata <core-metadata>` is as follows:"
msgstr ""
"データを使って :ref:`コアとなるメタデータ <core-metadata>` に書き込むやり方は"
"次の通りです:"

#: ../source/specifications/pyproject-toml.rst:347
msgid ""
"If only ``name`` is provided, the value goes in :ref:`Author <core-metadata-"
"author>` or :ref:`Maintainer <core-metadata-maintainer>` as appropriate."
msgstr ""
"``name`` だけが与えられた場合には、その値を :ref:`Author <core-metadata-"
"author>` なり :ref:`Maintainer <core-metadata-maintainer>` なりに書き込みま"
"す。"

#: ../source/specifications/pyproject-toml.rst:350
msgid ""
"If only ``email`` is provided, the value goes in :ref:`Author-email <core-"
"metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-"
"email>` as appropriate."
msgstr ""
"``email`` だけの場合には、その値を :ref:`Author-email <core-metadata-author-"
"email>` なり :ref:`Maintainer-email <core-metadata-maintainer-email>` なりに"
"書き込みます。"

#: ../source/specifications/pyproject-toml.rst:354
msgid ""
"If both ``email`` and ``name`` are provided, the value goes in :ref:`Author-"
"email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-"
"maintainer-email>` as appropriate, with the format ``{name} <{email}>``."
msgstr ""
"``email`` と ``name`` の両方が与えられた場合には、 ``{name} <{email}>`` の"
"フォーマットで :ref:`Author-email <core-metadata-author-email>` なり :ref:"
"`Maintainer-email <core-metadata-maintainer-email>` なりに書き込みます。"

#: ../source/specifications/pyproject-toml.rst:358
msgid "Multiple values should be separated by commas."
msgstr "複数の値がある場合はコンマで区切るべきです。"

#: ../source/specifications/pyproject-toml.rst:367
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Keywords "
"<core-metadata-keywords>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Keywords <core-metadata-keywords`"

#: ../source/specifications/pyproject-toml.rst:370
msgid "The keywords for the project."
msgstr "プロジェクトに関するキーワード。"

#: ../source/specifications/pyproject-toml.rst:379
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Classifier "
"<core-metadata-classifier>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Classifier <core-metadata-classifier>`"

#: ../source/specifications/pyproject-toml.rst:382
msgid "Trove classifiers which apply to the project."
msgstr "プロジェクトに適合する Trove 分類子。"

#: ../source/specifications/pyproject-toml.rst:384
msgid ""
"The use of ``License ::`` classifiers is deprecated and tools MAY issue a "
"warning informing users about that. Build tools MAY raise an error if both "
"the ``license`` string value (translating to ``License-Expression`` metadata "
"field) and the ``License ::`` classifiers are used."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:396
msgid "TOML_ type: table with keys and values of strings"
msgstr "TOML_ 型: 文字列のキー・バリューを伴うテーブル"

#: ../source/specifications/pyproject-toml.rst:397
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Project-URL "
"<core-metadata-project-url>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Project-URL <core-metadata-project-url>`"

#: ../source/specifications/pyproject-toml.rst:400
msgid ""
"A table of URLs where the key is the URL label and the value is the URL "
"itself. See :ref:`well-known-project-urls` for normalization rules and well-"
"known rules when processing metadata for presentation."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:410
msgid "Entry points"
msgstr "エントリポイント"

#: ../source/specifications/pyproject-toml.rst:412
msgid ""
"TOML_ type: table (``[project.scripts]``, ``[project.gui-scripts]``, and "
"``[project.entry-points]``)"
msgstr ""
"TOML_ 型: table (``[project.scripts]`` ・ ``[project.gui-scripts]`` ・ "
"``[project.entry-points]``)"

#: ../source/specifications/pyproject-toml.rst:414
msgid ":ref:`Entry points specification <entry-points>`"
msgstr ":ref:`Entry points specification <entry-points>`"

#: ../source/specifications/pyproject-toml.rst:416
msgid ""
"There are three tables related to entry points. The ``[project.scripts]`` "
"table corresponds to the ``console_scripts`` group in the :ref:`entry points "
"specification <entry-points>`. The key of the table is the name of the entry "
"point and the value is the object reference."
msgstr ""
"みっつのテーブルがエントリポイントに関係しています。 ``[project.scripts]`` "
"テーブルは、 :ref:`エントリポイント仕様 <entry-points>` の中の "
"``console_scripts`` グループに対応しています。テーブル内のキーはエントリポイ"
"ントの名前であり、値は参照されるオブジェクトです。"

#: ../source/specifications/pyproject-toml.rst:422
msgid ""
"The ``[project.gui-scripts]`` table corresponds to the ``gui_scripts`` group "
"in the :ref:`entry points specification <entry-points>`. Its format is the "
"same as ``[project.scripts]``."
msgstr ""
"``[project.gui-scripts]`` テーブルは、 :ref:`エントリポイント仕様 <entry-"
"points>` の中の ``gui_scripts`` グループに対応します。そのフォーマットは "
"``[project.scripts]`` と同じです。"

#: ../source/specifications/pyproject-toml.rst:426
msgid ""
"The ``[project.entry-points]`` table is a collection of tables. Each sub-"
"table's name is an entry point group. The key and value semantics are the "
"same as ``[project.scripts]``. Users MUST NOT create nested sub-tables but "
"instead keep the entry point groups to only one level deep."
msgstr ""
"``[project.entry-points]`` テーブルは、テーブルの集合体です。それぞれのサブ"
"テーブルの名前は、ひとつのエントリポイントグループです。キーと値の意味すると"
"ころは ``[project.scripts]`` と同じです。ユーザはネストしたサブテーブルを作っ"
"てはならず、代わりにエントリポイントグループを１段階の深さに保つようにしなけ"
"ればなりません。"

#: ../source/specifications/pyproject-toml.rst:432
msgid ""
"Build back-ends MUST raise an error if the metadata defines a ``[project."
"entry-points.console_scripts]`` or ``[project.entry-points.gui_scripts]`` "
"table, as they would be ambiguous in the face of ``[project.scripts]`` and "
"``[project.gui-scripts]``, respectively."
msgstr ""
"メタデータの中に ``[project.entry-points.console_scripts]`` もしくは "
"``[project.entry-points.gui_scripts]`` というテーブルが定義されている場合は、"
"それぞれ ``[project.scripts]`` や ``[project.gui-scripts]`` と混同してしまう"
"といけないので、ビルド時のバックエンドがエラーを発生させなければなりません。"

#: ../source/specifications/pyproject-toml.rst:445
msgid ""
"TOML_ type: Array of :pep:`508` strings (``dependencies``), and a table with "
"values of arrays of :pep:`508` strings (``optional-dependencies``)"
msgstr ""
"TOML_ 型: :pep:`508` の文字列 (``dependencies``) の配列、および、 :pep:`508` "
"の文字列 (``optional-dependencies``) の配列の値を伴ったテーブル"

#: ../source/specifications/pyproject-toml.rst:448
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Dist <core-metadata-requires-dist>` and :ref:`Provides-Extra <core-metadata-"
"provides-extra>`"
msgstr ""
"対応する :ref:`コアとなるメタデータ <core-metadata>` フィールド: :ref:"
"`Requires-Dist <core-metadata-requires-dist>` および :ref:`Provides-Extra "
"<core-metadata-provides-extra>`"

#: ../source/specifications/pyproject-toml.rst:452
msgid "The (optional) dependencies of the project."
msgstr "(必須ではない) プロジェクトの依存関係。"

#: ../source/specifications/pyproject-toml.rst:454
msgid ""
"For ``dependencies``, it is a key whose value is an array of strings. Each "
"string represents a dependency of the project and MUST be formatted as a "
"valid :pep:`508` string. Each string maps directly to a :ref:`Requires-Dist "
"<core-metadata-requires-dist>` entry."
msgstr ""
"``dependencies`` には、文字列の配列が値であるようなキーです。それぞれの文字列"
"がそのプロジェクトの依存関係を表現していて、正当な :pep:`508` の文字列として"
"フォーマットされていなければなりません。それぞれの文字列は、 :ref:`Requires-"
"Dist <core-metadata-requires-dist>` エントリに直接にマップしています。"

#: ../source/specifications/pyproject-toml.rst:459
msgid ""
"For ``optional-dependencies``, it is a table where each key specifies an "
"extra and whose value is an array of strings. The strings of the arrays must "
"be valid :pep:`508` strings. The keys MUST be valid values for :ref:"
"`Provides-Extra <core-metadata-provides-extra>`. Each value in the array "
"thus becomes a corresponding :ref:`Requires-Dist <core-metadata-requires-"
"dist>` entry for the matching :ref:`Provides-Extra <core-metadata-provides-"
"extra>` metadata."
msgstr ""
"``optional-dependencies`` は、それぞれのキーが追加物で、その値が文字列の配列"
"であるようなテーブルです。文字列の配列は正当な :pep:`508` の文字列でなければ"
"なりません。キーは :ref:`Provides-Extra <core-metadata-provides-extra>` とし"
"てみた時に正当な値でなければなりません。従って、配列の中のそれぞれの値は、一"
"致する :ref:`Provides-Extra <core-metadata-provides-extra>` メタデータに対応"
"する :ref:`Requires-Dist <core-metadata-requires-dist>` のエントリになりま"
"す。"

#: ../source/specifications/pyproject-toml.rst:475
msgid "TOML_ type: array of string"
msgstr "TOML_ 型: 文字列の配列"

#: ../source/specifications/pyproject-toml.rst:476
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Dynamic "
"<core-metadata-dynamic>`"
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` フィールドに対応する: :ref:`ダイ"
"ナミック <core-metadata-dynamic>` フィールド"

#: ../source/specifications/pyproject-toml.rst:479
msgid ""
"Specifies which keys listed by this PEP were intentionally unspecified so "
"another tool can/will provide such metadata dynamically. This clearly "
"delineates which metadata is purposefully unspecified and expected to stay "
"unspecified compared to being provided via tooling later on."
msgstr ""
"この PEP に列挙されたキーのどれを意図的に指定しないままにすることで他のツール"
"が動的にそのようなメタデータを準備することができる/しようとするかを規定しま"
"す。後述するツールによる設定に比較して、どのメタデータが目的を持って未指定に"
"されていて未指定のままであることを期待されているのかについて明確に描き出しま"
"す。"

#: ../source/specifications/pyproject-toml.rst:485
msgid ""
"A build back-end MUST honour statically-specified metadata (which means the "
"metadata did not list the key in ``dynamic``)."
msgstr ""
"ビルド用のバックエンドは、静的に指定されたメタデータ (つまり ``dynamic`` 内に"
"列挙されたキーではないメタデータ) を尊重しなければなりません。"

#: ../source/specifications/pyproject-toml.rst:487
msgid ""
"A build back-end MUST raise an error if the metadata specifies ``name`` in "
"``dynamic``."
msgstr ""
"メタデータで ``dynamic`` 内に ``name`` が指定されている場合には、ビルド用バッ"
"クエンドがエラーを発生させなければなりません。"

#: ../source/specifications/pyproject-toml.rst:489
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Required\", then the metadata MUST specify the key statically or list it "
"in ``dynamic`` (build back-ends MUST raise an error otherwise, i.e. it "
"should not be possible for a required key to not be listed somehow in the "
"``[project]`` table)."
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` の仕様において、あるキーが \"必須"
"である\" ものとして挙げられている場合には、メタデータはそのキーを静的に指定す"
"るか、または、 ``dynamic`` 内に指定するかしなければなりません (どちらでもない"
"場合にはビルドバックエンドがエラーを発生させなければなりません、すなわち、必"
"須のフィールドが ``[project]`` テーブルの中にどんな形でも存在していないという"
"ことは不可能であるべきです)。"

#: ../source/specifications/pyproject-toml.rst:494
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Optional\", the metadata MAY list it in ``dynamic`` if the expectation is "
"a build back-end will provide the data for the key later."
msgstr ""
":ref:`コアとなるメタデータ <core-metadata>` の仕様で、あるキーを \"必須ではな"
"い\" ものとして挙げている場合には、後でビルド用バックエンドがそのキー用のデー"
"タを提供するという期待が持てるのであればメタデータではそのキーを ``dynamic`` "
"の中に挙げても構いません。"

#: ../source/specifications/pyproject-toml.rst:498
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key "
"statically as well as being listed in ``dynamic``."
msgstr ""
"メタデータ内で、あるキーが静的に指定されていて、かつ、 ``dynamic`` にも挙げて"
"ある場合には、ビルド用バックエンドはエラーを発生させなければなりません。"

#: ../source/specifications/pyproject-toml.rst:500
msgid ""
"If the metadata does not list a key in ``dynamic``, then a build back-end "
"CANNOT fill in the requisite metadata on behalf of the user (i.e. "
"``dynamic`` is the only way to allow a tool to fill in metadata and the user "
"must opt into the filling in)."
msgstr ""
"メタデータ内で、あるキーを ``dynamic`` の中に挙げなかった場合は、ビルド用バッ"
"クエンドがユーザに代わって必要なメタデータを挿入することはできません (すなわ"
"ち、ツールがメタデータを挿入できるのは ``dynamic`` の中だけであり、かつ、ユー"
"ザがそうするようにオプトインしていなければならないということです) 。"

#: ../source/specifications/pyproject-toml.rst:504
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key in "
"``dynamic`` but the build back-end was unable to determine the data for it "
"(omitting the data, if determined to be the accurate value, is acceptable)."
msgstr ""
"あるキーが ``dynamic`` の中で指定されたメタデータで、しかし、ビルド用バックエ"
"ンドがそこに挿入するべきデータを決定することができない時は、ビルド用バックエ"
"ンドはエラーを発生させなければなりません (正確な値であると判断した場合はデー"
"タを省略することが許容されます) 。"

#: ../source/specifications/pyproject-toml.rst:514
msgid "Arbitrary tool configuration: the ``[tool]`` table"
msgstr "任意のツールの設定: ``[tool]`` テーブル"

#: ../source/specifications/pyproject-toml.rst:516
msgid ""
"The ``[tool]`` table is where any tool related to your Python project, not "
"just build tools, can have users specify configuration data as long as they "
"use a sub-table within ``[tool]``, e.g. the `flit <https://pypi.python.org/"
"pypi/flit>`_ tool would store its configuration in ``[tool.flit]``."
msgstr ""
"``[tool]`` テーブルは、ビルドツールに限らずその Python プロジェクトに関係する"
"ツールであれば何であっても、 ``[tool]`` 内のサブテーブルを使う限りはユーザが"
"設定データを指定することができるもので、例えば `flit <https://pypi.python."
"org/pypi/flit>`_ ツールならその設定を ``[tool.flit]`` に格納しておくでしょ"
"う。"

#: ../source/specifications/pyproject-toml.rst:522
msgid ""
"A mechanism is needed to allocate names within the ``tool.*`` namespace, to "
"make sure that different projects do not attempt to use the same sub-table "
"and collide. Our rule is that a project can use the subtable ``tool.$NAME`` "
"if, and only if, they own the entry for ``$NAME`` in the Cheeseshop/PyPI."
msgstr ""
"``tool.*`` という名前空間の中に名称を確保するには、他のプロジェクトが同じサブ"
"テーブルを使おうと試みて衝突してしまうようなことにならないようにするメカニズ"
"ムが必要です。我々のルールは、あるプロジェクトが Cheeseshop/PyPI に "
"``$NAME`` というエントリを保有している場合、その場合に限って、 ``tool."
"$NAME`` なるサブテーブルを使うことができるというものです。"

#: ../source/specifications/pyproject-toml.rst:533
msgid ""
"May 2016: The initial specification of the ``pyproject.toml`` file, with "
"just a ``[build-system]`` containing a ``requires`` key and a ``[tool]`` "
"table, was approved through :pep:`518`."
msgstr ""
"2016年5月: :pep:`518` を通じて、 ``pyproject.toml`` ファイルの初期の仕様、つ"
"まり、 ``[build-system]`` が ``requires`` キーと ``[tool]`` テーブルしか含ん"
"でいないものが承認されました。"

#: ../source/specifications/pyproject-toml.rst:537
msgid ""
"November 2020: The specification of the ``[project]`` table was approved "
"through :pep:`621`."
msgstr ""
"2020年11月: :pep:`621` を通じて、 ``[project]`` テーブルの仕様が承認されまし"
"た。"

#: ../source/specifications/pyproject-toml.rst:540
msgid ""
"December 2024: The ``license`` key was redefined, the ``license-files`` key "
"was added and ``License::`` classifiers were deprecated through :pep:`639`."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:7
msgid "Recording installed projects"
msgstr "インストール済みのプロジェクトを記録する"

#: ../source/specifications/recording-installed-packages.rst:9
msgid ""
"This document specifies a common format of recording information about "
"Python :term:`projects <Project>` installed in an environment. A common "
"metadata format allows tools to query, manage or uninstall projects, "
"regardless of how they were installed."
msgstr ""
"この説明文書では、ある環境にインストールされた Python :term:`プロジェクト "
"<Project>` に関する情報を記録するための共通フォーマットについて指定します。共"
"通メタデータフォーマットがあれば、プロジェクトがどのようにインストールされた"
"かに関わりなく、ツールがプロジェクトについて問い合わせを行い、管理し、あるい"
"はアンインストールすることが可能になります。"

#: ../source/specifications/recording-installed-packages.rst:14
msgid ""
"Almost all information is optional. This allows tools outside the Python "
"ecosystem, such as Linux package managers, to integrate with Python tooling "
"as much as possible. For example, even if an installer cannot easily provide "
"a list of installed files in a format specific to Python tooling, it should "
"still record the name and version of the installed project."
msgstr ""
"ほとんど全ての情報が必須ではないものです。これによって、Linux のパッケージ管"
"理機構のような Python のエコシステムの外にあるツールを Python のツールの使い"
"方と最大限に統合することができます。例えば、ある Python ツールに特化した"
"フォーマットで書かれたインストール済みファイルのリストをインストーラがすぐに"
"は提供できない場合でさえも、インストール済みのプロジェクトの名前とバージョン"
"を記録するべきです。"

#: ../source/specifications/recording-installed-packages.rst:25
msgid ""
"Each project installed from a distribution must, in addition to files, "
"install a \"``.dist-info``\" directory located alongside importable modules "
"and packages (commonly, the ``site-packages`` directory)."
msgstr ""
"配布物からインストールされた各プロジェクトは、一連のファイルの他に、インポー"
"ト可能なモジュールやパッケージの隣に位置する \"``.dist-info``\" ディレクトリ"
"もインストールします (通常は ``site-packages`` ディレクトリ) 。"

#: ../source/specifications/recording-installed-packages.rst:29
msgid ""
"This directory is named as ``{name}-{version}.dist-info``, with ``name`` and "
"``version`` fields corresponding to :ref:`core-metadata`. Both fields must "
"be normalized (see the :ref:`name normalization specification <name-"
"normalization>` and the :ref:`version normalization specification <version-"
"specifiers-normalization>`), and replace dash (``-``) characters with "
"underscore (``_``) characters, so the ``.dist-info`` directory always has "
"exactly one dash (``-``) character in its stem, separating the ``name`` and "
"``version`` fields."
msgstr ""
"このディレクトリは ``{name}-{version}.dist-info`` という名前で、 ``name`` と "
"``version`` のフィールドが :ref:`コアとなるメタデータ <core-metadata>` に対応"
"しています。両方のフィールドは正規化 (各フィールドにおける正規化の定義につい"
"ては、それぞれ :ref:`名称正規化の仕様 <name-normalization>` と :ref:`バージョ"
"ン正規化の仕様 <version-specifiers-normalization>` を見てください) されていな"
"ければならず、かつ、ダッシュ (``-``) の文字をアンダースコア (``_``) で置き換"
"えることで ``.dist-info`` ディレクトリが常に正確にひとつだけのダッシュ (``-"
"``) 文字をそのファイル名基幹部に持ち、それによって ``name`` と ``version`` "
"フィールドを分割していなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:37
msgid ""
"Historically, tools have failed to replace dot characters or normalize case "
"in the ``name`` field, or not perform normalization in the ``version`` "
"field. Tools consuming ``.dist-info`` directories should expect those fields "
"to be unnormalized, and treat them as equivalent to their normalized "
"counterparts. New tools that write ``.dist-info`` directories MUST normalize "
"both ``name`` and ``version`` fields using the rules described above, and "
"existing tools are encouraged to start normalizing those fields."
msgstr ""
"歴史的には、ツール類はドット文字の置換や ``name`` フィールドにおける大文字小"
"文字の正規化に失敗すしたり、 ``version`` フィールドの正規化をしなかったり、と"
"いうことを繰り返してきました。 ``.dist-info`` ディレクトリを利用する側のツー"
"ルは、そのようなフィールドが正規化されていることを期待するべきではなく、それ"
"らを対応する正規化済みのものと同じものだと考えて取り扱うべきです。 ``.dist-"
"info`` ディレクトリに書き込むツールをこれから作るなら、そのツールは ``name`` "
"と ``version`` の両方のフィールドを上記の規則に従って正規化しなければならず、"
"既存のツールもこれらのフィールドの正規化を始めることが推奨されています。"

#: ../source/specifications/recording-installed-packages.rst:47
msgid ""
"The ``.dist-info`` directory's name is formatted to unambiguously represent "
"a distribution as a filesystem path. Tools presenting a distribution name to "
"a user should avoid using the normalized name, and instead present the "
"specified name (when needed prior to resolution to an installed package), or "
"read the respective fields in Core Metadata, since values listed there are "
"unescaped and accurately reflect the distribution. Libraries should provide "
"API for such tools to consume, so tools can have access to the unnormalized "
"name when displaying distribution information."
msgstr ""
"``.dist-info`` ディレクトリの名前は、曖昧さのない形で配布物をファイルシステム"
"上のパスとして表現するためにフォーマットされています。配布物の名前をユーザに"
"提示するツールは、正規化された名前を使うのを避け、 (インストール済みパッケー"
"ジへの名前解決より前に必要な場合には) 代わりに指定された名前を提示するか、ま"
"たは、コアとなるメタデータの適切なフィールドの値はエスケープ処理もされておら"
"ず配布物を正確に反映しているのでそこから読み取った名前を提示するべきです。ラ"
"イブラリは、配布物の情報を表示する時にツールが正規化されていない名前にアクセ"
"スできるように、そのようなツール群が利用できるような API を提供するべきです。"

#: ../source/specifications/recording-installed-packages.rst:56
msgid ""
"This ``.dist-info`` directory may contain the following files, described in "
"detail below:"
msgstr ""
"この ``.dist-info`` ディレクトリには、以下に詳細を述べるこれらのファイルを置"
"くことができます:"

#: ../source/specifications/recording-installed-packages.rst:59
msgid "``METADATA``: contains project metadata"
msgstr "``METADATA``: プロジェクトのメタデータを含みます"

#: ../source/specifications/recording-installed-packages.rst:60
msgid "``RECORD``: records the list of installed files."
msgstr "``RECORD``: インストールされるファイルを列挙して記録します。"

#: ../source/specifications/recording-installed-packages.rst:61
msgid ""
"``INSTALLER``: records the name of the tool used to install the project."
msgstr ""
"``INSTALLER``: プロジェクトをインストールするのに使われるツールの名前を記録し"
"ます。"

#: ../source/specifications/recording-installed-packages.rst:62
msgid "``entry_points.txt``: see :ref:`entry-points` for details"
msgstr ""
"``entry_points.txt``: 詳細については :ref:`entry-points` を見てください"

#: ../source/specifications/recording-installed-packages.rst:63
msgid "``direct_url.json``: see :ref:`direct-url` for details"
msgstr "``direct_url.json``: 詳細については :ref:`direct-url` を見てください"

#: ../source/specifications/recording-installed-packages.rst:65
msgid ""
"The ``METADATA`` file is mandatory. All other files may be omitted at the "
"installing tool's discretion. Additional installer-specific files may be "
"present."
msgstr ""
"``METADATA`` ファイルは必須です。これ以外の全てのファイルは、インストールツー"
"ルの最良で省略可能です。インストーラ独自のファイルが他に存在しても構いませ"
"ん。"

#: ../source/specifications/recording-installed-packages.rst:69
#, fuzzy
#| msgid ""
#| "This ``.dist-info`` directory may contain the following files, described "
#| "in detail below:"
msgid ""
"This :file:`.dist-info/` directory may contain the following directories, "
"described in detail below:"
msgstr ""
"この ``.dist-info`` ディレクトリには、以下に詳細を述べるこれらのファイルを置"
"くことができます:"

#: ../source/specifications/recording-installed-packages.rst:72
msgid ":file:`licenses/`: contains license files."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:73
msgid ":file:`sboms/`: contains Software Bill-of-Materials files (SBOMs)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:77
msgid ""
"The :ref:`binary-distribution-format` specification describes additional "
"files that may appear in the ``.dist-info`` directory of a :term:`Wheel`. "
"Such files may be copied to the ``.dist-info`` directory of an installed "
"project."
msgstr ""
":ref:`binary-distribution-format` 仕様では、 :term:`Wheel` の ``.dist-info`` "
"ディレクトリに出現するかもしれない追加のファイルについて記述しています。その"
"ようなファイルをインストールされたプロジェクトの ``.dist-info`` ディレクトリ"
"にコピーしても構いません。"

#: ../source/specifications/recording-installed-packages.rst:82
msgid ""
"The previous versions of this specification also specified a ``REQUESTED`` "
"file. This file is now considered a tool-specific extension, but may be "
"standardized again in the future. See `PEP 376 <https://www.python.org/dev/"
"peps/pep-0376/#requested>`_ for its original meaning."
msgstr ""
"この仕様の以前のバージョンでは、 ``REQUESTED`` ファイルも指定していました。こ"
"のファイルは、現在ではツール特有の拡張であると見做されていますが、いつか再び"
"標準化されるかもしれません。その元々の意味するところについては、 `PEP 376 "
"<https://www.python.org/dev/peps/pep-0376/#requested>`_ を見てください。"

#: ../source/specifications/recording-installed-packages.rst:89
msgid "The METADATA file"
msgstr "METADATA ファイル"

#: ../source/specifications/recording-installed-packages.rst:91
msgid ""
"The ``METADATA`` file contains metadata as described in the :ref:`core-"
"metadata` specification, version 1.1 or greater."
msgstr ""
"``METADATA`` ファイルには、 :ref:`コアとなるメタデータ <core-metadata>` 仕様"
"のバージョン 1.1 またはそれ以降で記述されているようなメタデータを含みます。"

#: ../source/specifications/recording-installed-packages.rst:94
msgid ""
"The ``METADATA`` file is mandatory. If it cannot be created, or if required "
"core metadata is not available, installers must report an error and fail to "
"install the project."
msgstr ""
"``METADATA`` ファイルは必須のものです。このファイルを作成することができない場"
"合や、必須のコアとなるメタデータが入手できない場合には、インストーラはエラー"
"を発生させてプロジェクトのインストールを失敗させなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:100
msgid "The RECORD file"
msgstr "RECORD ファイル"

#: ../source/specifications/recording-installed-packages.rst:102
msgid ""
"The ``RECORD`` file holds the list of installed files. It is a CSV file "
"containing one record (line) per installed file."
msgstr ""
"``RECORD`` ファイルには、インストールされたファイル群を列挙します。CSV ファイ"
"ルで、インストールされたファイルを１行に一つずつ書き込みます。"

#: ../source/specifications/recording-installed-packages.rst:105
msgid ""
"The CSV dialect must be readable with the default ``reader`` of Python's "
"``csv`` module:"
msgstr ""
"CSV の亜種としては、 Python の ``csv`` モジュールの ``reader`` で読めるもので"
"なければなりません:"

#: ../source/specifications/recording-installed-packages.rst:108
msgid "field delimiter: ``,`` (comma),"
msgstr "フィールド区切り文字: ``,`` (コンマ)、"

#: ../source/specifications/recording-installed-packages.rst:109
msgid "quoting char: ``\"`` (straight double quote),"
msgstr "引用符: ``\"`` (ストレートダブルクォート)、"

#: ../source/specifications/recording-installed-packages.rst:110
msgid "line terminator: either ``\\r\\n`` or ``\\n``."
msgstr "行末文字: ``\\r\\n`` か ``\\n`` のいずれか一方。"

#: ../source/specifications/recording-installed-packages.rst:112
msgid ""
"Each record is composed of three elements: the file's **path**, the **hash** "
"of the contents, and its **size**."
msgstr ""
"各レコードは３個の要素から構成されます: ファイルの **パス** 、内容の **ハッ"
"シュ値** 、そして、その **サイズ** です。"

#: ../source/specifications/recording-installed-packages.rst:115
msgid ""
"The *path* may be either absolute, or relative to the directory containing "
"the ``.dist-info`` directory (commonly, the ``site-packages`` directory). On "
"Windows, directories may be separated either by forward- or backslashes (``/"
"`` or ``\\``)."
msgstr ""
"*パス* は ``.dist-info`` ディレクトリを含むディレクトリ (通常は ``site-"
"packages`` ディレクトリ) へのパスで、絶対パスでも相対パスでも構いません。 "
"Windows では、ディレクトリはスラッシュで区切ってもバックスラッシュで区切って"
"も構いません (``/`` または ``\\``) 。"

#: ../source/specifications/recording-installed-packages.rst:120
msgid ""
"The *hash* is either an empty string or the name of a hash algorithm from :"
"py:data:`hashlib.algorithms_guaranteed`, followed by the equals character "
"``=`` and the digest of the file's contents, encoded with the urlsafe-base64-"
"nopad encoding (:py:func:`base64.urlsafe_b64encode(digest) <base64."
"urlsafe_b64encode()>` with trailing ``=`` removed)."
msgstr ""
"*hash* は、空文字列または ``hashlib.algorithms_guaranteed`` から取ったハッ"
"シュアルゴリズムの名前の後ろに等号 ``=`` を付けて、ファイルの内容のハッシュ値"
"を urlsafe-base64-nopad エンコーディング (``base64.urlsafe_b64encode(digest) "
"<base64.urlsafe_b64encode()>`` の結果から末尾の ``=`` を取り除いたもの) で記"
"したものです。"

#: ../source/specifications/recording-installed-packages.rst:125
msgid ""
"The *size* is either the empty string, or file's size in bytes, as a base 10 "
"integer."
msgstr ""
"*size* は、空文字列か、または、ファイルサイズを 10 進数のバイト数で書いたもの"
"です。"

#: ../source/specifications/recording-installed-packages.rst:128
msgid ""
"For any file, either or both of the *hash* and *size* fields may be left "
"empty. Commonly, entries for ``.pyc`` files and the ``RECORD`` file itself "
"have empty *hash* and *size*. For other files, leaving the information out "
"is discouraged, as it prevents verifying the integrity of the installed "
"project."
msgstr ""
"どのファイルについても、 *hash* フィールドと *size* フィールドの片方もしくは"
"両方が空欄になっていても構いません。通常は、 ``.pyc`` ファイルと ``RECORDS`` "
"ファイル自身については *hash* フィールドと *size* フィールドの両方が空欄に"
"なっています。その他のファイルについては、インストールされたプロジェクトに関"
"する完全性を検証するために情報を与えておくことが推奨されています。"

#: ../source/specifications/recording-installed-packages.rst:134
msgid ""
"If the ``RECORD`` file is present, it must list all installed files of the "
"project, except ``.pyc`` files corresponding to ``.py`` files listed in "
"``RECORD``, which are optional. Notably, the contents of the ``.dist-info`` "
"directory (including the ``RECORD`` file itself) must be listed. Directories "
"should not be listed."
msgstr ""
"もし ``RECORD`` ファイルが存在するなら、 ``RECORD`` に記入された ``.py`` ファ"
"イルに対応する ``.pyc`` ファイルを記入することはオプションですが、それを除い"
"てそのプロジェクトからインストールされたファイルの全てについて列挙していなけ"
"ればなりません。特に、 ``.dist-info`` ディレクトリ の内容 (``RECORD`` ファイ"
"ル自身を含む) については、書いておかなければなりません。ディレクトリについて"
"は記入してはなりません。"

#: ../source/specifications/recording-installed-packages.rst:141
msgid ""
"To completely uninstall a package, a tool needs to remove all files listed "
"in ``RECORD``, all ``.pyc`` files (of all optimization levels) corresponding "
"to removed ``.py`` files, and any directories emptied by the uninstallation."
msgstr ""
"パッケージを完全にアンインストールするためには、ツールは、 ``RECORD`` に列挙"
"された全てのファイルと、 ``.py`` ファイルに対応する (あらゆる最適化状態の) "
"``.pyc`` ファイルと、アンインストールによって空になったすべてのディレクトリを"
"削除する必要があります。"

#: ../source/specifications/recording-installed-packages.rst:146
msgid "Here is an example snippet of a possible ``RECORD`` file::"
msgstr "ありうる ``RECORD`` ファイルの一部を切り出した例をここに掲げます::"

#: ../source/specifications/recording-installed-packages.rst:165
msgid ""
"If the ``RECORD`` file is missing, tools that rely on ``.dist-info`` must "
"not attempt to uninstall or upgrade the package. (This restriction does not "
"apply to tools that rely on other sources of information, such as system "
"package managers in Linux distros.)"
msgstr ""
"``RECORD`` ファイルが存在しない場合、 ``.dist-info`` に依存するツールは、アン"
"インストールやアップグレードを試みてはなりません。(この制約は、 Linux ディス"
"トロにおけるシステムのパッケージ管理機構のような、それ以外の情報源に依存する"
"ツールには適用されません。)"

#: ../source/specifications/recording-installed-packages.rst:172
msgid ""
"It is *strongly discouraged* for an installed package to modify itself (e."
"g., store cache files under its namespace in ``site-packages``). Changes "
"inside ``site-packages`` should be left to specialized installer tools such "
"as pip. If a package is nevertheless modified in this way, then the "
"``RECORD`` must be updated, otherwise uninstalling the package will leave "
"unlisted files in place (possibly resulting in a zombie namespace package)."
msgstr ""
"インストール済みのパッケージが自分自身を修正すること (例えば、 ``site-"
"packages`` 内の名前空間の下にキャッシュファイルを保存すること) は、 *強い非推"
"奨* 事項です。 ``site-packages`` の内側での変更は、 pip のような特別なインス"
"トールツールに委ねられるべきです。それにも関わらず、パッケージがこのようなや"
"り方で修正された場合には必ず ``RECORD`` を更新しなければならず、そうしなけれ"
"ばパッケージをアンインストールの時に、リストに洩れているファイルがその場に残"
"されてしまうでしょう (おそらくはゾンビ状態の名前空間パッケージになるでしょ"
"う)。"

#: ../source/specifications/recording-installed-packages.rst:181
msgid "The INSTALLER file"
msgstr "INSTALLER ファイル"

#: ../source/specifications/recording-installed-packages.rst:183
msgid ""
"If present, ``INSTALLER`` is a single-line text file naming the tool used to "
"install the project. If the installer is executable from the command line, "
"``INSTALLER`` should contain the command name. Otherwise, it should contain "
"a printable ASCII string."
msgstr ""
"もし存在するなら、 ``INSTALLER`` は、プロジェクトのインストールに使われたツー"
"ルを名指しする１行のテキストファイルです。インストーラがコマンドラインから起"
"動されるなら、 ``INSTALLER`` はそのコマンドの名前を含んでいるべきです。そうで"
"なければ印刷可能な ASCII 文字を含んでいるべきです。"

#: ../source/specifications/recording-installed-packages.rst:189
msgid "The file can be terminated by zero or more ASCII whitespace characters."
msgstr ""
"ファイルは、0個またはそれ以上の ASCII 空白文字で終端することができます。"

#: ../source/specifications/recording-installed-packages.rst:191
msgid "Here are examples of two possible ``INSTALLER`` files::"
msgstr "``INSTALLER`` ファイルについて、二つの可能な例を示します::"

#: ../source/specifications/recording-installed-packages.rst:199
msgid ""
"This value should be used for informational purposes only. For example, if a "
"tool is asked to uninstall a project but finds no ``RECORD`` file, it may "
"suggest that the tool named in ``INSTALLER`` may be able to do the "
"uninstallation."
msgstr ""
"この値は情報提供目的にのみ使用されるべきです。例えば、あるツールでプロジェク"
"トのアンインストールをしようとしたが ``RECORD`` ファイルを見つけられなかった"
"場合には、そのツールは ``INSTALLER`` ファイルに書いてある (別の) ツールを使え"
"ばアンインストールができるかもしれないと示唆しても構いません。"

#: ../source/specifications/recording-installed-packages.rst:206
msgid "The entry_points.txt file"
msgstr "entry_points.txt ファイル"

#: ../source/specifications/recording-installed-packages.rst:208
msgid ""
"This file MAY be created by installers to indicate when packages contain "
"components intended for discovery and use by other code, including console "
"scripts and other applications that the installer has made available for "
"execution."
msgstr ""
"インストーラが (他者から) 実行できる状態にするコンソールスクリプトや他のアプ"
"リケーションを含めて、 (他者から) 発見されたり他のソースコードから利用された"
"りすることを意図したコンポーネントを当該パッケージが含んでいる場合には、イン"
"ストーラがその由を表示するためにこのファイルを作っても構いません。"

#: ../source/specifications/recording-installed-packages.rst:213
msgid "Its detailed specification is at :ref:`entry-points`."
msgstr "その詳細な仕様は :ref:`entry-points` にあります。"

#: ../source/specifications/recording-installed-packages.rst:217
msgid "The direct_url.json file"
msgstr "direct_url.json ファイル"

#: ../source/specifications/recording-installed-packages.rst:219
msgid ""
"This file MUST be created by installers when installing a distribution from "
"a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""
"このファイルは、要求事項が指定するダイレクト URL (VCS の URL を含む) から配布"
"物をインストールする際に、インストーラによって生成されなければなりません。"

#: ../source/specifications/recording-installed-packages.rst:225
msgid "Its detailed specification is at :ref:`direct-url`."
msgstr "その詳細な仕様は :ref:`direct-url` にあります。"

#: ../source/specifications/recording-installed-packages.rst:229
msgid "The :file:`licenses/` subdirectory"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:231
msgid ""
"If the metadata version is 2.4 or greater and one or more ``License-File`` "
"fields is specified, the :file:`.dist-info/` directory MUST contain a :file:"
"`licenses/` subdirectory which MUST contain the files listed in the "
"``License-File`` fields in the :file:`METADATA` file at their respective "
"paths relative to the :file:`licenses/` directory. Any files in this "
"directory MUST be copied from wheels by the install tools."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:240
#, fuzzy
#| msgid "The .dist-info directory"
msgid "The :file:`sboms/` subdirectory"
msgstr ".dist-info ディレクトリ"

#: ../source/specifications/recording-installed-packages.rst:242
msgid ""
"All files contained within the :file:`.dist-info/sboms/` directory MUST be "
"Software Bill-of-Materials (SBOM) files that describe software contained "
"within the installed package. Any files in this directory MUST be copied "
"from wheels by the install tools."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:249
msgid "Intentionally preventing changes to installed packages"
msgstr "インストール済みのパッケージ群への変更を意図的に防ぐ"

#: ../source/specifications/recording-installed-packages.rst:251
msgid ""
"In some cases (such as when needing to manage external dependencies in "
"addition to Python ecosystem dependencies), it is desirable for a tool that "
"installs packages into a Python environment to ensure that other tools are "
"not used to uninstall or otherwise modify that installed package, as doing "
"so may cause compatibility problems with the wider environment."
msgstr ""
"(Python エコシステムでの依存関係に加えて外部の依存関係を管理する必要がある場"
"合など) いくつかの場合には、 Python 環境にパッケージをインストールするツール"
"が、そのインストール済みパッケージを他のツールがアンインストールも修正もして"
"いないことを、もしそんなことをしていればより広範な環境に互換性問題を引き起こ"
"しかねないので、しっかりと確認することが望ましいです。"

#: ../source/specifications/recording-installed-packages.rst:257
msgid "To achieve this, affected tools should take the following steps:"
msgstr ""
"これを達成するために、影響を被るツール群は次のような段階を踏むべきです:"

#: ../source/specifications/recording-installed-packages.rst:259
msgid ""
"Rename or remove the ``RECORD`` file to prevent changes via other tools (e."
"g. appending a suffix to create a non-standard ``RECORD.tool`` file if the "
"tool itself needs the information, or omitting the file entirely if the "
"package contents are tracked and managed via other means)"
msgstr ""
"他のツール類を経由した変更を抑止するために、``RECORD`` ファイルを別の名前にす"
"るか、削除するか (このファイル内の情報が必要なら、例えば標準的でない名前の "
"``RECORD.tool`` というファイルを作成するために拡張子を追加すること、あるい"
"は、パッケージの内容物を他の手段で追跡・管理しているのであればファイルを完全"
"に除外しておくこと) してください"

#: ../source/specifications/recording-installed-packages.rst:263
msgid ""
"Write an ``INSTALLER`` file indicating the name of the tool that should be "
"used to manage the package (this allows ``RECORD``-aware tools to provide "
"better error notices when asked to modify affected packages)"
msgstr ""
"そのパッケージを管理するのに使用されるべきツールの名前を示すように"
"``INSTALLER`` ファイルを書いてください (これによって、 ``RECORD`` を参照でき"
"るツール群が影響を被るパッケージを修正するように言われた時により良いエラー通"
"知を提供できます)"

#: ../source/specifications/recording-installed-packages.rst:267
msgid ""
"Python runtime providers may also prevent inadvertent modification of "
"platform provided packages by modifying the default Python package "
"installation scheme to use a location other than that used by platform "
"provided packages (while also ensuring both locations appear on the default "
"Python import path)."
msgstr ""
"Python ランタイムの提供者は、デフォルトの Python パッケージのインストレーショ"
"ンスキームを修正してプラットフォームが提供するパッケージ群で使われるものとは"
"別の場所を使うようにすることで、プラットフォームが提供するパッケージ群を意図"
"せずに修正してしまうことを防いでも構いません。"

#: ../source/specifications/recording-installed-packages.rst:272
msgid ""
"In some circumstances, it may be desirable to block even installation of "
"additional packages via Python-specific tools. For these cases refer to :ref:"
"`externally-managed-environments`"
msgstr ""
"いくつかの環境では、 Python 特有のツール群を経由した追加パッケージのインス"
"トールさえもブロックすることが望ましいかもしれません。このようなケースについ"
"ては :ref:`外部から管理される環境 <externally-managed-environments>` を参照し"
"てください"

#: ../source/specifications/recording-installed-packages.rst:280
msgid ""
"June 2009: The original version of this specification was approved through :"
"pep:`376`.  At the time, it was known as the *Database of Installed Python "
"Distributions*."
msgstr ""
"2009年6月: :pep:`376` を通じてこの仕様の元々のバージョンが承認されました。当"
"時は、 *インストール済みの Python 配布物のデータベース* という名前でした。"

#: ../source/specifications/recording-installed-packages.rst:283
msgid ""
"March 2020: The specification of the ``direct_url.json`` file was approved "
"through :pep:`610`. It is only mentioned on this page; see :ref:`direct-url` "
"for the full definition."
msgstr ""
"2020年3月: :pep:`610` を通じて ``direct_url.json`` ファイルの仕様が承認されま"
"した。これは、このページで言及されるのみです; 完全な定義については :ref:"
"`direct-url` を見てください。"

#: ../source/specifications/recording-installed-packages.rst:286
msgid ""
"September 2020: Various amendments and clarifications were approved through :"
"pep:`627`."
msgstr ""
"2020年9月: :pep:`627` を通じて、さまざまな修正や明確化が承認されました。"

#: ../source/specifications/schemas/index.rst:4
#, fuzzy
#| msgid "Hybrid schemes"
msgid "PyPA schemas"
msgstr "混成型の方法"

#: ../source/specifications/schemas/index.rst:6
#, fuzzy
#| msgid "``direct_url.json``: see :ref:`direct-url` for details"
msgid "`direct_url.json <direct-url.schema.json>`_"
msgstr "``direct_url.json``: 詳細については :ref:`direct-url` を見てください"

#: ../source/specifications/schemas/index.rst:7
msgid "`build-details.json <build-details-v1.0.schema.json>`_"
msgstr ""

#: ../source/specifications/schemas/index.rst:8
msgid "`pylock.toml <pylock.schema.json>`_"
msgstr ""

#: ../source/specifications/section-distribution-formats.rst:3
msgid "Package Distribution File Formats"
msgstr "パッケージ配布物のファイルフォーマット"

#: ../source/specifications/section-distribution-metadata.rst:3
msgid "Package Distribution Metadata"
msgstr "パッケージ配布物のメタデータ"

#: ../source/specifications/section-installation-metadata.rst:3
msgid "Package Installation Metadata"
msgstr "パッケージのインストールに関するメタデータ"

#: ../source/specifications/section-package-indices.rst:3
msgid "Package Index Interfaces"
msgstr "パッケージインデックスのインタフェース"

#: ../source/specifications/section-python-description-formats.rst:3
#, fuzzy
#| msgid "Python versions over time"
msgid "Python Description Formats"
msgstr "時系列で見たPythonバージョン"

#: ../source/specifications/section-reproducible-environments.rst:3
#, fuzzy
#| msgid "Virtual Environment"
msgid "Reproducible Environments"
msgstr "仮想環境"

#: ../source/specifications/simple-repository-api.rst:6
msgid "Simple repository API"
msgstr "シンプルなリポジトリ API"

#: ../source/specifications/simple-repository-api.rst:8
#, fuzzy
#| msgid ""
#| "The keywords \"**MUST**\", \"**MUST NOT**\", \"**REQUIRED**\", "
#| "\"**SHALL**\", \"**SHALL NOT**\", \"**SHOULD**\", \"**SHOULD NOT**\", "
#| "\"**RECOMMENDED**\", \"**MAY**\", and \"**OPTIONAL**\"\" in this document "
#| "are to be interpreted as described in :rfc:`RFC 2119 <2119>`."
msgid ""
"The keywords \"**MUST**\", \"**MUST NOT**\", \"**REQUIRED**\", "
"\"**SHALL**\", \"**SHALL NOT**\", \"**SHOULD**\", \"**SHOULD NOT**\", "
"\"**RECOMMENDED**\", \"**MAY**\", and \"**OPTIONAL**\"\" in this document "
"are to be interpreted as described in :rfc:`2119`."
msgstr ""
"この説明文書では、 \"**MUST**\" ・ \"**MUST NOT**\" ・ \"**REQUIRED**\" ・ "
"\"**SHALL**\" ・ \"**SHALL NOT**\", ・ **SHOULD**\" ・ \"**SHOULD NOT**\" ・ "
"\"**RECOMMENDED**\" ・ \"**MAY**\" ・ \"**OPTIONAL**\"\" を :rfc:`RFC 2119 "
"<2119>` で記述された意味に解釈します。"

#: ../source/specifications/simple-repository-api.rst:13
#, fuzzy
#| msgid ""
#| "The interface for querying available package versions and retrieving "
#| "packages from an index server comes in two forms: HTML and JSON."
msgid ""
"The interface for querying available package versions and retrieving "
"packages from an index server comes in two forms: :ref:`HTML <simple-"
"repository-html-serialization>` and :ref:`JSON <json-serialization>`."
msgstr ""
"利用可能なパッケージバージョンを問い合わせたり、インデックスサーバからパッ"
"ケージを取り出したりするためのインターフェースは、二つの形式: HTML と JSON で"
"もたらされます。"

#: ../source/specifications/simple-repository-api.rst:21
#, fuzzy
#| msgid "Base HTML API"
msgid "Base API"
msgstr "基本となる HTML API <Base HTML API>"

#: ../source/specifications/simple-repository-api.rst:23
#, fuzzy
#| msgid ""
#| "A repository that implements the simple API is defined by its base URL, "
#| "this is the top level URL that all additional URLs are below. The API is "
#| "named the \"simple\" repository due to the fact that PyPI's base URL is "
#| "``https://pypi.org/simple/``."
msgid ""
"A repository that implements the simple API is defined by its base URL. This "
"is the top level URL that all additional URLs are below. The API is named "
"the \"simple\" repository due to the fact that PyPI's base URL is ``https://"
"pypi.org/simple/``."
msgstr ""
"シンプルな API を実装するリポジトリはベースとなる URL によって定義されます"
"が、これは、すべての追加的な URL 群がその下に連なるようなトップレベルの URL "
"です。このような API は、 PyPI のベースとなる URL が ``https://pypi.org/"
"simple/`` であるという事実に即して、 \"シンプル <simple>\" リポジトリと名付け"
"られます。"

#: ../source/specifications/simple-repository-api.rst:28
msgid ""
"All subsequent URLs in this document will be relative to this base URL (so "
"given PyPI's URL, a URL of ``/foo/`` would be ``https://pypi.org/simple/foo/"
"``."
msgstr ""
"この説明文書でこのあと出てくる URL 群はすべて、このベース URL <base URL> から"
"の相対的なものです (したがって、PyPI に関する URL なら、 ``/foo/`` は "
"``https://pypi.org/simple/foo/`` のことです。"

#: ../source/specifications/simple-repository-api.rst:33
msgid "Normalized Names"
msgstr "正規化された名称"

#: ../source/specifications/simple-repository-api.rst:35
msgid ""
"This spec references the concept of a \"normalized\" project name. As per :"
"ref:`the name normalization specification <name-normalization>` the only "
"valid characters in a name are the ASCII alphabet, ASCII numbers, ``.``, ``-"
"``, and ``_``. The name should be lowercased with all runs of the characters "
"``.``, ``-``, or ``_`` replaced with a single ``-`` character. This can be "
"implemented in Python with the ``re`` module::"
msgstr ""
"この仕様は、 \"正規化された\" プロジェクト名称の概念を参照しています。 :ref:`"
"名称正規化仕様 <name-normalization>` によれば、名称における正当な文字は、 "
"ASCII アルファベット・ ASCII 数字・ ``.`` ・ ``-`` ・ ``_`` だけです。名称"
"は、 `.`` ・ ``-`` ・ ``_`` がいくつ連続していてもそれを単一の ``-`` 文字に置"
"き換え、小文字で統一されているべきです。これは Python の ``re`` モジュールで"
"実装されています::"

#: ../source/specifications/simple-repository-api.rst:50
msgid "Versioning PyPI's Simple API"
msgstr "PyPI のシンプルな API にバージョンを付与する"

#: ../source/specifications/simple-repository-api.rst:52
#, fuzzy
#| msgid ""
#| "This spec proposes the inclusion of a meta tag on the responses of every "
#| "successful request to a simple API page, which contains a name attribute "
#| "of \"pypi:repository-version\", and a content that is a :ref:`version "
#| "specifiers specification <version-specifiers>` compatible version number, "
#| "which is further constrained to ONLY be Major.Minor, and none of the "
#| "additional features supported by :ref:`the version specifiers "
#| "specification <version-specifiers>`."
msgid ""
"This spec proposes the inclusion of a meta tag on the responses of every "
"successful request to a simple API page, which contains a name attribute of "
"``pypi:repository-version``, and a content that is a :ref:`version "
"specifiers specification <version-specifiers>` compatible version number, "
"which is further constrained to ONLY be Major.Minor, and none of the "
"additional features supported by :ref:`the version specifiers specification "
"<version-specifiers>`."
msgstr ""
"この仕様は、シンプルな API へのリクエストが成功するたびにそのレスポンスにメタ"
"タグを含めるように提案するもので、つまり、 \"pypi:repository-version\" という"
"名称のアトリビューションを含み、その内容が :ref:`バージョン指定子仕様 "
"<version-specifiers>` と互換性のあるバージョン番号であるが Major.Minor だけで"
"あるようにさらに制約されたものであって、 :ref:`バージョン指定子仕様 <version-"
"specifiers>` ではサポートされる追加的な機能を一つも含まないものです。"

#: ../source/specifications/simple-repository-api.rst:60
#, fuzzy
#| msgid "This would end up looking like::"
msgid "This would end up looking like:"
msgstr "これは、結局こんなふうに見えることでしょう::"

#: ../source/specifications/simple-repository-api.rst:66
msgid "When interpreting the repository version:"
msgstr "リポジトリのバージョンを翻訳する時:"

#: ../source/specifications/simple-repository-api.rst:68
msgid ""
"Incrementing the major version is used to signal a backwards incompatible "
"change such that existing clients would no longer be expected to be able to "
"meaningfully use the API."
msgstr ""
"メジャーバージョンの増加は、既存のクライアントがその API を意味ある形で使うこ"
"とができるとはもはや期待できないような後方互換性のない変更のシグナルとして使"
"われます。"

#: ../source/specifications/simple-repository-api.rst:71
msgid ""
"Incrementing the minor version is used to signal a backwards compatible "
"change such that existing clients would still be expected to be able to "
"meaningfully use the API."
msgstr ""
"マイナーバージョンの増加は、既存のクライアントが依然として意味ある形で API を"
"使うことができることが期待されるような、後方互換性を保つ変更のシグナルとして"
"使われます。"

#: ../source/specifications/simple-repository-api.rst:75
msgid ""
"It is left up to the discretion of any future specs as to what specifically "
"constitutes a backwards incompatible vs compatible change beyond the broad "
"suggestion that existing clients will be able to \"meaningfully\" continue "
"to use the API, and can include adding, modifying, or removing existing "
"features."
msgstr ""
"将来の仕様の選択は、既存のクライアントが引き続き \"意味ある形で\" APIを使うこ"
"とができるであろう、そして、既存の機能に対する追加・修正・削除ができるであろ"
"うという幅広い示唆を越えて、特に後方互換性の有無を構成するものに委ねられてい"
"ます。"

#: ../source/specifications/simple-repository-api.rst:81
msgid ""
"It is expectation of this spec that the major version will never be "
"incremented, and any future major API evolutions would utilize a different "
"mechanism for API evolution. However the major version is included to "
"disambiguate with future versions (e.g. a hypothetical simple api v2 that "
"lived at /v2/, but which would be confusing if the repository-version was "
"set to a version >= 2)."
msgstr ""
"メジャーバージョンを増加することは考えられず、将来発生する API の進化は API "
"の進化における異なったメカニズムを通じて実現されるであろうというのが、この仕"
"様の期待するところです。しかしながら、メジャーバージョンは、将来のバージョン"
"との違い (例えば、 /v2/ を使う仮説としてのシンプル API v2 、しかしこれはリポ"
"ジトリバージョンが version >= 2 に設定されれば混乱を招くかもしれません) を明"
"らかにするためにここに含まれているのです。"

#: ../source/specifications/simple-repository-api.rst:89
msgid "API Version History"
msgstr ""

#: ../source/specifications/simple-repository-api.rst:91
msgid ""
"This section contains only an abbreviated history of changes, as marked by "
"the API version number. For a full history of changes including changes made "
"before API versioning, see :ref:`History <simple-repository-history>`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:95
msgid "API version 1.0: Initial version of the API, declared with :pep:`629`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:96
msgid ""
"API version 1.1: Added ``versions``, ``files[].size``, and ``files[].upload-"
"time`` metadata to the JSON serialization, declared with :pep:`700`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:98
msgid ""
"API version 1.2: Added repository \"tracks\" metadata, declared with :pep:"
"`708`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:99
msgid "API version 1.3: Added provenance metadata, declared with :pep:`740`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:100
msgid "API version 1.4: Added status markers, declared with :pep:`792`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:103
msgid "Clients"
msgstr "クライアント"

#: ../source/specifications/simple-repository-api.rst:105
msgid ""
"Clients interacting with the simple API **SHOULD** introspect each response "
"for the repository version, and if that data does not exist **MUST** assume "
"that it is version 1.0."
msgstr ""
"シンプルな API と相互作用するクライアントは、応答を受け取るたびにそのリポジト"
"リバージョンをよく **検査するべき** で、もし存在しなければバージョン 1.0 であ"
"るものと **仮定しなければなりません** 。"

#: ../source/specifications/simple-repository-api.rst:109
msgid ""
"When encountering a major version greater than expected, clients **MUST** "
"hard fail with an appropriate error message for the user."
msgstr ""
"想定していたよりも大きなメジャーバージョンに遭遇した時には、クライアントは、"
"ユーザ向けの適切なエラーメッセージと共に **ハードフェイルをしなければなりませ"
"ん** 。"

#: ../source/specifications/simple-repository-api.rst:112
msgid ""
"When encountering a minor version greater than expected, clients **SHOULD** "
"warn users with an appropriate message."
msgstr ""
"想定していたよりも大きなマイナーバージョンに遭遇した時には、クライアントは、"
"適切なメッセージと共にユーザに対して **警告するべき** です。"

#: ../source/specifications/simple-repository-api.rst:115
msgid ""
"Clients **MAY** still continue to use feature detection in order to "
"determine what features a repository uses."
msgstr ""
"クライアントは、リポジトリがどんな機能を使っているかを判断するために、さらに"
"機能探索 <feature detection> を **継続しても構いません** 。"

#: ../source/specifications/simple-repository-api.rst:121
#, fuzzy
#| msgid "JSON Serialization"
msgid "HTML Serialization"
msgstr "JSON シリアル化"

#: ../source/specifications/simple-repository-api.rst:125
#, fuzzy
#| msgid ""
#| "The following constraints apply to all JSON serialized responses "
#| "described in this spec:"
msgid ""
"The following constraints apply to all HTML serialized responses described "
"in this spec:"
msgstr ""
"後述の制約は、この仕様で記述されたすべての JSON シリアル化応答に適用されます:"

#: ../source/specifications/simple-repository-api.rst:128
msgid "All HTML responses **MUST** be a valid HTML5 document."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:129
msgid ""
"HTML responses **MAY** contain one or more ``meta`` tags in the ``<head>`` "
"section. The semantics of these tags are defined below."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:133
#: ../source/specifications/simple-repository-api.rst:428
msgid "Project List"
msgstr "プロジェクトのリスト"

#: ../source/specifications/simple-repository-api.rst:135
#, fuzzy
#| msgid ""
#| "Within a repository, the root URL (``/`` for this spec which represents "
#| "the base URL) **MUST** be a valid HTML5 page with a single anchor element "
#| "per project in the repository. The text of the anchor tag **MUST** be the "
#| "name of the project and the href attribute **MUST** link to the URL for "
#| "that particular project. As an example::"
msgid ""
"Within a repository, the root URL (``/`` for this spec which represents the "
"base URL) **MUST** be a valid HTML5 page with a single anchor element per "
"project in the repository."
msgstr ""
"リポジトリ内では、ルート URL <root URL> (この文脈ではルート URL <root URL> を"
"表現する ``/`` のこと) は、正当な HTML5 ページであってリポジトリ内のプロジェ"
"クト毎にひとつのアンカー要素を持っていなければ **なりません** 。アンカータグ"
"のテキストはプロジェクトの名称でなければならず、 href アトリビュートはそのプ"
"ロジェクトの URL にリンクされていなければ **なりません** 。例としては::"

#: ../source/specifications/simple-repository-api.rst:139
#, fuzzy
#| msgid ""
#| "Within a repository, the root URL (``/`` for this spec which represents "
#| "the base URL) **MUST** be a valid HTML5 page with a single anchor element "
#| "per project in the repository. The text of the anchor tag **MUST** be the "
#| "name of the project and the href attribute **MUST** link to the URL for "
#| "that particular project. As an example::"
msgid ""
"The text of each anchor tag **MUST** be the name of the project and the "
"``href`` attribute **MUST** link to the URL for that particular project. As "
"an example:"
msgstr ""
"リポジトリ内では、ルート URL <root URL> (この文脈ではルート URL <root URL> を"
"表現する ``/`` のこと) は、正当な HTML5 ページであってリポジトリ内のプロジェ"
"クト毎にひとつのアンカー要素を持っていなければ **なりません** 。アンカータグ"
"のテキストはプロジェクトの名称でなければならず、 href アトリビュートはそのプ"
"ロジェクトの URL にリンクされていなければ **なりません** 。例としては::"

#: ../source/specifications/simple-repository-api.rst:156
#: ../source/specifications/simple-repository-api.rst:473
msgid "Project Detail"
msgstr "プロジェクトの詳細"

#: ../source/specifications/simple-repository-api.rst:158
msgid ""
"Below the root URL is another URL for each individual project contained "
"within a repository. The format of this URL is ``/<project>/``, where the "
"``<project>`` is replaced by the normalized name for that project."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:164
msgid ""
"For example, a project named \"HolyGrail\" would have a URL like ``/"
"holygrail/``."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:167
msgid ""
"The project detail URL must respond with a valid HTML5 page with a single "
"anchor element per file for the project. The ``href`` attribute **MUST** be "
"a URL that links to the location of the file for download, and the text of "
"the anchor tag **MUST** match the final path component (the filename) of the "
"URL."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:172
#, fuzzy
#| msgid ""
#| "The repository **SHOULD** provide the hash of the Core Metadata file as "
#| "the ``data-dist-info-metadata`` attribute's value using the syntax "
#| "``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name "
#| "of the hash function used, and ``<hashvalue>`` is the hex encoded digest. "
#| "The repository **MAY** use ``true`` as the attribute's value if a hash is "
#| "unavailable."
msgid ""
"Each file URL **SHOULD** include a hash in the form of a URL fragment with "
"the following syntax: ``#<hashname>=<hashvalue>``, where ``<hashname>`` is "
"the lowercase name of the hash function (such as ``sha256``) and "
"``<hashvalue>`` is the hex encoded digest."
msgstr ""
"リポジトリは、 ``<hashname>`` がハッシュ関数の小文字で書いた名称で "
"``hashvalue`` が16進数に符号化されたハッシュ値であるとして "
"``<hashname>=<hashvalue>`` という書式を使って、 ``data-dist-info-metadata`` "
"アトリビュートの値としてコアとなるメタデータのファイルのハッシュ値を **提供す"
"るべきです** 。ハッシュ値を利用できない場合には、リポジトリはアトリビュートの"
"値として ``true`` を **使っても構いません** 。"

#: ../source/specifications/simple-repository-api.rst:177
msgid ""
"In addition to the above, the following constraints are placed on the API:"
msgstr "上記に加えて、以下の制約が API に課せられます:"

#: ../source/specifications/simple-repository-api.rst:179
msgid ""
"All URLs which respond with an HTML5 page **MUST** end with a ``/`` and the "
"repository **SHOULD** redirect the URLs without a ``/`` to add a ``/`` to "
"the end."
msgstr ""
"HTML5 ページで応答するすべての URL は ``/`` で終わるものでなければならず、リ"
"ポジトリは ``/`` で終わらない URL の最後に ``/`` を加えたものへリダイレクト "
"**するべき** です。"

#: ../source/specifications/simple-repository-api.rst:183
msgid ""
"URLs may be either absolute or relative as long as they point to the correct "
"location."
msgstr ""
"URL は、間違いのないロケーションを指し示している限りは絶対パスであっても相対"
"パスであっても構いません。"

#: ../source/specifications/simple-repository-api.rst:186
msgid ""
"There are no constraints on where the files must be hosted relative to the "
"repository."
msgstr ""
"ファイル群が置かれている場所が、リポジトリに対して相対的な場所のどこであるか"
"については制約条件はありません。"

#: ../source/specifications/simple-repository-api.rst:189
msgid ""
"There may be any other HTML elements on the API pages as long as the "
"required anchor elements exist."
msgstr ""
"要求されているアンケー要素が存在している限り、API ページ上にどのような他の "
"HTML 要素があっても構いません。"

#: ../source/specifications/simple-repository-api.rst:192
msgid ""
"Repositories **MAY** redirect unnormalized URLs to the canonical normalized "
"URL (e.g. ``/Foobar/`` may redirect to ``/foobar/``), however clients **MUST "
"NOT** rely on this redirection and **MUST** request the normalized URL."
msgstr ""
"リポジトリは、正規化されていない URL を正統で正規化された URL にリダイレクト"
"しても **構いません** (例えば、 ``/Foobar/`` を ``/foobar/`` にリダイレクトし"
"てもよい) が、クライアントの側ではこのリダイレクト機能に **依存してはならず"
"** 、正規化された URL に対してリクエストを **送らなければなりません** 。"

#: ../source/specifications/simple-repository-api.rst:197
msgid ""
"Repositories **SHOULD** choose a hash function from one of the ones "
"guaranteed to be available via the :py:mod:`hashlib` module in the Python "
"standard library (currently ``md5``, ``sha1``, ``sha224``, ``sha256``, "
"``sha384``, ``sha512``). The current recommendation is to use ``sha256``."
msgstr ""
"レジストリは、 Python の標準ライブラリの :py:mod:`hashlib` モジュール経由で利"
"用可能であると保証されたハッシュ関数の中から一つを **選択するべきです** (現時"
"点では、 ``md5`` ・ ``sha1`` ・ ``sha224`` ・ ``sha256`` ・ ``sha384`` ・ "
"``sha512``)。現時点では、 ``sha256`` の使用が推奨されています。"

#: ../source/specifications/simple-repository-api.rst:202
msgid ""
"If there is a GPG signature for a particular distribution file it **MUST** "
"live alongside that file with the same name with a ``.asc`` appended to it. "
"So if the file ``/packages/HolyGrail-1.0.tar.gz`` existed and had an "
"associated signature, the signature would be located at ``/packages/"
"HolyGrail-1.0.tar.gz.asc``."
msgstr ""
"特定の配布物ファイルに GPG 署名があれば、その配布物ファイルの名前に ``.asc`` "
"を追加したファイル名で **共存させなければなりません** 。だから、 ``/packages/"
"HolyGrail-1.0.tar.gz`` が存在していて署名が結びついていれば、そのsと名は ``/"
"packages/HolyGrail-1.0.tar.gz.asc`` という名前であるはずです。"

#: ../source/specifications/simple-repository-api.rst:208
msgid ""
"A repository **MAY** include a ``data-core-metadata`` attribute on a file "
"link."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:211
#, fuzzy
#| msgid ""
#| "The repository **SHOULD** provide the hash of the Core Metadata file as "
#| "the ``data-dist-info-metadata`` attribute's value using the syntax "
#| "``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name "
#| "of the hash function used, and ``<hashvalue>`` is the hex encoded digest. "
#| "The repository **MAY** use ``true`` as the attribute's value if a hash is "
#| "unavailable."
msgid ""
"The repository **SHOULD** provide the hash of the Core Metadata file as the "
"``data-core-metadata`` attribute's value using the syntax "
"``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name of "
"the hash function used, and ``<hashvalue>`` is the hex encoded digest. The "
"repository **MAY** use ``true`` as the attribute's value if a hash is "
"unavailable."
msgstr ""
"リポジトリは、 ``<hashname>`` がハッシュ関数の小文字で書いた名称で "
"``hashvalue`` が16進数に符号化されたハッシュ値であるとして "
"``<hashname>=<hashvalue>`` という書式を使って、 ``data-dist-info-metadata`` "
"アトリビュートの値としてコアとなるメタデータのファイルのハッシュ値を **提供す"
"るべきです** 。ハッシュ値を利用できない場合には、リポジトリはアトリビュートの"
"値として ``true`` を **使っても構いません** 。"

#: ../source/specifications/simple-repository-api.rst:217
msgid ""
"A repository **MAY** include a ``data-dist-info-metadata`` attribute on a "
"file link."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:220
msgid ""
"Index clients **MAY** consume this key if present, as a legacy fallback for "
"``data-core-metadata``."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:225
msgid ""
"``data-dist-info-metadata`` was standardized with :pep:`658` and renamed to "
"``data-core-metadata`` with :pep:`714`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:228
msgid ""
"A repository **MAY** include a ``data-gpg-sig`` attribute on a file link "
"with a value of either ``true`` or ``false`` to indicate whether or not "
"there is a GPG signature. Repositories that do this **SHOULD** include it on "
"every link."
msgstr ""
"リポジトリは、 GPG 署名が存在するか否かを示す ``true`` か ``false`` を値にと"
"る ``data-gpg-sig`` アトリビュートをファイルリンクの中に含んでいても **構いま"
"せん** 。これを行うリポジトリは、全てのリンクについて **行うべきです** 。"

#: ../source/specifications/simple-repository-api.rst:232
#, fuzzy
#| msgid ""
#| "A repository **MAY** include a ``data-requires-python`` attribute on a "
#| "file link. This exposes the :ref:`core-metadata-requires-python` metadata "
#| "field for the corresponding release. Where this is present, installer "
#| "tools **SHOULD** ignore the download when installing to a Python version "
#| "that doesn't satisfy the requirement. For example::"
msgid ""
"A repository **MAY** include a ``data-requires-python`` attribute on a file "
"link. This exposes the :ref:`core-metadata-requires-python` metadata field "
"for the corresponding release. Where this is present, installer tools "
"**SHOULD** ignore the download when installing to a Python version that "
"doesn't satisfy the requirement. For example:"
msgstr ""
"リポジトリは、ファイルリンクの中に ``data-requires-python`` アトリビュートを"
"含んでいても **構いません** 。これは、対応するリリース用の :ref:`core-"
"metadata-requires-python` メタデータを表示するものです。これが存在するなら、"
"その要求を満足しないバージョンの Python 環境へインストールしている場合には、"
"インストールツール群はダウンロードしたものを **無視するべき** です。例えば::"

#: ../source/specifications/simple-repository-api.rst:242
msgid ""
"In the attribute value, < and > have to be HTML encoded as ``&lt;`` and "
"``&gt;``, respectively."
msgstr ""
"アトリビュートの値においては、 < や > は順に ``&lt;`` や ``&gt;`` へと HTML "
"エンコードされなければなりません。"

#: ../source/specifications/simple-repository-api.rst:245
msgid ""
"A repository **MAY** include a ``data-yanked`` attribute on a file link."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:247
#, fuzzy
#| msgid ""
#| "Links in the simple repository **MAY** have a ``data-yanked`` attribute "
#| "which may have no value, or may have an arbitrary string as a value. The "
#| "presence of a ``data-yanked`` attribute **SHOULD** be interpreted as "
#| "indicating that the file pointed to by this particular link has been "
#| "\"Yanked\", and should not generally be selected by an installer, except "
#| "under specific scenarios."
msgid ""
"The ``data-yanked`` attribute may have no value, or may have an arbitrary "
"string as a value. The presence of a ``data-yanked`` attribute **SHOULD** be "
"interpreted as indicating that the file pointed to by this particular link "
"has been \"Yanked\", and should not generally be selected by an installer, "
"except under specific scenarios."
msgstr ""
"シンプルなリポジトリの中のリンク群は、値を持たないか任意の文字列を値に取る "
"``data-yanked`` アトリビュートを持っていても **構いません** 。 ``data-"
"yanked`` アトリビュートが存在していれば、この特定のリンクによって指し示された"
"ファイルが \"ヤンクされた <Yanked>\" ものだと解釈される **べきであって** 、特"
"定のシナリオ下を除けば一般的にはインストーラによって選択されるべきものではあ"
"りません。"

#: ../source/specifications/simple-repository-api.rst:253
#, fuzzy
#| msgid ""
#| "The value of the ``data-yanked`` attribute, if present, is an arbitrary "
#| "string that represents the reason for why the file has been yanked. Tools "
#| "that process the simple repository API **MAY** surface this string to end "
#| "users."
msgid ""
"The value of the ``data-yanked`` attribute, if present, is an arbitrary "
"string that represents the reason for why the file has been yanked."
msgstr ""
"``data-yanked`` アトリビュートの値は、もし値が存在するなら、そのファイルがヤ"
"ンクされた理由を表現する任意の文字列です。シンプルなリポジトリ API を処理する"
"ツール類は、エンドユーザ向けにその文字列を表示しても **構いません** 。"

#: ../source/specifications/simple-repository-api.rst:258
#: ../source/specifications/simple-repository-api.rst:601
msgid ""
"The semantics of how tools should handle yanked files is described in :ref:"
"`file-yanking`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:261
msgid ""
"A repository **MAY** include a ``data-provenance`` attribute on a file link. "
"The value of this attribute **MUST** be a fully qualified URL, signaling "
"that the file's provenance can be found at that URL. This URL **MUST** "
"represent a `secure origin <https://www.chromium.org/Home/chromium-security/"
"prefer-secure-origins-for-powerful-new-features/>`_."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:268
msgid "The ``data-provenance`` attribute was added with API version 1.3."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:272
msgid ""
"The format of the linked provenance is defined in :ref:`index-hosted-"
"attestations`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:274
msgid ""
"A repository **MAY** include ``pypi:project-status`` and ``pypi:project-"
"status-reason`` meta tags on the response itself."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:277
msgid ""
"The value of ``pypi:project-status`` **MUST** be a valid project status "
"marker, while the value of ``pypi:project-status-reason`` **MUST** be an "
"arbitrary string if present."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:283
#: ../source/specifications/simple-repository-api.rst:493
msgid ""
"The set of valid project status markers and their semantics is described in :"
"ref:`project-status-markers`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:288
msgid ""
"The ``pypi:project-status`` and ``pypi:project-status-reason`` meta tags "
"were added with API version 1.4."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:294
msgid "Serve Distribution Metadata in the Simple Repository API"
msgstr "シンプルな API で配布物のメタデータを提供する"

#: ../source/specifications/simple-repository-api.rst:296
msgid ""
"In a simple repository's project page, each anchor tag pointing to a "
"distribution **MAY** have a ``data-dist-info-metadata`` attribute. The "
"presence of the attribute indicates the distribution represented by the "
"anchor tag **MUST** contain a Core Metadata file that will not be modified "
"when the distribution is processed and/or installed."
msgstr ""
"簡明なリポジトリのプロジェクトページでは、配布物を指し示すアンカータグは、そ"
"れぞれ、 ``data-dist-info-metadata`` アトリビュートを **持っていても構いませ"
"ん** 。このアトリビュートが存在していることで、そのアンカータグが提示する配布"
"物が、その配布物が処理されたりインストールされたりしても変更されないであろう"
"コアとなるメタデータのファイルを **持っていなければならない** ことを示しま"
"す。"

#: ../source/specifications/simple-repository-api.rst:302
msgid ""
"If a ``data-dist-info-metadata`` attribute is present, the repository "
"**MUST** serve the distribution's Core Metadata file alongside the "
"distribution with a ``.metadata`` appended to the distribution's file name. "
"For example, the Core Metadata of a distribution served at ``/files/"
"distribution-1.0-py3.none.any.whl`` would be located at ``/files/"
"distribution-1.0-py3.none.any.whl.metadata``. This is similar to how :ref:"
"`the base HTML API specification <simple-repository-api-base>` specifies the "
"GPG signature file's location."
msgstr ""
"もし ``data-dist-info-metadata`` アトリビュートが存在するなら、リポジトリは、"
"配布物の名称に ``.metadata`` を追加したファイル名で配布物のコアとなるメタデー"
"タのファイルを配布物と共に **提供しなければなりません** 。例えば、 ``/files/"
"distribution-1.0-py3.none.any.whl`` が提供されている場所で提供される配布物の"
"コアとなるメタデータは、 ``/files/distribution-1.0-py3.none.any.whl."
"metadata`` という場所に置かれることになるでしょう。これは、 :ref:`基本となる "
"HTML API の仕様 <simple-repository-api-base>` で GPG 署名のファイルの場所の指"
"定するやり方と似ています。"

#: ../source/specifications/simple-repository-api.rst:311
msgid ""
"The repository **SHOULD** provide the hash of the Core Metadata file as the "
"``data-dist-info-metadata`` attribute's value using the syntax "
"``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name of "
"the hash function used, and ``<hashvalue>`` is the hex encoded digest. The "
"repository **MAY** use ``true`` as the attribute's value if a hash is "
"unavailable."
msgstr ""
"リポジトリは、 ``<hashname>`` がハッシュ関数の小文字で書いた名称で "
"``hashvalue`` が16進数に符号化されたハッシュ値であるとして "
"``<hashname>=<hashvalue>`` という書式を使って、 ``data-dist-info-metadata`` "
"アトリビュートの値としてコアとなるメタデータのファイルのハッシュ値を **提供す"
"るべきです** 。ハッシュ値を利用できない場合には、リポジトリはアトリビュートの"
"値として ``true`` を **使っても構いません** 。"

#: ../source/specifications/simple-repository-api.rst:319
msgid "Backwards Compatibility"
msgstr "後方互換性"

#: ../source/specifications/simple-repository-api.rst:321
msgid ""
"If an anchor tag lacks the ``data-dist-info-metadata`` attribute, tools are "
"expected to revert to their current behaviour of downloading the "
"distribution to inspect the metadata."
msgstr ""
"アンカータグに ``data-sidt-info-metadata`` アトリビュートがない場合、ツール群"
"は、配布物をダウンロードするというその時点の動作を反転して、メタデータを調べ"
"るという動作に変更することが期待されています。"

#: ../source/specifications/simple-repository-api.rst:325
msgid ""
"Older tools not supporting the new ``data-dist-info-metadata`` attribute are "
"expected to ignore the attribute and maintain their current behaviour of "
"downloading the distribution to inspect the metadata. This is similar to how "
"prior ``data-`` attribute additions expect existing tools to operate."
msgstr ""
"新しい ``data-dist-info-metadata`` アトリビュートをサポートしてない古めのツー"
"ル群は、このアトリビュートを無視することを期待されており、メタデータを検査す"
"るために配布物をダウンロードするという現在の動作を維持することを期待されてい"
"ます。これは、先の ``data-`` アトリビュート追加の際に、既存のツール群が期待さ"
"れた動作と似ています。"

#: ../source/specifications/simple-repository-api.rst:334
msgid "JSON-based Simple API for Python Package Indexes"
msgstr "Python パッケージインデックス向けのJSON ベースのシンプルな API"

#: ../source/specifications/simple-repository-api.rst:336
msgid ""
"To enable response parsing with only the standard library, this spec "
"specifies that all responses (besides the files themselves, and the HTML "
"responses from :ref:`the base HTML API specification <simple-repository-api-"
"base>`) should be serialized using `JSON <https://www.json.org/>`_."
msgstr ""
"標準ライブラリのみを使うレスポンス解析を有効にするためには、この仕様では、 "
"(ファイル群それ自体と :ref:`基本となる HTML API の仕様 <simple-repository-"
"api-base>` を別にして) すべてのレスポンスが `JSON <https://www.json.org/>`_ "
"を用いてシリアライズされているべきであると指定しています。"

#: ../source/specifications/simple-repository-api.rst:341
msgid ""
"To enable zero configuration discovery and to minimize the amount of "
"additional HTTP requests, this spec extends :ref:`the base HTML API "
"specification <simple-repository-api-base>` such that all of the API "
"endpoints (other than the files themselves) will utilize HTTP content "
"negotiation to allow client and server to select the correct serialization "
"format to serve, i.e. either HTML or JSON."
msgstr ""
"ゼロコンフィグレーションディスカバリを有効にして追加的な HTTP リクエストの量"
"を最小化するために、この仕様では HTML:ref:`基本となる HTML API の仕様 "
"<simple-repository-api-base>` を拡張して、 (ファイル群それ自体を除く) すべて"
"の API エンドポイントが HTTP コンテンツネゴシエーションを使ってクライアントお"
"よびサーバが提供するべき正しいシリアライズのフォーマット、即ち HTML もしくは "
"JSON を選択できるようにしています。"

#: ../source/specifications/simple-repository-api.rst:351
msgid ""
"Versioning will adhere to :ref:`the API versioning specification <simple-"
"repository-api-versioning>` format (``Major.Minor``), which has defined the "
"existing HTML responses to be ``1.0``. Since this spec does not introduce "
"new features into the API, rather it describes a different serialization "
"format for the existing features, this spec does not change the existing "
"``1.0`` version, and instead just describes how to serialize that into JSON."
msgstr ""
"バージョン付与については、 :ref:`API のバージョン付与に関する仕様 <simple-"
"repository-api-versioning>` のフォーマット (``Major.Minor``) を固守していて、"
"既存の HTML レスポンスについては ``1.0`` と定義されています。この仕様では "
"API に新しい機能を持ち込むことはせず、むしろ、既存の機能のための異なるシリア"
"ル化フォーマットを記述しようとしているので、この仕様が既存の ``1.0`` バージョ"
"ンに変更を加えることはなく、代わりにどのようにして JSON にシリアライズするの"
"かを述べるに留めています。"

#: ../source/specifications/simple-repository-api.rst:358
msgid ""
"Similar to :ref:`the API versioning specification <simple-repository-api-"
"versioning>`, the major version number **MUST** be incremented if any "
"changes to the new format would result in no longer being able to expect "
"existing clients to meaningfully understand the format."
msgstr ""
":ref:`API のバージョン付与に関する仕様 <simple-repository-api-versioning>` と"
"同様に、既存のクライアントが意味のある形でそのフォーマットを理解することをも"
"はや期待できないようになる新しいフォーマットをもたらすような変更があった場合"
"には、メジャーバージョン番号を **増加させなければなりません** 。"

#: ../source/specifications/simple-repository-api.rst:364
msgid ""
"Likewise, the minor version **MUST** be incremented if features are added or "
"removed from the format, but existing clients would be expected to continue "
"to meaningfully understand the format."
msgstr ""
"同様に、マイナーバージョンは、そのフォーマットで機能の追加・削除はあっても既"
"存のクライアントが意味ある形でそのフォーマットを理解できる状態が継続すると期"
"待されるであろうという時に限って **増加されなければなりません** 。"

#: ../source/specifications/simple-repository-api.rst:368
msgid ""
"Changes that would not result in existing clients being unable to "
"meaningfully understand the format and which do not represent features being "
"added or removed may occur without changing the version number."
msgstr ""
"既存のクライアントがそのフォーマットを意味ある形で理解することができないとい"
"う結果に陥らないような、かつ、機能の追加や削除に相当しないような変更は、バー"
"ジョン番号の変更を伴わずに行っても構いません。"

#: ../source/specifications/simple-repository-api.rst:372
msgid ""
"This is intentionally vague, as this spec believes it is best left up to "
"future specs that make any changes to the API to investigate and decide "
"whether or not that change should increment the major or minor version."
msgstr ""
"これは意図的に曖昧にされています、というのは、この仕様では、メジャーバージョ"
"ンなりマイナーバージョンなりを増加するべきか否かを考究し決定するべき API での"
"変更をもたらすような将来の仕様に、余地を残すことが最善であると信じられている"
"からです。"

#: ../source/specifications/simple-repository-api.rst:376
msgid ""
"Future versions of the API may add things that can only be represented in a "
"subset of the available serializations of that version. All serializations "
"version numbers, within a major version, **SHOULD** be kept in sync, but the "
"specifics of how a feature serializes into each format may differ, including "
"whether or not that feature is present at all."
msgstr ""
"API の将来のバージョンでは、そのバージョンで利用可能なシリアル化のサブセット"
"でのみ実現させることができるような何かを追加しても構いません。あらゆるシリア"
"ル化のバージョン番号は、メジャーバージョンにおいては、 **同期を保つべき** で"
"すが、ある機能がそれぞれのフォーマットにシリアル化されるやり方の詳細は、その"
"機能が存在するかしないかを含めて、異なっていても構いません。"

#: ../source/specifications/simple-repository-api.rst:382
msgid ""
"It is the intent of this spec that the API should be thought of as URL "
"endpoints that return data, whose interpretation is defined by the version "
"of that data, and then serialized into the target serialization format."
msgstr ""
"この仕様の意図するところは、API はデータを返す URL エンドポイントであって、そ"
"の解釈は当該データのバージョンによって定義され、その後にターゲットとなるシリ"
"アル化フォーマットにシリアライズされるものであると考えられるべきであるという"
"ことです。"

#: ../source/specifications/simple-repository-api.rst:390
msgid "JSON Serialization"
msgstr "JSON シリアル化"

#: ../source/specifications/simple-repository-api.rst:392
#, fuzzy
#| msgid ""
#| "The URL structure from :ref:`the base HTML API specification <simple-"
#| "repository-api-base>` still applies, as this spec only adds an additional "
#| "serialization format for the already existing API."
msgid ""
"The URL structure from :ref:`the base HTML API specification <simple-"
"repository-html-serialization>` still applies, as this spec only adds an "
"additional serialization format for the already existing API."
msgstr ""
":ref:`基本となる HTML API の仕様 <simple-repository-api-base>` からの URL の"
"構造は依然として適用されます、というのは、この仕様は既に存在する API にシリア"
"ル化フォーマットを付け足すだけだからです。"

#: ../source/specifications/simple-repository-api.rst:396
msgid ""
"The following constraints apply to all JSON serialized responses described "
"in this spec:"
msgstr ""
"後述の制約は、この仕様で記述されたすべての JSON シリアル化応答に適用されます:"

#: ../source/specifications/simple-repository-api.rst:399
msgid ""
"All JSON responses will *always* be a JSON object rather than an array or "
"other type."
msgstr ""
"すべての JSON 応答は、配列やその他の型ではなく *常に* JSON オブジェクトである"
"ことでしょう。"

#: ../source/specifications/simple-repository-api.rst:402
#, fuzzy
#| msgid ""
#| "While JSON doesn't natively support an URL type, any value that "
#| "represents an URL in this API may be either absolute or relative as long "
#| "as they point to the correct location. If relative, they are relative to "
#| "the current URL as if it were HTML."
msgid ""
"While JSON doesn't natively support a URL type, any value that represents an "
"URL in this API may be either absolute or relative as long as they point to "
"the correct location. If relative, they are relative to the current URL as "
"if it were HTML."
msgstr ""
"JSON は URL 型をネイティブにサポートしているわけではない一方で、この API にお"
"ける任意の値で URL を表現するようなものは、それが正しい場所を指し示している限"
"り絶対パスであっても相対パスであっても構いません。相対パスの場合には、恰も "
"HTML であるかのように、現在の URL に対する相対パスになっています。"

#: ../source/specifications/simple-repository-api.rst:407
msgid ""
"Additional keys may be added to any dictionary objects in the API responses "
"and clients **MUST** ignore keys that they don't understand."
msgstr ""
"API 応答の中の任意の辞書オブジェクトに追加的なキー群を追加しても構いません"
"し、クライアントは自身が理解しないキー群については **無視しなければなりません"
"** 。"

#: ../source/specifications/simple-repository-api.rst:410
msgid ""
"All JSON responses will have a ``meta`` key, which contains information "
"related to the response itself, rather than the content of the response."
msgstr ""
"あらゆる JSON 応答は、その応答の内容ではなく応答それ自身に関係する情報を含む "
"``meta`` キーを持つことでしょう。"

#: ../source/specifications/simple-repository-api.rst:413
msgid ""
"All JSON responses will have a ``meta.api-version`` key, which will be a "
"string that contains the :ref:`API versioning specification <simple-"
"repository-api-versioning>` ``Major.Minor`` version number, with the same "
"fail/warn semantics as defined in :ref:`the API versioning specification "
"<simple-repository-api-versioning>`."
msgstr ""
"すべての JSON 応答は、 :ref:`API のバージョン付与に関する仕様 <simple-"
"repository-api-versioning>` で定義されたものと同じ失敗/警告のセマンティクスを"
"持ち、かつ、 :ref:`API のバージョン付与に関する仕様 <simple-repository-api-"
"versioning>` の ``Major.Minor`` の形のバージョン番号を文字列として値に取るよ"
"うな ``meta.api-version`` キーを持つことでしょう。"

#: ../source/specifications/simple-repository-api.rst:419
msgid ""
"All requirements of :ref:`the base HTML API specification <simple-repository-"
"api-base>` that are not HTML specific still apply."
msgstr ""
":ref:`基本となる HTML API の仕様 <simple-repository-api-base>` のすべての要求"
"事項のうちの HTML に特化したもの以外は、依然として適用されます。"

#: ../source/specifications/simple-repository-api.rst:422
msgid ""
"Keys (at any level) with a leading underscore are reserved as private for "
"index server use. No future standard will assign a meaning to any such key."
msgstr ""
"(どのレベルでも) 先頭にアンダースコアを伴うキーは、インデックスサーバが使うプ"
"ライベートなものとして予約されています。将来の標準において、このようなキーに"
"意味を付与することはありません。"

#: ../source/specifications/simple-repository-api.rst:430
msgid ""
"The root URL ``/`` for this spec (which represents the base URL) will be a "
"JSON encoded dictionary which has a two keys:"
msgstr ""
"(ベース URL <base URL> を表現する) この仕様でのルート URL <root URL> ``/`` "
"は、 JSON にエンコードされた辞書であって、二つのキーを持つでしょう:"

#: ../source/specifications/simple-repository-api.rst:433
msgid ""
"``projects``: An array where each entry is a dictionary with a single key, "
"``name``, which represents string of the project name."
msgstr ""
"``projects``: 各エントリがディレクトリで単独のキー ``name`` を持つような配列"
"で、(そのキーの値は) プロジェクトの名称を表す文字列です。"

#: ../source/specifications/simple-repository-api.rst:434
#: ../source/specifications/simple-repository-api.rst:484
msgid ""
"``meta``: The general response metadata as `described earlier <json-"
"serialization_>`__."
msgstr ""
"``meta``: `先述の通り <json-serialization_>`__ の一般的な応答メタデータ。"

#: ../source/specifications/simple-repository-api.rst:436
#: ../source/specifications/simple-repository-api.rst:632
msgid "As an example:"
msgstr "ひとつの例として:"

#: ../source/specifications/simple-repository-api.rst:453
msgid ""
"The ``name`` field is the same as the one from :ref:`the base HTML API "
"specification <simple-repository-api-base>`, which does not specify whether "
"it is the non-normalized display name or the normalized name. In practice "
"different implementations of these specs are choosing differently here, so "
"relying on it being either non-normalized or normalized is relying on an "
"implementation detail of the repository in question."
msgstr ""
"``name`` フィールドは、:ref:`基本となる HTML API の仕様 <simple-repository-"
"api-base>` からのものと同じで、正規化していないディスプレイ用名称であるのか正"
"規化済みの名称であるのかを指定していません。実際には、これらの仕様の相異なる"
"実装において異なる選択を行うことがあり、その選択によって非正規化名称か正規化"
"名称かは当該リポジトリの実装の詳細に依存します。"

#: ../source/specifications/simple-repository-api.rst:463
msgid ""
"While the ``projects`` key is an array, and thus is required to be in some "
"kind of an order, neither :ref:`the base HTML API specification <simple-"
"repository-api-base>` nor this spec requires any specific ordering nor that "
"the ordering is consistent from one request to the next. Mentally this is "
"best thought of as a set, but both JSON and HTML lack the functionality to "
"have sets."
msgstr ""
"``projects`` キーは配列なので何らかの種類の順序が要求されますが、 :ref:`基本"
"となる HTML API の仕様 <simple-repository-api-base>` もこの仕様も特定の順序に"
"並べることを要求しておらず、また、あるリクエストと次のものとで順序が変わらな"
"いことも要求していません。心情としては、これが (配列ではなく) 集合であると考"
"えるのが最適ですが、 JSON も HTML も集合を扱う機能を欠いています。"

#: ../source/specifications/simple-repository-api.rst:475
msgid ""
"The format of this URL is ``/<project>/`` where the ``<project>`` is "
"replaced by the :ref:`the base HTML API specification <simple-repository-api-"
"base>` normalized name for that project, so a project named \"Silly_Walk\" "
"would have a URL like ``/silly-walk/``."
msgstr ""
"この URL のフォーマットは ``/<project>/`` で、 ``<project>`` の部分は :ref:`"
"基本となる HTML API の仕様 <simple-repository-api-base>` にしたがって正規化さ"
"れたプロジェクト名称であり、したがって、 \"Silly_Walk\" という名称のプロジェ"
"クトであれば ``/silly-walk/`` のような URL を持つことになるでしょう。"

#: ../source/specifications/simple-repository-api.rst:480
#, fuzzy
#| msgid ""
#| "This URL must respond with a JSON encoded dictionary that has three keys:"
msgid ""
"This URL must respond with a JSON encoded dictionary that has four keys:"
msgstr ""
"この URL は、３個のキーを持つJSON にコード化された辞書を返さなければなりませ"
"ん:"

#: ../source/specifications/simple-repository-api.rst:482
msgid "``name``: The normalized name of the project."
msgstr "``name``: そのプロジェクトの正規化された名前。"

#: ../source/specifications/simple-repository-api.rst:483
msgid ""
"``files``: A list of dictionaries, each one representing an individual file."
msgstr "``files``: 辞書のリストで、各辞書が個別のファイルを表現しているもの。"

#: ../source/specifications/simple-repository-api.rst:486
msgid ""
"In addition to the general response metadata, the project detail ``meta`` "
"dictionary **MAY** also include the following:"
msgstr ""

#: ../source/specifications/simple-repository-api.rst:489
msgid ""
"``project-status``: If present, this **MUST** be a valid project status "
"marker."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:498
#, fuzzy
#| msgid "A new ``versions`` key is added at the top level."
msgid "The ``project-status`` key was added with API version 1.4."
msgstr "トップレベルに ``version`` キーが新規に追加されました。"

#: ../source/specifications/simple-repository-api.rst:500
msgid ""
"``project-status-reason``: If present, this **MUST** be an arbitrary string "
"description of the project status."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:505
#, fuzzy
#| msgid "A new ``versions`` key is added at the top level."
msgid "The ``project-status-reason`` key was added with API version 1.4."
msgstr "トップレベルに ``version`` キーが新規に追加されました。"

#: ../source/specifications/simple-repository-api.rst:507
#, fuzzy
#| msgid ""
#| "An additional key, ``versions`` MUST be present at the top level, in "
#| "addition to the keys ``name``, ``files`` and ``meta`` defined in :ref:"
#| "`the JSON API specification <simple-repository-api-json>`. This key MUST "
#| "contain a list of version strings specifying all of the project versions "
#| "uploaded for this project. The value is logically a set, and as such may "
#| "not contain duplicates, and the order of the values is not significant."
msgid ""
"``versions``: A list of version strings specifying all of the project "
"versions uploaded for this project. The value of ``versions`` is logically a "
"set, and as such may not contain duplicates, and the order of the versions "
"is not significant."
msgstr ""
"追加のキーである ``versions`` は、 :ref:`JSON API 仕様 <simple-repository-"
"api-json>` で定義された ``name`` キー・ ``files`` キーや ``meta`` キーに加え"
"て、トップレベルに存在しなければなりません。このキーは、このプロジェクトよう"
"にアップロードされたプロジェクトのバージョンの全てを指定するバージョン文字列"
"を列挙したものを含んでいなければなりません。その値は論理的に言って集合であ"
"り、したがって重複を許さず、値の順序は大きな意味を持ちません。"

#: ../source/specifications/simple-repository-api.rst:514
msgid ""
"All of the files listed in the ``files`` key MUST be associated with one of "
"the versions in the ``versions`` key. The ``versions`` key MAY contain "
"versions with no associated files (to represent versions with no files "
"uploaded, if the server has such a concept)."
msgstr ""
"``files`` キーに列挙されたファイルは、すべて、 ``versions`` キー内のバージョ"
"ンのひとつに対応していなければなりません。 ``versions`` キーは、 (サーバ側が"
"そのような概念を持っているならば、ファイルなしのバージョンというものを表現す"
"るために) 対応するファイルがないバージョンを含んでいても構いません。"

#: ../source/specifications/simple-repository-api.rst:521
#, fuzzy
#| msgid ""
#| "Note that because servers may hold \"legacy\" data from before the "
#| "adoption of :ref:`the version specifiers specification (VSS) <version-"
#| "specifiers>`, version strings currently cannot be required to be valid "
#| "VSS versions, and therefore cannot be assumed to be orderable using the "
#| "VSS rules. However, servers SHOULD use normalised VSS versions where "
#| "possible."
msgid ""
"Because servers may hold \"legacy\" data from before the adoption of :ref:"
"`the version specifiers specification (VSS) <version-specifiers>`, version "
"strings currently cannot be required to be valid VSS versions, and therefore "
"cannot be assumed to be orderable using the VSS rules. However, servers "
"**SHOULD** use normalized VSS versions where possible."
msgstr ""
":ref:`バージョン指定子仕様 (VSS) <version-specifiers>` の採用前からの \"レガ"
"シー\" データをサーバが保持しているかもしれないので、バージョン文字列につい"
"て VSS に則ったバージョンであることを要求することはできませんし、したがっ"
"て、 VSS のルールを使って並べることができると仮定することもできません。しかし"
"ながら、サーバ側は、可能であれば正規化された VSS バージョンを使うべきです。"

#: ../source/specifications/simple-repository-api.rst:529
#, fuzzy
#| msgid "A new ``versions`` key is added at the top level."
msgid "The ``versions`` key was added with API version 1.1."
msgstr "トップレベルに ``version`` キーが新規に追加されました。"

#: ../source/specifications/simple-repository-api.rst:531
msgid "Each individual file dictionary has the following keys:"
msgstr "個別のファイルを表す辞書は、それぞれ、次のキーを持ちます:"

#: ../source/specifications/simple-repository-api.rst:533
msgid "``filename``: The filename that is being represented."
msgstr "``filename``: 表現しようとしているファイルのファイル名。"

#: ../source/specifications/simple-repository-api.rst:534
msgid "``url``: The URL that the file can be fetched from."
msgstr "``url``: そこからそのファイルを取得できる URL。"

#: ../source/specifications/simple-repository-api.rst:535
msgid ""
"``hashes``: A dictionary mapping a hash name to a hex encoded digest of the "
"file. Multiple hashes can be included, and it is up to the client to decide "
"what to do with multiple hashes (it may validate all of them or a subset of "
"them, or nothing at all). These hash names **SHOULD** always be normalized "
"to be lowercase."
msgstr ""
"``hashes``: ハッシュ(関数)の名称と、そのファイルの16進数にエンコードされた"
"ハッシュ値 (digest) をマッピングした辞書。複数のハッシュを含むことが可能で、"
"その複数のハッシュを使って何をするのか (全部について検証するのか、サブセット"
"についてなのか、全く何もしないのか) についてはクライアントが決めれば良いこと"
"になっています。これらのハッシュの名称は、常に小文字に **正規化 されているべ"
"きです** 。"

#: ../source/specifications/simple-repository-api.rst:540
msgid ""
"The ``hashes`` dictionary **MUST** be present, even if no hashes are "
"available for the file, however it is **HIGHLY** recommended that at least "
"one secure, guaranteed-to-be-available hash is always included."
msgstr ""
"``hashes`` 辞書は、仮にそのファイルについてハッシュがひとつも利用可能でないと"
"しても、 **存在していなければなりません** し、少なくともひとつのセキュアで利"
"用可能であることが保証されているハッシュが常に含まれていることが **とても強く"
"** 推奨されています。"

#: ../source/specifications/simple-repository-api.rst:544
msgid ""
"By default, any hash algorithm available via :py:mod:`hashlib` (specifically "
"any that can be passed to :py:func:`hashlib.new()` and do not require "
"additional parameters) can be used as a key for the hashes dictionary. At "
"least one secure algorithm from :py:data:`hashlib.algorithms_guaranteed` "
"**SHOULD** always be included. At the time of this spec, ``sha256`` "
"specifically is recommended."
msgstr ""
"デフォルトでは、 :py:mod:`hashlib` を経由して利用可能なハッシュアルゴリズム "
"(特に、:py:func:`hashlib.new()` に渡すことができて、かつ、追加のパラメータを"
"要求しないもの) は、すべて、ハッシュの辞書のキーとして使うことができます。 :"
"py:`data:`hashlib.algorithms_guaranteed` から選択した少なくともひとつのセキュ"
"アなアルゴリズムが、常に、 **含まれているべきです** 。この仕様の時点では、特"
"に ``sha256`` が推奨されます。"

#: ../source/specifications/simple-repository-api.rst:549
msgid ""
"``requires-python``: An **optional** key that exposes the :ref:`core-"
"metadata-requires-python` metadata field. Where this is present, installer "
"tools **SHOULD** ignore the download when installing to a Python version "
"that doesn't satisfy the requirement."
msgstr ""
"``requires-python``: :ref:`core-metadata-requires-python` メタデータフィール"
"ドを顕にする **オプションの** キー。これが存在しているなら、インストーラツー"
"ル群は、要求事項を満足しない Python のバージョンへインストールしようとする場"
"合、ダウンロードを **無視するべきです** 。"

#: ../source/specifications/simple-repository-api.rst:555
msgid ""
"Unlike ``data-requires-python`` in :ref:`the base HTML API specification "
"<simple-repository-api-base>`, the ``requires-python`` key does not require "
"any special escaping other than anything JSON does naturally."
msgstr ""
":ref:`基本となる HTML API の仕様 <simple-repository-api-base>` の中の ``data-"
"requires-python`` とは異なって、 ``requires-python`` キーは、JSON が自然に要"
"求することを除けば、特別なエスケープを要求しません。"

#: ../source/specifications/simple-repository-api.rst:558
#, fuzzy
#| msgid ""
#| "``dist-info-metadata``: An **optional** key that indicates that metadata "
#| "for this file is available, via the same location as specified in :ref:"
#| "`the API metadata file specification <simple-repository-api-metadata-"
#| "file>` (``{file_url}.metadata``). Where this is present, it **MUST** be "
#| "either a boolean to indicate if the file has an associated metadata file, "
#| "or a dictionary mapping hash names to a hex encoded digest of the "
#| "metadata's hash."
msgid ""
"``core-metadata``: An **optional** key that indicates that metadata for this "
"file is available, via the same location as specified in :ref:`the API "
"metadata file specification <simple-repository-api-metadata-file>` "
"(``{file_url}.metadata``). Where this is present, it **MUST** be either a "
"boolean to indicate if the file has an associated metadata file, or a "
"dictionary mapping hash names to a hex encoded digest of the metadata's hash."
msgstr ""
"``dist-info-metadata``: :ref:`API メタデータの仕様 <simple-repository-api-"
"metadata-file>` で指定されたのと同じ場所 (``{file_url}.metadata``) を通じて当"
"該ファイルに関するメタデータが利用可能であることを示す **オプション** の"
"キー。これが存在する場合には、そのファイルに対応するメタデータファイルがある"
"か否かを示すブーリアンか、または、ハッシュ名称からメタデータのハッシュを16進"
"数にエンコードしたダイジェストへの対応をマッピングする辞書か、のいずれかで **"
"なければなりません** 。"

#: ../source/specifications/simple-repository-api.rst:566
msgid ""
"When this is a dictionary of hashes instead of a boolean, then all the same "
"requirements and recommendations as the ``hashes`` key hold true for this "
"key as well."
msgstr ""
"これがブーリアンの代わりにハッシュ辞書である時には、 ``hashes`` キーが true "
"を値に取る場合と同じ要求事項と推奨事項の全てが、このキーにも課されます。"

#: ../source/specifications/simple-repository-api.rst:570
msgid ""
"If this key is missing then the metadata file may or may not exist. If the "
"key value is truthy, then the metadata file is present, and if it is falsey "
"then it is not."
msgstr ""
"このキーがない場合には、メタデータファイルが存在するかもしれませんし、存在し"
"ないかもしれません。このキーの値が真である場合はメタデータファイルが存在し、"
"値が偽の場合には存在しません。"

#: ../source/specifications/simple-repository-api.rst:574
msgid ""
"It is recommended that servers make the hashes of the metadata file "
"available if possible."
msgstr ""
"サーバ群は、可能であれば、メタデータファイルのハッシュを利用可能とすることが"
"推奨されています。"

#: ../source/specifications/simple-repository-api.rst:577
msgid ""
"``dist-info-metadata``: An **optional**, deprecated alias for ``core-"
"metadata``."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:579
msgid ""
"Index clients **MAY** consume this key if present, as a legacy fallback for "
"``core-metadata``."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:584
msgid ""
"``dist-info-metadata`` was standardized with :pep:`658` and renamed to "
"``core-metadata`` with :pep:`714`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:587
msgid ""
"``gpg-sig``: An **optional** key that acts a boolean to indicate if the file "
"has an associated GPG signature or not. The URL for the signature file "
"follows what is specified in :ref:`the base HTML API specification <simple-"
"repository-api-base>` (``{file_url}.asc``). If this key does not exist, then "
"the signature may or may not exist."
msgstr ""
"``gig-sig``: **オプション** のキーで、当該ファイルに GPG 署名が付属しているか"
"否かを示すブーリアン。署名ファイルへの URL は、 :ref:`基本となる HTML API の"
"仕様 <simple-repository-api-base>` で指定されたもの (``{file_url}.asc``) に従"
"います。このキーが存在しない場合は、署名はあるかもしれませんし、ないかもしれ"
"ません。"

#: ../source/specifications/simple-repository-api.rst:593
#, fuzzy
#| msgid ""
#| "``yanked``: An **optional** key which may be either a boolean to indicate "
#| "if the file has been yanked, or a non empty, but otherwise arbitrary, "
#| "string to indicate that a file has been yanked with a specific reason. If "
#| "the ``yanked`` key is present and is a truthy value, then it **SHOULD** "
#| "be interpreted as indicating that the file pointed to by the ``url`` "
#| "field has been \"Yanked\" as per :ref:`the API yank specification <simple-"
#| "repository-api-yank>`."
msgid ""
"``yanked``: An **optional** key which may be either a boolean to indicate if "
"the file has been yanked, or a non empty, but otherwise arbitrary, string to "
"indicate that a file has been yanked with a specific reason. If the "
"``yanked`` key is present and is a truthy value, then it **SHOULD** be "
"interpreted as indicating that the file pointed to by the ``url`` field has "
"been \"Yanked\"."
msgstr ""
"``yanked``: **オプション** のキーで、当該ファイルがヤンクされたものか否かを示"
"すブーリアンか、または、ファイルがヤンクされるに至った特定の理由を示す任意の"
"空ではない文字列か、いずれかの値を持ちます。 ``yanked`` キーが存在して値が真"
"であれば、``url`` フィールドによって指し示されるファイルが :ref:`API ヤンク仕"
"様 <simple-repository-api-yank>` にある通りに \"ヤンク\" されたことを示しま"
"す。"

#: ../source/specifications/simple-repository-api.rst:604
#, fuzzy
#| msgid ""
#| "``size``: This field is mandatory. It MUST contain an integer which is "
#| "the file size in bytes."
msgid ""
"``size``: A **mandatory** key. It **MUST** contain an integer which is the "
"file size in bytes."
msgstr ""
"``size``: このフィールドは必須のものです。ファイルサイズをバイト単位で表した"
"整数が含まれていなければなりません。"

#: ../source/specifications/simple-repository-api.rst:608
msgid "The ``size`` key was added with API version 1.1."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:610
msgid ""
"``upload-time``: An **optional** key that, if present, **MUST** contain a "
"valid ISO 8601 date/time string in the format ``yyyy-mm-ddThh:mm:ss."
"ffffffZ`` which represents the time the file was uploaded to the index."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:614
#, fuzzy
#| msgid ""
#| "``upload-time``: This field is optional. If present, it MUST contain a "
#| "valid ISO 8601 date/time string, in the format ``yyyy-mm-ddThh:mm:ss."
#| "ffffffZ``, which represents the time the file was uploaded to the index. "
#| "As indicated by the ``Z`` suffix, the upload time MUST use the UTC "
#| "timezone. The fractional seconds part of the timestamp (the ``.ffffff`` "
#| "part) is optional, and if present may contain up to 6 digits of "
#| "precision. If a server does not record upload time information for a "
#| "file, it MAY omit the ``upload-time`` key."
msgid ""
"As indicated by the ``Z`` suffix, the upload time **MUST** use the UTC "
"timezone. The fractional seconds part of the timestamp (the ``.ffffff`` "
"part) is optional, and if present may contain up to 6 digits of precision. "
"If a server does not record upload time information for a file, it **MAY** "
"omit the ``upload-time`` key."
msgstr ""
"``upload-time`` このフィールドはオプションです。もし存在するなら、正当な ISO "
"8601 形式の年月日・時刻が含まれていなければならず、そのフォーマットは ``yyyy-"
"mm-ddThh:mm:ss.ffffffZ`` で、当該ファイルがインデックスにアップロードされた時"
"点を表します。後置された ``Z`` が示すように、アップロード日時は必ず UTC タイ"
"ムゾーンを使わなければなりません。タイムスタンプの秒に満たない部分 (``."
"ffffff`` の部分) はオプションで、もし存在するなら６桁までの精度を含めて構いま"
"せん。サーバ側がファイルのアップロード日時を記録していない場合は、 ``upload-"
"time`` キーを省略しても構いません。"

#: ../source/specifications/simple-repository-api.rst:621
msgid "The ``upload-time`` key was added with API version 1.1."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:623
msgid ""
"``provenance``: An **optional** key which, if present **MUST** be either a "
"JSON string or ``null``. If not ``null``, it **MUST** be a URL to the file's "
"associated provenance, with the same rules as ``data-provenance`` in the :"
"ref:`base HTML API specification <simple-repository-api-base>`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:630
msgid "The ``provenance`` field was added with API version 1.3."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:668
msgid ""
"While the ``files`` key is an array, and thus is required to be in some kind "
"of an order, neither :ref:`the base HTML API specification <simple-"
"repository-api-base>` nor this spec requires any specific ordering nor that "
"the ordering is consistent from one request to the next. Mentally this is "
"best thought of as a set, but both JSON and HTML lack the functionality to "
"have sets."
msgstr ""
"``files`` キーは配列なのである種の順序があることが要求される一方で、 :ref:`基"
"本となる HTML API の仕様 <simple-repository-api-base>` にもこの仕様にも、特定"
"の順序付けも要求されていませんし、あるリクエストと次のそれの間で順序が保たれ"
"るということも要求されていません。心情としては、これは集合であると考えるのが"
"最適ですが、JSON にも HTML にも集合を扱う機能は欠落しています。"

#: ../source/specifications/simple-repository-api.rst:677
msgid "Content-Types"
msgstr "Content-Types"

#: ../source/specifications/simple-repository-api.rst:679
msgid ""
"This spec proposes that all responses from the Simple API will have a "
"standard content type that describes what the response is (a Simple API "
"response), what version of the API it represents, and what serialization "
"format has been used."
msgstr ""
"この仕様では、シンプル API からの応答はすべて、その応答が何であるか (シンプ"
"ル API からの応答である) 、どのバージョンの API を表現しているか、また、使わ"
"れているシリアル化フォーマットは何であるかを記述する標準のコンテント型を持ち"
"ます。"

#: ../source/specifications/simple-repository-api.rst:683
msgid "The structure of this content type will be:"
msgstr "このコンテント型の構造はこのようになっていることでしょう:"

#: ../source/specifications/simple-repository-api.rst:689
msgid ""
"Since only major versions should be disruptive to clients attempting to "
"understand one of these API responses, only the major version will be "
"included in the content type, and will be prefixed with a ``v`` to clarify "
"that it is a version number."
msgstr ""
"これらの API からの応答のうちのひとつをクライアントが理解しようと試みる際に"
"は、メジャーバージョンだけが継続不可能にするものであるべきなので、メジャー"
"バージョンだけがコンテント型に含まれるでしょうし、それがバージョン番号である"
"ことを明確にするために前に ``v`` をつけられることになるでしょう。"

#: ../source/specifications/simple-repository-api.rst:694
msgid "Which means that for the existing 1.0 API, the content types would be:"
msgstr ""
"ということは、既存の 1.0 API においては、コンテント型はこのようになるでしょ"
"う:"

#: ../source/specifications/simple-repository-api.rst:696
msgid "**JSON:** ``application/vnd.pypi.simple.v1+json``"
msgstr "**JSON:** ``application/vnd.pypi.simple.v1+json``"

#: ../source/specifications/simple-repository-api.rst:697
msgid "**HTML:** ``application/vnd.pypi.simple.v1+html``"
msgstr "**HTML:** ``application/vnd.pypi.simple.v1+html``"

#: ../source/specifications/simple-repository-api.rst:699
msgid ""
"In addition to the above, a special \"meta\" version is supported named "
"``latest``, whose purpose is to allow clients to request the absolute latest "
"version, without having to know ahead of time what that version is. It is "
"recommended however, that clients be explicit about what versions they "
"support."
msgstr ""
"上記に加えて、特別な \"meta\" バージョンが ``latest`` という名前でサポートさ"
"れており、その目的はクライアントが完全に最新のバージョンをリクエストすること"
"を許すためであり、そのバージョンが何であるかを前もって知ることを不要にするた"
"めです。しかしながら、クライアントは自身がどのバージョンをサポートしているの"
"かを明示的に示すことが推奨されています。"

#: ../source/specifications/simple-repository-api.rst:704
msgid ""
"To support existing clients which expect the existing :ref:`the base HTML "
"API specification <simple-repository-api-base>` API responses to use the "
"``text/html`` content type, this spec further defines ``text/html`` as an "
"alias for the ``application/vnd.pypi.simple.v1+html`` content type."
msgstr ""
"既存の :ref:`基本となる HTML API の仕様 <simple-repository-api-base>` の API "
"応答が ``text/html`` コンテント型を使うことを期待している既存のクライアント群"
"をサポートするために、この仕様では、さらに、 ``text/html`` を ``application/"
"vnd.pypi.simple.v1+html`` コンテント型へのエイリアスであると定義しています。"

#: ../source/specifications/simple-repository-api.rst:711
msgid "Version + Format Selection"
msgstr "バージョン + フォーマットの選択"

#: ../source/specifications/simple-repository-api.rst:713
msgid ""
"Now that there is multiple possible serializations, we need a mechanism to "
"allow clients to indicate what serialization formats they're able to "
"understand. In addition, it would be beneficial if any possible new major "
"version to the API can be added without disrupting existing clients "
"expecting the previous API version."
msgstr ""
"今や複数の可能なシリアル化が存在するので、クライアント群がどのシリアル化"
"フォーマットであれば理解できるのかを示すことができるようにする必要がありま"
"す。加えて、以前の API バージョンを期待している既存のクライアント群の妨げとな"
"ることなしに、どんな API の可能な新しいメジャーバージョンでも追加することがで"
"きれば利益があることでしょう。"

#: ../source/specifications/simple-repository-api.rst:718
msgid ""
"To enable this, this spec standardizes on the use of HTTP's `Server-Driven "
"Content Negotiation <https://developer.mozilla.org/en-US/docs/Web/HTTP/"
"Content_negotiation>`_."
msgstr ""
"これを可能にするために、この仕様では、 HTTP の `サーバ主導のコンテントネゴシ"
"エーション <https://developer.mozilla.org/en-US/docs/Web/HTTP/"
"Content_negotiation>`_ の使用を標準化します。"

#: ../source/specifications/simple-repository-api.rst:721
msgid ""
"While this spec won't fully describe the entirety of server-driven content "
"negotiation, the flow is roughly:"
msgstr ""
"この仕様では、サーバ主導のコンテントネゴシエーションについて完全にすべてを記"
"述することはありませんが、流れは大まかに次のようになります:"

#: ../source/specifications/simple-repository-api.rst:724
msgid ""
"The client makes an HTTP request containing an ``Accept`` header listing all "
"of the version+format content types that they are able to understand."
msgstr ""
"理解できるコンテント型を全て``Accept`` ヘッダに列挙した HTTP リクエストをクラ"
"イアントが作成します。"

#: ../source/specifications/simple-repository-api.rst:726
msgid ""
"The server inspects that header, selects one of the listed content types, "
"then returns a response using that content type (treating the absence of an "
"``Accept`` header as ``Accept: */*``)."
msgstr ""
"サーバはそのヘッダを検証して、列挙されたコンテント型からひとつを選択して、そ"
"のコンテント型を使って応答を返します (``Accept`` ヘッダが欠落している場合は "
"``Accept: */*`` であるものとして扱います) 。"

#: ../source/specifications/simple-repository-api.rst:729
msgid ""
"If the server does not support any of the content types in the ``Accept`` "
"header then they are able to choose between 3 different options for how to "
"respond:"
msgstr ""
"``Accept`` ヘッダにあるコンテント型のいずれもサーバがサポートしていない場合に"
"は、どのように応答するかについてサーバは３個の異なるオプションから選択するこ"
"とができます:"

#: ../source/specifications/simple-repository-api.rst:733
msgid ""
"Select a default content type other than what the client has requested and "
"return a response with that."
msgstr ""
"クライアントが要求したものではないデフォルトのコンテント型を選択して、それを"
"使って応答を返すこと。"

#: ../source/specifications/simple-repository-api.rst:735
msgid ""
"Return a HTTP ``406 Not Acceptable`` response to indicate that none of the "
"requested content types were available, and the server was unable or "
"unwilling to select a default content type to respond with."
msgstr ""
"HTTP の ``406 Not Acceptable`` 応答を返すことで、要求されたコンテント型の中に"
"利用可能なものがないことを示し、サーバとしてはデフォルトのコンテント型を選択"
"して応答することができないかしたくないことを示すこと。"

#: ../source/specifications/simple-repository-api.rst:738
msgid ""
"Return a HTTP ``300 Multiple Choices`` response that contains a list of all "
"of the possible responses that could have been chosen."
msgstr ""
"HTTP の ``300 Multiple Choices`` 応答を返して、選択できるかもしれないすべての"
"可能な応答のリストを含めておくこと。"

#: ../source/specifications/simple-repository-api.rst:740
msgid ""
"The client interprets the response, handling the different types of "
"responses that the server may have responded with."
msgstr ""
"サーバが返すかもしれない異なる応答のタイプを取り扱ってクライアントは応答を解"
"釈します。"

#: ../source/specifications/simple-repository-api.rst:743
msgid ""
"This spec does not specify which choices the server makes in regards to "
"handling a content type that it isn't able to return, and clients **SHOULD** "
"be prepared to handle all of the possible responses in whatever way makes "
"the most sense for that client."
msgstr ""
"この仕様は、あるコンテント型を取り扱うことについてサーバが行った選択のどれが "
"(クライアントへ応答を) 返すことができないものであるかを指定しませんし、クライ"
"アント側がそのクライアントにとって最も意味を為す方法であればどんなものでも可"
"能な応答の全てを取り扱う準備を **しておくべきだ** とは指定しません。"

#: ../source/specifications/simple-repository-api.rst:748
msgid ""
"However, as there is no standard format for how a ``300 Multiple Choices`` "
"response can be interpreted, this spec highly discourages servers from "
"utilizing that option, as clients will have no way to understand and select "
"a different content-type to request. In addition, it's unlikely that the "
"client *could* understand a different content type anyways, so at best this "
"response would likely just be treated the same as a ``406 Not Acceptable`` "
"error."
msgstr ""
"しかしながら、 ``300 Multiple Choices`` 応答がどのように解釈され得るかについ"
"て標準的なフォーマットは存在しないので、クライアント側が理解して要求するべき"
"別のコンテント型を選択する手段がないので、この仕様ではサーバがこのオプション"
"を採用することを強い非推奨にしています。加えて、クライアントが別のコンテント"
"型を **理解できるであろう** とは思われず、したがって、この応答は ``406 Not "
"Acceptable`` エラーと同じ扱いを受けるのが精々であろうと思われます。"

#: ../source/specifications/simple-repository-api.rst:755
#, fuzzy
#| msgid ""
#| "This spec **does** require that if the meta version ``latest`` is being "
#| "used, the server **MUST** respond with the content type for the actual "
#| "version that is contained in the response (i.e. A ``Accept: application/"
#| "vnd.pypi.simple.latest+json`` request that returns a ``v1.x`` response "
#| "should have a ``Content-Type`` of ``application/vnd.pypi.simple."
#| "v1+json``)."
msgid ""
"This spec **does** require that if the meta version ``latest`` is being "
"used, the server **MUST** respond with the content type for the actual "
"version that is contained in the response (i.e. an ``Accept: application/vnd."
"pypi.simple.latest+json`` request that returns a ``v1.x`` response should "
"have a ``Content-Type`` of ``application/vnd.pypi.simple.v1+json``)."
msgstr ""
"この仕様では、メタバージョン ``latest`` が使われているのであれば、そのサーバ"
"は、実際のバージョンのための Content-Type をレスポンスの中に伴わなければなら"
"ないということを **要求しています** (すなわち、 ``Accept: application/vnd."
"pypi.simple.latest+json`` を含んだリクエストが ``v1.x`` を返す時、レスポンス"
"には ``application/vnd.pypi.simple.v1+json`` を値とする ``Content-Type`` が"
"入っていなければならないということです) 。"

#: ../source/specifications/simple-repository-api.rst:762
msgid ""
"The ``Accept`` header is a comma separated list of content types that the "
"client understands and is able to process. It supports three different "
"formats for each content type that is being requested:"
msgstr ""
"``Accept`` ヘッダは、クライアントが理解し処理することが可能なコンテント型をカ"
"ンマで区切られたリストに列挙したものです。まさに要求されているところのコンテ"
"ント型のそれぞれについて３個の異なるフォーマットをサポートしています:"

#: ../source/specifications/simple-repository-api.rst:766
msgid "``$type/$subtype``"
msgstr "``$type/$subtype``"

#: ../source/specifications/simple-repository-api.rst:767
msgid "``$type/*``"
msgstr "``$type/*``"

#: ../source/specifications/simple-repository-api.rst:768
msgid "``*/*``"
msgstr "``*/*``"

#: ../source/specifications/simple-repository-api.rst:770
msgid ""
"For the use of selecting a version+format, the most useful of these is "
"``$type/$subtype``, as that is the only way to actually specify the version "
"and format you want."
msgstr ""
"バージョン＋フォーマット <version+format> の選択に使うには、これらのうちで最"
"も役に立つのは ``$type/$subtype`` で、望みのバージョンとフォーマットを実際に"
"指定する唯一の方法だからです。"

#: ../source/specifications/simple-repository-api.rst:774
msgid ""
"The order of the content types listed in the ``Accept`` header does not have "
"any specific meaning, and the server **SHOULD** consider all of them to be "
"equally valid to respond with. If a client wishes to specify that they "
"prefer a specific content type over another, they may use the ``Accept`` "
"header's `quality value <https://developer.mozilla.org/en-US/docs/Glossary/"
"Quality_values>`_ syntax."
msgstr ""
"``Accept`` ヘッダに列挙されたコンテント型の順序は、なんら特定の意味を持たず、"
"サーバ側ではその全てをそれを使って応答するために等しく正当なものと **考えるべ"
"きです** 。クライアント側が特定のコンテント型を他のものよりも好むことを指定し"
"たいならば、 ``Accept`` ヘッダの `quality バリュー <https://developer."
"mozilla.org/en-US/docs/Glossary/Quality_values>`_ の文法を使っても構いませ"
"ん。"

#: ../source/specifications/simple-repository-api.rst:781
msgid ""
"This allows a client to specify a priority for a specific entry in their "
"``Accept`` header, by appending a ``;q=`` followed by a value between ``0`` "
"and ``1`` inclusive, with up to 3 decimal digits. When interpreting this "
"value, an entry with a higher quality has priority over an entry with a "
"lower quality, and any entry without a quality present will default to a "
"quality of ``1``."
msgstr ""
"これは、 ``;q=`` とこれに後続する10進数で3桁までの ``0`` 以上 ``1`` 以下の値"
"を付加することによって ``Accept`` ヘッダ内の特定のエントリの優先度をクライア"
"ントが指定することを可能にします。この値を解釈する際には、より高い q 値 "
"(quality 値) のエントリがより低い品質のものよりも優先され、q 値を持たないもの"
"はデフォルトで ``1`` であると解釈されます。"

#: ../source/specifications/simple-repository-api.rst:787
msgid ""
"However, clients should keep in mind that a server is free to select **any** "
"of the content types they've asked for, regardless of their requested "
"priority, and it may even return a content type that they did **not** ask "
"for."
msgstr ""
"しかしながら、サーバはクライアント側から要請されたコンテント型の **どれ** を"
"選んでも構わないということ、そして、サーバはクライアントが **要請しなかった"
"** コンテント型で返答しても構わないということを、クライアントは心に留めておく"
"べきです。"

#: ../source/specifications/simple-repository-api.rst:791
msgid ""
"To aid clients in determining the content type of the response that they "
"have received from an API request, this spec requires that servers always "
"include a ``Content-Type`` header indicating the content type of the "
"response. This is technically a backwards incompatible change, however in "
"practice `pip has been enforcing this requirement <https://github.com/pypa/"
"pip/blob/cf3696a81b341925f82f20cb527e656176987565/src/pip/_internal/index/"
"collector.py#L123-L150>`_ so the risks for actual breakages is low."
msgstr ""
"API へのリクエストから受けとった応答のコンテント型を決定するにあたってクライ"
"アントを補助するために、この仕様では、応答のコンテント型を示す ``Content-"
"Type`` ヘッダをサーバが常に含めることを要求している。これは、技術的には後方互"
"換性のない変更ですが、実際には `pip ` はすでにこの要求事項 <https://github."
"com/pypa/pip/blob/cf3696a81b341925f82f20cb527e656176987565/src/pip/_internal/"
"index/collector.py#L123-L150>`_ を強制していますので、実際に何かを壊すリスク"
"は低いでしょう。"

#: ../source/specifications/simple-repository-api.rst:798
msgid "An example of how a client can operate would look like:"
msgstr "クライアントがどのように運用できるかの例は次のように見えるでしょう:"

#: ../source/specifications/simple-repository-api.rst:849
msgid ""
"If a client wishes to only support HTML or only support JSON, then they "
"would just remove the content types that they do not want from the "
"``Accept`` header, and turn receiving them into an error."
msgstr ""
"クライアント側が、 HTML だけを、または JSON だけをサポートしたいと望むなら、 "
"``Accept`` ヘッダから望まないコンテント型を単に取り除くでしょうし、(望まない"
"ものを) 受け取ったらエラーにすることでしょう。"

#: ../source/specifications/simple-repository-api.rst:855
msgid "Alternative Negotiation Mechanisms"
msgstr "代わりの交渉機構 <Negotiation Mechanisms>"

#: ../source/specifications/simple-repository-api.rst:857
msgid ""
"While using HTTP's Content negotiation is considered the standard way for a "
"client and server to coordinate to ensure that the client is getting an HTTP "
"response that it is able to understand, there are situations where that "
"mechanism may not be sufficient. For those cases this spec has alternative "
"negotiation mechanisms that may *optionally* be used instead."
msgstr ""
"HTTP でのコンテンツネゴシエーションを使うことがクライアントとサーバが協調して"
"クライアントが理解することができる HTTP 応答を得られることを確実にする標準的"
"な方法である一方で、このメカニズムで十分とは言えないような状況が存在します。"
"そのような場合向けに、この仕様には、 *オプションとして* 代わりに使っても構わ"
"ない代わりの交渉機構 <alternative negotiation mechanisms> があります。"

#: ../source/specifications/simple-repository-api.rst:865
msgid "URL Parameter"
msgstr "URL パラメータ"

#: ../source/specifications/simple-repository-api.rst:867
msgid ""
"Servers that implement the Simple API may choose to support a URL parameter "
"named ``format`` to allow the clients to request a specific version of the "
"URL."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:870
msgid ""
"The value of the ``format`` parameter should be **one** of the valid content "
"types. Passing multiple content types, wild cards, quality values, etc... is "
"**not** supported."
msgstr ""
"``format`` パラメータの値は、正当なコンテント型のうちの **ひとつ** であるべき"
"です。複数のコンテント型を渡すことやワイルドカード、quality 値などはサポート"
"されて **いません** 。"

#: ../source/specifications/simple-repository-api.rst:874
msgid ""
"Supporting this parameter is optional, and clients **SHOULD NOT** rely on it "
"for interacting with the API. This negotiation mechanism is intended to "
"allow for easier human based exploration of the API within a browser, or to "
"allow documentation or notes to link to a specific version+format."
msgstr ""
"このパラメータをサポートすることはオプションで、 API とやりとりするクライアン"
"トはこれを **当てにするべきではありません** 。このネゴシエーションメカニズム"
"は、人間がブラウザ内で API をより簡単に調査することができるようにすることを意"
"図したもの、ないし、説明文書やノートから特定の version+format にリンクするこ"
"とができるようにすることを意図したものです。"

#: ../source/specifications/simple-repository-api.rst:879
msgid ""
"Servers that do not support this parameter may choose to return an error "
"when it is present, or they may simple ignore its presence."
msgstr ""
"このパラメータをサポートしないサーバの側では、これの存在時にはエラーを返すこ"
"とを選択しても構いませんし、単にその存在を無視しても構いません。"

#: ../source/specifications/simple-repository-api.rst:882
msgid ""
"When a server does implement this parameter, it **SHOULD** take precedence "
"over any values in the client's ``Accept`` header, and if the server does "
"not support the requested format, it may choose to fall back to the "
"``Accept`` header, or choose any of the error conditions that standard "
"server-driven content negotiation typically has (e.g. ``406 Not Available``, "
"``303 Multiple Choices``, or selecting a default type to return)."
msgstr ""
"サーバがこのパラメータを実装していない時は、クライアントの ``Accept`` ヘッダ"
"内の値に何があってもそれに **高い優先度を与えるべき** で、要求されたフォー"
"マットをサーバがサポートしていないなら ``Accept`` ヘッダにフォールバックする"
"ことを選択しても良いし、標準的なサーバ側が駆動するコンテントネゴシエーション"
"が典型的に持っているエラーコンディション (例えば、 ``406 Not Available`` や "
"``303 Multiple Choices`` 、ないし、応答のデフォルトの型) のどれでもひとつを選"
"択しても構いません。"

#: ../source/specifications/simple-repository-api.rst:891
msgid "Endpoint Configuration"
msgstr "エンドポイントの設定"

#: ../source/specifications/simple-repository-api.rst:893
msgid ""
"This option technically is not a special option at all, it is just a natural "
"consequence of using content negotiation and allowing servers to select "
"which of the available content types is their default."
msgstr ""
"このオプションは、技術的には何ら特別なオプションではなく、コンテントネゴシ"
"エーションを使用することに伴う自然な結果であり、利用可能なコンテント型のいず"
"れかを自身のデフォルトとしてサーバが選択することを許すものです。"

#: ../source/specifications/simple-repository-api.rst:897
msgid ""
"If a server is unwilling or unable to implement the server-driven content "
"negotiation, and would instead rather require users to explicitly configure "
"their client to select the version they want, then that is a supported "
"configuration."
msgstr ""
"あるサーバがサーバ主導のコンテントネゴシエーションを実装したくないか実装する"
"ことができなくて、むしろユーザに対してクライアントが望むバージョンを選択する"
"ように明示的に要求するのであれば、それはサポートされているコンフィグレーショ"
"ンのひとつです。"

#: ../source/specifications/simple-repository-api.rst:901
msgid ""
"To enable this, a server should make multiple endpoints (for instance, ``/"
"simple/v1+html/`` and/or ``/simple/v1+json/``) for each version+format that "
"they wish to support. Under that endpoint, they can host a copy of their "
"repository that only supports one (or a subset) of the content-types. When a "
"client makes a request using the ``Accept`` header, the server can ignore it "
"and return the content type that corresponds to that endpoint."
msgstr ""
"これを有効にするためには、サーバは、複数のエンドポイント (例えば、 ``/simple/"
"v1+html/`` と ``/simple/v1+json/`` のいずれかまたは両方) をサポートしたいと考"
"える version+format のそれぞれにするべきです。このようなエンドポイントのもと"
"では、コンテント型のひとつ (またはサブセット) をサポートするリポジトリのコ"
"ピーをホストすることができます。クライアントが ``Accept`` ヘッダを使ってリク"
"エストした時に、サーバはそれを無視して当該エンドポイントに対応するコンテント"
"型を返すことができます。"

#: ../source/specifications/simple-repository-api.rst:908
msgid ""
"For clients that wish to require specific configuration, they can keep track "
"of which version+format a specific repository URL was configured for, and "
"when making a request to that server, emit an ``Accept`` header that *only* "
"includes the correct content type."
msgstr ""
"特定のコンフィグレーションを要求したいと願うクライアントにとっては、ある特定"
"のリポジトリ URL にどんな version+format が設定されたかを追跡することができま"
"すし、そのサーバへのリクエストを作成する時に正しいコンテント型 **だけ** を含"
"んだ ``Accept`` ヘッダを発出することができます。"

#: ../source/specifications/simple-repository-api.rst:915
msgid "TUF Support - PEP 458"
msgstr "TUF サポート - PEP 458"

#: ../source/specifications/simple-repository-api.rst:917
msgid ""
":pep:`458` requires that all API responses are hashable and that they can be "
"uniquely identified by a path relative to the repository root. For a Simple "
"API repository, the target path is the Root of our API (e.g. ``/simple/`` on "
"PyPI). This creates challenges when accessing the API using a TUF client "
"instead of directly using a standard HTTP client, as the TUF client cannot "
"handle the fact that a target could have multiple different representations "
"that all hash differently."
msgstr ""
":pep:`458` は、すべての API 応答がハッシュ可能で、リポジトリのルートからの相"
"対パスによって一意に識別できることを要求しています。シンプル API リポジトリで"
"は、ターゲットのパスは、我々の API のルート (例えば、 PyPI における ``/"
"simple/``) です。標準の HTTP クライアントを使う代わりに TUF クライアントを"
"使って API にアクセスする時にはこれが試練を生み出しますが、それというのは、"
"ハッシュが相異なるような複数の異なる表現形式をターゲットが持っているかもしれ"
"ないという事実を TUF クライアントが扱えないからです。"

#: ../source/specifications/simple-repository-api.rst:924
msgid ""
":pep:`458` does not specify what the target path should be for the Simple "
"API, but TUF requires that the target paths be \"file-like\", in other "
"words, a path like ``simple/PROJECT/`` is not acceptable, because it "
"technically points to a directory."
msgstr ""
":pep:`458` は、どんなターゲットパスがシンプル API 向けであるべきかについて指"
"定していませんが、 TUF はターベットパスが \"ファイルライク <file-like>\" であ"
"ることを要求し、換言すれば、 ``simple/PROJECT/.`` のようなパスは技術的には"
"ディレクトリを指し示しているので受け入れ不可能です。"

#: ../source/specifications/simple-repository-api.rst:929
msgid ""
"The saving grace is that the target path does not *have* to actually match "
"the URL being fetched from the Simple API, and it can just be a sigil that "
"the fetching code knows how to transform into the actual URL that needs to "
"be fetched. This same thing can hold true for other aspects of the actual "
"HTTP request, such as the ``Accept`` header."
msgstr ""
"欠点を補う取り柄は、シンプル API から持ってきた URL にターゲットパスが実際に "
"*合致していなければならないということはない* ことで、取得する必要のある URL "
"の実際の形への変換の方法を取得したコードが知っていることが魔法の印形になり得"
"ます。これと同じことが、 ``Accept`` ヘッダのような実際の HTTP リクエスト他の"
"側面についても当てはまります。"

#: ../source/specifications/simple-repository-api.rst:935
msgid ""
"Ultimately figuring out how to map a directory to a filename is out of scope "
"for this spec (but it would be in scope for :pep:`458`), and this spec "
"defers making a decision about how exactly to represent this inside of :pep:"
"`458` metadata."
msgstr ""
"結局、あるディレクトリをファイル名に対応させる方法を解明することはこの仕様の"
"スコープの外にあります (しかし :pep:`458` のスコープの中にはあるでしょう) "
"が、この仕様では、 :pep:`458` のメタデータの中にこれをどれほど正確に表現する"
"のかについての決断を行うことを遅延させているのです。"

#: ../source/specifications/simple-repository-api.rst:939
msgid ""
"However, it appears that the current WIP branch against pip that attempts to "
"implement :pep:`458` is using a target path like ``simple/PROJECT/index."
"html``. This could be modified to include the API version and serialization "
"format using something like ``simple/PROJECT/vnd.pypi.simple.vN.FORMAT``. So "
"the v1 HTML format would be ``simple/PROJECT/vnd.pypi.simple.v1.html`` and "
"the v1 JSON format would be ``simple/PROJECT/vnd.pypi.simple.v1.json``."
msgstr ""
"しかしながら、 :pep:`458` を実装しようと試みる pip に対する現在の WIP ブラン"
"チは、 ``simple/PROJECT/index.html`` のようなターゲットパスを使っているようで"
"す。これは、何か ``simple/PROJECT/vnd.pypi.simple.vN.Format`` のようなものを"
"使うことで、 API のバージョンやシリアル化フォーマットを包含するように修正でき"
"るかもしれません。それで、 v1 の HTML フォーマットは ``simple/PROJECT/vnd."
"pypi.v1.html`` のように、 v1 の JSON フォーマットは ``simple/PROJECT/vnd."
"pypi.simple.v1.json`` のようになることでしょう。"

#: ../source/specifications/simple-repository-api.rst:946
msgid ""
"In this case, since ``text/html`` is an alias to ``application/vnd.pypi."
"simple.v1+html`` when interacting through TUF, it likely will make the most "
"sense to normalize to the more explicit name."
msgstr ""
"このケースでは、 ``text/html`` が ``application/vnd.pypi.simple.v1+html`` へ"
"のエイリアスであることから、 TUF を通じて相互作用する時にはもっと明示的な名称"
"に正規化する方が最大の意味をなすことになるでしょう。"

#: ../source/specifications/simple-repository-api.rst:950
msgid ""
"Likewise the ``latest`` metaversion should not be included in the targets, "
"only explicitly declared versions should be supported."
msgstr ""
"``latest`` メタバージョンがターゲットの中に含まれているべきではないのと同様"
"に、明示的に宣言されたバージョンだけがサポートされるべきです。"

#: ../source/specifications/simple-repository-api.rst:956
msgid ""
"This section is non-normative, and represents what the spec authors believe "
"to be the best default implementation decisions for something implementing "
"this spec, but it does **not** represent any sort of requirement to match "
"these decisions."
msgstr ""
"この節は 規範的ではなく、この仕様を実装する上での最善のデフォルト実装の決定だ"
"と仕様の執筆者たちが信じるものを表現していますが、しかし、これらの決定に合致"
"させるための要求事項としてはいかなるものも **表現していません** 。"

#: ../source/specifications/simple-repository-api.rst:960
msgid ""
"These decisions have been chosen to maximize the number of requests that can "
"be moved onto the newest version of an API, while maintaining the greatest "
"amount of compatibility. In addition, they've also tried to make using the "
"API provide guardrails that attempt to push clients into making the best "
"choices it can."
msgstr ""
"これらの決断は、 API の最新のバージョンの上に移行できるような、その一方でなる"
"べく大量の互換性も維持するような要求事項を数の上でなるべく最大化するように選"
"択されています。加えて、クライアント側が最善の選択を行うようにと試みるガード"
"レールを API が提供するように試みてきました。"

#: ../source/specifications/simple-repository-api.rst:965
msgid "It is recommended that servers:"
msgstr "サーバには次のことが推奨されます:"

#: ../source/specifications/simple-repository-api.rst:967
msgid ""
"Support all 3 content types described in this spec, using server-driven "
"content negotiation, for as long as they reasonably can, or at least as long "
"as they're receiving non trivial traffic that uses the HTML responses."
msgstr ""
"サーバ主導のコンテントネゴシエーションを使って、合理的に可能である限り、もし"
"くは、少なくとも HTML 応答を用いる非自明のトラフィックを受け取る限り、この仕"
"様の中で記述される３個のコンテント型の全てをサポートすること。"

#: ../source/specifications/simple-repository-api.rst:971
msgid ""
"When encountering an ``Accept`` header that does not contain any content "
"types that it knows how to work with, the server should not ever return a "
"``300 Multiple Choice`` response, and instead return a ``406 Not "
"Acceptable`` response."
msgstr ""
"サーバは、どのように協働すれば良いかを知っているコンテント型をひとつも含まな"
"いような ``Accept`` ヘッダに遭遇した時、 ``300 Multiple Choice`` 応答を返すべ"
"きではなく、その代わりに ``406 Not Acceptable`` 応答を返すべきです。"

#: ../source/specifications/simple-repository-api.rst:976
msgid ""
"However, if choosing to use the endpoint configuration, you should prefer to "
"return a ``200 OK`` response in the expected content type for that endpoint."
msgstr ""
"しかしながら、このエンドポイント設定を使うことを選択したなら、 できることなら"
"そのエンドポイントが期待しているコンテント型で ``200 Ok`` を返したいと考える"
"べきです。"

#: ../source/specifications/simple-repository-api.rst:979
msgid ""
"When selecting an acceptable version, the server should choose the highest "
"version that the client supports, with the most expressive/featureful "
"serialization format, taking into account the specificity of the client "
"requests as well as any quality priority values they have expressed, and it "
"should only use the ``text/html`` content type as a last resort."
msgstr ""
"受け入れ可能なバージョンを選択する時、サーバは、クライアントがサポートする中"
"で、最も表現力が豊かで機能的なシリアル化フォーマットを伴っていて、クライアン"
"ト側が表現したクオリティ優先度 <quality priority> と同じくクライアントからの"
"リクエストの特質を考慮に入れて、最も高いバージョンを選択するべきであり、 "
"``text/html`` コンテント型の使用は最後の逃避先とするべきです。"

#: ../source/specifications/simple-repository-api.rst:985
msgid "It is recommended that clients:"
msgstr "クライアント側には次のことが推奨されます:"

#: ../source/specifications/simple-repository-api.rst:987
msgid ""
"Support all 3 content types described in this spec, using server-driven "
"content negotiation, for as long as they reasonably can."
msgstr ""
"それが合理的に実行可能である限り、サーバ側が駆動するコンテンツネゴシエーショ"
"ンを使ってこの仕様に記述された３個のコンテント型の全てをサポートすること。"

#: ../source/specifications/simple-repository-api.rst:990
msgid ""
"When constructing an ``Accept`` header, include all of the content types "
"that you support."
msgstr ""
"``Accept`` ヘッダを構築する時、サポートしているコンテント型の全てを含めるこ"
"と。"

#: ../source/specifications/simple-repository-api.rst:993
msgid ""
"You should generally *not* include a quality priority value for your content "
"types, unless you have implementation specific reasons that you want the "
"server to take into account (for example, if you're using the standard "
"library HTML parser and you're worried that there may be some kinds of HTML "
"responses that you're unable to parse in some edge cases)."
msgstr ""
"サーバ側で考慮に入れてもらいたい特定の理由 (例えば、標準ライブラリの HTML "
"パーサを使っていて、何らかのエッジケースにおいてパースできない何らかの種類の "
"HTML 応答があるかもしれないと心配している場合) のある実装でない限り、一般的に"
"コンテント型にはクオリティ優先度 <quality priority> を含めるべきではありませ"
"ん。"

#: ../source/specifications/simple-repository-api.rst:999
msgid ""
"The one exception to this recommendation is that it is recommended that you "
"*should* include a ``;q=0.01`` value on the legacy ``text/html`` content "
"type, unless it is the only content type that you are requesting."
msgstr ""
"この推奨事項に対する例外のひとつは、それがリクエストしている唯一のコンテント"
"型であるという場合を除けば、伝統的な ``text/html`` コンテント型には ``;"
"q=0.01`` を含めることが推奨されるということです。"

#: ../source/specifications/simple-repository-api.rst:1003
msgid ""
"Explicitly select what versions they are looking for, rather than using the "
"``latest`` meta version during normal operation."
msgstr ""
"通常操作では ``latest`` メタバージョンを使うのではなくて、希求しているバー"
"ジョンがどれであるかを明示的に選択すること。"

#: ../source/specifications/simple-repository-api.rst:1006
msgid ""
"Check the ``Content-Type`` of the response and ensure it matches something "
"that you were expecting."
msgstr ""
"応答の ``Content-Type`` を調べて、こちらが期待しているものに合致していること"
"を確認すること。"

#: ../source/specifications/simple-repository-api.rst:1014
msgid "September 2015: initial form of the HTML format, in :pep:`503`"
msgstr "2015年9月: :pep:`503` で HTML フォーマットの初期フォーム"

#: ../source/specifications/simple-repository-api.rst:1015
msgid "July 2016: Requires-Python metadata, in an update to :pep:`503`"
msgstr "2016年7月: :pep:`503` で Requires-Python メタデータ"

#: ../source/specifications/simple-repository-api.rst:1016
msgid "May 2019: \"yank\" support, in :pep:`592`"
msgstr "2019年5月: :pep:`592` で \"ヤンク <yank>\" サポート"

#: ../source/specifications/simple-repository-api.rst:1017
msgid ""
"July 2020: API versioning convention and metadata, and declaring the HTML "
"format as API v1, in :pep:`629`"
msgstr ""
"2020年7月: :pep:`629` で、 API バージョン付け慣行とメタデータ、 HTML フォー"
"マットを API v1.として宣言"

#: ../source/specifications/simple-repository-api.rst:1019
msgid ""
"May 2021: providing package metadata independently from a package, in :pep:"
"`658`"
msgstr ""
"2021年5月: :pep:`658` で、パッケージとは独立にパッケージのメタデータを提供"

#: ../source/specifications/simple-repository-api.rst:1021
msgid ""
"May 2022: initial form of the JSON format, with a mechanism for clients to "
"choose between them, and declaring both formats as API v1, in :pep:`691`"
msgstr ""
"2022年5月: :pep:`691` により、クライアント側が選択する機構とともに JSON "
"フォーマットの初期の形、両フォーマットを API v1 として宣言"

#: ../source/specifications/simple-repository-api.rst:1023
msgid ""
"October 2022: project versions and file size and upload-time in the JSON "
"format, in :pep:`700`"
msgstr ""
"2022年10月: :pep:`700` により、 JSON フォーマットにおけるプロジェクトバージョ"
"ン・ファイルサイズ・アップロード日時"

#: ../source/specifications/simple-repository-api.rst:1025
msgid ""
"June 2023: renaming the field which provides package metadata independently "
"from a package, in :pep:`714`"
msgstr ""
"2023年6月: :pep:`714` により、パッケージから独立したパッケージメタデータを提"
"供するフィールドを名称変更"

#: ../source/specifications/simple-repository-api.rst:1027
#, fuzzy
#| msgid ""
#| "October 2022: project versions and file size and upload-time in the JSON "
#| "format, in :pep:`700`"
msgid ""
"November 2024: provenance metadata in the HTML and JSON formats, in :pep:"
"`740`"
msgstr ""
"2022年10月: :pep:`700` により、 JSON フォーマットにおけるプロジェクトバージョ"
"ン・ファイルサイズ・アップロード日時"

#: ../source/specifications/simple-repository-api.rst:1028
#, fuzzy
#| msgid ""
#| "October 2022: project versions and file size and upload-time in the JSON "
#| "format, in :pep:`700`"
msgid ""
"July 2025: project status markers in the HTML and JSON formats, in :pep:`792`"
msgstr ""
"2022年10月: :pep:`700` により、 JSON フォーマットにおけるプロジェクトバージョ"
"ン・ファイルサイズ・アップロード日時"

#: ../source/specifications/simple-repository-api.rst:1029
msgid ""
"July 2025: layout changes (dedicated page for file yanking, introduce "
"concepts before API details)"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:6
msgid "Source distribution format"
msgstr "ソースコード配布物のフォーマット"

#: ../source/specifications/source-distribution-format.rst:8
#, fuzzy
#| msgid ""
#| "The current standard format of source distribution format is identified "
#| "by the presence of a :file:`pyproject.toml` file in the distribution "
#| "archive.  The layout of such a distribution was originally specified in :"
#| "pep:`517` and is formally documented here."
msgid ""
"The current standard source distribution format is identified by the "
"presence of a :file:`pyproject.toml` file in the distribution archive.  The "
"layout of such a distribution was originally specified in :pep:`517` and is "
"formally documented here."
msgstr ""
"ソースコード配布物のフォーマットに関する現在の標準フォーマットは、配布物の"
"アーカイブに :file:`pyproject.toml` ファイルが存在することで識別されます。そ"
"のような配布物のレイアウトは元々は :pep:`517` で指定され、ここに公式にドキュ"
"メント化されています。"

#: ../source/specifications/source-distribution-format.rst:13
msgid ""
"There is also the legacy source distribution format, implicitly defined by "
"the behaviour of ``distutils`` module in the standard library, when "
"executing :command:`setup.py sdist`. This document does not attempt to "
"standardise this format, except to note that if a legacy source distribution "
"contains a ``PKG-INFO`` file using metadata version 2.2 or later, then it "
"MUST follow the rules applicable to source distributions defined in the "
"metadata specification."
msgstr ""
"これとは別に従来のソースコード配布物のフォーマットが存在しており、それは標準"
"ライブラリの ``distutils`` モジュールが :command:`setup.py sdist` の形で実行"
"される時の動作によって暗黙裡に定義されています。この説明文書では、この従来の"
"ソースコード配布物がバージョン 2.2 およびそれ以降のバージョンのメタデータを"
"使った ``PKG-INFO`` ファイルを含んでいる場合には、メタデータの仕様で定義され"
"たルールが該当のソースコード配布物にも適用されなければならないことを注記する"
"以外には、このフォーマットの標準化を試みることはしません。"

#: ../source/specifications/source-distribution-format.rst:21
msgid "Source distributions are also known as *sdists* for short."
msgstr "ソースコード配布物は、短く *sdists* としても知られています。"

#: ../source/specifications/source-distribution-format.rst:26
msgid "Source trees"
msgstr "ソースコードツリー"

#: ../source/specifications/source-distribution-format.rst:28
#, fuzzy
#| msgid ""
#| "A *source tree* is a collection of files and directories -- like a "
#| "version control system checkout -- which contains a :file:`pyproject."
#| "toml` file that can be use to build a source distribution from the "
#| "contained files and directories. :pep:`517` and :pep:`518` specify what "
#| "is required to meet the definition of what :file:`pyproject.toml` must "
#| "contain for something to be deemed a source tree."
msgid ""
"A *source tree* is a collection of files and directories -- like a version "
"control system checkout -- which contains a :file:`pyproject.toml` file that "
"can be used to build a source distribution from the contained files and "
"directories. :pep:`517` and :pep:`518` specify what is required to meet the "
"definition of what :file:`pyproject.toml` must contain for something to be "
"deemed a source tree."
msgstr ""
"*ソースツリー* は、 -- バージョン管理システムからのチェックアウトのような -- "
"ファイルとディレクトリの集合で、その中に書かれたファイルやディレクトリから"
"ソースコード配布物をビルドすることができるような :file:`pyproject.toml` ファ"
"イルを含んでいるものです。何かをソースコードツリーであると見做すために :file:"
"`pyproject.toml` ファイルが含んでいなければならないものが何であるかの定義に合"
"致するために要求されることは何であるかについては :pep:`517` と :pep:`518` が"
"指定しています。"

#: ../source/specifications/source-distribution-format.rst:38
msgid "Source distribution file name"
msgstr "ソースコード配布物のファイル名"

#: ../source/specifications/source-distribution-format.rst:40
msgid ""
"The file name of a sdist was standardised in :pep:`625`. The file name must "
"be in the form ``{name}-{version}.tar.gz``, where ``{name}`` is normalised "
"according to the same rules as for binary distributions (see :ref:`binary-"
"distribution-format`), and ``{version}`` is the canonicalized form of the "
"project version (see :ref:`version-specifiers`)."
msgstr ""
"sdist のファイル名は、 :pep:`625` で標準化されています。ファイル名は "
"``{name}-{version}.tar.gz`` の形をしていなければならず、この中の ``{name}`` "
"はバイナリ配布物のファイル名に関するルールと同様のルールに従って正規化されて"
"いなければならず (:ref:`バイナリ配布物のフォーマット <binray-distribution-"
"format>` を見てください) 、かつ、 ``{version}`` はプロジェクトのバージョンの"
"形に正規化されていなければなりません (:ref:`バージョン指定子 <version-"
"specifires>` を見てください) 。"

#: ../source/specifications/source-distribution-format.rst:46
msgid ""
"The name and version components of the filename MUST match the values stored "
"in the metadata contained in the file."
msgstr ""
"ファイル名の name と version の部分は、ファイル内のメタデータに保存されている"
"値に合致しなければなりません。"

#: ../source/specifications/source-distribution-format.rst:49
msgid ""
"Code that produces a source distribution file MUST give the file a name that "
"matches this specification. This includes the ``build_sdist`` hook of a :"
"term:`build backend <Build Backend>`."
msgstr ""
"ソースコード配布物のファイルを生成するコードは、この仕様に適合する名前をファ"
"イルに与えなければなりません。これは、 :term:`ビルドバックエンド <Build "
"Backend>` の ``build_sdist`` フックにも当てはまります。"

#: ../source/specifications/source-distribution-format.rst:53
msgid ""
"Code that processes source distribution files MAY recognise source "
"distribution files by the ``.tar.gz`` suffix and the presence of precisely "
"*one* hyphen in the filename. Code that does this may then use the "
"distribution name and version from the filename without further verification."
msgstr ""
"ソースコード配布物を生成するソースコードは、 ``.tar.gz`` 拡張子がついていて"
"ファイル名の中に正確に *ひとつ* のハイフンが存在していることを以て、ソース"
"コード配布物のファイルであると認識しても構いません。これを行うソースコード"
"は、この場合には、ファイル名から得た配布物の名前とバージョンをそれ以上の検証"
"をせずに使用しても構いません。"

#: ../source/specifications/source-distribution-format.rst:59
msgid "Source distribution file format"
msgstr "ソースコード配布物のファイルフォーマット"

#: ../source/specifications/source-distribution-format.rst:61
#, fuzzy
#| msgid ""
#| "A ``.tar.gz`` source distribution (sdist) contains a single top-level "
#| "directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the "
#| "source files of the package. The name and version MUST match the metadata "
#| "stored in the file. This directory must also contain a :file:`pyproject."
#| "toml` in the format defined in :ref:`pyproject-toml-spec`, and a ``PKG-"
#| "INFO`` file containing metadata in the format described in the :ref:`core-"
#| "metadata` specification. The metadata MUST conform to at least version "
#| "2.2 of the metadata specification."
msgid ""
"A ``.tar.gz`` source distribution (sdist) contains a single top-level "
"directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the "
"source files of the package. The name and version MUST match the metadata "
"stored in the file. This directory must also contain a :file:`pyproject."
"toml` in the format defined in :ref:`pyproject-toml-spec`, and a :file:`PKG-"
"INFO` file containing metadata in the format described in the :ref:`core-"
"metadata` specification. The metadata MUST conform to at least version 2.2 "
"of the metadata specification."
msgstr ""
"``.tar.gz`` ソースコード配布物 (sdist) には、トップレベルに ``{name}-"
"{version}`` (例えば ``foo-1.0``) と言う名前の単一のディレクトリがあって、そこ"
"にパッケージのソールファイル群を含んでいます。 name と version は、ファイル内"
"のメタデータと合致していなければなりません。このディレクトリは、 :ref:"
"`pyproject-toml-spec` で定義されたフォーマットで書かれた :file:`pyproject."
"toml` ファイルや、 :ref:`core-metadata` 仕様内に記述されたフォーマットで書か"
"れたメタデータを含んだ ``PKG-INFO`` ファイルも含んでいなければなりません。こ"
"のようなメタデータは、少なくともバージョン 2.2 のメタデータ仕様を満足するもの"
"でなければなりません。"

#: ../source/specifications/source-distribution-format.rst:69
msgid ""
"If the metadata version is 2.4 or greater, the source distribution MUST "
"contain any license files specified by the ``License-File`` field in the :"
"file:`PKG-INFO` at their respective paths relative to the root directory of "
"the sdist (containing the :file:`pyproject.toml` and the :file:`PKG-INFO` "
"metadata)."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:74
msgid ""
"No other content of a sdist is required or defined. Build systems can store "
"whatever information they need in the sdist to build the project."
msgstr ""
"sdist の他の内容については必須でもなく定義もされていません。ビルドシステム"
"は、プロジェクトをビルドするのに必要なものであればどんな情報でも sdist 内に保"
"存しておくことができます。"

#: ../source/specifications/source-distribution-format.rst:77
msgid ""
"The tarball should use the modern POSIX.1-2001 pax tar format, which "
"specifies UTF-8 based file names. In particular, source distribution files "
"must be readable using the standard library tarfile module with the open "
"flag 'r:gz'."
msgstr ""
"tar ボールでは、ファイル名に UTF-8 を使える近代的な POSIX.1-2001 pax tar "
"フォーマットを使用するべきです。とりわけ、ソースコード配布物のファイル群は、"
"標準ライブラリの tarfile モジュールに open flag 'r:gz' を与えることで読み込め"
"るものでなければなりません。"

#: ../source/specifications/source-distribution-format.rst:85
msgid "Source distribution archive features"
msgstr "ソースコード配布物アーカイブの機能"

#: ../source/specifications/source-distribution-format.rst:87
msgid ""
"Because extracting tar files as-is is dangerous, and the results are "
"platform-specific, archive features of source distributions are limited."
msgstr ""
"tar ファイルをそのまま展開することは危険を伴うため、また、展開結果がプラット"
"フォーム依存になるため、ソースコード配布物アーカイブの機能は制限されていま"
"す。"

#: ../source/specifications/source-distribution-format.rst:91
msgid "Unpacking with the data filter"
msgstr "データフィルタしながらアンパックする"

#: ../source/specifications/source-distribution-format.rst:93
msgid ""
"When extracting a source distribution, tools MUST either use :py:func:"
"`tarfile.data_filter` (e.g. :py:meth:`TarFile.extractall(..., filter='data') "
"<tarfile.TarFile.extractall>`), OR follow the *Unpacking without the data "
"filter* section below."
msgstr ""
"ソースコード配布物を展開する時には、ツール類は、 :py:func:`tarfile."
"data_filter` (例えば :py:meth:`TarFile.extractall(..., filter='data') "
"<tarfile.TarFile.extractall>`) か、あるいは、後述する *データフィルタなしでア"
"ンパックする<Unpacking without the data filter>* 節に従うか、いずれかを行わな"
"ければなりません。"

#: ../source/specifications/source-distribution-format.rst:97
msgid ""
"As an exception, on Python interpreters without :py:func:`hasattr(tarfile, "
"'data_filter') <tarfile.data_filter>` (:pep:`706`), tools that normally use "
"that filter (directly on indirectly) MAY warn the user and ignore this "
"specification. The trade-off between usability (e.g. fully trusting the "
"archive) and security (e.g. refusing to unpack) is left up to the tool in "
"this case."
msgstr ""
"例外として、 :py:func:`hasattr(tarfile, 'data_filter') <tarfile."
"data_filter>` (:pep:`706`) を持たない Python インタープリタ上では、通常ならそ"
"のようなフィルタを使うはずのツール類はユーザに対して警告した上でこの仕様を無"
"視しても構いません。利便性 (例えばアーカイブを完全に信頼すること) とセキュリ"
"ティ (例えばアンパックすることを拒否すること) の間のトレードオフは、この場合"
"にはツールに委ねられています。"

#: ../source/specifications/source-distribution-format.rst:105
msgid "Unpacking without the data filter"
msgstr "データフィルタなしでアンパックする"

#: ../source/specifications/source-distribution-format.rst:107
msgid ""
"Tools that do not use the ``data`` filter directly (e.g. for backwards "
"compatibility, allowing additional features, or not using Python) MUST "
"follow this section. (At the time of this writing, the ``data`` filter also "
"follows this section, but it may get out of sync in the future.)"
msgstr ""
"(例えば、後方互換性のためであったり、追加的な機能を許容するためであったり、あ"
"るいは Python を使わない場合であったりで) ``データ <data>`` フィルタを直接に"
"は使わないツール類は、この節の内容に従わなければなりません。(執筆時点では、 "
"``データ <data>`` フィルタもこの節の内容に従うものになっていますが、将来には"
"この同期が外れるかもしれません。)"

#: ../source/specifications/source-distribution-format.rst:113
msgid ""
"The following files are invalid in an *sdist* archive. Upon encountering "
"such an entry, tools SHOULD notify the user, MUST NOT unpack the entry, and "
"MAY abort with a failure:"
msgstr ""
"以下に述べるファイル群は、 *sdist* アーカイブの中に置くには不適格です。そのよ"
"うなエントリに遭遇した場合には、ツール類はユーザに通知するべきであり、そのエ"
"ントリをアンパックしてはならず、そして、エラー (failure) とともに処理を中断し"
"ても構いません:"

#: ../source/specifications/source-distribution-format.rst:117
msgid "Files that would be placed outside the destination directory."
msgstr "宛先となるディレクトリの外側に置かれるファイル群。"

#: ../source/specifications/source-distribution-format.rst:118
msgid "Links (symbolic or hard) pointing outside the destination directory."
msgstr ""
"宛先となるディレクトリの外側を指し示すリンク (シンボリックでもハードでも)。"

#: ../source/specifications/source-distribution-format.rst:119
msgid "Device files (including pipes)."
msgstr "デバイスファイル (パイプを含む)。"

#: ../source/specifications/source-distribution-format.rst:121
msgid ""
"The following are also invalid. Tools MAY treat them as above, but are NOT "
"REQUIRED to do so:"
msgstr ""
"以下に示すものもまた、不適格です。ツール類はこれらを上記のように扱っても構い"
"ませんが、そうすることを要求されているわけではありません:"

#: ../source/specifications/source-distribution-format.rst:124
msgid "Files with a ``..`` component in the filename or link target."
msgstr "ファイル名の一部に ``..`` を含むファイルまたはリンクのターゲット。"

#: ../source/specifications/source-distribution-format.rst:125
msgid "Links pointing to a file that is not part of the archive."
msgstr "当該アーカイブの一部ではないファイルを指し示すリンク。"

#: ../source/specifications/source-distribution-format.rst:127
msgid ""
"Tools MAY unpack links (symbolic or hard) as regular files, using content "
"from the archive."
msgstr ""
"ツール類は、アーカイブから得た内容を使って、リンク類 (シンボリックまたはハー"
"ド) をアンパックしても構いません。"

#: ../source/specifications/source-distribution-format.rst:130
msgid "When extracting *sdist* archives:"
msgstr "*sdist* アーカイブを展開する時:"

#: ../source/specifications/source-distribution-format.rst:132
msgid ""
"Leading slashes in file names MUST be dropped. (This is nowadays standard "
"behaviour for ``tar`` unpacking.)"
msgstr ""
"ファイル名の先頭のスラッシュは、必ず削除しなければなりません。 (これは、 "
"``tar`` を展開する時の今日的な標準的な振る舞いです。)"

#: ../source/specifications/source-distribution-format.rst:134
msgid "For each ``mode`` (Unix permission) bit, tools MUST either:"
msgstr ""
"``モード <mode>`` (UNIXでのパーミッション) の各ビットについて、ツール類は以下"
"のうちのいずれかをしなければなりません:"

#: ../source/specifications/source-distribution-format.rst:136
msgid "use the platform's default for a new file/directory (respectively),"
msgstr ""
"プラットフォームの既定値を新しく作るファイル/ディレクトリに (それぞれ) 適用す"
"るか、"

#: ../source/specifications/source-distribution-format.rst:137
msgid "set the bit according to the archive, or"
msgstr "アーカイブにおける (パーミッション) ビットに従って設定するか、または、"

#: ../source/specifications/source-distribution-format.rst:138
msgid ""
"use the bit from ``rw-r--r--`` (``0o644``) for non-executable files or "
"``rwxr-xr-x`` (``0o755``) for executable files and directories."
msgstr ""
"非実行ファイルには ``rw-r--r--`` (``0o644``) の (パーミッション) ビットを設定"
"し、実行ファイルとディレクトリには ``rwxr-xr-x`` (``0o755``) を設定する。"

#: ../source/specifications/source-distribution-format.rst:141
msgid "High ``mode`` bits (setuid, setgid, sticky) MUST be cleared."
msgstr ""
"特殊な ``モード <mode>`` ビット (setups, setgid, sticky) については、削除 (ク"
"リア) しなければなりません。"

#: ../source/specifications/source-distribution-format.rst:142
msgid "It is RECOMMENDED to preserve the user *executable* bit."
msgstr ""
"ユーザ (多分オーナのこと) *実行* ビットについては、そのまま保存することが推奨"
"されています。"

#: ../source/specifications/source-distribution-format.rst:146
msgid "Further hints"
msgstr "さらなるヒント"

#: ../source/specifications/source-distribution-format.rst:148
msgid ""
"Tool authors are encouraged to consider how *hints for further verification* "
"in ``tarfile`` documentation apply to their tool."
msgstr ""
"ツールの作成者は、自分たちのツールに適用する ``tarfile`` 説明文書の中に、*さ"
"らなる検証を行うためのヒント集* を含めることを検討するように推奨されていま"
"す。"

#: ../source/specifications/source-distribution-format.rst:155
msgid ""
"November 2020: The original version of this specification was approved "
"through :pep:`643`."
msgstr ""
"2020年11月: :pep:`643` を通じてこの仕様の当初のバージョンが承認された。"

#: ../source/specifications/source-distribution-format.rst:157
msgid "July 2021: Defined what a source tree is."
msgstr "2021年7月: ソースコードツリーとは何であるかを定義。"

#: ../source/specifications/source-distribution-format.rst:158
msgid ""
"September 2022: The filename of a source distribution was standardized "
"through :pep:`625`."
msgstr ""
"2022年9月: :pep:`625` を通じて、ソースコード配布物のファイル名を標準化した。"

#: ../source/specifications/source-distribution-format.rst:160
msgid ""
"August 2023: Source distribution archive features were standardized through :"
"pep:`721`."
msgstr ""
"2023年8月: : pep:`721` を通じて、ソースコード配布物のアーカイブの機能について"
"標準化された。"

#: ../source/specifications/source-distribution-format.rst:162
#, fuzzy
#| msgid ""
#| "September 2022: The filename of a source distribution was standardized "
#| "through :pep:`625`."
msgid ""
"December 2024: License files inclusion into source distribution was "
"standardized through :pep:`639`."
msgstr ""
"2022年9月: :pep:`625` を通じて、ソースコード配布物のファイル名を標準化した。"

#: ../source/specifications/version-specifiers.rst:7
#: ../source/specifications/version-specifiers.rst:785
msgid "Version specifiers"
msgstr "バージョン指定子"

#: ../source/specifications/version-specifiers.rst:10
msgid ""
"This specification describes a scheme for identifying versions of Python "
"software distributions, and declaring dependencies on particular versions."
msgstr ""
"この仕様では、 Python ソフトウェア配布物のバージョンを識別したり、特定のバー"
"ジョンにおける依存関係を宣言したりする枠組みを記述します。"

#: ../source/specifications/version-specifiers.rst:15
msgid "Definitions"
msgstr "用語定義"

#: ../source/specifications/version-specifiers.rst:17
msgid ""
"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL "
"NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and "
"\"OPTIONAL\" in this document are to be interpreted as described in :rfc:"
"`2119`."
msgstr ""
"この説明文書におけるキーワード \"MUST\", \"MUST NOT\", \"REQUIRED\", "
"\"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", "
"\"MAY\", および \"OPTIONAL\" は、 :rfc:`2119` に記述されているように解釈され"
"ます。"

#: ../source/specifications/version-specifiers.rst:21
msgid ""
"\"Build tools\" are automated tools intended to run on development systems, "
"producing source and binary distribution archives. Build tools may also be "
"invoked by integration tools in order to build software distributed as "
"sdists rather than prebuilt binary archives."
msgstr ""
"\"ビルドツール <Build tools>\" とは、開発システムを走らせてソースコード配布物"
"やバイナリ配布物のアーカイブを生成することを意図した自動化ツールのことです。"
"ビルドツールは、また、ビルド済みのバイナリのアーカイブではなくて sdist として"
"配布されるソフトウェアをビルドする目的で統合ツールから起動されることもありま"
"す。"

#: ../source/specifications/version-specifiers.rst:26
msgid ""
"\"Index servers\" are active distribution registries which publish version "
"and dependency metadata and place constraints on the permitted metadata."
msgstr ""
"\"インデックスサーバ <Index servers>\" とは、バージョンと依存関係のメタデータ"
"を広報し、許されるメタデータに制限を加えるような、正規の配布物の登記所にあた"
"るものです。"

#: ../source/specifications/version-specifiers.rst:29
msgid ""
"\"Publication tools\" are automated tools intended to run on development "
"systems and upload source and binary distribution archives to index servers."
msgstr ""
"\"出版ツール <Publication tools>\" とは、開発システムを走らせ、ソースコード配"
"布物やバイナリ配布物のアーカイブをインデックスサーバへアップロードすることを"
"意図した自動化ツールのことです。"

#: ../source/specifications/version-specifiers.rst:32
msgid ""
"\"Installation tools\" are integration tools specifically intended to run on "
"deployment targets, consuming source and binary distribution archives from "
"an index server or other designated location and deploying them to the "
"target system."
msgstr ""
"\"インストールツール <Installation tools>\" とは、デプロイメントターゲット上"
"で走らせ、インデックスサーバもしくは別途指定された場所から得たソースコード配"
"布物やバイナリ配布物のアーカイブを入力として、ターゲットとなるシステムに配置"
"することを意図した統合ツールです。"

#: ../source/specifications/version-specifiers.rst:37
msgid ""
"\"Automated tools\" is a collective term covering build tools, index "
"servers, publication tools, integration tools and any other software that "
"produces or consumes distribution version and dependency metadata."
msgstr ""
"\"自動化ツール <Automated tools>\" とは、ビルドツール・インデックスサーバ・出"
"版ツール・統合ツールや、配布物のバージョン・依存関係メタデータを作り出したり"
"入力として扱うその他のソフトウェアを集合的に包含する用語です。"

#: ../source/specifications/version-specifiers.rst:43
msgid "Version scheme"
msgstr "バージョン番号枠組み"

#: ../source/specifications/version-specifiers.rst:45
msgid ""
"Distributions are identified by a public version identifier which supports "
"all defined version comparison operations"
msgstr ""
"配布物は、すべての定義されたバージョン比較操作をサポートしている公的バージョ"
"ン識別子によって識別されます。"

#: ../source/specifications/version-specifiers.rst:48
msgid ""
"The version scheme is used both to describe the distribution version "
"provided by a particular distribution archive, as well as to place "
"constraints on the version of dependencies needed in order to build or run "
"the software."
msgstr ""
"バージョン枠組みは、特定の配布物アーカイブによって提供される配布物のバージョ"
"ンを記述するためにも使われますし、同様に、当該ソフトウェアをビルドしたり走ら"
"せたりするために必要な依存関係にあるバージョンに対して制約を加えるためにも使"
"われます。"

#: ../source/specifications/version-specifiers.rst:57
msgid "Public version identifiers"
msgstr "公的バージョン識別子"

#: ../source/specifications/version-specifiers.rst:59
msgid ""
"The canonical public version identifiers MUST comply with the following "
"scheme::"
msgstr ""
"正統な公的バージョン識別子は、以下の枠組みに合致していなければなりません::"

#: ../source/specifications/version-specifiers.rst:64
msgid ""
"Public version identifiers MUST NOT include leading or trailing whitespace."
msgstr ""
"公的バージョン識別子は、先頭もしくは末尾に空白文字を含んではなりません。"

#: ../source/specifications/version-specifiers.rst:66
msgid "Public version identifiers MUST be unique within a given distribution."
msgstr "公的バージョン識別子は、その配布物の中で一意でなければなりません。"

#: ../source/specifications/version-specifiers.rst:68
msgid ""
"Installation tools SHOULD ignore any public versions which do not comply "
"with this scheme but MUST also include the normalizations specified below. "
"Installation tools MAY warn the user when non-compliant or ambiguous "
"versions are detected."
msgstr ""
"インストールツール <Installation tools> は、この枠組みに合致しない公的バー"
"ジョンのすべてを無視するべきですが、以下に指定される標準化も含んでいなければ"
"なりません。インストールツールは、バージョンが非適合であったり曖昧であったり"
"した時には、ユーザに対して警告を行なっても構いません。"

#: ../source/specifications/version-specifiers.rst:73
msgid ""
"See also :ref:`version-specifiers-regex` which provides a regular expression "
"to check strict conformance with the canonical format, as well as a more "
"permissive regular expression accepting inputs that may require subsequent "
"normalization."
msgstr ""
"正統なフォーマットに厳密に適合していることを確認するための正規表現について"
"も、さらに標準化する必要があるかもしれない入力を受け入れるためのより緩やかな"
"正規表現についても、これらを提供する :ref:`version-specifiers-regex` を見てく"
"ださい。"

#: ../source/specifications/version-specifiers.rst:78
msgid "Public version identifiers are separated into up to five segments:"
msgstr "公的バージョン識別子は５個の部分に分割されます:"

#: ../source/specifications/version-specifiers.rst:80
msgid "Epoch segment: ``N!``"
msgstr "エポック部分: ``N!``"

#: ../source/specifications/version-specifiers.rst:81
msgid "Release segment: ``N(.N)*``"
msgstr "リリース部分: ``N(.N)*``"

#: ../source/specifications/version-specifiers.rst:82
msgid "Pre-release segment: ``{a|b|rc}N``"
msgstr "プレリリース部分: ``{a|b|rc}N``"

#: ../source/specifications/version-specifiers.rst:83
msgid "Post-release segment: ``.postN``"
msgstr "ポストリリース部分: ``.postN``"

#: ../source/specifications/version-specifiers.rst:84
msgid "Development release segment: ``.devN``"
msgstr "開発リリース部分: ``.devN``"

#: ../source/specifications/version-specifiers.rst:86
msgid ""
"Any given release will be a \"final release\", \"pre-release\", \"post-"
"release\" or \"developmental release\" as defined in the following sections."
msgstr ""
"どのリリースであっても、この後の節で定義する \"最終リリース <final "
"release>\"・\"プレリリース <pre-release>\"・\"ポストリリース <post-"
"release>\"・\"開発リリース <developmental release>\" になることでしょう。"

#: ../source/specifications/version-specifiers.rst:89
msgid ""
"All numeric components MUST be non-negative integers represented as "
"sequences of ASCII digits."
msgstr ""
"数字で構成される部分は、すべて、 ASCII の数字の並びとして表現される非負の整数"
"でなければなりません。"

#: ../source/specifications/version-specifiers.rst:92
msgid ""
"All numeric components MUST be interpreted and ordered according to their "
"numeric value, not as text strings."
msgstr ""
"数字で構成される部分は、すべて、テキスト文字列としてではなく、数としての値に"
"従って解釈され整列されなければなりません。"

#: ../source/specifications/version-specifiers.rst:95
msgid ""
"All numeric components MAY be zero. Except as described below for the "
"release segment, a numeric component of zero has no special significance "
"aside from always being the lowest possible value in the version ordering."
msgstr ""
"数字で構成される部分は、すべて、ゼロであっても構いません。リリースを表す部分"
"について後で記述する場合を除いて、数字の部分がゼロであることは、常にバージョ"
"ンの整列で取り得る最小の値であること以外には、なんら特別な重要性を持ちませ"
"ん。"

#: ../source/specifications/version-specifiers.rst:101
msgid ""
"Some hard to read version identifiers are permitted by this scheme in order "
"to better accommodate the wide range of versioning practices across existing "
"public and private Python projects."
msgstr ""
"読解困難なバージョン識別子のいくつかは、既存の公開または非公開の Python プロ"
"ジェクトにおける幅広いバージョン付与方法をよりうまく収容するために、この枠組"
"みによって許容されています。"

#: ../source/specifications/version-specifiers.rst:105
msgid ""
"Accordingly, some of the versioning practices which are technically "
"permitted by the specification are strongly discouraged for new projects. "
"Where this is the case, the relevant details are noted in the following "
"sections."
msgstr ""
"従って、当該仕様で技術的に許容されているバージョン付与方法のいくつかは、新規"
"プロジェクトにおいては強い非推奨になっています。これが問題になるケースでは、"
"引き続く節に関連する詳細事項をまとめてあります。"

#: ../source/specifications/version-specifiers.rst:116
msgid "Local version identifiers MUST comply with the following scheme::"
msgstr ""
"ローカルのバージョン指定子は、以下に述べる枠組みに適合しなければなりません::"

#: ../source/specifications/version-specifiers.rst:120
msgid ""
"They consist of a normal public version identifier (as defined in the "
"previous section), along with an arbitrary \"local version label\", "
"separated from the public version identifier by a plus. Local version labels "
"have no specific semantics assigned, but some syntactic restrictions are "
"imposed."
msgstr ""
"プラスの文字によって公的バージョン識別子と区分されている任意の \"ローカルバー"
"ジョンラベル\" を伴った、 (前の節で定義した) 通常の公的バージョン識別子で構成"
"されています。ローカルバージョンラベルは、その意味の点では特に指定はありませ"
"んが、文法の上ではいくらかの制約が課されています。"

#: ../source/specifications/version-specifiers.rst:125
msgid ""
"Local version identifiers are used to denote fully API (and, if applicable, "
"ABI) compatible patched versions of upstream projects. For example, these "
"may be created by application developers and system integrators by applying "
"specific backported bug fixes when upgrading to a new upstream release would "
"be too disruptive to the application or other integrated system (such as a "
"Linux distribution)."
msgstr ""
"ローカルのバージョン指定子は、上流のプロジェクトのパッチ適用済バージョンに互"
"換性のある API (もし適用可能なら ZBI も) を示すために用いられます。例えば、上"
"流の新しいリリースに更新することが当該アプリケーションや (Linux ディストロの"
"ような) 他の統合されたシステムにとって破壊的に過ぎるであろうという場合に、特"
"定のバグ修正をバックポートして適用することでアプリケーション開発者やシステム"
"統合者によって作成されるかもしれません。"

#: ../source/specifications/version-specifiers.rst:132
msgid ""
"The inclusion of the local version label makes it possible to differentiate "
"upstream releases from potentially altered rebuilds by downstream "
"integrators. The use of a local version identifier does not affect the kind "
"of a release but, when applied to a source distribution, does indicate that "
"it may not contain the exact same code as the corresponding upstream release."
msgstr ""
"ローカルバージョンラベルを包含することで、上流側のリリースを下流側のインテグ"
"レータによる潜在的に修正されたリビルドから区別することが可能になります。ロー"
"カルバージョン識別子の使用はこの種のリリースには影響を与えませんが、ソース"
"コード配布物に適用した場合には、対応する上流のリリースと正確に同じコードを含"
"んでいないかもしれないということを示します。"

#: ../source/specifications/version-specifiers.rst:138
msgid ""
"To ensure local version identifiers can be readily incorporated as part of "
"filenames and URLs, and to avoid formatting inconsistencies in hexadecimal "
"hash representations, local version labels MUST be limited to the following "
"set of permitted characters:"
msgstr ""
"ローカルのバージョン指定子を確かなものにすることは、ファイル名や URL の一部と"
"して難なく統合することができ、16進数のハッシュ値での表現でフォーマットが不統"
"一になることを避けるには、ローカルバージョンラベルは、以下に示す許容される一"
"連の文字群に限定されなければなりません。"

#: ../source/specifications/version-specifiers.rst:143
msgid "ASCII letters (``[a-zA-Z]``)"
msgstr "ASCII 文字 (``[a-zA-Z]``)"

#: ../source/specifications/version-specifiers.rst:144
msgid "ASCII digits (``[0-9]``)"
msgstr "ASCII 数字 (``[0-9]``)"

#: ../source/specifications/version-specifiers.rst:145
msgid "periods (``.``)"
msgstr "ピリオド (``.``)"

#: ../source/specifications/version-specifiers.rst:147
msgid "Local version labels MUST start and end with an ASCII letter or digit."
msgstr ""
"ローカルバージョンラベルは、 ASCII 文字ないし ASCII 数字で始まり、かつ、終わ"
"らなければなりません。"

#: ../source/specifications/version-specifiers.rst:149
msgid ""
"Comparison and ordering of local versions considers each segment of the "
"local version (divided by a ``.``) separately. If a segment consists "
"entirely of ASCII digits then that section should be considered an integer "
"for comparison purposes and if a segment contains any ASCII letters then "
"that segment is compared lexicographically with case insensitivity. When "
"comparing a numeric and lexicographic segment, the numeric section always "
"compares as greater than the lexicographic segment. Additionally a local "
"version with a great number of segments will always compare as greater than "
"a local version with fewer segments, as long as the shorter local version's "
"segments match the beginning of the longer local version's segments exactly."
msgstr ""
"ローカルバージョンの比較や順序付けでは、ローカルバージョンの (``.`` で分割さ"
"れる)各部分を別々に考えます。ある部分がすべて ASCII 数字でできているなら比較"
"の目的においてはその部分は整数だと見做すべきであり、ある部分が一つでも ASCII "
"文字を含むのであれば大文字小文字を無視して辞書学的に比較されます。数字だけの"
"部分と辞書学的な部分を比較する時には、常に、数字だけの部分が辞書学的な部分よ"
"りも大きいものとして比較されます。さらに、多数の部分を持つローカルバージョン"
"は、短い方のローカルバージョンの部分部分が長い方のローカルバージョンの先頭の"
"対応する部分と正確に一致する限り、常に、それより少ない数の部分を持つローカル"
"バージョンよりも大きいものとして比較されます。"

#: ../source/specifications/version-specifiers.rst:160
msgid ""
"An \"upstream project\" is a project that defines its own public versions. A "
"\"downstream project\" is one which tracks and redistributes an upstream "
"project, potentially backporting security and bug fixes from later versions "
"of the upstream project."
msgstr ""
"\"上流プロジェクト\" とは、それ自身のパブリックバージョンを定義するプロジェク"
"トです。\"下流プロジェクト\" とは、上流プロジェクトに追随し再配布するプロジェ"
"クトで、潜在的には、上流プロジェクトのその後のバージョンからセキュリティ上の"
"修正やバグ修正をバックポートします。"

#: ../source/specifications/version-specifiers.rst:165
msgid ""
"Local version identifiers SHOULD NOT be used when publishing upstream "
"projects to a public index server, but MAY be used to identify private "
"builds created directly from the project source. Local version identifiers "
"SHOULD be used by downstream projects when releasing a version that is API "
"compatible with the version of the upstream project identified by the public "
"version identifier, but contains additional changes (such as bug fixes). As "
"the Python Package Index is intended solely for indexing and hosting "
"upstream projects, it MUST NOT allow the use of local version identifiers."
msgstr ""
"ローカルバージョン指定子は、上流プロジェクトを公開のインデックスサーバで公開"
"する際に使用するべきではありませんが、プロジェクトのソースコードから直接に作"
"成されたプライベートのビルド群を識別するために使っても構いません。ローカル"
"バージョン指定子は、公開バージョン識別子で識別される上流プロジェクトのある"
"バージョンと API レベルで互換性を保つような、しかし、 (バグ修正などの) 追加の"
"変更を含む下流プロジェクトのバージョンをリリースする時に用いられるべきです。"
"Python パッケージインデックスは上流プロジェクトを列挙しホストすることだけを意"
"図していますので、ローカルバージョン指定子の使用を許してはなりません。"

#: ../source/specifications/version-specifiers.rst:175
msgid ""
"Source distributions using a local version identifier SHOULD provide the "
"``python.integrator`` extension metadata (as defined in :pep:`459`)."
msgstr ""
"ローカルバージョン識別子を使うソースコード配布物は、 (:pep:`459` で定義される"
"通り) ``python.integrator`` 拡張メタデータを提供するべきです。"

#: ../source/specifications/version-specifiers.rst:180
msgid "Final releases"
msgstr "最終リリース"

#: ../source/specifications/version-specifiers.rst:182
msgid ""
"A version identifier that consists solely of a release segment and "
"optionally an epoch identifier is termed a \"final release\"."
msgstr ""
"リリース部分だけか、オプションとしてエポック識別子を加えたものから構成されて"
"いるバージョン識別子は、 \"最終リリース <final release>\" という用語で呼ばれ"
"ます。"

#: ../source/specifications/version-specifiers.rst:185
msgid ""
"The release segment consists of one or more non-negative integer values, "
"separated by dots::"
msgstr "ひとつかそれ以上の非負整数をピリオドで区切って構成されるリリース部分::"

#: ../source/specifications/version-specifiers.rst:190
msgid ""
"Final releases within a project MUST be numbered in a consistently "
"increasing fashion, otherwise automated tools will not be able to upgrade "
"them correctly."
msgstr ""
"あるプロジェクトの最終リリースは、首尾一貫して増加する形で番号付けされなけれ"
"ばならず、そうでなければ自動化ツール <Automated tools> がそれらを正しくアップ"
"グレードすることができないでしょう。"

#: ../source/specifications/version-specifiers.rst:194
msgid ""
"Comparison and ordering of release segments considers the numeric value of "
"each component of the release segment in turn. When comparing release "
"segments with different numbers of components, the shorter segment is padded "
"out with additional zeros as necessary."
msgstr ""
"リリース部分の比較と整序は、リリース部分の各部分の数としての値を順に比較しま"
"す。リリース部分の構成要素の数が異なるものを比較するときは、必要に応じて短い"
"方にゼロの部分を追加する形で補足します。"

#: ../source/specifications/version-specifiers.rst:199
msgid ""
"While any number of additional components after the first are permitted "
"under this scheme, the most common variants are to use two components "
"(\"major.minor\") or three components (\"major.minor.micro\")."
msgstr ""
"この枠組みの下では、最初の構成部分の後にいくつの追加部分があっても構いません"
"が、最も一般的な変種は、構成部分２個 (\"メジャー.マイナー\") のものか、また"
"は、構成部分３個 (\"メジャー.マイナー.マイクロ\") のものです。"

#: ../source/specifications/version-specifiers.rst:203
msgid "For example::"
msgstr "例えば::"

#: ../source/specifications/version-specifiers.rst:218
msgid ""
"A release series is any set of final release numbers that start with a "
"common prefix. For example, ``3.3.1``, ``3.3.5`` and ``3.3.9.45`` are all "
"part of the ``3.3`` release series."
msgstr ""
"リリースシリーズとは、共通の前置部分で始まる任意の最終リリース番号の集合で"
"す。例えば、 ``3.3.1`` ・ ``3.3.5`` ・ ``3.3.9.45`` は、すべて、 ``3.3`` リ"
"リースシリーズの一部です。"

#: ../source/specifications/version-specifiers.rst:224
msgid ""
"``X.Y`` and ``X.Y.0`` are not considered distinct release numbers, as the "
"release segment comparison rules implicit expand the two component form to "
"``X.Y.0`` when comparing it to any release segment that includes three "
"components."
msgstr ""
"リリース構成部分比較のルールでは、３個の構成部分を持つリリース番号と比較する"
"時には、構成部分が２個のものを ``X.Y.0`` へ暗黙裡に拡張するので、 ``X.Y`` と "
"``X.Y.0`` は、相異なるリリース番号とは見做されません。"

#: ../source/specifications/version-specifiers.rst:229
#, fuzzy
#| msgid ""
#| "Date based release segments are also permitted. An example of a date "
#| "based release scheme using the year and month of the release::"
msgid ""
"Date-based release segments are also permitted. An example of a date-based "
"release scheme using the year and month of the release::"
msgstr ""
"日付ベースのリリース構成部分もまた許容されます。リリースの年と月を使用した日"
"付ベースのリリース枠組みの例::"

#: ../source/specifications/version-specifiers.rst:243
msgid "Pre-releases"
msgstr "プレリリース"

#: ../source/specifications/version-specifiers.rst:245
msgid ""
"Some projects use an \"alpha, beta, release candidate\" pre-release cycle to "
"support testing by their users prior to a final release."
msgstr ""
"プロジェクトの中には、最終リリースに先立ってユーザによるテストを行えるよう"
"に、 \"alpha, beta, release candidate\" のプレリリースサイクルを使うものがあ"
"ります。"

#: ../source/specifications/version-specifiers.rst:248
msgid ""
"If used as part of a project's development cycle, these pre-releases are "
"indicated by including a pre-release segment in the version identifier::"
msgstr ""
"プロジェクトの開発サイクルの一部として使用されるなら、これらのプレリリース"
"は、バージョン識別子のプレリリース構成部分を含めることによって表示されます::"

#: ../source/specifications/version-specifiers.rst:256
msgid ""
"A version identifier that consists solely of a release segment and a pre-"
"release segment is termed a \"pre-release\"."
msgstr ""
"リリース構成部分とプレリリース構成部分だけから構成されるバージョン識別子は、 "
"\"プレリリース <pre-release>\" という用語で呼ばれます。"

#: ../source/specifications/version-specifiers.rst:259
msgid ""
"The pre-release segment consists of an alphabetical identifier for the pre-"
"release phase, along with a non-negative integer value. Pre-releases for a "
"given release are ordered first by phase (alpha, beta, release candidate) "
"and then by the numerical component within that phase."
msgstr ""
"プレリリース構成部分は、非負整数を伴ったプレリリースの局面を示すアルファベッ"
"ト文字の識別子から構成されます。あるリリースにおけるプレリリース群は、まず局"
"面 (alpha, beta, release candidate) で順序付けられ、次いでその局面内の数字の"
"部分で順序づけられます。"

#: ../source/specifications/version-specifiers.rst:264
msgid ""
"Installation tools MAY accept both ``c`` and ``rc`` releases for a common "
"release segment in order to handle some existing legacy distributions."
msgstr ""
"インストールツール <Installation tools> は、既存のレガシーなディストリビュー"
"ションのいくつかを取り扱うために、よくあるリリース構成部分に ``c`` と ``rc`` "
"の両方を受け入れても構いません。"

#: ../source/specifications/version-specifiers.rst:267
msgid ""
"Installation tools SHOULD interpret ``c`` versions as being equivalent to "
"``rc`` versions (that is, ``c1`` indicates the same version as ``rc1``)."
msgstr ""
"インストールツール <Installation tools> は、``c`` バージョンを ``rc`` バー"
"ジョンと同じである (つまり、 ``c1`` が ``rc1`` と同じバージョンである) と解釈"
"するべきです。"

#: ../source/specifications/version-specifiers.rst:270
msgid ""
"Build tools, publication tools and index servers SHOULD disallow the "
"creation of both ``rc`` and ``c`` releases for a common release segment."
msgstr ""
"ビルドツール <Build tools> ・出版ツール <Publication tools> 、そして インデッ"
"クスサーバ <Index servers> は、共通のリリース構成部分に ``rc`` と ``c`` の両"
"方のリリースを作ることを禁止するべきです。"

#: ../source/specifications/version-specifiers.rst:275
msgid "Post-releases"
msgstr "ポストリリース"

#: ../source/specifications/version-specifiers.rst:277
msgid ""
"Some projects use post-releases to address minor errors in a final release "
"that do not affect the distributed software (for example, correcting an "
"error in the release notes)."
msgstr ""
"プロジェクトの中には、最終リリースにおける軽微なエラーで配布されているソフト"
"ウェアには影響を与えないもの (例えば、リリースノートの誤りを訂正する) を修正"
"するためにポストリリースを使うものがあります。"

#: ../source/specifications/version-specifiers.rst:281
msgid ""
"If used as part of a project's development cycle, these post-releases are "
"indicated by including a post-release segment in the version identifier::"
msgstr ""
"プロジェクトの開発サイクルの一部として用いられる場合、これらのポストリリース"
"は、バージョン識別子の中にポストリリース構成部分を含めることによって表示され"
"ます::"

#: ../source/specifications/version-specifiers.rst:286
msgid ""
"A version identifier that includes a post-release segment without a "
"developmental release segment is termed a \"post-release\"."
msgstr ""
"開発リリース構成部分なしでポストリリース構成部分を含むバージョン識別子のこと"
"を \"ポストリリース <post-release>\" という用語で呼びます。"

#: ../source/specifications/version-specifiers.rst:289
msgid ""
"The post-release segment consists of the string ``.post``, followed by a non-"
"negative integer value. Post-releases are ordered by their numerical "
"component, immediately following the corresponding release, and ahead of any "
"subsequent release."
msgstr ""
"ポストリリース構成部分は、 ``.post`` という文字列とこれに引き続く非負整数値で"
"成り立っています。ポストリリースは、対応するリリースの直後に続き、かつ、後続"
"のリリースの部分よりも前にある、そのような数字の構成部分を使って順序付けを行"
"います。"

#: ../source/specifications/version-specifiers.rst:296
msgid ""
"The use of post-releases to publish maintenance releases containing actual "
"bug fixes is strongly discouraged. In general, it is better to use a longer "
"release number and increment the final component for each maintenance "
"release."
msgstr ""
"実質的にバグフィクスを含むようなメンテナンスリリースを公開するためにポストリ"
"リースを使用することは、強い非推奨の対象です。一般的に、もっと長いリリース番"
"号を使う方がベターで、各メンテナンスリリースについて最後の部分を増加させてい"
"く方が良いでしょう。"

#: ../source/specifications/version-specifiers.rst:301
msgid "Post-releases are also permitted for pre-releases::"
msgstr "ポストリリースは、また、プレリリースにも使うことができます::"

#: ../source/specifications/version-specifiers.rst:309
msgid ""
"Creating post-releases of pre-releases is strongly discouraged, as it makes "
"the version identifier difficult to parse for human readers. In general, it "
"is substantially clearer to simply create a new pre-release by incrementing "
"the numeric component."
msgstr ""
"プレリリースのポストリリースを作成することは、人間がバージョン識別子を解釈す"
"る時に困難を生じるので、強い非推奨事項です。一般に、単純に数字の部分を一つ増"
"加させることで新しいプレリリース番号を作成する方が、大幅にわかりやすいもので"
"す。"

#: ../source/specifications/version-specifiers.rst:316
msgid "Developmental releases"
msgstr "開発用リリース"

#: ../source/specifications/version-specifiers.rst:318
msgid ""
"Some projects make regular developmental releases, and system packagers "
"(especially for Linux distributions) may wish to create early releases "
"directly from source control which do not conflict with later project "
"releases."
msgstr ""
"プロジェクトの中には、定期的に開発リリースを作成するものもあり、 (とりわけ "
"Linux ディストリビューション向けの) システムパッケージング担当者は、後のプロ"
"ジェクトリリースと干渉しないように、直接ソースコードから早期リリースを作りた"
"いと望むかもしれません。"

#: ../source/specifications/version-specifiers.rst:323
msgid ""
"If used as part of a project's development cycle, these developmental "
"releases are indicated by including a developmental release segment in the "
"version identifier::"
msgstr ""
"プロジェクトの開発サイクルの一部として使われる場合、このような開発リリース "
"<developmental release> はバージョン識別子の中に開発リリース構成部分を含める"
"ことで表示されます::"

#: ../source/specifications/version-specifiers.rst:329
msgid ""
"A version identifier that includes a developmental release segment is termed "
"a \"developmental release\"."
msgstr ""
"開発リリース構成部分を含むバージョン識別子のことを \"開発リリース "
"<developmental release>\" という用語で表します。"

#: ../source/specifications/version-specifiers.rst:332
msgid ""
"The developmental release segment consists of the string ``.dev``, followed "
"by a non-negative integer value. Developmental releases are ordered by their "
"numerical component, immediately before the corresponding release (and "
"before any pre-releases with the same release segment), and following any "
"previous release (including any post-releases)."
msgstr ""
"開発リリース構成部分は、 ``.dev`` という文字列と、それに続く非負整数値で構成"
"されます。開発リリースは、対応するリリースの直前 (で、かつ、同じリリース構成"
"部分を持つあらゆるプレリリース部分の前のもの) で、かつ、 (任意のポストリリー"
"スを含む) 旧リリースの後にある数値部分で順序付けされます。"

#: ../source/specifications/version-specifiers.rst:338
msgid ""
"Developmental releases are also permitted for pre-releases and post-"
"releases::"
msgstr ""
"開発リリースは、また、プレリリースやポストリリースにおいても許されます::"

#: ../source/specifications/version-specifiers.rst:346
#, fuzzy
#| msgid ""
#| "Developmental releases are also permitted for pre-releases and post-"
#| "releases::"
msgid ""
"Do note that development releases are considered a type of pre-release when "
"handling them."
msgstr ""
"開発リリースは、また、プレリリースやポストリリースにおいても許されます::"

#: ../source/specifications/version-specifiers.rst:351
msgid ""
"While they may be useful for continuous integration purposes, publishing "
"developmental releases of pre-releases to general purpose public index "
"servers is strongly discouraged, as it makes the version identifier "
"difficult to parse for human readers. If such a release needs to be "
"published, it is substantially clearer to instead create a new pre-release "
"by incrementing the numeric component."
msgstr ""
"これらは継続的インテグレーションの目的では利用する価値がある一方で、プレリ"
"リースの開発リリースを一般目的の公開インデックスサーバ群に公開することは、人"
"間が読んだ時に解釈するのが難しいバージョン識別子になってしまうので、強い非推"
"奨とされています。そのようなリリースを公開する必要があるなら、数字部分を増加"
"させた新しいプレリリースを代わりに作成する方が、よほどわかりやすいでしょう。"

#: ../source/specifications/version-specifiers.rst:358
msgid ""
"Developmental releases of post-releases are also strongly discouraged, but "
"they may be appropriate for projects which use the post-release notation for "
"full maintenance releases which may include code changes."
msgstr ""
"ポストリリースの開発リリースもまた強い非推奨とされていますが、ソースコードの"
"変更を含む可能性のあるフルメンテナンスリリースをポストリリースと表記している"
"プロジェクトには適切かもしれません。"

#: ../source/specifications/version-specifiers.rst:364
msgid "Version epochs"
msgstr "バージョンエポック"

#: ../source/specifications/version-specifiers.rst:366
msgid ""
"If included in a version identifier, the epoch appears before all other "
"components, separated from the release segment by an exclamation mark::"
msgstr ""
"バージョン識別子に含まれる場合、エポックは、エクスクラメーションマークでリ"
"リース番号構成部分と仕切られて、他のすべての構成部分よりも前に出現します::"

#: ../source/specifications/version-specifiers.rst:371
msgid "If no explicit epoch is given, the implicit epoch is ``0``."
msgstr ""
"明示的にエポックが示されていない場合は、エポックとして ``0`` を暗黙のうちに仮"
"定します。"

#: ../source/specifications/version-specifiers.rst:373
msgid ""
"Most version identifiers will not include an epoch, as an explicit epoch is "
"only needed if a project *changes* the way it handles version numbering in a "
"way that means the normal version ordering rules will give the wrong answer. "
"For example, if a project is using date based versions like ``2014.04`` and "
"would like to switch to semantic versions like ``1.0``, then the new "
"releases would be identified as *older* than the date based releases when "
"using the normal sorting scheme::"
msgstr ""
"明示的なエポックが必要となるのは、あるプロジェクトがバージョン番号を取り扱う"
"方法を通常のバージョン順序付けルールが誤った回答を返すようなやり方で *変更し"
"た* 場合だけなので、ほとんどのバージョン識別子はエポックを含んでいません。例"
"えば、あるプロジェクトが ``2014.04`` のような日付ベースのバージョン番号を使っ"
"ていたのに、 ``1.0`` のようなセマンティックバージョン番号に変更したいとすれ"
"ば、通常の順序付けの枠組みを適用した時に、新しいリリースが日付ベースのバー"
"ジョン番号よりも *よりふるいもの* として識別されてしまうでしょう::"

#: ../source/specifications/version-specifiers.rst:387
msgid ""
"However, by specifying an explicit epoch, the sort order can be changed "
"appropriately, as all versions from a later epoch are sorted after versions "
"from an earlier epoch::"
msgstr ""
"しかしながら、明示的にエポックを指定すれば、より新しいエポックに属するすべて"
"のバージョン番号が、より古いエポックに属するものよりも後に続くものとして順序"
"付けされるので、ソートの順序を適切に変更することができます::"

#: ../source/specifications/version-specifiers.rst:401
msgid "Normalization"
msgstr "正規化"

#: ../source/specifications/version-specifiers.rst:403
msgid ""
"In order to maintain better compatibility with existing versions there are a "
"number of \"alternative\" syntaxes that MUST be taken into account when "
"parsing versions. These syntaxes MUST be considered when parsing a version, "
"however they should be \"normalized\" to the standard syntax defined above."
msgstr ""
"既存のバージョン番号との互換性をより良く保つためには、バージョン番号を解釈す"
"る時に考慮に入れておかなければならない \"代わりになり得る\" シンタックスがた"
"くさんあります。このようなシンタックスはバージョン番号を解釈する時には考慮し"
"なければなりませんが、しかし、そのようなバージョン番号は上述の標準的なシン"
"タックスに \"正規化\" されるべきです。"

#: ../source/specifications/version-specifiers.rst:410
msgid "Case sensitivity"
msgstr "ケースセンシティビティ"

#: ../source/specifications/version-specifiers.rst:412
msgid ""
"All ascii letters should be interpreted case insensitively within a version "
"and the normal form is lowercase. This allows versions such as ``1.1RC1`` "
"which would be normalized to ``1.1rc1``."
msgstr ""
"すべてのアスキー文字は、バージョン番号の中では大文字小文字の区別をせずに解釈"
"されるべきであり、標準系は小文字です。これによって、 ``1.1rc1`` に標準化され"
"るであろう `1.1RC1`` のようなバージョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:418
msgid "Integer Normalization"
msgstr "整数の標準化"

#: ../source/specifications/version-specifiers.rst:420
msgid ""
"All integers are interpreted via the ``int()`` built in and normalize to the "
"string form of the output. This means that an integer version of ``00`` "
"would normalize to ``0`` while ``09000`` would normalize to ``9000``. This "
"does not hold true for integers inside of an alphanumeric segment of a local "
"version such as ``1.0+foo0100`` which is already in its normalized form."
msgstr ""
"あらゆる整数は、組み込みの ``int()`` を通じて解釈され、出力の文字列へと標準化"
"されます。これは、整数のバージョン番号の ``00`` が ``0`` へと標準化され、"
"``09000`` が ``9000`` へと標準化されることを意味します。 ``1.0+foo0100`` のよ"
"うなローカルバージョンで標準化済みのもののアルファベットと数字から成る構成部"
"分の中では、これは適用されません。"

#: ../source/specifications/version-specifiers.rst:428
msgid "Pre-release separators"
msgstr "プレリリースのセパレータ"

#: ../source/specifications/version-specifiers.rst:430
msgid ""
"Pre-releases should allow a ``.``, ``-``, or ``_`` separator between the "
"release segment and the pre-release segment. The normal form for this is "
"without a separator. This allows versions such as ``1.1.a1`` or ``1.1-a1`` "
"which would be normalized to ``1.1a1``. It should also allow a separator to "
"be used between the pre-release signifier and the numeral. This allows "
"versions such as ``1.0a.1`` which would be normalized to ``1.0a1``."
msgstr ""
"プレリリースは、リリース構成部分とプレリリース構成部分の間のセパレータとし"
"て、 ``.`` ・ ``-`` または ``_`` を許容するべきです。この部分の標準形式は、セ"
"パレータなしのものです。これによって、標準化すれば ``1.1a1`` になる ``1.1."
"a1`` や ``1.1-a1`` のようなバージョン番号を許容します。さらに、プレリリース記"
"号と数字部分の間に使われるセパレータをも許容するべきです。これによって、 "
"``1.0a1`` に標準化される ``1.0a.1`` のようなバージョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:439
msgid "Pre-release spelling"
msgstr "プレリリースの綴り方"

#: ../source/specifications/version-specifiers.rst:441
msgid ""
"Pre-releases allow the additional spellings of ``alpha``, ``beta``, ``c``, "
"``pre``, and ``preview`` for ``a``, ``b``, ``rc``, ``rc``, and ``rc`` "
"respectively. This allows versions such as ``1.1alpha1``, ``1.1beta2``, or "
"``1.1c3`` which normalize to ``1.1a1``, ``1.1b2``, and ``1.1rc3``. In every "
"case the additional spelling should be considered equivalent to their normal "
"forms."
msgstr ""
"プレリリース番号は、 ``a`` ・ ``b`` ・ ``rc`` ・ ``rc`` および ``rc`` を表す"
"追加的な綴り方である ``alpha`` ・ ``beta`` ・ ``c`` ・ ``pre`` および "
"``preview`` を許容します。これによって、標準化すれば ``1.1a1`` ・ ``1.1b2`` "
"・ ``1.1rc3`` となる ``1.1alpha1`` ・ ``1.1beta2`` ・ ``1.1c3`` のようなバー"
"ジョン番号を許容します。それぞれのケースで、追加的な綴り方の部分は標準的な形"
"式のものと同等であると見做されます。"

#: ../source/specifications/version-specifiers.rst:450
msgid "Implicit pre-release number"
msgstr "明示しないプレリリース番号"

#: ../source/specifications/version-specifiers.rst:452
msgid ""
"Pre releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2a`` which is normalized to "
"``1.2a0``."
msgstr ""
"プレリリースでは、数字部分を省略することが許容されており、その場合には暗黙の"
"うちに ``0`` が想定されます。この場合の標準形式は、 ``0`` を明示的に含めてお"
"く形です。これによって、標準化すれば ``1.2a0`` になる ``1.2a`` のようなバー"
"ジョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:458
msgid "Post release separators"
msgstr "ポストリリースのセパレータ"

#: ../source/specifications/version-specifiers.rst:460
msgid ""
"Post releases allow a ``.``, ``-``, or ``_`` separator as well as omitting "
"the separator all together. The normal form of this is with the ``.`` "
"separator. This allows versions such as ``1.2-post2`` or ``1.2post2`` which "
"normalize to ``1.2.post2``. Like the pre-release separator this also allows "
"an optional separator between the post release signifier and the numeral. "
"This allows versions like ``1.2.post-2`` which would normalize to ``1.2."
"post2``."
msgstr ""
"ポストリリースは、セパレータとして ``.`` ・ ``-`` や ``_`` を許容し、また、セ"
"パレータを全部省略することも許容します。これの標準形式は、 ``.`` セパレータで"
"す。これによって、標準化すれば ``1.2.post2`` となる ``1.2-post2`` や "
"``1.2post2`` のようなバージョン番号を許容します。プレリリースでのセパレータと"
"同様に、これによって、ポストリリースの記号と数字の間にオプションとしてのセパ"
"レータを置くことを許容します。これによって、標準化すれば ``1.2.post2`` となる"
"であろう ``1.2.port-2`` のようなバージョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:469
msgid "Post release spelling"
msgstr "ポストリリースの綴り方"

#: ../source/specifications/version-specifiers.rst:471
msgid ""
"Post-releases allow the additional spellings of ``rev`` and ``r``. This "
"allows versions such as ``1.0-r4`` which normalizes to ``1.0.post4``. As "
"with the pre-releases the additional spellings should be considered "
"equivalent to their normal forms."
msgstr ""
"ポストリリースは、追加の綴り方である ``rev`` や ``r`` を許容します。これに"
"よって、標準化すれば ``1.0.post4`` になるであろう ``1.0-r4`` のようなバージョ"
"ン番号を許容します。プレリリースでの追加の綴り方と同様に、その標準形式と同等"
"のものと見做されるべきです。"

#: ../source/specifications/version-specifiers.rst:478
msgid "Implicit post release number"
msgstr "明示されないポストリリース番号"

#: ../source/specifications/version-specifiers.rst:480
msgid ""
"Post releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2.post`` which is normalized to "
"``1.2.post0``."
msgstr ""
"ポストリリース番号では、数字部分を省略することが許容されていて、その場合には"
"暗黙の裡に ``0`` であるものと仮定されます。これの標準形式は、明示的に ``0`` "
"を含めることです。これによって、標準化すれば ``1.2.post0`` となる ``1.2."
"post`` のようなバージョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:486
msgid "Implicit post releases"
msgstr "暗黙裡のポストリリース"

#: ../source/specifications/version-specifiers.rst:488
msgid ""
"Post releases allow omitting the ``post`` signifier all together. When using "
"this form the separator MUST be ``-`` and no other form is allowed. This "
"allows versions such as ``1.0-1`` to be normalized to ``1.0.post1``. This "
"particular normalization MUST NOT be used in conjunction with the implicit "
"post release number rule. In other words, ``1.0-`` is *not* a valid version "
"and it does *not* normalize to ``1.0.post0``."
msgstr ""
"ポストリリースは、 ``post`` 記号を全く省略することを許容します。この形式を使"
"う時には、セパレータは ``-`` でなければならず、他の形式は許されません。これに"
"よって、標準化すれば ``1.0.post1`` となる ``1.0-1`` のようなバージョン番号が"
"許容されます。この標準化方法は、暗黙裡のポストリリース番号のルールと同時に使"
"われてはなりません。換言すれば、 ``1.0-`` は正当なバージョン番号では *なく"
"* 、 ``1.0.post0`` へ標準化されることも *ありません* 。"

#: ../source/specifications/version-specifiers.rst:497
msgid "Development release separators"
msgstr "開発リリース番号のセパレータ"

#: ../source/specifications/version-specifiers.rst:499
msgid ""
"Development releases allow a ``.``, ``-``, or a ``_`` separator as well as "
"omitting the separator all together. The normal form of this is with the ``."
"`` separator. This allows versions such as ``1.2-dev2`` or ``1.2dev2`` which "
"normalize to ``1.2.dev2``."
msgstr ""
"開発リリースでは、セパレータとして ``.`` ・ ``-`` ・ ``_`` を許容し、また、一"
"切のセパレータを省力することを許容します。これの標準形式は、 ``.`` セパレータ"
"を使う形です。これによって、標準化すれば ``1.2.dev2`` になるであろう ``1.2-"
"dev2`` や ``1.2dev2`` のようなバージョン番号を許容します。"

#: ../source/specifications/version-specifiers.rst:506
msgid "Implicit development release number"
msgstr "暗黙裡の開発バージョン番号"

#: ../source/specifications/version-specifiers.rst:508
msgid ""
"Development releases allow omitting the numeral in which case it is "
"implicitly assumed to be ``0``. The normal form for this is to include the "
"``0`` explicitly. This allows versions such as ``1.2.dev`` which is "
"normalized to ``1.2.dev0``."
msgstr ""
"開発リリースでは、数字部分を省略することができて、その場合には暗黙裡に ``0`` "
"であるものと見做されます。これの標準形式は、明示的に ``0`` を含める形です。こ"
"れによって、標準化すれば ``1.2.dev0`` となる ``1.2.dev`` のようなバージョン番"
"号を許容します。"

#: ../source/specifications/version-specifiers.rst:515
msgid "Local version segments"
msgstr "ローカルのバージョン番号構成部分"

#: ../source/specifications/version-specifiers.rst:517
msgid ""
"With a local version, in addition to the use of ``.`` as a separator of "
"segments, the use of ``-`` and ``_`` is also acceptable. The normal form is "
"using the ``.`` character. This allows versions such as ``1.0+ubuntu-1`` to "
"be normalized to ``1.0+ubuntu.1``."
msgstr ""
"構成部分のセパレータとして ``.`` を使うことに加えて、ローカルバージョン番号を"
"使えば ``-`` や ``_`` の使用も受け入れ可能です。標準形式は、 ``.`` 文字を使う"
"ことです。これによって、標準化すれば ``1.0+ubuntu.1`` となる "
"``1.0+ubuntu-1`` のようなバージョン番号も許容されます。"

#: ../source/specifications/version-specifiers.rst:524
msgid "Preceding v character"
msgstr "先駆する v の文字"

#: ../source/specifications/version-specifiers.rst:526
msgid ""
"In order to support the common version notation of ``v1.0`` versions may be "
"preceded by a single literal ``v`` character. This character MUST be ignored "
"for all purposes and should be omitted from all normalized forms of the "
"version. The same version with and without the ``v`` is considered "
"equivalent."
msgstr ""
"よくあるバージョン番号の表記方法である ``v1.0`` の形をサポートするために、"
"バージョン番号は単独の ``v`` の文字が先行していても構いません。この文字は、あ"
"らゆる目的において無視されなければならず、バージョン番号の標準化された形式で"
"は省略されるべきです。 ``v`` の有無だけが異なるバージョン番号は、同一のものと"
"見做されます。"

#: ../source/specifications/version-specifiers.rst:533
msgid "Leading and Trailing Whitespace"
msgstr "先行する空白文字や後続する空白文字"

#: ../source/specifications/version-specifiers.rst:535
msgid ""
"Leading and trailing whitespace must be silently ignored and removed from "
"all normalized forms of a version. This includes ``\" \"``, ``\\t``, "
"``\\n``, ``\\r``, ``\\f``, and ``\\v``. This allows accidental whitespace to "
"be handled sensibly, such as a version like ``1.0\\n`` which normalizes to "
"``1.0``."
msgstr ""
"先行する空白文字や後続する空白文字は暗黙の裡に無視されなければならず、バー"
"ジョン番号の標準化された形式では除去されなければなりません。これには "
"``\"\"`` ・ ``\\t`` ・ ``\\n`` ・ ``\\r`` ・ ``\\f`` ・ ``\\v`` が含まれま"
"す。これによって、標準化すれば ``1.0`` となる ``1.0\\n`` のようなバージョン番"
"号に見られる、偶然に入り込んだ空白文字を実用的に取り扱うことができます。"

#: ../source/specifications/version-specifiers.rst:542
msgid "Examples of compliant version schemes"
msgstr "枠組みに合致したバージョン番号の例"

#: ../source/specifications/version-specifiers.rst:544
msgid ""
"The standard version scheme is designed to encompass a wide range of "
"identification practices across public and private Python projects. In "
"practice, a single project attempting to use the full flexibility offered by "
"the scheme would create a situation where human users had difficulty "
"figuring out the relative order of versions, even though the rules above "
"ensure all compliant tools will order them consistently."
msgstr ""
"標準のバージョン番号の枠組みは、公開・非公開の Python プロジェクトにおける識"
"別の慣行を広い範囲で包含するように設計されています。実際上、ある単独のプロ"
"ジェクトでこの枠組みが提供するあらゆる自由度を使おうと試みるなら、上述のルー"
"ルに従うすべてのツールが首尾一貫して順序をつけることができる一方で、人間の"
"ユーザにとってはバージョン番号間の相対的な順序を解き明かすことに困難を感じる"
"ことになるでしょう。"

#: ../source/specifications/version-specifiers.rst:551
msgid ""
"The following examples illustrate a small selection of the different "
"approaches projects may choose to identify their releases, while still "
"ensuring that the \"latest release\" and the \"latest stable release\" can "
"be easily determined, both by human users and automated tools."
msgstr ""
"この後に、プロジェクトがそのリリースを識別するために選択するかもしれない異な"
"るアプローチで、 \"最新リリース\" と \"最新のステーブルリリース\" を人間も自"
"動化ツールも簡単に決定できることが保証されたもののいくつかの例を示します。"

#: ../source/specifications/version-specifiers.rst:556
msgid "Simple \"major.minor\" versioning::"
msgstr "単純な \"メジャー.マイナー\" バージョン付け::"

#: ../source/specifications/version-specifiers.rst:565
msgid "Simple \"major.minor.micro\" versioning::"
msgstr "単純な \"メジャー.マイナー.マイクロ\" バージョン付け::"

#: ../source/specifications/version-specifiers.rst:573
msgid ""
"\"major.minor\" versioning with alpha, beta and candidate pre-releases::"
msgstr ""
"アルファ・ベータや公開候補 <candidate> のようなプレリリースを伴う \"メジャー."
"マイナー\" バージョン付け::"

#: ../source/specifications/version-specifiers.rst:585
msgid ""
"\"major.minor\" versioning with developmental releases, release candidates "
"and post-releases for minor corrections::"
msgstr ""
"開発リリース <developmental releases> 、リリース候補 <release candidates> や"
"ポストリリースのある \"メジャー.マイナー\" バージョン付け::"

#: ../source/specifications/version-specifiers.rst:600
msgid ""
"Date based releases, using an incrementing serial within each year, skipping "
"zero::"
msgstr ""
"ゼロを飛ばして各年の中で増加するシリアル値を使った日付ベースのリリース番号::"

#: ../source/specifications/version-specifiers.rst:614
msgid "Summary of permitted suffixes and relative ordering"
msgstr "許容される接尾辞と相対的な順序付けのまとめ"

#: ../source/specifications/version-specifiers.rst:618
msgid ""
"This section is intended primarily for authors of tools that automatically "
"process distribution metadata, rather than developers of Python "
"distributions deciding on a versioning scheme."
msgstr ""
"この節では、バージョニング方法を決めようとしている Python 配布物の開発者向け"
"というよりは、むしろ、一義的には配布物のメタデータを自動的に処理するツールの"
"作者に向けて書かれています。"

#: ../source/specifications/version-specifiers.rst:622
msgid ""
"The epoch segment of version identifiers MUST be sorted according to the "
"numeric value of the given epoch. If no epoch segment is present, the "
"implicit numeric value is ``0``."
msgstr ""
"バージョン識別子のエポック構成部分は、当該エポックの数値としての値に従って整"
"序されなければなりません。エポック構成部分が存在しない場合には、暗黙のうちに "
"``0`` の値と解釈します。"

#: ../source/specifications/version-specifiers.rst:626
msgid ""
"The release segment of version identifiers MUST be sorted in the same order "
"as Python's tuple sorting when the normalized release segment is parsed as "
"follows::"
msgstr ""
"バージョン識別子のリリース構成部分は、標準化されたリリース構成部分を解釈する"
"時には以下のように Python のタプルソーティングと同じ順序で格納されていなけれ"
"ばなりません::"

#: ../source/specifications/version-specifiers.rst:632
msgid ""
"All release segments involved in the comparison MUST be converted to a "
"consistent length by padding shorter segments with zeros as needed."
msgstr ""
"比較に関わるすべてのリリース構成部分は、必要に応じて不足する構成部分にゼロを"
"補填することで長さを一致させなければなりません。"

#: ../source/specifications/version-specifiers.rst:635
msgid ""
"Within a numeric release (``1.0``, ``2.7.3``), the following suffixes are "
"permitted and MUST be ordered as shown::"
msgstr ""
"リリース番号の数字部分 (``1.0`` や ``2.7.3``) の中では、後述の接尾辞が許され"
"ており、下に示す通りに順序付けをしなければなりません::"

#: ../source/specifications/version-specifiers.rst:640
msgid ""
"Note that ``c`` is considered to be semantically equivalent to ``rc`` and "
"must be sorted as if it were ``rc``. Tools MAY reject the case of having the "
"same ``N`` for both a ``c`` and a ``rc`` in the same release segment as "
"ambiguous and remain in compliance with the specification."
msgstr ""
"``c`` が意味の上で ``rc`` と同等のものであると見做されていて、恰も本当に "
"``rc`` であるかのように並べ替えされる点を銘記してください。ツール群は、同じリ"
"リース構成部分内に ``c`` と ``rc`` の両方に同一の ``N`` を付けたものが来た場"
"合には曖昧であるとしてこれを拒否しても構いませんが、これでも仕様には合致して"
"います。"

#: ../source/specifications/version-specifiers.rst:645
msgid ""
"Within an alpha (``1.0a1``), beta (``1.0b1``), or release candidate "
"(``1.0rc1``, ``1.0c1``), the following suffixes are permitted and MUST be "
"ordered as shown::"
msgstr ""
"アルファ (``1.0a1``) 、ベータ (``1.0b1``) 、あるいはリリース候補 "
"(``1.0rc1``, ``1.0c1``) の中では、後述の接尾辞が許されていて、示される通りに"
"並べ替えられなければなりません::"

#: ../source/specifications/version-specifiers.rst:651
msgid ""
"Within a post-release (``1.0.post1``), the following suffixes are permitted "
"and MUST be ordered as shown::"
msgstr ""
"ポストリリース (``1.0.post1``) の中では、後述の接尾辞が許されていて、示す通り"
"に並べ替えられなければなりません::"

#: ../source/specifications/version-specifiers.rst:656
msgid ""
"Note that ``devN`` and ``postN`` MUST always be preceded by a dot, even when "
"used immediately following a numeric version (e.g. ``1.0.dev456``, ``1.0."
"post1``)."
msgstr ""
"バージョン番号の数字部分の直後に置く場合 (例えば ``1.0.dev456`` や ``1.0."
"post1``) であっても、 ``devN`` と ``postN`` は、常にドットに後続しなければな"
"らないことを銘記してください。"

#: ../source/specifications/version-specifiers.rst:660
msgid ""
"Within a pre-release, post-release or development release segment with a "
"shared prefix, ordering MUST be by the value of the numeric component."
msgstr ""
"共通の先行部分を持つプレリリース構成部分、ポストリリース構成部分、あるいは開"
"発リリース構成部分の中で、数値部分の値に従って順序付けをしなければなりませ"
"ん。"

#: ../source/specifications/version-specifiers.rst:663
msgid "The following example covers many of the possible combinations::"
msgstr "可能なバージョン番号の例を以下に示します::"

#: ../source/specifications/version-specifiers.rst:688
msgid "Version ordering across different metadata versions"
msgstr "相異なるメタデータバージョンを通してバージョン番号を順序付けする"

#: ../source/specifications/version-specifiers.rst:690
msgid ""
"Metadata v1.0 (:pep:`241`) and metadata v1.1 (:pep:`314`) do not specify a "
"standard version identification or ordering scheme. However metadata v1.2 (:"
"pep:`345`) does specify a scheme which is defined in :pep:`386`."
msgstr ""
"メタデータ v1.0 (pep:`241`) および メタデータ (:pep:`314`) は、標準となるバー"
"ジョン番号の識別や順序付けの枠組みを指定していません。しかしながら、メタデー"
"タ v1.2 (:pep:`345`) では、 :pep:`386` で定義された枠組みを指定しています。"

#: ../source/specifications/version-specifiers.rst:694
msgid ""
"Due to the nature of the simple installer API it is not possible for an "
"installer to be aware of which metadata version a particular distribution "
"was using. Additionally installers required the ability to create a "
"reasonably prioritized list that includes all, or as many as possible, "
"versions of a project to determine which versions it should install. These "
"requirements necessitate a standardization across one parsing mechanism to "
"be used for all versions of a project."
msgstr ""
"単純なインストーラ API の特性の故に、特定の配布物がどのバージョンのメタデータ"
"を使っているかをインストーラが意識することは不可能です。さらに、インストーラ"
"は、どのバージョンをインストールするべきであるかを決定するために、すべての、"
"または、可能な限り多くのバージョンのプロジェクトを含む合理的に優先順位付けさ"
"れたリストを作成することができるように要求されています。これらの要求事項に"
"よって、あるプロジェクトのすべてのバージョンにおいてひとつの解析メカニズムが"
"使われるような標準化が必要とされます。"

#: ../source/specifications/version-specifiers.rst:702
msgid ""
"Due to the above, this specification MUST be used for all versions of "
"metadata and supersedes :pep:`386` even for metadata v1.2. Tools SHOULD "
"ignore any versions which cannot be parsed by the rules in this "
"specification, but MAY fall back to implementation defined version parsing "
"and ordering schemes if no versions complying with this specification are "
"available."
msgstr ""
"上記のことによって、この仕様では、全てのメタデータのバージョンに使われなけれ"
"ばならず、メタデータ v1.2 であってさえも :pep:`386` を上書きする形で使われな"
"ければなりません。ツール類は、この仕様に示された規則に従って解釈できないバー"
"ジョン番号をすべて無視するべきですが、この仕様に合致するバージョン番号がひと"
"つも利用可能でない時には、それぞれの実装で定義されたバージョン番号の解釈や順"
"序付けにフォールバックしても構いません。"

#: ../source/specifications/version-specifiers.rst:708
msgid ""
"Distribution users may wish to explicitly remove non-compliant versions from "
"any private package indexes they control."
msgstr ""
"配布物のユーザは、自分が管理するプライベートなパッケージインデックスにおい"
"て、合致しないバージョン番号を明示的に除去しても構いません。"

#: ../source/specifications/version-specifiers.rst:713
msgid "Compatibility with other version schemes"
msgstr "他のバージョン番号の枠組みとの互換性"

#: ../source/specifications/version-specifiers.rst:715
msgid ""
"Some projects may choose to use a version scheme which requires translation "
"in order to comply with the public version scheme defined in this "
"specification. In such cases, the project specific version can be stored in "
"the metadata while the translated public version is published in the version "
"field."
msgstr ""
"プロジェクトの中には、この使用で定義された公開のバージョン番号枠組みに合致す"
"るために翻訳を要求するようなバージョン番号枠組みを使うことを選択するものもあ"
"ります。そのような場合には、当該プロジェクトに特有のバージョン番号をメタデー"
"タに格納しておく一方で、公開のバージョン番号を version フィールドに置くことが"
"できます。"

#: ../source/specifications/version-specifiers.rst:720
msgid ""
"This allows automated distribution tools to provide consistently correct "
"ordering of published releases, while still allowing developers to use the "
"internal versioning scheme they prefer for their projects."
msgstr ""
"これによって、自動化された配布物ツール類が公開されたリリース群の一貫性のある"
"形で正確な順序付けを提供することができる一方、開発者側では依然として自分たち"
"のプロジェクト向けに好みの内部的なバージョン番号枠組みを使うことが許されま"
"す。"

#: ../source/specifications/version-specifiers.rst:728
msgid ""
"`Semantic versioning`_ is a popular version identification scheme that is "
"more prescriptive than this specification regarding the significance of "
"different elements of a release number. Even if a project chooses not to "
"abide by the details of semantic versioning, the scheme is worth "
"understanding as it covers many of the issues that can arise when depending "
"on other distributions, and when publishing a distribution that others rely "
"on."
msgstr ""
"`セマンティックバージョニング`_ は、リリース番号の異なる要素の重要性に関し"
"て、この仕様以前から慣例として認められた人気のあるバージョン番号の識別の枠組"
"みです。あるプロジェクトがセマンティックバージョニングの詳細を受け入れないこ"
"とを選択した場合であっても、他の配布物に依存する時や他のプロジェクトが依存す"
"る配布物を公開する時に発生する多くの課題を網羅するためにも、この枠組みは理解"
"しておくに値します。"

#: ../source/specifications/version-specifiers.rst:735
msgid ""
"The \"Major.Minor.Patch\" (described in this specification as \"major.minor."
"micro\") aspects of semantic versioning (clauses 1-8 in the 2.0.0 "
"specification) are fully compatible with the version scheme defined in this "
"specification, and abiding by these aspects is encouraged."
msgstr ""
"(2.0.0 仕様の1-8 節の) セマンティックバージョニングの (\"メジャー.マイナー.マ"
"イクロ\" としてこの仕様に記されている) \"メジャー.マイナー.パッチ\" の形は、"
"この仕様で定義されるバージョン番号枠組みと完全に互換であり、この形を受容する"
"ことが推奨されています。"

#: ../source/specifications/version-specifiers.rst:740
msgid ""
"Semantic versions containing a hyphen (pre-releases - clause 10) or a plus "
"sign (builds - clause 11) are *not* compatible with this specification and "
"are not permitted in the public version field."
msgstr ""
"ハイフンを含むセマンティックバージョン (pre-releases - clause 10) やプラス記"
"号を含むセマンティックバージョン (builds - clause 11) は、この仕様と *互換性"
"がなく* 、公開のバージョン番号フィールドでは許されていません。"

#: ../source/specifications/version-specifiers.rst:744
msgid ""
"One possible mechanism to translate such semantic versioning based source "
"labels to compatible public versions is to use the ``.devN`` suffix to "
"specify the appropriate version order."
msgstr ""
"ソースラベルに基づいたそのようなセマンティックバージョニングを公開バージョン"
"番号と互換性のあるものに翻訳する可能なメカニズムの一つは、 ``.devN`` 接尾辞を"
"使って適切なバージョン番号の順序を指定することです。"

#: ../source/specifications/version-specifiers.rst:748
msgid ""
"Specific build information may also be included in local version labels."
msgstr ""
"特定のビルド情報も、ローカルのバージョン番号のラベルに含めても構いません。"

#: ../source/specifications/version-specifiers.rst:754
msgid "DVCS based version labels"
msgstr "DVCS に基づいたバージョン番号のラベル"

#: ../source/specifications/version-specifiers.rst:756
msgid ""
"Many build tools integrate with distributed version control systems like Git "
"and Mercurial in order to add an identifying hash to the version identifier. "
"As hashes cannot be ordered reliably such versions are not permitted in the "
"public version field."
msgstr ""
"多くのビルドツールは、バージョン識別子に識別のためのハッシュ値を付加するため"
"に、 Git や Mercurial のような分散バージョン管理システムを統合しています。"
"ハッシュ値は信頼できる形で順序付けすることができないので、そのようなバージョ"
"ン番号は公開のバージョンフィールドでは許されません。"

#: ../source/specifications/version-specifiers.rst:761
msgid ""
"As with semantic versioning, the public ``.devN`` suffix may be used to "
"uniquely identify such releases for publication, while the original DVCS "
"based label can be stored in the project metadata."
msgstr ""
"セマンティックバージョニングの場合と同様に、元の DVCS ベースのラベルをプロ"
"ジェクトのメタデータに格納することができない一方で、そのようなリリースを公開"
"する際に一意に識別するために、公開の ``.devN`` 接尾辞をつけても構いません。"

#: ../source/specifications/version-specifiers.rst:765
msgid ""
"Identifying hash information may also be included in local version labels."
msgstr ""
"ハッシュ値の情報を識別することは、ローカルのバージョン番号ラベルに含めても構"
"いません。"

#: ../source/specifications/version-specifiers.rst:769
msgid "Olson database versioning"
msgstr "Olson データベースによるバージョニング"

#: ../source/specifications/version-specifiers.rst:771
msgid ""
"The ``pytz`` project inherits its versioning scheme from the corresponding "
"Olson timezone database versioning scheme: the year followed by a lowercase "
"character indicating the version of the database within that year."
msgstr ""
"``pytz`` プロジェクトは、バージョニング方法を対応する Olson タイムゾーンデー"
"タベースのバージョニング方法から継承しています: 年と、それに後続する小文字の"
"文字でその年の中でのデータベースのバージョンを示すもの。"

#: ../source/specifications/version-specifiers.rst:775
msgid ""
"This can be translated to a compliant public version identifier as ``<year>."
"<serial>``, where the serial starts at zero or one (for the '<year>a' "
"release) and is incremented with each subsequent database update within the "
"year."
msgstr ""
"これは、 ``<year>.<serial>`` として (訳註、標準に) 適合する公開のバージョン識"
"別子に翻訳することができ、そこでは ('<year>' リリースに対して) シリアル番号が"
"０か１から始まって、その年の内にデータベースが更新される度に１づつ増加されま"
"す。"

#: ../source/specifications/version-specifiers.rst:780
msgid ""
"As with other translated version identifiers, the corresponding Olson "
"database version could be recorded in the project metadata."
msgstr ""
"他の翻訳されたバージョン識別子と同様に、対応する Olson データベースのバージョ"
"ン番号は、そのプロジェクトのメタデータに記録しておくことが可能です。"

#: ../source/specifications/version-specifiers.rst:787
msgid ""
"A version specifier consists of a series of version clauses, separated by "
"commas. For example::"
msgstr ""
"バージョン指定子は、一連のバージョン番号節をコンマで区切ったものから構成され"
"ます。例えば::"

#: ../source/specifications/version-specifiers.rst:792
msgid "The comparison operator determines the kind of version clause:"
msgstr "比較演算子がバージョン番号節の種類を決定します:"

#: ../source/specifications/version-specifiers.rst:794
msgid "``~=``: `Compatible release`_ clause"
msgstr "``~=``: `互換性のあるリリース <Compatible release>`_ 節"

#: ../source/specifications/version-specifiers.rst:795
msgid "``==``: `Version matching`_ clause"
msgstr "``==``: `バージョン番号のマッチング <Version matching>`_ 節"

#: ../source/specifications/version-specifiers.rst:796
msgid "``!=``: `Version exclusion`_ clause"
msgstr "``!=``: `バージョンの除外 <Version exclusion>`_ 節"

#: ../source/specifications/version-specifiers.rst:797
msgid "``<=``, ``>=``: `Inclusive ordered comparison`_ clause"
msgstr ""
"``<=``, ``>=``: `境界を含む順序比較 <Inclusive ordered comparison>`_ 節"

#: ../source/specifications/version-specifiers.rst:798
msgid "``<``, ``>``: `Exclusive ordered comparison`_ clause"
msgstr ""
"``<``, ``>``: `境界を含まない順序比較 <Exclusive ordered comparison>`_ 節"

#: ../source/specifications/version-specifiers.rst:799
msgid "``===``: `Arbitrary equality`_ clause."
msgstr "``===``: `あらゆる意味での同一性 <Arbitrary equality>`_ clause."

#: ../source/specifications/version-specifiers.rst:801
msgid ""
"The comma (\",\") is equivalent to a logical **and** operator: a candidate "
"version must match all given version clauses in order to match the specifier "
"as a whole."
msgstr ""
"コンマ (\",\") は、論理 **積** 演算子と同一のものです: 候補バージョン番号は、"
"全体として指定子に合致するために、すべての与えられた節が合致しなければなりま"
"せん。"

#: ../source/specifications/version-specifiers.rst:805
msgid ""
"Whitespace between a conditional operator and the following version "
"identifier is optional, as is the whitespace around the commas."
msgstr ""
"条件演算子とその後のバージョン識別子の間の空白文字は、コンマの周囲の空白文字"
"と同様にオプションです。"

#: ../source/specifications/version-specifiers.rst:808
msgid ""
"When multiple candidate versions match a version specifier, the preferred "
"version SHOULD be the latest version as determined by the consistent "
"ordering defined by the standard `Version scheme`_. Whether or not pre-"
"releases are considered as candidate versions SHOULD be handled as described "
"in `Handling of pre-releases`_."
msgstr ""
"複数の候補バージョンがバージョン識別子に合致する時には、好ましいバージョン"
"は、標準の `バージョン番号枠組み <Version scheme>`_ で定義された首尾一貫する"
"順序付けによって決定される最新のバージョンです。プレリリースが候補バージョン"
"だと見做されるか否かは、 `プレリリースの取り扱い <Handling of pre-"
"releases>`_ に記述されているとおりに扱われるべきです。"

#: ../source/specifications/version-specifiers.rst:814
msgid ""
"Except where specifically noted below, local version identifiers MUST NOT be "
"permitted in version specifiers, and local version labels MUST be ignored "
"entirely when checking if candidate versions match a given version specifier."
msgstr ""
"以下で特に注記される場合を除いて、バージョン指定子内ではローカルバージョン指"
"定子は許されてはならず、あるバージョン指定子に合致する候補バージョンかどうか"
"を調べる際にはローカルバージョンラベルは完全に無視されなければなりません。"

#: ../source/specifications/version-specifiers.rst:823
msgid "Compatible release"
msgstr "互換性のあるリリース <Compatible release>"

#: ../source/specifications/version-specifiers.rst:825
msgid ""
"A compatible release clause consists of the compatible release operator "
"``~=`` and a version identifier. It matches any candidate version that is "
"expected to be compatible with the specified version."
msgstr ""
"互換性のあるリリース節は、互換リリース演算子 ``~=`` とバージョン識別子から構"
"成されます。指定されたバージョンと互換性があるものと期待されるすべての候補"
"バージョンに合致します。"

#: ../source/specifications/version-specifiers.rst:829
msgid ""
"The specified version identifier must be in the standard format described in "
"`Version scheme`_. Local version identifiers are NOT permitted in this "
"version specifier."
msgstr ""
"指定されたバージョン識別子は、 `バージョン番号枠組み <Version scheme`_ に記述"
"された標準フォーマットの範疇に収まっていなければなりません。ローカルバージョ"
"ン識別子は、このバージョン識別子の中では許容されません。"

#: ../source/specifications/version-specifiers.rst:833
msgid ""
"For a given release identifier ``V.N``, the compatible release clause is "
"approximately equivalent to the pair of comparison clauses::"
msgstr ""
"あるリリース識別子 ``V.N`` にとって、互換リリース節は、一組の比較節とほぼ同一"
"のものです::"

#: ../source/specifications/version-specifiers.rst:838
msgid ""
"This operator MUST NOT be used with a single segment version number such as "
"``~=1``."
msgstr ""
"この演算子は、 ``~=1`` のように単独の構成部分バージョン番号と一緒に用いてはな"
"りません。"

#: ../source/specifications/version-specifiers.rst:841
msgid "For example, the following groups of version clauses are equivalent::"
msgstr "例えば、次に挙げるバージョン番号群はすべて同等ということになります::"

#: ../source/specifications/version-specifiers.rst:849
msgid ""
"If a pre-release, post-release or developmental release is named in a "
"compatible release clause as ``V.N.suffix``, then the suffix is ignored when "
"determining the required prefix match::"
msgstr ""
"プレリリース、ポストリリース、または開発リリースが ``V.N.suffix`` のような互"
"換性のあるリリース節の形の名前を付けられているなら、要求される接頭辞と合致す"
"るかどうかを決める時には接尾辞が無視されます::"

#: ../source/specifications/version-specifiers.rst:859
msgid ""
"The padding rules for release segment comparisons means that the assumed "
"degree of forward compatibility in a compatible release clause can be "
"controlled by appending additional zeros to the version specifier::"
msgstr ""
"リリース番号構成部分の比較に対するパディングの規則とは、互換性のあるリリース"
"節での前方互換性に想定された度合いを、バージョン識別子の後ろにゼロを追加して"
"制御することが可能です::"

#: ../source/specifications/version-specifiers.rst:871
msgid "Version matching"
msgstr "バージョン番号の照合"

#: ../source/specifications/version-specifiers.rst:873
msgid ""
"A version matching clause includes the version matching operator ``==`` and "
"a version identifier."
msgstr ""
"バージョン番号マッチング節には、バージョン番号マッチング演算子 ``==`` とバー"
"ジョン識別子を含みます。"

#: ../source/specifications/version-specifiers.rst:876
msgid ""
"The specified version identifier must be in the standard format described in "
"`Version scheme`_, but a trailing ``.*`` is permitted on public version "
"identifiers as described below."
msgstr ""
"指定されたバージョン識別子は、 `バージョン番号枠組み`_ に記述された標準フォー"
"マットでなければなりませんが、公開のバージョン識別子における後続する ``.*`` "
"は以下に述べるように許されています。"

#: ../source/specifications/version-specifiers.rst:880
msgid ""
"By default, the version matching operator is based on a strict equality "
"comparison: the specified version must be exactly the same as the requested "
"version. The *only* substitution performed is the zero padding of the "
"release segment to ensure the release segments are compared with the same "
"length."
msgstr ""
"デフォルトでは、バージョン番号マッチング演算子は、厳密な同一性の比較です: 指"
"定されたバージョンは、要求されたバージョンと正確に同一でなければなりません。 "
"*唯一の* 置換が行われるのは、リリース番号構成部分を同じ長さで行うことを保証す"
"るために、リリース番号構成部分にゼロをパディングする時だけです。"

#: ../source/specifications/version-specifiers.rst:886
msgid ""
"Whether or not strict version matching is appropriate depends on the "
"specific use case for the version specifier. Automated tools SHOULD at least "
"issue warnings and MAY reject them entirely when strict version matches are "
"used inappropriately."
msgstr ""
"厳密なバージョンマッチングが適切であるか否かは、バージョン指定子のユースケー"
"スによって変わります。自動化されたツール群は、厳密なバージョンマッチングが使"
"用された時には、少なくとも警告を発するべきで、全てを拒絶しても構いません。"

#: ../source/specifications/version-specifiers.rst:891
msgid ""
"Prefix matching may be requested instead of strict comparison, by appending "
"a trailing ``.*`` to the version identifier in the version matching clause. "
"This means that additional trailing segments will be ignored when "
"determining whether or not a version identifier matches the clause. If the "
"specified version includes only a release segment, then trailing components "
"(or the lack thereof) in the release segment are also ignored."
msgstr ""
"バージョンマッチング節のバージョン識別子の末尾に ``.*`` を孵化することで、厳"
"密な比較の代わりに接頭辞マッチングが要求されることもあります。これによって、"
"あるバージョン識別子がその節に合致するか否かを決定する時に、追加の後続構成要"
"素を無視することになるでしょう。指定されたバージョン番号がリリース番号構成部"
"分だけを含んでいるなら、リリース番号構成部分の中の後続の構成部分 (あるいは、"
"その欠落) もまた、無視されます。"

#: ../source/specifications/version-specifiers.rst:898
#: ../source/specifications/version-specifiers.rst:959
msgid ""
"For example, given the version ``1.1.post1``, the following clauses would "
"match or not as shown::"
msgstr ""
"例えば、あるバージョン番号 ``1.1.post1`` が与えられたとして、以下に示すように"
"合致したり合致しなかったりします::"

#: ../source/specifications/version-specifiers.rst:905
msgid ""
"For purposes of prefix matching, the pre-release segment is considered to "
"have an implied preceding ``.``, so given the version ``1.1a1``, the "
"following clauses would match or not as shown::"
msgstr ""
"接頭辞マッチングの目的のためには、プレリリース構成部分は、暗黙の裡に先行する "
"``.`` を持つものと見なされ、従って、バージョン番号 ``1.1a1`` が与えられたとす"
"れば、以下に示すように合致したり合致しなかったりします::"

#: ../source/specifications/version-specifiers.rst:913
msgid ""
"An exact match is also considered a prefix match (this interpretation is "
"implied by the usual zero padding rules for the release segment of version "
"identifiers). Given the version ``1.1``, the following clauses would match "
"or not as shown::"
msgstr ""
"正確な合致は、また、接頭辞の合致 (これの解釈は、リリース番号構成部分やバー"
"ジョン識別子に対する通常のゼロパディングを暗に意味します) であるものと見做さ"
"れます。バージョン番号 ``1.1`` が与えられたなら、以下に示すように合致したり合"
"致しなかったりします::"

#: ../source/specifications/version-specifiers.rst:925
msgid ""
"It is invalid to have a prefix match containing a development or local "
"release such as ``1.0.dev1.*`` or ``1.0+foo1.*``. If present, the "
"development release segment is always the final segment in the public "
"version, and the local version is ignored for comparison purposes, so using "
"either in a prefix match wouldn't make any sense."
msgstr ""
"``1.0.dev1.`` や ``1.0foo1.*`` のような開発リリース番号やローカルリリース番号"
"を含む接頭辞マッチは正当なものではありません。もし存在すれば、開発リリース番"
"号構成部分は常に公開のバージョン番号の最終構成部分であり、ローカルバージョン"
"番号は比較の目的においては無視されるので、そのようなものが接頭辞マッチにあっ"
"たとしても意味を成しません。"

#: ../source/specifications/version-specifiers.rst:931
msgid ""
"The use of ``==`` (without at least the wildcard suffix) when defining "
"dependencies for published distributions is strongly discouraged as it "
"greatly complicates the deployment of security fixes. The strict version "
"comparison operator is intended primarily for use when defining dependencies "
"for repeatable *deployments of applications* while using a shared "
"distribution index."
msgstr ""
"公開された配布物に対する依存関係を定義する時、 (少なくとも接尾辞にワイルド"
"カードを含まないような) ``==`` の使用は強い非推奨であり、それはセキュリティ"
"フィクスの展開を大きく複雑化させるからです。厳密なバージョン比較演算子は、一"
"義的に、共有の配布物インデックスを使う上で繰り返し可能な *アプリケーションの"
"展開* のための依存関係を定義するために使われることを想定しています。"

#: ../source/specifications/version-specifiers.rst:938
msgid ""
"If the specified version identifier is a public version identifier (no local "
"version label), then the local version label of any candidate versions MUST "
"be ignored when matching versions."
msgstr ""
"指定されたバージョン識別子は (ローカルバージョン番号ラベルなしの) 公開バー"
"ジョン識別子であり、候補バージョンに付けられたローカルバージョン番号ラベル"
"は、バージョンマッチングの際には無視されなければなりません。"

#: ../source/specifications/version-specifiers.rst:942
msgid ""
"If the specified version identifier is a local version identifier, then the "
"local version labels of candidate versions MUST be considered when matching "
"versions, with the public version identifier being matched as described "
"above, and the local version label being checked for equivalence using a "
"strict string equality comparison."
msgstr ""
"指定されたバージョン識別子がローカルバージョン識別子であるなら、バージョン間"
"のマッチングでは、候補バージョンのローカルバージョンラベルは上記の通り公開"
"バージョン識別子と合致するか確かめられ、ローカルバージョンラベルは厳密な文字"
"列の同一性比較を使って同一であるかどうか確認されます。"

#: ../source/specifications/version-specifiers.rst:950
msgid "Version exclusion"
msgstr "バージョンの除外 <Version exclusion>"

#: ../source/specifications/version-specifiers.rst:952
msgid ""
"A version exclusion clause includes the version exclusion operator ``!=`` "
"and a version identifier."
msgstr ""
"バージョンの除外節は、バージョン除外演算子 ``!=`` とバージョン識別子を含みま"
"す。"

#: ../source/specifications/version-specifiers.rst:955
msgid ""
"The allowed version identifiers and comparison semantics are the same as "
"those of the `Version matching`_ operator, except that the sense of any "
"match is inverted."
msgstr ""
"許されるバージョン識別子と比較のセマンティックスは、マッチの意味が反転してい"
"る点を除けば `バージョン番号のマッチング <Version matching>`_ 演算子のそれと"
"同一です。"

#: ../source/specifications/version-specifiers.rst:968
msgid "Inclusive ordered comparison"
msgstr "境界を含む順序比較 <Inclusive ordered comparison>"

#: ../source/specifications/version-specifiers.rst:970
msgid ""
"An inclusive ordered comparison clause includes a comparison operator and a "
"version identifier, and will match any version where the comparison is "
"correct based on the relative position of the candidate version and the "
"specified version given the consistent ordering defined by the standard "
"`Version scheme`_."
msgstr ""
"境界を含む順序比較節は比較演算子とバージョン識別子を含み、候補バージョンの相"
"対的な位置と指定されたバージョンに対して与えられる標準の `バージョン番号枠組"
"み <Version scheme>`_ によって定義される首尾一貫した順序付けに基づいてその比"
"較が正しいかどうかを任意のバージョン番号に対して行います。"

#: ../source/specifications/version-specifiers.rst:976
msgid "The inclusive ordered comparison operators are ``<=`` and ``>=``."
msgstr "境界を含む順序比較の演算子は ``<=`` と ``>=`` です。"

#: ../source/specifications/version-specifiers.rst:978
#: ../source/specifications/version-specifiers.rst:1008
msgid ""
"As with version matching, the release segment is zero padded as necessary to "
"ensure the release segments are compared with the same length."
msgstr ""
"バージョン番号のマッチングと同様に、リリース番号構成部分が同じ長さで比較され"
"ることを担保するために、リリース番号構成部分は必要に応じてゼロでパディングさ"
"れます。"

#: ../source/specifications/version-specifiers.rst:981
#: ../source/specifications/version-specifiers.rst:1011
msgid "Local version identifiers are NOT permitted in this version specifier."
msgstr "ローカルバージョン識別子は、このバージョン識別子の中では許されません。"

#: ../source/specifications/version-specifiers.rst:985
msgid "Exclusive ordered comparison"
msgstr "境界を含まない順序比較 <Exclusive ordered comparison>"

#: ../source/specifications/version-specifiers.rst:987
msgid ""
"The exclusive ordered comparisons ``>`` and ``<`` are similar to the "
"inclusive ordered comparisons in that they rely on the relative position of "
"the candidate version and the specified version given the consistent "
"ordering defined by the standard `Version scheme`_. However, they "
"specifically exclude pre-releases, post-releases, and local versions of the "
"specified version."
msgstr ""
"境界を含まない順序比較である ``>`` と ``<`` は、標準の `バージョン番号枠組み "
"<Version scheme>`_ によって定義される首尾一貫した順序付けが与える候補バージョ"
"ンと指定されたバージョン番号の相対的な位置に依存する点で、境界を含む順序比較"
"と似ています。しかしながら、指定されたバージョン番号のプレリリース・ポストリ"
"リース・ローカルバージョンの部分を除外します。"

#: ../source/specifications/version-specifiers.rst:993
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** allow a post-release of "
"the given version unless ``V`` itself is a post release. You may mandate "
"that releases are later than a particular post release, including additional "
"post releases, by using ``>V.postN``. For example, ``>1.7`` will allow "
"``1.7.1`` but not ``1.7.0.post1`` and ``>1.7.post2`` will allow ``1.7.1`` "
"and ``1.7.0.post3`` but not ``1.7.0``."
msgstr ""
"境界を含まない順序比較である ``>V`` は、``V`` それ自身がポストリリース番号で"
"ある場合を除いて、与えられたバージョン番号のポストリリース部分を **許してはな"
"りません** 。 ``>V.postN`` を使うことで、特定のポストリリースバージョンよりも"
"新しいリリースを要求しても構いません。例えば、 ``>1.7`` は ``1.7.1`` を許容し"
"ますが ``1.7.0.post1`` を許容せず、 ``>1.7.post2`` は ``1.7.1`` や ``1.7.0."
"post3`` を許容しますが ``1.7.0`` を許容しません。"

#: ../source/specifications/version-specifiers.rst:1000
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** match a local version "
"of the specified version."
msgstr ""
"境界を含まない順序比較 ``>V`` は、指定されたバージョン番号のローカルバージョ"
"ン部分と **比較してはなりません**。"

#: ../source/specifications/version-specifiers.rst:1003
msgid ""
"The exclusive ordered comparison ``<V`` **MUST NOT** allow a pre-release of "
"the specified version unless the specified version is itself a pre-release. "
"Allowing pre-releases that are earlier than, but not equal to a specific pre-"
"release may be accomplished by using ``<V.rc1`` or similar."
msgstr ""
"境界を含まない順序比較の ``<V`` では、指定されたバージョン番号それ自身がプレ"
"リリース番号でない限り、指定されたバージョン番号にプレリリース部分が **あって"
"はなりません** 。 ``<V.rc1`` や同様のものを使えば、指定されたプレリリース番号"
"を含まずにそれより前であるプレリリース番号を許容することができるでしょう。"

#: ../source/specifications/version-specifiers.rst:1015
msgid "Arbitrary equality"
msgstr "あらゆる意味での同一性 <Arbitrary equality>"

#: ../source/specifications/version-specifiers.rst:1017
msgid ""
"Arbitrary equality comparisons are simple string equality operations which "
"do not take into account any of the semantic information such as zero "
"padding or local versions. This operator also does not support prefix "
"matching as the ``==`` operator does."
msgstr ""
"あらゆる意味での同一性比較は、ゼロパディングやローカルバージョンのような意味"
"論的な情報を全く考慮しない単純な文字列の同一性演算です。この演算子は、また、 "
"``==`` 演算子なら実行するようなプレフィクスのマッチングもサポートしていませ"
"ん。"

#: ../source/specifications/version-specifiers.rst:1022
msgid ""
"The primary use case for arbitrary equality is to allow for specifying a "
"version which cannot otherwise be represented by this specification. This "
"operator is special and acts as an escape hatch to allow someone using a "
"tool which implements this specification to still install a legacy version "
"which is otherwise incompatible with this specification."
msgstr ""
"あらゆる意味での同一性比較の一義的なユースケースは、これを使わなければこの仕"
"様によって表現され得ないようなバージョン番号を指定することを許容するというこ"
"とです。この演算子は特別で、誰かがこの仕様を実装したツールを使って、さもなけ"
"ればこの仕様とは非互換になってしまうようなレガシーなバージョンを、それでもイ"
"ンストールすることができる脱出ハッチとして振舞います。"

#: ../source/specifications/version-specifiers.rst:1028
msgid ""
"An example would be ``===foobar`` which would match a version of ``foobar``."
msgstr ""
"一つの例としては、``foobar`` というバージョン番号に合致するであろう "
"``==foobar`` ということになるでしょう。"

#: ../source/specifications/version-specifiers.rst:1030
msgid ""
"This operator may also be used to explicitly require an unpatched version of "
"a project such as ``===1.0`` which would not match for a version "
"``1.0+downstream1``."
msgstr ""
"この演算子は、また、 ``1.0+downstream1`` のようなバージョンに合致しないであろ"
"うと思われる、 ``===1.0`` のようなプロジェクトのパッチ適用のないバージョンを"
"明示的に要求するためにも使われます。"

#: ../source/specifications/version-specifiers.rst:1034
msgid ""
"Use of this operator is heavily discouraged and tooling MAY display a "
"warning when it is used."
msgstr ""
"この演算子の使用は強い非推奨の状態にあり、使用に際してはツール類は警告を表示"
"しても構いません。"

#: ../source/specifications/version-specifiers.rst:1039
msgid "Handling of pre-releases"
msgstr "プレリリースの取り扱い <Handling of pre-releases>"

#: ../source/specifications/version-specifiers.rst:1041
msgid ""
"Pre-releases of any kind, including developmental releases, are implicitly "
"excluded from all version specifiers, *unless* they are already present on "
"the system, explicitly requested by the user, or if the only available "
"version that satisfies the version specifier is a pre-release."
msgstr ""
"すでにシステム上に存在しているか、ユーザによって明示的に要求されるか、また"
"は、バージョン指定子を満足する唯一の利用可能なバージョンがプレリリースである"
"か、の *いずれかでない限り* 、開発リリースを含むプレリリースは、どんな種類で"
"も、あらゆるバージョン指定子から暗黙裡に除外されます。"

#: ../source/specifications/version-specifiers.rst:1046
msgid "By default, dependency resolution tools SHOULD:"
msgstr ""
"デフォルトでは、依存関係を解決しようとするツール類は以下のことを行うべきです:"

#: ../source/specifications/version-specifiers.rst:1048
msgid "accept already installed pre-releases for all version specifiers"
msgstr ""
"全てのバージョン指定子向けにすでにインストールされているプレリリースを受け入"
"れる"

#: ../source/specifications/version-specifiers.rst:1049
msgid ""
"accept remotely available pre-releases for version specifiers where there is "
"no final or post release that satisfies the version specifier"
msgstr ""
"バージョン指定子を満足するような最終リリースやポストリリースが存在しないリ"
"モートサイトにあって利用可能なプレリリースを、バージョン指定子として受け入れ"
"る"

#: ../source/specifications/version-specifiers.rst:1051
msgid "exclude all other pre-releases from consideration"
msgstr "他のすべてのプレリリースを考慮の対象から除外する"

#: ../source/specifications/version-specifiers.rst:1053
msgid ""
"Dependency resolution tools MAY issue a warning if a pre-release is needed "
"to satisfy a version specifier."
msgstr ""
"依存関係解決ツール群は、バージョン指定子を満足させるためにあるプレリリースが"
"必要である場合には、警告を発しても構いません。"

#: ../source/specifications/version-specifiers.rst:1056
msgid ""
"Dependency resolution tools SHOULD also allow users to request the following "
"alternative behaviours:"
msgstr ""
"依存関係解決ツール群は、また、以下のような代替的な振る舞いをユーザが要求する"
"ことを許容するべきです:"

#: ../source/specifications/version-specifiers.rst:1059
msgid "accepting pre-releases for all version specifiers"
msgstr "全てのバージョン指定子にプレリリースを受け入れること"

#: ../source/specifications/version-specifiers.rst:1060
msgid ""
"excluding pre-releases for all version specifiers (reporting an error or "
"warning if a pre-release is already installed locally, or if a pre-release "
"is the only way to satisfy a particular specifier)"
msgstr ""
"全てのバージョン指定子からプレリリースを除外すること (プレリリースがすでに"
"ローカルにインストールされている場合や特定の指定子を満たすためにはプレリリー"
"スが唯一の選択肢である場合には、エラーないし警告を報告すること)"

#: ../source/specifications/version-specifiers.rst:1064
msgid ""
"Dependency resolution tools MAY also allow the above behaviour to be "
"controlled on a per-distribution basis."
msgstr ""
"依存関係解決ツール群は、配布物の単位ごとに上記の振る舞いを許容しても構いませ"
"ん。"

#: ../source/specifications/version-specifiers.rst:1067
msgid ""
"Post-releases and final releases receive no special treatment in version "
"specifiers - they are always included unless explicitly excluded."
msgstr ""
"ポストリリースと最終リリースは、バージョン識別子の中で何ら特別な取り扱いを受"
"けません - 明示的に除外されていない限り、これらは常に受け入れられます。"

#: ../source/specifications/version-specifiers.rst:1074
msgid "``~=3.1``: version 3.1 or later, but not version 4.0 or later."
msgstr ""
"``~=3.1``: バージョン 3.1 またはそれ以降、しかし、バージョン 4.0 またはそれ以"
"降ではない。"

#: ../source/specifications/version-specifiers.rst:1075
msgid "``~=3.1.2``: version 3.1.2 or later, but not version 3.2.0 or later."
msgstr ""
"``~=3.1.2``: バージョン 3.1.2 またはそれ以降、しかし、バージョン 3.2.0 または"
"それ以降ではない。"

#: ../source/specifications/version-specifiers.rst:1076
msgid "``~=3.1a1``: version 3.1a1 or later, but not version 4.0 or later."
msgstr ""
"``~=3.1a1``: バージョン 3.1a1 またはそれ以降、しかし、バージョン 4.0 またはそ"
"れ以降ではない。"

#: ../source/specifications/version-specifiers.rst:1077
msgid ""
"``== 3.1``: specifically version 3.1 (or 3.1.0), excludes all pre-releases, "
"post releases, developmental releases and any 3.1.x maintenance releases."
msgstr ""
"``== 3.1``: 正確にバージョン 3.1 (または 3.1.0)、プレリリース・ポストリリー"
"ス・開発リリースや 3.1.x のメンテナンスリリースは全て除外する。"

#: ../source/specifications/version-specifiers.rst:1079
msgid ""
"``== 3.1.*``: any version that starts with 3.1. Equivalent to the "
"``~=3.1.0`` compatible release clause."
msgstr ""
"``== 3.1.*``: 3.1 で始まるすべてのバージョン。 ``~=3.1.0`` 互換リリース節に同"
"じ。"

#: ../source/specifications/version-specifiers.rst:1081
msgid ""
"``~=3.1.0, != 3.1.3``: version 3.1.0 or later, but not version 3.1.3 and not "
"version 3.2.0 or later."
msgstr ""
"``~=3.1.0, != 3.1.3``: バージョン 3.1.0 またはそれ以降、しかし、バージョン "
"3.1.3 ではなく、バージョン 3.2.0 またはそれ以降でもない。"

#: ../source/specifications/version-specifiers.rst:1086
msgid "Direct references"
msgstr "直接参照"

#: ../source/specifications/version-specifiers.rst:1088
msgid ""
"Some automated tools may permit the use of a direct reference as an "
"alternative to a normal version specifier. A direct reference consists of "
"the specifier ``@`` and an explicit URL."
msgstr ""
"自動化ツールの中には、通常のバージョン指定子の代替として直接参照の使用を許す"
"ものがあります。直接参照は、それを指定する ``@`` と明示された URL から構成さ"
"れます。"

#: ../source/specifications/version-specifiers.rst:1092
msgid ""
"Whether or not direct references are appropriate depends on the specific use "
"case for the version specifier. Automated tools SHOULD at least issue "
"warnings and MAY reject them entirely when direct references are used "
"inappropriately."
msgstr ""
"直接参照が適切であるか否かは、バージョン指定子に対する特定のユースケースに依"
"存します。自動化ツール群は、少なくとも警告を発行するべきで、直接参照が不適切"
"に使われた場合には全体を拒否しても構いません。"

#: ../source/specifications/version-specifiers.rst:1097
msgid ""
"Public index servers SHOULD NOT allow the use of direct references in "
"uploaded distributions. Direct references are intended as a tool for "
"software integrators rather than publishers."
msgstr ""
"公開のインデックスサーバは、アップロードされた配布物中での直接参照の使用を許"
"すべきではありません。直接参照は、公開者 <publishers> 向けではなくてソフト"
"ウェアインテグレータ向けのツールとして意図されたものです。"

#: ../source/specifications/version-specifiers.rst:1101
msgid ""
"Depending on the use case, some appropriate targets for a direct URL "
"reference may be an sdist or a wheel binary archive. The exact URLs and "
"targets supported will be tool dependent."
msgstr ""
"ユースケースに依存しますが、 URL の直接参照の適切な使い所は sdist や wheel の"
"バイナリアーカイブでしょう。正確な URL やターゲットのサポートがあるかどうかは"
"ツール次第です。"

#: ../source/specifications/version-specifiers.rst:1105
msgid "For example, a local source archive may be referenced directly::"
msgstr ""
"例えば、ローカルのソースコードアーカイブが直接に参照されるかもしれません::"

#: ../source/specifications/version-specifiers.rst:1109
msgid "Alternatively, a prebuilt archive may also be referenced::"
msgstr "あるいは、ビルド済みのアーカイブが参照されるかもしれません::"

#: ../source/specifications/version-specifiers.rst:1113
msgid ""
"All direct references that do not refer to a local file URL SHOULD specify a "
"secure transport mechanism (such as ``https``) AND include an expected hash "
"value in the URL for verification purposes. If a direct reference is "
"specified without any hash information, with hash information that the tool "
"doesn't understand, or with a selected hash algorithm that the tool "
"considers too weak to trust, automated tools SHOULD at least emit a warning "
"and MAY refuse to rely on the URL. If such a direct reference also uses an "
"insecure transport, automated tools SHOULD NOT rely on the URL."
msgstr ""
"ローカルにあるファイルを指す URL への参照ではない直接参照は、すべて、 "
"(``https`` のような) 安全な転送メカニズムを指定するべきであり、かつ、検証の目"
"的で URL の中に期待されるハッシュ値を含むべきです。直接参照でハッシュ値の情報"
"が含まれていなかったりツールが理解できないハッシュ値の情報が含まれていたり、"
"採用されているハッシュアルゴリズムが信頼するには弱すぎるとツールが判断したり"
"した場合には、自動化ツールは少なくとも警告を発するべきであり、その URL に依存"
"することを拒否しても構いません。もしそのような直接参照が安全でない転送手段を"
"使っているなら、自動化ツールはその URL に依存するべきではありません。"

#: ../source/specifications/version-specifiers.rst:1122
msgid ""
"It is RECOMMENDED that only hashes which are unconditionally provided by the "
"latest version of the standard library's :py:mod:`hashlib` module be used "
"for source archive hashes. At time of writing, that list consists of "
"``'md5'``, ``'sha1'``, ``'sha224'``, ``'sha256'``, ``'sha384'``, and "
"``'sha512'``."
msgstr ""
"ソースコードアーカイブのハッシュ値計算には、標準ライブラリの :py:mod:"
"`hashlib` モジュールの最新版が無条件に提供するハッシュだけを用いることを推奨"
"します。本文書の執筆時点では、 'md5' ・ 'sha1' ・ 'sha224' ・ 'sha256' ・ "
"'sha384' ・ 'sha512' が該当します。"

#: ../source/specifications/version-specifiers.rst:1128
msgid ""
"For source archive and wheel references, an expected hash value may be "
"specified by including a ``<hash-algorithm>=<expected-hash>`` entry as part "
"of the URL fragment."
msgstr ""
"ソースコードアーカイブと wheel を参照するためには、期待されるハッシュ値は "
"URL の一部として ``<hash-algorithm>=<expected-hash>`` エントリに含まれる形で"
"指定されるでしょう。"

#: ../source/specifications/version-specifiers.rst:1132
msgid ""
"For version control references, the ``VCS+protocol`` scheme SHOULD be used "
"to identify both the version control system and the secure transport, and a "
"version control system with hash based commit identifiers SHOULD be used. "
"Automated tools MAY omit warnings about missing hashes for version control "
"systems that do not provide hash based commit identifiers."
msgstr ""
"バージョンコントロールの参照のためには、バージョン管理システムと安全な転送手"
"段の両方を特定するために ``VCS+プロトコル`` の書き方が使われるべきで、ハッ"
"シュ値で表現したコミット識別子を伴ったバージョン管理システムが使われるべきで"
"す。自動化ツール群は、ハッシュ値で表したコミット識別子を持たないバージョン管"
"理システムではハッシュ値がなくても警告を省略しても構いません。"

#: ../source/specifications/version-specifiers.rst:1138
msgid ""
"To handle version control systems that do not support including commit or "
"tag references directly in the URL, that information may be appended to the "
"end of the URL using the ``@<commit-hash>`` or the ``@<tag>#<commit-hash>`` "
"notation."
msgstr ""
"コミットやタグへの参照を URL 内に直接書くことをサポートしないバージョン管理シ"
"ステムを扱うためには、 そのような情報は、 ``@<コミットのハッシュ値>`` や ``@<"
"タグ>#<コミットのハッシュ値>`` という表記方法を用いて URL の末尾に追加しても"
"構いません。"

#: ../source/specifications/version-specifiers.rst:1145
msgid ""
"This isn't *quite* the same as the existing VCS reference notation supported "
"by pip. Firstly, the distribution name is moved in front rather than "
"embedded as part of the URL. Secondly, the commit hash is included even when "
"retrieving based on a tag, in order to meet the requirement above that "
"*every* link should include a hash to make things harder to forge (creating "
"a malicious repo with a particular tag is easy, creating one with a specific "
"*hash*, less so)."
msgstr ""
"これは、 pip がサポートするような既存の VCS 参照の表記方法とは *非常に* 異な"
"ります。第一に、配布物の名称が URL の一部として埋め込まれるのではなく、前方に"
"移動しています。第二に、タグに基づいて取得する場合であっても、 (特定のタグを"
"伴う悪意あるリポジトリを作成することは容易で、特定の *ハッシュ値* を伴うもの"
"はより困難であることから) 偽造をより困難にするために *あらゆる* リンクにハッ"
"シュ値が含まれているべきであるという要求に従うために、コミットのハッシュ値が"
"含まれています。"

#: ../source/specifications/version-specifiers.rst:1153
msgid "Remote URL examples::"
msgstr "リモート URL の例::"

#: ../source/specifications/version-specifiers.rst:1161
msgid "File URLs"
msgstr "ファイルを指す URL 群"

#: ../source/specifications/version-specifiers.rst:1163
msgid ""
"File URLs take the form of ``file://<host>/<path>``. If the ``<host>`` is "
"omitted it is assumed to be ``localhost`` and even if the ``<host>`` is "
"omitted the third slash MUST still exist. The ``<path>`` defines what the "
"file path on the filesystem that is to be accessed."
msgstr ""
"ファイル URL は、 ``file://<host>/<path>`` の形を取ります。 ``<host>`` が省略"
"された場合は ``localhost`` であるものと想定され、 ``<host>`` が省略された場合"
"であってさえも３個目のスラッシュが存在していなければなりません。 ``<path>`` "
"は、これからアクセスされるであろうファイルシステム上のファイルパスです。"

#: ../source/specifications/version-specifiers.rst:1168
msgid ""
"On the various \\*nix operating systems the only allowed values for "
"``<host>`` is for it to be omitted, ``localhost``, or another FQDN that the "
"current machine believes matches its own host. In other words, on \\*nix the "
"``file://`` scheme can only be used to access paths on the local machine."
msgstr ""
"さまざまな \\*nix オペレーティングシステムでは、 ``<host>`` に許される唯一の"
"値は、省略時の ``localhost`` か、現在のマシーンが自分自身であると信じている別"
"の FQDN です。換言すれば、 \\*nix 上では、ローカルマシン上のパスにアクセスす"
"るための ``file://`` スキームだけが使用可能であるということです。"

#: ../source/specifications/version-specifiers.rst:1173
msgid ""
"On Windows the file format should include the drive letter if applicable as "
"part of the ``<path>`` (e.g. ``file:///c:/path/to/a/file``). Unlike \\*nix "
"on Windows the ``<host>`` parameter may be used to specify a file residing "
"on a network share. In other words, in order to translate ``\\"
"\\machine\\volume\\file`` to a ``file://`` url, it would end up as ``file://"
"machine/volume/file``. For more information on ``file://`` URLs on Windows "
"see `MSDN <https://web.archive.org/web/20130321051043/http://blogs.msdn.com/"
"b/ie/archive/2006/12/06/file-uris-in-windows.aspx>`_."
msgstr ""
"Windows では、ファイルフォーマットは、もし可能なら (例えば ``file:///c:/path/"
"to/a/file`` のように) ``<path>`` の一部としてドライブレターを含んでいるべきで"
"す。 \\*nix とは異なり、 Windows 上では ``<host>`` パラメータは、ネットワーク"
"共有上にあるファイルを指定するために使われます。換言すれば、 ``\\"
"\\machine\\volume\\file`` を ``file://`` url に翻訳するために、最終的に "
"``file://machine/volume/file`` の形になるでしょう。Windows における ``file://"
"`` URL についてもっと詳しい情報を知るためには、 `MSDN <https://web.archive."
"org/web/20130321051043/http://blogs.msdn.com/b/ie/archive/2006/12/06/file-"
"uris-in-windows.aspx>`_ を見てください。"

#: ../source/specifications/version-specifiers.rst:1184
msgid "Summary of differences from pkg_resources.parse_version"
msgstr "pkg_resources.parse_version からの相違点のまとめ"

#: ../source/specifications/version-specifiers.rst:1186
msgid ""
"Note: this comparison is to ``pkg_resources.parse_version`` as it existed at "
"the time :pep:`440` was written. After the PEP was accepted, setuptools 6.0 "
"and later versions adopted the behaviour described here."
msgstr ""

#: ../source/specifications/version-specifiers.rst:1190
msgid ""
"Local versions sort differently, this specification requires that they sort "
"as greater than the same version without a local version, whereas "
"``pkg_resources.parse_version`` considers it a pre-release marker."
msgstr ""
"ローカルバージョンの順序付けは異なっていて、この仕様では、ローカルバージョン"
"なしの同バージョンのものよりも後に来るものとして順序付けを行うように要求して"
"いますが、他方で、 ``pkg_resources.parse_version`` はそれ (訳註、ローカルバー"
"ジョン) をプレリリースのマーカーの一つであると見做しています。"

#: ../source/specifications/version-specifiers.rst:1194
msgid ""
"This specification purposely restricts the syntax which constitutes a valid "
"version while ``pkg_resources.parse_version`` attempts to provide some "
"meaning from *any* arbitrary string."
msgstr ""
"この仕様では、正当なバージョン番号を構成する文法を意図的に制限していますが、"
"他方で ``pkg_resources.parse_version`` では *あらゆる* 任意の文字列から何らか"
"の意味を汲み取るように試みます。"

#: ../source/specifications/version-specifiers.rst:1198
msgid ""
"``pkg_resources.parse_version`` allows arbitrarily deeply nested version "
"signifiers like ``1.0.dev1.post1.dev5``. This specification however allows "
"only a single use of each type and they must exist in a certain order."
msgstr ""
"``pkg_resources.parse_version`` では、 ``1.0.dev1.post1.dev5`` のように任意に"
"深く入れ子になったバージョン番号の記号表現を許容します。しかし、この仕様で"
"は、それぞれのタイプが高々一度だけ使われることと、ある順番に従って存在してい"
"ることを許容しているだけです。"

#: ../source/specifications/version-specifiers.rst:1207
msgid "Appendix: Parsing version strings with regular expressions"
msgstr "補遺: 正規表現を伴うバージョン文字列を解析する"

#: ../source/specifications/version-specifiers.rst:1209
msgid ""
"As noted earlier in the :ref:`public-version-identifiers` section, published "
"version identifiers SHOULD use the canonical format. This section provides "
"regular expressions that can be used to test whether a version is already in "
"that form, and if it's not, extract the various components for subsequent "
"normalization."
msgstr ""
":ref:`public-version-identifiers` 節で述べられているように、公開されたバー"
"ジョン識別子は、正統な書式を使用するべきです。この説では、あるバージョン番号"
"が既にその書式に従っているか否かをテストするために使うことができ、そして、も"
"し否であればその後の標準化のためにさまざまな構成要素を引き出すために使うこと"
"ができる、そのような正規表現を提供します。"

#: ../source/specifications/version-specifiers.rst:1215
msgid ""
"To test whether a version identifier is in the canonical format, you can use "
"the following function:"
msgstr ""
"バージョン識別子が正統な書式であるか否かを確かめるためには、次の関数を使うこ"
"とができます:"

#: ../source/specifications/version-specifiers.rst:1224
msgid ""
"To extract the components of a version identifier, use the following regular "
"expression (as defined by the `packaging <https://github.com/pypa/"
"packaging>`_ project):"
msgstr ""
"バージョン識別子の構成部分を取り出すためには、以下の正規表現を使ってください "
"(`パッケージング <https://github.com/pypa/packaging>`_ プロジェクトによって定"
"義されたもの):"

#: ../source/specifications/version-specifiers.rst:1271
msgid "August 2014: This specification was approved through :pep:`440`."
msgstr "2014年8月: :pep:`440` を通じてこの仕様が承認された。"

#: ../source/specifications/version-specifiers.rst:1272
msgid ""
"May 2025: Clarify that development releases are a form of pre-release when "
"they are handled."
msgstr ""

#: ../source/specifications/virtual-environments.rst:6
msgid "Python Virtual Environments"
msgstr "Python 仮想環境"

#: ../source/specifications/virtual-environments.rst:8
msgid ""
"For Python 3.3 and later versions, :pep:`405` introduced interpreter level "
"support for the concept of \"Python Virtual Environments\". Each virtual "
"environment has its own Python binary (allowing creation of environments "
"with various Python versions) and can have its own independent set of "
"installed Python packages in its site directories, but shares the standard "
"library with the base installed Python. While the concept of virtual "
"environments existed prior to this update, there was no previously "
"standardised mechanism for declaring or discovering them."
msgstr ""
"Python 3.3 およびそれ以降のバージョンでは、 :pep:`405` で \"Python 仮想環境 "
"<Python Virtual Environment>\" の概念に対するサポートがインタープリタのレベル"
"で導入されました。それぞれの仮想環境が独自の Python バイナリを持ち (従ってさ"
"まざまなバージョンの Python 環境を作成することが可能) 、そのサイトディレクト"
"リの中にそれぞれ独立した Python パッケージ群をインストールすることができ、同"
"時に、ベースシステムにインストールされた Python と標準ライブラリを共有するこ"
"とができます。仮想環境の概念はこのアップデートに先立って存在していましたが、"
"(訳註、仮想環境を) 宣言したり発見したりするための標準化されたメカニズムはそれ"
"まで存在しなかったのです。"

#: ../source/specifications/virtual-environments.rst:18
msgid "Runtime detection of virtual environments"
msgstr "仮想環境のランタイムを識別する"

#: ../source/specifications/virtual-environments.rst:20
msgid ""
"At runtime, virtual environments can be identified by virtue of :py:data:"
"`sys.prefix` (the filesystem location of the running interpreter) having a "
"different value from :py:data:`sys.base_prefix` (the default filesystem "
"location of the standard library directories)."
msgstr ""
"ランタイムには、仮想環境は :py:data:``sys.prefix`` (動作中のインタープリタの"
"ファイルシステム上の場所) が :py:data:``sys.base_prefix`` (標準ライブラリの"
"ディレクトリのデフォルトでのファイルシステム上の場所) とは異なる値を持つおか"
"げで識別可能です。"

#: ../source/specifications/virtual-environments.rst:25
msgid ""
":ref:`venv-explanation` in the Python standard library documentation for "
"the :py:mod:`venv` module covers this along with the concept of "
"\"activating\" a virtual environment in an interactive operating system "
"shell (this activation step is optional and hence the changes it makes can't "
"be reliably used to detect whether a Python program is running in a virtual "
"environment or not)."
msgstr ""
":py:mod:`venv` モジュールに関する Python 標準ライブラリの説明文書の :ref:"
"`venv-explanation` は、オペレーティングシステムの対話型シェル内で仮想環境を "
"\"活性化 <activating>\" するという概念 (この活性化のステップはオプションであ"
"り、それがもたらす変化を使っても Python プログラムが仮想環境内で走っているの"
"か否かを信頼できる形で判別することはできません) とともに、これを説明していま"
"す。"

#: ../source/specifications/virtual-environments.rst:33
msgid "Declaring installation environments as Python virtual environments"
msgstr "インストール先の環境がPython 仮想環境であることを宣言する"

#: ../source/specifications/virtual-environments.rst:35
msgid ""
"As described in :pep:`405`, a Python virtual environment in its simplest "
"form consists of nothing more than a copy or symlink of the Python binary "
"accompanied by a ``site-packages`` directory and a ``pyvenv.cfg`` file with "
"a ``home`` key that indicates where to find the Python standard library "
"modules."
msgstr ""
":pep:`405` で述べられているように、最も単純な形式での Python 仮想環境は、 "
"Python バイナリのコピーかシンボリックリンクに、 ``site-packages`` ディレクト"
"リと、 Python 標準ライブラリのモジュール群がどこで見つかるかを指し示す "
"``home`` キーを伴った ``pyvenv.cfg`` ファイルが随伴しているだけのもので構成さ"
"れます。"

#: ../source/specifications/virtual-environments.rst:40
msgid ""
"While designed to meet the needs of the standard :py:mod:`venv` module, this "
"split installation and ``pyvenv.cfg`` file approach can be used by *any* "
"Python installation provider that desires Python-specific tools to be aware "
"that they are already operating in a virtual environment and no further "
"environment nesting is required or desired."
msgstr ""
"標準である :py:mod:`venv` モジュールの要求するものに合うように設計されている"
"一方で、この分割実装と ``pyvenv.cfg`` ファイルのアプローチは、Python に特化し"
"たツール群が自身がすでに仮想環境の中で動作していて、それ以上の入れ子環境は要"
"求もされておらず望ましくもないことを認識するようにしたいと望む Python 実装提"
"供者なら *誰でも* 採用することができます。"

#: ../source/specifications/virtual-environments.rst:46
msgid ""
"Even in the absence of a ``pyvenv.cfg`` file, any approach (e.g. "
"``sitecustomize.py``, patching the installed Python runtime) that results "
"in :py:data:`sys.prefix` and :py:data:`sys.base_prefix` having different "
"values, while still providing a matching default package installation scheme "
"in :py:mod:`sysconfig`, will be detected and behave as a Python virtual "
"environment."
msgstr ""
"``pyvenv.cfg`` ファイルがない場合であっても、 (例えばインストール済みの "
"Python ランタイムにパッチを当てる ``sitecustomize.py`` のような) どんなアプ"
"ローチでも、 :py:data:``sys.prefix`` と :py:data:``sys.base_prefix`` が相異な"
"る値を持つような結果となる一方で、依然として対応するパッケージをインストール"
"する枠組みを :py:mod:``sysconfig`` 内で提供するアプローチであれば、それと認識"
"されて Python 仮想環境として振る舞います。"

#: ../source/specifications/virtual-environments.rst:56
msgid "May 2012: This specification was approved through :pep:`405`."
msgstr "2012年5月: :pep:`405` を通じてこの仕様が承認されました。"

#: ../source/specifications/well-known-project-urls.rst:5
#, fuzzy
#| msgid "Pyproject Metadata"
msgid "Well-known Project URLs in Metadata"
msgstr "Pyproject のメタデータ"

#: ../source/specifications/well-known-project-urls.rst:9
msgid ""
"This document is primarily of interest to metadata *consumers*, who should "
"use the normalization rules and well-known list below to make their "
"presentation of project URLs consistent across the Python ecosystem."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:14
msgid ""
"Metadata *producers* (such as build tools and individual package "
"maintainers) may continue to use any labels they please, within the overall "
"``Project-URL`` length restrictions. However, when possible, users are "
"*encouraged* to pick meaningful labels that normalize to well-known labels."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:22
msgid ""
"See :ref:`Writing your pyproject.toml - urls <writing-pyproject-toml-urls>` "
"for user-oriented guidance on choosing project URL labels in your package's "
"metadata."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:26
#, fuzzy
#| msgid ""
#| "This specification was originally defined in :pep:`518` and :pep:`621`."
msgid "This specification was originally defined in :pep:`753`."
msgstr "この仕様は、元々は :pep:`518` 及び :pep:`621` で定義されました。"

#: ../source/specifications/well-known-project-urls.rst:28
msgid ""
":pep:`753` deprecates the :ref:`core-metadata-home-page` and :ref:`core-"
"metadata-download-url` metadata fields in favor of :ref:`core-metadata-"
"project-url`, and defines a normalization and lookup procedure for "
"determining whether a ``Project-URL`` is \"well-known,\" i.e. has the "
"semantics assigned to ``Home-page``, ``Download-URL``, or other common "
"project URLs."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:35
msgid ""
"This allows indices (such as the Python Package Index) and other downstream "
"metadata consumers to present project URLs in a consistent manner."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:42
#, fuzzy
#| msgid "Name normalization"
msgid "Label normalization"
msgstr "名前の正規化"

#: ../source/specifications/well-known-project-urls.rst:46
msgid ""
"Label normalization is performed by metadata *consumers*, not metadata "
"producers."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:49
msgid ""
"To determine whether a ``Project-URL`` label is \"well-known,\" metadata "
"consumers should normalize the label before comparing it to the :ref:`list "
"of well-known labels <well-known-labels>`."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:53
msgid ""
"The normalization procedure for ``Project-URL`` labels is defined by the "
"following Python function:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:65
msgid ""
"In plain language: a label is *normalized* by deleting all ASCII punctuation "
"and whitespace, and then converting the result to lowercase."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:68
msgid ""
"The following table shows examples of labels before (raw) and after "
"normalization:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:74
msgid "Raw"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:75
#, fuzzy
#| msgid "Normalized Names"
msgid "Normalized"
msgstr "正規化された名称"

#: ../source/specifications/well-known-project-urls.rst:76
#, fuzzy
#| msgid "Home-page"
msgid "``Homepage``"
msgstr "Home-page"

#: ../source/specifications/well-known-project-urls.rst:77
#: ../source/specifications/well-known-project-urls.rst:79
#: ../source/specifications/well-known-project-urls.rst:81
#, fuzzy
#| msgid "Home-page"
msgid "``homepage``"
msgstr "Home-page"

#: ../source/specifications/well-known-project-urls.rst:78
#, fuzzy
#| msgid "Home-page"
msgid "``Home-page``"
msgstr "Home-page"

#: ../source/specifications/well-known-project-urls.rst:80
#, fuzzy
#| msgid "Home page"
msgid "``Home page``"
msgstr "ホームページ"

#: ../source/specifications/well-known-project-urls.rst:82
msgid "``Change_Log``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:83
msgid "``changelog``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:84
msgid "``What's New?``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:85
msgid "``whatsnew``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:86
#: ../source/specifications/well-known-project-urls.rst:87
msgid "``github``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:92
msgid "Well-known labels"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:96
msgid ""
"The list of well-known labels is a living standard, maintained as part of "
"this document."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:99
msgid ""
"The following table lists labels that are well-known for the purpose of "
"specializing the presentation of ``Project-URL`` metadata:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:105
msgid "Label (Human-readable equivalent)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:107
msgid "Aliases"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:108
msgid "``homepage`` (Homepage)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:109
msgid "The project's home page"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:110
#: ../source/specifications/well-known-project-urls.rst:116
#: ../source/specifications/well-known-project-urls.rst:122
msgid "*(none)*"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:111
msgid "``source`` (Source Code)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:112
msgid "The project's hosted source code or repository"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:113
msgid "``repository``, ``sourcecode``, ``github``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:114
msgid "``download`` (Download)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:115
msgid ""
"A download URL for the current distribution, equivalent to ``Download-URL``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:117
msgid "``changelog`` (Changelog)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:118
msgid "The project's comprehensive changelog"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:119
msgid "``changes``, ``whatsnew``, ``history``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:120
msgid "``releasenotes`` (Release Notes)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:121
msgid "The project's curated release notes"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:123
#, fuzzy
#| msgid "Creating documentation"
msgid "``documentation`` (Documentation)"
msgstr "説明文書を作成する"

#: ../source/specifications/well-known-project-urls.rst:124
#, fuzzy
#| msgid "Creating documentation"
msgid "The project's online documentation"
msgstr "説明文書を作成する"

#: ../source/specifications/well-known-project-urls.rst:125
#, fuzzy
#| msgid "``upload_docs``"
msgid "``docs``"
msgstr "``upload_docs``"

#: ../source/specifications/well-known-project-urls.rst:126
msgid "``issues`` (Issue Tracker)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:127
msgid "The project's bug tracker"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:128
msgid "``bugs``, ``issue``, ``tracker``, ``issuetracker``, ``bugtracker``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:129
msgid "``funding`` (Funding)"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:130
#, fuzzy
#| msgid "Basic information"
msgid "Funding Information"
msgstr "基本的な情報"

#: ../source/specifications/well-known-project-urls.rst:131
msgid "``sponsor``, ``donate``, ``donation``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:133
msgid ""
"Package metadata consumers may choose to render aliased labels the same as "
"their \"parent\" well known label, or further specialize them."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:137
#, fuzzy
#| msgid "Example"
msgid "Example behavior"
msgstr "例"

#: ../source/specifications/well-known-project-urls.rst:139
msgid ""
"The following shows the flow of project URL metadata from ``pyproject.toml`` "
"to core metadata to a potential index presentation:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:142
msgid "Example project URLs in standard configuration"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:151
#, fuzzy
#| msgid "Core metadata specifications"
msgid "Core metadata representation"
msgstr "コアとなるメタデータの仕様"

#: ../source/specifications/well-known-project-urls.rst:159
msgid "Potential rendering"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:167
msgid ""
"Observe that the core metadata appears in the form provided by the user "
"(since metadata *producers* do not perform normalization), but the metadata "
"*consumer* normalizes and identifies appropriate human-readable equivalents "
"based on the normalized form:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:172
msgid "``Home page`` becomes ``homepage``, which is rendered as ``Homepage``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:173
msgid ""
"``DOCUMENTATION`` becomes ``documentation``, which is rendered as "
"``Documentation``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:174
msgid ""
"``Repository`` becomes ``repository``, which is rendered as ``Source Code``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:175
msgid ""
"``GitHub`` becomes ``github``, which is rendered as ``Source Code (GitHub)`` "
"(as a specialization of ``Source Code``)"
msgstr ""

#: ../source/support.rst:3
msgid "How to Get Support"
msgstr "サポートを得るには"

#: ../source/support.rst:5
msgid ""
"For support related to a specific project, see the links on the :doc:"
"`Projects <key_projects>` page."
msgstr ""
"特定のプロジェクトに関係するサポートについては、 :doc:`プロジェクト群 "
"<key_projects>` のリンク集のページを見てください。"

#: ../source/support.rst:8
msgid ""
"For something more general, or when you're just not sure, please `open an "
"issue <https://github.com/pypa/packaging-problems/issues/new?"
"template=general_issue.yml>`_ on the `packaging-problems <https://github.com/"
"pypa/packaging-problems>`_ repository on GitHub."
msgstr ""
"もっと一般的なサポートを求めている場合や、確信を持てないだけの場合には、"
"GitHub の `パッケージングに関わる問題 <https://github.com/pypa/packaging-"
"problems>`_ の `課題リストに課題を作成する <https://github.com/pypa/"
"packaging-problems/issues/new?template=general_issue.yml>`_ 下さい。"

#: ../source/tutorials/creating-documentation.rst:4
msgid "Creating documentation"
msgstr "説明文書を作成する"

#: ../source/tutorials/creating-documentation.rst:6
msgid ""
"This tutorial has been removed since it is not related to packaging and was "
"unmaintained. Please see the `Sphinx tutorial <https://www.sphinx-doc.org/en/"
"master/tutorial>`_ instead."
msgstr ""
"パッケージングに関連していないことと、維持管理されていないことから、この"
"チュートリアルは取り除かれました。代わりに `Sphinx チュートリアル <https://"
"www.sphinx-doc.org/en/master/tutorial>`_ を見てください。"

#: ../source/tutorials/index.rst:4
msgid ""
"**Tutorials** are opinionated step-by-step guides to help you get familiar "
"with packaging concepts. For more detailed information on specific packaging "
"topics, see :doc:`/guides/index`."
msgstr ""
"**チュートリアル** は、どのようにすれば良いかを指示しながらステップバイステッ"
"プで進めるガイドで、あなたがパッケージングの概念に慣れ親しむのを助けます。"
"パッケージングの特定の話題に関するより詳しい情報については、 :doc:`/guides/"
"index` を見てください。"

#: ../source/tutorials/installing-packages.rst:5
msgid "Installing Packages"
msgstr "パッケージをインストールする"

#: ../source/tutorials/installing-packages.rst:7
msgid ""
"This section covers the basics of how to install Python :term:`packages "
"<Distribution Package>`."
msgstr ""
"この節では、 Python の :term:`パッケージ <Distribution Package>` をインストー"
"ルする方法の基本について示します。"

#: ../source/tutorials/installing-packages.rst:10
msgid ""
"It's important to note that the term \"package\" in this context is being "
"used to describe a bundle of software to be installed (i.e. as a synonym for "
"a :term:`distribution <Distribution Package>`). It does not refer to the "
"kind of :term:`package <Import Package>` that you import in your Python "
"source code (i.e. a container of modules). It is common in the Python "
"community to refer to a :term:`distribution <Distribution Package>` using "
"the term \"package\".  Using the term \"distribution\" is often not "
"preferred, because it can easily be confused with a Linux distribution, or "
"another larger software distribution like Python itself."
msgstr ""
"この文脈では、 \"パッケージ\" という用語が、インストールされるソフトウェアの"
"束を表すものである (すなわち、 :term:`配布物 <Distribution Package>` の同義語"
"である) ことを注記しておくことは重要です。 Python のなんらかのソースコードを"
"インポートする (つまり、モジュール群の) 容れ物としての :term:`パッケージ "
"<Import Package>` のことを指してはいないのです。 Python のコミュニティで"
"は、 :term:`配布物 <Distribution Package>` のことを \"パッケージ\" という用語"
"で呼ぶことは一般的に行われています。 Linux ディストロや、 Python そのもののよ"
"うなその他の大きなソフトウェア配布物と紛らわしいので、 \"配布物\" という用語"
"を使うことはしばしば歓迎されません。"

#: ../source/tutorials/installing-packages.rst:24
msgid "Requirements for Installing Packages"
msgstr "パッケージをインストールするための必須事項"

#: ../source/tutorials/installing-packages.rst:26
msgid ""
"This section describes the steps to follow before installing other Python "
"packages."
msgstr ""
"この節では、その他の Python パッケージをインストールする前にやっておくべきス"
"テップを記します。"

#: ../source/tutorials/installing-packages.rst:31
msgid "Ensure you can run Python from the command line"
msgstr "コマンドラインから Python を起動できることを確認する"

#: ../source/tutorials/installing-packages.rst:33
msgid ""
"Before you go any further, make sure you have Python and that the expected "
"version is available from your command line. You can check this by running:"
msgstr ""
"先へ進む前に、期待通りのバージョンの Python が手元のコマンドラインで動作して"
"いることを確認しておきましょう。つぎのコマンドを実行すれば確認できます:"

#: ../source/tutorials/installing-packages.rst:49
msgid ""
"You should get some output like ``Python 3.6.3``. If you do not have Python, "
"please install the latest 3.x version from `python.org`_ or refer to the :"
"ref:`Installing Python <python-guide:installation>` section of the "
"Hitchhiker's Guide to Python."
msgstr ""
"``Python 3.6.3`` のような応答が出力されるはずです。もし Python がなければ、最"
"新バージョンの 3.x を `python.org`_ からインストールするか、 Python ユーザの"
"ためのヒッチハイクガイドの :ref:`Python をインストールする <python-guide:"
"installation>` の節を参照するか、どちらかをしてください。"

#: ../source/tutorials/installing-packages.rst:53
msgid "If you're a newcomer and you get an error like this:"
msgstr "あなたがまだ慣れていなくて、しかも次のようなエラーに遭遇した場合には:"

#: ../source/tutorials/installing-packages.rst:62
msgid ""
"It's because this command and other suggested commands in this tutorial are "
"intended to be run in a *shell* (also called a *terminal* or *console*). See "
"the Python for Beginners `getting started tutorial`_ for an introduction to "
"using your operating system's shell and interacting with Python."
msgstr ""
"それは、このコマンドや、このチュートリアルに出てくる他のコマンドが、 *シェル"
"* (*ターミナル* とか *コンソール* とも呼ばれます) で動作することを意図してい"
"るからです。オペレーティングシステムのシェルを使って Python とやりとりするた"
"めの導入説明として、初心者のための Python `はじめの第一歩チュートリアル "
"<getting started tutorial`_ を見てください。"

#: ../source/tutorials/installing-packages.rst:68
msgid ""
"If you're using an enhanced shell like IPython or the Jupyter notebook, you "
"can run system commands like those in this tutorial by prefacing them with a "
"``!`` character:"
msgstr ""
"IPython や Jupyter notebook のような拡張されたシェルを使っているのであれば、"
"先頭に ``!`` マークを付けることで、このチュートリアルに出てくるようなシステム"
"コマンドを実行することができます:"

#: ../source/tutorials/installing-packages.rst:78
msgid ""
"It's recommended to write ``{sys.executable}`` rather than plain ``python`` "
"in order to ensure that commands are run in the Python installation matching "
"the currently running notebook (which may not be the same Python "
"installation that the ``python`` command refers to)."
msgstr ""
"現在動作している notebook の Python 実装 (これは ``python`` コマンドが実際に"
"呼び出す Python 実装と同じであるとは限らない) で (投入した) コマンドが動作し"
"ていることを確実にするために、 単に ``python`` と書くのではなく ``{sys."
"executable}`` と書くことを推奨します。"

#: ../source/tutorials/installing-packages.rst:83
msgid ""
"Due to the way most Linux distributions are handling the Python 3 migration, "
"Linux users using the system Python without creating a virtual environment "
"first should replace the ``python`` command in this tutorial with "
"``python3`` and the ``python -m pip`` command with ``python3 -m pip --"
"user``. Do *not* run any of the commands in this tutorial with ``sudo``: if "
"you get a permissions error, come back to the section on creating virtual "
"environments, set one up, and then continue with the tutorial as written."
msgstr ""
"ほとんどの Linux ディストロが Python 3 の移植を扱う方法のせいで、仮想環境を作"
"ること抜きでシステム側の Python を使う Linux ユーザは、まず、このチュートリア"
"ルに出てくる ``python`` コマンドを ``python3`` に、そして、 ``python -m "
"pip`` コマンドを ``python3 -m pip --user`` に置換するべきです。このチュートリ"
"アルに出てくるコマンドを ``sudo`` 付きで実行することは *やめてください*: パー"
"ミッションエラーが発生する場合には、仮想環境の作成の節に戻って仮想環境を作成"
"し、チュートリアルに書かれている通りのやり方で再開してください。"

#: ../source/tutorials/installing-packages.rst:95
msgid "Ensure you can run pip from the command line"
msgstr "コマンドラインから pip を実行できることを確実にする"

#: ../source/tutorials/installing-packages.rst:97
msgid ""
"Additionally, you'll need to make sure you have :ref:`pip` available. You "
"can check this by running:"
msgstr ""
"さらに、 :ref:`pip` コマンドを実行できることを確認しておきましょう。次のコマ"
"ンドで確認できます:"

#: ../source/tutorials/installing-packages.rst:112
msgid ""
"If you installed Python from source, with an installer from `python.org`_, "
"or via `Homebrew`_ you should already have pip. If you're on Linux and "
"installed using your OS package manager, you may have to install pip "
"separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""
"`python.org`_ から持ってきたインストーラや `Homebrew`_ を使って Python をソー"
"スコードからインストールしたのであれば、すでに pip が動作するはずです。 "
"Linux 上で OS のパッケージ管理機構を使ってインストールしたのであれば、 pip を"
"個別にインストールしなければならないかもしれませんが、この場合は :doc:`/"
"guides/installing-using-linux-tools` を見てください。"

#: ../source/tutorials/installing-packages.rst:119
msgid ""
"If ``pip`` isn't already installed, then first try to bootstrap it from the "
"standard library:"
msgstr ""
"まだ ``pip`` がインストールされていなければ、初回は標準ライブラリからブートス"
"トラップしてみてください:"

#: ../source/tutorials/installing-packages.rst:134
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr "それでもまだ ``python -m pip`` を実行できないのであれば:"

#: ../source/tutorials/installing-packages.rst:136
msgid ""
"Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""
"`get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_ をセキュアにダウン"
"ロードする"

#: ../source/tutorials/installing-packages.rst:139
msgid ""
"Run ``python get-pip.py``. [2]_  This will install or upgrade pip. "
"Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're "
"not installed already."
msgstr ""
"``python get-pip.py`` を実行してください [2]_ 。これで pip をインストールまた"
"は更新することができます。さらに、まだインストールされていなければ、 :ref:"
"`setuptools` と :ref:`wheel` もインストールされるでしょう。"

#: ../source/tutorials/installing-packages.rst:145
msgid ""
"Be cautious if you're using a Python install that's managed by your "
"operating system or another package manager. get-pip.py does not coordinate "
"with those tools, and may leave your system in an inconsistent state. You "
"can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/"
"local`` which is designed for locally-installed software."
msgstr ""
"オペレーティングシステムないし他のパッケージ管理機構を使ってインストールした "
"Python を管理しているなら、用心深くあるべきです。 get-pip.py はそのようなツー"
"ル群と協調して動作する訳ではないので、あなたのシステムの一貫性を破壊するかも"
"しれません。ソフトウェアをローカルにインストールするために設計された ``/usr/"
"local`` にインストールするなら ``python get-pip.py --prefix=/usr/local`` を使"
"うことができます。"

#: ../source/tutorials/installing-packages.rst:154
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr "pip ・ setuptools ・ wheel が最新版であることを確実にする"

#: ../source/tutorials/installing-packages.rst:156
msgid ""
"While ``pip`` alone is sufficient to install from pre-built binary archives, "
"up to date copies of the ``setuptools`` and ``wheel`` projects are useful to "
"ensure you can also install from source archives:"
msgstr ""
"``pip`` 単体でも事前にビルドされたバイナリアーカイブからインストールを行うに"
"は十分ですが、最新の ``setuptools`` と ``wheel`` があればソースコードアーカイ"
"ブからでも確実にインストールすることができるので便利です:"

#: ../source/tutorials/installing-packages.rst:173
msgid "Optionally, create a virtual environment"
msgstr "必須ではないが、仮想環境を構築する"

#: ../source/tutorials/installing-packages.rst:175
msgid ""
"See :ref:`section below <Creating and using Virtual Environments>` for "
"details, but here's the basic :doc:`venv <python:library/venv>` [3]_ command "
"to use on a typical Linux system:"
msgstr ""
"詳しいことは、 :ref:`下の節 <Creating and using Virtual Environments>` に出て"
"いますので、ここでは基本的な :doc:`venv <python:library/venv>` [3]_ コマンド"
"を典型的な Linux システムで使うやり方を説明します:"

#: ../source/tutorials/installing-packages.rst:192
msgid ""
"This will create a new virtual environment in the ``tutorial_env`` "
"subdirectory, and configure the current shell to use it as the default "
"``python`` environment."
msgstr ""
"これで新しい仮想環境が ``tutorial_env`` サブディレクトリ内に生成され、それを"
"現在のシェルのデフォルトの ``python`` 環境として使わせることができます。"

#: ../source/tutorials/installing-packages.rst:199
msgid "Creating Virtual Environments"
msgstr "仮想環境を構築する"

#: ../source/tutorials/installing-packages.rst:201
msgid ""
"Python \"Virtual Environments\" allow Python :term:`packages <Distribution "
"Package>` to be installed in an isolated location for a particular "
"application, rather than being installed globally. If you are looking to "
"safely install global command line tools, see :doc:`/guides/installing-stand-"
"alone-command-line-tools`."
msgstr ""
"Python の \"仮想環境\" を使えば、 Python の :term:`パッケージ <Distribution "
"Package>` をグローバルな環境にインストールする代わりに、特定のアプリケーショ"
"ンのための隔離された場所にインストールすることができます。グローバルなコマン"
"ドラインツールを安全にインストールしたいのであれば、 :doc:`/guides/"
"installing-stand-aline-command-line-tools` を見てください。"

#: ../source/tutorials/installing-packages.rst:207
msgid ""
"Imagine you have an application that needs version 1 of LibFoo, but another "
"application requires version 2. How can you use both these applications? If "
"you install everything into /usr/lib/python3.6/site-packages (or whatever "
"your platform’s standard location is), it’s easy to end up in a situation "
"where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""
"手持ちのあるアプリケーションには LibFoo のバージョン 1 が必要で、しかし、別の"
"アプリケーションではバージョン 2 を要求していると想像してみてください。このよ"
"うなアプリケーションを両方同時に使うためにはどうすれば良いでしょうか？あらゆ"
"るものを /usr/lib/python3.6/site-packages (または、あなたが使っているプラット"
"フォームの標準的な置き場所ならどこでも) にインストールするとすれば、容易く、"
"アップグレードするべきでないはずのアプリケーションを意図せずアップグレードし"
"てしまう結果に終わるでしょう。"

#: ../source/tutorials/installing-packages.rst:213
msgid ""
"Or more generally, what if you want to install an application and leave it "
"be? If an application works, any change in its libraries or the versions of "
"those libraries can break the application."
msgstr ""
"あるいは、もっと一般的には、あるアプリケーションをインストールして、そのまま"
"にしておきたいとすればどうでしょう？アプリケーションが動作したとしても、ライ"
"ブラリへの何らかの変更や、ライブラリのバージョン問題でアプリケーションが動作"
"しなくなってしまうかもしれません。"

#: ../source/tutorials/installing-packages.rst:217
msgid ""
"Also, what if you can’t install :term:`packages <Distribution Package>` into "
"the global site-packages directory? For instance, on a shared host."
msgstr ""
"あるいは、グローバルな site-packages ディレクトリに :term:`パッケージ "
"<Distribution Package>` をインストールすることができないとしたら、どうでしょ"
"うか？例えば、共有ホストのような。"

#: ../source/tutorials/installing-packages.rst:220
msgid ""
"In all these cases, virtual environments can help you. They have their own "
"installation directories and they don’t share libraries with other virtual "
"environments."
msgstr ""
"このようなすべての場合において、仮想環境はあなたを助けることができます。仮想"
"環境にはそれぞれのインストール先ディレクトリが別にあって、他の仮想環境とライ"
"ブラリを共有するということがないからです。"

#: ../source/tutorials/installing-packages.rst:224
msgid ""
"Currently, there are two common tools for creating Python virtual "
"environments:"
msgstr ""
"現在、ふたつの Python 仮想環境を構築するためのツールがよく知られています:"

#: ../source/tutorials/installing-packages.rst:226
msgid ""
":doc:`venv <python:library/venv>` is available by default in Python 3.3 and "
"later, and installs :ref:`pip` into created virtual environments in Python "
"3.4 and later (Python versions prior to 3.12 also installed :ref:"
"`setuptools`)."
msgstr ""
":doc:`venv <python:library/venv>` は、 Python 3.3 およびそれ以降のバージョン"
"で本体に同梱されていて利用可能であり、 Python 3.4 およびそれ以降では :ref:"
"`pip` と :ref:`setuptools` を作成された仮想環境内にインストールします (3.12 "
"以前の Python のバージョンは :ref:`setuptools` もインストールしていました) 。"

#: ../source/tutorials/installing-packages.rst:229
#, fuzzy
#| msgid ""
#| ":ref:`virtualenv` needs to be installed separately, but supports Python "
#| "2.7+ and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` "
#| "are always installed into created virtual environments by default "
#| "(regardless of Python version)."
msgid ""
":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ "
"and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are "
"installed into created virtual environments by default. Note that "
"``setuptools`` is no longer included by default starting with Python 3.12 "
"(and ``virtualenv`` follows this behavior)."
msgstr ""
":ref:`virtualenv` は別途インストールする必要がありますが、 Python 2.7+ と "
"Python 3.3+ をサポートしており、 :ref:`pip` ・ :ref:`setuptools` ・ :ref:"
"`wheel` を作成された仮想環境に常にデフォルト (Python のバージョンに関係なく) "
"でインストールします。"

#: ../source/tutorials/installing-packages.rst:234
msgid "The basic usage is like so:"
msgstr "基本的な使い方は次の通りです:"

#: ../source/tutorials/installing-packages.rst:236
msgid "Using :doc:`venv <python:library/venv>`:"
msgstr ":doc:`venv <python:library/venv>` を使うと:"

#: ../source/tutorials/installing-packages.rst:252
msgid "Using :ref:`virtualenv`:"
msgstr ":ref:`virtualenv` を使うと:"

#: ../source/tutorials/installing-packages.rst:268
msgid ""
"For more information, see the :doc:`venv <python:library/venv>` docs or the :"
"doc:`virtualenv <virtualenv:index>` docs."
msgstr ""
"さらなる説明は、 :doc:`venv <python:library/venv>` の説明文書や :doc:"
"`virtualenv <virtualenv:index>` の説明文書をみてください。"

#: ../source/tutorials/installing-packages.rst:271
msgid ""
"The use of :command:`source` under Unix shells ensures that the virtual "
"environment's variables are set within the current shell, and not in a "
"subprocess (which then disappears, having no useful effect)."
msgstr ""
"UNIX のシェル上で :command:`source` を使うとそのシェル内では仮想環境用の変数"
"が設定されますが、サブシェルでは設定され (ず、役に立つ効果が残り) ません。"

#: ../source/tutorials/installing-packages.rst:276
msgid ""
"In both of the above cases, Windows users should *not* use the :command:"
"`source` command, but should rather run the :command:`activate` script "
"directly from the command shell like so:"
msgstr ""
"上記のいずれの場合でも、 Windows ユーザは :command:`source` コマンドを使うべ"
"き *ではなく* 、代わりに :command:`activate` スクリプトをコマンドシェルから直"
"接に実行するべきで、例えば次のようにします:"

#: ../source/tutorials/installing-packages.rst:286
msgid ""
"Managing multiple virtual environments directly can become tedious, so the :"
"ref:`dependency management tutorial <managing-dependencies>` introduces a "
"higher level tool, :ref:`Pipenv`, that automatically manages a separate "
"virtual environment for each project and application that you work on."
msgstr ""
"複数の仮想環境をそのままで管理することはうんざりする作業になりがちなので、 :"
"ref:`依存関係を管理するためのチュートリアル <managing-dependencies>` では、よ"
"り抽象度の高いツール :ref:`Pipenv` を使ってプロジェクトやアプリケーションのそ"
"れぞれのために作成した個別の仮想環境群を自動的に管理する方法を紹介していま"
"す。"

#: ../source/tutorials/installing-packages.rst:293
msgid "Use pip for Installing"
msgstr "pip を使ってインストールする"

#: ../source/tutorials/installing-packages.rst:295
msgid ""
":ref:`pip` is the recommended installer.  Below, we'll cover the most common "
"usage scenarios. For more detail, see the :doc:`pip docs <pip:index>`, which "
"includes a complete :doc:`Reference Guide <pip:cli/index>`."
msgstr ""
":ref:`pip` は推奨されているインストーラです。以下に最もよくある使用シナリオを"
"挙げます。より詳しくは、 :doc:`リファレンスガイド <pip:cli/index>` の全体を含"
"む :doc:`pip 説明文書 <pip:index>` を見てください。"

#: ../source/tutorials/installing-packages.rst:301
msgid "Installing from PyPI"
msgstr "PyPI からインストールする"

#: ../source/tutorials/installing-packages.rst:303
msgid ""
"The most common usage of :ref:`pip` is to install from the :term:`Python "
"Package Index <Python Package Index (PyPI)>` using a :term:`requirement "
"specifier <Requirement Specifier>`. Generally speaking, a requirement "
"specifier is composed of a project name followed by an optional :term:"
"`version specifier <Version Specifier>`.  A full description of the "
"supported specifiers can be found in the :ref:`Version specifier "
"specification <version-specifiers>`. Below are some examples."
msgstr ""
":ref:`pip` の最もよくある使い方は、 :term:`要求事項指定子 <Requirement "
"Specifier>` を用いて :term:`Python パッケージインデックス <Python Package "
"Index (PyPI)>` からインストールすることです。一般的には、要求事項識別子は、プ"
"ロジェクト名と後続する省略可能な :term:`バージョン指定子 <Version "
"Specifier>` で構成されています。 :ref:`バージョン指定子仕様 <version-"
"specifiers>` に、サポートされている識別子の完全な説明があります。以下にいくつ"
"かの例を挙げます。"

#: ../source/tutorials/installing-packages.rst:311
msgid "To install the latest version of \"SomeProject\":"
msgstr "\"とあるプロジェクト\" の最新版をインストールするには:"

#: ../source/tutorials/installing-packages.rst:325
msgid "To install a specific version:"
msgstr "特定のバージョンをインストールするには:"

#: ../source/tutorials/installing-packages.rst:339
msgid "To install greater than or equal to one version and less than another:"
msgstr ""
"あるバージョンと同じか新しいバージョンで、もう一つのものより古いものをインス"
"トールするには:"

#: ../source/tutorials/installing-packages.rst:354
msgid ""
"To install a version that's :ref:`compatible <version-specifiers-compatible-"
"release>` with a certain version: [4]_"
msgstr ""
"あるバージョンと :ref:`\"互換性がある\" <version-specifiers-compatible-"
"release>` バージョンをインストールするには: [4]_"

#: ../source/tutorials/installing-packages.rst:369
msgid ""
"In this case, this means to install any version \"==1.4.*\" version that's "
"also \">=1.4.2\"."
msgstr ""
"この場合には、 \"==1.4.*\" で、かつ、 \">=1.4.2\" であるバージョンをインス"
"トールするという意味になります。"

#: ../source/tutorials/installing-packages.rst:374
msgid "Source Distributions vs Wheels"
msgstr "ソースコード配布物 vs. Wheels"

#: ../source/tutorials/installing-packages.rst:376
msgid ""
":ref:`pip` can install from either :term:`Source Distributions (sdist) "
"<Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both "
"are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You "
"can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:"
"install_--no-binary>` option."
msgstr ""
":ref:`pip` は、 :term:`ソースコード配布物 (sdist) <Source Distribution (or "
"\"sdist\")>` または :term:`Wheels <Wheel>` のどちらからでもインストールするこ"
"とができますが、両方が PyPI に存在している場合には pip は互換性のある :term:"
"`wheel <Wheel>` を選好します。例えば :ref:`--no-binary <pip:install_--no-"
"binary>` オプションを使うことで pip のデフォルト動作を上書き修正することがで"
"きます。"

#: ../source/tutorials/installing-packages.rst:382
msgid ""
":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution "
"Package>` format that provides faster installation compared to :term:`Source "
"Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when "
"a project contains compiled extensions."
msgstr ""
":term:`Wheels <Wheel>` は、ビルド済みの :term:`配布物 <Distribution "
"Package>` フォーマットで、特にプロジェクトがコンパイル済み拡張を含んでいる場"
"合には、 :term:`ソースコード配布物 (sdist) <Source Distribution (or "
"\"sdist\")>` に比べてより短時間でインストールすることができます。"

#: ../source/tutorials/installing-packages.rst:387
msgid ""
"If :ref:`pip` does not find a wheel to install, it will locally build a "
"wheel and cache it for future installs, instead of rebuilding the source "
"distribution in the future."
msgstr ""
":ref:`pip` がインストールするべき wheel を発見できなかった場合には、手元で "
"wheel をビルドして、将来のインストール時に再びソースコード配布物からリビルド"
"しないで済むようにキャッシュしておきます。"

#: ../source/tutorials/installing-packages.rst:395
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""
"インストール済みの ``とあるプロジェクト`` を PyPI から最新版に更新する。"

#: ../source/tutorials/installing-packages.rst:412
msgid "Installing to the User Site"
msgstr "ユーザサイトへインストールする"

#: ../source/tutorials/installing-packages.rst:414
msgid ""
"To install :term:`packages <Distribution Package>` that are isolated to the "
"current user, use the ``--user`` flag:"
msgstr ""
":term:`パッケージ <Distribution Package>` を現在のユーザだけが使えるように他"
"から隔離してインストールするには ``--user`` フラグを使います:"

#: ../source/tutorials/installing-packages.rst:429
msgid ""
"For more information see the `User Installs <https://pip.pypa.io/en/latest/"
"user_guide/#user-installs>`_ section from the pip docs."
msgstr ""
"もっと詳しい情報を知りたければ、pip 説明文書の `ユーザ限定のインストール "
"<https://pip.pypa.io/en/latest/user_guide/#user-installs>`_ の節を見てくださ"
"い。"

#: ../source/tutorials/installing-packages.rst:433
msgid ""
"Note that the ``--user`` flag has no effect when inside a virtual "
"environment - all installation commands will affect the virtual environment."
msgstr ""
"仮想環境の中では ``--user`` フラグが無効になることに注意してください - すべて"
"のインストールコマンドが仮想環境に影響を与えます。"

#: ../source/tutorials/installing-packages.rst:436
msgid ""
"If ``SomeProject`` defines any command-line scripts or console entry points, "
"``--user`` will cause them to be installed inside the `user base`_'s binary "
"directory, which may or may not already be present in your shell's :envvar:"
"`PATH`.  (Starting in version 10, pip displays a warning when installing any "
"scripts to a directory outside :envvar:`PATH`.)  If the scripts are not "
"available in your shell after installation, you'll need to add the directory "
"to your :envvar:`PATH`:"
msgstr ""
"``とあるプロジェクト`` がコマンドラインスクリプトかコンソールエントリポイント"
"をひとつでも定義しているのであれば、 ``--user`` を与えることで 、 `ユーザベー"
"ス <user base>`_ のバイナリ置き場、それがシェルの :envvar:`PATH` 変数にあろう"
"がなかろうが、そこにインストールすることになるでしょう (バージョン 10 以降の "
"pip では、スクリプトを :envvar:`PATH` に含まれていないパスにインストールする"
"時には警告を表示します)。インストール後にスクリプトが利用可能でない場合に"
"は、 :envvar:`PATH` にそのディレクトリパスを追加する必要があるでしょう:"

#: ../source/tutorials/installing-packages.rst:444
msgid ""
"On Linux and macOS you can find the user base binary directory by running "
"``python -m site --user-base`` and adding ``bin`` to the end. For example, "
"this will typically print ``~/.local`` (with ``~`` expanded to the absolute "
"path to your home directory) so you'll need to add ``~/.local/bin`` to your "
"``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""
"Linux や macOS 上では、 ``python -m site --user-base`` を実行した結果の末尾"
"に ``bin`` を追加すれば、ユーザベースのバイナリ置き場となるディレクトリがどこ"
"であるかがわかるでしょう。例えば、このコマンドは大抵の場合に ``~/.local`` "
"(の ``~`` をあなたのホームディレクトリの絶対パスに展開したもの) を表示します"
"が、すると、 ``PATH`` には ``~/.local/bin`` を追加する必要があるということで"
"す。 `~/.profile を修正する <modifying ~/.profile>`_ ことで ``PATH`` を恒久的"
"に変更することができます。"

#: ../source/tutorials/installing-packages.rst:450
msgid ""
"On Windows you can find the user base binary directory by running ``py -m "
"site --user-site`` and replacing ``site-packages`` with ``Scripts``. For "
"example, this could return ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would "
"need to set your ``PATH`` to include ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your "
"user ``PATH`` permanently in the `Control Panel`_. You may need to log out "
"for the ``PATH`` changes to take effect."
msgstr ""
"Windows 上では、 ``py -m site --user-site`` の結果について ``site-packages`` "
"を ``Scripts`` で置き換えればユーザベースのバイナリ置き場となるディレクトリを"
"見つけることができるでしょう。このコマンドは例えば ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` のような結果を"
"返すので、 ``PATH`` に ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts`` が含まれるようにする"
"必要があるでしょう。 `Control Panel`_ で恒久的に ``PATH`` を設定することがで"
"きるでしょう。 ``PATH`` の修正が効果を持つには、一旦ログアウトする必要がある"
"かもしれません。"

#: ../source/tutorials/installing-packages.rst:466
msgid ""
"Install a list of requirements specified in a :ref:`Requirements File <pip:"
"Requirements Files>`."
msgstr ""
":ref:`Requirements ファイル <pip:Requirements Files>` で指定された一連の必須"
"条件となる依存先をインストールしましょう。"

#: ../source/tutorials/installing-packages.rst:482
msgid "Installing from VCS"
msgstr "VCS からインストールする"

#: ../source/tutorials/installing-packages.rst:484
msgid ""
"Install a project from VCS in \"editable\" mode.  For a full breakdown of "
"the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"プロジェクトを VCS から \"編集可能\" モードでインストールしましょう。この構文"
"を全て細かく説明したものについては、 :ref:`VCS サポート <pip:VCS Support>` "
"の pip の節を見てください。"

#: ../source/tutorials/installing-packages.rst:506
msgid "Installing from other Indexes"
msgstr "他のインデックスサイトからインストールする"

#: ../source/tutorials/installing-packages.rst:508
msgid "Install from an alternate index"
msgstr "代替となるインデックスサイトからインストールする"

#: ../source/tutorials/installing-packages.rst:522
msgid ""
"Search an additional index during install, in addition to :term:`PyPI "
"<Python Package Index (PyPI)>`"
msgstr ""
":term:`PyPI <Python Package Index (PyPI)>` に加えて、追加のインデックスサイト"
"をインストール中に探索する"

#: ../source/tutorials/installing-packages.rst:538
msgid "Installing from a local src tree"
msgstr "ローカルのソースツリーからインストールする"

#: ../source/tutorials/installing-packages.rst:541
msgid ""
"Installing from local src in :doc:`Development Mode <setuptools:userguide/"
"development_mode>`, i.e. in such a way that the project appears to be "
"installed, but yet is still editable from the src tree."
msgstr ""
":doc:`開発モード <setuptools:userguide/development_mode>` 、すなわち、プロ"
"ジェクトがインストールされていて、しかも、ソースツリーからへんしゅうかのうで"
"あるような方法でローカルのソースツリーからインストールすること。"

#: ../source/tutorials/installing-packages.rst:558
msgid "You can also install normally from src"
msgstr "ソースツリーから通常通りにインストールすることも可能"

#: ../source/tutorials/installing-packages.rst:573
msgid "Installing from local archives"
msgstr "ローカルアーカイブからインストールする"

#: ../source/tutorials/installing-packages.rst:575
msgid "Install a particular source archive file."
msgstr "特定のソースコードアーカイブファイルをインストールする。"

#: ../source/tutorials/installing-packages.rst:589
msgid ""
"Install from a local directory containing archives (and don't check :term:"
"`PyPI <Python Package Index (PyPI)>`)"
msgstr ""
"アーカイブを含んだローカルのディレクトリから(しかも :term:`PyPI <Python "
"Package Index (PyPI)>` をチェックしないで)インストールする"

#: ../source/tutorials/installing-packages.rst:609
msgid "Installing from other sources"
msgstr "他の場所からインストールする"

#: ../source/tutorials/installing-packages.rst:611
msgid ""
"To install from other data sources (for example Amazon S3 storage) you can "
"create a helper application that presents the data in a format compliant "
"with the :ref:`simple repository API <simple-repository-api>`:, and use the "
"``--extra-index-url`` flag to direct pip to use that index."
msgstr ""
":ref:`simple repository API <simple-repository-api>` 準拠のフォーマットに合わ"
"せてデータを表現するようなヘルパーアプリケーションを作成して、 pip を ``--"
"extra-index-url`` フラグでそのインデックスへ向け直すことで、他のデータソース "
"(例えば Amazon S3 ストレージ) からインストールすることができます。"

#: ../source/tutorials/installing-packages.rst:623
msgid "Installing Prereleases"
msgstr "リリース前のバージョンをインストールする"

#: ../source/tutorials/installing-packages.rst:625
msgid ""
"Find pre-release and development versions, in addition to stable versions.  "
"By default, pip only finds stable versions."
msgstr ""
"安定バージョンに加えて、リリース前のバージョンや開発中のバージョンを見つけま"
"しょう。デフォルトでは pip は安定バージョンだけを探索します。"

#: ../source/tutorials/installing-packages.rst:641
msgid "Installing \"Extras\""
msgstr "パッケージの \"Extras\" をインストールする"

#: ../source/tutorials/installing-packages.rst:643
msgid ""
"Extras are optional \"variants\" of a package, which may include additional "
"dependencies, and thereby enable additional functionality from the package.  "
"If you wish to install an extra for a package which you know publishes one, "
"you can include it in the pip installation command:"
msgstr ""
"Extras は、パッケージのオプション的な \"変種\" で、追加的な依存先を加えること"
"も可能であり、従って、パッケージの追加的な機能を有効化することができるもので"
"す。もし、one なる機能を追加するとわかっているパッケージの追加部分 (extra) を"
"インストールしたいのであれば、次のような pip のインストールコマンドを使うこと"
"でそれを追加することができます:"

#: ../source/tutorials/installing-packages.rst:666
msgid ""
"\"Secure\" in this context means using a modern browser or a tool like :"
"command:`curl` that verifies SSL certificates when downloading from https "
"URLs."
msgstr ""
"この文脈での \"Secure\" とは、https の付く URL からダウンロードする際に、近代"
"的なブラウザか :command:`curl` のようなツールを使って SSL 証明書を検証するこ"
"とを意味しています。"

#: ../source/tutorials/installing-packages.rst:675
msgid ""
"Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:"
"`virtualenv`) will create virtualenv environments with ``pip`` pre-"
"installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""
"Python 3.4 以降は (:ref:`virtualenv` の代替物で標準ライブラリに取り込まれた) "
"``venv``があるので、インストール済みの ``pip`` で virtualenv 環境を作成でき、"
"それによって :ref:`virtualenv` の同等な代替物となっています。"

#: ../source/tutorials/installing-packages.rst:680
msgid ""
"The compatible release specifier was accepted in :pep:`440` and support was "
"released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""
"互換性のあるリリース指定子は :pep:`440` で受容され、そのサポートが :ref:"
"`setuptools` v8.0 と :ref:``pip` v6.0 でリリースされました"

#: ../source/tutorials/managing-dependencies.rst:4
msgid "Managing Application Dependencies"
msgstr "アプリケーションの依存関係を管理する"

#: ../source/tutorials/managing-dependencies.rst:6
msgid ""
"The :ref:`package installation tutorial <installing-packages>` covered the "
"basics of getting set up to install and update Python packages."
msgstr ""
":ref:`パッケージインストールに関するチュートリアル <installing-packages>` に"
"は、 Python のパッケージをインストールしたり更新したりするための準備の基本が"
"説明されています。"

#: ../source/tutorials/managing-dependencies.rst:9
msgid ""
"However, running these commands interactively can get tedious even for your "
"own personal projects, and things get even more difficult when trying to set "
"up development environments automatically for projects with multiple "
"contributors."
msgstr ""
"しかしながら、これらのコマンドを対話形式で実行することは、自分自身の個人的な"
"プロジェクト向けであってもうんざりする作業になりかねないし、複数の貢献者が参"
"加するようなプロジェクト向けに開発環境を自動的に設定することを試みる場合には"
"もっと困難にさえなるでしょう。"

#: ../source/tutorials/managing-dependencies.rst:13
msgid ""
"This tutorial walks you through the use of :ref:`Pipenv` to manage "
"dependencies for an application. It will show you how to install and use the "
"necessary tools and make strong recommendations on best practices."
msgstr ""
"このチュートリアルでは、 :ref:`Pipenv` を使ってアプリケーションの依存関係を管"
"理する方法について一通り見て回ります。必要なツール群のインストールの仕方もお"
"見せしますし、ベストプラクティスについても強い推奨をします。"

#: ../source/tutorials/managing-dependencies.rst:17
msgid ""
"Keep in mind that Python is used for a great many different purposes, and "
"precisely how you want to manage your dependencies may change based on how "
"you decide to publish your software. The guidance presented here is most "
"directly applicable to the development and deployment of network services "
"(including web applications), but is also very well suited to managing "
"development and testing environments for any kind of project."
msgstr ""
"覚えておいてもらいたいのは、 Python が極めて多岐に渡る目的に使用されるという"
"ことと、あなたが自分のソフトウェアを公開するやり方によって依存関係を管理する"
"正確なやり方が変化するであろうということです。ここに書かれているガイダンス"
"は、ネットワークサービス (web アプリケーションを含む) の開発やデプロイメント"
"には最も直接的に適用できますが、どんな種類のプロジェクトであってもその開発や"
"試験のための環境を管理するのにとても適切であると言えるでしょう。"

#: ../source/tutorials/managing-dependencies.rst:24
msgid ""
"For alternatives, see `Other Tools for Application Dependency Management`_."
msgstr ""
"他の手段については、 `アプリケーションの依存関係管理のための他のツール群 "
"<Other Tools for Application Dependency Management>`_ を見てください。"

#: ../source/tutorials/managing-dependencies.rst:27
msgid "Installing Pipenv"
msgstr "Pipenv をインストールする"

#: ../source/tutorials/managing-dependencies.rst:29
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit "
"to those tools. While :ref:`pip` alone is often sufficient for personal use, "
"Pipenv is recommended for collaborative projects as it's a higher-level tool "
"that simplifies dependency management for common use cases."
msgstr ""
":ref:`Pipenv` は Python のプロジェクトの依存関係を管理するツールです。 Node."
"js での `npm`_ や Ruby の `bundler`_ を知っているなら、意図するところはこれら"
"のツールと同じです。個人で使う分には :ref:`pip` さえあれば十分であることが多"
"いですが、共同作業を伴うプロジェクトでは、多くのユースケースにおいて依存関係"
"管理を単純化する上位のツールとして Pipenv が推奨されています。"

#: ../source/tutorials/managing-dependencies.rst:35
msgid "Use ``pip`` to install Pipenv:"
msgstr "``pip`` を使って Pipenv をインストールする:"

#: ../source/tutorials/managing-dependencies.rst:51
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation, "
"you'll need to add the :py:data:`user base <python:site.USER_BASE>`'s binary "
"directory to your ``PATH``. See :ref:`Installing to the User Site` for more "
"information."
msgstr ""
"これは、システムワイドにインストールされたパッケージ群を破壊しないように、 `"
"ユーザインストール <user installation>`_ を行います。インストール後にシェルか"
"ら ``pipenv`` が利用できない場合は、 :py:data:`ユーザベース <python:site."
"USER_BASE>` のバイナリディレクトリを ``PATH`` 変数に追加する必要があるでしょ"
"う。詳しくは、 :ref:`ユーザサイトにインストールする <Installing to the User "
"Site>` を見てください。"

#: ../source/tutorials/managing-dependencies.rst:62
msgid "Installing packages for your project"
msgstr "プロジェクト用にパッケージをインストールする"

#: ../source/tutorials/managing-dependencies.rst:64
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this "
"tutorial) and run:"
msgstr ""
"Pipenv は、プロジェクト毎に依存関係を管理します。パッケージをインストールする"
"には、まずプロジェクト (このチュートリアル用にはからのディレクトリへ行けば十"
"分) のディレクトリへ行って、以下のコマンドを実行してください:"

#: ../source/tutorials/managing-dependencies.rst:73
msgid ""
"Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you "
"in your project's directory. The :ref:`Pipfile` is used to track which "
"dependencies your project needs in case you need to re-install them, such as "
"when you share your project with others. You should get output similar to "
"this (although the exact paths shown will vary):"
msgstr ""
"Pipenv は、 `Requests`_ ライブラリをインストールし、プロジェクトのディレクト"
"リに ``Pipfile`` を作成するでしょう。 :ref:`Pipfile` は、そのプロジェクトを共"
"有している場合などのように、再インストールが必要な時にそのプロジェクトが必要"
"とする依存関係を追跡するために使われます。 (正確なディレクトリパスは変化する"
"としても) これに似た出力が表示されるべきです:"

#: ../source/tutorials/managing-dependencies.rst:109
msgid "Using installed packages"
msgstr "インストール済みのパッケージを使う"

#: ../source/tutorials/managing-dependencies.rst:111
msgid ""
"Now that Requests is installed you can create a simple :file:`main.py` file "
"to use it:"
msgstr ""
"今や、Requests がインストールされたので、それを使うために単純な :file:`main."
"py` ファイルを作成しましょう:"

#: ../source/tutorials/managing-dependencies.rst:122
msgid "Then you can run this script using ``pipenv run``:"
msgstr "続いて ``pipenv run`` を使ってこのスクリプトを走らせます:"

#: ../source/tutorials/managing-dependencies.rst:128
msgid "You should get output similar to this:"
msgstr "大体こんな感じの出力が得られるはずです:"

#: ../source/tutorials/managing-dependencies.rst:134
msgid ""
"Using ``pipenv run`` ensures that your installed packages are available to "
"your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``pipenv shell``."
msgstr ""
"``pipenv run`` を使うことで、インストール済みのパッケージを確実にスクリプトか"
"ら利用できるようになります。``pipenv shell`` で新しいシェルを立ち上げれば、あ"
"らゆるコマンドからインストール済みパッケージへのアクセスが保証されます。"

#: ../source/tutorials/managing-dependencies.rst:140
#: ../source/tutorials/packaging-projects.rst:484
msgid "Next steps"
msgstr "次なる一歩"

#: ../source/tutorials/managing-dependencies.rst:142
msgid ""
"Congratulations, you now know how to effectively manage dependencies and "
"development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""
"おめでとう、今やあなたは、共同作業を必要とする Python プロジェクトにおいて、"
"依存関係や開発環境を効率良く管理する方法をご存知です！✨ 🍰 ✨"

#: ../source/tutorials/managing-dependencies.rst:145
msgid ""
"If you're interested in creating and distributing your own Python packages, "
"see the :ref:`tutorial on packaging and distributing packages <distributing-"
"packages>`."
msgstr ""
"自分で Python パッケージを作成したり配布したりすることに興味があるなら、 :"
"ref:`パッケージングとパッケージ配布のためのチュートリアル <distributing-"
"packages>` を見てください。"

#: ../source/tutorials/managing-dependencies.rst:148
msgid ""
"Note that when your application includes definitions of Python source "
"packages, they (and their dependencies) can be added to your ``pipenv`` "
"environment with ``pipenv install -e <relative-path-to-source-directory>`` "
"(e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""
"あなたのアプリケーションが Python ソースコードパッケージの定義を含んでいる場"
"合には、 ``pipenv install -e <relative-path-to-source-directory>`` (例えば "
"``pipenv install -e .`` や ``pipenv install -e src``) によって、 (その依存先"
"も含めて) それがあなたの ``pipenv`` 環境にインストールされ得ることに注意して"
"ください。"

#: ../source/tutorials/managing-dependencies.rst:157
msgid "Other Tools for Application Dependency Management"
msgstr "アプリケーションの依存関係管理のためのその他のツール"

#: ../source/tutorials/managing-dependencies.rst:159
msgid ""
"If you find this particular approach to managing application dependencies "
"isn't working well for you or your use case, you may want to explore these "
"other tools and techniques, listed in alphabetical order, to see if one of "
"them is a better fit:"
msgstr ""
"アプリケーションの依存関係管理で、あなたのユースケースではこの特定のアプロー"
"チがあまりうまく働かないことがわかったならば、この後にアルファベット順に列挙"
"する他のツール群やテクニックがより上手く使えるかどうか試してみたくなるかもし"
"れません:"

#: ../source/tutorials/managing-dependencies.rst:163
msgid ""
"`hatch <https://github.com/pypa/hatch>`_ for opinionated coverage of even "
"more steps in the project management workflow, such as incrementing versions "
"and creating new skeleton projects from project templates."
msgstr ""
"`hatch <https://github.com/pypa/hatch>`_ は、プロジェクト管理のワークフローに"
"おいて、バージョン番号の増やし方やテンプレートから新しいスケルトンプロジェク"
"トを作成するやり方など、ステップ数は増えてもこだわりのあるやり方でやろうとす"
"るツールです。"

#: ../source/tutorials/managing-dependencies.rst:166
msgid ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ for a "
"lightweight wrapper around pip that supports ``requirements.txt``, Pipenv "
"and Poetry lock files, or converting them to pip-tools compatible output. "
"Designed for containerized Python applications, but not limited to them."
msgstr ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ は、 pip に対す"
"る軽量のラッパで ``requirements.txt`` や Pipenv や Poetry のロックファイル、"
"あるいはそれらを pip ツールと互換性のある形への変換出力をサポートするツールで"
"す。コンテナ化された Python アプリケーションのために設計されましたが、用途は"
"それに限りません。"

#: ../source/tutorials/managing-dependencies.rst:170
msgid ""
"`PDM <https://github.com/pdm-project/pdm>`_ for a modern Python package "
"management relying on standards such as :pep:`517` and :pep:`621`."
msgstr ""
"`PDM <https://github.com/pdm-project/pdm>`_ は、 :pep:`517` や :pep:`621` の"
"ような標準に立脚した近代的な Python パッケージ管理ツールです。"

#: ../source/tutorials/managing-dependencies.rst:172
msgid ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ for creating a lock "
"file of all dependencies from a list of packages directly used in a project, "
"and ensuring that only those dependencies are installed."
msgstr ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ は、プロジェクト内で直接"
"使われているパッケージのリストから全ての依存関係のロックファイルを生成する"
"ツールで、依存関係に現れるものだけがインストールされていることを保証します。"

#: ../source/tutorials/managing-dependencies.rst:175
msgid ""
"`Poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable "
"in scope to Pipenv that focuses more directly on use cases where the project "
"being managed is structured as a distributable Python package with a valid "
"``pyproject.toml`` file. By contrast, Pipenv explicitly avoids making the "
"assumption that the application being worked on will support distribution as "
"a ``pip``-installable Python package."
msgstr ""
"`Poetry <https://github.com/python-poetry/poetry>`__ は、そのカバーする範囲と"
"いう点で Pipenv と互換性のあるツールで、 ``pyproject.toml`` ファイルを使った"
"配布可能な Python パッケージとしてプロジェクト管理のユースケースが構成されて"
"いる場合にもっと直接に使用することに焦点を当てたものです。これとは対照的に、 "
"Pipenv は明示的に、 (開発) 作業中のアプリケーションが ``pip`` でインストール"
"可能な Python パッケージとしての配布をサポートしているという仮定を置くことを"
"避けています。"

#: ../source/tutorials/managing-dependencies.rst:180
msgid ""
"`uv <https://docs.astral.sh/uv/>`__ for a single tool that covers the entire "
"project management workflow, including dependency management, packaging, and "
"publishing."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:2
msgid "Packaging Python Projects"
msgstr "Python のプロジェクトをパッケージングする"

#: ../source/tutorials/packaging-projects.rst:4
msgid ""
"This tutorial walks you through how to package a simple Python project. It "
"will show you how to add the necessary files and structure to create the "
"package, how to build the package, and how to upload it to the Python "
"Package Index (PyPI)."
msgstr ""
"このチュートリアルでは、簡単な Python プロジェクトをどのようにしてパッケージ"
"するのかについて、一通り見て回ります。パッケージを構成するために必要なファイ"
"ルやディレクトリを追加する方法や、パッケージをビルドする方法、そして、Python "
"パッケージインデックス (PyPI) にパッケージをアップロードする方法をお見せしま"
"す。"

#: ../source/tutorials/packaging-projects.rst:10
msgid ""
"If you have trouble running the commands in this tutorial, please copy the "
"command and its output, then `open an issue`_ on the `packaging-problems`_ "
"repository on GitHub. We'll do our best to help you!"
msgstr ""
"このチュートリアルに出てくるコマンドを実行したら問題が発生したという場合に"
"は、コマンドと結果出力をコピーして、 GitHub の `packaging-problems`_ リポジト"
"リで `新たな課題 <open an issue>`_ を追加してください。我々が全力であなたをお"
"助けします！"

#: ../source/tutorials/packaging-projects.rst:18
msgid ""
"Some of the commands require a newer version of :ref:`pip`, so start by "
"making sure you have the latest version installed:"
msgstr ""
"コマンドの中のいくつかは新しめのバージョンの :ref:`pip` でないとだめなので、"
"最新版をインストールして使っていることを最初に確認しておいてください:"

#: ../source/tutorials/packaging-projects.rst:35
msgid "A simple project"
msgstr "単純なプロジェクト"

#: ../source/tutorials/packaging-projects.rst:37
msgid ""
"This tutorial uses a simple project named "
"``example_package_YOUR_USERNAME_HERE``. If your username is ``me``, then the "
"package would be ``example_package_me``; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial. We recommend following this tutorial as-is using "
"this project, before packaging your own project."
msgstr ""
"このチュートリアルは、 ``example_package_YOUR_USERNAME_HERE`` という名前の単"
"純なプロジェクトを使っています。もしあなたのユーザ名が ``me`` であるなら、"
"パッケージの名前は ``example_package_me`` となるでしょう; こうすることで、こ"
"のチュートリアルに従っている他の人たちがアップロードするパッケージ群と名前が"
"衝突することのない一意なパッケージ名を使っていることを保証できます。自分自身"
"のプロジェクトのパッケージングを始める前に、このプロジェクト名を使ってこの"
"チュートリアルに沿った練習をすることをお勧めします。"

#: ../source/tutorials/packaging-projects.rst:44
msgid "Create the following file structure locally:"
msgstr "ローカルに以下のファイル構造を作成する:"

#: ../source/tutorials/packaging-projects.rst:54
msgid ""
"The directory containing the Python files should match the project name. "
"This simplifies the configuration and is more obvious to users who install "
"the package."
msgstr ""
"Python ファイル群を格納するディレクトリは、プロジェクト名と同じ名前であるべき"
"です。こうすることで設定が簡単になり、また、パッケージをインストールするユー"
"ザから見てより明白になります。"

#: ../source/tutorials/packaging-projects.rst:57
msgid ""
"Creating the file :file:`__init__.py` is recommended because the existence "
"of an :file:`__init__.py` file allows users to import the directory as a "
"regular package, even if (as is the case in this tutorial) :file:`__init__."
"py` is empty. [#namespace-packages]_"
msgstr ""
":file:`__init__.py` ファイルを使用して、ユーザーはディレクトリを通常のパッ"
"ケージとしてインポートできるため、 (このチュートリアルの場合のように) たと"
"え :file:`__init__.py` が空だとしても、 :file:`__init__.py` ファイルの作成が"
"推奨されています。 [#namespace-packages]_"

#: ../source/tutorials/packaging-projects.rst:62
msgid ""
":file:`example.py` is an example of a module within the package that could "
"contain the logic (functions, classes, constants, etc.) of your package. "
"Open that file and enter the following content:"
msgstr ""
":file:`example.py` は、パッケージの中であなたのパッケージのロジック (関数・ク"
"ラス・定数・その他) を含むであろうモジュールの例です。このファイルを開いて、"
"以下の内容を入力してください:"

#: ../source/tutorials/packaging-projects.rst:71
msgid ""
"If you are unfamiliar with Python's :term:`modules <Module>` and :term:"
"`import packages <Import Package>`, take a few minutes to read over the "
"`Python documentation for packages and modules`_."
msgstr ""
"Python における :term:`モジュール <Module>` や :term:`パッケージのインポート "
"<Import Package>` に馴染みがなければ、数分を費やして `パッケージとモジュール"
"に関する Python の説明文書 <Python documentation for packages and modules>`_ "
"を読み通してください。"

#: ../source/tutorials/packaging-projects.rst:75
msgid ""
"Once you create this structure, you'll want to run all of the commands in "
"this tutorial within the ``packaging_tutorial`` directory."
msgstr ""
"この構造さえ作れば、このチュートリアルに出てくるすべてのコマンドを "
"``packaging_tutorial`` ディレクトリで実行したくなるでしょう。"

#: ../source/tutorials/packaging-projects.rst:83
msgid "Creating the package files"
msgstr "パッケージファイルを作成する"

#: ../source/tutorials/packaging-projects.rst:85
msgid ""
"You will now add files that are used to prepare the project for "
"distribution. When you're done, the project structure will look like this:"
msgstr ""
"ここで、プロジェクトの配布を準備するために使われるファイル群を追加しましょ"
"う。それが終わったら、プロジェクトの構造はこんな風になっていることでしょう:"

#: ../source/tutorials/packaging-projects.rst:103
msgid "Creating a test directory"
msgstr "test ディレクトリを作成する"

#: ../source/tutorials/packaging-projects.rst:105
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""
":file:`tests/` は、テスト用のファイルを置くためのプレースホルダーです。現段階"
"では、空のままにしておいてください。"

#: ../source/tutorials/packaging-projects.rst:111
msgid "Choosing a build backend"
msgstr "ビルドバックエンドを選択する"

#: ../source/tutorials/packaging-projects.rst:113
msgid ""
"Tools like :ref:`pip` and :ref:`build` do not actually convert your sources "
"into a :term:`distribution package <Distribution Package>` (like a wheel); "
"that job is performed by a :term:`build backend <Build Backend>`. The build "
"backend determines how your project will specify its configuration, "
"including metadata (information about the project, for example, the name and "
"tags that are displayed on PyPI) and input files. Build backends have "
"different levels of functionality, such as whether they support building :"
"term:`extension modules <Extension Module>`, and you should choose one that "
"suits your needs and preferences."
msgstr ""
":ref:`pip` や :ref:`build` のようなツールは、実際にソースを :term:`配布パッ"
"ケージ <Distribution Package>` (wheel のような) に変換するわけではありませ"
"ん。その作業は、 :term:`ビルドバックエンド <Build Backend>` によって行われま"
"す。ビルドバックエンドは、プロジェクトがメタデータ (プロジェクトについての情"
"報、例えば PyPI に表示される名前やタグ) や入力ファイルを含むその構成を指定す"
"る方法を決定します。ビルドバックエンドは、 :term:`拡張モジュール <Extension "
"Module>` のビルドをサポートするかどうかのような、異なる水準の機能性を持ち、必"
"要性や好みに適切なものを選択するべきです。"

#: ../source/tutorials/packaging-projects.rst:122
msgid ""
"You can choose from a number of backends; this tutorial uses :ref:`Hatchling "
"<hatch>` by default, but it will work identically with :ref:`setuptools`, :"
"ref:`Flit <flit>`, :ref:`PDM <pdm>`, and others that support the "
"``[project]`` table for :ref:`metadata <configuring metadata>`."
msgstr ""
"多くのバックエンド群から選択することができます; このチュートリアルでは :ref:"
"`Hatchling <hatch>` をデフォルトとして使いますが、 :ref:`setuptools` ・ :ref:"
"`Flit <flit>` ・ :ref:`PDM <pdm>` や、 :ref:`メタデータ <configuring "
"metadata>` として ``[project]`` テーブルをサポートする他のものでも同様に動作"
"するでしょう。"

#: ../source/tutorials/packaging-projects.rst:129
msgid ""
"Some build backends are part of larger tools that provide a command-line "
"interface with additional features like project initialization and version "
"management, as well as building, uploading, and installing packages. This "
"tutorial uses single-purpose tools that work independently."
msgstr ""
"ビルド・アップロード・インストールと並んでプロジェクト初期化やバージョン管理"
"のような追加機能を伴ったコマンドラインインタフェースを提供する、もっと大きな"
"ツールの一部を構成するビルドバックエンドもあります。このチュートリアルでは、"
"独立に動作する単一目的のツールを扱います。"

#: ../source/tutorials/packaging-projects.rst:134
msgid ""
"The :file:`pyproject.toml` tells :term:`build frontend <Build Frontend>` "
"tools like :ref:`pip` and :ref:`build` which backend to use for your "
"project. Below are some examples for common build backends, but check your "
"backend's own documentation for more details."
msgstr ""
":file:`pyproject.toml` は、 :ref:`pip` や :ref:`build` のような :term:`ビルド"
"フロントエンド <Build Frontend>` ツールに対して、そのプロジェクトにおいてどの"
"バックエンドを使うかを指示します。よくあるビルドバックエンドのいくつかの例を"
"下に挙げますが、もっと詳しいことについてはバックエンド自身の説明文書を確認し"
"てください。"

#: ../source/tutorials/packaging-projects.rst:141
#, fuzzy
#| msgid ""
#| "The ``requires`` key is a list of packages that are needed to build your "
#| "package. The :term:`frontend <Build Frontend>` should install them "
#| "automatically when building your package. Frontends usually run builds in "
#| "isolated environments, so omitting dependencies here may cause build-time "
#| "errors. This should always include your backend's package, and might have "
#| "other build-time dependencies."
msgid ""
"The ``requires`` key is a list of packages that are needed to build your "
"package. The :term:`frontend <Build Frontend>` should install them "
"automatically when building your package. Frontends usually run builds in "
"isolated environments, so omitting dependencies here may cause build-time "
"errors. This should always include your backend's package, and might have "
"other build-time dependencies. The minimum version specified in the above "
"code block is the one that introduced support for :ref:`the new license "
"metadata <license-and-license-files>`."
msgstr ""
"``requires`` は、そのパッケージをビルドするために必要とされるパッケージ群のリ"
"ストです。 :term:`ビルドフロントエンド <Build Frontend>` は、そのパッケージを"
"ビルドする際にそれらをインストールするべきです。フロントエンドは、通常、隔離"
"された環境でビルドを実行しますので、ここに依存関係を書き忘れるとビルド時のエ"
"ラーにつながります。バックエンドパッケージには常にこれを含めておくべきであ"
"り、他のビルド時の依存関係を持っているかもしれません。"

#: ../source/tutorials/packaging-projects.rst:150
msgid ""
"The ``build-backend`` key is the name of the Python object that frontends "
"will use to perform the build."
msgstr ""
"``build-backend`` キーは、そのフロントエンドがビルドを実行するにあたって使用"
"するであろう Python オブジェクトの名前です。"

#: ../source/tutorials/packaging-projects.rst:153
msgid ""
"Both of these values will be provided by the documentation for your build "
"backend, or generated by its command line interface. There should be no need "
"for you to customize these settings."
msgstr ""
"これらの両方の値は、ビルドバックエンドの説明文書によって提供されるか、そのコ"
"マンドラインインターフェースによって生成されるでしょう。これらの設定をカスタ"
"マイズする必要はないはずです。"

#: ../source/tutorials/packaging-projects.rst:157
msgid ""
"Additional configuration of the build tool will either be in a ``tool`` "
"section of the ``pyproject.toml``, or in a special file defined by the build "
"tool. For example, when using ``setuptools`` as your build backend, "
"additional configuration may be added to a ``setup.py`` or ``setup.cfg`` "
"file, and specifying ``setuptools.build_meta`` in your build allows the "
"tools to locate and use these automatically."
msgstr ""
"ビルドツールの追加の設定は、 ``pyproject.toml`` の ``tool`` セクションか、ビ"
"ルドツールによって定義された特別なファイルの中にあるでしょう。例えば、ビルド"
"バックエンドとして ``setuptools`` を使う時には、追加の設定を ``setup.py`` な"
"いし ``setup.cfg`` ファイルに追加してもよく、ビルド中に ``setuptools."
"build_meta`` を指定することでツールに対してこれらを自動的に探索して使うように"
"できます。"

#: ../source/tutorials/packaging-projects.rst:167
msgid "Configuring metadata"
msgstr "メタデータを設定する"

#: ../source/tutorials/packaging-projects.rst:169
msgid ""
"Open :file:`pyproject.toml` and enter the following content. Change the "
"``name`` to include your username; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial."
msgstr ""
":file:`pyproject.toml` を開いて、以下の内容を入力してください。 ``name`` の値"
"はあなたのユーザ名に書き換えてください; こうすることで、このチュートリアルを"
"履修している他の人たちがアップロードするパッケージと衝突を起こさない一意な"
"パッケージ名を使っていることを保証することができます。"

#: ../source/tutorials/packaging-projects.rst:196
msgid ""
"``name`` is the *distribution name* of your package. This can be any name as "
"long as it only contains letters, numbers, ``.``, ``_`` , and ``-``. It also "
"must not already be taken on PyPI. **Be sure to update this with your "
"username** for this tutorial, as this ensures you won't try to upload a "
"package with the same name as one which already exists."
msgstr ""
"``name`` は、あなたのパッケージの *配布物の名前* です。これは、文字・数字・ "
"``.`` ・ ``_`` ・ ``-`` だけで構成されている限りは、どんな名前でも構いませ"
"ん。また、 PyPI 上に既に存在するものであってはなりません。このチュートリアル"
"では、あなたのユーザ名を使って更新していることを **確実にしてください** 、と"
"いうのは、そうすることで、既存の名前と同じ名前のパッケージのアップロードを試"
"みることがないと保証できるからです。"

#: ../source/tutorials/packaging-projects.rst:201
msgid ""
"``version`` is the package version. (Some build backends allow it to be "
"specified another way, such as from a file or Git tag.)"
msgstr ""
"``version`` は、パッケージのバージョン番号です。 (ビルドバックエンドの中に"
"は、ファイルや Git のタグからといった別の方法で指定することができるものもあり"
"ます。)"

#: ../source/tutorials/packaging-projects.rst:203
msgid ""
"``authors`` is used to identify the author of the package; you specify a "
"name and an email for each author. You can also list ``maintainers`` in the "
"same format."
msgstr ""
"``authors`` は、パッケージの作者を識別するために使われます; 作者の一人一人に"
"ついて名前と電子メールアドレスを指定します。同じフォーマットで "
"``maintainers`` を列挙することもできます。"

#: ../source/tutorials/packaging-projects.rst:206
msgid "``description`` is a short, one-sentence summary of the package."
msgstr "``description`` は、１文で短くパッケージを説明するものです。"

#: ../source/tutorials/packaging-projects.rst:207
msgid ""
"``readme`` is a path to a file containing a detailed description of the "
"package. This is shown on the package detail page on PyPI. In this case, the "
"description is loaded from :file:`README.md` (which is a common pattern). "
"There also is a more advanced table form described in the :ref:`pyproject."
"toml guide <writing-pyproject-toml>`."
msgstr ""
"``readme`` は、パッケージに関する詳細な説明を含んだファイルへのパスです。 "
"PyPI 上のパッケージ詳細のページにこの内容が表示されます。この場合、説明の文言"
"は :file:`README.md` (これがよくあるパターンです) からロードされます。他に"
"も、 :ref:`pyproject.toml ガイド文書 <writing-pyproject-toml>` に記述されてい"
"るもっと先進的なテーブル形式があります。"

#: ../source/tutorials/packaging-projects.rst:212
msgid ""
"``requires-python`` gives the versions of Python supported by your project. "
"An installer like :ref:`pip` will look back through older versions of "
"packages until it finds one that has a matching Python version."
msgstr ""
"``requires-python`` は、そのプロジェクトがサポートしている Python のバージョ"
"ンを与えます。 :ref:`pip` のようなインストーラは、 Python バージョンが合致す"
"るものを見つけるまでパッケージのバージョンを遡って探索します。"

#: ../source/tutorials/packaging-projects.rst:215
#, fuzzy
#| msgid ""
#| "``classifiers`` gives the index and :ref:`pip` some additional metadata "
#| "about your package. In this case, the package is only compatible with "
#| "Python 3, is licensed under the MIT license, and is OS-independent. You "
#| "should always include at least which version(s) of Python your package "
#| "works on, which license your package is available under, and which "
#| "operating systems your package will work on. For a complete list of "
#| "classifiers, see https://pypi.org/classifiers/."
msgid ""
"``classifiers`` gives the index and :ref:`pip` some additional metadata "
"about your package. In this case, the package is only compatible with Python "
"3 and is OS-independent. You should always include at least which version(s) "
"of Python your package works on and which operating systems your package "
"will work on. For a complete list of classifiers, see https://pypi.org/"
"classifiers/."
msgstr ""
"``classifiers`` は、インデックスと :ref:`pip` に、そのパッケージに関する追加"
"的なメタデータをいくつか与えます。この場合には、当該パッケージは Python 3 で"
"のみ動作し、 MIT ライセンスの下に従うものであり、 OS には依らず独立のもので"
"す。どのバージョンの Python 上でそのパッケージが動作するのか、どのライセンス"
"に従うのか、どのオペレーティングシステムで動作するのかを示しておくことは、常"
"に最低限それだけはやるべきことです。 classifiers の完全なリストについては、 "
"https://pypi.org/classifiers/ を見てください。"

#: ../source/tutorials/packaging-projects.rst:222
msgid ""
"``license`` is the :term:`SPDX license expression <License Expression>` of "
"your package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:224
#, fuzzy
#| msgid ""
#| "Now run this command from the same directory where :file:`pyproject.toml` "
#| "is located:"
msgid ""
"``license-files`` is the list of glob paths to the license files, relative "
"to the directory where :file:`pyproject.toml` is located."
msgstr ""
"さて、 :file:`pyproject.toml` ファイルがあるのと同じディレクトリでこのコマン"
"ドを実行しましょう:"

#: ../source/tutorials/packaging-projects.rst:226
msgid ""
"``urls`` lets you list any number of extra links to show on PyPI. Generally "
"this could be to the source, documentation, issue trackers, etc."
msgstr ""
"``urls`` には、 PyPI で表示するその他のリンクを幾つでも列挙しておくことができ"
"ます。一般的に、ソースコードや説明文書、課題追跡システムその他へのリンクを挙"
"げておけばよいでしょう。"

#: ../source/tutorials/packaging-projects.rst:229
msgid ""
"See the :ref:`pyproject.toml guide <writing-pyproject-toml>` for details on "
"these and other fields that can be defined in the ``[project]`` table. Other "
"common fields are ``keywords`` to improve discoverability and the "
"``dependencies`` that are required to install your package."
msgstr ""
"``[project]`` テーブルに定義できるこれらのフィールドやその他のフィールドにつ"
"いての詳しい情報が必要であれば、 :ref:`pyproject.toml ガイド文書 <writing-"
"pyproject-toml>` を見てください。他のよく使われるフィールドには、検索にかかり"
"やすくするための ``keywords`` や、当該パッケージをインストールするために必須"
"のパッケージを示す ``dependencies`` があります。"

#: ../source/tutorials/packaging-projects.rst:236
msgid "Creating README.md"
msgstr "README.md を作成する"

#: ../source/tutorials/packaging-projects.rst:238
msgid ""
"Open :file:`README.md` and enter the following content. You can customize "
"this if you'd like."
msgstr ""
":file:`README.md` を開いて、以下の内容を入力してください。そうしたければ、カ"
"スタマイズした内容でも構いません。"

#: ../source/tutorials/packaging-projects.rst:251
msgid "Creating a LICENSE"
msgstr "LICENSE ファイルを作成する"

#: ../source/tutorials/packaging-projects.rst:253
msgid ""
"It's important for every package uploaded to the Python Package Index to "
"include a license. This tells users who install your package the terms under "
"which they can use your package. For help picking a license, see https://"
"choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` "
"and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""
"Python パッケージインデックスにアップロードされた各々のパッケージにとって、ラ"
"イセンス条項を明示することは重要です。こうすることで、そのパッケージをインス"
"トールするユーザに対して、どのような条件のもとでそのパッケージを使うことがで"
"きるのかを伝えることができるからです。ライセンス選択の助けが必要ならば、 "
"https://choosealicense.com/ を見てください。どのライセンスにするか選択できた"
"ら、 :file:`LICENSE` ファイルを開いてそのライセンス条項を書き込んでください。"
"例えば、 MIT ライセンスを選択したなら次のようにします:"

#: ../source/tutorials/packaging-projects.rst:282
msgid ""
"Most build backends automatically include license files in packages. See "
"your backend's documentation for more details. If you include the path to "
"license in the ``license-files`` key of :file:`pyproject.toml`, and your "
"build backend supports :pep:`639`, the file will be automatically included "
"in the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:290
msgid "Including other files"
msgstr "その他のファイルを包含する"

#: ../source/tutorials/packaging-projects.rst:292
msgid ""
"The files listed above will be included automatically in your :term:`source "
"distribution <Source Distribution (or \"sdist\")>`. If you want to include "
"additional files, see the documentation for your build backend."
msgstr ""
"上に挙げたファイル群は、 :term:`ソースコード配布物 <Source Distribution (or "
"\"sdist\")>` に自動的に含まれるでしょう。他のファイルも含めておきたいなら、"
"使っているビルドバックエンドの説明文書を見てください。"

#: ../source/tutorials/packaging-projects.rst:299
msgid "Generating distribution archives"
msgstr "配布物アーカイブを生成する"

#: ../source/tutorials/packaging-projects.rst:301
msgid ""
"The next step is to generate :term:`distribution packages <Distribution "
"Package>` for the package. These are archives that are uploaded to the "
"Python Package Index and can be installed by :ref:`pip`."
msgstr ""
"次のステップでは、そのパッケージの :term:`配布物パッケージ <Distribution "
"Package>` を生成します。これらは、 Python パッケージインデックスへアップロー"
"ドされ、 :ref:`pip` でインストールされることができるものです。"

#: ../source/tutorials/packaging-projects.rst:305
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""
"PyPA の :ref:`build` の最新版がインストールされていることを確認してください:"

#: ../source/tutorials/packaging-projects.rst:319
msgid ""
"If you have trouble installing these, see the :doc:`installing-packages` "
"tutorial."
msgstr ""
"これらをインストールするのに困難を感じるようなら、 :doc:`パッケージをインス"
"トールする <installing-packages>` チュートリアルを見てください。"

#: ../source/tutorials/packaging-projects.rst:322
msgid ""
"Now run this command from the same directory where :file:`pyproject.toml` is "
"located:"
msgstr ""
"さて、 :file:`pyproject.toml` ファイルがあるのと同じディレクトリでこのコマン"
"ドを実行しましょう:"

#: ../source/tutorials/packaging-projects.rst:336
msgid ""
"This command should output a lot of text and once completed should generate "
"two files in the :file:`dist` directory:"
msgstr ""
"このコマンドから多くのテキストメッセージが出力されますが、実行が終われば :"
"file:`dist` ディレクトリにふたつのファイルが生成されていることでしょう:"

#: ../source/tutorials/packaging-projects.rst:346
msgid ""
"The ``tar.gz`` file is a :term:`source distribution <Source Distribution (or "
"\"sdist\")>` whereas the ``.whl`` file is a :term:`built distribution <Built "
"Distribution>`. Newer :ref:`pip` versions preferentially install built "
"distributions, but will fall back to source distributions if needed. You "
"should always upload a source distribution and provide built distributions "
"for the platforms your project is compatible with. In this case, our example "
"package is compatible with Python on any platform so only one built "
"distribution is needed."
msgstr ""
"``tar.gz`` ファイルは :term:`ソースコード配布物 <Source Distribution (or "
"\"sdist\")>` であり、 ``.whl`` ファイルは :term:`ビルド済配布物 <Built "
"Distribution>` です。新しめのバージョンの :ref:`pip` では、ビルド済配布物を優"
"先的にインストールしますが、必要であればソースコード配布物にフォールバックし"
"ます。ソースコード配布物については常にアップロードするべきであり、あなたのプ"
"ロジェクトが動作するはずのプラットフォーム向けのビルド済配布物についても準備"
"するべきです。我々の例示のためのパッケージはすべてのプラットフォーム上の "
"Python で動作するものなので、ビルド済配布物がひとつあれば十分です。"

#: ../source/tutorials/packaging-projects.rst:355
msgid "Uploading the distribution archives"
msgstr "配布物アーカイブをアップロードする"

#: ../source/tutorials/packaging-projects.rst:357
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""
"ついにあなたのパッケージを Python パッケージインデックスへアップロードする時"
"が来ました！"

#: ../source/tutorials/packaging-projects.rst:359
msgid ""
"The first thing you'll need to do is register an account on TestPyPI, which "
"is a separate instance of the package index intended for testing and "
"experimentation. It's great for things like this tutorial where we don't "
"necessarily want to upload to the real index. To register an account, go to "
"https://test.pypi.org/account/register/ and complete the steps on that page. "
"You will also need to verify your email address before you're able to upload "
"any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""
"最初に実行しなければならないことは、試験や実験の場となることを意図してパッ"
"ケージインデックスとは別のインスタンスとして立てられたインスタンスである "
"TestPyPI にアカウントを登録することです。このチュートリアルのように、必ずしも"
"実際のインデックスにアップロードしたいと思わない場合には、 (TestPI は) 最適で"
"す。アカウントを登録するためには、 https://test.pypi.org/account/register/ へ"
"行って、そのページにあるステップを完了してください。パッケージをアップロード"
"できるようになる前に、あなたの電子メールアドレスを検証することも必要になるで"
"しょう。もっと詳しいことが知りたければ、 :doc:`/guides/using-testpypi` を見て"
"ください。"

#: ../source/tutorials/packaging-projects.rst:367
msgid ""
"To securely upload your project, you'll need a PyPI `API token`_. Create one "
"at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" "
"to \"Entire account\". **Don't close the page until you have copied and "
"saved the token — you won't see that token again.**"
msgstr ""
"あなたのプロジェクトを安全にアップロードするためには、 PyPI `API トークン`_ "
"が必要になるでしょう。 https://test.pypi.org/manage/account/#api-tokens で、 "
"\"スコープ\" として \"アカウント全体\" を指定して、ひとつ作成してください。 "
"**トークンをコピーして保存するまで、ページを閉じないでください — トークンは二"
"度と表示されません。**"

#: ../source/tutorials/packaging-projects.rst:374
msgid ""
"Now that you are registered, you can use :ref:`twine` to upload the "
"distribution packages. You'll need to install Twine:"
msgstr ""
"ユーザ登録が済んだら、 :ref:`twine` で配布物パッケージをアップロードすること"
"ができます。Twine のインストールが必要ならこのようにしてください:"

#: ../source/tutorials/packaging-projects.rst:389
msgid ""
"Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""
"インストールできたら、 :file:`dist` ディレクトリ内にあるアーカイブファイルを"
"すべてアップロードしてください:"

#: ../source/tutorials/packaging-projects.rst:403
msgid ""
"You will be prompted for an API token. Use the token value, including the "
"``pypi-`` prefix. Note that the input will be hidden, so be sure to paste "
"correctly."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:406
msgid "After the command completes, you should see output similar to this:"
msgstr "コマンド実行完了後、これに似た出力を見ることになるでしょう:"

#: ../source/tutorials/packaging-projects.rst:417
msgid ""
"Once uploaded, your package should be viewable on TestPyPI; for example: "
"``https://test.pypi.org/project/example_package_YOUR_USERNAME_HERE``."
msgstr ""
"あなたのパッケージをアップロードしたら、 TestPyPI 上で閲覧できるようになりま"
"す; 例えば: ``https://test.pypi.org/project/"
"example_package_YOUR_USERNAME_HERE`` 。"

#: ../source/tutorials/packaging-projects.rst:422
msgid "Installing your newly uploaded package"
msgstr "新しくアップロードしたあなたのパッケージをインストールする"

#: ../source/tutorials/packaging-projects.rst:424
msgid ""
"You can use :ref:`pip` to install your package and verify that it works. "
"Create a :ref:`virtual environment <Creating and using Virtual "
"Environments>` and install your package from TestPyPI:"
msgstr ""
":ref:`pip` を使えば、あなたのパッケージをインストールして動作を検証することが"
"できます。 :ref:`仮想環境 <Creating and using Virtual Environments>` を作成し"
"て、 TestPyPI からあなたのパッケージをインストールしましょう:"

#: ../source/tutorials/packaging-projects.rst:440
msgid "Make sure to specify your username in the package name!"
msgstr "パッケージ名の中にあなたのユーザ名を指定するのをお忘れなく！"

#: ../source/tutorials/packaging-projects.rst:442
msgid ""
"pip should install the package from TestPyPI and the output should look "
"something like this:"
msgstr ""
"pip でパッケージを TestPyPI からインストールできるはずで、その出力は何か次の"
"ようなものに見えるでしょう:"

#: ../source/tutorials/packaging-projects.rst:452
msgid ""
"This example uses ``--index-url`` flag to specify TestPyPI instead of live "
"PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have "
"the same packages as the live PyPI, it's possible that attempting to install "
"dependencies may fail or install something unexpected. While our example "
"package doesn't have any dependencies, it's a good practice to avoid "
"installing dependencies when using TestPyPI."
msgstr ""
"この例では ``--index-url`` フラグを使って本番環境である PyPI の代わりに "
"TestPyPI を指定しています。さらに、 ``--no-deps`` も指定しています。 "
"TestPyPI には本番環境である PyPI と同じだけのパッケージが存在しないので、依存"
"先となるパッケージを同時にインストールしようとしても、失敗するか、または、期"
"待していたものとは異なる何かをインストールしてしまう恐れがあります。我々の例"
"として使っているパッケージには依存先がないので、 TestPyPI を使う時には依存先"
"をインストールしないように指定しておくことは良いやり方です。"

#: ../source/tutorials/packaging-projects.rst:459
msgid ""
"You can test that it was installed correctly by importing the package. Make "
"sure you're still in your virtual environment, then run Python:"
msgstr ""
"パッケージをインポートしてみることで、正しくインストールされたかどうかを試験"
"することができます。まだ仮想環境内にいることを確認してから Python を走らせま"
"しょう:"

#: ../source/tutorials/packaging-projects.rst:474
msgid "and import the package:"
msgstr "そして、パッケージをインポートしましょう:"

#: ../source/tutorials/packaging-projects.rst:486
msgid ""
"**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 "
"✨"
msgstr ""
"**おめでとうございます、あなたは Python のプロジェクトをパッケージングし、配"
"布することができました！** ✨ 🍰 ✨"

#: ../source/tutorials/packaging-projects.rst:489
msgid ""
"Keep in mind that this tutorial showed you how to upload your package to "
"Test PyPI, which isn't a permanent storage. The Test system occasionally "
"deletes packages and accounts. It is best to use TestPyPI for testing and "
"experiments like this tutorial."
msgstr ""
"このチュートリアルではあなたのパッケージを Test PyPI に、つまり永続的なスト"
"レージではないところにアップロードする方法について示したということを忘れない"
"でください。テストシステムは、時折パッケージやアカウントを削除します。 Test "
"PyPI は、このチュートリアルのような試行や実験のために使うのがベストです。"

#: ../source/tutorials/packaging-projects.rst:494
msgid ""
"When you are ready to upload a real package to the Python Package Index you "
"can do much the same as you did in this tutorial, but with these important "
"differences:"
msgstr ""
"実際のパッケージを Python パッケージインデックスへアップロードする準備ができ"
"たら、このチュートリアルでやったのと概ね同じことをやれば大丈夫ですが、次のよ"
"うな重要な違いがあります:"

#: ../source/tutorials/packaging-projects.rst:498
msgid ""
"Choose a memorable and unique name for your package. You don't have to "
"append your username as you did in the tutorial, but you can't use an "
"existing name."
msgstr ""
"あなたのパッケージ用に覚えやすくて独特な名前を付けましょう。チュートリアルで"
"やったようにあなたのユーザ名を追記する必要はありませんが、既存の名前は使えま"
"せん。"

#: ../source/tutorials/packaging-projects.rst:500
msgid ""
"Register an account on https://pypi.org - note that these are two separate "
"servers and the login details from the test server are not shared with the "
"main server."
msgstr ""
"https://pypi.org でアカウントを登録しましょう - これらはふたつの相異なるサー"
"バであって、テストサーバ側のログイン情報はメインサーバに共有されてはいませ"
"ん。"

#: ../source/tutorials/packaging-projects.rst:503
msgid ""
"Use ``twine upload dist/*`` to upload your package and enter your "
"credentials for the account you registered on the real PyPI.  Now that "
"you're uploading the package in production, you don't need to specify ``--"
"repository``; the package will upload to https://pypi.org/ by default."
msgstr ""
"あなたのパッケージをアップロードするのに ``twine upload dist/*`` を使い、本番"
"環境の PyPI で登録したアカウントの認証情報を入力しましょう。今回は出荷状態の"
"パッケージをアップロードしようとしているので、 ``--repository`` を指定する必"
"要はありません; 指定しないことでパッケージはデフォルトの https://pypi.org/ へ"
"アップロードされるでしょう。"

#: ../source/tutorials/packaging-projects.rst:507
msgid ""
"Install your package from the real PyPI using ``python3 -m pip install [your-"
"package]``."
msgstr ""
"``python3 -m pip install [your-package`` を使って、あなたのパッケージを本番環"
"境の PyPI からインストールしましょう。"

#: ../source/tutorials/packaging-projects.rst:509
msgid ""
"At this point if you want to read more on packaging Python libraries here "
"are some things you can do:"
msgstr ""
"ここまで読み進めてきて、もっと Python でのパッケージングについて読みたいので"
"あれば、次のようなものがあります:"

#: ../source/tutorials/packaging-projects.rst:512
msgid ""
"Read about advanced configuration for your chosen build backend: `Hatchling "
"<hatchling-config_>`_, :doc:`setuptools <setuptools:userguide/"
"pyproject_config>`, :doc:`Flit <flit:pyproject_toml>`, `PDM <pdm-config_>`_."
msgstr ""
"選択したビルドバックエンドの先進的な設定については、`Hatchling <hatchling-"
"config_>`_ ・ :doc:`setuptools <setuptools:userguide/pyproject_config>` ・ :"
"doc:`Flit <flit:pyproject_toml>` ・ `PDM <pdm-config_>`_ を読んでください。"

#: ../source/tutorials/packaging-projects.rst:516
msgid ""
"Look at the :doc:`guides </guides/index>` on this site for more advanced "
"practical information, or the :doc:`discussions </discussions/index>` for "
"explanations and background on specific topics."
msgstr ""
"もっと先進的な実際上の情報についてはこのサイトの :doc:`説明文書群 </guides/"
"index>` を、あるいは、特定の話題の説明や背景については :doc:`議論 </"
"discussions/index>` を見てください。"

#: ../source/tutorials/packaging-projects.rst:519
msgid ""
"Consider packaging tools that provide a single command-line interface for "
"project management and packaging, such as :ref:`hatch`, :ref:`flit`, :ref:"
"`pdm`, and :ref:`poetry`."
msgstr ""
":ref:`hatch` ・ :ref:`flit` ・ :ref:`pdm` ・ :ref:`poetry` のように、単一のコ"
"マンドラインインタフェースでプロジェクト管理もパッケージングもできるパッケー"
"ジングツールについて検討しましょう。"

#: ../source/tutorials/packaging-projects.rst:527
msgid "Notes"
msgstr "ノート"

#: ../source/tutorials/packaging-projects.rst:529
msgid ""
"Technically, you can also create Python packages without an ``__init__.py`` "
"file, but those are called :doc:`namespace packages </guides/packaging-"
"namespace-packages>` and considered an **advanced topic** (not covered in "
"this tutorial). If you are only getting started with Python packaging, it is "
"recommended to stick with *regular packages* and ``__init__.py`` (even if "
"the file is empty)."
msgstr ""
"``__init__.py`` ファイルなしの Python パッケージを作ることも技術的には可能で"
"すが、そのようなものは :doc:`名前空間パッケージ </guides/packaging-namespace-"
"packages>` と呼ばれるもので、 (このチュートリアルでは取り扱わない) **先進的な"
"話題** であると見做されています。Pythonのパッケージングについてやり始めたばか"
"りなのであれば、 *通常のパッケージ* と (空のファイルだとしても) ``__init__."
"py`` から離れないことをお薦めします。"

#, fuzzy
#~| msgid ":ref:`pyproject-toml-spec`"
#~ msgid "**Inspiration**: :ref:`  pyproject-tool-table`"
#~ msgstr ":ref:`pyproject-toml-spec`"

#~ msgid ""
#~ "Below the root URL is another URL for each individual project contained "
#~ "within a repository. The format of this URL is ``/<project>/`` where the "
#~ "``<project>`` is replaced by the normalized name for that project, so a "
#~ "project named \"HolyGrail\" would have a URL like ``/holygrail/``. This "
#~ "URL must respond with a valid HTML5 page with a single anchor element per "
#~ "file for the project. The href attribute **MUST** be a URL that links to "
#~ "the location of the file for download, and the text of the anchor tag "
#~ "**MUST** match the final path component (the filename) of the URL. The "
#~ "URL **SHOULD** include a hash in the form of a URL fragment with the "
#~ "following syntax: ``#<hashname>=<hashvalue>``, where ``<hashname>`` is "
#~ "the lowercase name of the hash function (such as ``sha256``) and "
#~ "``<hashvalue>`` is the hex encoded digest."
#~ msgstr ""
#~ "ルート URL <root URL> 以下には、リポジトリに含まれる独立のプロジェクトのそ"
#~ "れぞれに対応する別の URL があります。この URL のフォーマットは ``/"
#~ "<project>/`` で、 ``<project>`` の部分はそのプロジェクトの正規化された名称"
#~ "で置き換えられるので、あるプロジェクトの名称が \"HolyGrail\" なら、 URL "
#~ "は ``/holygrail/`` のようになるでしょう。この URL は、プロジェクトのファイ"
#~ "ル一つに対してひとつのアンカーエレメントを伴った正当な HTML5 ページを返さ"
#~ "なければなりません。href アトリビュートは、そのファイルのダウンロードリン"
#~ "クの URL で **なければならず** 、アンカータグのテキストはその URL の最終的"
#~ "なパス構成要素 (ファイル名) に合致して **いなければなりません** 。この URL"
#~ "は、 URL の断片要素の形でハッシュ値を **含んでいるべき** で、その文法は次"
#~ "のようなものです: ``#<hashname>=<hashvalue>`` の形で、 ``<hashname>`` は "
#~ "(``sha256`` のように) ハッシュ関数の名前を小文字で表記したものであり、 "
#~ "``<hashvalue>`` は16進数にエンコードされたダイジェスト (ハッシュ値) です。"

#~ msgid "Adding \"Yank\" Support to the Simple API"
#~ msgstr "\"ヤンク <Yank>\" サポートをシンプルな API に追加する"

#~ msgid "Signing the distribution packages"
#~ msgstr "配布パッケージに署名する"

#~ msgid ""
#~ "The following job signs the distribution packages with `Sigstore`_, the "
#~ "same artifact signing system `used to sign CPython <https://www.python."
#~ "org/download/sigstore/>`_."
#~ msgstr ""
#~ "以下に述べるジョブは、`CPython <https://www.python.org/download/sigstore/"
#~ ">` に署名するのに使われる`_ ものと同じアーティファクトである `Sigstore`_ "
#~ "を使って配布パッケージに署名します。"

#~ msgid ""
#~ "Firstly, it uses the `sigstore/gh-action-sigstore-python GitHub Action`_ "
#~ "to sign the distribution packages. In the next step, an empty GitHub "
#~ "Release from the current tag is created using the ``gh`` CLI. Note this "
#~ "step can be further customised. See the `gh release documentation "
#~ "<https://cli.github.com/manual/gh_release>`_ as a reference."
#~ msgstr ""
#~ "第一に、配布物パッケージに署名するのに `sigstore/gh-action-sigstore-"
#~ "python GitHub Action`_ を使います。次の段階では、現在のタグから空の "
#~ "GitHub Release が``hg`` CLI を使って作成されます。この段階をさらにカスタマ"
#~ "イズすることができる点に留意してください。リファレンスとしては、`gh リリー"
#~ "ス説明文書 <https://cli.github.com/manual/gh_release>`_ を見てください。"

#~ msgid ""
#~ "You may need to manage your ``GITHUB_TOKEN`` permissions to enable "
#~ "creating the GitHub Release. See the `GitHub documentation <https://docs."
#~ "github.com/repositories/managing-your-repositorys-settings-and-features/"
#~ "enabling-features-for-your-repository/managing-github-actions-settings-"
#~ "for-a-repository#configuring-the-default-github_token-permissions>`_ for "
#~ "instructions. Specifically, the token needs the ``contents: write`` "
#~ "permission."
#~ msgstr ""
#~ "GitHub リリースの作成ができるような ``GITHUB_TOKEN`` パーミッションを維持"
#~ "する必要があります。やり方については、 `GitHub 説明文書 <https://docs."
#~ "github.com/repositories/managing-your-repositorys-settings-and-features/"
#~ "enabling-features-for-your-repository/managing-github-actions-settings-"
#~ "for-a-repository#configuring-the-default-github_token-permissions>`_ を見"
#~ "てください。具体的に言えば、トークンには ``contents: write`` 権限が必要で"
#~ "す。"

#~ msgid ""
#~ "Finally, the signed distributions are uploaded to the GitHub Release."
#~ msgstr "最後に、署名された配布物が GitHub Release へアップロードされます。"

#~ msgid ""
#~ "This is a replacement for GPG signatures, for which support has been "
#~ "`removed from PyPI <https://blog.pypi.org/posts/2023-05-23-removing-pgp/"
#~ ">`_. However, this job is not mandatory for uploading to PyPI and can be "
#~ "omitted."
#~ msgstr ""
#~ "これは、 `PyPI から削除された <https://blog.pypi.org/posts/2023-05-23-"
#~ "removing-pgp/>`_ GPG 署名を代替するものです。しかしながら、このジョブは "
#~ "PyPI へアップロードする時に必須のものと言うわけではなく、省略することもで"
#~ "きます。"

#, fuzzy
#~| msgid ""
#~| "This can take two forms. You can put your license in a file, typically "
#~| "``LICENSE`` or ``LICENSE.txt``, and link that file here:"
#~ msgid ""
#~ "This can take two forms. You can put your license in a file, typically :"
#~ "file:`LICENSE` or :file:`LICENSE.txt`, and link that file here:"
#~ msgstr ""
#~ "これは、ふたつの形式を採ります。典型的には ``LICENSE`` か ``LICENSE.txt`` "
#~ "というファイル名でライセンスをファイルとして置いておいて、ここにはそのファ"
#~ "イルへのリンクを書いて置くこともできます:"

#~ msgid "or you can write the name of the license:"
#~ msgstr "あるいは、ライセンスの名称を書いておくことも可能です:"

#, fuzzy
#~| msgid ""
#~| "If you are using a standard, well-known license, it is not necessary to "
#~| "use this field. Instead, you should one of the :ref:`classifiers` "
#~| "starting with ``License ::``. (As a general rule, it is a good idea to "
#~| "use a standard, well-known license, both to avoid confusion and because "
#~| "some organizations avoid software whose license is unapproved.)"
#~ msgid ""
#~ "If you are using a standard, well-known license, it is not necessary to "
#~ "use this field. Instead, you should use one of the :ref:`classifiers` "
#~ "starting with ``License ::``. (As a general rule, it is a good idea to "
#~ "use a standard, well-known license, both to avoid confusion and because "
#~ "some organizations avoid software whose license is unapproved.)"
#~ msgstr ""
#~ "標準的でよく知られたライセンスを使うのであれば、このフィールドを使う必要は"
#~ "ありません。代わりに、 ``License::`` で始まる :ref:`分類子 <classifiers>` "
#~ "のうちのひとつを書いておけば良いでしょう。 (一般的な規則としては標準的でよ"
#~ "く知られたライセンスを使うことは良い考えです、というのは、混乱を避けるとこ"
#~ "とにもなるし、中には内部で認可済みのライセンスでなければソフトウェアを使え"
#~ "ない組織もあるからです。)"

#~ msgid ""
#~ "This guide is specifically for users of :ref:`setuptools`, other "
#~ "packaging tools such as ``flit`` may offer similar functionality but "
#~ "users will need to consult relevant documentation."
#~ msgstr ""
#~ "このガイドは特に :ref:`setuptools` のユーザに向けて書かれていますので、同"
#~ "様の機能を提供する ``flit`` のような他のパッケージングツールのユーザは適切"
#~ "な文書を参照する必要があるでしょう。"

#~ msgid "This workflow requires that:"
#~ msgstr "このワークフローは、以下を要求します:"

#~ msgid "The publisher is using the latest version of :ref:`setuptools`,"
#~ msgstr ""
#~ "(パッケージを)公開しようとするものが最新版の :ref:`setuptools` を使ってい"
#~ "て、"

#~ msgid "The latest version of :ref:`twine` is used to upload the package,"
#~ msgstr "最新版の :ref:`twine` を使ってパッケージのアップロードを行い、"

#~ msgid ""
#~ "Since it is possible to override the :file:`setup.cfg` settings via CLI "
#~ "flags, make sure that your scripts don't have ``--universal`` in your "
#~ "package creation scripts."
#~ msgstr ""
#~ "CLIでオプションを指定することで :file:`setup.cfg` ファイルでの設定を上書き"
#~ "することができるので、あなたのパッケージ生成スクリプトが ``--universal`` "
#~ "オプションを指定していないことを確実にしてください。"

#~ msgid "1. Download the newest version of Setuptools"
#~ msgstr "1. Setuptools の最新版をダウンロードする"

#~ msgid ""
#~ "Ensure that before you generate source distributions or binary "
#~ "distributions, you update Setuptools and install twine."
#~ msgstr ""
#~ "ソースコード配布物を生成するにせよ、バイナリ配布物を生成するにせよ、 "
#~ "Setuptools を更新し twine をインストールするようにしてください。"

#~ msgid "Steps:"
#~ msgstr "手順:"

#~ msgid "``setuptools`` version should be above 24.0.0."
#~ msgstr "``setuptools`` のバージョンが 24.0.0 以上であること。"

#~ msgid "Examples:"
#~ msgstr "例:"

#~ msgid ""
#~ "The way to set those values is within the call to ``setup`` within your :"
#~ "file:`setup.py` script. This will insert the ``Requires-Python`` metadata "
#~ "values based on the argument you provide in ``python_requires``."
#~ msgstr ""
#~ "このような値の設定は、 :file:`setup.py` スクリプトの中の ``setup`` の呼び"
#~ "出しの中で行えます。 ``python_requires`` 引数に設定した内容に基づいて "
#~ "``Requires-Python`` メタデータの値が挿入されます。"

#~ msgid "4. Using Twine to publish"
#~ msgstr "4. Twineを使って公開する"

#~ msgid ""
#~ "Twine has a number of advantages, apart from being faster it is now the "
#~ "supported method for publishing packages."
#~ msgstr ""
#~ "動作が速いことを別にしてもTwineには数多くの利点があり、今ではパッケージを"
#~ "公開するためのメソッドとしてサポートされています。"

#~ msgid "Make sure you are using the newest version of Twine, at least 1.9."
#~ msgstr "少なくとも1.9以上の最新のTwineを使うようにしてください。"

#~ msgid ""
#~ "Once you have published a package with the Requires-Python metadata, you "
#~ "can then make a further update removing that Python runtime from support."
#~ msgstr ""
#~ "Requires-Python メタデータ付きでパッケージを公開しさえすれば、次回以降の更"
#~ "新の際にPython ランタイムをサポートから外すことができるようになります。"

#~ msgid "It must be done in this order for the automated fallback to work."
#~ msgstr ""
#~ "自動フォールバックが正しく動作するためには、この順番で行わなければなりませ"
#~ "ん。"

#~ msgid ""
#~ "For example, you published the Requires-Python: \">=2.7\" as version "
#~ "1.0.0 of your package."
#~ msgstr ""
#~ "例えば、 Requires-Python: \">=2.7\" の状態であなたのパッケージのバージョ"
#~ "ン 1.0.0 を公開したとしましよう。"

#~ msgid ""
#~ "If you were then to update the version string to \">=3.5\", and publish a "
#~ "new version 2.0.0 of your package, any users running Pip 9.0+ from "
#~ "version 2.7 will have version 1.0.0 of the package installed, and any "
#~ ">=3.5 users will receive version 2.0.0."
#~ msgstr ""
#~ "その後、バージョン文字列を \">=3.5\" に修正した新しいバージョン 2.0.0 の"
#~ "パッケージを公開すれば、Pip 9.0+ を 2.7 で使っているユーザはバージョン "
#~ "1.0.0. のパッケージをインストールし、>=3.5 のユーザはバージョン 2.0.0 を受"
#~ "け取ることになるでしょう。"

#~ msgid "Update this page for build backends other than setuptools."
#~ msgstr ""
#~ "setuptools 以外のビルドバックエンドについてこのページを更新すること。"

#~ msgid ""
#~ "Read the file in :file:`setup.py` and get the version. Example (from `pip "
#~ "setup.py <https://github.com/pypa/pip/blob/003c7ac/setup.py>`_)::"
#~ msgstr ""
#~ ":file:`setup.py` に書かれたファイルを読み込んでバージョンを得ましょう。"
#~ "( `pip setup.py <https://github.com/pypa/pip/blob/003c7ac/setup.py>`_ で"
#~ "の) 例はこちら::"

#~ msgid ""
#~ "As of the release of setuptools 46.4.0, one can accomplish the same thing "
#~ "by instead placing the following in the project's :file:`setup.cfg` file "
#~ "(replacing \"package\" with the import name of the package):"
#~ msgstr ""
#~ "setuptools 46.4.0 のリリースでは、代わりに次のものを :file:`setup.cfg` "
#~ "ファイルに置くことで同じことを達成できています (\"package\" をパッケージを"
#~ "インポートする際の名前で置き換えてください) :"

#~ msgid ""
#~ "As of the release of setuptools 61.0.0, one can specify the version "
#~ "dynamically in the project's :file:`pyproject.toml` file."
#~ msgstr ""
#~ "setuptools 61.0.0 のリリースの時点では、プロジェクトの :file:`pyproject."
#~ "toml` ファイルの中にバージョンを動的に指定することができます。"

#~ msgid ""
#~ "Please be aware that declarative config indicators, including the ``attr:"
#~ "`` directive, are not supported in parameters to :file:`setup.py`."
#~ msgstr ""
#~ "``attr:`` ディレクティブを含む装飾的な設定指示子が、 :file:`setup.py` 向け"
#~ "のパラメータとしてはサポートされていないことに注意してください。"

#~ msgid ""
#~ "Use an external build tool that either manages updating both locations, "
#~ "or offers an API that both locations can use."
#~ msgstr ""
#~ "外部のビルドツールを使う場合は、両方の場所(ロケーション)を更新できるような"
#~ "もの、あるいは、両方のサイトから使える API を提供しているものを使いましょ"
#~ "う。"

#~ msgid ""
#~ "Few tools you could use, in no particular order, and not necessarily "
#~ "complete: `bump2version <https://pypi.org/project/bump2version>`_, "
#~ "`changes <https://pypi.org/project/changes>`_, `commitizen <https://pypi."
#~ "org/project/commitizen>`_, `zest.releaser <https://pypi.org/project/zest."
#~ "releaser>`_."
#~ msgstr ""
#~ "使えるかもしれない外部のビルドツールのリスト、ただし、順不同で、ここに挙げ"
#~ "られていなくても使えるものがあるかもしれません: `bump2version <https://"
#~ "pypi.org/project/bump2version>`_, `changes <https://pypi.org/project/"
#~ "changes>`_, `commitizen <https://pypi.org/project/commitizen>`_, `zest."
#~ "releaser <https://pypi.org/project/zest.releaser>`_."

#~ msgid ""
#~ "Set the value to a ``__version__`` global variable in a dedicated module "
#~ "in your project (e.g. :file:`version.py`), then have :file:`setup.py` "
#~ "read and ``exec`` the value into a variable."
#~ msgstr ""
#~ "プロジェクト内にグローバル変数の ``__version__`` に値を設定した専用のモ"
#~ "ジュール (例えば :file:`version.py`) を作って :file:`setup.py` からそれを"
#~ "読み取って ``exec`` で値を変数に取り込むと良いでしょう。"

#~ msgid ""
#~ "Example using this technique: `warehouse <https://github.com/pypa/"
#~ "warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/"
#~ "__about__.py>`_."
#~ msgstr ""
#~ "このテクニックを使っている例: `warehouse <https://github.com/pypa/"
#~ "warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/"
#~ "__about__.py>`_ 。"

#~ msgid ""
#~ "Place the value in a simple ``VERSION`` text file and have both :file:"
#~ "`setup.py` and the project code read it."
#~ msgstr ""
#~ "単純に ``VERSION`` という名前のテキストファイルに値を書いておいて、 :file:"
#~ "`setup.py` とプロジェクトのソースコードの両方から読み込みます。"

#~ msgid ""
#~ "An advantage with this technique is that it's not specific to Python.  "
#~ "Any tool can read the version."
#~ msgstr ""
#~ "このテクニックを使う利点は、Python に限定されたやり方ではないということで"
#~ "す。どんなツールでもバージョン番号を読み取ることができます。"

#~ msgid ""
#~ "With this approach you must make sure that the ``VERSION`` file is "
#~ "included in all your source and binary distributions (e.g. add ``include "
#~ "VERSION`` to your :file:`MANIFEST.in`)."
#~ msgstr ""
#~ "このやり方を採用するなら、 ``VERSION`` ファイルがすべてのソースコードとバ"
#~ "イナリの配布物に含まれているように気を付けてください (例えば :file:"
#~ "`MANIFEST.in` に ``include VERSION`` を追加しておくなど)。"

#~ msgid ""
#~ "Set the value in :file:`setup.py`, and have the project code use the "
#~ "``importlib.metadata`` API to fetch the value at runtime. (``importlib."
#~ "metadata`` was introduced in Python 3.8 and is available to older "
#~ "versions as the ``importlib-metadata`` project.)  An installed project's "
#~ "version can be fetched with the API as follows::"
#~ msgstr ""
#~ ":file:`setup.py` に値を保存して、プロジェクトのソースコードが ``importlib."
#~ "metadata`` API を使ってその値を動作中に取得するようにしましょう。 "
#~ "(``importlib.metadata`` は Python 3.8 で導入されていて、それより古いバー"
#~ "ジョンでは ``importlib-metadata`` プロジェクトとして利用可能になっていま"
#~ "す) インストール済みのプロジェクトのバージョン番号をこの API で取り込むに"
#~ "は次のようにします::"

#~ msgid ""
#~ "Be aware that the ``importlib.metadata`` API only knows about what's in "
#~ "the installation metadata, which is not necessarily the code that's "
#~ "currently imported."
#~ msgstr ""
#~ "``importlib.metadata`` API が知っているのはインストールされたパッケージの"
#~ "メタデータだけであって、現在インポートされているソースコードについて知って"
#~ "いるとは限らないことに注意してください。"

#~ msgid ""
#~ "If a project uses this method to fetch its version at runtime, then its "
#~ "``install_requires`` value needs to be edited to install ``importlib-"
#~ "metadata`` on pre-3.8 versions of Python like so::"
#~ msgstr ""
#~ "あるプロジェクトで動作中にバージョン番号を取得する方法を使っているのであれ"
#~ "ば、Python 3.8 よりも古いバージョンを使う場合はそのプロジェクトの "
#~ "``install_requires`` に ``importlib-metadata`` を書いておかなければなりま"
#~ "せん::"

#~ msgid ""
#~ "An older (and less efficient) alternative to ``importlib.metadata`` is "
#~ "the ``pkg_resources`` API provided by ``setuptools``::"
#~ msgstr ""
#~ "``importlib.metadata`` に対するもっと古い (かつ、より非効率な) 代替策は、 "
#~ "``setuptools`` が提供する ``pkg_resources`` API です::"

#~ msgid ""
#~ "If a project uses ``pkg_resources`` to fetch its own version at runtime, "
#~ "then ``setuptools`` must be added to the project's ``install_requires`` "
#~ "list."
#~ msgstr ""
#~ "あるプロジェクトで自分自身のバージョン番号を動作中に取得するために "
#~ "``pkg_resources`` を使っているなら、プロジェクトの ``install_requires`` の"
#~ "リストには必ず ``setuptools`` が入っていないといけません。"

#~ msgid ""
#~ "Example using this technique: `setuptools <https://github.com/pypa/"
#~ "setuptools/blob/main/setuptools/version.py>`_."
#~ msgstr ""
#~ "このテクニックを使っている例: `setuptools <https://github.com/pypa/"
#~ "setuptools/blob/main/setuptools/version.py>`_."

#~ msgid ""
#~ "Set the value to ``__version__`` in ``sample/__init__.py`` and import "
#~ "``sample`` in :file:`setup.py`."
#~ msgstr ""
#~ "``sample/__init__.py`` で ``__version__`` に値を設定して、 :file:`setup."
#~ "py` から ``sample`` をインポートしましょう。"

#~ msgid ""
#~ "Although this technique is common, beware that it will fail if ``sample/"
#~ "__init__.py`` imports packages from ``install_requires`` dependencies, "
#~ "which will very likely not be installed yet when :file:`setup.py` is run."
#~ msgstr ""
#~ "このテクニックはよく知られたものだが、 ``install_requires`` で定義された依"
#~ "存先パッケージを ``sample/__init__.py`` がインポートしている場合には、その"
#~ "ようなパッケージは :file:`setup.py` が実行される時点ではまだインストールさ"
#~ "れていない可能性が高いので、失敗するであろうということに注意してください。"

#~ msgid ""
#~ "Keep the version number in the tags of a version control system (Git, "
#~ "Mercurial, etc) instead of in the code, and automatically extract it from "
#~ "there using `setuptools_scm <https://pypi.org/project/setuptools-scm/>`_."
#~ msgstr ""
#~ "ソースコード内ではなくバージョンコントロールシステム (Git, Mercurialなど) "
#~ "のタグの中にバージョン番号を保持して、そこから `setuptools_scm <https://"
#~ "pypi.org/project/setuptools-scm/>`_ を使って取り出しましょう。"

#~ msgid ""
#~ "There is a significant difference between the ``[build-system]`` and "
#~ "``[project]`` tables. The former should always be present, regardless of "
#~ "which build backend you use (since it *defines* the tool you use). The "
#~ "latter is understood by *most* build backends, but some build backends "
#~ "use a different format."
#~ msgstr ""
#~ "``[build-system]`` と ``[project]`` の二つのテーブルの間には、大きな差異が"
#~ "あります。どんなビルドバックエンドを使うのかに関わりなく前者は常に存在して"
#~ "いなければなりません (というのも、どのツールを使うのかをこのテーブルで定義"
#~ "するからです)。後者は、 *ほとんどの* ビルドバックエンドが理解しますが、一"
#~ "部のバックエンドは異なったフォーマットのものを用います。"

#~ msgid ""
#~ "At the time of writing this (November 2023), Poetry_ is a notable build "
#~ "backend that does not use the ``[project]`` table (it uses the ``[tool."
#~ "poetry]`` table instead)."
#~ msgstr ""
#~ "これを書いている時点 (2023年11月) では、 ``[project]`` テーブルを使わない"
#~ "ビルドバックエンドとしては、 Poetry_ が有名です (代わりに ``[tool."
#~ "poetry]`` テーブルを使います) 。"

#~ msgid ""
#~ "conda is the package management tool for `Anaconda <https://docs.anaconda."
#~ "com/anaconda/>`__ Python installations. Anaconda Python is a distribution "
#~ "from `Anaconda, Inc <https://www.anaconda.com/products/individual>`__ "
#~ "specifically aimed at the scientific community, and in particular on "
#~ "Windows where the installation of binary extensions is often difficult."
#~ msgstr ""
#~ "conda は、 Python 実装である `Anaconda <https://docs.anaconda.com/"
#~ "anaconda/>`__ のためのパッケージ管理ツールです。Anaconda Python は、 "
#~ "`Anaconda, Inc <https://www.anaconda.com/products/individual>`__ が特に科"
#~ "学計算の分野に向けて配布している配布物で、とりわけ通常ならバイナリ拡張のイ"
#~ "ンストールが難しいとされる Windows 用に配布しています。"

#~ msgid ""
#~ "This spec sets the current API version to \"1.0\", and expects that "
#~ "future specs that further evolve the simple API will increment the minor "
#~ "version number."
#~ msgstr ""
#~ "この仕様は、現在の API バージョンを \"1.0\" と定め、シンプルな API をさら"
#~ "に進化させる将来の仕様がマイナーバージョン番号を増加させるであろうことを期"
#~ "待しています。"

#~ msgid "Additional Fields for the Simple API for Package Indexes"
#~ msgstr "パッケージインデックス用のシンプル API 向けの追加的なフィールド"

#~ msgid ""
#~ "This specification defines version 1.1 of the simple repository API. For "
#~ "the HTML version of the API, there is no change from version 1.0. For the "
#~ "JSON version of the API, the following changes are made:"
#~ msgstr ""
#~ "この仕様では、シンプルなリポジトリ API のバージョン 1.1 を定義します。API "
#~ "の HTML バージョンについては、バージョン 1.0 から何ら変わるところがありま"
#~ "せん。API の JSON バージョンについては、以下のような変更が行われました:"

#~ msgid "The ``api-version`` must specify version 1.1 or later."
#~ msgstr ""
#~ "``api-version`` に 1.1 またはそれ以降のバージョンを指定しなければなりませ"
#~ "ん。"

#~ msgid ""
#~ "Two new \"file information\" keys, ``size`` and ``upload-time``, are "
#~ "added to the ``files`` data."
#~ msgstr ""
#~ "\"ファイル情報\" のキー群のふたつのキー、 つまり ``size`` と ``upload-"
#~ "time`` 、が ``files`` データに追加されました。"

#~ msgid ""
#~ "The ``versions`` and ``size`` keys are mandatory. The ``upload-time`` key "
#~ "is optional."
#~ msgstr ""
#~ "``versions`` キーと ``size`` キーは必須のものです。 ``upload-time`` キーは"
#~ "オプションです。"

#~ msgid "Additional file information"
#~ msgstr "補足的なファイル情報"

#~ msgid "Two new keys are added to the ``files`` key."
#~ msgstr "``files`` キーにふたつの新しいキーが追加されました。"

#~ msgid "Rename dist-info-metadata in the Simple API"
#~ msgstr "シンプル API の dist-info-metadata の名称変更"

#~ msgid "Servers"
#~ msgstr "サーバ"

#~ msgid ""
#~ "The :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata, when used in the HTML representation of the "
#~ "Simple API, **MUST** be emitted using the attribute name ``data-core-"
#~ "metadata``, with the supported values remaining the same."
#~ msgstr ""
#~ "シンプル APIの HTML 表現の中で用いられる時は、 :ref:`API メタデータファイ"
#~ "ルの仕様 <simple-repository-api-metadata-file>` のメタデータは ``data-"
#~ "core-metadata`` という名称のアトリビュートを使ってサポートされている値が同"
#~ "一のまま発信されなければなりません。"

#~ msgid ""
#~ "The :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata, when used in the :ref:`the JSON API "
#~ "specification <simple-repository-api-base>` JSON representation of the "
#~ "Simple API, **MUST** be emitted using the key ``core-metadata``, with the "
#~ "supported values remaining the same."
#~ msgstr ""
#~ ":ref:`API メタデータファイルの仕様 <simple-repository-api-metadata-file>` "
#~ "のメタデータは、シンプル API の :ref:`JSON API 仕様 <simple-repository-"
#~ "api-base>` による JSON 表現で使われる場合、サポートされている値は同一に"
#~ "保ったままで ``core-metadata`` キーを使って **送信されなければなりません"
#~ "** 。"

#~ msgid ""
#~ "To support clients that used the previous key names, the HTML "
#~ "representation **MAY** also be emitted using the ``data-dist-info-"
#~ "metadata``, and if it does so it **MUST** match the value of ``data-core-"
#~ "metadata``."
#~ msgstr ""
#~ "以前のキーの名称を使っているクライアントをサポートするためには、 HTML 表現"
#~ "では ``data-dist-info-metadata`` を使って送信しても **構いません** し、そ"
#~ "の場合には ``data-core-metadata`` の値と **合致していなければなりません"
#~ "** 。"

#~ msgid ""
#~ "Clients consuming any of the HTML representations of the Simple API "
#~ "**MUST** read the :ref:`the API metadata file specification <simple-"
#~ "repository-api-metadata-file>` metadata from the key ``data-core-"
#~ "metadata`` if it is present. They **MAY** optionally use the legacy "
#~ "``data-dist-info-metadata`` if it is present but ``data-core-metadata`` "
#~ "is not."
#~ msgstr ""
#~ "シンプル API の HTML 表現を消費するクライアントは、もしそれが存在するなら"
#~ "ば、 :ref:`API メタデータファイルの仕様 <simple-repository-api-metadata-"
#~ "file>` のメタデータを ``data-core-metadata`` キーから **読み込まなければな"
#~ "りません** 。従来の ``data-dist-info-metadata`` キーは存在しているが "
#~ "``data-core-metadata`` は存在していないという場合には、オプションとして前"
#~ "者を **使っても構いません** 。"

#~ msgid ""
#~ "Clients consuming the JSON representation of the Simple API **MUST** read "
#~ "the :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata from the key ``core-metadata`` if it is present. "
#~ "They **MAY** optionally use the legacy ``dist-info-metadata`` key if it "
#~ "is present but ``core-metadata`` is not."
#~ msgstr ""
#~ "シンプル API の JSON 表現を消費するクライアントは、もしそれが存在するなら"
#~ "ば、 :ref:`API メタデータファイルの仕様 <simple-repository-api-metadata-"
#~ "file>` のメタデータを ``core-metadata`` キーから **読み込まなければなりま"
#~ "せん** 。従来の ``dist-info-metadata`` キーは存在しているが ``core-"
#~ "metadata`` は存在していないという場合には、オプションとして前者を **使って"
#~ "も構いません** 。"

#~ msgid ""
#~ "Most build backends automatically include license files in packages. See "
#~ "your backend's documentation for more details."
#~ msgstr ""
#~ "ほとんどのビルドバックエンドは、パッケージ群のライセンスファイルを自動的に"
#~ "取り込みます。詳細については、あなたが使うバックエンドの説明文書を見てくだ"
#~ "さい。"

#~ msgid ""
#~ "You will be prompted for a username and password. For the username, use "
#~ "``__token__``. For the password, use the token value, including the "
#~ "``pypi-`` prefix."
#~ msgstr ""
#~ "ユーザ名とパスワードの入力を促されることでしょう。ユーザ名には "
#~ "``__token__`` を使ってください。パスワードには接頭子の ``pypi-`` を含めた"
#~ "トークンの値を使ってください。"

#~ msgid ""
#~ "A library that takes a source tree or :term:`source distribution <Source "
#~ "Distribution (or \"sdist\")>` and builds a source distribution or :term:"
#~ "`wheel <Wheel>` from it. The build is delegated to the backend by a :term:"
#~ "`frontend <Build Frontend>`. All backends offer a standardized interface."
#~ msgstr ""
#~ "ソースコードツリーや :term:`ソースコード配布物 <Source Distribution (or "
#~ "\"sdist\")>` を受け取って、そこからソースコード配布物や :term:`wheel "
#~ "<Wheel>` をビルドするライブラリ。ビルド自体は :term:`フロントエンド "
#~ "<Build Frontend>` によってバックエンドに任されます。すべてのバックエンドは"
#~ "標準化されたインターフェースを提供します。"

#~ msgid ""
#~ "A :term:`distribution <Distribution Package>` format (usually generated "
#~ "using ``python -m build --sdist``) that provides metadata and the "
#~ "essential source files needed for installing by a tool like :ref:`pip`, "
#~ "or for generating a :term:`Built Distribution`. See :ref:`package-"
#~ "formats` for more information."
#~ msgstr ""
#~ ":ref:`pip` のようなツールによるインストールや :term:`ビルド済配布物 "
#~ "<Built Distribution>` の生成のために必要となるメタデータや基本的なソース"
#~ "コードファイル群を提供する :term:`配布物 <Distribution Package>` フォー"
#~ "マット (通常は ``python -m build --sdist`` を使って生成されます) 。もっと"
#~ "情報が欲しければ、 :ref:`パッケージフォーマット <package-formats>` を見て"
#~ "ください。"

#~ msgid ""
#~ "The standard :term:`Built Distribution` format. See :ref:`package-"
#~ "formats` for more information."
#~ msgstr ""
#~ "標準的な :term:`ビルド済配布物 <Built Distribution>` フォーマット。更なる"
#~ "情報が知りたければ :ref:`パッケージフォーマット <package-format>` を見てく"
#~ "ださい。"

#~ msgid "The summary description of the project."
#~ msgstr "プロジェクトを要約する記述。"

#~ msgid "Wheel vs Egg"
#~ msgstr "Wheel対Egg"

#~ msgid ""
#~ ":term:`Wheel` and :term:`Egg` are both packaging formats that aim to "
#~ "support the use case of needing an install artifact that doesn't require "
#~ "building or compilation, which can be costly in testing and production "
#~ "workflows."
#~ msgstr ""
#~ ":term:`Wheel`と :term:`Egg`は、どちらも、試験目的の場合や本番環境の場合に"
#~ "はコストが高すぎるビルドやコンパイルをしなくてもプログラムをインストールす"
#~ "るというユースケースに対応することを目指したパッケージングのフォーマットで"
#~ "す。"

#~ msgid ""
#~ "The :term:`Egg` format was introduced by :ref:`setuptools` in 2004, "
#~ "whereas the :term:`Wheel` format was introduced by :pep:`427` in 2012."
#~ msgstr ""
#~ ":term:`Egg`のフォーマットは、2004年に:ref:`setuptools`によって、また、:"
#~ "term:`Wheel`のフォーマットは2012年に:pep:`427`によって導入されました。"

#~ msgid ""
#~ ":term:`Wheel` is currently considered the standard for :term:`built "
#~ "<Built Distribution>` and :term:`binary <Binary Distribution>` packaging "
#~ "for Python."
#~ msgstr ""
#~ ":term:`Wheel`は、現在、Pythonにおける :term:`ビルド済配布物 <Built "
#~ "Distribution>`および :term:`バイナリ配布物 <Binary Distribution>`の標準で"
#~ "あるとみなされています。"

#~ msgid ""
#~ "Here's a breakdown of the important differences between :term:`Wheel` "
#~ "and :term:`Egg`."
#~ msgstr ":term:`Wheel`と :term:`Egg`の重要な差異について以下にまとめます。"

#~ msgid ""
#~ ":term:`Wheel` has an :doc:`official standard specification </"
#~ "specifications/binary-distribution-format>`. :term:`Egg` did not."
#~ msgstr ""
#~ ":term:`Wheel`には :doc:`公式の標準仕様 </specifications/binary-"
#~ "distribution-format>` が存在します。 :term:`Egg`には対応するPEPがありませ"
#~ "ん。"

#~ msgid ""
#~ ":term:`Wheel` is a :term:`distribution <Distribution Package>` format, i."
#~ "e a packaging format. [1]_ :term:`Egg` was both a distribution format and "
#~ "a runtime installation format (if left zipped), and was designed to be "
#~ "importable."
#~ msgstr ""
#~ ":term:`Wheel`は :term:`配布物 <Distribution Package>`のフォーマット、つま"
#~ "り、パッケージのフォーマットです。[1]_ :term:`Egg`は配布物のフォーマットで"
#~ "もあり、かつ、(もし圧縮されたままであれば)実行時のインストールフォーマット"
#~ "であってimportができるように設計されています。"

#~ msgid ""
#~ ":term:`Wheel` archives do not include .pyc files. Therefore, when the "
#~ "distribution only contains Python files (i.e. no compiled extensions), "
#~ "and is compatible with Python 2 and 3, it's possible for a wheel to be "
#~ "\"universal\", similar to an :term:`sdist <Source Distribution (or "
#~ "\"sdist\")>`."
#~ msgstr ""
#~ ":term:`Wheel`形式のファイルには.pycファイルが含まれていません。従って、配"
#~ "布物には(コンパイル済のファイル抜きの)Pythonファイルのみ(含み、Pythonの"
#~ "バージョン2と3で使用可能ですので、 :term:`sdist <Source Distribution (or "
#~ "\"sdist\")>`と同様にwheelは「汎用」であると言うことができます。"

#~ msgid ""
#~ ":term:`Wheel` uses :pep:`PEP376-compliant <376>` ``.dist-info`` "
#~ "directories. Egg used ``.egg-info``."
#~ msgstr ""
#~ ":term:`Wheel`は :pep:`PEP376-compliant <376>`に従って ``.dist-info`` ディ"
#~ "レクトリを用います。Eggは ``.egg-info`` を用います。"

#~ msgid ""
#~ ":term:`Wheel` has a :pep:`richer file naming convention <425>`. A single "
#~ "wheel archive can indicate its compatibility with a number of Python "
#~ "language versions and implementations, ABIs, and system architectures."
#~ msgstr ""
#~ ":term:`Wheel`には:pep:`richer file naming convention <425>`が存在します。"
#~ "単独のwheelアーカイブはPython言語のバージョンや実装、ABI、そしてシステムの"
#~ "アーキテクチャとの互換性を表示することができます。"

#~ msgid ""
#~ ":term:`Wheel` is versioned. Every wheel file contains the version of the "
#~ "wheel specification and the implementation that packaged it."
#~ msgstr ""
#~ ":term:`Wheel`はバージョン付けされています。それぞれのwheelファイルは、それ"
#~ "をパッケージしたwheelの仕様や実装のバージョンを保持しています。"

#~ msgid ""
#~ ":term:`Wheel` is internally organized by `sysconfig path type <https://"
#~ "docs.python.org/2/library/sysconfig.html#installation-paths>`_, therefore "
#~ "making it easier to convert to other formats."
#~ msgstr ""
#~ ":term:`Wheel`は内部では`sysconfigパスの型 <https://docs.python.org/2/"
#~ "library/sysconfig.html#installation-paths>`_で整理されているので、他の"
#~ "フォーマットに変換するのがより簡単になっています。"

#~ msgid ""
#~ ":term:`Egg` uploads have been disabled for upload to PyPI, per :pep:"
#~ "`715`. Read the `deprecation notice <https://blog.pypi.org/"
#~ "posts/2023-06-26-deprecate-egg-uploads/>`_ for more information."
#~ msgstr ""
#~ ":term:`Egg` によるアップロードは、 :pep:`715` に従って PyPI へのアップロー"
#~ "ドとしては無効になっています。もっと情報が欲しい場合は、 `非推奨のお知ら"
#~ "せ <deprecation notice> <https://blog.pypi.org/posts/2023-06-26-deprecate-"
#~ "egg-uploads/>`_ を読んでください。"

#~ msgid ""
#~ "A :term:`Distribution <Distribution Package>` format containing files and "
#~ "metadata that only need to be moved to the correct location on the target "
#~ "system, to be installed. :term:`Wheel` is such a format, whereas "
#~ "distutil's :term:`Source Distribution <Source Distribution (or "
#~ "\"sdist\")>` is not, in that it requires a build step before it can be "
#~ "installed.  This format does not imply that Python files have to be "
#~ "precompiled (:term:`Wheel` intentionally does not include compiled Python "
#~ "files)."
#~ msgstr ""
#~ ":term:`配布物 <Distribution Package>`とは、ターゲットとなるシステムの適切"
#~ "な位置に移動することでインストールされるファイルやメタデータを内包した"
#~ "フォーマットです。:term:`Wheel`はそのようなフォーマットですが、他方で、"
#~ "distutilの :term:`ソースコード配布物 <Source Distribution`(\"sdist\"とも)"
#~ "はそうではなく、インストール可能になる前にビルドする段階が必要です。この"
#~ "フォーマットを念頭に置くと、Pythonファイルが必ずしも予めコンパイルされてい"
#~ "る必要はないことがわかります(:term:`Wheel`は意図的にコンパイル済みのPython"
#~ "ファイルを含まないようにしています)。"

#~ msgid ""
#~ "A :term:`Built Distribution` format introduced by :ref:`setuptools`, "
#~ "which is being replaced by :term:`Wheel`.  For details, see :doc:`The "
#~ "Internal Structure of Python Eggs <setuptools:deprecated/python_eggs>` "
#~ "and `Python Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
#~ msgstr ""
#~ ":term:`ビルド済配布物 <Built Distribution>`フォーマットは :ref:"
#~ "`setuptools`によって導入されましたが、 :term:`Wheel`によって置き換えられつ"
#~ "つあります。詳細については、 :doc:`Python Eggsの内部構造 <setuptools:"
#~ "deprecated/python_eggs>` や `Python Eggs <http://peak.telecommunity.com/"
#~ "DevCenter/PythonEggs>`_ を参照してください。"

#~ msgid ""
#~ "A :term:`distribution <Distribution Package>` format (usually generated "
#~ "using ``python -m build --sdist``) that provides metadata and the "
#~ "essential source files needed for installing by a tool like :ref:`pip`, "
#~ "or for generating a :term:`Built Distribution`."
#~ msgstr ""
#~ ":ref:`pip`のようなツールでインストールする時や :term:`ビルド配布物 <Build "
#~ "Distribution>` を生成する時に必要なメタデータと必須ソースコードを提供す"
#~ "る、(通常は ``python -m build --sdist`` を使って生成される) :term:`配布物 "
#~ "<Distribution Package>` フォーマット 。"

#~ msgid ""
#~ "A :term:`Built Distribution` format introduced by an official :doc:"
#~ "`standard specification </specifications/binary-distribution-format/>`, "
#~ "which is intended to replace the :term:`Egg` format.  Wheel is currently "
#~ "supported by :ref:`pip`."
#~ msgstr ""
#~ ":term:`ビルド済配布物 <Built Distribution>` フォーマットは、 :term:`Egg` "
#~ "フォーマットを置換することを意図して、公式の :doc:`標準仕様 </"
#~ "specifications/binary-distribution-format/>` で導入されました。Wheel は、"
#~ "現時点では、 :ref:`pip` によってサポートされています。"

#~ msgid ""
#~ "A ``requested_revision`` key (type ``string``) MAY be present naming a "
#~ "branch/tag/ref/commit/revision/etc (in a format compatible with the VCS)."
#~ msgstr ""
#~ "``requested_revision`` キー (``string`` 型) は、ブランチ・タグ・リファレン"
#~ "ス・コミット・リビジョンその他を指定するために存在していても構いません "
#~ "(VCS と互換性を持つフォーマットにて)。"

#~ msgid ""
#~ "If you're familiar with Python packaging and installation, and just want "
#~ "to know what tools are currently recommended, then here it is."
#~ msgstr ""
#~ "もしあなたが Python のパッケージングやインストールに慣れていて、今どんな"
#~ "ツールが推奨されているかを知りたいだけなら、ここを見てください。"

#~ msgid "Application dependency management"
#~ msgstr "アプリケーションの依存先管理"

#~ msgid ""
#~ "Use :ref:`pip` in a `secure manner`_ to install a Python application and "
#~ "its dependencies during deployment."
#~ msgstr ""
#~ "デプロイメントの間に Python アプリケーションとその依存先をインストールする"
#~ "には、:ref:`pip` を `secure manner`_ で使ってください。"

#~ msgid ""
#~ "Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
#~ "application-specific dependencies from a shared Python installation. [4]_"
#~ msgstr ""
#~ "共有された Python のインストール環境からアプリケーションに特有の依存関係を"
#~ "独立させるためには、 :ref:`virtualenv` ないし :doc:`venv <python:library/"
#~ "venv>` を使いましょう。 [4]_"

#~ msgid ""
#~ "Use `pip-tools`_, :ref:`pipenv`, or `poetry`_ to generate the fully-"
#~ "specified application-specific dependencies, when developing Python "
#~ "applications."
#~ msgstr ""
#~ "Python アプリケーションを開発するときに、完全に指定されたアプリケーション"
#~ "特有の依存関係を満たす環境を作るには `pip-tools`_ や :ref:`pipenv` 、ある"
#~ "いは `poetry`_ を使ってください。"

#~ msgid "Installation tool recommendations"
#~ msgstr "推奨ツールのインストール"

#~ msgid ""
#~ "Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
#~ "from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on "
#~ "how :ref:`pip` is installed, you may need to also install :ref:`wheel` to "
#~ "get the benefit of wheel caching. [3]_"
#~ msgstr ""
#~ ":term:`PyPI <Python Package Index (PyPI)>` から :term:`パッケージ "
#~ "<Distribution Package>` をインストールするには :ref:`pip` を使いましょ"
#~ "う。 [1]_ [2]_ :ref:`pip` がどのようにインストールされているかによっては、"
#~ "wheel のキャッシュの利益を得るために :ref:`wheel` を追加でインストールする"
#~ "必要があるかもしれません。 [3]_"

#~ msgid ""
#~ "Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
#~ "project-specific dependencies from a shared Python installation. [4]_"
#~ msgstr ""
#~ "共有された Python のインストール環境からプロジェクトに特有の依存関係を独立"
#~ "させるためには、 :ref:`virtualenv` ないし :doc:`venv <python:library/"
#~ "venv>` を使いましょう。 [4]_"

#~ msgid ""
#~ "If you're looking for management of fully integrated cross-platform "
#~ "software stacks, consider:"
#~ msgstr ""
#~ "完全に統合されたクロスプラットフォームなソフトウェアスタックの管理ツールを"
#~ "探しているのであれば、以下を検討してください:"

#~ msgid ":ref:`buildout`: primarily focused on the web development community"
#~ msgstr ":ref:`buildout`: 主としてweb開発コミュニティに焦点を合わせている"

#~ msgid ""
#~ ":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
#~ "scientific community."
#~ msgstr ""
#~ ":ref:`spack` ・ :ref:`hashdist` ・ :ref:`conda`: 主として科学計算分野のコ"
#~ "ミュニティに焦点を合わせている。"

#~ msgid "Packaging tool recommendations"
#~ msgstr "推奨するパッケージングツール"

#~ msgid "Use :ref:`setuptools` to define projects. [5]_ [6]_"
#~ msgstr "プロジェクトを定義するために :ref:`setuptools` を用いる。[5]_ [6]_"

#~ msgid ""
#~ "Use :ref:`build` to create :term:`Source Distributions <Source "
#~ "Distribution (or \"sdist\")>` and :term:`wheels <Wheel>`."
#~ msgstr ""
#~ ":term:`ソースコード配布物 <Source Distribution (or \"sdist\")>` や :term:"
#~ "`wheels <Wheel>` を生成するためには、 :ref:`build` を使いましょう。"

#~ msgid ""
#~ "Use `twine <https://pypi.org/project/twine>`_ for uploading distributions "
#~ "to :term:`PyPI <Python Package Index (PyPI)>`."
#~ msgstr ""
#~ "配布物を :term:`PyPI <Python Package Index (PyPI)>` へアップロードするに"
#~ "は、 `twine <https://pypi.org/project/twine>`_ を使いましょう。"

#~ msgid "Publishing platform migration"
#~ msgstr "プラットフォームの移行を公開する"

#~ msgid ""
#~ "The original Python Package Index implementation (previously hosted at "
#~ "`pypi.python.org <https://pypi.python.org>`_) has been phased out in "
#~ "favour of an updated implementation hosted at `pypi.org <https://pypi."
#~ "org>`_."
#~ msgstr ""
#~ "元々の Python パッケージインデックスの実装 (以前は `pypi.python.org "
#~ "<https://pypi.python.org>`_ にホストされていました) は、更新された実装が "
#~ "`pypi.org <https://pypi.org>`_ にホストされたので、すでに停止されていま"
#~ "す。"

#~ msgid ""
#~ "See :ref:`Migrating to PyPI.org` for more information on the status of "
#~ "the migration, and what settings to change in your clients."
#~ msgstr ""
#~ "この移行の状態に関する詳細やクライアント側での設定変更については、 :ref:"
#~ "`PyPI.org への移行 <Migrating to PyPI.org>` を見てください。"

#~ msgid ""
#~ "There are some cases where you might choose to use ``easy_install`` "
#~ "(from :ref:`setuptools`), e.g. if you need to install from :term:`Eggs "
#~ "<Egg>` (which pip doesn't support).  For a detailed breakdown, see :ref:"
#~ "`pip vs easy_install`."
#~ msgstr ""
#~ "例えば (pip がサポートしていない) :term:`Eggs <Eggs>` からインストールする"
#~ "必要がある場合など、 (:ref:`setuptools` 由来の) ``easy_install`` を使いた"
#~ "くなる場合もあるでしょう、どちらを使うべきかの詳細については、 :ref:`pip "
#~ "vs easy_install` を見てください。"

#~ msgid ""
#~ "The acceptance of :pep:`453` means that :ref:`pip` will be available by "
#~ "default in most installations of Python 3.4 or later.  See the :pep:"
#~ "`rationale section <453#rationale>` from :pep:`453` as for why pip was "
#~ "chosen."
#~ msgstr ""
#~ ":pep:`453` を受け入れるということは、Python 3.4 やそれ以降がインストールさ"
#~ "れていればほとんどの場合にデフォルトで :ref:`pip` が使えるはずだということ"
#~ "になります。なぜ pip が選ばれたのかについては、 :pep:`453` のページの :"
#~ "pep:`根拠の節 <453#rationale>` を見てください。"

#~ msgid ""
#~ "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and :ref:"
#~ "`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:"
#~ "`venv <venv>` do not currently.  Also, the common \"python-pip\" package "
#~ "that's found in various linux distros, does not depend on \"python-"
#~ "wheel\" currently."
#~ msgstr ""
#~ "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ および :ref:"
#~ "`virtualenv` install :ref:`wheel` の場合は必要、他方で :ref:`ensurepip` "
#~ "と :ref:`venv <venv>` は現時点では依存していません。また、さまざまな "
#~ "linux ディストロに含まれる通常の \"python-pip\" パッケージは、現時点では "
#~ "\"python-wheel\" に依存していません。"

#~ msgid ""
#~ "Beginning with Python 3.4, ``venv`` will create virtualenv environments "
#~ "with ``pip`` installed, thereby making it an equal alternative to :ref:"
#~ "`virtualenv`. However, using :ref:`virtualenv` will still be recommended "
#~ "for users that need cross-version consistency."
#~ msgstr ""
#~ "Python 3.4 以降では、 ``venv`` は ``pip`` がインストール済みの virtualenv "
#~ "環境を生成するので、 :ref:`virtualenv` の代替物となっています。しかしなが"
#~ "ら、バージョンまたぎの一貫性を必要とするユーザ向けには依然として :ref:"
#~ "`virtualenv` を使うことを推奨します。"

#~ msgid ""
#~ "Although you can use pure :ref:`distutils` for many projects, it does not "
#~ "support defining dependencies on other projects and is missing several "
#~ "convenience utilities for automatically populating distribution metadata "
#~ "correctly that are provided by ``setuptools``. Being outside the standard "
#~ "library, ``setuptools`` also offers a more consistent feature set across "
#~ "different versions of Python, and (unlike ``distutils``), recent versions "
#~ "of ``setuptools`` support all of the modern metadata fields described in :"
#~ "ref:`core-metadata`."
#~ msgstr ""
#~ "多くのプロジェクトでは :ref:`distutils` をそのままの状態で使うことができま"
#~ "すが、このツールは他のプロジェクトへの依存関係を定義できず、また、"
#~ "``setuptools`` によって提供されるメタデータを配布物中に自動で正しく配置す"
#~ "るための便利なユーティリティがいくつか不足しています。標準ライブラリではあ"
#~ "りませんが、 ``setuptools`` は、また、Python の異なるバージョンを跨ぐ形で"
#~ "ずっと一貫性のある機能を提供しますし、(``distutils`` とは異なって) 最近の"
#~ "バージョンの ``setuptools`` は :ref:`core-metadata` に記述されているような"
#~ "近代的なメタデータ記入項目をすべてサポートしています。"

#~ msgid ""
#~ "Even for projects that do choose to use ``distutils``, when :ref:`pip` "
#~ "installs such projects directly from source (rather than installing from "
#~ "a prebuilt :term:`wheel <Wheel>` file), it will actually build your "
#~ "project using :ref:`setuptools` instead."
#~ msgstr ""
#~ "``distutils`` を使うことを選択したプロジェクトでさえも、(ビルド済みの :"
#~ "term:`wheel <Wheel>` ファイルからインストールするのではなく) :ref:`pip` で"
#~ "ソースコードから直接にインストールした場合には、実際には代わりに :ref:"
#~ "`setuptools` を使ってプロジェクトをビルドしています。"

#~ msgid ""
#~ "`distribute`_ (a fork of setuptools) was merged back into :ref:"
#~ "`setuptools` in June 2013, thereby making setuptools the default choice "
#~ "for packaging."
#~ msgstr ""
#~ "(setuptools から分岐した) `distribute`_ は、2013年6月に :ref:`setuptools` "
#~ "へ再合流し、それ以来デフォルトのパッケージングにはデフォルトで setuptools "
#~ "を使うようになっています。"

#~ msgid "Standards compliance for interoperability"
#~ msgstr "相互互換性のための標準的な取り決め"

#~ msgid "Here are some examples of compliant version numbers::"
#~ msgstr "規定に合致したバージョン番号の例を次に示す::"

#~ msgid ""
#~ "To further accommodate historical variations in approaches to version "
#~ "numbering, :pep:`440` also defines a comprehensive technique for :pep:"
#~ "`version normalisation <440#normalization>` that maps variant spellings "
#~ "of different version numbers to a standardised canonical form."
#~ msgstr ""
#~ "過去の様々なバージョン番号付与方法を規定内に包含するために、 :pep:`440` は"
#~ "様々なバージョン番号の変種的書き方を網羅する :pep:`バージョンの正規化 "
#~ "<440#normalization>` のテクニックも定義しています。"

#~ msgid "Scheme choices"
#~ msgstr "方法論の選択"

#~ msgid ""
#~ "For new projects, the recommended versioning scheme is based on `Semantic "
#~ "Versioning <https://semver.org/>`_, but adopts a different approach to "
#~ "handling pre-releases and build metadata."
#~ msgstr ""
#~ "新しいプロジェクトには、 `意味あるバージョン付与方法 <https://semver.org/"
#~ ">` に従うことが推奨されていますが、リリース前やビルド時のメタデータとして"
#~ "は異なるやり方を採用しても良いでしょう。"

#~ msgid ""
#~ "Adopting this approach as a project author allows users to make use of :"
#~ "pep:`\"compatible release\" <440#compatible-release>` specifiers, where "
#~ "``name ~= X.Y`` requires at least release X.Y, but also allows any later "
#~ "release with a matching MAJOR version."
#~ msgstr ""
#~ "プロジェクトの作者としてこのやり方を採用すれば、ユーザが :pep:`互換性のあ"
#~ "るリリース <440#compatible-release>` の指定、つまり、``name ~= X.Y`` と指"
#~ "定してあるなら少なくともリリース X.Y が必要だが同じMAJORバージョンを持つな"
#~ "らその後のリリースでも構わないという書き方を利用することができるようになり"
#~ "ます。"

#~ msgid "Date based versioning"
#~ msgstr "日付ベースのバージョン付与"

#~ msgid ""
#~ "Version numbers for date based projects typically take the form of YEAR."
#~ "MONTH (for example, ``12.04``, ``15.10``)."
#~ msgstr ""
#~ "日付ベースのバージョン番号は、YEAR.MONTHの形(例えば ``12.04``や``15.10``)"
#~ "をとるのが普通です。"

#~ msgid ""
#~ "This is the simplest possible versioning scheme, and consists of a single "
#~ "number which is incremented every release."
#~ msgstr ""
#~ "これは最も単純なバージョン付与方法で、リリースのたびに増加する単一の番号で"
#~ "構成します。"

#~ msgid "Pre-release versioning"
#~ msgstr "リリース前のバージョン付与方式"

#~ msgid ""
#~ "Regardless of the base versioning scheme, pre-releases for a given final "
#~ "release may be published as:"
#~ msgstr ""
#~ "どのバージョン付与方式を採用するとしても、ある特定の最終的なリリースの前の"
#~ "リリースが次のような形で公開されることもあるでしょう:"

#~ msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
#~ msgstr "零またはそれ以上の dev リリース (\".devN\"という拡張子をつけて表示)"

#~ msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
#~ msgstr "零またはそれ以上のalphaリリース (\".aN\"という拡張子をつけて表示)"

#~ msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
#~ msgstr "零またはそれ以上のbetaリリース (\".bN\"という拡張子をつけて表示)"

#~ msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
#~ msgstr "零またはそれ以上のリリース候補 (\".rcN\"という拡張子をつけて表示)"

#~ msgid ""
#~ "``pip`` and other modern Python package installers ignore pre-releases by "
#~ "default when deciding which versions of dependencies to install."
#~ msgstr ""
#~ "``pip``や最近のPythonパッケージインストーラでは、依存関係にあるパッケージ"
#~ "をインストールする際にリリース前のものを無視して含めないのが規定の動作で"
#~ "す。"

#~ msgid ""
#~ "A local version identifier takes the form ``<public version "
#~ "identifier>+<local version label>``. For example::"
#~ msgstr ""
#~ "ローカルバージョン識別子は、 ``<公的バージョン識別子>+<ローカルバージョン"
#~ "ラベル>`` の形を取ります。例えば::"

#~ msgid ""
#~ "Mirroring or caching of PyPI can be used to speed up local package "
#~ "installation, allow offline work, handle corporate firewalls or just "
#~ "plain Internet flakiness."
#~ msgstr ""
#~ "PyPIのミラーやキャッシュがあると、手元でパッケージをインストールするのが速"
#~ "くなったり、オフラインでインストールできたり、会社のファイアウォール経由で"
#~ "もできたり、あるいは、単純にインターネットがあてにならなくてもインストール"
#~ "できたりします。"

#~ msgid "Three options are available in this area:"
#~ msgstr "この分野には３個のやり方があります:"

#~ msgid "pip provides local caching options,"
#~ msgstr "pip はローカルキャッシュのオプションを提供し、"

#~ msgid ""
#~ "devpi provides higher-level caching option, potentially shared amongst "
#~ "many users or machines, and"
#~ msgstr ""
#~ "devpi は、潜在的には多数のユーザやマシンをまたがって共有できるような高レベ"
#~ "ルのキャッシュのオプションを提供し、"

#~ msgid ""
#~ "bandersnatch provides a local complete mirror of all PyPI :term:`packages "
#~ "<Distribution Package>`."
#~ msgstr ""
#~ "bandersnatch は、PyPIのすべての :term:`パッケージ <Distribution Package>` "
#~ "の完全なミラー(複製)を手元に置くオプションを提供します。"

#~ msgid "Caching with devpi"
#~ msgstr "devpiでのキャッシュ"

#~ msgid ""
#~ "devpi is a caching proxy server which you run on your laptop, or some "
#~ "other machine you know will always be available to you. See the `devpi "
#~ "documentation for getting started`__."
#~ msgstr ""
#~ "devpi は、キャッシュ機能付きのプロクシサーバで、あなたのラップトップやあな"
#~ "たがいつでも使えるとわかっているどこかの機体の上で動作させます。 `devpi の"
#~ "始め方 <devpi documentation for getting started>`__ を見てください。"

#~ msgid "Complete mirror with bandersnatch"
#~ msgstr "bandersnatch で完全なミラーを作る"

#~ msgid ""
#~ "bandersnatch will set up a complete local mirror of all PyPI :term:"
#~ "`packages <Distribution Package>` (externally-hosted packages are not "
#~ "mirrored). See the `bandersnatch documentation for getting that going`__."
#~ msgstr ""
#~ "bandersnatch は、すべての PyPI :term:`パッケージ <Distribution Package>` "
#~ "(外部にホストされているパッケージはミラーされません)の完全なローカルミラー"
#~ "を構築します。 `bandersnatch を走らせるには <bandersnatch documentation "
#~ "for getting that going>`__ を見てください。"

#~ msgid ""
#~ "A benefit of devpi is that it will create a mirror which includes :term:"
#~ "`packages <Distribution Package>` that are external to PyPI, unlike "
#~ "bandersnatch which will only cache :term:`packages <Distribution "
#~ "Package>` hosted on PyPI."
#~ msgstr ""
#~ "devpi の利点は、 PyPI の外部にある :term:`パッケージ <Distribution "
#~ "Package>` を含むミラーを作成できることで、これはPyPI にホストされている :"
#~ "term:`パッケージ <Distribution Package>` だけをキャッシュする "
#~ "bandersnatch とは異なる点です。"

#~ msgid ""
#~ "`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub "
#~ "<https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/"
#~ "project/bandersnatch>`__"
#~ msgstr ""
#~ "`課題リスト <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub "
#~ "<https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/"
#~ "project/bandersnatch>`__"

#~ msgid ""
#~ "``bandersnatch`` is a PyPI mirroring client designed to efficiently "
#~ "create a complete mirror of the contents of PyPI. Organizations thus save "
#~ "bandwidth and latency on package downloads (especially in the context of "
#~ "automated tests) and to prevent heavily loading PyPI's Content Delivery "
#~ "Network (CDN)."
#~ msgstr ""
#~ "``bandersnatch`` は、PyPI をミラーリングするクライアントで、PyPI のコンテ"
#~ "ンツの完全なコピーを効率よく作成するように設計されています。組織から見る"
#~ "と、これによってパッケージのダウンロードに必要な帯域幅とレイテンシーを (と"
#~ "りわけ自動化されたテストの文脈で) 節約することができ、PyPI のコンテンツデ"
#~ "リバリネットワーク (CDN) への負荷を軽減します。"

#~ msgid ""
#~ "devpi features a powerful PyPI-compatible server and PyPI proxy cache "
#~ "with a complementary command line tool to drive packaging, testing and "
#~ "release activities with Python. devpi also provides a browsable and "
#~ "searchable web interface."
#~ msgstr ""
#~ "devpi は、 Python を使ったパッケージングやテスティングやリリース活動を推進"
#~ "するための補完的なコマンドラインツールを備えた PyPI 互換の強力なサーバと "
#~ "PyPI プロクシキャッシュの機能を持ちます。devpi は閲覧と検索が可能なwebイン"
#~ "タフェイスも備えています。"

#~ msgid ""
#~ "pypiserver is a minimalist application that serves as a private Python "
#~ "package index within organizations, implementing a simple API and browser "
#~ "interface. You can upload private packages using standard upload tools, "
#~ "and users can download and install them with :ref:`pip`, without "
#~ "publishing them publicly. Organizations who use pypiserver usually "
#~ "download packages both from pypiserver and from PyPI."
#~ msgstr ""
#~ "pypiserver は、素朴な API とブラウザ向けのインタフェイスだけを実装したプラ"
#~ "イベートの Python パッケージインデックスサーバとして振る舞う「小さいことは"
#~ "良いことだ」主義者のアプリケーションです。公衆向けに公開することなく標準の"
#~ "ツールを使って外部非公開のパッケージをアップロードすることもできますし、そ"
#~ "れを `pip` でダウンロード・インストールすることもできます。 pypiserver を"
#~ "用いる組織では、通常は pypiserver と PyPI の両方からパッケージをダウンロー"
#~ "ドします。"

#, fuzzy
#~ msgid ""
#~ "By default, any hash algorithm available via `hashlib <https://docs."
#~ "python.org/3/library/hashlib.html>`_ (specifically any that can be passed "
#~ "to ``hashlib.new()`` and do not require additional parameters) can be "
#~ "used as a key for the hashes dictionary. At least one secure algorithm "
#~ "from ``hashlib.algorithms_guaranteed`` **SHOULD** always be included. At "
#~ "the time of this spec, ``sha256`` specifically is recommended."
#~ msgstr ""
#~ "``hash lib`` 経由で利用可能なハッシュアルゴリズム (とりわけ、 ``hashlib."
#~ "new()`` に渡すことができて、かつ、追加的なパラメータを必要としないもの) は"
#~ "どれでも、ハッシュ値を格納する辞書のキーとして用いることができます。 "
#~ "``hashlib.algorithms_garanteed`` から安全なアルゴリズムを少なくともひとつ"
#~ "選択して (訳注、ハッシュ値格納用辞書に) 含めるべきです。執筆時点では、 "
#~ "``sha256`` が特に推奨されています。"

#, fuzzy
#~ msgid "pyproject type"
#~ msgstr "pyproject.toml"

#~ msgid ""
#~ "pex is both a library and tool for generating :file:`.pex` (Python "
#~ "EXecutable) files, standalone Python environments in the spirit of :ref:"
#~ "`virtualenv`. :file:`.pex` files are just carefully constructed zip files "
#~ "with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are "
#~ "designed to make deployment of Python applications as simple as ``cp``."
#~ msgstr ""
#~ "pex は、 :ref:`virtualenv` の精神に則ったスタンドアローンの Python 環境で"
#~ "ある :file:`.pex` (実行可能な Python ファイル) ファイルを生成するツールで"
#~ "ありライブラリです。 :file:`.pex` ファイルは、 ``#!/usr/bin/env python`` "
#~ "と特別な :file:`__main__.py` を伴う注意深く構築された zip ファイルであり、"
#~ "単に cp すれば Python アプリケーションを配置 (deploy) できるように設計され"
#~ "ています。"

#~ msgid ""
#~ "If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like "
#~ "Heroku or Google App Engine, you are going to want to follow their "
#~ "respective packaging guides."
#~ msgstr ""
#~ "Heroku や Google App Engine のような「プラットフォームアズアサービス」ない"
#~ "し「PaaS」を使って開発をしているのであれば、各サービスのそれぞれのパッケー"
#~ "ジングガイドに従いたくなるでしょう。"

#~ msgid ""
#~ "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-"
#~ "python>`_"
#~ msgstr ""
#~ "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-"
#~ "python>`_"

#~ msgid ""
#~ "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
#~ msgstr ""
#~ "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"

#~ msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
#~ msgstr "`PythonAnywhere <https://www.pythonanywhere.com/>`_"

#~ msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
#~ msgstr "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"

#~ msgid "\"Serverless\" frameworks like :gh:`Zappa <zappa/Zappa>`"
#~ msgstr ":gh:`Zappa <zappa/Zappa>` のような「サーバレス」フレームワーク"

#~ msgid ""
#~ "In all these setups, the platform takes care of packaging and deployment, "
#~ "as long as you follow their patterns. Most software does not fit one of "
#~ "these templates, hence the existence of all the other options below."
#~ msgstr ""
#~ "これらすべての構成では、あなたが彼らのパターンに従っている限りはプラット"
#~ "フォーム側がパッケージングと配置の世話をします。ほとんどのソフトウェアはこ"
#~ "れらのテンプレートのうちの一つには合致しないので、下記のような他の選択肢が"
#~ "存在することになります。"

#, fuzzy
#~ msgid ""
#~ "The HTML format is defined in :pep:`503`, with the addition of \"yank\" "
#~ "support (allowing a kind of file deletion) in :pep:`592`, specifying the "
#~ "interface version provided by an index server in :pep:`629`, and "
#~ "providing package metadata independently from a package in :pep:`658` and "
#~ "revised in :pep:`714`."
#~ msgstr ""
#~ "利用可能なパッケージのバージョンを問い合わせ、インデックスサーバからパッ"
#~ "ケージを取り出すインタフェースは、現在、 :pep:`592` の \"yank\" サポート "
#~ "(ある種の削除を可能とするもの) や、 :pep:`629` のインデックスサーバ側が提"
#~ "供しているインタフェースのバージョンを指定する機能や、 :pep:`658` のパッ"
#~ "ケージとは独立にパッケージメタデータを提供する機能とともに、 :pep:`503` で"
#~ "定義されています。"

#~ msgid ""
#~ "There were multiple iterations of the ``manylinux`` specification, each "
#~ "representing the common subset of Linux platforms at a given point in "
#~ "time:"
#~ msgstr ""
#~ "``manylinux`` 仕様は複数回の改訂があり、それぞれの版がその時々の Linux の"
#~ "共通のサブセットを表現しています:"

#~ msgid ""
#~ "``manylinux2010`` (:pep:`571`) supports ``x86_64`` and ``i686`` "
#~ "architectures. and updates the previous specification to be based on a "
#~ "compatible Linux platform from 2010 instead."
#~ msgstr ""
#~ "``manylinux2010`` (:pep:`571`) は、 ``x86_64`` および ``i686`` アーキテク"
#~ "チャをサポートしており、以前の仕様を更新して、その代わりに 2010 年から互換"
#~ "性のある Linux プラットフォームに基づいています。"

#~ msgid ""
#~ "``manylinux2014`` (:pep:`599`) adds support for a number of additional "
#~ "architectures (``aarch64``, ``armv7l``, ``ppc64``, ``ppc64le``, and "
#~ "``s390x``) and updates the base platform to a compatible Linux platform "
#~ "from 2014."
#~ msgstr ""
#~ "``manylinux2014`` (:pep:`599`) では、多数のアーキテクチャ (``aarch64``, "
#~ "``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``) へのサポートを追加し、"
#~ "また、2014 年以降の互換 Linux プラットフォームのベースを更新しました。"

#~ msgid ""
#~ "``manylinux_x_y`` (:pep:`600`) supersedes all previous PEPs to define a "
#~ "future-proof standard. It defines ``x`` and ``y`` as glibc major an minor "
#~ "versions supported (e.g. ``manylinux_2_24`` should work on any distro "
#~ "using glibc 2.24+). Previous tags are still supported for backward "
#~ "compatibility."
#~ msgstr ""
#~ "``manylinux_x_y`` (:pep:`600`) では、それまでの PEP 群を全て代替する形で将"
#~ "来を見据えた標準を定義しました。 ``x`` と ``y`` は、その標準がサポートす"
#~ "る glibc のメジャーバージョンとマイナーバージョンとして定義されています "
#~ "(例えば、 ``manylinux_2_24`` は glibc 2.24+ を使っているディストロならどれ"
#~ "でも、その上で動作するはずです) 。以前に使われたタグは広報互換性を保つため"
#~ "に依然としてサポートされています。"

#~ msgid "Manylinux compatibility support"
#~ msgstr "Manylinux 互換性サポート"

#~ msgid ""
#~ "The ``manylinux2014`` specification is relatively new and is not yet "
#~ "widely recognised by install tools."
#~ msgstr ""
#~ "``manylinux2014`` 仕様は相対的に新しく、未だインストールツールに広く認識さ"
#~ "れたと言える状況ではありません。"

#~ msgid ""
#~ "The ``manylinux_x_y`` specification is relatively new and is not yet "
#~ "widely recognised by install tools."
#~ msgstr ""
#~ "``manylinux_x_y`` 仕様は相対的に新しく、未だインストールツールに広く認識さ"
#~ "れたと言える状況ではありません。"

#~ msgid ""
#~ "The name of the distribution. The name field is the primary identifier "
#~ "for a distribution. A valid name consists only of ASCII letters and "
#~ "numbers, period, underscore and hyphen. It must start and end with a "
#~ "letter or number. Distribution names are limited to those which match the "
#~ "following regex (run with ``re.IGNORECASE``)::"
#~ msgstr ""
#~ "配布物の名前。name フィールドは、配布物の一義的な識別子です。正当な名前は "
#~ "ASCII 文字・数字・ピリオド・アンダースコア・ハイフンだけで構成されているも"
#~ "のです。名前の先頭と末尾は文字か数字でなければなりません。配布物の名前は次"
#~ "の正規表現に (``re.IGNORECASE`` 付きで) マッチするものに限られます::"

#~ msgid ""
#~ "Project names are \"normalized\" for use in various contexts. This "
#~ "document describes how project names should be normalized."
#~ msgstr ""
#~ "プロジェクト名は、さまざまな文脈で使用するために \"正規化\" されます。この"
#~ "説明文書では、プロジェクト名がどのように正規化されるべきかについて記述しま"
#~ "す。"

#~ msgid "Valid non-normalized names"
#~ msgstr "正当な非正規化名"

#, fuzzy
#~ msgid "The following changes were applied since the initial version:"
#~ msgstr ""
#~ "以降の変更は、最初の実装 (ができた) 後に寄せられたフィードバックに基づくも"
#~ "のです:"

#~ msgid "Summary of changes to PEP 508"
#~ msgstr "PEP 508 に対する変更の要旨"

#~ msgid ""
#~ "The following changes were made based on feedback after its initial "
#~ "implementation:"
#~ msgstr ""
#~ "以降の変更は、最初の実装 (ができた) 後に寄せられたフィードバックに基づくも"
#~ "のです:"

#~ msgid ""
#~ "March 2020: the ``direct_url.json`` metadata file was originally "
#~ "specified in :pep:`610` and is formally documented here."
#~ msgstr ""
#~ "2020年3月: ``direct_url.json`` メタデータファイルは、当初は :pep:`610` で"
#~ "仕様を指定されていましたが、ここで正式に文書化されました。"

#~ msgid ""
#~ "March 2020: this data structure was originally specified as part of the "
#~ "``direct_url.json`` metadata file in :pep:`610` and is formally "
#~ "documented here."
#~ msgstr ""
#~ "2020年3月: このデータ構造は、当初は :pep:`610` で ``direct_url.json`` メタ"
#~ "データファイルの一部として仕様を指定されていましたが、ここで正式に文書化さ"
#~ "れました。"

#~ msgid ""
#~ "January 2023: Added the ``archive_info.hashes`` key ([discussion](https://"
#~ "discuss.python.org/t/22299))."
#~ msgstr ""
#~ "2023年1月: ``archive_info.hashes`` キーを追加しました ([議論] (https://"
#~ "discuss.python.org/t/22299)) 。"

#~ msgid ""
#~ "`September 2015 <https://mail.python.org/pipermail/distutils-sig/2015-"
#~ "September/026899.html>`_: normalized name was originally specified in :"
#~ "pep:`503#normalized-names`."
#~ msgstr ""
#~ "`2015年9月 <https://mail.python.org/pipermail/distutils-sig/2015-"
#~ "September/026899.html>`_: 正規化された名称は、元々は :pep:`503#normalized-"
#~ "names` で仕様化されていました。"

#~ msgid ""
#~ "`November 2015 <https://mail.python.org/pipermail/distutils-sig/2015-"
#~ "November/027868.html>`_: valid non-normalized name was originally "
#~ "specified in :pep:`508#names`."
#~ msgstr ""
#~ "`2015年11月 <https://mail.python.org/pipermail/distutils-sig/2015-"
#~ "November/027868.html>`_: 正当であるが正規化されてはいない名称は、元々は :"
#~ "pep:`508#names` で仕様化されていました。"

#~ msgid "The following PEPs contributed to this spec:"
#~ msgstr "この仕様に貢献する PEP 群を以下に示す:"

#~ msgid ":pep:`425`"
#~ msgstr ":pep:`425`"

#~ msgid ":pep:`513`"
#~ msgstr ":pep:`513`"

#~ msgid ":pep:`599`"
#~ msgstr ":pep:`599`"

#~ msgid "History and change workflow"
#~ msgstr "ワークフローの履歴と変更"

#~ msgid ""
#~ "The metadata described here was first specified in :pep:`376`, and later "
#~ "amended in :pep:`627` (and other PEPs). It was formerly known as "
#~ "*Database of Installed Python Distributions*. As with other PyPA "
#~ "specifications, editorial amendments with no functional impact may be "
#~ "made through the GitHub pull request workflow. Proposals for functional "
#~ "changes that would require amendments to package building and/or "
#~ "installation tools must be made through the PEP process (see :pep:`1`)."
#~ msgstr ""
#~ "ここで述べるメタデータは、 :pep:`376` で初めて定義されたもので、後に :pep:"
#~ "`627` (およびその他の PEP 群) で改訂されました。以前は *インストール済み"
#~ "の Python 配布物のデータベース* という名前で知られていました。他の PyPA 仕"
#~ "様と同様に、 GitHab の Pull リクエストのワークフローを通じて、機能の面に影"
#~ "響しない編集上の改訂を行うことが可能です。パッケージの作成やインストール"
#~ "ツールを修正するであろう機能面での変更提案は、 PEP のプロセス (:pep:`1` を"
#~ "見てください) を通じて行わなければなりません。"

#~ msgid ""
#~ "While this document is the normative specification, the PEPs that "
#~ "introduce changes to it may include additional information such as "
#~ "rationales and backwards compatibility considerations."
#~ msgstr ""
#~ "この説明文書が規範的な仕様書である一方で、その変更を導入するような PEP 群"
#~ "は、理論的根拠や後方互換性を保つための考慮点のような追加的な情報を含んでい"
#~ "ても構いません。"

#~ msgid "November 2020: :pep:`643` converted to this specification"
#~ msgstr "2020-11: :pep:`643` をこの仕様に変換"

#~ msgid "December 2000: Source distributions standardized in :pep:`643`"
#~ msgstr "2000-12: ソースコード配布物について :pep:`643` で標準化"

#~ msgid ""
#~ "This is the name of your project, determining how your project is listed "
#~ "on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid "
#~ "project names must:"
#~ msgstr ""
#~ "これは、あなたのプロジェクトが :term:`PyPI <Python Package Index (PyPI)>` "
#~ "でどこに並べられるかを決めるプロジェクトの名前です。 :pep:`508` に従えば、"
#~ "正当なプロジェクト名は以下の条件を満たさなければなりません："

#~ msgid "Start & end with an ASCII letter or digit."
#~ msgstr "先頭と最後の文字がASCII文字ないし数字であること。"

#~ msgid ""
#~ "This is the current version of your project, allowing your users to "
#~ "determine whether or not they have the latest version, and to indicate "
#~ "which specific versions they've tested their own software against."
#~ msgstr ""
#~ "これはあなたのプロジェクトの現在のバージョンで、これがあることであなたのプ"
#~ "ロジェクトのユーザたちが自分が最新版を使っているのかどうかを判断したり、彼"
#~ "ら自身のソフトウェアと組み合わせて試験を行ったバージョンがどれなのかを示し"
#~ "たりすることができるようになります。"

#~ msgid ""
#~ "Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for "
#~ "each release if you publish your project."
#~ msgstr ""
#~ "バージョンは、あなたが自分のプロジェクトをリリースする度に :term:`PyPI "
#~ "<Python Package Index (PyPI)>` 上に表示されます。"

#~ msgid ""
#~ "If the project code itself needs run-time access to the version, the "
#~ "simplest way is to keep the version in both :file:`setup.py` and your "
#~ "code. If you'd rather not duplicate the value, there are a few ways to "
#~ "manage this. See the \":ref:`Single sourcing the version`\" Advanced "
#~ "Topics section."
#~ msgstr ""
#~ "プログラムが動作している間に自分自身のバージョンを知る必要があるのであれ"
#~ "ば、バージョン番号を :file:`setup.py` とあなたのソースコードの両方に格納し"
#~ "ておくのがもっとも単純な方法です。値を複数箇所に書きたくないのであれば、や"
#~ "り方が2,3種類あります。「 :ref:`バージョンを一箇所で管理するには <Single "
#~ "sourcing the version>` 」の「高度な話題」の節を見て下さい。"

#~ msgid "Give a short and long description for your project."
#~ msgstr "あなたのプロジェクトについて、短い説明と長い説明を与えて下さい。"

#~ msgid ""
#~ "These values will be displayed on :term:`PyPI <Python Package Index "
#~ "(PyPI)>` if you publish your project. On ``pypi.org``, the user interface "
#~ "displays ``description`` in the grey banner and ``long_description`` in "
#~ "the section named \"Project Description\"."
#~ msgstr ""
#~ "これらの値は、あなたのプロジェクトを公開したときに :term:`PyPI <Python "
#~ "Package Index (PyPI)>` に表示されます。 ``pypi.org`` のユーザインタフェイ"
#~ "スでは、灰色のバナーに ``description`` を表示し、「プロジェクトの説明」と"
#~ "名付けられたセクションに ``long_description`` を表示します。"

#~ msgid ""
#~ "``description`` is also displayed in lists of projects. For example, it's "
#~ "visible in the search results pages such as https://pypi.org/search/?"
#~ "q=jupyter, the front-page lists of trending projects and new releases, "
#~ "and the list of projects you maintain within your account profile (such "
#~ "as https://pypi.org/user/jaraco/)."
#~ msgstr ""
#~ "``description`` は、プロジェクト一覧にも表示されます。例えば、https://"
#~ "pypi.org/search/?q=jupyter のような検索結果のページや、フロントページの流"
#~ "行プロジェクトや新規リリースプロジェクトの一覧や、あなたのアカウントのプロ"
#~ "ファイルページ(例えば https://pypi.org/user/jaraco/)の中のあなたがメンテナ"
#~ "ンスしているプロジェクトの一覧に表示されるということです。"

#~ msgid ""
#~ "A :ref:`content type <core-metadata-description-content-type>` can be "
#~ "specified with the ``long_description_content_type`` argument, which can "
#~ "be one of ``text/plain``, ``text/x-rst``, or ``text/markdown``, "
#~ "corresponding to no formatting, `reStructuredText (reST) <https://"
#~ "docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#reference-"
#~ "names>`_, and the GitHub-flavored Markdown dialect of `Markdown <https://"
#~ "daringfireball.net/projects/markdown/>`_ respectively."
#~ msgstr ""
#~ ":ref:`content type <core-metadata-description-content-type>` は、書式のな"
#~ "い ``text/plain`` か `reStructuredText (reST) <https://docutils."
#~ "sourceforge.io/docs/ref/rst/restructuredtext.html#reference-names>`_ の "
#~ "``text/x-rst`` か `Markdown <https://daringfireball.net/projects/markdown/"
#~ ">`_ の GitHub 方言のマークダウンである ``text/markdown`` のうちのいずれか"
#~ "ひとつの書式で、 ``long_description_content_type`` 引数とともに指定するこ"
#~ "とができます。"

#~ msgid "``url``"
#~ msgstr "``url``"

#~ msgid "Give a homepage URL for your project."
#~ msgstr "あなたのプロジェクトのホームページのURLを与えてください。"

#~ msgid "Provide details about the author."
#~ msgstr "著者について詳しい情報を提供してください。"

#~ msgid ""
#~ "The ``license`` argument doesn't have to indicate the license under which "
#~ "your package is being released, although you may optionally do so if you "
#~ "want.  If you're using a standard, well-known license, then your main "
#~ "indication can and should be via the ``classifiers`` argument. "
#~ "Classifiers exist for all major open-source licenses."
#~ msgstr ""
#~ "``license`` 引数には、あなたのパッケージがどのライセンスの下で公開されたか"
#~ "を示すこともできますが、これは必須ではなくオプションです。あなたが一般的で"
#~ "よく知られたライセンスを採用するのであれば、 ``分類詞 <classifiers>`` を指"
#~ "定するだけで済ませることができると同時に済ませるべきです。メジャーなオープ"
#~ "ンソースライセンスであればどれでも、それを指し示す分類詞が用意されていま"
#~ "す。"

#~ msgid ""
#~ "Provide a list of classifiers that categorize your project. For a full "
#~ "listing, see https://pypi.org/classifiers/."
#~ msgstr ""
#~ "あなたのプロジェクトを特徴付ける分類詞(classifier)を設定してください。"
#~ "https://pypi.org/classifiers に全部の一覧が出ています。"

#~ msgid "List keywords that describe your project."
#~ msgstr "あなたのプロジェクトを説明するキーワードを列挙してください。"

#~ msgid ""
#~ "List additional relevant URLs about your project. This is the place to "
#~ "link to bug trackers, source repositories, or where to support package "
#~ "development. The string of the key is the exact text that will be "
#~ "displayed on PyPI."
#~ msgstr ""
#~ "あなたのプロジェクトに関係する追加的なURLを列挙してください。これは、バグ"
#~ "追跡システムやソースコードリポジトリ、あるいは、パッケージ開発をサポートす"
#~ "る場所などをリンクするための場所です。キー文字列をそのままテキストとして"
#~ "PyPI上に表示されます。"

#~ msgid ""
#~ "If your project only runs on certain Python versions, setting the "
#~ "``python_requires`` argument to the appropriate :pep:`440` version "
#~ "specifier string will prevent :ref:`pip` from installing the project on "
#~ "other Python versions.  For example, if your package is for Python 3+ "
#~ "only, write::"
#~ msgstr ""
#~ "あなたのプロジェクトが特定のバージョンのPythonでないと動作しないのであれ"
#~ "ば、適切な :pep:`440` バージョン特定文字列で ``python_requires`` 引数を設"
#~ "定しておくことで :ref:`pip` が他のバージョンの `Python` なのに当該プロジェ"
#~ "クトをインストールしてしまうことがなくなります。例えば、あなたのパッケージ"
#~ "が Python 3+ 向けのものであれば、このように書いてください："

#~ msgid ""
#~ "If your package is for Python 2.6, 2.7, and all versions of Python 3 "
#~ "starting with 3.3, write::"
#~ msgstr ""
#~ "Python 2.6と2.7、そして3.3以上のPython 3用であればこのように書きます::"

#~ msgid "And so on."
#~ msgstr "等々。"

#~ msgid ""
#~ "Support for this feature is relatively recent.  Your project's source "
#~ "distributions and wheels (see :ref:`Packaging Your Project`) must be "
#~ "built using at least version 24.2.0 of :ref:`setuptools` in order for the "
#~ "``python_requires`` argument to be recognized and the appropriate "
#~ "metadata generated."
#~ msgstr ""
#~ "この機能がサポートされたのは比較的最近のことです。 ``python_requires`` 引"
#~ "数が認識されて適切なメタデータが生成されるためには、あなたのプロジェクトの"
#~ "ソースコード配布物やwheels (:ref:`あなたのプロジェクトをパッケージする "
#~ "<Packaging Your Project>` 参照)を24.2.0かそれ以降のバージョンの :ref:"
#~ "`setuptools` でビルドしなければなりません。"

#~ msgid ""
#~ "In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the "
#~ "``python_requires`` metadata.  Users with earlier versions of pip will be "
#~ "able to download & install projects on any Python version regardless of "
#~ "the projects' ``python_requires`` values."
#~ msgstr ""
#~ "さらに、 :ref:`pip` のバージョン9.0.0かそれ以降のものでなければ "
#~ "``python_requires`` のメタデータを認識しません。これより前のバージョンの"
#~ "pipを使っている場合は、 ``python_requires`` の設定に関わりなくどんなバー"
#~ "ジョンのPythonを使っていてもダウンロードやインストールが可能です。"

#~ msgid "``entry_points``"
#~ msgstr "``entry_points``"

#~ msgid ""
#~ "Use this keyword to specify any plugins that your project provides for "
#~ "any named entry points that may be defined by your project or others that "
#~ "you depend on."
#~ msgstr ""
#~ "あなたのプロジェクト内か依存先のプロジェクトで定義された名前付きのエント"
#~ "リーポイントをあなたのプロジェクトが提供しているようなプラグインがあればこ"
#~ "のキーワード引数を使って指定してください。"

#~ msgid ""
#~ "For more information, see the section on :ref:`Advertising Behavior "
#~ "<setuptools:dynamic discovery of services and plugins>` from the :ref:"
#~ "`setuptools` docs."
#~ msgstr ""
#~ "詳しくは、:ref:`setup tools` 文書の :ref:`広報する動作 <setuptools:"
#~ "dynamic discovery of services and plugins>` の節を見てください。"

#~ msgid ""
#~ "The most commonly used entry point is \"console_scripts\" (see below)."
#~ msgstr ""
#~ "よくあるエントリーポイントとしては、\"console_scipts\" (後述)が挙げられま"
#~ "す。"

#~ msgid ""
#~ "Use ``console_script`` :ref:`entry points <setuptools:dynamic discovery "
#~ "of services and plugins>` to register your script interfaces. You can "
#~ "then let the toolchain handle the work of turning these interfaces into "
#~ "actual scripts [2]_.  The scripts will be generated during the install of "
#~ "your :term:`distribution <Distribution Package>`."
#~ msgstr ""
#~ "``console_script`` :ref:`エントリーポイント <setuptools:dynamic discovery "
#~ "of services and plugins>` は、スクリプトインターフェイスを登録するために"
#~ "使ってください。そうすれば、ツールチェーンがそのようなインターフェイスを実"
#~ "際のスクリプトに変換する作業を肩代わりしてくれます[2]_ 。あなたの :term:`"
#~ "配布物 <Distribution Package>` をインストールする途中でスクリプトが生成さ"
#~ "れます。"

#~ msgid ""
#~ "For more information, see :doc:`Entry Points <setuptools:userguide/"
#~ "entry_point>` from the :doc:`setuptools docs <setuptools:index>`."
#~ msgstr ""
#~ "詳しくは、 :doc:`setuptools 説明文書 <setuptools:index>` の中の :doc:`エン"
#~ "トリポイント <setuptools:userguide/entry_point>` を見てください。"

#~ msgid ""
#~ "Specifically, the \"console_script\" approach generates ``.exe`` files on "
#~ "Windows, which are necessary because the OS special-cases ``.exe`` files. "
#~ "Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher "
#~ "for Windows <397>` allow scripts to be used in many cases, but not all."
#~ msgstr ""
#~ "特に、\"console_script\" を使うと Windows では ``.exe`` ファイルを生成しま"
#~ "すが、これはOSが特別なケースとして ``.exe`` ファイルを必要とするからで"
#~ "す。 ``PATHEXT`` や :pep:`Windows向けPythonランチャー <397>` のようなスク"
#~ "リプトを実行する機能によって多くの場合にスクリプトが使われますが、しかし、"
#~ "いつでも使えるわけではありません。"

#~ msgid ""
#~ "The binary distribution format (:term:`wheel <Wheel>`) was originally "
#~ "defined in :pep:`427`. The current version of the specification is here."
#~ msgstr ""
#~ "バイナリ配布物のフォーマット (:term:`wheel <Wheel>`) は、元々は :pep:"
#~ "`427` で定義されました。仕様の現在のバージョンはここにあります。"

#~ msgid "Abstract"
#~ msgstr "要約"

#~ msgid ""
#~ "This PEP describes a built-package format for Python called \"wheel\"."
#~ msgstr ""
#~ "この PEP は、 Python 向けコンパイル済みパッケージの \"wheel\" と呼ばれる"
#~ "フォーマットについて記述しています。"

#~ msgid "PEP Acceptance"
#~ msgstr "PEP の受諾"

#~ msgid ""
#~ "This PEP was accepted, and the defined wheel version updated to 1.0, by "
#~ "Nick Coghlan on 16th February, 2013 [1]_"
#~ msgstr ""
#~ "この PEP は受諾され、定義された wheel のバージョンが 1.0 に2013年2月16日"
#~ "に Nick Coghlan によって更新されました"

#~ msgid "Rationale"
#~ msgstr "理論的根拠"

#~ msgid ""
#~ "Python needs a package format that is easier to install than sdist. "
#~ "Python's sdist packages are defined by and require the distutils and "
#~ "setuptools build systems, running arbitrary code to build-and-install, "
#~ "and re-compile, code just so it can be installed into a new virtualenv.  "
#~ "This system of conflating build-install is slow, hard to maintain, and "
#~ "hinders innovation in both build systems and installers."
#~ msgstr ""
#~ "Python には sdist よりも簡単にインストールすることができるパッケージフォー"
#~ "マットが必要です。 Python の sdist パッケージは、ソースコードをビルドした"
#~ "りインストールしたり再コンパイルしたりするために任意のコードを実行し、そう"
#~ "することで新しい virtualenv 環境にインストールできるように、 distutiles "
#~ "と setuptools によるビルドシステムによって定義され、かつ、これらのツールを"
#~ "必要とします。このようなビルドとインストールを合成したシステムは動作が遅"
#~ "く、維持管理が困難であり、ビルドシステムとインストーラの双方における技術革"
#~ "新を阻害します。"

#~ msgid ""
#~ "Wheel attempts to remedy these problems by providing a simpler interface "
#~ "between the build system and the installer.  The wheel binary package "
#~ "format frees installers from having to know about the build system, saves "
#~ "time by amortizing compile time over many installations, and removes the "
#~ "need to install a build system in the target environment."
#~ msgstr ""
#~ "Wheel は、ビルドシステムとインストーラの間により単純なインタフェイスを提供"
#~ "することで、これらの問題を癒すことを試みます。 wheel バイナリパッケージの"
#~ "フォーマットは、インストーラがビルドシステムについて知らなくても済むように"
#~ "し、何度もインストールするとしてもコンパイルにかかる時間を節約できるように"
#~ "し、また、インストール先の環境にビルドシステムをインストールする必要を取り"
#~ "除きます。"

#~ msgid "Comparison to .egg"
#~ msgstr ".egg との比較"

#~ msgid ""
#~ "Wheel is an installation format; egg is importable.  Wheel archives do "
#~ "not need to include .pyc and are less tied to a specific Python version "
#~ "or implementation. Wheel can install (pure Python) packages built with "
#~ "previous versions of Python so you don't always have to wait for the "
#~ "packager to catch up."
#~ msgstr ""
#~ "Wheel はインストールするためのフォーマットのひとつですが、 egg はインポー"
#~ "トすることができます。 Wheel アーカイブには .pyc が含まれている必要がない"
#~ "ので、 Python の特定のバージョンや実装に紐づく度合いがより小さくなりま"
#~ "す。 Wheel は、以前のバージョンの Python でビルドされた (純 Python の) "
#~ "パッケージをインストールすることができるので、必ずしもパッケージ制作者が追"
#~ "いつくのを待つ必要がありません。"

#~ msgid ""
#~ "Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is "
#~ "compatible with the new world of Python packaging and the new concepts it "
#~ "brings."
#~ msgstr ""
#~ "Wheel は .dist-info ディレクトリを使用するが、 egg は .egg-info を使いま"
#~ "す。 Wheel は、 Python のパッケージングにおける新しい世界とそれがもたらす"
#~ "新しい概念に適合しています。"

#~ msgid ""
#~ "Wheel has a richer file naming convention for today's multi-"
#~ "implementation world.  A single wheel archive can indicate its "
#~ "compatibility with a number of Python language versions and "
#~ "implementations, ABIs, and system architectures.  Historically the ABI "
#~ "has been specific to a CPython release, wheel is ready for the stable ABI."
#~ msgstr ""
#~ "Wheel は、今日の複数実装世界に合わせて、より表現力が高いファイル命名慣習を"
#~ "持っています。単独の wheel アーカイブ (訳注、その名前) が、数々の Python "
#~ "言語のバージョンや実装、ABI やシステムアーキテクチャとの互換性を表示するこ"
#~ "とができるのです。歴史的には、 ABI は CPython のリリースに紐づいていました"
#~ "が、 wheel は安定な ABI に対応しています。"

#~ msgid ""
#~ "Wheel is lossless.  The first wheel implementation bdist_wheel always "
#~ "generates egg-info, and then converts it to a .whl.  It is also possible "
#~ "to convert existing eggs and bdist_wininst distributions."
#~ msgstr ""
#~ "Wheel はロスレスです。最初の wheel 実装である bdist_wheel は常に egg-info "
#~ "を生成し、それを .whl ファイルへ変換します。既存の egg ファイルを "
#~ "bdist_wininst 配布物に変換することも可能です。"

#~ msgid ""
#~ "Wheel is versioned.  Every wheel file contains the version of the wheel "
#~ "specification and the implementation that packaged it. Hopefully the next "
#~ "migration can simply be to Wheel 2.0."
#~ msgstr ""
#~ "Wheel はバージョン付けされています。各 wheel ファイルは wheel 仕様および"
#~ "パッケージングに使われた実装のバージョンを含んでいます。次のマイグレーショ"
#~ "ンが単純に Wheel 2.0 へのものになれば良いのですが。"

#~ msgid "Wheel is a reference to the other Python."
#~ msgstr "Wheel は、他の Python に対して参照するべきものとなっています。"

#~ msgid "Since :pep:`427`, this specification has changed as follows:"
#~ msgstr ":pep:`427` 以来、この仕様には次のような修正が加えられました:"

#~ msgid ""
#~ "PEP acceptance (https://mail.python.org/pipermail/python-dev/2013-"
#~ "February/124103.html)"
#~ msgstr ""
#~ "PEP 受諾 (https://mail.python.org/pipermail/python-dev/2013-"
#~ "February/124103.html)"

#~ msgid "This document has been placed into the public domain."
#~ msgstr "この文書はパブリックドメインに位置付けられる。"

#~ msgid "``python -m twine check``"
#~ msgstr "``python -m twine check``"

#~ msgid "``python -m twine register``"
#~ msgstr "``python -m twine register``"

#~ msgid "``python -m twine upload``"
#~ msgstr "``python -m twine upload``"

#~ msgid "``python -m setuptools-scm``"
#~ msgstr "``python -m setuptools-scm``"

#~ msgid ""
#~ "a ``[project]`` table containing project :doc:`Core Metadata </"
#~ "specifications/core-metadata/>` (name, version, author and so forth); "
#~ "see :doc:`Declaring project metadata </specifications/declaring-project-"
#~ "metadata/>` for more detail"
#~ msgstr ""
#~ "プロジェクトの :doc:`コアとなるメタデータ </specifications/core-metadata/"
#~ ">` (名前・バージョン・作者・その他) を含む ``[project]`` テーブル; 詳しく"
#~ "は、 :doc:`プロジェクトのメタデータを宣言する </specifications/declaring-"
#~ "project-metadata/>` を見てください"

#~ msgid "a ``[tool]`` table containing tool-specific configuration options"
#~ msgstr "ツール特有の設定オプションを含んだ ``[tool]`` テーブル"

#~ msgid ""
#~ "A `content type <https://packaging.python.org/specifications/core-"
#~ "metadata/#description-content-type-optional>`_ can be specified with the "
#~ "``long_description_content_type`` argument, which can be one of ``text/"
#~ "plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no "
#~ "formatting, `reStructuredText (reST) <https://docutils.sourceforge.io/"
#~ "docs/ref/rst/restructuredtext.html#reference-names>`_, and the GitHub-"
#~ "flavored Markdown dialect of `Markdown <https://daringfireball.net/"
#~ "projects/markdown/>`_ respectively."
#~ msgstr ""
#~ "``long_description_content_type`` 引数に特に整形しない ``text/plain`` 、"
#~ "`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
#~ "restructuredtext.html#reference-names>`_ として解釈される ``text/x-"
#~ "rst`` 、`Markdown <https://daringfireball.net/projects/markdown/>`_ の中で"
#~ "もGitHub方言のものとして解釈される ``text/markdown`` のうちのいずれかを与"
#~ "えることで、`コンテンツタイプ <https://packaging.python.org/"
#~ "specifications/core-metadata/#description-content-type-optional>`_ を指定"
#~ "することができます。"

#~ msgid "You can learn more about pipx at https://pypa.github.io/pipx/."
#~ msgstr "pipx については、 https://pypa.github.io/pipx/ でもっと学べます。"

#~ msgid ":ref:`declaring-build-dependencies`"
#~ msgstr ":ref:`ビルド依存関係を宣言する <declaring-build-dependencies>`"

#~ msgid ""
#~ "Read :ref:`declaring-project-metadata` for the full specification of the "
#~ "content allowed in the ``[project]`` table."
#~ msgstr ""
#~ "``[project]`` テーブルで許される内容の完全な仕様については、 :ref:`プロ"
#~ "ジェクトのメタデータを宣言する <declaring-project-metadata>` を読んでくだ"
#~ "さい。"

#~ msgid ":ref:`declaring-project-metadata`"
#~ msgstr ""
#~ ":ref:`プロジェクトのメタデータを宣言する <declaring-project-metadata>`"

#~ msgid ""
#~ "`Docs <https://pypa.github.io/pipx/>`__ | `GitHub <https://github.com/"
#~ "pypa/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"
#~ msgstr ""
#~ "`説明文書 <https://pypa.github.io/pipx/>`__ | `GitHub <https://github.com/"
#~ "pypa/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"

#~ msgid ""
#~ ":doc:`Docs <packaging.python.org:index>` | `Issues <https://github.com/"
#~ "pypa/packaging.python.org/issues>`__ | `GitHub <https://github.com/pypa/"
#~ "packaging.python.org>`__"
#~ msgstr ""
#~ ":doc:`説明文書 <packaging.python.org:index>` | `課題リスト <https://"
#~ "github.com/pypa/packaging.python.org/issues>`__ | `GitHub <https://github."
#~ "com/pypa/packaging.python.org>`__"

#~ msgid ""
#~ "trove-classifiers is the canonical source for `classifiers on PyPI "
#~ "<https://pypi.org/classifiers/>`_, which project maintainers use to "
#~ "`systematically describe their projects <https://packaging.python.org/"
#~ "specifications/core-metadata/#classifier-multiple-use>`_ so that users "
#~ "can better find projects that match their needs on the PyPI."
#~ msgstr ""
#~ "trove-classifiers は、`PyPI における分類子 <https://pypi.org/classifiers/"
#~ ">`_ の正統な源泉で、ユーザがそのニーズに即したプロジェクトを PyPI でよりう"
#~ "まく探し出せるように、プロジェクトの管理者が `プロジェクトを体系的に表現す"
#~ "る <https://packaging.python.org/specifications/core-metadata/#classifier-"
#~ "multiple-use>`_ のに使います。"

#, fuzzy
#~ msgid ""
#~ "The ``pyproject.toml`` file is written in `TOML <https://toml.io>`_. "
#~ "Among other metadata (such as :ref:`project metadata <declaring-project-"
#~ "metadata>`), it declares any Python level dependencies that must be "
#~ "installed in order to run the project's build system successfully."
#~ msgstr ""
#~ "`pyproject.toml` は :pep:`518` で定義されたビルドシステムとは独立したファ"
#~ "イル形式で、あるプロジェクトのビルドシステムが正常に動作するためにインス"
#~ "トールされていなければならない Python レベルの依存関係をすべて宣言するとい"
#~ "う目的のためにそのプロジェクトが提供するものです。"

#~ msgid "Declaring project metadata"
#~ msgstr "プロジェクトのメタデータを宣言する"

#~ msgid ""
#~ ":pep:`621` specifies how to write a project's :ref:`core metadata <core-"
#~ "metadata>` in a ``pyproject.toml`` file for packaging-related tools to "
#~ "consume. It defines the following specification as the canonical source "
#~ "for the format used."
#~ msgstr ""
#~ ":pep:`621` では、パッケージング関連のツールが使用するために、あるプロジェ"
#~ "クトの :ref:`コアとなるメタデータ <core-metadata>` を ``pyproject.toml`` "
#~ "ファイルにどのように書けば良いかを指定しています。使われるファイルフォー"
#~ "マットの基準となる仕様として、以下のようなものを定義しています。"

#, fuzzy
#~ msgid ""
#~ "The keys defined in this specification MUST be in a table named "
#~ "``[project]`` in ``pyproject.toml``. No tools may add keys to this table "
#~ "which are not defined by this specification. For tools wishing to store "
#~ "their own settings in ``pyproject.toml``, they may use the ``[tool]`` "
#~ "table as defined in the :ref:`build dependency declaration specification "
#~ "<declaring-build-dependencies>`. The lack of a ``[project]`` table "
#~ "implicitly means the :term:`build backend <Build Backend>` will "
#~ "dynamically provide all keys."
#~ msgstr ""
#~ "この仕様で定義されるキーは、 ``pyproject.toml`` ファイルの中の "
#~ "``[project]`` という名前のテーブルに収容されていなければなりません。いかな"
#~ "るツールもこのテーブルにこの仕様で定義されていないキーを追加してはなりませ"
#~ "ん。自身の設定を ``pyproject.toml`` ファイルに記録しておきたいと願うツール"
#~ "は、 :ref:`ビルド時の依存関係を宣言するための仕様 <declaring-build-"
#~ "dependencies>` で定義されている通りに ``[tool]`` テーブルを使うことができ"
#~ "ます。 ``[project]`` テーブルが欠落している場合は、ビルド用のバックエンド"
#~ "がすべてのキーを動的に提供するであろうということを暗黙理に意味しています。"

#~ msgid ""
#~ "A ``.tar.gz`` source distribution (sdist) contains a single top-level "
#~ "directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the "
#~ "source files of the package. The name and version MUST match the metadata "
#~ "stored in the file. This directory must also contain a :file:`pyproject."
#~ "toml` in the format defined in :ref:`declaring-build-dependencies`, and a "
#~ "``PKG-INFO`` file containing metadata in the format described in the :ref:"
#~ "`core-metadata` specification. The metadata MUST conform to at least "
#~ "version 2.2 of the metadata specification."
#~ msgstr ""
#~ "``.tar.gz`` ソースコード配布物 (sdist) には、 ``{name}-{version}`` (例え"
#~ "ば ``foo-1.0``) と言う名前の単一のトップレベルディレクトリがあって、そこに"
#~ "パッケージのソールファイル群を含んでいます。 name と version は、ファイル"
#~ "内のメタデータと合致していなければなりません。このディレクトリは、 :ref:"
#~ "`declaring-build-dependencies` の中で定義されたフォーマットで書かれた :"
#~ "file:`pyproject.toml` ファイルや、 :ref:`core-metadata` 仕様内に記述された"
#~ "フォーマットで書かれたメタデータを含んだ ``PKG-INFO`` ファイルも含んでいな"
#~ "ければなりません。メタデータは、少なくともバージョン 2.2 のメタデータ仕様"
#~ "を満足するものでなければなりません。"

#~ msgid ""
#~ "Read :pep:`517` and :pep:`518` for background and details on build tool "
#~ "configuration."
#~ msgstr ""
#~ "ビルドツールの設定に関する背景情報や詳細情報については、 :pep:`517` や :"
#~ "pep:`518` を読みましょう。"

#~ msgid "Read about :doc:`/guides/packaging-binary-extensions`."
#~ msgstr ":doc:`/guides/packaging-binary-extensions` について読みましょう。"

#~ msgid "And of course *setuptools* itself is not deprecated either."
#~ msgstr ""
#~ "そして、 *setuptools* それ自身もまた、非推奨ではないのはもちろんのことで"
#~ "す。"

#~ msgid ""
#~ "It is however deprecated to run ``python setup.py`` as a command line "
#~ "tool."
#~ msgstr ""
#~ "しかしながら、コマンドラインツールとしての ``python setup.py`` を実行する"
#~ "ことは非推奨になっています。"

#~ msgid "Current recommendation"
#~ msgstr "現在の推奨項目"

#~ msgid ""
#~ "`distribute`_ was a fork of setuptools that was merged back into "
#~ "setuptools (in v0.7), thereby making setuptools the primary choice for "
#~ "Python packaging."
#~ msgstr ""
#~ "`distribute`_ は setuptools から分岐したもので、 setuptools に (v0.7 で) "
#~ "再合流し、その時からは setuptools が Python のパッケージングにおける第一の"
#~ "選択肢となりました。"

#~ msgid ""
#~ "When building a :term:`source distribution <Source Distribution (or "
#~ "\"sdist\")>` for your package, by default only a minimal set of files are "
#~ "included.  You may find yourself wanting to include extra files in the "
#~ "source distribution, such as an authors/contributors file, a :file:`docs/"
#~ "` directory, or a directory of data files used for testing purposes.  "
#~ "There may even be extra files that you *need* to include; for example, if "
#~ "your :file:`setup.py` computes your project's ``long_description`` by "
#~ "reading from both a README and a changelog file, you'll need to include "
#~ "both those files in the sdist so that people that build or install from "
#~ "the sdist get the correct results."
#~ msgstr ""
#~ "パッケージの :term:`ソースコード配布物 <Source Distribution (or "
#~ "\"sdist\")>` をビルドする際、配布物には必要最低限のファイルだけが配布物に"
#~ "含まれるのがデフォルトです。ソースコード配布物に、例えば authors/"
#~ "contributors ファイルや、 :file:`docs/` ディレクトリや、テストに使う目的の"
#~ "データファイルを収めたディレクトリなどの追加のファイルを含めたくなる時もあ"
#~ "るかと思います。また、追加のファイルを含める *必要がある* 場合さえあるで"
#~ "しょう; 例えば :file:`setup.py` が README ファイルと改変履歴ファイルを読み"
#~ "込んでプロジェクトの ``long_description`` を計算するようになっている場合に"
#~ "は、これら両方のファイルを sdist に含めることで人々が sdist からビルドなり"
#~ "インストールなりを行う際にも正しく動作するようにする必要があります。"

#~ msgid ""
#~ "Adding & removing files to & from the source distribution is done by "
#~ "writing a :file:`MANIFEST.in` file at the project root."
#~ msgstr ""
#~ "プロジェクトのルートディレクトリにある :file:`MANIFEST.in` ファイルを書け"
#~ "ば、ソースコード配布物に対してファイルの追加・削除を行うことができます。"

#~ msgid "How files are included in an sdist"
#~ msgstr "ファイルは sdist にどのように含まれるのか"

#~ msgid ""
#~ "The following files are included in a source distribution by default:"
#~ msgstr ""
#~ "次に掲げるファイル群は、デフォルトでソースコード配布物に取り込まれます:"

#~ msgid ""
#~ "all Python source files implied by the ``py_modules`` and ``packages`` "
#~ "``setup()`` arguments"
#~ msgstr ""
#~ "``setup()`` の引数である ``py_modules`` と ``packages`` で暗示されるすべて"
#~ "の Python ソースファイル"

#~ msgid ""
#~ "all C source files mentioned in the ``ext_modules`` or ``libraries`` "
#~ "``setup()`` arguments"
#~ msgstr ""
#~ "``setup()`` の引数である ``ext_modules`` や ``libraries`` で言及されたすべ"
#~ "ての C 言語のソースファイル"

#~ msgid "scripts specified by the ``scripts`` ``setup()`` argument"
#~ msgstr "``setup()`` の ``scripts`` 引数で指定されたスクリプト群"

#~ msgid ""
#~ "all files specified by the ``package_data`` and ``data_files`` "
#~ "``setup()`` arguments"
#~ msgstr ""
#~ "``setup()`` の引数である ``package_data`` と ``data_files`` で指定されるす"
#~ "べてのファイル群"

#~ msgid ""
#~ "the file specified by the ``license_file`` option in :file:`setup.cfg` "
#~ "(setuptools 40.8.0+)"
#~ msgstr ""
#~ ":file:`setup.cfg` ファイル (setuptools 40.8.0 以降) 内の ``license_file`` "
#~ "オプションで指定されるファイル"

#~ msgid ""
#~ "all files specified by the ``license_files`` option in :file:`setup.cfg` "
#~ "(setuptools 42.0.0+)"
#~ msgstr ""
#~ ":file:`setup.cfg` ファイル (setuptools 42.0.0 以降) の ``license_files`` "
#~ "オプションで指定される全てのファイル"

#~ msgid "all files matching the pattern :file:`test/test*.py`"
#~ msgstr ":file:`test/test*.py` にマッチする全てのファイル"

#~ msgid ":file:`setup.py` (or whatever you called your setup script)"
#~ msgstr ""
#~ ":file:`setup.py` ファイル (または、名前がなんであろうとセットアップスクリ"
#~ "プト)"

#~ msgid ":file:`setup.cfg`"
#~ msgstr ":file:`setup.cfg` ファイル"

#~ msgid ":file:`README`"
#~ msgstr ":file:`README` ファイル"

#~ msgid ":file:`README.txt`"
#~ msgstr ":file:`README.txt` ファイル"

#~ msgid ":file:`README.rst` (Python 3.7+ or setuptools 0.6.27+)"
#~ msgstr ""
#~ ":file:`README.rst` ファイル (Python 3.7 以降、または setuptools 0.6.27 以"
#~ "降)"

#~ msgid ":file:`README.md` (setuptools 36.4.0+)"
#~ msgstr ":file:`README.md` ファイル (setuptools 36.4.0 以降)"

#~ msgid ":file:`pyproject.toml` (setuptools 43.0.0+)"
#~ msgstr ":file:`pyproject.toml` ファイル (setuptools 43.0.0 以降)"

#~ msgid ":file:`MANIFEST.in`"
#~ msgstr ":file:`MANIFEST.in` ファイル"

#~ msgid ""
#~ "After adding the above files to the sdist, the commands in :file:"
#~ "`MANIFEST.in` (if such a file exists) are executed in order to add and "
#~ "remove further files to and from the sdist.  Default files can even be "
#~ "removed from the sdist with the appropriate :file:`MANIFEST.in` command."
#~ msgstr ""
#~ "sdist に上記のファイル群を追加した後、sdist へのさらなるファイルの追加・削"
#~ "除を行うために (もしそのファイルが存在すれば) :file:`MANIFEST.in` ファイル"
#~ "の中のコマンドが実行されます。 :file:`MANIFEST.in` に適切にコマンドを記述"
#~ "すれば、デフォルトで含まれるファイルであっても削除することができます。"

#~ msgid ""
#~ "After processing the :file:`MANIFEST.in` file, setuptools removes the :"
#~ "file:`build/` directory as well as any directories named :file:`RCS`, :"
#~ "file:`CVS`, or :file:`.svn` from the sdist, and it adds a :file:`PKG-"
#~ "INFO` file and an :file:`*.egg-info` directory.  This behavior cannot be "
#~ "changed with :file:`MANIFEST.in`."
#~ msgstr ""
#~ ":file:`MANIFEST.in` ファイルに従って処理をした後、 setuptools は :file:"
#~ "`build/` ディレクトリと同様に :file:`RCS` ・ :file:`CVS` ・ :file:`.svn` "
#~ "という名前のディレクトリ群を sdist から削除し、:file:`PKG-INFO` ファイル"
#~ "と :file:`*.egg-info` ディレクトリを追加します。この動作は :file:"
#~ "`MANIFEST.in` ファイルでは変更することができません。"

#~ msgid ":file:`MANIFEST.in` commands"
#~ msgstr ":file:`MANIFEST.in` コマンド"

#~ msgid ""
#~ "A :file:`MANIFEST.in` file consists of commands, one per line, "
#~ "instructing setuptools to add or remove some set of files from the "
#~ "sdist.  The commands are:"
#~ msgstr ""
#~ ":file:`MANIFEST.in` ファイルは一行にひとつのコマンドで構成されており、"
#~ "setuptools に対して sdist に関するファイル追加・削除を指示します。コマンド"
#~ "として使えるのは次のものです:"

#~ msgid "Command"
#~ msgstr "コマンド"

#~ msgid ":samp:`include {pat1} {pat2} ...`"
#~ msgstr ":samp:`include {pat1} {pat2} ...`"

#~ msgid ""
#~ "Add all files matching any of the listed patterns (Files must be given as "
#~ "paths relative to the root of the project)"
#~ msgstr ""
#~ "列挙されたパターンのいずれかに合致するすべてのファイルを追加する (ファイル"
#~ "はプロジェクトのルートディレクトリに対する相対パスの形で指定されなければな"
#~ "りません)"

#~ msgid ":samp:`exclude {pat1} {pat2} ...`"
#~ msgstr ":samp:`exclude {pat1} {pat2} ...`"

#~ msgid ""
#~ "Remove all files matching any of the listed patterns (Files must be given "
#~ "as paths relative to the root of the project)"
#~ msgstr ""
#~ "列挙されたパターンのいずれかに合致するすべてのファイルを削除する (ファイル"
#~ "はプロジェクトのルートディレクトリに対する相対パスの形で指定されなければな"
#~ "りません)"

#~ msgid ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"
#~ msgstr ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"

#~ msgid ""
#~ "Add all files under directories matching ``dir-pattern`` that match any "
#~ "of the listed patterns"
#~ msgstr ""
#~ "``dir-pattern`` に合致するディレクトリの下にあって、かつ、列挙されたパター"
#~ "ンのいずれかに合致するファイルをすべて追加する"

#~ msgid ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"
#~ msgstr ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"

#~ msgid ""
#~ "Remove all files under directories matching ``dir-pattern`` that match "
#~ "any of the listed patterns"
#~ msgstr ""
#~ "``dir-pattern`` に合致するディレクトリの下にあって、かつ、列挙されたパター"
#~ "ンのいずれかに合致するファイルをすべて削除する"

#~ msgid ":samp:`global-include {pat1} {pat2} ...`"
#~ msgstr ":samp:`global-include {pat1} {pat2} ...`"

#~ msgid ""
#~ "Add all files anywhere in the source tree matching any of the listed "
#~ "patterns"
#~ msgstr ""
#~ "ソースコードツリーのどこにあろうとも、列挙されたパターンのいずれかに合致す"
#~ "るファイルを追加する"

#~ msgid ":samp:`global-exclude {pat1} {pat2} ...`"
#~ msgstr ":samp:`global-exclude {pat1} {pat2} ...`"

#~ msgid ""
#~ "Remove all files anywhere in the source tree matching any of the listed "
#~ "patterns"
#~ msgstr ""
#~ "ソースコードツリーのどこにあろうとも、列挙されたパターンのいずれかに合致す"
#~ "るファイルを削除する"

#~ msgid ":samp:`graft {dir-pattern}`"
#~ msgstr ":samp:`graft {dir-pattern}`"

#~ msgid "Add all files under directories matching ``dir-pattern``"
#~ msgstr ""
#~ "``dir-pattern`` に合致するディレクトリの下にある全てのファイルを追加する"

#~ msgid ":samp:`prune {dir-pattern}`"
#~ msgstr ":samp:`prune {dir-pattern}`"

#~ msgid "Remove all files under directories matching ``dir-pattern``"
#~ msgstr ""
#~ "``dir-pattern`` に合致するディレクトリの下にあるすべてのファイルを削除する"

#~ msgid ""
#~ "The patterns here are glob-style patterns: ``*`` matches zero or more "
#~ "regular filename characters (on Unix, everything except forward slash; on "
#~ "Windows, everything except backslash and colon); ``?`` matches a single "
#~ "regular filename character, and ``[chars]`` matches any one of the "
#~ "characters between the square brackets (which may contain character "
#~ "ranges, e.g., ``[a-z]`` or ``[a-fA-F0-9]``).  Setuptools also has "
#~ "undocumented support for ``**`` matching zero or more characters "
#~ "including forward slash, backslash, and colon."
#~ msgstr ""
#~ "ここでのパターンは glob スタイルのもの: ``*`` はファイル名に使われる通常の"
#~ "文字 (UNIX ではスラッシュを除くすべて; Windows ではコロンを除くすべて) の "
#~ "0 個またはそれ以上の並びに合致; ``?`` はファイル名に使われる通常の文字 1 "
#~ "個に合致し、 ``[chars]`` は角括弧の間にある文字 (文字範囲を含んでも構いま"
#~ "せん。例えば ``[a-z]`` や ``[a-fA-F0-9]``) の内のいずれかひとつに合致しま"
#~ "す。ドキュメント化されていませんが、スラッシュかバックスラッシュかコロンだ"
#~ "けの 0 個またはそれ以上の並びに合致する ``**`` を Setuptools はサポートし"
#~ "ています。"

#~ msgid ""
#~ "Directory patterns are relative to the root of the project directory; e."
#~ "g., ``graft example*`` will include a directory named :file:`examples` in "
#~ "the project root but will not include :file:`docs/examples/`."
#~ msgstr ""
#~ "ディレクトリ向けのパターンはプロジェクトのルートディレクトリに対する相対パ"
#~ "スです; 例えば、 ``graft example*`` は、プロジェクトルートの直下にある :"
#~ "file:`examples` という名前のディレクトリを追加しますが、 :file:`docs/"
#~ "examples/` については追加しません。"

#~ msgid ""
#~ "File & directory names in :file:`MANIFEST.in` should be ``/``-separated; "
#~ "setuptools will automatically convert the slashes to the local platform's "
#~ "appropriate directory separator."
#~ msgstr ""
#~ ":file:`MANIFEST.in` 内のファイルやディレクトリの名前は、 ``/`` で区切られ"
#~ "ていなければなりません; setuptools がスラッシュをローカルのプラットフォー"
#~ "ムに適切なディレクトリ分離子に置換してくれます。"

#~ msgid ""
#~ "Commands are processed in the order they appear in the :file:`MANIFEST."
#~ "in` file.  For example, given the commands:"
#~ msgstr ""
#~ "コマンドは :file:`MANIFEST.in` ファイルに登場する順に実行されます。例え"
#~ "ば、以下のようなコマンドが与えられると:"

#~ msgid ""
#~ "the contents of the directory tree :file:`tests` will first be added to "
#~ "the sdist, and then after that all files in the sdist with a ``.pyc``, ``."
#~ "pyo``, or ``.pyd`` extension will be removed from the sdist.  If the "
#~ "commands were in the opposite order, then ``*.pyc`` files etc. would be "
#~ "only be removed from what was already in the sdist before adding :file:"
#~ "`tests`, and if :file:`tests` happened to contain any ``*.pyc`` files, "
#~ "they would end up included in the sdist because the exclusion happened "
#~ "before they were included."
#~ msgstr ""
#~ ":file:`tests` ディレクトリ以下のコンテンツは、まず全てが sdist に追加され"
#~ "た後に、 ``.pyc`` ・ ``.pyo`` ・ ``.pyd`` の拡張子を持ったファイルがすべ"
#~ "て sdist から削除されます。逆順でコマンドを与えると、 ``*.pyc`` その他の"
#~ "ファイルについては、 :file:`tests` を追加する前に sdist に存在していたもの"
#~ "だけが取り除かれることになり、削除が追加の前に行われているので :file:"
#~ "`tests` に ``*.pyc`` ファイルなどがあれば最終的な sdist に含まれることにな"
#~ "ります。"

#~ msgid ""
#~ "Use `pkgutil-style namespace packages`_. This is recommended for new "
#~ "packages that need to support Python 2 and 3 and installation via both "
#~ "``pip`` and ``python setup.py install``."
#~ msgstr ""
#~ "`pkgutil 型の名前空間パッケージ <pkgutil-style namespace packages>`_ を用"
#~ "いる方法。 Python 2 および 3 をサポートする必要があって ``pip`` でも "
#~ "``python setup.py install`` でもインストールできるようにしたいなら、これが"
#~ "推奨される方法です。"

#~ msgid ""
#~ "Use `pkg_resources-style namespace packages`_. This method is recommended "
#~ "if you need compatibility with packages already using this method or if "
#~ "your package needs to be zip-safe."
#~ msgstr ""
#~ "`pkg_resources 型の名前空間パッケージ <pkg_resources-style namespace "
#~ "packages>`_ を使う方法。この手法を採用した既存のパッケージとの互換性を保つ"
#~ "必要がある場合か、あなたのパッケージに zip 耐性を持つ必要がある場合に推奨"
#~ "されます。"

#~ msgid ""
#~ "Because ``mynamespace`` doesn't contain an :file:`__init__.py`, :func:"
#~ "`setuptools.find_packages` won't find the sub-package. You must use :func:"
#~ "`setuptools.find_namespace_packages` instead or explicitly list all "
#~ "packages in your :file:`setup.py`. For example:"
#~ msgstr ""
#~ "``my namespace`` が :file:`__init__.py` を含まないので、 :func:"
#~ "`setuptools.find_packages` はサブパッケージを検出しようとしません。代わり"
#~ "に :func:`setuptools.find_namespace_packages` を使うか、または、 :file:"
#~ "`setup.py` にすべてのパッケージを明示的に列挙してください。例えば:"

#~ msgid ""
#~ "`June 2022 <https://discuss.python.org/t/pep-668-marking-python-base-"
#~ "environments-as-externally-managed/10302/44>`_: ``EXTERNALLY-MANAGED`` "
#~ "marker file was originally specified in :pep:`668#marking-an-interpreter-"
#~ "as-using-an-external-package-manager`."
#~ msgstr ""
#~ "`2022年6月 <https://discuss.python.org/t/pep-668-marking-python-base-"
#~ "environments-as-externally-managed/10302/44>`_: ``EXTERNALLY-MANAGED`` "
#~ "マーカファイルは、元々は :pep:`668#marking-an-interpreter-as-using-an-"
#~ "external-package-manager` で仕様化されていました。"

#, fuzzy
#~ msgid "You can make sure that pip is up-to-date by running:"
#~ msgstr ""
#~ "Windows 用の Python インストーラは pip を含んでいます。次のようにすると "
#~ "pip が最新版であることを確実にすることができます:"

#~ msgid ""
#~ "This guide discusses how to install packages using :ref:`pip` and a "
#~ "virtual environment manager: either :ref:`venv` for Python 3 or :ref:"
#~ "`virtualenv` for Python 2. These are the lowest-level tools for managing "
#~ "Python packages and are recommended if higher-level tools do not suit "
#~ "your needs."
#~ msgstr ""
#~ "このガイドでは、 :ref:`pip` と仮想環境マネージャ、つまり Python 3 での :"
#~ "ref:`venv` か Python 2 での :ref:`virtualenv` を使ってパッケージをインス"
#~ "トールする方法について議論します。これらは、Python のパッケージを管理する"
#~ "最も低レベルのツールで、高レベルのツールがあなたのニーズに合わない時に推奨"
#~ "される方法です。"

#~ msgid "Installing pip"
#~ msgstr "pip をインストールする"

#~ msgid ""
#~ "Debian and most other distributions include a `python-pip`_ package; if "
#~ "you want to use the Linux distribution-provided versions of pip, see :doc:"
#~ "`/guides/installing-using-linux-tools`."
#~ msgstr ""
#~ "Debian や他のほとんどのディストロは `python-pip`_ パッケージを含んでいま"
#~ "す; Linuxのディストロが準備したバージョンの pip を使いたい場合は、 :doc:`/"
#~ "guides/installing-using-linux-tools` を見てください。"

#~ msgid ""
#~ "You can also install pip yourself to ensure you have the latest version. "
#~ "It's recommended to use the system pip to bootstrap a user installation "
#~ "of pip:"
#~ msgstr ""
#~ "pip の最新版を使っていることを担保するために、自分自身でインストールするこ"
#~ "ともできます。ユーザ側で pip をインストールするためにシステム側で準備した "
#~ "pip をブートストラップとして使うことが推奨されています。"

#~ msgid "Installing virtualenv"
#~ msgstr "virtualenv をインストールする"

#~ msgid ""
#~ "If you are using Python 3.3 or newer, the :mod:`venv` module is the "
#~ "preferred way to create and manage virtual environments. venv is included "
#~ "in the Python standard library and requires no additional installation. "
#~ "If you are using venv, you may skip this section."
#~ msgstr ""
#~ "Python 3.3 またはそれ以降のものを使っているなら、 :mod:`venv` モジュールの"
#~ "方が仮想環境を作成・管理するのに好ましいです。 venv は Python の標準ライブ"
#~ "ラリに含まれていて、追加で何かをインストールしなければならないということが"
#~ "ありません。venv を使っているのであれば、この節を飛ばして構いません。"

#~ msgid ""
#~ ":ref:`virtualenv` is used to manage Python packages for different "
#~ "projects. Using virtualenv allows you to avoid installing Python packages "
#~ "globally which could break system tools or other projects. You can "
#~ "install virtualenv using pip."
#~ msgstr ""
#~ ":ref:`virtualenv` は、異なるプロジェクトで使う Python パッケージを管理する"
#~ "ために使われていました。Python パッケージを大域的にインストールするとシス"
#~ "テムツールや他のプロジェクトを壊してしまいかねないのですが、 virtualenv を"
#~ "用いることでこれを避けることができます。virtualenv は pip でインストールで"
#~ "きます。"

#~ msgid "It should be in the ``env`` directory:"
#~ msgstr "``env`` ディレクトリの中のものを使っているはずです。"

#~ msgid "Leaving the virtual environment"
#~ msgstr "仮想環境から離脱する"

#~ msgid "Installing specific versions"
#~ msgstr "特定のバージョンをインストールする"

#~ msgid "pip can install a package directly from source, for example:"
#~ msgstr ""
#~ "pip はソースコードから直接にパッケージをインストールすることができます。例"
#~ "えば:"

#~ msgid "Using other package indexes"
#~ msgstr "他のパッケージインデックスを使う"

#~ msgid "Installing Packages:"
#~ msgstr "パッケージをインストールする:"

#~ msgid "Miscellaneous:"
#~ msgstr "種々の事柄:"

#~ msgid "The version of the project as supported by :pep:`440`."
#~ msgstr ":pep:`440` でサポートされた通りのプロジェクトのバージョン。"

#~ msgid ""
#~ "Version numbering requirements and the semantics for specifying "
#~ "comparisons between versions are defined in :pep:`440`."
#~ msgstr ""
#~ "バージョンの付け方に関する要求事項や、バージョン間での比較方法を指定する意"
#~ "味づけは、 :pep:`440` に定義されています。"

#~ msgid ""
#~ "The version specifiers section in this PEP supersedes the version "
#~ "specifiers section in :pep:`345`."
#~ msgstr ""
#~ "この PEP のバージョン指定子の節は、 :pep:`345` のバージョン指定子の節を置"
#~ "き換えるものです。"

#~ msgid "Contents"
#~ msgstr "内容"

#~ msgid "FIXME"
#~ msgstr "FIXME (ここを修正してください)"

#~ msgid "mention the stable ABI (3.2+, link to the CPython C API docs)"
#~ msgstr "安定な ABI (3.2+ のこと。 CPython C API 説明文書にリンクすること)"

#~ msgid "mention the implications of the GIL for extension modules"
#~ msgstr "拡張モジュール向けの GIL 実装について言及すること"

#~ msgid ""
#~ "For interim guidance on this topic, see the discussion in :issue:`this "
#~ "issue <284>`."
#~ msgstr ""
#~ "この話題に関する暫定的なガイダンスが :issue:`この課題 <284>` にあります。"

#~ msgid "cover publishing as wheel files on PyPI or a custom index server"
#~ msgstr ""
#~ "PyPI やその他のインデックスサーバに wheel ファイルを公開することについて書"
#~ "くこと"

#~ msgid "cover creation of Windows and macOS installers"
#~ msgstr "Windows 向けや macOS 向けのインストーラの作り方について書くこと"

#~ msgid ""
#~ "mention the fact that Linux distros have a requirement to build from "
#~ "source in their own build systems, so binary-only releases are strongly "
#~ "discouraged"
#~ msgstr ""
#~ "Linux のディストロ群ではそれぞれのビルドシステムでソースコードからビルドで"
#~ "きることを要求するので、バイナリのみのリリースは強い非推薦の状態にあるとい"
#~ "う事実について書くこと"

#~ msgid ""
#~ "This section covers the basics of how to create documentation using "
#~ "`Sphinx`_ and host the documentation for free in `Read The Docs`_."
#~ msgstr ""
#~ "この節では、 `Sphinx`_ を用いて説明文書を作成する方法の基礎と、 `Read The "
#~ "Docs`_ に無料で説明文書をホストしてもらう方法を説明します。"

#~ msgid "Installing Sphinx"
#~ msgstr "Sphinx をインストールする"

#~ msgid "Use ``pip`` to install Sphinx:"
#~ msgstr "``pip`` を使って Sphinx をインストールするには:"

#~ msgid ""
#~ "For other installation methods, see this :doc:`installation guide <sphinx:"
#~ "usage/installation>` by Sphinx."
#~ msgstr ""
#~ "その他のインストール方法については、 Sphinx による :doc:`インストールガイ"
#~ "ド <sphinx:usage/installation>` を見てください。"

#~ msgid "Getting Started With Sphinx"
#~ msgstr "Sphinx の初めの第一歩"

#~ msgid ""
#~ "Create a ``docs`` directory inside your project to hold your "
#~ "documentation:"
#~ msgstr ""
#~ "プロジェクトの中に説明文書を保持するための ``docs`` ディレクトリを作成しま"
#~ "す:"

#~ msgid "Run ``sphinx-quickstart`` inside the ``docs`` directory:"
#~ msgstr ""
#~ "``docs`` ディレクトリ内で ``sphinx-quickstart`` コマンドを実行します:"

#~ msgid ""
#~ "This sets up a source directory, walks you through some basic "
#~ "configurations, and creates an ``index.rst`` file as well as a ``conf."
#~ "py`` file."
#~ msgstr ""
#~ "これは、ソースディレクトリを作成し、いくつかの基本的な設定事項を渉猟し、 "
#~ "``conf.py`` ファイルと同様に ``index.rst`` ファイルを生成します。"

#~ msgid ""
#~ "You can add some information about your project in ``index.rst``, then "
#~ "build them:"
#~ msgstr ""
#~ "``index.rst`` にプロジェクトに関する情報をいくらか追加して、ビルドします:"

#~ msgid ""
#~ "For more details on the build process, see this `guide`_ by Read The Docs."
#~ msgstr ""
#~ "ビルドのプロセスに関するもっと詳しいことは、 Read The Docs の `ガイド "
#~ "<guide>`_ を見てください。"

#~ msgid ""
#~ "For a more detailed guide on how to use Sphinx and reStructuredText, "
#~ "please see this `documentation tutorial`_ on Hitchhiker's Guide to Python."
#~ msgstr ""
#~ "Sphinx と reStructuredText の使い方に関するもっと詳細なガイドについては、 "
#~ "Python のためのヒッチハイカーズガイドの中の `説明文書を作るチュートリアル "
#~ "<documentation tutorial>`_ を見てください。"

#~ msgid ""
#~ "Essential tools and concepts for working within the Python development "
#~ "ecosystem are covered in our :doc:`tutorials/index` section:"
#~ msgstr ""
#~ "Python での開発に関わるエコシステム内で使われる基本的なツールや概念につい"
#~ "ては、 :doc:`チュートリアル <tutorials/index>` 節に記述しています:"

#~ msgid ""
#~ "To get an overview of packaging options for Python libraries and "
#~ "applications, see the :doc:`Overview of Python Packaging <overview>`"
#~ msgstr ""
#~ "Python ライブラリとアプリケーション向けのパッケージングオプションの概要を"
#~ "得るには、 :doc:`Python におけるパッケージングの概要 <overview>` を見てく"
#~ "ださい"

#~ msgid "Learn more"
#~ msgstr "さらに学ぶ"

#~ msgid ""
#~ "Beyond our :doc:`tutorials/index`, this guide has several other resources:"
#~ msgstr ""
#~ ":doc:`tutorials/index` を越える話題については、このガイドには他にいくつか"
#~ "のリソースがあります:"

#~ msgid ""
#~ "The :doc:`guides/index` section for walk throughs, such as :doc:`guides/"
#~ "installing-using-linux-tools` or :doc:`guides/packaging-binary-"
#~ "extensions`."
#~ msgstr ""
#~ "一通り通して知るには :doc:`ガイド <guides/index>` の :doc:`linux のツール"
#~ "を使ってインストールする <guides/installing-using-linux-tools>` や :doc:`"
#~ "バイナリ拡張をパッケージ化する <guides/packaging-binary-extensions>` な"
#~ "ど。"

#~ msgid ""
#~ "The :doc:`discussions/index` section for in-depth references on topics "
#~ "such as :doc:`discussions/deploying-python-applications` or :doc:"
#~ "`discussions/pip-vs-easy-install`."
#~ msgstr ""
#~ ":doc:`python アプリケーションを配置する <discussions/deploying-python-"
#~ "applications>` や :doc:`pip 対 easy-install <discussions/pip-vs-easy-"
#~ "install>` のような詳細に渡る議論を参照するには :doc:`議論 <discussions/"
#~ "index>` の節を見てください。"

#~ msgid ""
#~ "``requires`` is a list of packages that are needed to build your package. "
#~ "You don't need to install them; build frontends like :ref:`pip` will "
#~ "install them automatically in a temporary, isolated virtual environment "
#~ "for use during the build process."
#~ msgstr ""
#~ "``requires`` は、当該パッケージをビルドするために必要となるパッケージ群を"
#~ "列挙したものです。これらを自分でインストールする必要はなく; :ref:`pip` の"
#~ "ようなビルドフロントエンドが、ビルド作業の一環として、一時的で隔離された仮"
#~ "想環境に自動的にインストールしてくれることでしょう。"

#~ msgid ""
#~ "It uses the `sigstore/gh-action-sigstore-python GitHub Action`_, and then "
#~ "uploads them to a GitHub Release."
#~ msgstr ""
#~ "それには `sigstore/gh-action-sigstore-python GitHub Action`_ を使い、それ"
#~ "から GitHub Release にアップロードします。"

#~ msgid ""
#~ "It's important to note that the term \"package\" in this context is being "
#~ "used to describe a bundle of software to be installed (i.e. as a synonym "
#~ "for a :term:`distribution <Distribution Package>`). It does not to refer "
#~ "to the kind of :term:`package <Import Package>` that you import in your "
#~ "Python source code (i.e. a container of modules). It is common in the "
#~ "Python community to refer to a :term:`distribution <Distribution "
#~ "Package>` using the term \"package\".  Using the term \"distribution\" is "
#~ "often not preferred, because it can easily be confused with a Linux "
#~ "distribution, or another larger software distribution like Python itself."
#~ msgstr ""
#~ "この文脈では、 \"パッケージ\" という用語が、インストールされるソフトウェア"
#~ "の束を表すものである (すなわち、 :term:`配布物 <Distribution Package>` の"
#~ "同義語である) ことを注記しておくことは重要です。 Python のなんらかのソース"
#~ "コードをインポートする (つまり、モジュール群の) 容れ物としての :term:`パッ"
#~ "ケージ <Import Package>` のことを指してはいないのです。 Python のコミュニ"
#~ "ティでは、 :term:`配布物 <Distribution Package>` のことを \"パッケージ\" "
#~ "という用語で呼ぶことは一般的に行われています。 Linux ディストロや、 "
#~ "Python そのもののようなその他の大きなソフトウェア配布物と紛らわしいので、 "
#~ "\"配布物\" という用語を使うことはしばしば歓迎されません。"

#~ msgid ""
#~ "`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues "
#~ "<https://bugs.python.org/>`__"
#~ msgstr ""
#~ "`説明文書 <https://docs.python.org/3/library/distutils.html>`__ | `課題リ"
#~ "スト <https://bugs.python.org/>`__"

#~ msgid "Saving credentials on GitHub"
#~ msgstr "GitHub に認証情報を保存する"

#~ msgid ""
#~ "In this guide, we'll demonstrate uploading to both PyPI and TestPyPI, "
#~ "meaning that we'll have two separate sets of credentials. And we'll need "
#~ "to save them in the GitHub repository settings."
#~ msgstr ""
#~ "このガイドでは、 PyPI と TestPyPI の両方へのアップロードを実演するので、二"
#~ "組の別々の認証情報を持つことになります。そして、それらを GitHub のリポジト"
#~ "リ設定の中に保存する必要があります。"

#~ msgid ""
#~ "Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
#~ "token`_. If you have the project on PyPI already, limit the token scope "
#~ "to just that project. You can call it something like ``GitHub Actions CI/"
#~ "CD — project-org/project-repo`` in order for it to be easily "
#~ "distinguishable in the token list. **Don't close the page just yet — you "
#~ "won't see that token again.**"
#~ msgstr ""
#~ "https://pypi.org/manage/account/#api-tokens へ行って新しい `APIトークン "
#~ "<API token>`_ を作成してください。もう PyPI に自分のプロジェクトを持ってい"
#~ "るのであれば、トークンのスコープをそのプロジェクトだけに限定してください。"
#~ "トークンのリストの中で容易に見分けがつくように、何か ``GitHub Actions CI/"
#~ "CD — project-org/project-repo`` のような名前にしましょう。 **まだページを"
#~ "閉じないで -- トークンを再び見る機会はないですよ。**"

#~ msgid ""
#~ "In a separate browser tab or window, go to the ``Settings`` tab of your "
#~ "target repository and then click on `Secrets`_ in the left sidebar."
#~ msgstr ""
#~ "ブラウザで別のタブかウィンドウを開いて、対象になっているリポジトリの "
#~ "``Settings`` タブへ行き、左側のサイドバーにある `Secrets`_ の部分をクリッ"
#~ "クしてください。"

#~ msgid ""
#~ "Create a new secret called ``PYPI_API_TOKEN`` and copy-paste the token "
#~ "from the first step."
#~ msgstr ""
#~ "``PYPI_API_TOKEN`` と言う名前で新しい secret を作成し、先ほど作成したトー"
#~ "クンをコピーしましょう。"

#~ msgid ""
#~ "Now, let's add initial setup for our job. It's a process that will "
#~ "execute commands that we'll define later. In this guide, we'll use the "
#~ "latest stable Ubuntu LTS version provided by GitHub Actions:"
#~ msgstr ""
#~ "さて、我々のジョブについて最初の設定を追加しましょう。それは、我々が後で定"
#~ "義するであろうコマンドを実行するようなプロセスです。このガイドでは、"
#~ "GitHub Actions で提供される Ubuntu LTS の最新版を使います:"

#~ msgid "Then, add the following under the ``build-n-publish`` section:"
#~ msgstr "それから、以下のものを ``build-n-publish`` 節に追加しましょう:"

#, fuzzy
#~ msgid ""
#~ "You can use any other method for building distributions as long as it "
#~ "produces ready-to-upload artifacts saved into the ``dist/`` folder. You "
#~ "can even use ``actions/upload-artifact`` and ``actions/download-"
#~ "artifact`` to transfer files between jobs or make them accessible for "
#~ "download from the web CI interface."
#~ msgstr ""
#~ "アップロードできる状態の創作物を ``dist/`` ディレクトリに保存するという条"
#~ "件を満たすのであれば、他のどのような方法で配布物をビルドしても構いません。"
#~ "ジョブからジョブへファイルを転送するのに ``actions/upload-artifact`` や "
#~ "``actions/download-artifact`` を使ったり、ウェブの CI インタフェースからダ"
#~ "ウンロードできるようにすることでそれらにアクセスすることを可能にしたりする"
#~ "ことさえできます。"

#~ msgid "So add this to the steps list:"
#~ msgstr "そこでこれを手順のリストに追加しましょう:"

#~ msgid ""
#~ "These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the "
#~ "first one uploads contents of the ``dist/`` folder into TestPyPI "
#~ "unconditionally and the second does that to PyPI, but only if the current "
#~ "commit is tagged. It is recommended you use the latest release tag; a "
#~ "tool like GitHub's dependabot can keep these updated regularly."
#~ msgstr ""
#~ "これらふたつの手順は、 `pypa/gh-action-pypi-publich`_ GitHub アクションを"
#~ "使います: 一つ目は ``dist/`` ディレクトリの中身を無条件に TestPyPI にアッ"
#~ "プロードする時で、二つ目はそのコミットがタグ付けされている場合に限って "
#~ "PyPI へ送る時です。最新のリリースタグを用いることが推奨されています; "
#~ "GitHub のdependabot のようなツールが恒常的に更新されている状態を保つことが"
#~ "できるのです。"

#~ msgid ""
#~ "`Docs <https://github.com/pypiserver/pypiserver/blob/master/README."
#~ "rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI "
#~ "<https://pypi.org/project/pypiserver/>`__"
#~ msgstr ""
#~ "`説明文書 <https://github.com/pypiserver/pypiserver/blob/master/README."
#~ "rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI "
#~ "<https://pypi.org/project/pypiserver/>`__"

#~ msgid "_`https://bazaar.canonical.com` *(Not responding as of 5/2023)*"
#~ msgstr "_`https://bazaar.canonical.com` *(2023年5月時点で応答しません)*"

#~ msgid ""
#~ "Using naming convention for plugins also allows you to query the Python "
#~ "Package Index's `simple API`_ for all packages that conform to your "
#~ "naming convention."
#~ msgstr ""
#~ "プラグインの命名規則を用いることで、あなたの命名規則に従うすべてのパッケー"
#~ "ジについてPython パッケージインデックスの `simple API`_ から検索することも"
#~ "できるようになります。"

#~ msgid ""
#~ "For complete documentation of the simple repository protocol, see :pep:"
#~ "`503`."
#~ msgstr ""
#~ "単純なリポジトリプロトコルの完全な説明文書としては、 :pep:`503` を見てくだ"
#~ "さい。"

#~ msgid ""
#~ "PDM is a modern Python package manager with :pep:`582` support. It "
#~ "installs and manages packages in a similar way to ``npm`` that doesn't "
#~ "need to create a :term:`virtual environment` at all. It also uses :term:"
#~ "`pyproject.toml` to store project metadata as defined in :pep:`621`."
#~ msgstr ""
#~ "PDM は、近代的な Python パッケージ管理ソフトで、 :pep:`582` をサポートして"
#~ "います。 :term:`仮想環境 <virtual environment>` を作る必要が全くない "
#~ "``npm`` と似たやり方でパッケージをインストール・管理します。 :pep:`621` で"
#~ "定義されているように、プロジェクトのメタデータを :term:`pyproject.toml` に"
#~ "保存します。"

#~ msgid ""
#~ "This is a list of currently active interoperability specifications "
#~ "maintained by the Python Packaging Authority. The process for updating "
#~ "these standards, and for proposing new ones, is documented on `pypa.io "
#~ "<https://www.pypa.io/en/latest/specifications.html>`__."
#~ msgstr ""
#~ "これは、 Python パッケージングオーソリティが維持管理している現時点で有効な"
#~ "相互互換性の仕様です。これらの標準を更新し新たな標準を提案するプロセス"
#~ "は、 `pypa.io <https://www.pypa.io/en/latest/specifications.html>`__ に文"
#~ "書化されています。"

#~ msgid ""
#~ "To install from other data sources (for example Amazon S3 storage) you "
#~ "can create a helper application that presents the data in a :pep:`503` "
#~ "compliant index format, and use the ``--extra-index-url`` flag to direct "
#~ "pip to use that index."
#~ msgstr ""
#~ ":pep:`503` 準拠のインデックスフォーマットに合わせてデータを表現するような"
#~ "ヘルパーアプリケーションを作成すれば、 pip を ``--extra-index-url`` フラグ"
#~ "でそのインデックスへ向け直すことで、他のデータソース (例えば Amazon S3 ス"
#~ "トレージ) からインストールすることができます。"

#~ msgid ""
#~ "`PDM <https://github.com/pdm-project/pdm>`_ for a modern Python package "
#~ "management tool supporting :pep:`582` (replacing virtual environments "
#~ "with ``__pypackages__`` directory for package installation) and relying "
#~ "on standards such as :pep:`517` and :pep:`621`."
#~ msgstr ""
#~ "`PDM <https://github.com/pdm-project/pdm>`_ は、近代的な Python パッケージ"
#~ "管理ツールで、 (パッケージインストールのための ``__pypackages__`` ディレク"
#~ "トリを採用した仮想環境を置き換える) :pep:`582` をサポートしており、 :pep:"
#~ "`517` や :pep:`621` のような標準に立脚しています。"

#~ msgid ""
#~ "It may also be known that project A follows semantic versioning, and that "
#~ "v2 of 'A' will indicate a break in compatibility, so it makes sense to "
#~ "not allow v2:"
#~ msgstr ""
#~ "また、Aがセマンティックバージョニングの方法に従っていて'A'の(将来の)v2は互"
#~ "換性を持たなくなるだろうかということがわかっているので、(自分たちのプロ"
#~ "ジェクトの側では)v2を許容したくないとしましょう："

#~ msgid ":term:`Wheel` has an :pep:`official PEP <427>`. :term:`Egg` did not."
#~ msgstr ""
#~ ":term:`Wheel`には :pep:`公式PEP <427>`が存在します。 :term:`Egg`には対応す"
#~ "るPEPがありません。"

#~ msgid ""
#~ "Circumstantially, in some cases, wheels can be used as an importable "
#~ "runtime format, although :pep:`this is not officially supported at this "
#~ "time <427#is-it-possible-to-import-python-code-directly-from-a-wheel-"
#~ "file>`."
#~ msgstr ""
#~ ":pep:`Wheelファイルから直接にimportすることは現時点では公式にサポートされ"
#~ "ていません<427#is-it-possible-to-import-python-code-directly-from-a-wheel-"
#~ "file>`が、状況によって幾つかのケースでwheelは重要な実行時フォーマットとし"
#~ "て使われます。"

#~ msgid ""
#~ "A :term:`Built Distribution` format introduced by :pep:`427`, which is "
#~ "intended to replace the :term:`Egg` format.  Wheel is currently supported "
#~ "by :ref:`pip`."
#~ msgstr ""
#~ ":term:`Egg` フォーマットを代替することを意図して :pep:`427` で導入された :"
#~ "term:`ビルド済配布物`。現在、:ref:`pip`はWheelをサポートしている。"

#~ msgid ""
#~ "Note that the rows are stored in a partitioned, which helps limit the "
#~ "cost of queries. These example queries analyze downloads from recent "
#~ "history by filtering on the ``timestamp`` column."
#~ msgstr ""
#~ "クエリのコストを削減するためにデータベースの行がパーティションされた状態で"
#~ "格納されていることを覚えておいてください。これらの例では、``timestamp`` カ"
#~ "ラムを使って絞り込むことで最近のダウンロード履歴を分析しています。"

#~ msgid ""
#~ "To only count downloads from pip, filter on the ``details.installer."
#~ "name`` column."
#~ msgstr ""
#~ "pipを通じてダウンロードされた数だけを数えるには、``details.installer."
#~ "name``カラムを使って抽出します。"

#~ msgid "For CentOS, see here: https://www.softwarecollections.org/en/"
#~ msgstr ""
#~ "CentOS の場合は、こちらを見てください: https://www.softwarecollections."
#~ "org/en/"

#~ msgid "Debian/Ubuntu"
#~ msgstr "Debian/Ubuntu"

#~ msgid ""
#~ "This will download your repository into the CI runner and then install "
#~ "and activate Python 3.10."
#~ msgstr ""
#~ "これによって、あなたのリポジトリを CI ランナーにダウンロードして、 Python "
#~ "3.10 をインストールしアクティベートすることになります。"

#~ msgid ""
#~ "This is great for sharing simple scripts and snippets between people who "
#~ "both have compatible Python versions (such as via email, StackOverflow, "
#~ "or GitHub gists). There are even some entire Python libraries that offer "
#~ "this as an option, such as `bottle.py <https://bottlepy.org/docs/dev/>`_ "
#~ "and :doc:`boltons <boltons:architecture>`."
#~ msgstr ""
#~ "この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python "
#~ "を持っている人たちどうしで (電子メールや StackOverflow や GitHub gists な"
#~ "どで) 共有するには優れた方法です。例えば `bottle.py <https://bottlepy.org/"
#~ "docs/dev/>`_ and :doc:`boltons <boltons:architecture>` のように、 Python "
#~ "ライブラリ全体をこのやり方で共有することをオプションの一つとして提供してい"
#~ "るものさえあります。"

#~ msgid ""
#~ "Computing as we know it is defined by the ability to execute programs. "
#~ "Every operating system natively supports one or more formats of program "
#~ "they can natively execute."
#~ msgstr ""
#~ "我々が知るところのコンピューティングは、プログラムを実行する能力として定義"
#~ "されます。それぞれのオペレーティングシステムは、そのまま実行することが可能"
#~ "なひとつかもっと多くのプログラムフォーマットを元々サポートしています。"

#~ msgid ""
#~ "These techniques are mostly reserved for larger scale deployments in data "
#~ "centers, though certain complex applications can benefit from this "
#~ "packaging. Technologies are Python agnostic, and include:"
#~ msgstr ""
#~ "このような手法は、複雑なアプリケーションの中にはこのパッケージング方法から"
#~ "利益を得るものもありますが、たいていの場合はデータセンタにおけるかなり大規"
#~ "模な配置のために使用します。技術としては Python を直接サポートしているわけ"
#~ "ではなく、次のものを含みます:"

#~ msgid ""
#~ "Either because that character is inconvenient or potentially confusing in "
#~ "some contexts (for example, ``+`` must be quoted in URLs, ``~`` is used "
#~ "to denote the user's home directory in POSIX), or because the advantages "
#~ "weren't sufficiently compelling to justify changing the existing "
#~ "reference implementation for the wheel format defined in :pep:427 (for "
#~ "example, using ``,`` rather than ``.`` to separate components in a "
#~ "compressed tag)."
#~ msgstr ""
#~ "それは、その文字が不便であるかコンテクストによっては潜在的に混乱を招きやす"
#~ "い (例えば ``+`` は URL 内ではクォートしなければなりませんし、 ``~`` は "
#~ "POSIX でユーザのホームディレクトリを示すために使われます) から、あるい"
#~ "は、 :pep:427 で定義された wheel フォーマットを参照して作成された既存の実"
#~ "装を変更すること (例えば、圧縮タグで部分部分を分割するのに ``.`` ではなく "
#~ "``,`` を使うようにすること) を正当化するに足りるだけのアドバンテージがない"
#~ "から、のいずれかです。"

#~ msgid ""
#~ "This is great for sharing simple scripts and snippets between people who "
#~ "both have compatible Python versions (such as via email, StackOverflow, "
#~ "or GitHub gists). There are even some entire Python libraries that offer "
#~ "this as an option, such as `bottle.py <https://pypi.org/project/bottle/"
#~ ">`_ and :doc:`boltons <boltons:architecture>`."
#~ msgstr ""
#~ "この方法は、単純なスクリプトやスニペットを互換性のあるバージョンの Python "
#~ "を持っている人たちどうしで (電子メールや StackOverflow や GitHub gists な"
#~ "どで) 共有するには優れた方法です。例えば `bottle.py <https://pypi.org/"
#~ "project/bottle/>`_ や :doc:`boltons <boltons:architecture>` のように、 "
#~ "Python ライブラリ全体をこのやり方で共有することをオプションの一つとして提"
#~ "供しているものさえあります。"

#~ msgid ""
#~ "It's the command line interface for running various commands that relate "
#~ "to packaging tasks. To get a listing of available commands, run ``python "
#~ "setup.py --help-commands``."
#~ msgstr ""
#~ "それは、パッケージングする上での作業項目に関連したさまざまなコマンドを走ら"
#~ "せるためのコマンドラインインタフェイスです。使用可能なコマンドを一覧するに"
#~ "は、 ``python setup.py --help-commands`` を実行してください。"

#~ msgid ""
#~ "A variation on the above which pre-builds the installation files for the "
#~ "requirements using :ref:`python -m pip wheel <pip:pip wheel>`:"
#~ msgstr ""
#~ ":ref:`python -m pip wheel <pip:pip wheel>` を用いて依存先パッケージのイン"
#~ "ストール用ファイルをあらかじめビルドしておくという上記のバリエーション:"

#~ msgid ""
#~ "This can be worked around by setting all dependencies in ``__main__."
#~ "__requires__`` before importing ``pkg_resources`` for the first time, but "
#~ "that approach does mean that standard command line invocations of the "
#~ "affected tools can't be used - it's necessary to write a custom wrapper "
#~ "script or use ``python -c '<command>'`` to invoke the application's main "
#~ "entry point directly."
#~ msgstr ""
#~ "最初に ``pkg_resources`` をインポートするよりも前に ``__main__."
#~ "__requires__`` の中のすべての依存関係を設定しておくことでこの問題を回避す"
#~ "ることができますが、このアプローチでは影響を受けるツールを標準のコマンドラ"
#~ "インからの呼び出しで使うことができないことになります - つまり、独自のラッ"
#~ "パスクリプトを書くか、アプリケーションの main エントリポイントを直接に呼び"
#~ "出すための ``python -c '<command>'`` を使うかしなければなりません。"

#~ msgid "https://bazaar.canonical.com"
#~ msgstr "https://bazaar.canonical.com"

#~ msgid ""
#~ "This guide *assumes* that you already have a project that you know how to "
#~ "build distributions for and *it lives on GitHub*."
#~ msgstr ""
#~ "このガイドでは、配布物をビルドするやり方がわかっているプロジェクトが "
#~ "*GitHub に置いてある* ことを *前提* にしています。"

#~ msgid ""
#~ "And now we can build dists from source. In this example, we'll use "
#~ "``build`` package, assuming that your project has a ``pyproject.toml`` "
#~ "properly set up (see :pep:`517`/:pep:`518`)."
#~ msgstr ""
#~ "そして、今や我々はソースコードから配布物をビルドすることができます。この例"
#~ "では、あなたのプロジェクトの ``pyproject.toml`` が適切に設定されている (:"
#~ "pep:`517` と :pep:`518` を参照してください) ことを仮定して、 ``build`` "
#~ "パッケージを用いることになります。"

#~ msgid ""
#~ "You can use any other method for building distributions as long as it "
#~ "produces ready-to-upload artifacts saved into the ``dist/`` folder."
#~ msgstr ""
#~ "アップロードできる状態の創作物を ``dist/`` ディレクトリに保存するという条"
#~ "件を満たすのであれば、どのような方法で配布物をビルドしても構いません。"

#~ msgid ""
#~ "This JSON file MUST be a dictionary, compliant with :rfc:`8259` and UTF-8 "
#~ "encoded."
#~ msgstr ""
#~ "この JSON ファイルは、:rfc:`8259` を満足する辞書になっていて、かつ、 "
#~ "UTF-8 エンコーディングでなければなりません。"

#~ msgid ""
#~ "If present, it MUST contain at least two fields. The first one is "
#~ "``url``, with type ``string``. Depending on what ``url`` refers to, the "
#~ "second field MUST be one of ``vcs_info`` (if ``url`` is a VCS reference), "
#~ "``archive_info`` (if ``url`` is a source archives or a wheel), or "
#~ "``dir_info`` (if ``url``  is a local directory). These info fields have a "
#~ "(possibly empty) subdictionary as value, with the possible keys defined "
#~ "below."
#~ msgstr ""
#~ "もし存在すれば、それは少なくともふたつのフィールドを含んでいなければなりま"
#~ "せん。第１のものは ``string`` 型の ``url`` です。 ``url`` が何を参照してい"
#~ "るかによって、第２のフィールドは、 (``url`` が VCS への参照であるなら) "
#~ "``vcs_info`` であるか、 (``url`` がソースコードのアーカイブまたは wheel を"
#~ "参照しているなら) ``archive_info`` であるか、または、 (``url`` がローカル"
#~ "のディレクトリを参照しているなら) ``dir_info`` であるか、このうちのひとつ"
#~ "でなければなりません。これらの情報フィールドは、以下に定義する取り得るキー"
#~ "と共に、 (空であることも可能ですが) サブディレクトリを値に取ります。"

#~ msgid ""
#~ "``url`` MUST be stripped of any sensitive authentication information, for "
#~ "security reasons."
#~ msgstr ""
#~ "``url`` は、セキュリティ上の理由から、機微に関わる認証情報をすべて削除して"
#~ "おかなければなりません。"

#~ msgid ""
#~ "A ``commit_id`` key (type ``string``) MUST be present, containing the "
#~ "exact commit/revision number that was installed. If the VCS supports "
#~ "commit-hash based revision identifiers, such commit-hash MUST be used as "
#~ "``commit_id`` in order to reference the immutable version of the source "
#~ "code that was installed."
#~ msgstr ""
#~ "``commit_id`` キー (``string`` 型) は、正確にどのコミットまたはリビジョン"
#~ "がインストールされたかを示すもので、必須のキーです。 VCS がリビジョン識別"
#~ "子に基づくコミットハッシュをサポートしているなら、インストールされたものの"
#~ "ソースコードの不変のバージョンを指し示す目的で、そのようなコミットハッシュ"
#~ "を ``commit_id`` として使わなければなりません。"

#~ msgid ""
#~ "``editable`` (type: ``boolean``): ``true`` if the distribution was "
#~ "installed in editable mode, ``false`` otherwise. If absent, default to "
#~ "``false``."
#~ msgstr ""
#~ "``editable`` (``boolean`` 型): 配布物が編集可能モードでインストールされて"
#~ "いる場合には ``true`` 、そうでなければ ``false`` 。存在していない場合のデ"
#~ "フォルトは ``false`` です。"

#~ msgid ""
#~ "When ``url`` refers to a local directory, it MUST have the ``file`` sheme "
#~ "and be compliant with :rfc:`8089`. In particular, the path component must "
#~ "be absolute. Symbolic links SHOULD be preserved when making relative "
#~ "paths absolute."
#~ msgstr ""
#~ "``url`` がローカルのディレクトリを参照している場合、 :rfc:``8089` に適合す"
#~ "る ``file`` が存在していなければなりません。特にパス部分は絶対パスでなけれ"
#~ "ばなりません。相対パスを絶対パスに変換する際には、シンボリックリンクはその"
#~ "まま保存されるべきです。"

#~ msgid ""
#~ "Installers can use the ``git show-ref`` and ``git symbolic-ref`` commands "
#~ "to determine if the ``requested_revision`` corresponds to a Git ref. In "
#~ "turn, a ref beginning with ``refs/tags/`` corresponds to a tag, and a ref "
#~ "beginning with ``refs/remotes/origin/`` after cloning corresponds to a "
#~ "branch."
#~ msgstr ""
#~ "インストーラは、 ``requested_revision`` が Git 参照に対応しているか否かを"
#~ "判断するために ``git show-ref`` や ``git symbolic-ref`` コマンドを使うこと"
#~ "ができます。さらに、 ``refs/tags/`` で始まる参照はタグに対応し、クローンし"
#~ "た後に ``refs/remotes/origin/`` で始まる参照はブランチに対応します。"

#~ msgid "Example direct_url.json"
#~ msgstr "direct_url.json の例"

#~ msgid "Local directory installed in editable mode:"
#~ msgstr "編集可能モードでインストールされたローカルディレクトリ:"

#~ msgid ""
#~ "The platform compatibility tagging model used for the ``wheel`` "
#~ "distribution format is defined in :pep:`425`."
#~ msgstr ""
#~ "``wheel`` 配布物フォーマットに使われるプラットフォーム互換性タグのタグ付け"
#~ "モデルは、 :pep:`425` で定義されています。"

#~ msgid "Platform tags for Windows"
#~ msgstr "Windows 向けプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` covers public distribution of wheel "
#~ "files to systems running Windows."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、 Windows で動作するシステム向けの "
#~ "wheel ファイルの公開配布物をカバーします。"

#~ msgid "Platform tags for macOS (Mac OS X)"
#~ msgstr "macOS (Mac OSX) 向けのプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` covers public distribution of wheel "
#~ "files to systems running macOS (previously known as Mac OS X)."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、 macOS (かつての Mac OS X) で動作するシ"
#~ "ステム向けの wheel ファイルの公開配布物をカバーします。"

#~ msgid "Platform tags for common Linux distributions"
#~ msgstr "普通の Linux ディストロ向けのプラットフォームタグ"

#~ msgid "Platform tags for other \\*nix platforms"
#~ msgstr "その他の \\*nix プラットフォーム向けのプラットフォームタグ"

#~ msgid ""
#~ "The scheme defined in :pep:`425` is not generally sufficient for public "
#~ "distribution of wheel files to other \\*nix platforms. Efforts are "
#~ "currently (albeit intermittently) under way to define improved "
#~ "compatibility tagging schemes for AIX and for Alpine Linux."
#~ msgstr ""
#~ ":pep:`425` で定義されたスキームは、その他の \\*nix プラットフォーム向けに"
#~ "公開された wheel 配布物にとって常に十分なものではありません。 AIX 向けや "
#~ "Alpine Linux 向けに改良された互換性タグのスキームを定義する努力が (断続的"
#~ "とは言え) 現在も続けられています。"

#~ msgid ""
#~ "For projects which don't provide their own Windows installers (and even "
#~ "some which do), Christoph Gohlke at the University of California provides "
#~ "a `collection of Windows installers <https://www.lfd.uci.edu/~gohlke/"
#~ "pythonlibs/>`__. Many Python users on Windows have reported a positive "
#~ "experience with these prebuilt versions."
#~ msgstr ""
#~ "独自の Windows 版インストーラを準備していないプロジェクトについては (そし"
#~ "て、準備しているプロジェクトでもその内のいくつかについては) 、カリフォルニ"
#~ "ア大学の Christoph Gohlke さんが `Windows 版インストーラのコレクション "
#~ "<https://www.lfd.uci.edu/~gohlke/pythonlibs/>`__ を提供しています。Windows"
#~ "で Python を使う多くのユーザが、これらのビルド済みのバージョン(のパッケー"
#~ "ジ) について肯定的な評価を報告しています。"

#~ msgid ""
#~ "Earlier versions of setuptools implemented the ``attr:`` directive by "
#~ "importing the module, but setuptools 46.4.0 added rudimentary AST "
#~ "analysis so that ``attr:`` can function without having to import any of "
#~ "the package's dependencies."
#~ msgstr ""
#~ "setuptools の初期のバージョンでは、モジュールをインポートすることで "
#~ "``attr:`` ディレクティブを実装していましたが、setuptools 46.4.0 で初歩的"
#~ "な AST 解析が追加されたので ``attr:`` が他の依存先パッケージをインポートし"
#~ "なくても機能するようになりました。"

#~ msgid ""
#~ ":doc:`Setuptools <setuptools:index>` provides :doc:`special support "
#~ "<setuptools:userguide/entry_point>` for plugins. By providing the "
#~ "``entry_points`` argument to :func:`setup` in :file:`setup.py` plugins "
#~ "can register themselves for discovery."
#~ msgstr ""
#~ ":doc:`Setuptools <setupetools:index>` はプラグイン向けに :doc:`特別なサ"
#~ "ポート <setuptools:userguide/entry_point>` を提供しています。 :file:"
#~ "`setup.py` の中の :func:`setup`の ``entry_points`` 引数を準備することで、"
#~ "プラグインが検出されるように登録することができます。"

#~ msgid ""
#~ "A corresponding :ref:`core metadata <core-metadata>` field does not exist"
#~ msgstr ""
#~ "対応する :ref:`コアとなるメタデータ <core-metadata>` のフィールドは存在し"
#~ "ない"

#~ msgid ""
#~ ":doc:`Docs <distlib:index>` | `Issues <https://bitbucket.org/pypa/distlib/"
#~ "issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket.org/"
#~ "pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"
#~ msgstr ""
#~ ":doc:`説明文書 <distlib:index>` | `課題リスト <https://bitbucket.org/pypa/"
#~ "distlib/issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket."
#~ "org/pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI "
#~ "<https://pypi.org/project/pip-tools/>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/jazzband/pip-tools/>`__ | `PyPI "
#~ "<https://pypi.org/project/pip-tools/>`__"

#~ msgid ""
#~ "``license`` is the path to the :file:`LICENSE` file, described below."
#~ msgstr ""
#~ "``license`` は、下に記述するように、 :file:`LICENSE` ファイルへのパスで"
#~ "す。"

#~ msgid ""
#~ "For more information, see `Automatic Script Creation <https://setuptools."
#~ "readthedocs.io/en/latest/userguide/quickstart.html#entry-points-and-"
#~ "automatic-script-creation>`_ from the :doc:`setuptools docs <setuptools:"
#~ "index>`."
#~ msgstr ""
#~ "詳しくは、:doc:`setuptools 説明文書 <setuptools:index>` の `スクリプトの自"
#~ "動生成 <https://setuptools.readthedocs.io/en/latest/userguide/quickstart."
#~ "html#entry-points-and-automatic-script-creation>`_ を見てください。"

#~ msgid ""
#~ "All other fields are considered optional and my be specified statically, "
#~ "listed as dynamic, or left unspecified."
#~ msgstr ""
#~ "他の全てのフィールドは必須ではないものと解釈され、これらは静的に指定しても"
#~ "動的にリストしても未指定のままにしていても構いません。"

#~ msgid "Install `setuptools extras`_."
#~ msgstr "`setuptools extras`_ をインストールする。"

#~ msgid ""
#~ "Pipenv is a project that aims to bring the best of all packaging worlds "
#~ "to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:"
#~ "`virtualenv` into one single toolchain. It features very pretty terminal "
#~ "colors."
#~ msgstr ""
#~ "Pipenv は、全てのパッケージング世界の最良のものを Python 世界に持ち込むこ"
#~ "とを目的とするプロジェクトです。 :ref:`Pipfile` ・ :ref:`pip` ・ :ref:"
#~ "`virtualenv` を単一のツールチェーンにまとめ上げるものです。端末上で綺麗な"
#~ "色彩を持っています。"

#~ msgid ""
#~ "Pipenv aims to help users manage environments, dependencies, and imported "
#~ "packages on the command line. It also works well on Windows (which other "
#~ "tools often underserve), makes and checkes file hashes, to ensure "
#~ "compliance with hash-locked dependency specifiers, and eases "
#~ "uninstallation of packages and dependencies. It is used by Python users "
#~ "and system administrators, but has been less maintained since late 2018."
#~ msgstr ""
#~ "Pipenv は、ユーザがコマンドラインで環境・依存関係・インポートされたパッ"
#~ "ケージを管理することを補助することを目的としています。 (他のツールが往々に"
#~ "してうまく動かない) Windows 上でもきちんと動作し、ファイルのハッシュ値を計"
#~ "算し確認することでハッシュ値による依存関係識別子との互換性を確保し、パッ"
#~ "ケージの依存関係先のアンインストールを容易にします。Python ユーザやシステ"
#~ "ム管理者に使われてきましたが、 2018 年後半以降はあまりメンテナンスされなく"
#~ "なりました。"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/pypa/hatch>`__ | `PyPI <https://pypi."
#~ "org/project/hatch>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/pypa/hatch>`__ | `PyPI <https://"
#~ "pypi.org/project/hatch>`__"

#~ msgid ""
#~ "These fields accept an array of tables with 2 keys: ``name`` and "
#~ "``email``. Both values must be strings. The ``name`` value MUST be a "
#~ "valid email name (i.e. whatever can be put as a name, before an email, "
#~ "in :rfc:`822`) and not contain commas. The ``email`` value MUST be a "
#~ "valid email address. Both keys are optional."
#~ msgstr ""
#~ "これらのフィールドは、 ``name`` と ``email`` のふたつのキーを伴ったテーブ"
#~ "ルの配列を受け入れます。両方の値は文字列でなければなりません。 ``name`` の"
#~ "値は、電子メールアドレスにおける正当な名前 (すなわち、 :rfc:`822` における"
#~ "電子メールアドレスのアドレス部分に前置する名前なら何でも) で、コンマを含ま"
#~ "ないものでなければなりません。 ``email`` の値は、正当な電子メールアドレス "
#~ "(のアドレス部分) でなければなりません。これらのキーは共に必須ではありませ"
#~ "ん。"

#~ msgid ""
#~ "`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI <https://pypi."
#~ "org/project/hatch>`__"
#~ msgstr ""
#~ "`GitHub と説明文書 <https://github.com/ofek/hatch>`__ | `PyPI <https://"
#~ "pypi.org/project/hatch>`__"

#~ msgid ""
#~ "Hatch is a unified command-line tool meant to conveniently manage "
#~ "dependencies and environment isolation for Python developers. Python "
#~ "package developers use Hatch to configure, version, specify dependencies "
#~ "for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` "
#~ "to upload packages to PyPI, and :ref:`pip` to download and install "
#~ "packages."
#~ msgstr ""
#~ "Hatch は、 Python での開発者向けに依存関係の管理や環境の分離を便利に行うた"
#~ "めの統合されたコマンドラインツールです。 Python パッケージ開発者は Hatch "
#~ "を使って、パッケージの設定を実施し、バージョン管理を行い、依存関係を指定"
#~ "し、そして PyPI で公開することができます。内部では、 :ref:`twine` を使って"
#~ "パッケージを PyPI へアップロードし、 :ref:`pip` を使ってパッケージのダウン"
#~ "ロードとインストールをしています。"

#~ msgid ""
#~ "These examples apply to :ref:`twine`, and projects like :ref:`hatch` that "
#~ "use it under the hood. Other projects (e.g. :ref:`flit`) also use :file:`."
#~ "pypirc`, but with different defaults. Please refer to each project's "
#~ "documentation for more details and usage instructions."
#~ msgstr ""
#~ "これらの例は :ref:`twine` や内部でそれを使う :ref:`hatch` のようなプロジェ"
#~ "クトに該当します。他のプロジェクト (例えば :ref:`flit`) でも :file:`."
#~ "pypirc` を使いますが、既定値が異なります。より詳しくは、または、使い方につ"
#~ "いてはそれぞれのプロジェクトの説明文書を見てください。"

#~ msgid ""
#~ "`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even "
#~ "more steps in the project management workflow, such as incrementing "
#~ "versions, tagging releases, and creating new skeleton projects from "
#~ "project templates."
#~ msgstr ""
#~ "`hatch <https://github.com/ofek/hatch>`_ は、バージョン番号の増やし方やタ"
#~ "グ付きリリース、プロジェクト雛形から新しいスケルトンプロジェクトを作成する"
#~ "方法などの点で、プロジェクト管理のワークフローにおけるこだわりの強い機能を"
#~ "持つツールです。"

#~ msgid ""
#~ "Use :ref:`pipenv` to manage library dependencies when developing Python "
#~ "applications. See :doc:`../tutorials/managing-dependencies` for more "
#~ "details on using ``pipenv``."
#~ msgstr ""
#~ "Python アプリケーションを開発する時にライブラリの依存関係を管理するに"
#~ "は、 :ref:`pipenv` を使いましょう。 ``pipenv`` について詳しくは :doc:`../"
#~ "tutorials/managing-dependencies` をご覧ください。"

#~ msgid ""
#~ "When ``pipenv`` does not meet your use case, consider other tools like:"
#~ msgstr ""
#~ "``pipenv`` があなたの要望に合致しない場合は、以下のようなツールを検討して"
#~ "ください:"

#~ msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
#~ msgstr "`pip-tools <https://github.com/jazzband/pip-tools>`_"

#~ msgid "`Poetry <https://python-poetry.org/>`_"
#~ msgstr "`Poetry <https://python-poetry.org/>`_"

#~ msgid "2014-11-11"
#~ msgstr "2014年11月11日"

#~ msgid ""
#~ "There are two kinds of metadata: *static* and *dynamic*. Static metadata "
#~ "is specified in the ``pyproject.toml`` file directly and cannot be "
#~ "specified or changed by a tool. Dynamic metadata is listed via the "
#~ "``dynamic`` key (defined later in this specification) and represents "
#~ "metadata that a tool will later provide."
#~ msgstr ""
#~ "メタデータにはふたつの種類があります: *静的* なものと *動的* なものです。"
#~ "静的なメタデータは ``pyproject.toml`` ファイルで直接指定されていて、ツール"
#~ "側では指定したり変更したりできません。動的なメタデータは ``dynamic`` キー "
#~ "(この仕様内で後で定義します) を経由して一覧化されていて、ツール側が後から"
#~ "提供することになるでしょう。"
