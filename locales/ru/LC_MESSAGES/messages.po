# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# Mingun <Alexander_Sergey@mail.ru>, 2021.
# Vita Markova <translations@evtn.ru>, 2021, 2022.
# МАН69К <weblate@mah69k.net>, 2022.
# Vik <xasertop@gmail.com>, 2022.
# Alex <hostspepc@gmail.com>, 2023.
# gfbdrgng <hnaofegnp@hldrive.com>, 2023, 2024, 2025.
# Andrey Rybakov <rybakov.ad@icloud.com>, 2023.
# Nikita <nikdissv.github.forever@gmail.com>, 2024.
# gfbdrgn <erfvvgtyhbnjhyuu@wireconnected.com>, 2025.
# da070116 <da070116@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-10-17 08:09+0000\n"
"PO-Revision-Date: 2025-06-07 08:01+0000\n"
"Last-Translator: da070116 <da070116@gmail.com>\n"
"Language-Team: Russian <https://hosted.weblate.org/projects/pypa/packaging-"
"python-org/ru/>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Weblate 5.12-dev\n"

#: ../source/contribute.rst:5
msgid "Contribute to this guide"
msgstr "Внесите вклад в это руководство"

#: ../source/contribute.rst:7
msgid ""
"The |PyPUG| welcomes contributors! There are lots of ways to help out, "
"including:"
msgstr ""
"|PyPUG| приветствует участников! Существует множество способов нам помочь, в "
"том числе:"

#: ../source/contribute.rst:10
msgid "Reading the guide and giving feedback"
msgstr "Чтение руководства и предоставление обратной связи"

#: ../source/contribute.rst:11
msgid "Reviewing new contributions"
msgstr "Проверка новых вкладов"

#: ../source/contribute.rst:12
msgid "Revising existing content"
msgstr "Пересмотр существующего материала"

#: ../source/contribute.rst:13
msgid "Writing new content"
msgstr "Написание нового материала"

#: ../source/contribute.rst:14
msgid "Translating the guide"
msgstr "Перевод руководства"

#: ../source/contribute.rst:16
msgid ""
"Most of the work on the |PyPUG| takes place on the `project's GitHub "
"repository`__. To get started, check out the list of `open issues`__ and "
"`pull requests`__. If you're planning to write or edit the guide, please "
"read the :ref:`style guide <contributing_style_guide>`."
msgstr ""
"Большая часть работы над |PyPUG| происходит на «проектном хранилище "
"GitHub`__. Чтобы начать, проверьте список `open issues`__ и `pull "
"requests`__. Если вы планируете писать или редактировать руководство, "
"пожалуйста, прочитайте :ref:`style guide <contributing_style_guide>`."

#: ../source/contribute.rst:25
msgid ""
"By contributing to the |PyPUG|, you're expected to follow the PSF's `Code of "
"Conduct`__."
msgstr ""
"Внося свой вклад в |PyPUG|, вы должны следовать `Нормам поведения <Code of "
"Conduct>`__ PSF."

#: ../source/contribute.rst:32
msgid "Documentation types"
msgstr "Типы документации"

#: ../source/contribute.rst:34
msgid ""
"This project consists of four distinct documentation types with specific "
"purposes. The project aspires to follow the `Diátaxis process`_ for creating "
"quality documentation. When proposing new additions to the project please "
"pick the appropriate documentation type."
msgstr ""
"Этот проект состоит из четырех различных типов документации с конкретными "
"целями. Проект стремится следовать «процессу Diátaxis» для создания "
"качественной документации. При предложении новых дополнений к проекту, "
"пожалуйста, выберите соответствующий тип документации."

#: ../source/contribute.rst:42 ../source/index.rst:55
#: ../source/tutorials/index.rst:2
msgid "Tutorials"
msgstr "Учебники"

#: ../source/contribute.rst:44
msgid ""
"Tutorials are focused on teaching the reader new concepts by accomplishing a "
"goal. They are opinionated step-by-step guides. They do not include "
"extraneous warnings or information. `example tutorial-style document`_."
msgstr ""
"Учебники нацелены на обучение читателя новым понятиям путем достижения цели. "
"Они представляют собой пошаговые руководства, основанные на мнениях. Они не "
"содержат лишних предупреждений или информации. `Пример документа в стиле "
"учебника`_."

#: ../source/contribute.rst:51 ../source/guides/index.rst:2
#: ../source/index.rst:69
msgid "Guides"
msgstr "Руководства"

#: ../source/contribute.rst:53
msgid ""
"Guides are focused on accomplishing a specific task and can assume some "
"level of pre-requisite knowledge. These are similar to tutorials, but have a "
"narrow and clear focus and can provide lots of caveats and additional "
"information as needed. They may also discuss multiple approaches to "
"accomplishing the task. :doc:`example guide-style document <guides/packaging-"
"namespace-packages>`."
msgstr ""
"Руководства ориентированы на выполнение конкретной задачи и могут "
"предполагать наличие определенного уровня предварительных знаний. Они похожи "
"на учебники, но имеют узкую и четкую направленность и могут содержать много "
"предостережений и дополнительной информации, если это необходимо. В них "
"также может обсуждаться несколько подходов к выполнению задачи. :doc:`пример "
"документа в стиле руководства <guides/packaging-namespace-packages>`."

#: ../source/contribute.rst:60 ../source/discussions/index.rst:2
msgid "Discussions"
msgstr "Обсуждения"

#: ../source/contribute.rst:62
msgid ""
"Discussions are focused on understanding and information. These explore a "
"specific topic without a specific goal in mind. :doc:`example discussion-"
"style document <discussions/install-requires-vs-requirements>`."
msgstr ""
"Дискуссии нацелены на понимание и получение информации. В них изучается "
"конкретная тема без определенной цели. :doc:`пример документа в стиле "
"дискуссии <discussions/install-requires-vs-requirements>`."

#: ../source/contribute.rst:67
msgid "Specifications"
msgstr "Спецификации"

#: ../source/contribute.rst:69
msgid ""
"Specifications are reference documentation focused on comprehensively "
"documenting an agreed-upon interface for interoperability between packaging "
"tools. :doc:`example specification-style document <specifications/core-"
"metadata>`."
msgstr ""
"Спецификации - это справочная документация, сосредоточенная на всестороннем "
"документировании согласованного интерфейса для взаимодействия между "
"упаковочными инструментами. :doc:`example Specification-style document "
"<specifications/core-metadata>`."

#: ../source/contribute.rst:75
msgid "Translations"
msgstr "Переводы"

#: ../source/contribute.rst:77
msgid ""
"We use `Weblate`_ to manage translations of this project. Please visit the "
"`packaging.python.org`_ project on Weblate to contribute."
msgstr ""
"Для управления переводами этого проекта мы используем `Weblate`_. "
"Пожалуйста, посетите проект `packaging.python.org`_ на Weblate для участия в "
"переводе."

#: ../source/contribute.rst:80
msgid ""
"If you are experiencing issues while you are working on translations, please "
"open an issue on `GitHub`_."
msgstr ""
"Если у вас возникли проблемы во время работы над переводами, откройте вопрос "
"(issue) на `Github`_."

#: ../source/contribute.rst:85
msgid ""
"Any translations of this project should follow `reStructuredText syntax`_."
msgstr ""
"Любые переводы этого проекта должны соответствовать `reStructuredText "
"syntax`_."

#: ../source/contribute.rst:93
msgid "Adding a language"
msgstr "Добавление языка"

#: ../source/contribute.rst:95
msgid ""
"If your language is not listed on `packaging.python.org`_, click the button :"
"guilabel:`Start new translation` at the bottom of the language list and add "
"the language you want to translate."
msgstr ""
"Если ваш язык не указан на «упаковке». python.org`_, нажмите кнопку :"
"guilabel: «Начните новый перевод» внизу языкового списка и добавьте язык, "
"который вы хотите перевести."

#: ../source/contribute.rst:100
msgid "Following reStructuredText syntax"
msgstr "После Текстовый синтаксис"

#: ../source/contribute.rst:102
msgid ""
"If you are not familiar with reStructuredText (RST) syntax, please read "
"`this guide`_ before translating on Weblate."
msgstr ""
"Если вы не знакомы с с синтаксисом reStructuredText (RST), пожалуйста, "
"прочитайте «это руководство» перед переводом на Weblate."

#: ../source/contribute.rst:118
msgid "**Do not translate the text in reference directly**"
msgstr "**Не переводите текст в ссылке напрямую**"

#: ../source/contribute.rst:106
msgid ""
"When translating the text in reference, please do not translate them "
"directly."
msgstr "При переводе текста ссылки, пожалуйста, не переводите его напрямую."

#: ../source/contribute.rst:0
msgid "Wrong: Translate the following text directly:"
msgstr "Неправильно: Переведить следующий текст напрямую:"

#: ../source/contribute.rst:0
msgid ""
"Right: Translate the following text with your own language and add the "
"original reference:"
msgstr ""
"Правильно: Переведить следующий текст на свой язык и добавить оригинальную "
"ссылку:"

#: ../source/contribute.rst:123
msgid "Building the guide locally"
msgstr "Локальная сборка руководства"

#: ../source/contribute.rst:125
msgid ""
"Though not required to contribute, it may be useful to build this guide "
"locally in order to test your changes. In order to build this guide locally, "
"you'll need:"
msgstr ""
"Хотя это не требуется для внесения вклада, может быть полезно построить это "
"руководство на местном уровне, чтобы проверить ваши изменения. Чтобы "
"построить это руководство на местном уровне, вам нужно:"

#: ../source/contribute.rst:129
msgid ":doc:`Nox <nox:index>`. You can install or upgrade nox using ``pip``:"
msgstr ""
":doc:`Nox <nox:index>`. Вы можете установить или обновить nox с помощью "
"``pip``:"

#: ../source/contribute.rst:136
msgid ""
"Python 3.11. Our build scripts are usually tested with Python 3.11 only. See "
"the :doc:`Hitchhiker's Guide to Python installation instructions <python-"
"guide:starting/installation>` to install Python 3.11 on your operating "
"system."
msgstr ""
"Python 3.11. Наши сценарии создания обычно тестируются только с Python 3.11. "
"См. :doc:`Hitchhiker's Guide to Pythoninstall instructions <python-guide:"
"starting/installation>` для установки Python 3.11 на вашей операционной "
"системе."

#: ../source/contribute.rst:140
msgid ""
"To build the guide, run the following shell command in the project's root "
"folder:"
msgstr ""
"Для сборки руководства выполните следующую команду shell в корневом каталоге "
"проекта:"

#: ../source/contribute.rst:146
msgid ""
"After the process has completed you can find the HTML output in the ``./"
"build/html`` directory. You can open the ``index.html`` file to view the "
"guide in web browser, but it's recommended to serve the guide using an HTTP "
"server."
msgstr ""
"После завершения процесса вы можете найти выход HTML в каталоге ``./build/"
"html``. Вы можете открыть файл ``index.html`` для просмотра руководства в "
"веб-браузере, но рекомендуется обслуживать руководство с помощью сервера "
"HTTP."

#: ../source/contribute.rst:151
msgid ""
"You can build the guide and serve it via an HTTP server using the following "
"command:"
msgstr ""
"Вы можете собрать руководство и обслуживать его через сервер HTTP, используя "
"следующую команду:"

#: ../source/contribute.rst:158
msgid "The guide will be browsable via http://localhost:8000."
msgstr ""
"Руководство будет доступно для просмотра по адресу http://localhost:8000."

#: ../source/contribute.rst:162
msgid "Where the guide is deployed"
msgstr "Где развёрнуто руководство"

#: ../source/contribute.rst:164
msgid ""
"The guide is deployed via ReadTheDocs and the configuration lives at https://"
"readthedocs.org/projects/python-packaging-user-guide/. It's served from a "
"custom domain and fronted by Fast.ly."
msgstr ""
"Руководство развернуто через ReadTheDocs, и конфигурация живет на https://"
"readthedocs.org/projects/python-packaging-user-guide/. Он подается из "
"пользовательского домена и перед ним Fast.ly."

#: ../source/contribute.rst:170
msgid "Style guide"
msgstr "Стиль руководство"

#: ../source/contribute.rst:172
msgid ""
"This style guide has recommendations for how you should write the |PyPUG|. "
"Before you start writing, please review it. By following the style guide, "
"your contributions will help add to a cohesive whole and make it easier for "
"your contributions to be accepted into the project."
msgstr ""
"Это руководство по стилю имеет рекомендации о том, как вы должны писать |"
"PyPUG|. Прежде чем начать писать, пожалуйста, просмотрите его. Следуя "
"руководству по стилю, ваш вклад поможет добавить в единое целое и облегчит "
"принятие вашего вклада в проект."

#: ../source/contribute.rst:179
msgid "Purpose"
msgstr "Цель"

#: ../source/contribute.rst:181
msgid ""
"The purpose of the |PyPUG| is to be the authoritative resource on how to "
"package, publish, and install Python projects using current tools."
msgstr ""
"Цель |PyPUG| - быть авторитетным ресурсом о том, как упаковать, опубликовать "
"и установить Python проекты с использованием современных инструментов."

#: ../source/contribute.rst:186
msgid "Scope"
msgstr "Область действия"

#: ../source/contribute.rst:188
msgid ""
"The guide is meant to answer questions and solve problems with accurate and "
"focused recommendations."
msgstr ""
"Руководство предназначено для ответа на вопросы и решения проблем с помощью "
"точных и целенаправленных рекомендаций."

#: ../source/contribute.rst:191
msgid ""
"The guide isn't meant to be comprehensive and it's not meant to replace "
"individual projects' documentation. For example, pip has dozens of commands, "
"options, and settings. The pip documentation describes each of them in "
"detail, while this guide describes only the parts of pip that are needed to "
"complete the specific tasks described in this guide."
msgstr ""
"Руководство не должно быть всеобъемлющим, и оно не предназначено для замены "
"документации отдельных проектов. Например, pip имеет десятки команд, опций и "
"настроек. Документация pip описывает каждую из них в деталях, в то время как "
"в этом руководстве описываются только те части pip, которые необходимы для "
"выполнения конкретных задач, описанных в настоящем руководстве."

#: ../source/contribute.rst:199
msgid "Audience"
msgstr "Аудитория"

#: ../source/contribute.rst:201
msgid "The audience of this guide is anyone who uses Python with packages."
msgstr "Аудитория этого руководства - любой, кто использует Python с пакетами."

#: ../source/contribute.rst:203
msgid ""
"Don't forget that the Python community is big and welcoming. Readers may not "
"share your age, gender, education, culture, and more, but they deserve to "
"learn about packaging just as much as you do."
msgstr ""
"Не забывайте, что сообщество Python является большим и приветственным. "
"Читатели могут не делить свой возраст, пол, образование, культуру и многое "
"другое, но они заслуживают того, чтобы узнать о упаковке так же, как и вы."

#: ../source/contribute.rst:207
msgid ""
"In particular, keep in mind that not all people who use Python see "
"themselves as programmers. The audience of this guide includes astronomers "
"or painters or students as well as professional software developers."
msgstr ""
"В частности, имейте в виду, что не все люди, которые используют Python, "
"считают себя программистами. Аудитория этого руководства включает в себя "
"астрономов или художников или студентов, а также профессиональных "
"разработчиков программного обеспечения."

#: ../source/contribute.rst:213
msgid "Voice and tone"
msgstr "Голос и тон"

#: ../source/contribute.rst:215
msgid ""
"When writing this guide, strive to write with a voice that's approachable "
"and humble, even if you have all the answers."
msgstr ""
"При написании этого руководства старайтесь писать голосом, который подходит "
"и скромен, даже если у вас есть все ответы."

#: ../source/contribute.rst:218
msgid ""
"Imagine you're working on a Python project with someone you know to be smart "
"and skilled. You like working with them and they like working with you. That "
"person has asked you a question and you know the answer. How do you respond? "
"*That* is how you should write this guide."
msgstr ""
"Представьте, что вы работаете над проектом Python с кем-то, кого вы знаете, "
"чтобы быть умным и квалифицированным. Вам нравится работать с ними, и им "
"нравится работать с вами. Этот человек задал вам вопрос, и вы знаете ответ. "
"Как ты реагируешь? * Вот как вы должны написать это руководство."

#: ../source/contribute.rst:223
msgid ""
"Here's a quick check: try reading aloud to get a sense for your writing's "
"voice and tone. Does it sound like something you would say or does it sound "
"like you're acting out a part or giving a speech? Feel free to use "
"contractions and don't worry about sticking to fussy grammar rules. You are "
"hereby granted permission to end a sentence in a preposition, if that's what "
"you want to end it with."
msgstr ""
"Вот быстрая проверка: попробуйте читать вслух, чтобы понять голос и тон "
"вашего письма. Это звучит как что-то, что вы скажете или звучит так, будто "
"вы играете роль или произносите речь? Почувствуйте себя свободно в "
"использовании схваток и не волнуйтесь о том, чтобы придерживаться безумных "
"правил грамматики. Настоящим вам предоставляется разрешение на завершение "
"предложения в предположении, если это то, с чем вы хотите покончить."

#: ../source/contribute.rst:230
msgid ""
"When writing the guide, adjust your tone for the seriousness and difficulty "
"of the topic. If you're writing an introductory tutorial, it's OK to make a "
"joke, but if you're covering a sensitive security recommendation, you might "
"want to avoid jokes altogether."
msgstr ""
"При написании руководства корректируйте свой тон на серьезность и сложность "
"темы. Если вы пишете вводный учебник, это нормально, чтобы шутить, но если "
"вы покрываете чувствительные рекомендации по безопасности, вы можете "
"избежать шуток в целом."

#: ../source/contribute.rst:237
msgid "Conventions and mechanics"
msgstr "Соглашения и механики"

#: ../source/contribute.rst:245
msgid "**Write to the reader**"
msgstr "**Пишите читателю**"

#: ../source/contribute.rst:240
msgid ""
"When giving recommendations or steps to take, address the reader as *you* or "
"use the imperative mood."
msgstr ""
"Давая рекомендации или расписывая шаги, обращайтесь к читателю на *вы* или "
"используйте повелительное наклонение."

#: ../source/contribute.rst:0
msgid "Wrong: To install it, the user runs…"
msgstr "Неправильно: Чтобы установить его, пользователь запускает…"

#: ../source/contribute.rst:0
msgid "Right: You can install it by running…"
msgstr "Правильно: Вы можете установить его, запустив…"

#: ../source/contribute.rst:0
msgid "Right: To install it, run…"
msgstr "Правильно: Чтобы установить его, запустите…"

#: ../source/contribute.rst:251
msgid "**State assumptions**"
msgstr "**Государственные предположения**"

#: ../source/contribute.rst:248
msgid ""
"Avoid making unstated assumptions. Reading on the web means that any page of "
"the guide may be the first page of the guide that the reader ever sees. If "
"you're going to make assumptions, then say what assumptions that you're "
"going to make."
msgstr ""
"Избегайте делать негласные предположения. Чтение в Интернете означает, что "
"любая страница руководства может быть первой страницей руководства, которое "
"читатель когда-либо видел. Если вы собираетесь делать предположения, то "
"скажите, какие предположения вы собираетесь делать."

#: ../source/contribute.rst:256
msgid "**Cross-reference generously**"
msgstr "**Кросс-ссылки щедро**"

#: ../source/contribute.rst:254
msgid ""
"The first time you mention a tool or practice, link to the part of the guide "
"that covers it, or link to a relevant document elsewhere. Save the reader a "
"search."
msgstr ""
"В первый раз, когда вы упоминаете инструмент или практику, обратитесь к той "
"части руководства, которая его охватывает, или обратитесь к соответствующему "
"документу в другом месте. Сохраните читателю поиск."

#: ../source/contribute.rst:266
msgid "**Respect naming practices**"
msgstr "**Следуйте правилам именования**"

#: ../source/contribute.rst:259
msgid ""
"When naming tools, sites, people, and other proper nouns, use their "
"preferred capitalization."
msgstr ""
"При указании названий инструментов, сайтов, имён людей и других собственных "
"существительных используйте их предпочтительную капитализацию."

#: ../source/contribute.rst:0
msgid "Wrong: Pip uses…"
msgstr "Неправильно: Pip использует…"

#: ../source/contribute.rst:0
msgid "Right: pip uses…"
msgstr "Правильно: pip использует…"

#: ../source/contribute.rst:0
msgid "Wrong: …hosted on github."
msgstr "Неправильно: …размещён на github."

#: ../source/contribute.rst:0
msgid "Right: …hosted on GitHub."
msgstr "Правильно: …размещён на GitHub."

#: ../source/contribute.rst:275
msgid "**Use a gender-neutral style**"
msgstr "**Используйте гендерно-нейтральный стиль**"

#: ../source/contribute.rst:269
msgid ""
"Often, you'll address the reader directly with *you*, *your* and *yours*. "
"Otherwise, use gender-neutral pronouns *they*, *their*, and *theirs* or "
"avoid pronouns entirely."
msgstr ""
"Часто вы будете обращаться к читателю напрямую с *ты*, *ваш* и *ваш*. В "
"противном случае используйте гендерно-нейтральные местоимения *они *, * их * "
"и * их * или полностью избегайте местоимений."

#: ../source/contribute.rst:0
msgid "Wrong: A maintainer uploads the file. Then he…"
msgstr "Неправильно: Сопровождающий загружает файл. Затем он…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then they…"
msgstr "Правильно: Сопровождающий загружает файл. Затем они…"

#: ../source/contribute.rst:0
msgid "Right: A maintainer uploads the file. Then the maintainer…"
msgstr "Правильно: Сопровождающий загружает файл. Затем сопровождающий…"

#: ../source/contribute.rst:287
msgid "**Headings**"
msgstr "**Заголовки**"

#: ../source/contribute.rst:278
msgid ""
"Write headings that use words the reader is searching for. A good way to do "
"this is to have your heading complete an implied question. For example, a "
"reader might want to know *How do I install MyLibrary?* so a good heading "
"might be *Install MyLibrary*."
msgstr ""
"Пишите заголовки, в которых используются слова, которые читатель ищет. "
"Хорошим способом сделать это является то, чтобы ваш заголовок завершал "
"подразумеваемый вопрос. Например, читатель может захотеть узнать *Как "
"установить MyLibrary?*, поэтому хорошим заголовком будет *Установить "
"MyLibrary*."

#: ../source/contribute.rst:283
msgid ""
"In section headings, use sentence case. In other words, write headings as "
"you would write a typical sentence."
msgstr ""
"В заголовках разделов используйте падеж предложения. Другими словами, пишите "
"заголовки так, как вы бы написали обычное предложение."

#: ../source/contribute.rst:0
msgid "Wrong: Things You Should Know About Python"
msgstr "Неправильно: Всё, Что Вам Нужно Знать О Python'е"

#: ../source/contribute.rst:0
msgid "Right: Things you should know about Python"
msgstr "Правильно: Всё, что вам нужно знать о Python'е"

#: ../source/contribute.rst:290
msgid "**Numbers**"
msgstr "**Числа**"

#: ../source/contribute.rst:290
msgid ""
"In body text, write numbers one through nine as words. For other numbers or "
"numbers in tables, use numerals."
msgstr ""
"В основном тексте пишите числа от 1 до 9 как слова. Для остальных чисел или "
"чисел в таблицах используйте цифры."

#: ../source/discussions/deploying-python-applications.rst:4
msgid "Deploying Python applications"
msgstr "Развёртывание приложений на Python'е"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/discussions/downstream-packaging.rst:0
#: ../source/discussions/single-source-version.rst:0
#: ../source/guides/distributing-packages-using-setuptools.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/migrating-to-pypi-org.rst:0
#: ../source/guides/multi-version-installs.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Page Status"
msgstr "Статус страницы"

#: ../source/discussions/deploying-python-applications.rst:6
#: ../source/guides/index-mirrors-and-caches.rst:7
#: ../source/guides/installing-using-linux-tools.rst:7
#: ../source/guides/packaging-binary-extensions.rst:7
msgid "Incomplete"
msgstr "Незавершено"

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/discussions/downstream-packaging.rst:0
#: ../source/discussions/single-source-version.rst:0
#: ../source/guides/distributing-packages-using-setuptools.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
msgid "Last Reviewed"
msgstr "Последняя проверка"

#: ../source/discussions/deploying-python-applications.rst:7
msgid "2021-8-24"
msgstr "2021-8-24"

#: ../source/discussions/deploying-python-applications.rst:11
#: ../source/specifications/externally-managed-environments.rst:130
#: ../source/specifications/platform-compatibility-tags.rst:14
msgid "Overview"
msgstr "Обзор"

#: ../source/discussions/deploying-python-applications.rst:15
msgid "Supporting multiple hardware platforms"
msgstr "Поддержка нескольких аппаратных платформ"

#: ../source/discussions/deploying-python-applications.rst:37
msgid "OS packaging & installers"
msgstr "Упаковка и инсталляторы ОС"

#: ../source/discussions/deploying-python-applications.rst:49
#: ../source/discussions/deploying-python-applications.rst:86
msgid "Windows"
msgstr "Windows"

#: ../source/discussions/deploying-python-applications.rst:58
msgid "Pynsist"
msgstr "Pynsist"

#: ../source/discussions/deploying-python-applications.rst:60
msgid ""
"`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python "
"programs together with the Python-interpreter into a single installer based "
"on NSIS. In most cases, packaging only requires the user to choose a version "
"of the Python-interpreter and declare the dependencies of the program. The "
"tool downloads the specified Python-interpreter for Windows and packages it "
"with all the dependencies in a single Windows-executable installer."
msgstr ""
"`Pynsist <https://pypi.org/project/pynsist>`__ - это инструмент, который "
"упаковывает программы на Python вместе с Python-интерпретатором в единый "
"инсталлятор, основанный на NSIS. В большинстве случаев упаковка требует от "
"пользователя только выбора версии Python-интерпретатора и объявления "
"зависимостей программы. Утилита загружает указанный Python-интерпретатор для "
"Windows и упаковывает его вместе со всеми зависимостями в единый Windows-"
"исполняемый инсталлятор."

#: ../source/discussions/deploying-python-applications.rst:67
msgid ""
"The installed program can be started from a shortcut that the installer adds "
"to the start-menu. It uses a Python interpreter installed within its "
"application directory, independent of any other Python installation on the "
"computer."
msgstr ""
"Установленная программа может быть запущена из короткого пути, который "
"установщик добавляет к start-menu. Он использует интерпретатор Python, "
"установленный в его каталоге приложений, независимо от любой другой "
"установки Python на компьютере."

#: ../source/discussions/deploying-python-applications.rst:71
msgid ""
"A big advantage of Pynsist is that the Windows packages can be built on "
"Linux. There are several examples for different kinds of programs (console, "
"GUI) in the :any:`documentation <pynsist:index>`. The tool is released under "
"the MIT-licence."
msgstr ""
"Большим преимуществом Pynsist является то, что пакеты Windows могут быть "
"построены на Linux. Существует несколько примеров для различных видов "
"программ (консоль, GUI) в :any:`documentation <pynsist:index>`. Инструмент "
"выпущен под лицензией MIT."

#: ../source/discussions/deploying-python-applications.rst:77
msgid "Application bundles"
msgstr "Комплекты приложений"

#: ../source/discussions/deploying-python-applications.rst:89
msgid "py2exe"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:91
msgid ""
"`py2exe <https://pypi.org/project/py2exe/>`__ is a distutils extension which "
"allows to build standalone Windows executable programs (32-bit and 64-bit) "
"from Python scripts. Python versions included in the official development "
"cycle are supported (refers to `Status of Python branches`__). py2exe can "
"build console executables and windows (GUI) executables. Building windows "
"services, and DLL/EXE COM servers might work but it is not actively "
"supported. The distutils extension is released under the MIT-licence and "
"Mozilla Public License 2.0."
msgstr ""
"<https://pypi.org/project/py2exe/>`__ Это расширение отключения, которое "
"позволяет создавать автономные Windows исполняемые программы (32-битные и 64-"
"битные) от Python. Python версии, включенные в официальный цикл разработки, "
"поддерживаются (относится к `Status of Python branches`__). py2exe может "
"создавать исполняемые консоли и исполняемые окна (GUI). Сервисы по "
"строительству окон и серверы DLL/EXE COM могут работать, но они не "
"поддерживаются активно. Расширение Distutils выпущено под лицензией MIT и "
"публичной лицензией Mozilla 2.0."

#: ../source/discussions/deploying-python-applications.rst:103
#: ../source/specifications/platform-compatibility-tags.rst:195
msgid "macOS"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:106
msgid "py2app"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:108
msgid ""
"`py2app <https://pypi.org/project/py2app/>`__ is a Python setuptools command "
"which will allow you to make standalone macOS application bundles and "
"plugins from Python scripts. Note that py2app MUST be used on macOS to build "
"applications, it cannot create Mac applications on other platforms. py2app "
"is released under the MIT-license."
msgstr ""
"`py2app <https://pypi.org/project/py2app/>`__ - это команда Python "
"setuptools, которая позволит вам создавать автономные пакеты приложений и "
"плагинов для macOS из скриптов Python. Обратите внимание, что py2app ДОЛЖЕН "
"использоваться на macOS для создания приложений, он не может создавать Mac-"
"приложения на других платформах. py2app выпускается под MIT-лицензией."

#: ../source/discussions/deploying-python-applications.rst:115
msgid "Unix (including Linux and macOS)"
msgstr "Unix (включая Linux и macOS)"

#: ../source/discussions/deploying-python-applications.rst:118
#: ../source/key_projects.rst:576
msgid "pex"
msgstr "pex"

#: ../source/discussions/deploying-python-applications.rst:120
msgid ""
"`pex <https://pypi.org/project/pex/>`__ is  a library for generating .pex "
"(Python EXecutable) files which are executable Python environments in the "
"spirit of virtualenvs. pex is an expansion upon the ideas outlined in :pep:"
"`441` and makes the deployment of Python applications as simple as cp. pex "
"files may even include multiple platform-specific Python distributions, "
"meaning that a single pex file can be portable across Linux and macOS. pex "
"is released under the Apache License 2.0."
msgstr ""
"pex <https://pypi.org/project/pex/>`__ - это  библиотека для создания "
"файлов .pex (Python EXecutable), которые являются исполняемыми окружениями "
"Python в духе virtualenvs. pex является расширением идей, изложенных в :pep:"
"`441`, и делает развертывание приложений Python таким же простым, как cp. "
"Файлы pex могут даже включать несколько дистрибутивов Python, специфичных "
"для конкретной платформы, что означает, что один файл pex может быть "
"переносимым в Linux и macOS. pex выпущен в соответствии с Apache License 2.0."

#: ../source/discussions/deploying-python-applications.rst:129
msgid "Configuration management"
msgstr "Управление конфигурацией"

#: ../source/discussions/distribution-package-vs-import-package.rst:5
msgid "Distribution package vs. import package"
msgstr "Пакет распределения против пакета импорта"

#: ../source/discussions/distribution-package-vs-import-package.rst:7
msgid ""
"A number of different concepts are commonly referred to by the word "
"\"package\". This page clarifies the differences between two distinct but "
"related meanings in Python packaging, \"distribution package\" and \"import "
"package\"."
msgstr ""
"Словом \"пакет\" обычно обозначают несколько различных понятий. Эта страница "
"объясняет различия между двумя разными, но связанными значениями в упаковке "
"Python, \"дистрибутивный пакет\" и \"пакет импорта\"."

#: ../source/discussions/distribution-package-vs-import-package.rst:13
msgid "What's a distribution package?"
msgstr "Что такое дистрибутивный пакет?"

#: ../source/discussions/distribution-package-vs-import-package.rst:15
msgid ""
"A distribution package is a piece of software that you can install. Most of "
"the time, this is synonymous with \"project\". When you type ``pip install "
"pkg``, or when you write ``dependencies = [\"pkg\"]`` in your ``pyproject."
"toml``, ``pkg`` is the name of a distribution package. When you search or "
"browse the PyPI_, the most widely known centralized source for installing "
"Python libraries and tools, what you see is a list of distribution packages. "
"Alternatively, the term \"distribution package\" can be used to refer to a "
"specific file that contains a certain version of a project."
msgstr ""
"Дистрибутив - это часть программного обеспечения, которую вы можете "
"установить. В большинстве случаев это синоним слова \"проект\". Когда вы "
"набираете ``pip install pkg``, или когда вы пишете ``dependencies = "
"[\"pkg\"]`` в вашем ``pyproject.toml``, ``pkg`` - это имя дистрибутивного "
"пакета. Когда вы ищете или просматриваете PyPI_, наиболее известный "
"централизованный источник для установки библиотек и инструментов Python, вы "
"видите список дистрибутивных пакетов. Кроме того, термин \"дистрибутивный "
"пакет\" может использоваться для обозначения конкретного файла, содержащего "
"определенную версию проекта."

#: ../source/discussions/distribution-package-vs-import-package.rst:24
msgid ""
"Note that in the Linux world, a \"distribution package\", most commonly "
"abbreviated as \"distro package\" or just \"package\", is something provided "
"by the system package manager of the `Linux distribution <distro_>`_, which "
"is a different meaning."
msgstr ""
"Обратите внимание, что в мире Linux \"дистрибутивный пакет\", чаще всего "
"сокращаемый как \"дистропакет\" или просто \"пакет\", - это нечто, "
"предоставляемое системным менеджером пакетов дистрибутива <distro_>`_, что "
"имеет другое значение."

#: ../source/discussions/distribution-package-vs-import-package.rst:31
msgid "What's an import package?"
msgstr "Что такое пакет импорта?"

#: ../source/discussions/distribution-package-vs-import-package.rst:33
msgid ""
"An import package is a Python module. Thus, when you write ``import pkg`` or "
"``from pkg import func`` in your Python code, ``pkg`` is the name of an "
"import package. More precisely, import packages are special Python modules "
"that can contain submodules. For example, the ``numpy`` package contains "
"modules like ``numpy.linalg`` and ``numpy.fft``. Usually, an import package "
"is a directory on the file system, containing modules as ``.py`` files and "
"subpackages as subdirectories."
msgstr ""
"Импортный пакет - это модуль Python. Таким образом, когда вы пишете ``import "
"pkg`` или ``from pkg import func`` в вашем коде Python, ``pkg`` - это имя "
"пакета импорта. Точнее, импортные пакеты - это специальные модули Python, "
"которые могут содержать подмодули. Например, пакет ``numpy`` содержит такие "
"модули, как ``numpy.linalg`` и ``numpy.fft``. Обычно пакет импорта "
"представляет собой каталог в файловой системе, содержащий модули в виде "
"файлов ``.py`` и подпакеты в виде подкаталогов."

#: ../source/discussions/distribution-package-vs-import-package.rst:42
msgid ""
"You can use an import package as soon as you have installed a distribution "
"package that provides it."
msgstr ""
"Вы можете использовать пакет импорта, как только установите дистрибутив, "
"который его предоставляет."

#: ../source/discussions/distribution-package-vs-import-package.rst:47
msgid "What are the links between distribution packages and import packages?"
msgstr "Какие связи существуют между дистрибутивными и импортными пакетами?"

#: ../source/discussions/distribution-package-vs-import-package.rst:49
msgid ""
"Most of the time, a distribution package provides one single import package "
"(or non-package module), with a matching name. For example, ``pip install "
"numpy`` lets you ``import numpy``."
msgstr ""
"Чаще всего дистрибутив предоставляет один единственный импортный пакет (или "
"непакетный модуль) с соответствующим именем. Например, ``pip install numpy`` "
"позволяет вам ``импортировать numpy``."

#: ../source/discussions/distribution-package-vs-import-package.rst:53
msgid ""
"However, this is only a convention. PyPI and other package indices *do not "
"enforce any relationship* between the name of a distribution package and the "
"import packages it provides. (A consequence of this is that you cannot "
"blindly install the PyPI package ``foo`` if you see ``import foo``; this may "
"install an unintended, and potentially even malicious package.)"
msgstr ""
"Однако это лишь условность. PyPI и другие указатели пакетов *не обеспечивают "
"никакой связи* между именем дистрибутивного пакета и пакетами импорта, "
"которые он предоставляет. (Следствием этого является то, что вы не можете "
"вслепую установить пакет PyPI ``foo``, если вы видите ``import foo``; это "
"может привести к установке непреднамеренного и потенциально даже "
"вредоносного пакета)"

#: ../source/discussions/distribution-package-vs-import-package.rst:59
msgid ""
"A distribution package could provide an import package with a different "
"name. An example of this is the popular Pillow_ library for image "
"processing. Its distribution package name is ``Pillow``, but it provides the "
"import package ``PIL``. This is for historical reasons: Pillow started as a "
"fork of the PIL library, thus it kept the import name ``PIL`` so that "
"existing PIL users could switch to Pillow with little effort. More "
"generally, a fork of an existing library is a common reason for differing "
"names between the distribution package and the import package."
msgstr ""
"Дистрибутив может предоставлять пакет импорта с другим именем. Примером "
"может служить популярная библиотека Pillow_ для обработки изображений. Имя "
"ее дистрибутивного пакета - ``Pillow``, но она предоставляет пакет импорта "
"``PIL``. Это объясняется историческими причинами: Pillow начиналась как форк "
"библиотеки PIL, поэтому она сохранила имя импорта ``PIL``, чтобы "
"существующие пользователи PIL могли перейти на Pillow без особых усилий. В "
"целом, форк существующей библиотеки - это распространенная причина различия "
"имен в дистрибутивном и импортном пакетах."

#: ../source/discussions/distribution-package-vs-import-package.rst:69
msgid ""
"On a given package index (like PyPI), distribution package names must be "
"unique. On the other hand, import packages have no such requirement. Import "
"packages with the same name can be provided by several distribution "
"packages. Again, forks are a common reason for this."
msgstr ""
"В определенном индексе пакетов (например, в PyPI) имена дистрибутивных "
"пакетов должны быть уникальными. С другой стороны, импортные пакеты не имеют "
"такого требования. Импортные пакеты с одним и тем же именем могут "
"предоставляться несколькими дистрибутивными пакетами. Опять же, частой "
"причиной этого являются форки."

#: ../source/discussions/distribution-package-vs-import-package.rst:74
msgid ""
"Conversely, a distribution package can provide several import packages, "
"although this is less common. An example is the attrs_ distribution package, "
"which provides both an ``attrs`` import package with a newer API, and an "
"``attr`` import package with an older but supported API."
msgstr ""
"И наоборот, дистрибутивный пакет может предоставлять несколько пакетов "
"импорта, хотя это встречается реже. Примером может служить дистрибутивный "
"пакет attrs_, который предоставляет как пакет импорта ``attrs`` с более "
"новым API, так и пакет импорта ``attr`` со старым, но поддерживаемым API."

#: ../source/discussions/distribution-package-vs-import-package.rst:81
msgid "How do distribution package names and import package names compare?"
msgstr "Как соотносятся имена дистрибутивных и импортных пакетов?"

#: ../source/discussions/distribution-package-vs-import-package.rst:83
msgid ""
"Import packages should have valid Python identifiers as their name (the :ref:"
"`exact rules <python:identifiers>` are found in the Python documentation) "
"[#non-identifier-mod-name]_. In particular, they use underscores ``_`` as "
"word separator and they are case-sensitive."
msgstr ""
"Импортируемые пакеты должны иметь в качестве имени корректные идентификаторы "
"Python (точные правила <python:identifiers>` можно найти в документации "
"Python) [#non-identifier-mod-name]_. В частности, они используют "
"подчеркивание ``_`` в качестве разделителя слов и чувствительны к регистру."

#: ../source/discussions/distribution-package-vs-import-package.rst:88
msgid ""
"On the other hand, distribution packages can use hyphens ``-`` or "
"underscores ``_``. They can also contain dots ``.``, which is sometimes used "
"for packaging a subpackage of a :ref:`namespace package <packaging-namespace-"
"packages>`. For most purposes, they are insensitive to case and to ``-`` "
"vs.  ``_`` differences, e.g., ``pip install Awesome_Package`` is the same as "
"``pip install awesome-package`` (the precise rules are given in the :ref:"
"`name normalization specification <name-normalization>`)."
msgstr ""
"С другой стороны, распределительные пакеты могут использовать дефисы ``-`` "
"или подчеркивает ``_``. Они также могут содержать точки ``.``, которые "
"иногда используются для упаковки подпаковки :ref:`namespace package "
"<packaging-namespace-packages>`. Для большинства целей они нечувствительны к "
"делу и к ``-`` против ``_`` различий, например, ``pip установить "
"Awesome_Package`` - это то же самое, что ``pip установить потрясающий "
"пакет`` (точные правила даны в :ref:`name normalization Спецификация <name-"
"нормализация>`)."

#: ../source/discussions/distribution-package-vs-import-package.rst:101
msgid ""
"Although it is technically possible to import packages/modules that do not "
"have a valid Python identifier as their name, using :doc:`importlib <python:"
"library/importlib>`, this is vanishingly rare and strongly discouraged."
msgstr ""
"Хотя технически возможно импортировать пакеты/модули, не имеющие в качестве "
"имени действительного идентификатора Python, используя :doc:`importlib "
"<python:library/importlib>`, это происходит крайне редко и настоятельно не "
"рекомендуется."

#: ../source/discussions/downstream-packaging.rst:5
msgid "Supporting downstream packaging"
msgstr "Поддержка последующей упаковки"

#: ../source/discussions/downstream-packaging.rst:7
msgid "Draft"
msgstr "Черновик"

#: ../source/discussions/downstream-packaging.rst:8
msgid "2025-?"
msgstr "2025-?"

#: ../source/discussions/downstream-packaging.rst:10
msgid ""
"While PyPI and the Python packaging tools such as :ref:`pip` are the primary "
"means of distributing Python packages, they are also often made available as "
"part of other packaging ecosystems. These repackaging efforts are "
"collectively called *downstream* packaging (your own efforts are called "
"*upstream* packaging), and include such projects as Linux distributions, "
"Conda, Homebrew and MacPorts. They generally aim to provide improved support "
"for use cases that cannot be handled via Python packaging tools alone, such "
"as native integration with a specific operating system, or assured "
"compatibility with specific versions of non-Python software."
msgstr ""
"Хотя PyPI и инструменты для упаковки Python, такие как :ref:`pip`, являются "
"основными средствами распространения пакетов Python, они также часто "
"становятся доступными в рамках других экосистем упаковки. Эти усилия по "
"переупаковке в совокупности называются *downstream* упаковкой (ваши "
"собственные усилия называются *upstream* упаковкой), и включают такие "
"проекты, как дистрибутивы Linux, Conda, Homebrew и MacPorts. Как правило, "
"они направлены на улучшение поддержки тех случаев, которые не могут быть "
"решены только средствами упаковки Python, например, интеграция с конкретной "
"операционной системой или обеспечение совместимости с определенными версиями "
"программ, не относящихся к Python."

#: ../source/discussions/downstream-packaging.rst:19
msgid ""
"This discussion attempts to explain how downstream packaging is usually "
"done, and what additional challenges downstream packagers typically face. It "
"aims to provide some optional guidelines that project maintainers may choose "
"to follow which help make downstream packaging *significantly* easier "
"(without imposing any major maintenance hassles on the upstream project). "
"Note that this is not an all-or-nothing proposal — anything that upstream "
"maintainers can do is useful, even if it's only a small part. Downstream "
"maintainers are also willing to prepare patches to resolve these issues. "
"Having these patches merged can be very helpful, since it removes the need "
"for different downstreams to carry and keep rebasing the same patches, and "
"the risk of applying inconsistent solutions to the same problem."
msgstr ""
"В этом обсуждении мы попытаемся объяснить, как обычно выполняется "
"последующая упаковка, и с какими дополнительными проблемами обычно "
"сталкиваются разработчики последующей упаковки. Цель обсуждения - "
"предоставить некоторые необязательные рекомендации, которым могут следовать "
"сопровождающие проекта, чтобы облегчить *значительно* процесс последующей "
"упаковки (не налагая при этом никаких серьезных проблем с обслуживанием на "
"upstream-проект). Обратите внимание, что это не предложение \"все или "
"ничего\" - все, что могут сделать сопровождающие upstream, будет полезно, "
"даже если это лишь малая часть. Нисходящие сопровождающие также готовы "
"подготовить патчи для решения этих проблем. Слияние этих патчей может быть "
"очень полезным, так как это избавит разные нисходящие потоки от "
"необходимости нести и постоянно переиздавать одни и те же патчи, а также от "
"риска применения непоследовательных решений одной и той же проблемы."

#: ../source/discussions/downstream-packaging.rst:31
msgid ""
"Establishing a good relationship between software maintainers and downstream "
"packagers can bring mutual benefits. Downstreams are often willing to share "
"their experience, time and hardware to improve your package. They are "
"sometimes in a better position to see how your package is used in practice, "
"and to provide information about its relationships with other packages that "
"would otherwise require significant effort to obtain. Packagers can often "
"find bugs before your users hit them in production, provide bug reports of "
"good quality, and supply patches whenever they can. For example, they are "
"regularly active in ensuring the packages they redistribute are updated for "
"any compatibility issues that arise when a new Python version is released."
msgstr ""
"Установление хороших отношений между разработчиками программного обеспечения "
"и разработчиками пакетов может принести взаимную выгоду. Поставщики часто "
"готовы поделиться своим опытом, временем и оборудованием для улучшения "
"вашего пакета. Иногда они лучше видят, как ваш пакет используется на "
"практике, и могут предоставить информацию о его связях с другими пакетами, "
"получение которой в противном случае потребовало бы значительных усилий. "
"Упаковщики часто могут найти ошибки до того, как ваши пользователи начнут их "
"использовать в производстве, предоставляют отчеты об ошибках хорошего "
"качества и поставляют исправления, когда это возможно. Например, они "
"регулярно следят за тем, чтобы пакеты, которые они распространяют, "
"обновлялись для решения проблем совместимости, возникающих при выходе новой "
"версии Python."

#: ../source/discussions/downstream-packaging.rst:43
msgid ""
"Please note that downstream builds include not only binary redistribution, "
"but also source builds done on user systems (in source-first distributions "
"such as Gentoo Linux, for example)."
msgstr ""
"Обратите внимание, что последующие сборки включают в себя не только "
"распространение бинарных файлов, но и сборки исходного кода на "
"пользовательских системах (в дистрибутивах с исходным кодом, таких как "
"Gentoo Linux, например)."

#: ../source/discussions/downstream-packaging.rst:51
#, fuzzy
#| msgid "Python source distributions"
msgid "Provide complete source distributions"
msgstr "Дистрибутивы с исходным кодом Python"

#: ../source/discussions/downstream-packaging.rst:54
#: ../source/discussions/downstream-packaging.rst:150
#: ../source/discussions/downstream-packaging.rst:213
#: ../source/discussions/downstream-packaging.rst:303
#: ../source/discussions/downstream-packaging.rst:412
msgid "Why?"
msgstr "Почему?"

#: ../source/discussions/downstream-packaging.rst:56
msgid ""
"The vast majority of downstream packagers prefer to build packages from "
"source, rather than use the upstream-provided binary packages. In some "
"cases, using sources is actually required for the package to be included in "
"the distribution. This is also true of pure Python packages that provide "
"universal wheels. The reasons for using source distributions may include:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:62
msgid "Being able to audit the source code of all packages."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:64
msgid "Being able to run the test suite and build documentation."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:66
msgid ""
"Being able to easily apply patches, including backporting commits from the "
"project's repository and sending patches back to the project."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:69
msgid ""
"Being able to build on a specific platform that is not covered by upstream "
"builds."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:72
msgid "Being able to build against specific versions of system libraries."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:74
msgid "Having a consistent build process across all Python packages."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:76
msgid ""
"While it is usually possible to build packages from a Git repository, there "
"are a few important reasons to provide a static archive file instead:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:79
msgid ""
"Fetching a single file is often more efficient, more reliable and better "
"supported than e.g. using a Git clone. This can help users with poor "
"Internet connectivity."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:83
msgid ""
"Downstreams often use hashes to verify the authenticity of source files on "
"subsequent builds, which require that they remain bitwise identical over "
"time. For example, automatically generated Git archives do not guarantee "
"this, as the compressed data may change if gzip is upgraded on the server."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:88
msgid ""
"Archive files can be mirrored, reducing both upstream and downstream "
"bandwidth use. The actual builds can afterwards be performed in firewalled "
"or offline environments, that can only access source files provided by the "
"local mirror or redistributed earlier."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:93
msgid ""
"Explicitly publishing archive files can ensure that any dependencies on "
"version control system metadata are resolved when creating the source "
"archive. For example, automatically generated Git archives omit all of the "
"commit tag information, potentially resulting in incorrect version details "
"in the resulting builds."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:99
#: ../source/discussions/downstream-packaging.rst:179
#: ../source/discussions/downstream-packaging.rst:277
#: ../source/discussions/downstream-packaging.rst:337
#: ../source/discussions/downstream-packaging.rst:441
msgid "How?"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:101
msgid ""
"Ideally, **a source distribution archive published on PyPI should include "
"all the files from the package's Git repository** that are necessary to "
"build the package itself, run its test suite, build and install its "
"documentation, and any other files that may be useful to end users, such as "
"shell completions, editor support files, and so on."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:107
msgid ""
"This point applies only to the files belonging to the package itself. The "
"downstream packaging process, much like Python package managers, will "
"provision the necessary Python dependencies, system tools and external "
"libraries that are needed by your package and its build scripts. However, "
"the files listing these dependencies (for example, ``requirements*.txt`` "
"files) should also be included, to help downstreams determine the needed "
"dependencies, and check for changes in them."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:115
msgid ""
"Some projects have concerns related to Python package managers using source "
"distributions from PyPI. They do not wish to increase their size with files "
"that are not used by these tools, or they do not wish to publish source "
"distributions at all, as they enable a problematic or outright nonfunctional "
"fallback to building the particular project from source. In these cases, a "
"good compromise may be to publish a separate source archive for downstream "
"use elsewhere, for example by attaching it to a GitHub release. "
"Alternatively, large files, such as test data, can be split into separate "
"archives."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:124
msgid ""
"On the other hand, some projects (NumPy_, for instance) decide to include "
"tests in their installed packages. This has the added advantage of "
"permitting users to run tests after installing them, for example to check "
"for regressions after upgrading a dependency. Yet another approach is to "
"split tests or test data into a separate Python package. Such an approach "
"was taken by the cryptography_ project, with the large test vectors being "
"split to cryptography-vectors_ package."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:132
msgid ""
"A good idea is to use your source distribution in the release workflow. For "
"example, the :ref:`build` tool does exactly that — it first builds a source "
"distribution, and then uses it to build a wheel. This ensures that the "
"source distribution actually works, and that it won't accidentally install "
"fewer files than the official wheels."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:138
msgid ""
"Ideally, also use the source distribution to run tests, build documentation, "
"and so on, or add specific tests to make sure that all necessary files were "
"actually included. Understandably, this requires more effort, so it's fine "
"not do that — downstream packagers will report any missing files promptly."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:147
msgid "Do not use the Internet during the build process"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:152
msgid ""
"Downstream builds are frequently done in sandboxed environments that cannot "
"access the Internet. The package sources are unpacked into this environment, "
"and all the necessary dependencies are installed."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:156
msgid ""
"Even if this is not the case, and assuming that you took sufficient care to "
"properly authenticate downloads, using the Internet is discouraged for a "
"number of reasons:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:160
msgid ""
"The Internet connection may be unstable (e.g. due to poor reception) or "
"suffer from temporary problems that could cause the process to fail or hang."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:164
msgid ""
"The remote resources may become temporarily or even permanently unavailable, "
"making the build no longer possible. This is especially problematic when "
"someone needs to build an old package version."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:168
msgid "The remote resources may change, making the build not reproducible."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:170
msgid ""
"Accessing remote servers poses a privacy issue and a potential security "
"issue, as it exposes information about the system building the package."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:174
msgid ""
"The user may be using a service with a limited data plan, in which "
"uncontrolled Internet access may result in additional charges or other "
"inconveniences."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:181
msgid ""
"If the package is implementing any custom build *backend* actions that use "
"the Internet, for example by automatically downloading vendored dependencies "
"or fetching Git submodules, its source distribution should either include "
"all of these files or allow provisioning them externally, and the Internet "
"must not be used if the files are already present."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:187
msgid ""
"Note that this point does not apply to Python dependencies that are "
"specified in the package metadata, and are fetched during the build and "
"installation process by *frontends* (such as :ref:`build` or :ref:`pip`). "
"Downstreams use frontends that use local provisioning for Python "
"dependencies."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:192
msgid ""
"Ideally, custom build scripts should not even attempt to access the Internet "
"at all, unless explicitly requested to. If any resources are missing and "
"need to be fetched, they should ask the user for permission first. If that "
"is not feasible, the next best thing is to provide an opt-out switch to "
"disable all Internet access. This could be done e.g. by checking whether a "
"``NO_NETWORK`` environment variable is set to a non-empty value."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:199
msgid ""
"Since downstreams frequently also run tests and build documentation, the "
"above should ideally extend to these processes as well."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:202
msgid ""
"Please also remember that if you are fetching remote resources, you "
"absolutely must *verify their authenticity* (usually against a hash), to "
"protect against the file being substituted by a malicious party."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:210
#, fuzzy
#| msgid "Declaring build system dependencies"
msgid "Support building against system dependencies"
msgstr "Объявление зависимостей системы сборки"

#: ../source/discussions/downstream-packaging.rst:215
msgid ""
"Some Python projects have non-Python dependencies, such as libraries written "
"in C or C++. Trying to use the system versions of these dependencies in "
"upstream packaging may cause a number of problems for end users:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:219
msgid ""
"The published wheels require a binary-compatible version of the used library "
"to be present on the user's system. If the library is missing or an "
"incompatible version is installed, the Python package may fail with errors "
"that are not clear to inexperienced users, or even misbehave at runtime."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:224
msgid ""
"Building from a source distribution requires a source-compatible version of "
"the dependency to be present, along with its development headers and other "
"auxiliary files that some systems package separately from the library itself."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:229
msgid ""
"Even for an experienced user, installing a compatible dependency version may "
"be very hard. For example, the used Linux distribution may not provide the "
"required version, or some other package may require an incompatible version."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:234
msgid ""
"The linkage between the Python package and its system dependency is not "
"recorded by the packaging system. The next system update may upgrade the "
"library to a newer version that breaks binary compatibility with the Python "
"package, and requires user intervention to fix."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:239
msgid ""
"For these reasons, you may reasonably decide to either statically link your "
"dependencies, or to provide local copies in the installed package. You may "
"also vendor the dependency in your source distribution. Sometimes these "
"dependencies are also repackaged on PyPI, and can be declared as project "
"dependencies like any other Python package."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:245
msgid ""
"However, none of these issues apply to downstream packaging, and downstreams "
"have good reasons to prefer dynamically linking to system dependencies. In "
"particular:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:249
msgid ""
"In many cases, reliably sharing dynamic dependencies between components is a "
"large part of the *purpose* of a downstream packaging ecosystem. Helping to "
"support that makes it easier for users of those systems to access upstream "
"projects in their preferred format."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:253
msgid ""
"Static linking and vendoring obscures the use of external dependencies, "
"making source auditing harder."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:256
msgid ""
"Dynamic linking makes it possible to quickly and systematically replace the "
"used libraries across an entire downstream packaging ecosystem, which can be "
"particularly important when they turn out to contain a security "
"vulnerability or critical bug."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:260
msgid ""
"Using system dependencies makes the package benefit from downstream "
"customization that can improve the user experience on a particular platform, "
"without the downstream maintainers having to consistently patch the "
"dependencies vendored in different packages. This can include compatibility "
"improvements and security hardening."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:266
msgid ""
"Static linking and vendoring can result in multiple different versions of "
"the same library being loaded in the same process (for example, attempting "
"to import two Python packages that link to different versions of the same "
"library). This sometimes works without incident, but it can also lead to "
"anything from library loading errors, to subtle runtime bugs, to "
"catastrophic failures (like suddenly crashing and losing data)."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:273
msgid ""
"Last but not least, static linking and vendoring results in duplication, and "
"may increase the use of both disk space and memory."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:279
msgid ""
"A good compromise between the needs of both parties is to provide a switch "
"between using vendored and system dependencies. Ideally, if the package has "
"multiple vendored dependencies, it should provide both individual switches "
"for each dependency, and a general switch to control the default for them, e."
"g. via a ``USE_SYSTEM_DEPS`` environment variable."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:285
msgid ""
"If the user requests using system dependencies, and a particular dependency "
"is either missing or incompatible, the build should fail with an explanatory "
"message rather than fall back to a vendored version. This gives the packager "
"the opportunity to notice their mistake and a chance to consciously decide "
"how to solve it."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:291
msgid ""
"It is reasonable for upstream projects to leave *testing* of building with "
"system dependencies to their downstream repackagers. The goal of these "
"guidelines is to facilitate more effective collaboration between upstream "
"projects and downstream repackagers, not to suggest upstream projects take "
"on tasks that downstream repackagers are better equipped to handle."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:300
msgid "Support downstream testing"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:305
msgid ""
"A variety of downstream projects run some degree of testing on the packaged "
"Python projects. Depending on the particular case, this can range from "
"minimal smoke testing to comprehensive runs of the complete test suite. "
"There can be various reasons for doing this, for example:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:310
msgid "Verifying that the downstream packaging did not introduce any bugs."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:312
msgid ""
"Testing on additional platforms that are not covered by upstream testing."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:314
msgid ""
"Finding subtle bugs that can only be reproduced with particular hardware, "
"system package versions, and so on."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:317
msgid ""
"Testing the released package against newer (or older) dependency versions "
"than the ones present during upstream release testing."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:320
msgid ""
"Testing the package in an environment closely resembling the production "
"setup. This can detect issues caused by non-trivial interactions between "
"different installed packages, including packages that are not dependencies "
"of your package, but nevertheless can cause issues."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:325
msgid ""
"Testing the released package against newer Python versions (including newer "
"point releases), or less tested Python implementations such as PyPy."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:328
msgid ""
"Admittedly, sometimes downstream testing may yield false positives or bug "
"reports about scenarios the upstream project is not interested in "
"supporting. However, perhaps even more often it does provide early notice of "
"problems, or find non-trivial bugs that would otherwise cause issues for the "
"upstream project's users. While mistakes do happen, the majority of "
"downstream packagers are doing their best to double-check their results, and "
"help upstream maintainers triage and fix the bugs that they reported."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:339
msgid ""
"There are a number of things that upstream projects can do to help "
"downstream repackagers test their packages efficiently and effectively, "
"including some of the suggestions already mentioned above. These are "
"typically improvements that make the test suite more reliable and easier to "
"use for everyone, not just downstream packagers. Some specific suggestions "
"are:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:345
msgid ""
"Include the test files and fixtures in the source distribution, or make it "
"possible to easily download them separately."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:348
msgid ""
"Do not write to the package directories during testing. Downstream test "
"setups sometimes run tests on top of the installed package, and "
"modifications performed during testing and temporary test files may end up "
"being part of the installed package!"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:353
msgid ""
"Make the test suite work offline. Mock network interactions, using packages "
"such as responses_ or vcrpy_. If that is not possible, make it possible to "
"easily disable the tests using Internet access, e.g. via a pytest_ marker. "
"Use pytest-socket_ to verify that your tests work offline. This often makes "
"your own test workflows faster and more reliable as well."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:359
msgid ""
"Make your tests work without a specialized setup, or perform the necessary "
"setup as part of test fixtures. Do not ever assume that you can connect to "
"system services such as databases — in an extreme case, you could crash a "
"production service!"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:364
msgid ""
"If your package has optional dependencies, make their tests optional as "
"well. Either skip them if the needed packages are not installed, or add "
"markers to make deselecting easy."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:368
msgid ""
"More generally, add markers to tests with special requirements. These can "
"include e.g. significant space usage, significant memory usage, long "
"runtime, incompatibility with parallel testing."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:372
msgid ""
"Do not assume that the test suite will be run with ``-Werror``. Downstreams "
"often need to disable that, as it causes false positives, e.g. due to newer "
"dependency versions. Assert for warnings using ``pytest.warns()`` rather "
"than ``pytest.raises()``!"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:377
msgid ""
"Aim to make your test suite reliable and reproducible. Avoid flaky tests. "
"Avoid depending on specific platform details, don't rely on exact results of "
"floating-point computation, or timing of operations, and so on. Fuzzing has "
"its advantages, but you want to have static test cases for completeness as "
"well."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:383
msgid ""
"Split tests by their purpose, and make it easy to skip categories that are "
"irrelevant or problematic. Since the primary purpose of downstream testing "
"is to ensure that the package itself works, downstreams are not generally "
"interested in tasks such as checking code coverage, code formatting, "
"typechecking or running benchmarks. These tests can fail as dependencies are "
"upgraded or the system is under load, without actually affecting the package "
"itself."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:390
msgid ""
"If your test suite takes significant time to run, support testing in "
"parallel. Downstreams often maintain a large number of packages, and testing "
"them all takes a lot of time. Using pytest-xdist_ can help them avoid "
"bottlenecks."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:395
msgid ""
"Ideally, support running your test suite via ``pytest``. pytest_ has many "
"command-line arguments that are truly helpful to downstreams, such as the "
"ability to conveniently deselect tests, rerun flaky tests (via pytest-"
"rerunfailures_), add a timeout to prevent tests from hanging (via pytest-"
"timeout_) or run tests in parallel (via pytest-xdist_). Note that test "
"suites don't need to be *written* with ``pytest`` to be *executed* with "
"``pytest``: ``pytest`` is able to find and execute almost all test cases "
"that are compatible with the standard library's ``unittest`` test discovery."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:409
#, fuzzy
#| msgid "Final releases"
msgid "Aim for stable releases"
msgstr "Финальные релизы"

#: ../source/discussions/downstream-packaging.rst:414
msgid ""
"Many downstreams provide stable release channels in addition to the main "
"package streams. The goal of these channels is to provide more conservative "
"upgrades to users with higher stability needs. These users often prefer to "
"trade having the newest features available for lower risk of issues."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:419
msgid ""
"While the exact policies differ, an important criterion for including a new "
"package version in a stable release channel is for it to be available in "
"testing for some time already, and have no known major regressions. For "
"example, in Gentoo Linux a package is usually marked stable after being "
"available in testing for a month, and being tested against the versions of "
"its dependencies that are marked stable at the time."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:426
msgid ""
"However, there are circumstances which demand more prompt action. For "
"example, if a security vulnerability or a major bug is found in the version "
"that is currently available in the stable channel, the downstream is facing "
"a need to resolve it. In this case, they need to consider various options, "
"such as:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:431
msgid "putting a new version in the stable channel early,"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:433
msgid "adding patches to the version currently published,"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:435
msgid "or even downgrading the stable channel to an earlier release."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:437
msgid ""
"Each of these options involves certain risks and a certain amount of work, "
"and packagers needs to weigh them to determine the course of action."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:443
msgid ""
"There are some things that upstreams can do to tailor their workflow to "
"stable release channels. These actions often are beneficial to the package's "
"users as well. Some specific suggestions are:"
msgstr ""

#: ../source/discussions/downstream-packaging.rst:447
msgid ""
"Adjust the release frequency to the rate of code changes. Packages that are "
"released rarely often bring significant changes with every release, and a "
"higher risk of accidental regressions."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:451
msgid ""
"Avoid mixing bug fixes and new features, if possible. In particular, if "
"there are known bug fixes merged already, consider making a new release "
"before merging feature branches."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:455
msgid ""
"Consider making prereleases after major changes, to provide more testing "
"opportunities for users and downstreams willing to opt-in."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:458
msgid ""
"If your project is subject to very intense development, consider splitting "
"one or more branches that include a more conservative subset of commits, and "
"are released separately. For example, Django_ currently maintains three "
"release branches in addition to main."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:463
msgid ""
"Even if you don't wish to maintain additional branches permanently, consider "
"making additional patch releases with minimal changes to the previous "
"version, especially when a security vulnerability is discovered."
msgstr ""

#: ../source/discussions/downstream-packaging.rst:467
msgid ""
"Split your changes into focused commits that address one problem at a time, "
"to make it easier to cherry-pick changes to earlier releases when necessary."
msgstr ""

#: ../source/discussions/index.rst:4
msgid ""
"**Discussions** are focused on providing comprehensive information about a "
"specific topic. If you're just trying to get stuff done, see :doc:`/guides/"
"index`."
msgstr ""
"**Дискуссии** направлены на предоставление исчерпывающей информации по "
"определенной теме. Если вы просто хотите сделать что-то, смотрите :doc:`/"
"guides/index`."

#: ../source/discussions/install-requires-vs-requirements.rst:5
msgid "install_requires vs requirements files"
msgstr "Файл :file:`install_requires` против файла :file:`requirements`"

#: ../source/discussions/install-requires-vs-requirements.rst:9
msgid "install_requires"
msgstr "install_requires"

#: ../source/discussions/install-requires-vs-requirements.rst:11
msgid ""
"``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that "
"should be used to specify what a project **minimally** needs to run "
"correctly. When the project is installed by :ref:`pip`, this is the "
"specification that is used to install its dependencies."
msgstr ""
"``install_requires`` - это ключевое слово :ref:`setuptools` :file:`setup."
"py`, которое должно использоваться для указания того, что проекту "
"**минимально** необходимо для корректной работы. Когда проект "
"устанавливается с помощью :ref:`pip`, это спецификация, которая используется "
"для установки его зависимостей."

#: ../source/discussions/install-requires-vs-requirements.rst:16
msgid ""
"For example, if the project requires A and B, your ``install_requires`` "
"would be like so:"
msgstr ""
"Например, если проект требует A и B, ваш ``install_requires`` будет "
"выглядеть так:"

#: ../source/discussions/install-requires-vs-requirements.rst:26
msgid ""
"Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""
"Кроме того, лучше всего указать все известные нижние и верхние границы."

#: ../source/discussions/install-requires-vs-requirements.rst:28
msgid ""
"For example, it may be known, that your project requires at least v1 of 'A', "
"and v2 of 'B', so it would be like so:"
msgstr ""
"Например, может быть известно, что ваш проект требует по крайней мере v1 'A' "
"и v2 'B', так что это было бы так:"

#: ../source/discussions/install-requires-vs-requirements.rst:38
msgid ""
"It may also be known that project 'A' introduced a change in its v2 that "
"breaks the compatibility of your project with v2 of 'A' and later, so it "
"makes sense to not allow v2:"
msgstr ""
"Также может быть известно, что проект «A» ввел изменение в его v2, которое "
"нарушает совместимость вашего проекта с v2 «A», а затем, поэтому имеет смысл "
"не разрешать v2:"

#: ../source/discussions/install-requires-vs-requirements.rst:49
msgid ""
"It is not considered best practice to use ``install_requires`` to pin "
"dependencies to specific versions, or to specify sub-dependencies (i.e. "
"dependencies of your dependencies).  This is overly-restrictive, and "
"prevents the user from gaining the benefit of dependency upgrades."
msgstr ""
"Не считается лучшей практикой использовать ``install_requires`` для "
"определения зависимостей к конкретным версиям или для указания "
"подзависимости (т.е. зависимости от ваших зависимостей). Это чрезмерно "
"ограничено и не позволяет пользователю получать выгоду от обновления "
"зависимости."

#: ../source/discussions/install-requires-vs-requirements.rst:54
msgid ""
"Lastly, it's important to understand that ``install_requires`` is a listing "
"of \"Abstract\" requirements, i.e just names and version restrictions that "
"don't determine where the dependencies will be fulfilled from (i.e. from "
"what index or source).  The where (i.e. how they are to be made "
"\"Concrete\") is to be determined at install time using :ref:`pip` options. "
"[1]_"
msgstr ""
"Наконец, важно понимать, что ``install_requires`` - это список "
"\"Абстрактных\" требований, т.е. просто имена и ограничения версий, которые "
"не определяют, откуда будут выполняться зависимости (т.е. из какого индекса "
"или источника).  Где (т.е. как они должны быть сделаны \"конкретными\"), "
"определяется во время установки с помощью опций :ref:`pip`. [1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:62
#: ../source/tutorials/installing-packages.rst:464
msgid "Requirements files"
msgstr "Файлы требований"

#: ../source/discussions/install-requires-vs-requirements.rst:64
msgid ""
":ref:`Requirements Files <pip:Requirements Files>` described most simply, "
"are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""
":ref:`Requirements Files <pip:Requirements Files>`, описанный проще всего, - "
"это всего лишь список :ref:`pip:pip install` аргументов, помещенных в файл."

#: ../source/discussions/install-requires-vs-requirements.rst:67
msgid ""
"Whereas ``install_requires`` defines the dependencies for a single project, :"
"ref:`Requirements Files <pip:Requirements Files>` are often used to define "
"the requirements for a complete Python environment."
msgstr ""
"В то время как ``install_requires`` определяет зависимости для одного "
"проекта, :ref:`Requirements Files <pip:Requirements Files>` часто "
"используются для определения требований для полной Python среды."

#: ../source/discussions/install-requires-vs-requirements.rst:71
msgid ""
"Whereas ``install_requires`` requirements are minimal, requirements files "
"often contain an exhaustive listing of pinned versions for the purpose of "
"achieving :ref:`repeatable installations <pip:Repeatability>` of a complete "
"environment."
msgstr ""
"В то время как требования ``install_requires`` являются минимальными, файлы "
"требований часто содержат исчерпывающий список пинированных версий для "
"достижения :ref:`repeatable installations <pip:Repeatability>` полной среды."

#: ../source/discussions/install-requires-vs-requirements.rst:76
msgid ""
"Whereas ``install_requires`` requirements are \"Abstract\", i.e. not "
"associated with any particular index, requirements files often contain pip "
"options like ``--index-url`` or ``--find-links`` to make requirements "
"\"Concrete\", i.e. associated with a particular index or directory of "
"packages. [1]_"
msgstr ""
"В то время как ``install_requires`` требования являются \"Abstract\", т.е. "
"не связаны с каким-либо конкретным индексом, файлы требований часто содержат "
"pip опции, такие как ``--index-url`` или ``--find-links``, чтобы сделать "
"требования \"Concrete\", т.е. связанные с конкретным индексом или каталогом "
"пакетов. [1]_"

#: ../source/discussions/install-requires-vs-requirements.rst:82
msgid ""
"Whereas ``install_requires`` metadata is automatically analyzed by pip "
"during an install, requirements files are not, and only are used when a user "
"specifically installs them using ``python -m pip install -r``."
msgstr ""
"В то время как метаданные ``install_requires`` автоматически анализируются "
"pip во время установки, файлы требований не являются и используются только "
"тогда, когда пользователь специально устанавливает их с помощью ``python -m "
"pip install -r``."

#: ../source/discussions/install-requires-vs-requirements.rst:88
msgid ""
"For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad."
"io/posts/2013/07/setup-vs-requirement/."
msgstr ""
"Подробнее о требованиях \"Абстрактные\" и \"Конкретные\" см. на сайте "
"https://caremad.io/posts/2013/07/setup-vs-requirement/."

#: ../source/discussions/package-formats.rst:5
msgid "Package Formats"
msgstr "Форматы пакетов"

#: ../source/discussions/package-formats.rst:7
msgid ""
"This page discusses the file formats that are used to distribute Python "
"packages and the differences between them."
msgstr ""
"На этой странице обсуждаются форматы файлов, которые используются для "
"распространения пакетов Python, и различия между ними."

#: ../source/discussions/package-formats.rst:10
msgid ""
"You will find files in two formats on package indices such as PyPI_: "
"**source distributions**, or **sdists** for short, and **binary "
"distributions**, commonly called **wheels**.  For example, the `PyPI page "
"for pip 23.3.1 <pip-pypi_>`_ lets you download two files, ``pip-23.3.1.tar."
"gz`` and ``pip-23.3.1-py3-none-any.whl``.  The former is an sdist, the "
"latter is a wheel. As explained below, these serve different purposes. When "
"publishing a package on PyPI (or elsewhere), you should always upload both "
"an sdist and one or more wheel."
msgstr ""
"На индексах пакетов, таких как PyPI_, вы найдете файлы в двух форматах: "
"**исходные дистрибутивы**, или сокращенно **sdists**, и **бинарные "
"дистрибутивы**, обычно называемые **wheels**.  Например, `PyPI-страница для "
"pip 23.3.1 <pip-pypi_>`_ позволяет вам скачать два файла, ``pip-23.3.1.tar."
"gz`` и ``pip-23.3.1-py3-none-any.whl``.  Первый представляет собой sdist, "
"второй - wheel. Как объясняется ниже, они служат для разных целей. Публикуя "
"пакет на PyPI (или где-либо еще), вы всегда должны загружать как sdist, так "
"и один или несколько wheel."

#: ../source/discussions/package-formats.rst:21
msgid "What is a source distribution?"
msgstr "Что такое исходный дистрибутив?"

#: ../source/discussions/package-formats.rst:23
msgid ""
"Conceptually, a source distribution is an archive of the source code in raw "
"form. Concretely, an sdist is a ``.tar.gz`` archive containing the source "
"code plus an additional special file called ``PKG-INFO``, which holds the "
"project metadata. The presence of this file helps packaging tools to be more "
"efficient by not needing to compute the metadata themselves. The ``PKG-"
"INFO`` file follows the format specified in :ref:`core-metadata` and is not "
"intended to be written by hand [#core-metadata-format]_."
msgstr ""
"Концептуально, дистрибутив исходного кода - это архив с исходным кодом в "
"сыром виде. Конкретно, sdist - это архив ``.tar.gz``, содержащий исходный "
"код плюс дополнительный специальный файл ``PKG-INFO``, который содержит "
"метаданные проекта. Наличие этого файла помогает инструментам упаковки быть "
"более эффективными, поскольку им не нужно самим вычислять метаданные. Файл "
"``PKG-INFO`` имеет формат, указанный в :ref:`core-metadata`` и не "
"предназначен для написания вручную [#core-metadata-format]_."

#: ../source/discussions/package-formats.rst:31
msgid ""
"You can thus inspect the contents of an sdist by unpacking it using standard "
"tools to work with tar archives, such as ``tar -xvf`` on UNIX platforms "
"(like Linux and macOS), or :ref:`the command line interface of Python's "
"tarfile module <python:tarfile-commandline>` on any platform."
msgstr ""
"Таким образом, вы можете проверить содержимое sdist, распаковав его с "
"помощью стандартных инструментов для работы с tar-архивами, таких как ``tar -"
"xvf`` на платформах UNIX (например, Linux и macOS), или :ref:``интерфейс "
"командной строки модуля Python's tarfile <python:tarfile-commandline>` на "
"любой платформе."

#: ../source/discussions/package-formats.rst:36
msgid ""
"Sdists serve several purposes in the packaging ecosystem. When :ref:`pip`, "
"the standard Python package installer, cannot find a wheel to install, it "
"will fall back on downloading a source distribution, compiling a wheel from "
"it, and installing the wheel. Furthermore, sdists are often used as the "
"package source by downstream packagers (such as Linux distributions, Conda, "
"Homebrew and MacPorts on macOS, ...), who, for various reasons, may prefer "
"them over, e.g., pulling from a Git repository."
msgstr ""
"Sdists служат нескольким целям в экосистеме упаковки. Когда :ref:`pip`, "
"стандартная программа установки пакетов Python, не может найти колесо для "
"установки, она прибегает к загрузке исходного дистрибутива, компиляции "
"колеса из него и установке колеса. Кроме того, sdists часто используются в "
"качестве источника пакетов последующими упаковщиками (например, "
"дистрибутивами Linux, Conda, Homebrew и MacPorts для macOS, ...), которые по "
"разным причинам могут предпочесть их, например, извлечению из Git-"
"репозитория."

#: ../source/discussions/package-formats.rst:44
msgid ""
"A source distribution is recognized by its file name, which has the form :"
"samp:`{package_name}-{version}.tar.gz`, e.g., ``pip-23.3.1.tar.gz``."
msgstr ""
"Исходный дистрибутив распознается по имени файла, которое имеет вид :samp:"
"`{имя_пакета}-{версия}.tar.gz`, например, ``pip-23.3.1.tar.gz``."

#: ../source/discussions/package-formats.rst:50
msgid ""
"If you want technical details on the sdist format, read the :ref:`sdist "
"specification <source-distribution-format>`."
msgstr ""
"Если вам нужны технические подробности о формате sdist, прочитайте "
"спецификацию :ref:`sdist <source-distribution-format>`."

#: ../source/discussions/package-formats.rst:55
msgid "What is a wheel?"
msgstr "Что такое колесо?"

#: ../source/discussions/package-formats.rst:57
msgid ""
"Conceptually, a wheel contains exactly the files that need to be copied when "
"installing the package."
msgstr ""
"Концептуально, колесо содержит именно те файлы, которые необходимо "
"скопировать при установке пакета."

#: ../source/discussions/package-formats.rst:60
msgid ""
"There is a big difference between sdists and wheels for packages with :term:"
"`extension modules <extension module>`, written in compiled languages like "
"C, C++ and Rust, which need to be compiled into platform-dependent machine "
"code. With these packages, wheels do not contain source code (like C source "
"files) but compiled, executable code (like ``.so`` files on Linux or DLLs on "
"Windows)."
msgstr ""
"Существует большая разница между sdists и wheels для пакетов с : термин:"
"``модули расширения <модуль расширения>`, написанных на компилируемых "
"языках, таких как C, C++ и Rust, которые должны быть скомпилированы в "
"машинный код, зависящий от платформы. Для таких пакетов колеса содержат не "
"исходный код (например, исходные файлы на C), а скомпилированный, "
"исполняемый код (например, файлы ``.so`` в Linux или DLL в Windows)."

#: ../source/discussions/package-formats.rst:66
msgid ""
"Furthermore, while there is only one sdist per version of a project, there "
"may be many wheels. Again, this is most relevant in the context of extension "
"modules. The compiled code of an extension module is tied to an operating "
"system and processor architecture, and often also to the version of the "
"Python interpreter (unless the :ref:`Python stable ABI <cpython-stable-abi>` "
"is used)."
msgstr ""
"Более того, хотя для каждой версии проекта существует только один sdist, "
"колес может быть много. Опять же, это наиболее актуально в контексте модулей "
"расширения. Скомпилированный код модуля расширения привязан к операционной "
"системе и архитектуре процессора, а зачастую и к версии интерпретатора "
"Python (если только не используется : ссылка:`Python стабильный ABI <cpython-"
"стабильный-abi>`)."

#: ../source/discussions/package-formats.rst:72
msgid ""
"For pure-Python packages, the difference between sdists and wheels is less "
"marked. There is normally one single wheel, for all platforms and Python "
"versions.  Python is an interpreted language, which does not need ahead-of-"
"time compilation, so wheels contain ``.py`` files just like sdists."
msgstr ""
"Для пакетов чистого Python разница между sdists и wheels менее заметна. "
"Обычно существует одно единственное колесо для всех платформ и версий "
"Python.  Python - интерпретируемый язык, которому не нужна опережающая "
"компиляция, поэтому колеса содержат файлы ``.py``, как и sdists."

#: ../source/discussions/package-formats.rst:77
msgid ""
"If you are wondering about ``.pyc`` bytecode files: they are not included in "
"wheels, since they are cheap to generate, and including them would "
"unnecessarily force a huge number of packages to distribute one wheel per "
"Python version instead of one single wheel. Instead, installers like :ref:"
"`pip` generate them while installing the package."
msgstr ""
"Если вы задаетесь вопросом о файлах байткода ``.pyc``: они не включены в "
"колеса, поскольку их генерация обходится дешево, и их включение без "
"необходимости заставило бы огромное количество пакетов распространять по "
"одному колесу для каждой версии Python вместо одного колеса. Вместо этого "
"такие программы установки, как :ref:`pip`, генерируют их во время установки "
"пакета."

#: ../source/discussions/package-formats.rst:83
msgid ""
"With that being said, there are still important differences between sdists "
"and wheels, even for pure Python projects. Wheels are meant to contain "
"exactly what is to be installed, and nothing more. In particular, wheels "
"should never include tests and documentation, while sdists commonly do.  "
"Also, the wheel format is more complex than sdist. For example, it includes "
"a special file -- called ``RECORD`` -- that lists all files in the wheel "
"along with a hash of their content, as a safety check of the download's "
"integrity."
msgstr ""
"Тем не менее, между sdists и wheels все еще есть важные различия, даже для "
"проектов на чистом Python. Колеса должны содержать именно то, что должно "
"быть установлено, и ничего больше. В частности, колеса никогда не должны "
"включать тесты и документацию, в то время как sdists обычно содержат их.  "
"Кроме того, формат колеса сложнее, чем sdist. Например, он включает "
"специальный файл ``RECORD``, который перечисляет все файлы в колесе вместе с "
"хэшем их содержимого для проверки целостности загрузки."

#: ../source/discussions/package-formats.rst:91
msgid ""
"At a glance, you might wonder if wheels are really needed for \"plain and "
"basic\" pure Python projects. Keep in mind that due to the flexibility of "
"sdists, installers like pip cannot install from sdists directly -- they need "
"to first build a wheel, by invoking the :term:`build backend` that the sdist "
"specifies (the build backend may do all sorts of transformations while "
"building the wheel, such as compiling C extensions). For this reason, even "
"for a pure Python project, you should always upload *both* an sdist and a "
"wheel to PyPI or other package indices. This makes installation much faster "
"for your users, since a wheel is directly installable. By only including "
"files that must be installed, wheels also make for smaller downloads."
msgstr ""
"На первый взгляд, вы можете задаться вопросом, действительно ли колеса нужны "
"для \"простых и базовых\" проектов на чистом Python. Имейте в виду, что из-"
"за гибкости sdist'ов такие программы установки, как pip, не могут "
"устанавливать из sdist'ов напрямую - им нужно сначала собрать колесо, "
"вызвав :term:`build backend`, указанный в sdist'е (build backend может "
"выполнять всевозможные преобразования при создании колеса, например, "
"компилировать расширения C). По этой причине, даже для чисто Python-проекта, "
"вы всегда должны загружать *обои* sdist и wheel в PyPI или другие индексы "
"пакетов. Это значительно ускорит установку для ваших пользователей, так как "
"колесо можно установить напрямую. Включая только те файлы, которые должны "
"быть установлены, колеса также уменьшают объем загружаемых файлов."

#: ../source/discussions/package-formats.rst:102
msgid ""
"On the technical level, a wheel is a ZIP archive (unlike sdists which are "
"TAR archives). You can inspect its contents by unpacking it as a normal ZIP "
"archive, e.g., using ``unzip`` on UNIX platforms like Linux and macOS, "
"``Expand-Archive`` in Powershell on Windows, or :ref:`the command line "
"interface of Python's zipfile module <python:zipfile-commandline>`. This can "
"be very useful to check that the wheel includes all the files you need it to."
msgstr ""
"С технической точки зрения, колесо - это ZIP-архив (в отличие от sdists, "
"которые являются TAR-архивами). Вы можете проверить его содержимое, "
"распаковав его как обычный ZIP-архив, например, с помощью ``unzip`` на UNIX "
"платформах, таких как Linux и macOS, ``Expand-архив`` в Powershell на "
"Windows, или : ссылка:``интерфейс командной строки модуля zipfile в Python "
"<python:zipfile-коммандная строка>`. Это может быть очень полезно для "
"проверки того, что колесо включает все необходимые файлы."

#: ../source/discussions/package-formats.rst:109
msgid ""
"Inside a wheel, you will find the package's files, plus an additional "
"directory called :samp:`{package_name}-{version}.dist-info`. This directory "
"contains various files, including a ``METADATA`` file which is the "
"equivalent of ``PKG-INFO`` in sdists, as well as ``RECORD``. This can be "
"useful to ensure no files are missing from your wheels."
msgstr ""
"Внутри колеса вы найдете файлы пакета, а также дополнительный каталог под "
"названием :samp:`{имя_пакета}-{версия}.dist-info`. Этот каталог содержит "
"различные файлы, включая файл ``METADATA``, который является эквивалентом "
"``PKG-INFO`` в sdists, а также ``RECORD``. Это может быть полезно для того, "
"чтобы убедиться, что в ваших колесах нет недостающих файлов."

#: ../source/discussions/package-formats.rst:115
msgid ""
"The file name of a wheel (ignoring some rarely used features) looks like "
"this: :samp:`{package_name}-{version}-{python_tag}-{abi_tag}-{platform_tag}."
"whl`. This naming convention identifies which platforms and Python versions "
"the wheel is compatible with. For example, the name ``pip-23.3.1-py3-none-"
"any.whl`` means that:"
msgstr ""
"Имя файла колеса (без учета некоторых редко используемых функций) выглядит "
"так: :samp:`{имя_пакета}-{версия}-{python_tag}-{abi_tag}-{платформа_tag}."
"whl`. Это соглашение об именовании определяет, с какими платформами и "
"версиями Python совместимо колесо. Например, имя ``pip-23.3.1-py3-none-any."
"whl`` означает, что:"

#: ../source/discussions/package-formats.rst:121
msgid ""
"(``py3``) This wheel can be installed on any implementation of Python 3, "
"whether CPython, the most widely used Python implementation, or an "
"alternative implementation like PyPy_;"
msgstr ""
"(``py3``) Это колесо может быть установлено на любую реализацию Python 3, "
"будь то CPython, наиболее широко используемая реализация Python, или "
"альтернативная реализация, например PyPy_;"

#: ../source/discussions/package-formats.rst:124
msgid "(``none``) It does not depend on the Python version;"
msgstr "(``нет``) Не зависит от версии Python;"

#: ../source/discussions/package-formats.rst:125
msgid "(``any``) It does not depend on the platform."
msgstr "(``любой``) Это не зависит от платформы."

#: ../source/discussions/package-formats.rst:127
msgid ""
"The pattern ``py3-none-any`` is common for pure Python projects. Packages "
"with extension modules typically ship multiple wheels with more complex tags."
msgstr ""
"Шаблон ``py3-none-any`` характерен для проектов на чистом Python. Пакеты с "
"модулями расширения обычно поставляют несколько колес с более сложными "
"тегами."

#: ../source/discussions/package-formats.rst:130
msgid ""
"All technical details on the wheel format can be found in the :ref:`wheel "
"specification <binary-distribution-format>`."
msgstr ""
"Все технические подробности о формате колеса можно найти в спецификации : "
"ссылка:`спецификация колеса <бинарный-распределительный-формат>`."

#: ../source/discussions/package-formats.rst:138
msgid "What about eggs?"
msgstr "А как насчет яиц?"

#: ../source/discussions/package-formats.rst:140
msgid ""
"\"Egg\" is an old package format that has been replaced with the wheel "
"format.  It should not be used anymore. Since August 2023, PyPI `rejects egg "
"uploads <pypi-eggs-deprecation_>`_."
msgstr ""
"\"Egg\" - это старый формат пакетов, который был заменен форматом wheel.  "
"Его больше не следует использовать. С августа 2023 года PyPI `отклоняет "
"яичные загрузки <pypi-eggs-deprecation_>`_."

#: ../source/discussions/package-formats.rst:144
msgid "Here's a breakdown of the important differences between wheel and egg."
msgstr "Вот основные различия между колесом и яйцом."

#: ../source/discussions/package-formats.rst:146
msgid ""
"The egg format was introduced by :ref:`setuptools` in 2004, whereas the "
"wheel format was introduced by :pep:`427` in 2012."
msgstr ""
"Формат яйца был представлен :ref:`setuptools` в 2004 году, а формат колеса "
"был представлен :pep:`427` в 2012 году."

#: ../source/discussions/package-formats.rst:149
msgid ""
"Wheel has an :doc:`official standard specification </specifications/binary-"
"distribution-format>`. Egg did not."
msgstr ""
"У колеса есть : документ:`официальная стандартная спецификация </"
"спецификации/бинарный формат распределения>`. У Egg ее нет."

#: ../source/discussions/package-formats.rst:152
msgid ""
"Wheel is a :term:`distribution <Distribution Package>` format, i.e a "
"packaging format. [#wheel-importable]_ Egg was both a distribution format "
"and a runtime installation format (if left zipped), and was designed to be "
"importable."
msgstr ""
"Колесо - это : термин:`дистрибутив <дистрибутивный пакет>`, т.е. формат "
"упаковки. [#колесо-импортируемое]_ Egg был одновременно и форматом "
"дистрибутива, и форматом установки во время выполнения (если его оставить "
"запечатанным), и был разработан для импорта."

#: ../source/discussions/package-formats.rst:156
msgid ""
"Wheel archives do not include ``.pyc`` files. Therefore, when the "
"distribution only contains Python files (i.e. no compiled extensions), and "
"is compatible with Python 2 and 3, it's possible for a wheel to be "
"\"universal\", similar to an :term:`sdist <Source Distribution (or "
"\"sdist\")>`."
msgstr ""
"Архивы колеса не содержат файлов ``.pyc``. Поэтому, если дистрибутив "
"содержит только файлы Python (т.е. не содержит скомпилированных расширений) "
"и совместим с Python 2 и 3, то колесо может быть \"универсальным\", подобно :"
"term:`sdist <Источник дистрибутива (или \"sdist\")>`."

#: ../source/discussions/package-formats.rst:161
msgid ""
"Wheel uses standard :ref:`.dist-info directories <recording-installed-"
"packages>`.  Egg used ``.egg-info``."
msgstr ""
"Колесо использует стандартные : ссылка:``.dist-info директории <запись-"
"установленных-пакетов>`.  Egg использует ``.egg-info``."

#: ../source/discussions/package-formats.rst:164
msgid ""
"Wheel has a :ref:`richer file naming convention <wheel-file-name-spec>`. A "
"single wheel archive can indicate its compatibility with a number of Python "
"language versions and implementations, ABIs, and system architectures."
msgstr ""
"Колесо имеет соглашение об именовании файлов <wheel-file-name-spec>`. Один "
"архив колес может указывать на свою совместимость с несколькими версиями и "
"реализациями языка Python, ABI и системными архитектурами."

#: ../source/discussions/package-formats.rst:168
msgid ""
"Wheel is versioned. Every wheel file contains the version of the wheel "
"specification and the implementation that packaged it."
msgstr ""
"Wheel версионирован. Каждый файл wheel содержит версию спецификации wheel и "
"реализации, в которую он упакован."

#: ../source/discussions/package-formats.rst:171
msgid ""
"Wheel is internally organized by `sysconfig path type <https://docs.python."
"org/2/library/sysconfig.html#installation-paths>`_, therefore making it "
"easier to convert to other formats."
msgstr ""
"Wheel внутренне организовано по типу `sysconfig path <https://docs.python."
"org/2/library/sysconfig.html#installation-paths>`_, что облегчает его "
"преобразование в другие форматы."

#: ../source/discussions/package-formats.rst:177
msgid ""
"This format is email-based. Although this would be unlikely to be chosen "
"today, backwards compatibility considerations lead to it being kept as the "
"canonical format. From the user point of view, this is mostly invisible, "
"since the metadata is specified by the user in a way understood by the build "
"backend, typically ``[project]`` in ``pyproject.toml``, and translated by "
"the build backend into ``PKG-INFO``."
msgstr ""
"Этот формат основан на электронной почте. Хотя сегодня его вряд ли выберут, "
"соображения обратной совместимости заставляют оставить его в качестве "
"канонического формата. С точки зрения пользователя это практически "
"незаметно, так как метаданные указываются пользователем в виде, понятном "
"бэкенду сборки, обычно ``[ проект]`` в ``pyproject.toml``, и транслируются "
"бэкендом сборки в ``PKG-INFO``."

#: ../source/discussions/package-formats.rst:184
msgid ""
"Circumstantially, in some cases, wheels can be used as an importable runtime "
"format, although :ref:`this is not officially supported at this time <binary-"
"distribution-format-import-wheel>`."
msgstr ""
"В некоторых случаях колеса могут использоваться в качестве импортируемого "
"формата времени выполнения, хотя :ref:`это не поддерживается официально в "
"настоящее время <binary-distribution-format-import-wheel>`."

#: ../source/discussions/pip-vs-easy-install.rst:6
msgid "pip vs easy_install"
msgstr "pip против easy_install"

#: ../source/discussions/pip-vs-easy-install.rst:9
msgid ""
":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 "
"as part of :ref:`setuptools`. It was notable at the time for installing :"
"term:`packages <Distribution Package>` from :term:`PyPI <Python Package "
"Index (PyPI)>` using requirement specifiers, and automatically installing "
"dependencies."
msgstr ""
":ref:`easy_install <easy_install>`, теперь `deprecated`_, был выпущен в 2004 "
"как часть :ref:`setuptools`. Он был примечателен в то время для установки :"
"term:`packages <Distribution Package>` из :term:`PyPI <Python Package Index "
"(PyPI)>`Python Индекса пакетов (PyPI)>` с использованием спецификаторов "
"требований и автоматической установки зависимостей."

#: ../source/discussions/pip-vs-easy-install.rst:14
#, fuzzy
#| msgid ""
#| ":ref:`pip` came later in 2008, as alternative to :ref:`easy_install "
#| "<easy_install>`, although still largely built on top of :ref:`setuptools` "
#| "components.  It was notable at the time for *not* installing packages as :"
#| "term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' "
#| "packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and "
#| "introducing the idea of :ref:`Requirements Files <pip:Requirements "
#| "Files>`, which gave users the power to easily replicate environments."
msgid ""
":ref:`pip` came later in 2008, as an alternative to :ref:`easy_install "
"<easy_install>`, although still largely built on top of :ref:`setuptools` "
"components.  It was notable at the time for *not* installing packages as :"
"term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' "
"packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and "
"introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, "
"which gave users the power to easily replicate environments."
msgstr ""
":ref:`pip` появился позже в 2008, в качестве альтернативы :ref:`easy_install "
"<easy_install>`, хотя все еще в значительной степени построен на :ref:"
"`setuptools` компонентах. Это было примечательно в то время для *не* "
"установки пакетов как :term:`Eggs <Egg>` или от :term:`Eggs <Egg>` (но, "
"скорее, просто как «плоские» пакеты от :term:`sdists <Source Distribution "
"(or \"sdist\")>`), и введение идеи :ref:`Requirements Files <pip:"
"Requirements Files>`, которая давала пользователям возможность легко "
"реплицировать среды."

#: ../source/discussions/pip-vs-easy-install.rst:22
msgid ""
"Here's a breakdown of the important differences between pip and the "
"deprecated easy_install:"
msgstr "Вот разбивка важных различий между pip и обесцененным easy_install:"

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**pip**"
msgstr "**pip**"

#: ../source/discussions/pip-vs-easy-install.rst:25
msgid "**easy_install**"
msgstr "**easy_install**"

#: ../source/discussions/pip-vs-easy-install.rst:27
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr "Установка из :term:`колёс <Wheel>`"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Yes"
msgstr "Да"

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:30
#: ../source/discussions/pip-vs-easy-install.rst:32
#: ../source/discussions/pip-vs-easy-install.rst:35
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:51
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "No"
msgstr "Нет"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Uninstall Packages"
msgstr "Удаление пакетов"

#: ../source/discussions/pip-vs-easy-install.rst:30
msgid "Yes (``python -m pip uninstall``)"
msgstr "Да (``python -m pip uninstall``)"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Dependency Overrides"
msgstr "Переопределение зависимостей"

#: ../source/discussions/pip-vs-easy-install.rst:32
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr "Да (:ref:`Файлы требований <pip:Requirements Files>`)"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "List Installed Packages"
msgstr "Перечисление установленных пакетов"

#: ../source/discussions/pip-vs-easy-install.rst:35
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr "Да (``python -m pip list`` и ``python -m pip freeze``)"

#: ../source/discussions/pip-vs-easy-install.rst:38
msgid ":pep:`438` Support"
msgstr "Поддержка :pep:`438`"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Installation format"
msgstr "Формат установки"

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr "'Плоские' пакеты с метаданными :file:`egg-info`."

#: ../source/discussions/pip-vs-easy-install.rst:41
msgid "Encapsulated Egg format"
msgstr "Формат инкапсулированного яйца"

#: ../source/discussions/pip-vs-easy-install.rst:44
msgid "sys.path modification"
msgstr "Изменение ``sys.path``"

#: ../source/discussions/pip-vs-easy-install.rst:48
msgid "Installs from :term:`Eggs <Egg>`"
msgstr "Установка из :term:`Eggs <Egg>`"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "`pylauncher support`_"
msgstr "`Поддержка pylauncher`_"

#: ../source/discussions/pip-vs-easy-install.rst:51
msgid "Yes [1]_"
msgstr "Да [1]_"

#: ../source/discussions/pip-vs-easy-install.rst:54
msgid ":ref:`Multi-version Installs`"
msgstr ":ref:`Многоверсионные установки <Multi-version Installs>`"

#: ../source/discussions/pip-vs-easy-install.rst:57
msgid "Exclude scripts during install"
msgstr "Исключение скриптов во время установки"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "per project index"
msgstr "Индекс по проектам"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Only in virtualenv"
msgstr "Только в ``virtualenv``"

#: ../source/discussions/pip-vs-easy-install.rst:60
msgid "Yes, via setup.cfg"
msgstr "Да, через :file:`setup.cfg`"

#: ../source/discussions/pip-vs-easy-install.rst:68
#, fuzzy
msgid ""
"https://setuptools.readthedocs.io/en/latest/deprecated/easy_install."
"html#natural-script-launcher"
msgstr ""
"https://setuptools.readthedocs.io/en/latest/easy_install.html#natural-script-"
"launcher"

#: ../source/discussions/setup-py-deprecated.rst:6
msgid "Is ``setup.py`` deprecated?"
msgstr "Является ли ``setup.py`` обесцененным?"

#: ../source/discussions/setup-py-deprecated.rst:8
msgid "No, :term:`setup.py` and :ref:`setuptools` are not deprecated."
msgstr "Нет, :термин:`setup.py` и :ref:`setuptools' не амортизируются."

#: ../source/discussions/setup-py-deprecated.rst:10
msgid ""
"Setuptools is perfectly usable as a :term:`build backend` for packaging "
"Python projects. And :file:`setup.py` is a valid configuration file for :ref:"
"`setuptools` that happens to be written in Python, instead of in *TOML* for "
"example (a similar practice is used by other tools like *nox* and its :file:"
"`noxfile.py` configuration file, or *pytest* and :file:`conftest.py`)."
msgstr ""
"Setuptools вполне можно использовать в качестве :term:`build backend` для "
"упаковки Python-проектов. А :file:`setup.py` - это правильный "
"конфигурационный файл для :ref:`setuptools`, который, к примеру, написан на "
"Python, а не на *TOML* (подобная практика используется и в других "
"инструментах, таких как *nox* и его конфигурационный файл :file:`noxfile."
"py`, или *pytest* и :file:`conftest.py`)."

#: ../source/discussions/setup-py-deprecated.rst:18
msgid ""
"However, ``python setup.py`` and the use of :file:`setup.py` as a command "
"line tool are deprecated."
msgstr ""
"Однако ``python setup.py`` и использование :file:`setup.py' в качестве "
"инструмента командной строки обесцениваются."

#: ../source/discussions/setup-py-deprecated.rst:21
msgid ""
"This means that commands such as the following **MUST NOT** be run anymore:"
msgstr ""
"Это означает, что команды, такие как следующий **MUST NO**, будут "
"выполняться больше:"

#: ../source/discussions/setup-py-deprecated.rst:23
#: ../source/discussions/setup-py-deprecated.rst:35
#: ../source/guides/modernize-setup-py-project.rst:32
msgid "``python setup.py install``"
msgstr "``python setup.py install``"

#: ../source/discussions/setup-py-deprecated.rst:24
#: ../source/discussions/setup-py-deprecated.rst:37
#: ../source/guides/modernize-setup-py-project.rst:34
msgid "``python setup.py develop``"
msgstr "``python setup.py develop``"

#: ../source/discussions/setup-py-deprecated.rst:25
#: ../source/discussions/setup-py-deprecated.rst:39
#: ../source/guides/modernize-setup-py-project.rst:36
msgid "``python setup.py sdist``"
msgstr "``python setup.py sdist``"

#: ../source/discussions/setup-py-deprecated.rst:26
#: ../source/discussions/setup-py-deprecated.rst:41
#: ../source/guides/modernize-setup-py-project.rst:38
msgid "``python setup.py bdist_wheel``"
msgstr "``python setup.py bdist_wheel``"

#: ../source/discussions/setup-py-deprecated.rst:30
msgid "What commands should be used instead?"
msgstr "Какие команды следует использовать вместо этого?"

#: ../source/discussions/setup-py-deprecated.rst:33
#: ../source/guides/modernize-setup-py-project.rst:30
msgid "Deprecated"
msgstr "Устаревшее"

#: ../source/discussions/setup-py-deprecated.rst:33
#: ../source/guides/modernize-setup-py-project.rst:30
msgid "Recommendation"
msgstr "Рекомендации"

#: ../source/discussions/setup-py-deprecated.rst:35
#: ../source/guides/modernize-setup-py-project.rst:32
msgid "``python -m pip install .``"
msgstr "``python -m pip install .``"

#: ../source/discussions/setup-py-deprecated.rst:37
#: ../source/guides/modernize-setup-py-project.rst:34
msgid "``python -m pip install --editable .``"
msgstr "``python -m pip install --editable .``"

#: ../source/discussions/setup-py-deprecated.rst:39
msgid "``python -m build`` [#needs-build]_"
msgstr "``python -m build`` [#needs-build]_"

#: ../source/discussions/setup-py-deprecated.rst:45
msgid ""
"This requires the :ref:`build` dependency. It is recommended to always build "
"and publish both the source distribution and wheel of a project, which is "
"what ``python -m build`` does. If necessary the ``--sdist`` and ``--wheel`` "
"options can be used to generate only one or the other."
msgstr ""
"Это требует :ref:`build' зависимости. Рекомендуется всегда строить и "
"публиковать как распределение источника, так и колесо проекта, что и делает "
"``python -m build``. При необходимости опции ``-sdist`` и ``--wheel`` могут "
"быть использованы для создания только одного или другого."

#: ../source/discussions/setup-py-deprecated.rst:52
msgid ""
"In order to install a setuptools based project, it was common to run :file:"
"`setup.py`'s ``install`` command such as: ``python setup.py install``. "
"Nowadays, the recommended method is to use :ref:`pip` directly with a "
"command like this one: ``python -m pip install .``. Where the dot ``.`` is "
"actually a file system path, it is the path notation for the current "
"directory. Indeed, *pip* accepts a path to a project's source tree directory "
"on the local filesystem as argument to its ``install`` sub-command. So this "
"would also be a valid command: ``python -m pip install path/to/project``."
msgstr ""
"Для установки проекта, основанного на setuptools, обычно выполнялась команда "
"``install`` от :file:``setup.py``, например: ``python setup.py install``. В "
"настоящее время рекомендуется использовать :ref:`pip` напрямую с командой, "
"подобной этой: ``python -m pip install .``. Где точка ``.`` на самом деле "
"является путем к файловой системе, это обозначение пути к текущему каталогу. "
"Действительно, *pip* принимает путь к каталогу дерева исходников проекта в "
"локальной файловой системе в качестве аргумента своей подкоманды "
"``install``. Таким образом, это также будет правильной командой: ``python -m "
"pip install path/to/project``."

#: ../source/discussions/setup-py-deprecated.rst:65
msgid ""
"As for the installation in *develop* mode aka *editable* mode, instead of "
"``python setup.py develop`` one can use the ``--editable`` option of pip's "
"*install* sub-command: ``python -m pip install --editable .``."
msgstr ""
"Что касается установки в режиме *develop* aka *editable*, то вместо ``python "
"setup.py develop`` можно использовать опцию ``--editable`` в подкоманде pip "
"*install*: ``python -m pip install --editable .``."

#: ../source/discussions/setup-py-deprecated.rst:70
msgid ""
"One recommended, simple, and straightforward method of building :term:"
"`source distributions <Source Distribution (or \"sdist\")>` and :term:"
"`wheels <Wheel>` is to use the :ref:`build` tool with a command like "
"``python -m build`` which triggers the generation of both distribution "
"formats. If necessary the ``--sdist`` and ``--wheel`` options can be used to "
"generate only one or the other. Note that the build tool needs to be "
"installed separately."
msgstr ""
"Один из рекомендуемых, простых и понятных методов сборки :term:`source "
"дистрибутивов <Source Distribution (или \"sdist\")>` и :term:`wheels "
"<Wheel>` заключается в использовании инструмента :ref:`build` с командой "
"типа ``python -m build``, которая запускает генерацию обоих форматов "
"дистрибутивов. При необходимости опции ``--sdist`` и ``--wheel`` могут быть "
"использованы для генерации только одного или другого. Обратите внимание, что "
"инструмент сборки должен быть установлен отдельно."

#: ../source/discussions/setup-py-deprecated.rst:80
msgid ""
"The command ``python setup.py install`` was deprecated in setuptools version "
"*58.3.0*."
msgstr ""
"Команда ``python setup.pyinstall`` была обесценена в setuptools версии "
"*58.3.0*."

#: ../source/discussions/setup-py-deprecated.rst:85
msgid "What about other commands?"
msgstr "Как насчет других команд?"

#: ../source/discussions/setup-py-deprecated.rst:87
msgid "What are some replacements for the other ``python setup.py`` commands?"
msgstr "Каковы некоторые замены для других команд ``python setup.py``?"

#: ../source/discussions/setup-py-deprecated.rst:91
msgid "``python setup.py test``"
msgstr "``python setup.py test``"

#: ../source/discussions/setup-py-deprecated.rst:93
msgid "The recommendation is to use a test runner such as pytest_."
msgstr ""
"Рекомендация заключается в использовании тестового бегуна, такого как "
"pytest_."

#: ../source/discussions/setup-py-deprecated.rst:99
msgid ""
"``python setup.py check``, ``python setup.py register``, and ``python setup."
"py upload``"
msgstr ""
"``python setup.py check``, ``python setup.py register`` и ``python setup.py "
"upload``"

#: ../source/discussions/setup-py-deprecated.rst:101
msgid "A trusted replacement is :ref:`twine`:"
msgstr "Доверенная замена:ref:`twine':"

#: ../source/discussions/setup-py-deprecated.rst:103
msgid "``python -m twine check --strict dist/*``"
msgstr "``python -m twine check --strict dist/*``"

#: ../source/discussions/setup-py-deprecated.rst:104
msgid "``python -m twine register dist/*.whl`` [#not-pypi]_"
msgstr "``python -m twine register dist/*.whl`` [#not-pypi]_"

#: ../source/discussions/setup-py-deprecated.rst:105
msgid "``python -m twine upload dist/*``"
msgstr "``python -m twine upload dist/*``"

#: ../source/discussions/setup-py-deprecated.rst:107
msgid ""
"Not necessary, nor supported on :term:`PyPI <Python Package Index (PyPI)>`. "
"But might be necessary on other :term:`package indexes <package index>` (for "
"example :ref:`devpi`)."
msgstr ""
"Не требуется и не поддерживается на:term:`PyPI <Python Package Index "
"(PyPI)>`. Но может потребоваться и в других :термин:`package index>` "
"(например:ref:`devpi`)."

#: ../source/discussions/setup-py-deprecated.rst:112
msgid "``python setup.py --version``"
msgstr "``python setup.py --version``"

#: ../source/discussions/setup-py-deprecated.rst:114
msgid ""
"A possible replacement solution (among others) is to rely on setuptools-scm_:"
msgstr ""
"Возможное заменяющее решение (среди прочих) - полагаться на setuptools-scm_:"

#: ../source/discussions/setup-py-deprecated.rst:116
msgid "``python -m setuptools_scm``"
msgstr "``python -m setuptools-scm``"

#: ../source/discussions/setup-py-deprecated.rst:122
msgid "Remaining commands"
msgstr "Оставшиеся команды"

#: ../source/discussions/setup-py-deprecated.rst:124
msgid ""
"This guide does not make suggestions of replacement solutions for those "
"commands:"
msgstr ""
"В настоящем руководстве не предлагаются решения для замены этих команд:"

#: ../source/discussions/setup-py-deprecated.rst:129
msgid "``alias``"
msgstr "``alias``"

#: ../source/discussions/setup-py-deprecated.rst:130
msgid "``bdist``"
msgstr "``bdist``"

#: ../source/discussions/setup-py-deprecated.rst:131
msgid "``bdist_dumb``"
msgstr "``bdist_dumb``"

#: ../source/discussions/setup-py-deprecated.rst:132
msgid "``bdist_egg``"
msgstr "``bdist_egg``"

#: ../source/discussions/setup-py-deprecated.rst:133
msgid "``bdist_rpm``"
msgstr "``bdist_rpm``"

#: ../source/discussions/setup-py-deprecated.rst:134
msgid "``build``"
msgstr "``build``"

#: ../source/discussions/setup-py-deprecated.rst:135
msgid "``build_clib``"
msgstr "``build_clib``"

#: ../source/discussions/setup-py-deprecated.rst:136
msgid "``build_ext``"
msgstr "``build_ext``"

#: ../source/discussions/setup-py-deprecated.rst:137
msgid "``build_py``"
msgstr "``build_py``"

#: ../source/discussions/setup-py-deprecated.rst:138
msgid "``build_scripts``"
msgstr "``build_scripts``"

#: ../source/discussions/setup-py-deprecated.rst:139
msgid "``clean``"
msgstr "``clean``"

#: ../source/discussions/setup-py-deprecated.rst:140
msgid "``dist_info``"
msgstr "``dist_info``"

#: ../source/discussions/setup-py-deprecated.rst:141
msgid "``easy_install``"
msgstr "**easy_install**"

#: ../source/discussions/setup-py-deprecated.rst:142
msgid "``editable_wheel``"
msgstr "``editable_wheel``"

#: ../source/discussions/setup-py-deprecated.rst:143
msgid "``egg_info``"
msgstr "``egg_info``"

#: ../source/discussions/setup-py-deprecated.rst:144
msgid "``install_data``"
msgstr "``install_data``"

#: ../source/discussions/setup-py-deprecated.rst:145
msgid "``install_egg_info``"
msgstr "``install_egg_info``"

#: ../source/discussions/setup-py-deprecated.rst:146
msgid "``install_headers``"
msgstr "``install_headers``"

#: ../source/discussions/setup-py-deprecated.rst:147
msgid "``install_lib``"
msgstr "``install_lib``"

#: ../source/discussions/setup-py-deprecated.rst:148
msgid "``install_scripts``"
msgstr "``install_scripts``"

#: ../source/discussions/setup-py-deprecated.rst:149
msgid "``rotate``"
msgstr "``rotate``"

#: ../source/discussions/setup-py-deprecated.rst:150
msgid "``saveopts``"
msgstr "``saveopts``"

#: ../source/discussions/setup-py-deprecated.rst:151
msgid "``setopt``"
msgstr "``setopt``"

#: ../source/discussions/setup-py-deprecated.rst:152
msgid "``upload_docs``"
msgstr "``upload_docs``"

#: ../source/discussions/setup-py-deprecated.rst:156
msgid "What about custom commands?"
msgstr "Что насчет пользовательских команд?"

#: ../source/discussions/setup-py-deprecated.rst:158
msgid ""
"Likewise, custom :file:`setup.py` commands are deprecated. The "
"recommendation is to migrate those custom commands to a task runner tool or "
"any other similar tool. Some examples of such tools are: chuy, make, nox or "
"tox, pydoit, pyinvoke, taskipy, and thx."
msgstr ""
"Аналогично, пользовательские :file:`setup.py' команды депрецируются. "
"Рекомендация состоит в том, чтобы перенести эти пользовательские команды на "
"инструмент для выполнения задач или любой другой аналогичный инструмент. "
"Некоторые примеры таких инструментов: chuy, make, nox или tox, pydoit, "
"pyinvoke, taskipy и thx."

#: ../source/discussions/setup-py-deprecated.rst:166
msgid "What about custom build steps?"
msgstr "Как насчет пользовательских шагов?"

#: ../source/discussions/setup-py-deprecated.rst:168
msgid ""
"Custom build steps that for example either overwrite existing steps such as "
"``build_py``, ``build_ext``, and ``bdist_wheel`` or add new build steps are "
"not deprecated. Those will be automatically called as expected."
msgstr ""
"Настроить шаги, которые, например, либо переписать существующие шаги, такие "
"как ``build_py``, ``build_ext`` и ``bdist_wheel`` или добавить новые шаги "
"сборки, не обесцениваются. Они будут автоматически называться, как и "
"ожидалось."

#: ../source/discussions/setup-py-deprecated.rst:175
#: ../source/guides/modernize-setup-py-project.rst:21
msgid "Should ``setup.py`` be deleted?"
msgstr "Следует ли исключить ``setup.py``?"

#: ../source/discussions/setup-py-deprecated.rst:177
msgid ""
"Although the usage of :file:`setup.py` as an executable script is "
"deprecated, its usage as a configuration file for setuptools is absolutely "
"fine. There is likely no modification needed in :file:`setup.py`."
msgstr ""
"Хотя использование :file:`setup.py' в качестве исполняемого скрипта "
"депрецируется, его использование в качестве файла конфигурации для "
"setuptools абсолютно нормально. :file:`setup.py`, вероятно, не требуется "
"никаких изменений."

#: ../source/discussions/setup-py-deprecated.rst:183
msgid "Is ``pyproject.toml`` mandatory?"
msgstr "Является ли ``pyproject.toml`` обязательным?"

#: ../source/discussions/setup-py-deprecated.rst:185
msgid ""
"While it is not technically necessary yet, it is **STRONGLY RECOMMENDED** "
"for a project to have a :file:`pyproject.toml` file at the root of its "
"source tree with a content like this:"
msgstr ""
"Хотя это еще не технически необходимо, это **STRONGLY RECOMMENDED** для "
"проекта иметь :file:`pyproject. toml' файл в корне своего исходного дерева с "
"таким контентом:"

#: ../source/discussions/setup-py-deprecated.rst:196
msgid ""
"The guide :ref:`modernize-setup-py-project` has more details about this."
msgstr ""
"Руководство:ref: \" Modernize-setup-py-project \" имеет больше деталей об "
"этом."

#: ../source/discussions/setup-py-deprecated.rst:198
msgid ""
"The standard fallback behavior for a :term:`build frontend <Build Frontend>` "
"in the absence of a :file:`pyproject.toml` file and its ``[build-system]`` "
"table is to assume that the :term:`build backend <Build Backend>` is "
"setuptools."
msgstr ""
"Стандартное обратное поведение для :term:`build frontend <Build Frontend>` в "
"отсутствие :file:`pyproject.toml' файла и его ``[build-system]`` таблица "
"предполагает, что :term:`build backend <Build Backend>` является setuptools."

#: ../source/discussions/setup-py-deprecated.rst:204
msgid "Why? What does it all mean?"
msgstr "Почему? Что все это значит?"

#: ../source/discussions/setup-py-deprecated.rst:206
msgid ""
"One way to look at it is that the scope of setuptools has now been reduced "
"to the role of a build backend."
msgstr ""
"Один из способов взглянуть на это заключается в том, что сфера setuptools "
"теперь была сведена к роли опоры."

#: ../source/discussions/setup-py-deprecated.rst:211
#: ../source/guides/modernize-setup-py-project.rst:244
msgid "Where to read more about this?"
msgstr "Где почитать об этом?"

#: ../source/discussions/setup-py-deprecated.rst:213
msgid ""
"`Why you shouldn't invoke setup.py directly <https://blog.ganssle.io/"
"articles/2021/10/setup-py-deprecated.html>`__ by Paul Ganssle"
msgstr ""
"`Почему не следует вызывать setup.py напрямую <https://blog.ganssle.io/"
"articles/2021/10/setup-py-deprecated.html>`__ by Paul Ganssle"

#: ../source/discussions/setup-py-deprecated.rst:215
msgid ":doc:`setuptools:deprecated/commands`"
msgstr ":doc:`setuptools:deprecated/commands`"

#: ../source/discussions/single-source-version.rst:5
msgid "Single-sourcing the Project Version"
msgstr "Единая версия проекта"

#: ../source/discussions/single-source-version.rst:7
msgid "Complete"
msgstr "Выполнено"

#: ../source/discussions/single-source-version.rst:8
msgid "2024-10-07"
msgstr "2024-10-07"

#: ../source/discussions/single-source-version.rst:10
msgid ""
"Many Python :term:`distribution packages <Distribution Package>` publish a "
"single Python :term:`import package <Import Package>` where it is desired "
"that the runtime ``__version__`` attribute on the import package report the "
"same version specifier as :func:`importlib.metadata.version` reports for the "
"distribution package (as described in :ref:`runtime-version-access`)."
msgstr ""
"Многие Python :term:`distribution packages <Distribution Package>` публикуют "
"один Python :term:`import package <Import Package>`, где желательно, чтобы "
"атрибут runtime ``__version__`` на импортном пакете сообщал тот же "
"спецификатор версии, что и :func:`importlib.metadata.version` сообщает для "
"дистрибутивного пакета (как описано в :ref:`runtime-version-access`)."

#: ../source/discussions/single-source-version.rst:16
msgid ""
"It is also frequently desired that this version information be derived from "
"a version control system *tag* (such as ``v1.2.3``) rather than being "
"manually updated in the source code."
msgstr ""
"Также часто бывает желательно, чтобы эта информация о версии была получена "
"из *метки* системы контроля версий (например, ``v1.2.3``), а не обновлялась "
"вручную в исходном коде."

#: ../source/discussions/single-source-version.rst:20
msgid ""
"Some projects may choose to simply live with the data entry duplication, and "
"rely on automated testing to ensure the different values do not diverge."
msgstr ""
"Некоторые проекты могут просто смириться с дублированием ввода данных и "
"полагаться на автоматизированное тестирование, чтобы убедиться, что "
"различные значения не расходятся."

#: ../source/discussions/single-source-version.rst:23
msgid ""
"Alternatively, a project's chosen build system may offer a way to define a "
"single source of truth for the version number."
msgstr ""
"В качестве альтернативы, выбранная проектом система сборки может предложить "
"способ определения единого источника истины для номера версии."

#: ../source/discussions/single-source-version.rst:26
msgid "In general, the options are:"
msgstr "В общем, возможны следующие варианты:"

#: ../source/discussions/single-source-version.rst:28
msgid ""
"If the code is in a version control system (VCS), such as Git, then the "
"version can be extracted from the VCS."
msgstr ""
"Если код находится в системе контроля версий (VCS), например Git, то версию "
"можно извлечь из VCS."

#: ../source/discussions/single-source-version.rst:30
msgid ""
"The version can be hard-coded into the :file:`pyproject.toml` file -- and "
"the build system can copy it into other locations it may be required."
msgstr ""
"Версия может быть жестко задана в файле :file:`pyproject.toml`, а система "
"сборки может скопировать ее в другие места, которые могут потребоваться."

#: ../source/discussions/single-source-version.rst:33
msgid ""
"The version string can be hard-coded into the source code -- either in a "
"special purpose file, such as :file:`_version.txt` (which must then be "
"shipped as part of the project's source distribution package), or as an "
"attribute in a particular module, such as :file:`__init__.py`. The build "
"system can then extract it from the runtime location at build time."
msgstr ""
"Строка версии может быть жестко закодирована в исходном коде - либо в "
"специальном файле, таком как :file:`_version.txt` (который затем должен "
"поставляться как часть пакета распространения исходного кода проекта), либо "
"как атрибут в определенном модуле, таком как :file:`__init__.py`. Тогда "
"система сборки может извлечь его из места выполнения во время сборки."

#: ../source/discussions/single-source-version.rst:38
msgid "Consult your build system's documentation for their recommended method."
msgstr ""
"Обратитесь к документации вашей системы сборки, чтобы узнать о рекомендуемом "
"методе."

#: ../source/discussions/single-source-version.rst:40
msgid ""
"When the intention is that a distribution package and its associated import "
"package share the same version, it is recommended that the project include "
"an automated test case that ensures ``import_name.__version__`` and "
"``importlib.metadata.version(\"dist-name\")`` report the same value (note: "
"for many projects, ``import_name`` and ``dist-name`` will be the same name)."
msgstr ""
"Если предполагается, что дистрибутив и связанный с ним пакет импорта имеют "
"одну и ту же версию, рекомендуется включить в проект автоматизированный "
"тестовый пример, который гарантирует, что ``import_name.__version__`` и "
"``importlib.metadata.version(\"dist-name\")`` сообщают одно и то же значение "
"(примечание: для многих проектов ``import_name`` и ``dist-name`` будут иметь "
"одно и то же имя)."

#: ../source/discussions/single-source-version.rst:50
msgid "Build System Version Handling"
msgstr "Обработка версий системы сборки"

#: ../source/discussions/single-source-version.rst:52
msgid ""
"The following are links to some build system's documentation for handling "
"version strings."
msgstr ""
"Ниже приведены ссылки на документацию некоторых систем сборки по работе со "
"строками версий."

#: ../source/discussions/single-source-version.rst:54
msgid "`Flit <https://flit.pypa.io/en/stable/>`_"
msgstr "`Flit <https://flit.pypa.io/en/stable/>`_"

#: ../source/discussions/single-source-version.rst:56
msgid "`Hatchling <https://hatch.pypa.io/1.9/version/>`_"
msgstr "`Hatchling <https://hatch.pypa.io/1.9/version/>`_"

#: ../source/discussions/single-source-version.rst:58
msgid ""
"`PDM <https://pdm-project.org/en/latest/reference/pep621/#__tabbed_1_2>`_"
msgstr ""
"`PDM <https://pdm-project.org/en/latest/reference/pep621/#__tabbed_1_2>`_"

#: ../source/discussions/single-source-version.rst:60
msgid ""
"`Setuptools <https://setuptools.pypa.io/en/latest/userguide/pyproject_config."
"html#dynamic-metadata>`_"
msgstr ""
"`Setuptools <https://setuptools.pypa.io/en/latest/userguide/pyproject_config."
"html#dynamic-metadata>`_"

#: ../source/discussions/single-source-version.rst:62
msgid "`setuptools_scm <https://setuptools-scm.readthedocs.io/en/latest/>`_"
msgstr "`setuptools_scm <https://setuptools-scm.readthedocs.io/en/latest/>`_"

#: ../source/discussions/src-layout-vs-flat-layout.rst:5
msgid "src layout vs flat layout"
msgstr "src-макет против плоского макета"

#: ../source/discussions/src-layout-vs-flat-layout.rst:7
msgid ""
"The \"flat layout\" refers to organising a project's files in a folder or "
"repository, such that the various configuration files and :term:`import "
"packages <Import Package>` are all in the top-level directory."
msgstr ""
"«плоский макет» относится к организации файлов проекта в папке или "
"репозитории, так что различные файлы конфигурации и :термин: «импортные "
"пакеты <Import Package>` все в директории верхнего уровня."

#: ../source/discussions/src-layout-vs-flat-layout.rst:25
msgid ""
"The \"src layout\" deviates from the flat layout by moving the code that is "
"intended to be importable (i.e. ``import awesome_package``, also known as :"
"term:`import packages <Import Package>`) into a subdirectory. This "
"subdirectory is typically named ``src/``, hence \"src layout\"."
msgstr ""
"src раскладка\" отличается от плоской раскладки тем, что код, который должен "
"быть импортируемым (например, ``import awesome_package``, также известный "
"как :term:`import packages <Import Package>`), перемещается в подкаталог. "
"Этот подкаталог обычно называется ``rc/``, отсюда и \"src раскладка\"."

#: ../source/discussions/src-layout-vs-flat-layout.rst:45
msgid ""
"Here's a breakdown of the important behaviour differences between the src "
"layout and the flat layout:"
msgstr ""
"Вот разбивка важных различий в поведении между макетом дуги и плоской "
"компоновкой:"

#: ../source/discussions/src-layout-vs-flat-layout.rst:48
msgid ""
"The src layout requires installation of the project to be able to run its "
"code, and the flat layout does not."
msgstr ""
"Схема арки требует установки проекта, чтобы иметь возможность запустить его "
"код, а плоской планировки нет."

#: ../source/discussions/src-layout-vs-flat-layout.rst:51
msgid ""
"This means that the src layout involves an additional step in the "
"development workflow of a project (typically, an :doc:`editable installation "
"<setuptools:userguide/development_mode>` is used for development and a "
"regular installation is used for testing)."
msgstr ""
"Это означает, что планировка дуги включает в себя дополнительный шаг в "
"процессе разработки проекта (как правило, :doc: «отредактируемая установка "
"<setuptools:userguide/development_mode>` используется для разработки и для "
"тестирования используется регулярная установка)."

#: ../source/discussions/src-layout-vs-flat-layout.rst:56
msgid ""
"The src layout helps prevent accidental usage of the in-development copy of "
"the code."
msgstr ""
"Схема кружево помогает предотвратить случайное использование копии кода в "
"разработке."

#: ../source/discussions/src-layout-vs-flat-layout.rst:59
msgid ""
"This is relevant since the Python interpreter includes the current working "
"directory as the first item on the import path. This means that if an import "
"package exists in the current working directory with the same name as an "
"installed import package, the variant from the current working directory "
"will be used. This can lead to subtle  misconfiguration of the project's "
"packaging tooling, which could result in files not being included in a "
"distribution."
msgstr ""
"Это актуально, поскольку интерпретатор Python включает текущий рабочий "
"каталог в качестве первого пункта на пути импорта. Это означает, что если "
"пакет импорта существует в текущем рабочем каталоге с тем же названием, что "
"и установленный пакет импорта, будет использоваться вариант из текущего "
"рабочего каталога. Это может привести к тонкой неправильной настройке "
"инструментов упаковки проекта, что может привести к тому, что файлы не будут "
"включены в распределение."

#: ../source/discussions/src-layout-vs-flat-layout.rst:66
msgid ""
"The src layout helps avoid this by keeping import packages in a directory "
"separate from the root directory of the project, ensuring that the installed "
"copy is used."
msgstr ""
"Схема src помогает избежать этого, сохраняя импортные пакеты в каталоге "
"отдельно от корневого каталога проекта, обеспечивая использование "
"установленной копии."

#: ../source/discussions/src-layout-vs-flat-layout.rst:70
msgid ""
"The src layout helps enforce that an :doc:`editable installation <setuptools:"
"userguide/development_mode>` is only able to import files that were meant to "
"be importable."
msgstr ""
"Схема src помогает обеспечить, чтобы :doc:`editableinstall <setuptools:"
"userguide/development_mode>` смог импортировать только файлы, которые должны "
"были быть импортированы."

#: ../source/discussions/src-layout-vs-flat-layout.rst:74
msgid ""
"This is especially relevant when the editable installation is implemented "
"using a `path configuration file <https://docs.python.org/3/library/site."
"html#index-2>`_ that adds the directory to the import path."
msgstr ""
"Это особенно актуально, когда редактируемая установка реализована с помощью "
"файла <https.python.org/3/library/site.html#index-2>`_ это добавляет каталог "
"к пути импорта."

#: ../source/discussions/src-layout-vs-flat-layout.rst:78
msgid ""
"The flat layout would add the other project files (eg: ``README.md``, ``tox."
"ini``) and packaging/tooling configuration files (eg: ``setup.py``, "
"``noxfile.py``) on the import path. This would make certain imports work in "
"editable installations but not regular installations."
msgstr ""
"В плоском макете будут добавлены другие файлы проекта (например: ``README."
"md``, ``tox.ini``) и файлы конфигурации упаковки/инструмента (например: "
"``setup.py``, ``noxfile.py``) на пути импорта. Это позволило бы производить "
"определенные импортные работы на редактируемых установках, но не на обычных "
"установках."

#: ../source/discussions/src-layout-vs-flat-layout.rst:86
msgid "Running a command-line interface from source with src-layout"
msgstr ""
"Запуск интерфейса командной строки из исходного текста с помощью src-layout"

#: ../source/discussions/src-layout-vs-flat-layout.rst:88
msgid ""
"Due to the firstly mentioned specialty of the src layout, a command-line "
"interface can not be run directly from the :term:`source tree <Project "
"Source Tree>`, but requires installation of the package in :doc:`Development "
"Mode <setuptools:userguide/development_mode>` for testing purposes. Since "
"this can be unpractical in some situations, a workaround could be to prepend "
"the package folder to  Python's :py:data:`sys.path` when called via its :"
"file:`__main__.py` file:"
msgstr ""
"В связи с первой из упомянутых особенностей компоновки src, интерфейс "
"командной строки не может быть запущен непосредственно из :term:`source tree "
"<Project Source Tree>`, а требует установки пакета в :doc:`Development Mode "
"<setuptools:userguide/development_mode>` для целей тестирования. Поскольку "
"это может быть непрактично в некоторых ситуациях, обходным решением может "
"быть добавление папки пакета к :py:data:`sys.path` при вызове через файл :"
"file:`__main__.py`:"

#: ../source/discussions/versioning.rst:6
#: ../source/specifications/simple-repository-api.rst:349
msgid "Versioning"
msgstr "Версионирование"

#: ../source/discussions/versioning.rst:8
msgid "This discussion covers all aspects of versioning Python packages."
msgstr ""
"В этой статье рассматриваются все аспекты версионирования пакетов Python."

#: ../source/discussions/versioning.rst:12
msgid "Valid version numbers"
msgstr "Допустимые номера версий"

#: ../source/discussions/versioning.rst:14
msgid ""
"Different Python projects may use different versioning schemes based on the "
"needs of that particular project, but in order to be compatible with tools "
"like :ref:`pip`, all of them are required to comply with a flexible format "
"for version identifiers, for which the authoritative reference is the :ref:"
"`specification of version specifiers <version-specifiers>`. Here are some "
"examples of version numbers [#version-examples]_:"
msgstr ""
"Различные Python-проекты могут использовать различные схемы версионирования "
"в зависимости от потребностей конкретного проекта, но для совместимости с "
"такими инструментами, как :ref:`pip`, все они должны соответствовать гибкому "
"формату идентификаторов версий, для которого авторитетной ссылкой является :"
"ref:`specification of version specifiers <version-specifiers>`. Вот "
"несколько примеров номеров версий [#version-examples]_:"

#: ../source/discussions/versioning.rst:21
msgid "A simple version (final release): ``1.2.0``"
msgstr "Простая версия (финальный релиз): ``1.2.0``"

#: ../source/discussions/versioning.rst:22
msgid "A development release: ``1.2.0.dev1``"
msgstr "Релиз разработки: ``1.2.0.dev1``"

#: ../source/discussions/versioning.rst:23
msgid "An alpha release: ``1.2.0a1``"
msgstr "Альфа-версия: ``1.2.0a1``"

#: ../source/discussions/versioning.rst:24
msgid "A beta release: ``1.2.0b1``"
msgstr "Бета-версия: ``1.2.0b1``"

#: ../source/discussions/versioning.rst:25
msgid "A release candidate: ``1.2.0rc1``"
msgstr "Кандидат на релиз: ``1.2.0rc1``"

#: ../source/discussions/versioning.rst:26
msgid "A post-release: ``1.2.0.post1``"
msgstr "Пост-релиз: ``1.2.0.post1``"

#: ../source/discussions/versioning.rst:27
msgid ""
"A post-release of an alpha release (possible, but discouraged): ``1.2.0a1."
"post1``"
msgstr ""
"Пост-релиз альфа-релиза (возможно, но не рекомендуется): ``1.2.0a1.post1``"

#: ../source/discussions/versioning.rst:28
msgid "A simple version with only two components: ``23.12``"
msgstr "Простая версия, состоящая всего из двух компонентов: ``23.12``"

#: ../source/discussions/versioning.rst:29
msgid "A simple version with just one component: ``42``"
msgstr "Простая версия с одним компонентом: ``42``"

#: ../source/discussions/versioning.rst:30
msgid "A version with an epoch: ``1!1.0``"
msgstr "Версия с эпохой: ``1!1.0``"

#: ../source/discussions/versioning.rst:32
msgid ""
"Projects can use a cycle of pre-releases to support testing by their users "
"before a final release. In order, the steps are: alpha releases, beta "
"releases, release candidates, final release. Pip and other modern Python "
"package installers ignore pre-releases by default when deciding which "
"versions of dependencies to install, unless explicitly requested (e.g., with "
"``pip install pkg==1.1a3`` or ``pip install --pre pkg``)."
msgstr ""
"Проекты могут использовать цикл предварительных выпусков для поддержки "
"тестирования пользователями перед выпуском финального релиза. По порядку эти "
"шаги выглядят так: альфа-релизы, бета-релизы, релиз-кандидаты, финальный "
"релиз. Pip и другие современные программы установки пакетов Python по "
"умолчанию игнорируют предварительные выпуски при принятии решения о том, "
"какие версии зависимостей устанавливать, если это не запрошено явно "
"(например, с помощью ``pip install pkg==1.1a3`` или ``pip install --pre "
"pkg``)."

#: ../source/discussions/versioning.rst:39
msgid ""
"The purpose of development releases is to support releases made early during "
"a development cycle, for example, a nightly build, or a build from the "
"latest source in a Linux distribution."
msgstr ""
"Цель релизов разработки - поддержать релизы, выпущенные на ранних этапах "
"цикла разработки, например, ночные сборки или сборки из последних исходных "
"текстов в дистрибутиве Linux."

#: ../source/discussions/versioning.rst:43
msgid ""
"Post-releases are used to address minor errors in a final release that do "
"not affect the distributed software, such as correcting an error in the "
"release notes. They should not be used for bug fixes; these should be done "
"with a new final release (e.g., incrementing the third component when using "
"semantic versioning)."
msgstr ""
"Пост-релизы используются для устранения мелких ошибок в финальном релизе, "
"которые не влияют на распространяемое программное обеспечение, например, для "
"исправления ошибки в примечаниях к релизу. Они не должны использоваться для "
"исправления ошибок; это должно быть сделано в новом финальном выпуске "
"(например, инкремент третьего компонента при использовании семантической "
"версионности)."

#: ../source/discussions/versioning.rst:49
msgid ""
"Finally, epochs, a rarely used feature, serve to fix the sorting order when "
"changing the versioning scheme. For example, if a project is using calendar "
"versioning, with versions like 23.12, and switches to semantic versioning, "
"with versions like 1.0, the comparison between 1.0 and 23.12 will go the "
"wrong way. To correct this, the new version numbers should have an explicit "
"epoch, as in \"1!1.0\", in order to be treated as more recent than the old "
"version numbers."
msgstr ""
"Наконец, эпохи, редко используемая функция, служат для фиксации порядка "
"сортировки при изменении схемы версионирования. Например, если проект "
"использует календарную версификацию, с версиями типа 23.12, и переходит на "
"семантическую версификацию, с версиями типа 1.0, то сравнение между 1.0 и "
"23.12 будет идти в неправильном направлении. Чтобы исправить это, новые "
"номера версий должны иметь явную эпоху, как в \"1!1.0\", чтобы считаться "
"более новыми, чем старые номера версий."

#: ../source/discussions/versioning.rst:59
msgid "Semantic versioning vs. calendar versioning"
msgstr ""
"Семантическое версионирование по сравнению с календарным версионированием"

#: ../source/discussions/versioning.rst:61
msgid ""
"A versioning scheme is a formalized way to interpret the segments of a "
"version number, and to decide which should be the next version number for a "
"new release of a package. Two versioning schemes are commonly used for "
"Python packages, semantic versioning and calendar versioning."
msgstr ""
"Схема версионирования - это формализованный способ интерпретации сегментов "
"номера версии и принятия решения о том, какой номер версии должен быть "
"следующим для нового выпуска пакета. Для пакетов Python обычно используются "
"две схемы версионирования: семантическое версионирование и календарное "
"версионирование."

#: ../source/discussions/versioning.rst:68
msgid ""
"The decision which version number to choose is up to a project's maintainer. "
"This effectively means that version bumps reflect the maintainer's view. "
"That view may differ from the end-users' perception of what said formalized "
"versioning scheme promises them."
msgstr ""
"Решение о том, какой номер версии выбрать, принимает сопровождающий проекта. "
"Это фактически означает, что переходы по версиям отражают точку зрения "
"сопровождающего. Это мнение может отличаться от восприятия конечными "
"пользователями того, что обещает им формализованная схема версионирования."

#: ../source/discussions/versioning.rst:74
#, fuzzy
#| msgid ""
#| "There are known exceptions for selecting the next version number. The "
#| "maintainers may consciously choose to break the assumption that the last "
#| "version segment only contains backwards-compatible changes. One such case "
#| "is when security vulnerability needs to be addressed. Security releases "
#| "often come in patch versions but contain breaking changes inevitably."
msgid ""
"There are known exceptions for selecting the next version number. The "
"maintainers may consciously choose to break the assumption that the last "
"version segment only contains backwards-compatible changes. One such case is "
"when a security vulnerability needs to be addressed. Security releases often "
"come in patch versions but contain breaking changes inevitably."
msgstr ""
"Известны исключения при выборе номера следующей версии. Сопровождающие могут "
"сознательно решить нарушить предположение, что последний сегмент версии "
"содержит только обратно-совместимые изменения. Один из таких случаев - "
"необходимость устранения уязвимости в системе безопасности. Релизы "
"безопасности часто выпускаются в виде патчей, но неизбежно содержат ломающие "
"изменения."

#: ../source/discussions/versioning.rst:84
#: ../source/specifications/version-specifiers.rst:726
msgid "Semantic versioning"
msgstr "Семантическая версификация"

#: ../source/discussions/versioning.rst:86
msgid ""
"The idea of *semantic versioning* (or SemVer) is to use 3-part version "
"numbers, *major.minor.patch*, where the project author increments:"
msgstr ""
"Идея *семантического версионирования* (или SemVer) заключается в "
"использовании номеров версий, состоящих из трех частей, *major.minor.patch*, "
"которые автор проекта увеличивает:"

#: ../source/discussions/versioning.rst:89
msgid "*major* when they make incompatible API changes,"
msgstr "*главное*, когда они вносят несовместимые изменения в API,"

#: ../source/discussions/versioning.rst:90
msgid ""
"*minor* when they add functionality in a backwards-compatible manner, and"
msgstr ""
"*незначительные*, когда они добавляют функциональность, совместимую с "
"обратным развитием, и"

#: ../source/discussions/versioning.rst:91
msgid "*patch*, when they make backwards-compatible bug fixes."
msgstr ""
"*патчи*, когда они исправляют ошибки, совместимые с обратными версиями."

#: ../source/discussions/versioning.rst:93
msgid ""
"A majority of Python projects use a scheme that resembles semantic "
"versioning. However, most projects, especially larger ones, do not strictly "
"adhere to semantic versioning, since many changes are technically breaking "
"changes but affect only a small fraction of users. Such projects tend to "
"increment the major number when the incompatibility is high, or to signal a "
"shift in the project, rather than for any tiny incompatibility [#semver-"
"strictness]_. Conversely, a bump of the major version number is sometimes "
"used to signal significant but backwards-compatible new features."
msgstr ""
"Большинство проектов на Python используют схему, напоминающую семантическое "
"версионирование. Однако большинство проектов, особенно крупных, не строго "
"придерживаются семантического версионирования, поскольку многие изменения "
"являются технически разрушающими, но затрагивают лишь небольшую часть "
"пользователей. Такие проекты склонны увеличивать основной номер, когда "
"несовместимость высока или сигнализирует о сдвигах в проекте, а не для любой "
"крошечной несовместимости [#semver-strictness]_. И наоборот, увеличение "
"номера основной версии иногда используется, чтобы сообщить о значительных, "
"но обратно совместимых новых возможностях."

#: ../source/discussions/versioning.rst:103
msgid ""
"For those projects that do use strict semantic versioning, this approach "
"allows users to make use of :ref:`compatible release version specifiers "
"<version-specifiers-compatible-release>`, with the ``~=`` operator.  For "
"example, ``name ~= X.Y`` is roughly equivalent to ``name >= X.Y, == X.*``, i."
"e., it requires at least release X.Y, and allows any later release with "
"greater Y as long as X is the same. Likewise, ``name ~= X.Y.Z`` is roughly "
"equivalent to ``name >= X.Y.Z, == X.Y.*``, i.e., it requires at least X.Y.Z "
"and allows a later release with same X and Y but higher Z."
msgstr ""
"Для тех проектов, которые используют строгую семантическую версионность, "
"этот подход позволяет использовать спецификаторы версий : ссылка:"
"`совместимых релизов <Спецификаторы версий-совместимых релизов>`, с помощью "
"оператора ``~=``.  Например, ``имя ~= X.Y`` примерно эквивалентно ``имя >= X."
"Y, == X.*``, то есть требует как минимум релиза X.Y, и допускает любой более "
"поздний релиз с большим Y при условии, что X тот же самый. Аналогично, ``имя "
"~= X.Y.Z`` примерно эквивалентно ``имя >= X.Y.Z, == X.Y.*``, то есть требует "
"не менее X.Y.Z и допускает более поздний выпуск с теми же X и Y, но более "
"высоким Z."

#: ../source/discussions/versioning.rst:112
msgid ""
"Python projects adopting semantic versioning should abide by clauses 1-8 of "
"the `Semantic Versioning 2.0.0 specification <semver_>`_."
msgstr ""
"Python-проекты, использующие семантическое версионирование, должны следовать "
"пунктам 1-8 спецификации `Семантическое версионирование 2.0.0 <semver_>`_."

#: ../source/discussions/versioning.rst:115
msgid ""
"The popular :doc:`Sphinx <sphinx:index>` documentation generator is an "
"example project that uses strict semantic versioning (:doc:`Sphinx "
"versioning policy <sphinx:internals/release-process>`). The famous :doc:"
"`NumPy <numpy:index>` scientific computing package explicitly uses \"loose\" "
"semantic versioning, where releases incrementing the minor version can "
"contain backwards-incompatible API changes (:doc:`NumPy versioning policy "
"<numpy:dev/depending_on_numpy>`)."
msgstr ""
"Популярный генератор документации : документ:`Sphinx <сфинкс:индекс>` - "
"пример проекта, использующего строгое семантическое версионирование (:"
"документ:`сфинкс политика версионирования <сфинкс: внутренние/процесс "
"выпуска>`). Известный пакет для научных вычислений :doc:`NumPy <numpy:"
"index>` явно использует \"свободное\" семантическое версионирование, где "
"релизы, увеличивающие минорную версию, могут содержать обратно-несовместимые "
"изменения API (:doc:`NumPy версионная политика <numpy:dev/"
"depending_on_numpy>`)."

#: ../source/discussions/versioning.rst:124
msgid "Calendar versioning"
msgstr "Версионирование календаря"

#: ../source/discussions/versioning.rst:126
#, fuzzy
#| msgid ""
#| "Semantic versioning is not a suitable choice for all projects, such as "
#| "those with a regular time based release cadence and a deprecation process "
#| "that provides warnings for a number of releases prior to removal of a "
#| "feature."
msgid ""
"Semantic versioning is not a suitable choice for all projects, such as those "
"with a regular time-based release cadence and a deprecation process that "
"provides warnings for a number of releases prior to removal of a feature."
msgstr ""
"Семантическое версионирование подходит не для всех проектов, например, для "
"тех, которые имеют регулярную периодичность выпуска релизов и процесс "
"обесценивания, предусматривающий предупреждения за несколько релизов до "
"удаления функции."

#: ../source/discussions/versioning.rst:130
msgid ""
"A key advantage of date-based versioning, or `calendar versioning "
"<calver_>`_ (CalVer), is that it is straightforward to tell how old the base "
"feature set of a particular release is given just the version number."
msgstr ""
"Ключевое преимущество версионирования на основе даты, или `календарного "
"версионирования <calver_>`_ (CalVer), заключается в том, что по номеру "
"версии можно легко определить, насколько устарел базовый набор функций "
"конкретного выпуска."

#: ../source/discussions/versioning.rst:134
msgid ""
"Calendar version numbers typically take the form *year.month* (for example, "
"23.12 for December 2023)."
msgstr ""
"Календарные номера версий обычно имеют вид *год.месяц* (например, 23.12 для "
"декабря 2023 года)."

#: ../source/discussions/versioning.rst:137
msgid ""
":doc:`Pip <pip:index>`, the standard Python package installer, uses calendar "
"versioning."
msgstr ""
": документ:`Pip <pip: индекс>`, стандартная программа установки пакетов "
"Python, использует календарную версификацию."

#: ../source/discussions/versioning.rst:142
msgid "Other schemes"
msgstr "Другие схемы"

#: ../source/discussions/versioning.rst:144
msgid ""
"Serial versioning refers to the simplest possible versioning scheme, which "
"consists of a single number incremented every release. While serial "
"versioning is very easy to manage as a developer, it is the hardest to track "
"as an end user, as serial version numbers convey little or no information "
"regarding API backwards compatibility."
msgstr ""
"Серийное версионирование относится к самой простой схеме версионирования, "
"которая состоит из одного числа, увеличивающегося с каждым выпуском. Хотя "
"серийной версией очень легко управлять разработчику, ее сложнее всего "
"отслеживать конечному пользователю, поскольку серийные номера версий "
"практически не передают информации об обратной совместимости API."

#: ../source/discussions/versioning.rst:150
#, fuzzy
#| msgid ""
#| "Combinations of the above schemes are possible. For example, a project "
#| "may combine date based versioning with serial versioning to create a "
#| "*year.serial* numbering scheme that readily conveys the approximate age "
#| "of a release, but doesn't otherwise commit to a particular release "
#| "cadence within the year."
msgid ""
"Combinations of the above schemes are possible. For example, a project may "
"combine date-based versioning with serial versioning to create a *year."
"serial* numbering scheme that readily conveys the approximate age of a "
"release, but doesn't otherwise commit to a particular release cadence within "
"the year."
msgstr ""
"Возможны комбинации описанных выше схем. Например, проект может сочетать "
"версионирование по дате с серийным версионированием, чтобы создать схему "
"нумерации *год.серия*, которая легко передает приблизительный возраст "
"релиза, но в остальном не обязывает к определенной периодичности выпуска в "
"течение года."

#: ../source/discussions/versioning.rst:157
#: ../source/specifications/version-specifiers.rst:114
msgid "Local version identifiers"
msgstr "Идентификаторы локальных версий"

#: ../source/discussions/versioning.rst:159
msgid ""
"Public version identifiers are designed to support distribution via :term:"
"`PyPI <Python Package Index (PyPI)>`. Python packaging tools also support "
"the notion of a :ref:`local version identifier <local-version-identifiers>`, "
"which can be used to identify local development builds not intended for "
"publication, or modified variants of a release maintained by a redistributor."
msgstr ""
"Идентификаторы публичных версий предназначены для поддержки распространения "
"через : термин:`PyPI <Python Package Index (PyPI)>`. Средства упаковки "
"Python также поддерживают понятие :ref:`локального идентификатора версии "
"<локальный идентификатор версии>`, который может использоваться для "
"идентификации локальных сборок разработки, не предназначенных для "
"публикации, или модифицированных вариантов релиза, поддерживаемого "
"редистрибьютором."

#: ../source/discussions/versioning.rst:165
msgid ""
"A local version identifier takes the form of a public version identifier, "
"followed by \"+\" and a local version label. For example, a package with "
"Fedora-specific patches applied could have the version \"1.2.1+fedora.4\". "
"Another example is versions computed by setuptools-scm_, a setuptools plugin "
"that reads the version from Git data. In a Git repository with some commits "
"since the latest release, setuptools-scm generates a version like \"0.5."
"dev1+gd00980f\", or if the repository has untracked changes, like \"0.5."
"dev1+gd00980f.d20231217\"."
msgstr ""
"Идентификатор локальной версии имеет вид идентификатора публичной версии, за "
"которым следует \"+\" и метка локальной версии. Например, пакет с "
"примененными исправлениями, специфичными для Fedora, может иметь версию "
"\"1.2.1+fedora.4\". Другой пример - версии, вычисляемые setuptools-scm_, "
"плагином setuptools, который считывает версию из данных Git. В Git-"
"репозитории с некоторыми фиксациями после последнего релиза setuptools-scm "
"генерирует версию типа \"0.5.dev1+gd00980f\", или, если в репозитории есть "
"неотслеживаемые изменения, типа \"0.5.dev1+gd00980f.d20231217\"."

#: ../source/discussions/versioning.rst:177
msgid "Accessing version information at runtime"
msgstr "Доступ к информации о версии во время выполнения"

#: ../source/discussions/versioning.rst:179
msgid ""
"Version information for all :term:`distribution packages <Distribution "
"Package>` that are locally available in the current environment can be "
"obtained at runtime using the standard library's :func:`importlib.metadata."
"version` function::"
msgstr ""
"Информация о версии всех :term:`distribution packages <Distribution "
"Package>`, локально доступных в текущем окружении, может быть получена во "
"время выполнения с помощью функции :func:`importlib.metadata.version` "
"стандартной библиотеки::"

#: ../source/discussions/versioning.rst:186
msgid ""
"Many projects also choose to version their top level :term:`import packages "
"<Import Package>` by providing a package level ``__version__`` attribute::"
msgstr ""
"Многие проекты также выбирают версионирование своего верхнего уровня :term:"
"`import packages <Import Package>`, предоставляя атрибут ``__version__`` на "
"уровне пакета::"

#: ../source/discussions/versioning.rst:194
msgid ""
"This technique can be particularly valuable for CLI applications which want "
"to ensure that version query invocations (such as ``pip -V``) run as quickly "
"as possible."
msgstr ""
"Эта техника может быть особенно ценной для приложений CLI, которые хотят "
"обеспечить максимально быстрое выполнение запросов версий (например, ``pip -"
"V``)."

#: ../source/discussions/versioning.rst:198
msgid ""
"Package publishers wishing to ensure their reported distribution package and "
"import package versions are consistent with each other can review the :ref:"
"`single-source-version` discussion for potential approaches to doing so."
msgstr ""
"Издатели пакетов, желающие обеспечить соответствие версий дистрибутивного и "
"импортного пакетов, могут ознакомиться с обсуждением :ref:`single-source-"
"version` для потенциальных подходов к решению этой задачи."

#: ../source/discussions/versioning.rst:202
msgid ""
"As import packages and modules are not *required* to publish runtime version "
"information in this way (see the withdrawn proposal in :pep:`PEP 396 "
"<396>`), the ``__version__`` attribute should either only be queried with "
"interfaces that are known to provide it (such as a project querying its own "
"version or the version of one of its direct dependencies), or else the "
"querying code should be designed to handle the case where the attribute is "
"missing [#fallback-to-dist-version]_."
msgstr ""
"Поскольку импортные пакеты и модули не *обязаны* публиковать информацию о "
"версии во время выполнения таким образом (см. отозванное предложение в :pep:"
"`PEP 396 <396>`), атрибут ``__version__`` должен запрашиваться только в "
"интерфейсах, которые, как известно, его предоставляют (например, проект "
"запрашивает свою собственную версию или версию одной из своих прямых "
"зависимостей), или же код запроса должен быть разработан для обработки "
"случая, когда атрибут отсутствует [#fallback-to-dist-version]_."

#: ../source/discussions/versioning.rst:210
msgid ""
"Some projects may need to publish version information for external APIs that "
"aren't the version of the module itself. Such projects should define their "
"own project-specific ways of obtaining the relevant information at runtime. "
"For example, the standard library's :mod:`ssl` module offers multiple ways "
"to access the underlying OpenSSL library version::"
msgstr ""
"Некоторым проектам может потребоваться опубликовать информацию о версии "
"внешних API, которая не является версией самого модуля. Такие проекты должны "
"определить свои собственные, специфичные для проекта способы получения "
"соответствующей информации во время выполнения. Например, модуль :mod:`ssl` "
"стандартной библиотеки предлагает несколько способов доступа к версии "
"библиотеки OpenSSL::"

#: ../source/discussions/versioning.rst:225
msgid ""
"Some more examples of unusual version numbers are given in a `blog post "
"<versions-seth-larson_>`_ by Seth Larson."
msgstr ""
"Еще несколько примеров необычных номеров версий приведены в `блоговом посте "
"<версии-Сет-Ларсон_>`_ Сета Ларсона."

#: ../source/discussions/versioning.rst:228
msgid ""
"For some personal viewpoints on this issue, see these blog posts: `by Hynek "
"Schlawak <semver-hynek-schlawack_>`_, `by Donald Stufft <semver-donald-"
"stufft_>`_, `by Bernát Gábor <semver-bernat-gabor_>`_, `by Brett Cannon "
"<semver-brett-cannon_>`_. For a humoristic take, read about ZeroVer_."
msgstr ""
"Некоторые личные точки зрения на этот вопрос см. в этих статьях блога: Гинек "
"Шлавак <semver-гинек-шлавак_>`_, Дональд Стаффт <semver-дональд-стаффт_>`_, "
"Бернат Габор <semver-бернат-габор_>`_, Бретт Кэннон <semver-бретт-"
"кэннон_>`_. Для юмористического восприятия читайте о ZeroVer_."

#: ../source/discussions/versioning.rst:234
msgid ""
"A full list mapping the top level names available for import to the "
"distribution packages that provide those import packages and modules may be "
"obtained through the standard library's :func:`importlib.metadata."
"packages_distributions` function. This means that even code that is "
"attempting to infer a version to report for all importable top-level names "
"has a means to fall back to reporting the distribution version information "
"if no ``__version__`` attribute is defined. Only standard library modules, "
"and modules added via means other than Python package installation would "
"fail to have version information reported in that case."
msgstr ""
"Полный список, отображающий имена верхнего уровня, доступные для импорта, на "
"дистрибутивы, которые предоставляют эти импортируемые пакеты и модули, можно "
"получить с помощью функции стандартной библиотеки :func:`importlib.metadata."
"packages_distributions`. Это означает, что даже код, пытающийся определить "
"версию для сообщения для всех импортируемых имен верхнего уровня, имеет "
"возможность вернуться к сообщению информации о версии дистрибутива, если "
"атрибут ``__version__`` не определен. Только стандартные библиотечные модули "
"и модули, добавленные другими способами, кроме установки пакета Python, в "
"этом случае не будут сообщать информацию о версии."

#: ../source/flow.rst:3
msgid "The Packaging Flow"
msgstr "Упаковочный поток"

#: ../source/flow.rst:5
msgid ""
"The document aims to outline the flow involved in publishing/distributing a :"
"term:`distribution package <Distribution Package>`, usually to the `Python "
"Package Index (PyPI)`_. It is written for package publishers, who are "
"assumed to be the package author."
msgstr ""
"Цель этого документа - описать процесс публикации/распространения :term:"
"`распространяемого пакета <Распространяемый пакет>`, обычно в `Индекс "
"пакетов Python (PyPI)`_. Он написан для издателей пакетов, которые, как "
"предполагается, являются авторами пакетов."

#: ../source/flow.rst:12
msgid ""
"While the :doc:`tutorial <tutorials/packaging-projects>` walks through the "
"process of preparing a simple package for release, it does not fully "
"enumerate what steps and files are required, and for what purpose."
msgstr ""
"Хотя в :doc:`учебнике <tutorials/packaging-projects>` рассматривается "
"процесс подготовки простого пакета к выпуску, он не полностью перечисляет, "
"какие шаги и файлы требуются и для чего."

#: ../source/flow.rst:16
msgid ""
"Publishing a package requires a flow from the author's source code to an end "
"user's Python environment. The steps to achieve this are:"
msgstr ""
"Публикация пакета требует перехода от исходного кода автора к среде Python "
"конечного пользователя. Для этого необходимо выполнить следующие шаги:"

#: ../source/flow.rst:19
msgid ""
"Have a source tree containing the package. This is typically a checkout from "
"a version control system (VCS)."
msgstr ""
"Иметь дерево исходных текстов, содержащее пакет. Обычно это проверка из "
"системы контроля версий (VCS)."

#: ../source/flow.rst:22
msgid ""
"Prepare a configuration file describing the package metadata (name, version "
"and so forth) and how to create the build artifacts. For most packages, this "
"will be a :file:`pyproject.toml` file, maintained manually in the source "
"tree."
msgstr ""
"Подготовьте конфигурационный файл, описывающий метаданные пакета (имя, "
"версию и т.д.) и способ создания артефактов сборки. Для большинства пакетов "
"это будет файл :file:`pyproject.toml`, поддерживаемый вручную в дереве "
"исходных текстов."

#: ../source/flow.rst:27
msgid ""
"Create build artifacts to be sent to the package distribution service "
"(usually PyPI); these will normally be a :term:`source distribution "
"(\"sdist\") <Source Distribution (or \"sdist\")>` and one or more :term:"
"`built distributions (\"wheels\") <Built Distribution>`. These are made by a "
"build tool using the configuration file from the previous step. Often there "
"is just one generic wheel for a pure Python package."
msgstr ""
"Создайте артефакты сборки для отправки в службу распространения пакетов "
"(обычно PyPI); обычно это будет :term:`исходный дистрибутив (\"sdist\") "
"<Source Distribution (или \"sdist\")>` и один или несколько :term:`сборных "
"дистрибутивов (\"wheels\") <Built Distribution>`. Они создаются инструментом "
"сборки с помощью конфигурационного файла, полученного на предыдущем шаге. "
"Часто для пакета чистого Python существует только одно общее колесо."

#: ../source/flow.rst:35
msgid "Upload the build artifacts to the package distribution service."
msgstr "Загрузите строительные артефакты в службу распределения пакетов."

#: ../source/flow.rst:37
msgid ""
"At that point, the package is present on the package distribution service. "
"To use the package, end users must:"
msgstr ""
"На этом этапе пакет присутствует в сервисе распределения пакетов. Для "
"использования пакета конечные пользователи должны:"

#: ../source/flow.rst:40
msgid ""
"Download one of the package's build artifacts from the package distribution "
"service."
msgstr ""
"Скачайте один из строительных артефактов пакета из службы распространения "
"пакетов."

#: ../source/flow.rst:43
msgid ""
"Install it in their Python environment, usually in its ``site-packages`` "
"directory. This step may involve a build/compile step which, if needed, must "
"be described by the package metadata."
msgstr ""
"Установите его в своей среде Python, обычно в его каталоге ``site-"
"packages``. Этот шаг может включать в себя этап сборки/компиляции, который "
"при необходимости должен быть описан пакетными метаданными."

#: ../source/flow.rst:47
msgid ""
"These last 2 steps are typically performed by :ref:`pip` when an end user "
"runs ``pip install``."
msgstr ""
"Эти два последних шага обычно выполняются :ref:`pip`, когда конечный "
"пользователь запускает ``pip install``."

#: ../source/flow.rst:50
msgid "The steps above are described in more detail below."
msgstr "Приведенные выше шаги более подробно описаны ниже."

#: ../source/flow.rst:53
msgid "The source tree"
msgstr "Дерево исходного кода"

#: ../source/flow.rst:55
msgid ""
"The source tree contains the package source code, usually a checkout from a "
"VCS. The particular version of the code used to create the build artifacts "
"will typically be a checkout based on a tag associated with the version."
msgstr ""
"Источниковое дерево содержит исходный код пакета, обычно чек от VCS. "
"Конкретная версия кода, используемого для создания артефактов сборки, как "
"правило, будет проверкой на основе тега, связанного с версией."

#: ../source/flow.rst:60
msgid "The configuration file"
msgstr "Файл конфигурации"

#: ../source/flow.rst:62
msgid ""
"The configuration file depends on the tool used to create the build "
"artifacts. The standard practice is to use a :file:`pyproject.toml` file in "
"the `TOML format`_."
msgstr ""
"Конфигурационный файл зависит от инструмента, используемого для создания "
"артефактов сборки. Стандартной практикой является использование файла :file:"
"`pyproject.toml` в формате `TOML`_."

#: ../source/flow.rst:68
msgid ""
"At a minimum, the :file:`pyproject.toml` file needs a ``[build-system]`` "
"table specifying your build tool. There are many build tools available, "
"including but not limited to :ref:`flit`, :ref:`hatch`, :ref:`pdm`, :ref:"
"`poetry`, :ref:`setuptools`, `trampolim`_, and `whey`_. Each tool's "
"documentation will show what to put in the ``[build-system]`` table."
msgstr ""
"Как минимум, файл :file:`pyproject.toml' нуждается в ``[build-system]`` "
"таблица с указанием вашего инструмента сборки. Имеется множество "
"инструментов для сборки, в том числе:ref:`flit`, :ref:`hatch`, :ref:`pdm`, :"
"ref:`poetry`, :ref:`setuptools', `trampolim`_ и `whey`_. Документация "
"каждого инструмента покажет, что поместить в таблицу ``[build-system]``."

#: ../source/flow.rst:77
msgid "For example, here is a table for using :ref:`hatch`:"
msgstr "Например, вот таблица для использования:ref:`hatch`:"

#: ../source/flow.rst:85
msgid ""
"With such a table in the :file:`pyproject.toml` file, a \":term:`frontend "
"<Build Frontend>`\" tool like :ref:`build` can run your chosen build tool's "
"\":term:`backend <Build Backend>`\" to create the build artifacts. Your "
"build tool may also provide its own frontend. An install tool like :ref:"
"`pip` also acts as a frontend when it runs your build tool's backend to "
"install from a source distribution."
msgstr ""
"С такой таблицей в файле :file:`pyproject.toml', \":term:`frontend <Build "
"Frontend>`\" tool like :ref:`build` может запускать выбранный вами "
"инструмент построения \":term:`backend <Build Backend>`\" для создания "
"артефактов сборки. Ваш инструмент сборки также может предоставить свой "
"собственный фронтенд. Инструмент установки, такой как :ref:`pip'', также "
"действует в качестве фронтенда, когда он запускает предысторию вашего "
"инструмента для установки из распределения источника."

#: ../source/flow.rst:94
msgid ""
"The particular build tool you choose dictates what additional information is "
"required in the :file:`pyproject.toml` file. For example, you might specify:"
msgstr ""
"Выбранный вами инструмент сборки диктует, какая дополнительная информация "
"требуется в файле :file:`pyproject.toml`. Например, вы можете указать:"

#: ../source/flow.rst:97
msgid ""
"a ``[project]`` table containing project :doc:`Core Metadata </"
"specifications/core-metadata/>` (name, version, author and so forth),"
msgstr ""
"таблица ``[проект]``, содержащая проект :doc:``Основные метаданные </"
"specifications/core-metadata/>` (название, версия, автор и так далее),"

#: ../source/flow.rst:101
msgid "a ``[tool]`` table containing tool-specific configuration options."
msgstr ""
"таблица ``[tool]``, содержащая параметры конфигурации, специфичные для "
"конкретного инструмента."

#: ../source/flow.rst:103
msgid ""
"Refer to the :ref:`pyproject.toml guide <writing-pyproject-toml>` for a "
"complete guide to ``pyproject.toml`` configuration."
msgstr ""
"Полное руководство по настройке ``pyproject.toml'' см. в :ref:`pyproject."
"toml guide <writing-pyproject-toml>`."

#: ../source/flow.rst:108
msgid "Build artifacts"
msgstr "Создание артефактов"

#: ../source/flow.rst:111
msgid "The source distribution (sdist)"
msgstr "Распространение в исходном коде (sdist)"

#: ../source/flow.rst:113
msgid ""
"A source distribution contains enough to install the package from source in "
"an end user's Python environment. As such, it needs the package source, and "
"may also include tests and documentation. These are useful for end users "
"wanting to develop your sources, and for end user systems where some local "
"compilation step is required (such as a C extension)."
msgstr ""
"Дистрибутив с исходным кодом содержит достаточно средств для установки "
"пакета из исходного кода в среду Python конечного пользователя. Как таковой, "
"он содержит исходный текст пакета, а также может включать тесты и "
"документацию. Они полезны для конечных пользователей, желающих разработать "
"свои исходные тексты, а также для систем конечных пользователей, где "
"требуется локальная компиляция (например, расширение C)."

#: ../source/flow.rst:119 ../source/flow.rst:143
msgid ""
"The :ref:`build` package knows how to invoke your build tool to create one "
"of these:"
msgstr ""
"Пакет :ref:`build` знает, как вызвать ваш инструмент сборки для создания "
"одного из них:"

#: ../source/flow.rst:126
msgid ""
"Or, your build tool may provide its own interface for creating an sdist."
msgstr ""
"Или же ваш инструмент сборки может предоставлять собственный интерфейс для "
"создания sdist."

#: ../source/flow.rst:130
msgid "The built distributions (wheels)"
msgstr "Построенные дистрибутивы (колеса)"

#: ../source/flow.rst:132
msgid ""
"A built distribution contains only the files needed for an end user's Python "
"environment. No compilation steps are required during the install, and the "
"wheel file can simply be unpacked into the ``site-packages`` directory. This "
"makes the install faster and more convenient for end users."
msgstr ""
"Собранный дистрибутив содержит только файлы, необходимые для среды Python "
"конечного пользователя. При установке не требуется компиляция, а файл wheel "
"можно просто распаковать в каталог ``ite-packages``. Это делает установку "
"более быстрой и удобной для конечных пользователей."

#: ../source/flow.rst:137
msgid ""
"A pure Python package typically needs only one \"generic\" wheel. A package "
"with compiled binary extensions needs a wheel for each supported combination "
"of Python interpreter, operating system, and CPU architecture that it "
"supports. If a suitable wheel file is not available, tools like :ref:`pip` "
"will fall back to installing the source distribution."
msgstr ""
"Пакету на чистом Python обычно требуется только одно \"общее\" колесо. Пакет "
"с компилируемыми бинарными расширениями нуждается в колесе для каждой "
"поддерживаемой комбинации интерпретатора Python, операционной системы и "
"архитектуры процессора, которые он поддерживает. Если подходящий файл колеса "
"недоступен, такие инструменты, как :ref:`pip`, вернутся к установке "
"исходного дистрибутива."

#: ../source/flow.rst:150
msgid "Or, your build tool may provide its own interface for creating a wheel."
msgstr ""
"Или же ваш инструмент сборки может предоставлять собственный интерфейс для "
"создания колеса."

#: ../source/flow.rst:154
msgid ""
"The default behaviour of :ref:`build` is to make both an sdist and a wheel "
"from the source in the current directory; the above examples are "
"deliberately specific."
msgstr ""
"По умолчанию поведение :ref:`build' состоит в том, чтобы сделать как sdist, "
"так и колесо из источника в текущем каталоге; приведенные выше примеры "
"преднамеренно конкретны."

#: ../source/flow.rst:159
msgid "Upload to the package distribution service"
msgstr "Загрузка в службу распространения пакетов"

#: ../source/flow.rst:161
msgid ""
"The :ref:`twine` tool can upload build artifacts to PyPI for distribution, "
"using a command like:"
msgstr ""
"Инструмент :ref:`twine` может загружать артефакты сборки в PyPI для "
"распространения, используя такую команду, как:"

#: ../source/flow.rst:168
msgid "Or, your build tool may provide its own interface for uploading."
msgstr ""
"Или же ваш инструмент сборки может предоставлять собственный интерфейс для "
"загрузки."

#: ../source/flow.rst:171
msgid "Download and install"
msgstr "Скачать и установить"

#: ../source/flow.rst:173
msgid ""
"Now that the package is published, end users can download and install the "
"package into their Python environment. Typically this is done with :ref:"
"`pip`, using a command like:"
msgstr ""
"Теперь, когда пакет опубликован, конечные пользователи могут загрузить и "
"установить его в свою среду Python. Обычно это делается с помощью :ref:"
"`pip`, используя такую команду, как:"

#: ../source/flow.rst:181
msgid ""
"End users may also use other tools like :ref:`pipenv`, :ref:`poetry`, or :"
"ref:`pdm`."
msgstr ""
"Конечные пользователи могут также использовать другие инструменты, такие как:"
"ref:`pipenv`, :ref:`poetry', или :ref:`pdm'."

#: ../source/glossary.rst:3
msgid "Glossary"
msgstr "Словарь терминов"

#: ../source/glossary.rst:8
msgid "Binary Distribution"
msgstr "Двоичное распределение"

#: ../source/glossary.rst:11
msgid ""
"A specific kind of :term:`Built Distribution` that contains compiled "
"extensions."
msgstr ""
"Особый вид :term:`Built Distribution`, содержащий скомпилированные "
"расширения."

#: ../source/glossary.rst:14
msgid "Build Backend"
msgstr "Создание бэкэнда"

#: ../source/glossary.rst:17
msgid ""
"A library that takes a source tree and builds a :term:`source distribution "
"<Source Distribution (or \"sdist\")>` or :term:`built distribution <Built "
"Distribution>` from it. The build is delegated to the backend by a :term:"
"`frontend <Build Frontend>`. All backends offer a standardized interface."
msgstr ""
"Библиотека, которая принимает дерево исходных текстов и собирает из него : "
"термин:`источник дистрибутива <Источник дистрибутива (или \"sdist\")>` или :"
"термин:`сборка дистрибутива <Сборка дистрибутива>`. Сборка делегируется "
"бэкенду с помощью : термин:`фронтенд <Сборка фронтенда>`. Все бэкенды "
"предлагают стандартизированный интерфейс."

#: ../source/glossary.rst:24
msgid ""
"Examples of build backends are :ref:`flit's flit-core <flit>`, :ref:`hatch's "
"hatchling <hatch>`, :ref:`maturin`, :ref:`meson-python`, :ref:`scikit-build-"
"core`, and :ref:`setuptools`."
msgstr ""
"Примерами бэкендов сборки являются :ref:`flit's flit-core <flit>`, :ref:"
"`hatch's hatchling <hatch>`, :ref:`maturin`, :ref:`meson-python`, :ref:"
"`scikit-build-core`, и :ref:`setuptools`."

#: ../source/glossary.rst:32
msgid "Build Frontend"
msgstr "Сборка фронтенда"

#: ../source/glossary.rst:35
msgid ""
"A tool that users might run that takes arbitrary source trees or :term:"
"`source distributions <Source Distribution (or \"sdist\")>` and builds "
"source distributions or :term:`wheels <Wheel>` from them. The actual "
"building is delegated to each source tree's :term:`build backend <Build "
"Backend>`."
msgstr ""
"Инструмент, который может быть запущен пользователями, который принимает "
"произвольные деревья исходных текстов или :term:`дистрибутивы исходных "
"текстов <Source Distribution (или \"sdist\")>` и собирает из них "
"дистрибутивы исходных текстов или :term:`колеса <Wheel>`. Собственно сборка "
"делегируется каждому дереву исходников :term:`build backend <Build Backend>`."

#: ../source/glossary.rst:42
msgid "Examples of build frontends are :ref:`pip` and :ref:`build`."
msgstr "Примерами фронтендов сборки являются :ref:`pip` и :ref:`build`."

#: ../source/glossary.rst:44
msgid "Built Distribution"
msgstr "Построенное распределение"

#: ../source/glossary.rst:47
msgid ""
"A :term:`Distribution <Distribution Package>` format containing files and "
"metadata that only need to be moved to the correct location on the target "
"system, to be installed. :term:`Wheel` is such a format, whereas :term:"
"`Source Distribution <Source Distribution (or \"sdist\")>` is not, in that "
"it requires a build step before it can be installed.  This format does not "
"imply that Python files have to be precompiled (:term:`Wheel` intentionally "
"does not include compiled Python files). See :ref:`package-formats` for more "
"information."
msgstr ""
"Формат : термин:`Дистрибутив <Дистрибутивный пакет>`, содержащий файлы и "
"метаданные, которые нужно только переместить в нужное место на целевой "
"системе, чтобы установить. :термин:`Wheel` является таким форматом, тогда "
"как :термин:`Источник дистрибутива <Источник дистрибутива (или \"sdist\")>` "
"не является, поскольку требует этапа сборки перед установкой.  Этот формат "
"не подразумевает, что файлы Python должны быть предварительно скомпилированы "
"(:term:`Wheel` намеренно не включает скомпилированные файлы Python). "
"Дополнительную информацию смотрите в : ссылка:`форматы пакетов`."

#: ../source/glossary.rst:56
msgid "Built Metadata"
msgstr "Встроенные метаданные"

#: ../source/glossary.rst:59
msgid ""
"The concrete form :term:`Core Metadata` takes when included inside an "
"installed :term:`Project` (``METADATA`` file) or a :term:`Distribution "
"Archive` (``PKG-INFO`` in a :term:`Sdist <Source Distribution (or "
"\"sdist\")>` and ``METADATA`` in a :term:`Wheel`)."
msgstr ""
"Конкретная форма, которую принимает : термин:`Основные метаданные` при "
"включении в установленный :термин:`Проект` (файл ``METADATA``) или архив :"
"термин:`Дистрибутив` (``PKG-INFO`` в :термин:`Sdist <Источник дистрибутива "
"(или \"sdist\")>` и ``METADATA`` в :термин:`Колесо``)."

#: ../source/glossary.rst:66
msgid "Core Metadata"
msgstr "Основные метаданные"

#: ../source/glossary.rst:69
msgid ""
"The :ref:`specification <core-metadata>` and the set of :term:`Core Metadata "
"Field`\\s it defines that describe key static attributes of a :term:"
"`Distribution Package` or :term:`Installed Project`."
msgstr ""
"`Спецификация <основные метаданные>` и набор определяемых ею полей : термин:"
"`Основные поля метаданных`\\, которые описывают ключевые статические "
"атрибуты :термин:`Дистрибутивный пакет` или :термин:`Установленный проект`."

#: ../source/glossary.rst:74
msgid "Core Metadata Field"
msgstr "Поле основных метаданных"

#: ../source/glossary.rst:77
msgid ""
"A single key-value pair (or sequence of such with the same name, for "
"multiple-use fields) defined in the :term:`Core Metadata` spec and stored in "
"the :term:`Built Metadata`. Notably, distinct from a :term:`Pyproject "
"Metadata Key`."
msgstr ""
"Одиночная пара ключ-значение (или последовательность таких пар с одинаковым "
"именем, для многоразовых полей), определенная в спецификации : термин:"
"`Основные метаданные` и хранящаяся в :термин:`Строенные метаданные`. "
"Отличается от : термин:`Ключ метаданных пайпроекта`."

#: ../source/glossary.rst:83
msgid "Distribution Archive"
msgstr "Архив дистрибутивов"

#: ../source/glossary.rst:86
msgid ""
"The physical distribution artifact (i.e. a file on disk) for a :term:"
"`Distribution Package`."
msgstr ""
"Физический артефакт распространения (т.е. файл на диске) для : термин:"
"`Дистрибутивный пакет`."

#: ../source/glossary.rst:89
msgid "Distribution Package"
msgstr "Пакет дистрибутива"

#: ../source/glossary.rst:92
msgid ""
"A versioned archive file that contains Python :term:`packages <Import "
"Package>`, :term:`modules <Module>`, and other resource files that are used "
"to distribute a :term:`Release`. The archive file is what an end-user will "
"download from the internet and install."
msgstr ""
"Версионный архивный файл, содержащий Python :term:`пакеты <Import "
"Package>`, :term:`модули <Module>` и другие файлы ресурсов, которые "
"используются для распространения :term:`Release`. Архивный файл - это то, "
"что конечный пользователь скачает из интернета и установит."

#: ../source/glossary.rst:97
msgid ""
"A distribution package is more commonly referred to with the single words "
"\"package\" or \"distribution\", but this guide may use the expanded term "
"when more clarity is needed to prevent confusion with an :term:`Import "
"Package` (which is also commonly called a \"package\") or another kind of "
"distribution (e.g. a Linux distribution or the Python language "
"distribution), which are often referred to with the single term "
"\"distribution\". See :ref:`distribution-package-vs-import-package` for a "
"breakdown of the differences."
msgstr ""
"Дистрибутив чаще всего обозначается одним словом \"пакет\" или "
"\"дистрибутив\", но в данном руководстве может использоваться расширенный "
"термин, когда требуется большая ясность, чтобы избежать путаницы с :term:"
"`Import Package` (который также обычно называется \"пакет\") или другим "
"видом дистрибутива (например, дистрибутив Linux или дистрибутив языка "
"Python), которые часто обозначаются одним термином \"дистрибутив\". Разбор "
"различий см. в :ref:`distribution-package-vs-import-package`."

#: ../source/glossary.rst:105
msgid "Egg"
msgstr "Яйцо"

#: ../source/glossary.rst:108
msgid ""
"A :term:`Built Distribution` format introduced by :ref:`setuptools`, which "
"has been replaced by :term:`Wheel`.  For details, see :ref:`egg-format`."
msgstr ""
"Формат :term:`Built Distribution`, введенный :ref:`setuptools`, который был "
"заменен :term:`Wheel`.  Подробности см. в :ref:`egg-format`."

#: ../source/glossary.rst:111
msgid "Extension Module"
msgstr "Модуль расширения"

#: ../source/glossary.rst:114
msgid ""
"A :term:`Module` written in the low-level language of the Python "
"implementation: C/C++ for Python, Java for Jython. Typically contained in a "
"single dynamically loadable pre-compiled file, e.g.  a shared object (.so) "
"file for Python extensions on Unix, a DLL (given the .pyd extension) for "
"Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""
"Термин:`Модуль`, написанный на языке низкого уровня реализации Python: C/C++ "
"для Python, Java для Jython. Обычно содержится в одном динамически "
"загружаемом предварительно скомпилированном файле, например, в файле общих "
"объектов (.so) для расширений Python на Unix, DLL (с расширением .pyd) для "
"расширений Python на Windows, или в файле классов Java для расширений Jython."

#: ../source/glossary.rst:121
msgid "Import Package"
msgstr "Import Package (Импортируемый пакет)"

#: ../source/glossary.rst:124
msgid ""
"A Python module which can contain other modules or recursively, other "
"packages."
msgstr ""
"Модуль Python, который может содержать другие модули или, рекурсивно, другие "
"пакеты."

#: ../source/glossary.rst:127
msgid ""
"An import package is more commonly referred to with the single word "
"\"package\", but this guide will use the expanded term when more clarity is "
"needed to prevent confusion with a :term:`Distribution Package` which is "
"also commonly called a \"package\". See :ref:`distribution-package-vs-import-"
"package` for a breakdown of the differences."
msgstr ""
"Импортный пакет чаще всего обозначается одним словом \"пакет\", но в этом "
"руководстве будет использоваться расширенный термин, когда требуется большая "
"ясность, чтобы избежать путаницы с :term:`Distribution Package`, который "
"также обычно называется \"пакет\". Различия см. в :ref:`distribution-package-"
"vs-import-package`."

#: ../source/glossary.rst:133
msgid "Installed Project"
msgstr "Установленный проект"

#: ../source/glossary.rst:136
#, fuzzy
#| msgid ""
#| "A :term:`Project` that is installed for use with a Python interpreter or :"
#| "term:`Virtual Environment`, as described in the specicifcation :ref:"
#| "`recording-installed-packages`."
msgid ""
"A :term:`Project` that is installed for use with a Python interpreter or :"
"term:`Virtual Environment`, as described in the specification :ref:"
"`recording-installed-packages`."
msgstr ""
"Проект, установленный для использования с интерпретатором Python или : "
"термин:`виртуальное окружение`, как описано в спецификации : ссылка:`запись-"
"установленных-пакетов`."

#: ../source/glossary.rst:140
msgid "Known Good Set (KGS)"
msgstr "Known Good Set (KGS, Известный хороший набор)"

#: ../source/glossary.rst:143
msgid ""
"A set of distributions at specified versions which are compatible with each "
"other. Typically a test suite will be run which passes all tests before a "
"specific set of packages is declared a known good set. This term is commonly "
"used by frameworks and toolkits which are comprised of multiple individual "
"distributions."
msgstr ""
"Набор дистрибутивов определенных версий, совместимых друг с другом. Обычно "
"перед тем, как объявить определенный набор пакетов заведомо исправным, "
"запускается набор тестов, который проходит все проверки. Этот термин обычно "
"используется во фреймворках и наборах инструментов, которые состоят из "
"нескольких отдельных дистрибутивов."

#: ../source/glossary.rst:149
msgid "License Classifier"
msgstr "Лицензионный классификатор"

#: ../source/glossary.rst:152
msgid ""
"A PyPI Trove classifier (as :ref:`described <core-metadata-classifier>` in "
"the :term:`Core Metadata` specification) which begins with ``License ::``."
msgstr ""
"Классификатор PyPI Trove (как :ref:`described <core-metadata-classifier>` в "
"спецификации :term:`Core Metadata`), который начинается с ``Лицензии ::``."

#: ../source/glossary.rst:157 ../source/specifications/license-expression.rst:3
msgid "License Expression"
msgstr "Лицензионная экспрессия"

#: ../source/glossary.rst:158
msgid "SPDX Expression"
msgstr "SPDX Экспрессия"

#: ../source/glossary.rst:161
msgid ""
"A string with valid SPDX license expression syntax, including one or more "
"SPDX :term:`License Identifier`\\(s), which describes a :term:`Project`'s "
"license(s) and how they inter-relate. Examples: ``GPL-3.0-or-later``, ``MIT "
"AND (Apache-2.0 OR BSD-2-Clause)``"
msgstr ""
"Строка с допустимым синтаксисом выражения лицензий SPDX, включающая один или "
"несколько идентификаторов SPDX :term:`License Identifier`\\(s), которые "
"описывают лицензии :term:`Project` и их взаимосвязь. Примеры: ``GPL-3.0-or-"
"later``, ``MIT AND (Apache-2.0 OR BSD-2-Clause)``"

#: ../source/glossary.rst:169
msgid "License Identifier"
msgstr "Лицензионный идентификатор"

#: ../source/glossary.rst:170
msgid "SPDX Identifier"
msgstr "Идентификатор SPDX"

#: ../source/glossary.rst:173
msgid ""
"A valid SPDX short-form license identifier, originally specified in :pep:"
"`639`. This includes all valid SPDX identifiers and the custom ``LicenseRef-"
"[idstring]`` strings conforming to the SPDX specification. Examples: "
"``MIT``, ``GPL-3.0-only``, ``LicenseRef-My-Custom-License``"
msgstr ""
"Действительный идентификатор короткой формы лицензии SPDX, первоначально "
"указанный в :pep:`639`. Сюда входят все действительные идентификаторы SPDX и "
"пользовательские строки ``LicenseRef-[idstring]``, соответствующие "
"спецификации SPDX. Примеры: ``MIT``, ``GPL-3.0-only``, ``LicenseRef-My-"
"Custom-License``"

#: ../source/glossary.rst:183
msgid "Module"
msgstr "Модуль"

#: ../source/glossary.rst:186
msgid ""
"The basic unit of code reusability in Python, existing in one of two types: :"
"term:`Pure Module`, or :term:`Extension Module`."
msgstr ""
"Базовая единица многократного использования кода в Python, существующая в "
"одном из двух типов: :термин: «чистый модуль» или :термин: «модуль "
"расширения»."

#: ../source/glossary.rst:189
msgid "Package Index"
msgstr "Индекс пакета"

#: ../source/glossary.rst:192
msgid ""
"A repository of distributions with a web interface to automate :term:"
"`package <Distribution Package>` discovery and consumption."
msgstr ""
"Репозиторий дистрибутивов с веб-интерфейсом для автоматизации :term:`package "
"<Distribution Package>` обнаружения и потребления."

#: ../source/glossary.rst:195
msgid "Per Project Index"
msgstr "Индекс на проект"

#: ../source/glossary.rst:198
msgid ""
"A private or other non-canonical :term:`Package Index` indicated by a "
"specific :term:`Project` as the index preferred or required to resolve "
"dependencies of that project."
msgstr ""
"Частный или иной неканонический:термин: «Индекс пакетов», обозначенный "
"конкретным:термин: «проект» как индекс, предпочтительный или необходимый для "
"решения зависимостей этого проекта."

#: ../source/glossary.rst:202 ../source/guides/hosting-your-own-index.rst:62
#: ../source/guides/index-mirrors-and-caches.rst:52
msgid "Project"
msgstr "Проект"

#: ../source/glossary.rst:205
msgid ""
"A library, framework, script, plugin, application, or collection of data or "
"other resources, or some combination thereof that is intended to be packaged "
"into a :term:`Distribution <Distribution Package>`."
msgstr ""
"Библиотека, структура, сценарий, плагин, приложение или сбор данных или "
"других ресурсов, или определенная их комбинация, которая должна быть "
"упакована в :term:`Distribution <Distribution Package>`."

#: ../source/glossary.rst:209
msgid ""
"Since most projects create :term:`Distributions <Distribution Package>` "
"using either :pep:`518` ``build-system``, :ref:`distutils` or :ref:"
"`setuptools`, another practical way to define projects currently is "
"something that contains a :term:`pyproject.toml`, :term:`setup.py`, or :term:"
"`setup.cfg` file at the root of the project source directory."
msgstr ""
"Поскольку большинство проектов создают :term:`Distributions <Дистрибутивный "
"пакет>`, используя либо :pep:`518` `build-system`, :ref:`distutils` или :ref:"
"`setuptools`, другим практичным способом определения проектов в настоящее "
"время является то, что содержит :term:`pyproject.toml`, :term:`setup.py` "
"или :term:`setup.cfg` файл в корне исходного каталога проекта."

#: ../source/glossary.rst:215
msgid ""
"Python projects must have unique names, which are registered on :term:`PyPI "
"<Python Package Index (PyPI)>`. Each project will then contain one or more :"
"term:`Releases <Release>`, and each release may comprise one or more :term:"
"`distributions <Distribution Package>`."
msgstr ""
"Проекты Python должны иметь уникальные имена, которые регистрируются в :term:"
"`PyPI <Python Package Index (PyPI)>`. Каждый проект будет содержать один или "
"несколько :term:`Releases <Release>`, а каждый релиз может состоять из "
"одного или нескольких :term:`distributions <Distribution Package>`."

#: ../source/glossary.rst:220
msgid ""
"Note that there is a strong convention to name a project after the name of "
"the package that is imported to run that project. However, this doesn't have "
"to hold true. It's possible to install a distribution from the project 'foo' "
"and have it provide a package importable only as 'bar'."
msgstr ""
"Обратите внимание, что существует строгое правило называть проект по имени "
"пакета, который импортируется для запуска этого проекта. Однако это не "
"обязательно так. Можно установить дистрибутив из проекта 'foo' и получить от "
"него пакет, импортируемый только как 'bar'."

#: ../source/glossary.rst:226
msgid "Project Root Directory"
msgstr "Корневой каталог проекта"

#: ../source/glossary.rst:229
msgid ""
"The filesystem directory in which a :term:`Project`'s :term:`source tree "
"<Project Source Tree>` is located."
msgstr ""
"Каталог файловой системы, в котором находится : термин:`Проект` :термин:"
"`дерево источников <Дерево источников проекта>`."

#: ../source/glossary.rst:232
msgid "Project Source Tree"
msgstr "Дерево источников проекта"

#: ../source/glossary.rst:235
msgid ""
"The on-disk format of a :term:`Project` used for development, containing its "
"raw source code before being packaged into a :term:`Source Distribution "
"<Source Distribution (or \"sdist\")>` or :term:`Built Distribution`."
msgstr ""
"Дисковый формат : термин:`Проект`, используемый для разработки, содержащий "
"его исходный код перед упаковкой в :термин:`Источник дистрибутива <Источник "
"дистрибутива (или \"sdist\")>` или :термин:`Созданный дистрибутив`."

#: ../source/glossary.rst:241
msgid "Project Source Metadata"
msgstr "Исходные метаданные проекта"

#: ../source/glossary.rst:244
msgid ""
"Metadata defined by the package author in a :term:`Project`'s :term:`source "
"tree <Project Source Tree>`, to be transformed into :term:`Core Metadata "
"field`\\s in the :term:`Built Metadata` by the project's :term:`build "
"backend <Build Backend>`. Can be written as :term:`Pyproject Metadata`, or "
"in a tool-specific format (under the ``[tool]`` table in ``pyproject.toml``, "
"or in a tool's own configuration file)."
msgstr ""
"Метаданные, определенные автором пакета в : термин:`Проект` в :термин:"
"`дерево источников <Дерево источников проекта>`, которые должны быть "
"преобразованы в :термин:`поля основных метаданных`\\ в :термин:`Строенные "
"метаданные` бэкендом проекта :термин:`бэкенд сборки <Бэкенд сборки>`. Может "
"быть записана как : термин:`Метаданные Пайпроекта`, или в специфическом для "
"инструмента формате (в таблице ``[ Инструмент]`` в ``pyproject.toml``, или в "
"собственном конфигурационном файле инструмента)."

#: ../source/glossary.rst:254
msgid "Pure Module"
msgstr "Чистый модуль"

#: ../source/glossary.rst:257
msgid ""
"A :term:`Module` written in Python and contained in a single ``.py`` file "
"(and possibly associated ``.pyc`` and/or ``.pyo`` files)."
msgstr ""
"Модуль, написанный на языке Python и содержащийся в одном файле ``.py`` (и, "
"возможно, связанных с ним файлах ``.pyc`` и/или ``.pyo``)."

#: ../source/glossary.rst:260
msgid "Pyproject Metadata"
msgstr "Метаданные Pyproject"

#: ../source/glossary.rst:263
msgid ""
"The :term:`Project Source Metadata` format defined by the :ref:`declaring-"
"project-metadata` specification and originally introduced in :pep:`621`, "
"stored as :term:`Pyproject Metadata Key`\\s under the ``[project]`` table of "
"a :term:`pyproject.toml` file. Notably, *not* a tool-specific source "
"metadata format under the ``[tool]`` table in ``pyproject.toml``."
msgstr ""
"Формат исходных метаданных проекта, определенный спецификацией :ref:"
"`декларирования метаданных проекта` и первоначально представленный в :pep:"
"`621`, хранящийся как : термин:`Пайпроект Метаданные Ключ`\\ в таблице "
"``[ проект]`` файла : термин:`pyproject.toml`. Примечательно, что *не* "
"специфический для инструмента формат метаданных источника в таблице "
"``[ инструмент]`` в файле ``pyproject.toml``."

#: ../source/glossary.rst:271
msgid "Pyproject Metadata Key"
msgstr "Ключ метаданных Pyproject"

#: ../source/glossary.rst:274
msgid ""
"A top-level TOML key in the ``[project]`` table in ``pyproject.toml``; part "
"of the :term:`Pyproject Metadata`. Notably, distinct from a :term:`Core "
"Metadata Field`."
msgstr ""
"TOML-ключ верхнего уровня в таблице ``[[проект]`` в файле ``pyproject."
"toml``; часть : термин:``Метаданные пайпроекта``. Отличается от : термин:"
"`Поле основных метаданных`."

#: ../source/glossary.rst:278
msgid "Pyproject Metadata Subkey"
msgstr "Подключите метаданные Pyproject"

#: ../source/glossary.rst:281
msgid ""
"A second-level TOML key under a table-valued :term:`Pyproject Metadata Key`."
msgstr ""
"Ключ TOML второго уровня под табличным значением : термин:`Пайпроект Ключ "
"Метаданных`."

#: ../source/glossary.rst:284
msgid "Python Packaging Authority (PyPA)"
msgstr "Python Управление по упаковке (PyPA)"

#: ../source/glossary.rst:287
msgid ""
"PyPA is a working group that maintains many of the relevant projects in "
"Python packaging. They maintain a site at :doc:`pypa.io <pypa:index>`, host "
"projects on `GitHub <https://github.com/pypa>`_ and `Bitbucket <https://"
"bitbucket.org/pypa>`_, and discuss issues on the `distutils-sig mailing list "
"<https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ and "
"`the Python Discourse forum <https://discuss.python.org/c/packaging>`__."
msgstr ""
"PyPA - это рабочая группа, которая поддерживает множество соответствующих "
"проектов по упаковке Python. Они поддерживают сайт по адресу :doc:`pypa.io "
"<pypa:index>`, размещают проекты на `GitHub <https://github.com/pypa>`_ и "
"`Bitbucket <https://bitbucket.org/pypa>`_, а также обсуждают проблемы в "
"списке рассылки `distutils-sig <https://mail.python.org/mailman3/lists/"
"distutils-sig.python.org/>`_ и на форуме Python Discourse <https://discuss."
"python.org/c/packaging>`__."

#: ../source/glossary.rst:296
msgid "Python Package Index (PyPI)"
msgstr "Индекс пакетов Python (PyPI)"

#: ../source/glossary.rst:299
msgid ""
"`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the "
"Python community. It is open to all Python developers to consume and "
"distribute their distributions."
msgstr ""
"`PyPI <https://pypi.org>`_ является стандартным :term:`Package Index` для "
"сообщества Python. Он открыт для всех разработчиков Python для потребления и "
"распространения их дистрибутивов."

#: ../source/glossary.rst:302
msgid "pypi.org"
msgstr "pypi.org"

#: ../source/glossary.rst:305
msgid ""
"`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python "
"Package Index (PyPI)`. It replaced the legacy index domain name, ``pypi."
"python.org``, in 2017. It is powered by :ref:`warehouse`."
msgstr ""
"`pypi.org <https://pypi.org>`_ - это доменное имя для :term:`Python Package "
"Index (PyPI)`. Он заменил устаревшее доменное имя индекса, ``pypi.python."
"org``, в 2017 году. Он работает на базе :ref:`warehouse`."

#: ../source/glossary.rst:309
msgid "pyproject.toml"
msgstr "pyproject.toml"

#: ../source/glossary.rst:312
msgid ""
"The tool-agnostic :term:`Project` specification file. Defined in :pep:`518`."
msgstr ""
"Инструмент-агностик:термин: файл спецификации \"Проект\". Определен в :pep:"
"`518'."

#: ../source/glossary.rst:314
msgid "Release"
msgstr "Выпуск"

#: ../source/glossary.rst:317
msgid ""
"A snapshot of a :term:`Project` at a particular point in time, denoted by a "
"version identifier."
msgstr ""
"Снимок :term:`Project` в определенный момент времени, обозначаемый "
"идентификатором версии."

#: ../source/glossary.rst:320
msgid ""
"Making a release may entail the publishing of multiple :term:`Distributions "
"<Distribution Package>`.  For example, if version 1.0 of a project was "
"released, it could be available in both a source distribution format and a "
"Windows installer distribution format."
msgstr ""
"Создание релиза может повлечь за собой публикацию нескольких :term:"
"`Distributions <Distribution Package>`. Например, если версия 1.0 проекта "
"была выпущена, она может быть доступна как в формате распределения "
"источника, так и в формате Windows."

#: ../source/glossary.rst:325
msgid "Requirement"
msgstr "Требование"

#: ../source/glossary.rst:328
msgid ""
"A specification for a :term:`package <Distribution Package>` to be "
"installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` "
"recommended installer, allows various forms of specification that can all be "
"considered a \"requirement\". For more information, see the :ref:`pip:pip "
"install` reference."
msgstr ""
"Спецификация для устанавливаемого :term:`пакета <Distribution Package>`. :"
"ref:`pip`, рекомендуемый установщик :term:`PYPA <Python Packaging Authority "
"(PyPA)>`, допускает различные формы спецификации, которые все могут "
"считаться \"требованием\". Для получения дополнительной информации смотрите "
"ссылку :ref:`pip:pip install`."

#: ../source/glossary.rst:334
msgid "Requirement Specifier"
msgstr "Спецификатор требований"

#: ../source/glossary.rst:337
msgid ""
"A format used by :ref:`pip` to install packages from a :term:`Package "
"Index`. For an EBNF diagram of the format, see :ref:`dependency-specifiers`. "
"For example, \"foo>=1.3\" is a requirement specifier, where \"foo\" is the "
"project name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""
"Формат, используемый :ref:`pip` для установки пакетов из :term:`Package "
"Index`. EBNF диаграмму этого формата смотрите в :ref:`dependency-"
"specifiers`. Например, \"foo>=1.3\" - это спецификатор требований, где "
"\"foo\" - это имя проекта, а часть \">=1.3\" - это :term:`Version Specifier`"

#: ../source/glossary.rst:342
msgid "Requirements File"
msgstr "Требования к файлам"

#: ../source/glossary.rst:345
msgid ""
"A file containing a list of :term:`Requirements <Requirement>` that can be "
"installed using :ref:`pip`. For more information, see the :ref:`pip` docs "
"on :ref:`pip:Requirements Files`."
msgstr ""
"Файл, содержащий список :term:`Requirements <Requirement>` который может "
"быть установлен с помощью :ref:`pip'. Дополнительные сведения см. в :ref:"
"`pip'''' docs on :ref:`pip:Requirements Files`."

#: ../source/glossary.rst:349
msgid "Root License Directory"
msgstr "Каталог корневых лицензий"

#: ../source/glossary.rst:350
msgid "License Directory"
msgstr "Каталог лицензий"

#: ../source/glossary.rst:353
msgid ""
"The directory under which license files are stored in a :term:`Project "
"Source Tree`, :term:`Distribution Archive` or :term:`Installed Project`. For "
"a :term:`Project Source Tree` or :term:`Source Distribution (or \"sdist\")`, "
"this is the :term:`Project Root Directory`. For a :term:`Built Distribution` "
"or :term:`Installed Project`, this is the :file:`.dist-info/licenses/` "
"directory of the wheel archive or project folder respectively. Also, the "
"root directory that paths recorded in the ``License-File`` :term:`Core "
"Metadata Field` are relative to."
msgstr ""
"Каталог, в котором хранятся файлы лицензий в :term:`Project Source Tree`, :"
"term:`Distribution Archive` или :term:`Installed Project`. Для :term:"
"`Project Source Tree` или :term:`Source Distribution (or \"sdist\")` это :"
"term:`Project Root Directory`. Для :term:`Built Distribution` или :term:"
"`Installed Project` - это :file:`.dist-info/licenses/` каталог архива колеса "
"или папки проекта соответственно. Также это корневая директория, к которой "
"относятся пути, записанные в ``License-File`` :term:`Core Metadata Field``."

#: ../source/glossary.rst:366
#: ../source/guides/distributing-packages-using-setuptools.rst:59
msgid "setup.py"
msgstr "setup.py"

#: ../source/glossary.rst:367
#: ../source/guides/distributing-packages-using-setuptools.rst:80
msgid "setup.cfg"
msgstr "setup.cfg"

#: ../source/glossary.rst:370
msgid ""
"The project specification files for :ref:`distutils` and :ref:`setuptools`. "
"See also :term:`pyproject.toml`."
msgstr ""
"Файлы спецификаций проекта для:ref:`distutils' и :ref:`setuptools'. См. "
"также :term:`pyproject.toml'."

#: ../source/glossary.rst:373
msgid "Source Archive"
msgstr "Источник Архив"

#: ../source/glossary.rst:376
msgid ""
"An archive containing the raw source code for a :term:`Release`, prior to "
"creation of a :term:`Source Distribution <Source Distribution (or "
"\"sdist\")>` or :term:`Built Distribution`."
msgstr ""
"Архив, содержащий исходный код для :term:`Release`, до создания :term:"
"`Source Distribution <Source Distribution (или \"sdist\")>` или :term:`Built "
"Distribution`."

#: ../source/glossary.rst:380
msgid "Source Distribution (or \"sdist\")"
msgstr "Распространение исходных текстов (или \"sdist\")"

#: ../source/glossary.rst:383
msgid ""
"A :term:`distribution <Distribution Archive>` format (usually generated "
"using ``python -m build --sdist``) that provides metadata and the essential "
"source files needed for installing by a tool like :ref:`pip`, or for "
"generating a :term:`Built Distribution`. See :ref:`package-formats` for more "
"information."
msgstr ""
"Формат : термин:`дистрибутив <архив дистрибутива>` (обычно генерируется с "
"помощью ``python -m build --sdist``), который предоставляет метаданные и "
"основные исходные файлы, необходимые для установки с помощью такого "
"инструмента, как : ссылка:`pip`, или для генерации :термин:`сборка "
"дистрибутива``. Дополнительную информацию смотрите в : ссылка:`Форматы "
"пакетов`."

#: ../source/glossary.rst:389
msgid "System Package"
msgstr "Системный пакет"

#: ../source/glossary.rst:392
msgid ""
"A package provided in a format native to the operating system, e.g. an rpm "
"or dpkg file."
msgstr ""
"Пакет, предоставляемый в формате, имеющем отношение к операционной системе, "
"например, файл rpm или dpkg."

#: ../source/glossary.rst:395
msgid "Version Specifier"
msgstr "Спецификатор версии"

#: ../source/glossary.rst:398
msgid ""
"The version component of a :term:`Requirement Specifier`. For example, the "
"\">=1.3\" portion of \"foo>=1.3\".  Read the :ref:`Version specifier "
"specification <version-specifiers>` for a full description of the specifiers "
"that Python packaging currently supports.  Support for this specification "
"was implemented in :ref:`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""
"Компонент версии :термин: \" спецификатор запросов \" . Например, \">=1.3\" "
"части \"foo>=1.3\". Прочтите :ref:`Version спецификатор <version-"
"спецификаторы>` для полного описания спецификаторов, которые Python в "
"настоящее время поддерживаются. Поддержка этой спецификации была реализована "
"в :ref:`setuptools` v8.0 и :ref:`pip` v6.0."

#: ../source/glossary.rst:403
msgid "Virtual Environment"
msgstr "Виртуальная среда"

#: ../source/glossary.rst:406
msgid ""
"An isolated Python environment that allows packages to be installed for use "
"by a particular application, rather than being installed system wide. For "
"more information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"Изолированная среда Python, которая позволяет устанавливать пакеты для "
"использования конкретным приложением, а не устанавливать их в масштабах всей "
"системы. Для получения дополнительной информации см. раздел :ref:`Создание и "
"использование виртуальных сред`."

#: ../source/glossary.rst:411
msgid "Wheel Format"
msgstr "Формат колеса"

#: ../source/glossary.rst:412
msgid "Wheel"
msgstr "Колесо"

#: ../source/glossary.rst:415
msgid ""
"The standard :term:`Built Distribution` format originally introduced in :pep:"
"`427` and defined by the :ref:`binary-distribution-format` specification. "
"See :ref:`package-formats` for more information. Not to be confused with its "
"reference implementation, the :term:`Wheel Project`."
msgstr ""
"Стандартный формат : термин:`Созданный дистрибутив`, первоначально "
"представленный в :pep:`427` и определенный спецификацией : ссылка:`binary-"
"distribution-format`. Дополнительную информацию см. в : ссылка:`пакетные "
"форматы`. Не путать с его эталонной реализацией, : термин:``Колесо проекта``."

#: ../source/glossary.rst:422
msgid "Wheel Project"
msgstr "Проект Колесо"

#: ../source/glossary.rst:425
msgid ""
"The PyPA reference implementation of the :term:`Wheel Format`; see :ref:"
"`wheel`."
msgstr ""
"Эталонная реализация PyPA формата : термин:`Формат колеса`; см. : ссылка:"
"`колесо`."

#: ../source/glossary.rst:427
msgid "Working Set"
msgstr "Рабочая группа"

#: ../source/glossary.rst:430
msgid ""
"A collection of :term:`distributions <Distribution Package>` available for "
"importing. These are the distributions that are on the `sys.path` variable. "
"At most, one :term:`Distribution <Distribution Package>` for a project is "
"possible in a working set."
msgstr ""
"Коллекция :term:`дистрибутивов <Distribution Package>`, доступных для "
"импорта. Это дистрибутивы, которые находятся в переменной `sys.path. В "
"рабочем наборе возможен максимум один :term:`Distribution <Distribution "
"Package>` для проекта."

#: ../source/guides/analyzing-pypi-package-downloads.rst:5
msgid "Analyzing PyPI package downloads"
msgstr "Анализ загрузок пакетов с PyPI"

#: ../source/guides/analyzing-pypi-package-downloads.rst:7
msgid ""
"This section covers how to use the public PyPI download statistics dataset "
"to learn more about downloads of a package (or packages) hosted on PyPI. For "
"example, you can use it to discover the distribution of Python versions used "
"to download a package."
msgstr ""
"Этот раздел охватывает, как использовать публичный набор данных статистики "
"загрузки PyPI, чтобы узнать больше о загрузках пакета (или пакетов), "
"размещенного на PyPI. Например, вы можете использовать его для обнаружения "
"распространения версий Python, используемых для загрузки пакета."

#: ../source/guides/analyzing-pypi-package-downloads.rst:14
#: ../source/guides/supporting-windows-using-appveyor.rst:17
msgid "Background"
msgstr "Фон"

#: ../source/guides/analyzing-pypi-package-downloads.rst:16
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr "PyPI не отображает статистику загрузки по ряду причин: [#]_"

#: ../source/guides/analyzing-pypi-package-downloads.rst:18
msgid ""
"**Inefficient to make work with a Content Distribution Network (CDN):** "
"Download statistics change constantly. Including them in project pages, "
"which are heavily cached, would require invalidating the cache more often, "
"and reduce the overall effectiveness of the cache."
msgstr ""
"**Неэффективно работать с сетью распространения контента (CDN):** Загрузка "
"статистики меняется постоянно. Включение их в страницы проекта, которые "
"сильно кэшируются, потребует более частой аннулирования кэша и снижения "
"общей эффективности кэша."

#: ../source/guides/analyzing-pypi-package-downloads.rst:23
msgid ""
"**Highly inaccurate:** A number of things prevent the download counts from "
"being accurate, some of which include:"
msgstr ""
"**Очень неточно:** Некоторые вещи не позволяют считать загрузку точной, "
"некоторые из которых включают:"

#: ../source/guides/analyzing-pypi-package-downloads.rst:26
msgid "``pip``'s download cache (lowers download counts)"
msgstr "``pip`` кэш загрузки (считывает количество загрузок)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:27
msgid ""
"Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""
"Внутренние или неофициальные зеркала (могут как поднять, так и снизить "
"количество загрузок)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:28
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr "Пакеты, не размещенные на PyPI (для сравнения)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:29
msgid ""
"Unofficial scripts or attempts at download count inflation (raises download "
"counts)"
msgstr ""
"Неофициальные скрипты или попытки скачать подсчет инфляции (изобличает "
"количество загрузок)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:31
msgid "Known historical data quality issues (lowers download counts)"
msgstr ""
"Известные исторические проблемы качества данных (низкие числа загрузок)"

#: ../source/guides/analyzing-pypi-package-downloads.rst:33
msgid ""
"**Not particularly useful:** Just because a project has been downloaded a "
"lot doesn't mean it's good; Similarly just because a project hasn't been "
"downloaded a lot doesn't mean it's bad!"
msgstr ""
"** Не особенно полезно:** То, что проект был загружен очень много, не "
"означает, что он хорош; Точно так же только потому, что проект не был "
"загружен много, не означает, что это плохо!"

#: ../source/guides/analyzing-pypi-package-downloads.rst:37
msgid ""
"In short, because its value is low for various reasons, and the tradeoffs "
"required to make it work are high, it has been not an effective use of "
"limited resources."
msgstr ""
"Короче говоря, поскольку его стоимость является низкой по различным "
"причинам, а компромиссы, необходимые для его работы, высоки, это не было "
"эффективным использованием ограниченных ресурсов."

#: ../source/guides/analyzing-pypi-package-downloads.rst:42
msgid "Public dataset"
msgstr "Набор данных"

#: ../source/guides/analyzing-pypi-package-downloads.rst:44
msgid ""
"As an alternative, the `Linehaul project <https://github.com/pypa/linehaul-"
"cloud-function/>`__ streams download logs from PyPI to `Google BigQuery`_ "
"[#]_, where they are stored as a public dataset."
msgstr ""
"<https://github.com/pypa/linehaul-cloud- function/>`__ потоков загружает "
"журналы от PyPI до `Google BigQuery`_ [#]_, где они хранятся в виде набора "
"общедоступных данных."

#: ../source/guides/analyzing-pypi-package-downloads.rst:49
msgid "Getting set up"
msgstr "Подготовка к работе"

#: ../source/guides/analyzing-pypi-package-downloads.rst:51
msgid ""
"In order to use `Google BigQuery`_ to query the `public PyPI download "
"statistics dataset`_, you'll need a Google account and to enable the "
"BigQuery API on a Google Cloud Platform project. You can run up to 1TB of "
"queries per month `using the BigQuery free tier without a credit card "
"<https://cloud.google.com/blog/products/data-analytics/query-without-a-"
"credit-card-introducing-bigquery-sandbox>`__"
msgstr ""
"Для того, чтобы использовать `Google BigQuery`_ для запроса 'публичной PyPI "
"загрузки статистических данных `_, вам понадобится учетная запись Google и "
"включить API BigQuery в проект Google Cloud Platform. <https://cloud.google."
"com/blog/products/data-analytics/query- without-a-credit-card-introducing-"
"bigquery-sandbox>`__"

#: ../source/guides/analyzing-pypi-package-downloads.rst:57
msgid "Navigate to the `BigQuery web UI`_."
msgstr "Перейдите к `BigQuery web UI`_."

#: ../source/guides/analyzing-pypi-package-downloads.rst:58
msgid "Create a new project."
msgstr "Создайте новый проект."

#: ../source/guides/analyzing-pypi-package-downloads.rst:59
msgid ""
"Enable the `BigQuery API <https://console.developers.google.com/apis/library/"
"bigquery-json.googleapis.com>`__."
msgstr ""
"Включить `BigQuery API <https://console.developers.google.com/apis/library/"
"bigquery-json.googleapis.com>`__."

#: ../source/guides/analyzing-pypi-package-downloads.rst:62
msgid ""
"For more detailed instructions on how to get started with BigQuery, check "
"out the `BigQuery quickstart guide <https://cloud.google.com/bigquery/docs/"
"quickstarts/quickstart-web-ui>`__."
msgstr ""
"Для более подробных инструкций о том, как начать работу с BigQuery, "
"ознакомьтесь с `BigQuery Руководством по ускоренному запуску <https://cloud."
"google.com/bigquery/docs/quickstarts/quickstart-web-ui>`__."

#: ../source/guides/analyzing-pypi-package-downloads.rst:68
msgid "Data schema"
msgstr "Схема данных"

#: ../source/guides/analyzing-pypi-package-downloads.rst:70
msgid ""
"Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` "
"table for each download. The table contains information about what file was "
"downloaded and how it was downloaded. Some useful columns from the `table "
"schema <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-"
"data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""
"Linehaul пишет запись в таблице ``bigquery-public-data.pypi.file_downloads`` "
"для каждой загрузки. В таблице содержится информация о том, какой файл был "
"загружен и как он был загружен. Некоторые полезные столбцы из «табличной "
"схемы <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-"
"data&d=pypi&t=file_downloads&page=table>`__ включить:"

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
msgid "Column"
msgstr "Колонка"

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
#: ../source/specifications/core-metadata.rst:206
#: ../source/specifications/well-known-project-urls.rst:106
msgid "Description"
msgstr "Описание"

#: ../source/guides/analyzing-pypi-package-downloads.rst:77
#: ../source/specifications/dependency-groups.rst:23
#: ../source/specifications/dependency-specifiers.rst:29
#: ../source/specifications/direct-url-data-structure.rst:242
#: ../source/specifications/version-specifiers.rst:1072
msgid "Examples"
msgstr "Примеры"

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "timestamp"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "Date and time"
msgstr "Дата и время"

#: ../source/guides/analyzing-pypi-package-downloads.rst:79
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "file.project"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "Project name"
msgstr "Название проекта"

#: ../source/guides/analyzing-pypi-package-downloads.rst:81
msgid "``pipenv``, ``nose``"
msgstr "``pipenv``, ``nose``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "file.version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "Package version"
msgstr "Версия пакета"

#: ../source/guides/analyzing-pypi-package-downloads.rst:83
msgid "``0.1.6``, ``1.4.2``"
msgstr "``0.1.6``, ``1.4.2``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "details.installer.name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "Installer"
msgstr "Установщик"

#: ../source/guides/analyzing-pypi-package-downloads.rst:85
msgid "pip, :ref:`bandersnatch`"
msgstr "pip, :ref:`bandersnatch`"

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "details.python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "Python version"
msgstr "Версия Python"

#: ../source/guides/analyzing-pypi-package-downloads.rst:87
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:92
msgid "Useful queries"
msgstr "Полезные запросы"

#: ../source/guides/analyzing-pypi-package-downloads.rst:94
msgid ""
"Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" "
"button."
msgstr ""
"Запустить запросы в `BigQuery веб-UI`_, нажав на кнопку \"Compose request\"."

#: ../source/guides/analyzing-pypi-package-downloads.rst:96
msgid ""
"Note that the rows are stored in a partitioned table, which helps limit the "
"cost of queries. These example queries analyze downloads from recent history "
"by filtering on the ``timestamp`` column."
msgstr ""
"Обратите внимание, что строки хранятся в разделенной таблице, что помогает "
"ограничить стоимость запросов. Эти примеры запросов анализируют загрузки из "
"недавней истории путем фильтрации на столбце ``timestamp``."

#: ../source/guides/analyzing-pypi-package-downloads.rst:101
msgid "Counting package downloads"
msgstr "Подсчёт количества загрузок пакетов"

#: ../source/guides/analyzing-pypi-package-downloads.rst:103
msgid ""
"The following query counts the total number of downloads for the project "
"\"pytest\"."
msgstr ""
"В следующем запросе учитывается общее количество загрузок для проекта "
"«pytest."

#: ../source/guides/analyzing-pypi-package-downloads.rst:118
#: ../source/guides/analyzing-pypi-package-downloads.rst:139
#: ../source/guides/analyzing-pypi-package-downloads.rst:167
#: ../source/guides/analyzing-pypi-package-downloads.rst:204
msgid "num_downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:120
msgid "26190085"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:123
msgid ""
"To count downloads from pip only, filter on the ``details.installer.name`` "
"column."
msgstr ""
"Чтобы подсчитать загрузки только из pip, отфильтруйте столбец ``details."
"installer.name``."

#: ../source/guides/analyzing-pypi-package-downloads.rst:141
msgid "24334215"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:145
msgid "Package downloads over time"
msgstr "Загрузки пакетов с течением времени"

#: ../source/guides/analyzing-pypi-package-downloads.rst:147
msgid ""
"To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also "
"filtering by this column reduces corresponding costs."
msgstr ""
"Для группировки по месячным загрузкам используйте функцию "
"``TIMESTAMP_TRUNC``. Также фильтрация по этому столбцу снижает "
"соответствующие расходы."

#: ../source/guides/analyzing-pypi-package-downloads.rst:167
msgid "month"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:169
msgid "1956741"
msgstr "1956741"

#: ../source/guides/analyzing-pypi-package-downloads.rst:169
msgid "2018-01-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:171
msgid "2344692"
msgstr "2344692"

#: ../source/guides/analyzing-pypi-package-downloads.rst:171
msgid "2017-12-01"
msgstr "2017-12-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:173
msgid "1730398"
msgstr "1730398"

#: ../source/guides/analyzing-pypi-package-downloads.rst:173
msgid "2017-11-01"
msgstr "2017-11-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:175
msgid "2047310"
msgstr "2047310"

#: ../source/guides/analyzing-pypi-package-downloads.rst:175
msgid "2017-10-01"
msgstr "2017-10-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:177
msgid "1744443"
msgstr "1744443"

#: ../source/guides/analyzing-pypi-package-downloads.rst:177
msgid "2017-09-01"
msgstr "2017-09-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:179
msgid "1916952"
msgstr "1916952"

#: ../source/guides/analyzing-pypi-package-downloads.rst:179
msgid "2017-08-01"
msgstr "2017-08-01"

#: ../source/guides/analyzing-pypi-package-downloads.rst:183
msgid "Python versions over time"
msgstr "Python версии с течением времени"

#: ../source/guides/analyzing-pypi-package-downloads.rst:185
msgid ""
"Extract the Python version from the ``details.python`` column. Warning: This "
"query processes over 500 GB of data."
msgstr ""
"Исключить Python версию из колонки ``details.python``. Предупреждение: Этот "
"запрос обрабатывает 500 ГБ данных."

#: ../source/guides/analyzing-pypi-package-downloads.rst:204
msgid "python"
msgstr "python"

#: ../source/guides/analyzing-pypi-package-downloads.rst:206
msgid "3.7"
msgstr "3.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:206
msgid "18051328726"
msgstr "18051328726"

#: ../source/guides/analyzing-pypi-package-downloads.rst:208
msgid "3.6"
msgstr "3.6"

#: ../source/guides/analyzing-pypi-package-downloads.rst:208
msgid "9635067203"
msgstr "9635067203"

#: ../source/guides/analyzing-pypi-package-downloads.rst:210
msgid "3.8"
msgstr "3.8"

#: ../source/guides/analyzing-pypi-package-downloads.rst:210
msgid "7781904681"
msgstr "7781904681"

#: ../source/guides/analyzing-pypi-package-downloads.rst:212
msgid "2.7"
msgstr "2.7"

#: ../source/guides/analyzing-pypi-package-downloads.rst:212
msgid "6381252241"
msgstr "6381252241"

#: ../source/guides/analyzing-pypi-package-downloads.rst:214
msgid "null"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:214
msgid "2026630299"
msgstr "2026630299"

#: ../source/guides/analyzing-pypi-package-downloads.rst:216
msgid "3.5"
msgstr "3.5"

#: ../source/guides/analyzing-pypi-package-downloads.rst:216
msgid "1894153540"
msgstr "1894153540"

#: ../source/guides/analyzing-pypi-package-downloads.rst:221
msgid "Getting absolute links to artifacts"
msgstr "Получение абсолютной связи с артефактами"

#: ../source/guides/analyzing-pypi-package-downloads.rst:223
msgid ""
"It's sometimes helpful to be able to get the absolute links to download "
"artifacts from PyPI based on their hashes, e.g. if a particular project or "
"release has been deleted from PyPI. The metadata table includes the ``path`` "
"column, which includes the hash and artifact filename."
msgstr ""
"Иногда полезно иметь возможность получить абсолютные ссылки на загрузку "
"артефактов из PyPI на основе их хэшей, например, если определенный проект "
"или релиз был удален из PyPI. В таблице метаданных есть колонка ``path'', "
"которая включает в себя хэш и имя файла артефакта."

#: ../source/guides/analyzing-pypi-package-downloads.rst:229
msgid ""
"The URL generated here is not guaranteed to be stable, but currently aligns "
"with the URL where PyPI artifacts are hosted."
msgstr ""
"Не гарантируется, что сгенерированный здесь URL будет стабильным, но в "
"настоящее время он совпадает с URL, на котором размещены артефакты PyPI."

#: ../source/guides/analyzing-pypi-package-downloads.rst:242
msgid "url"
msgstr "url"

#: ../source/guides/analyzing-pypi-package-downloads.rst:244
msgid ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/packages/"
"eb/45/79be82bdeafcecb9dca474cad4003e32ef8e4a0dec6abbd4145ccb02abe1/"
"sampleproject-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:246
msgid ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/"
"packages/56/0a/178e8bbb585ec5b13af42dae48b1d7425d6575b3ff9b02e5ec475e38e1d6/"
"sampleproject_nomura-1.2.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:248
msgid ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/63/88/3200eeaf22571f18d2c41e288862502e33365ccbdc12b892db23f51f8e70/"
"sampleproject_nomura-1.2.0.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:250
msgid ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"
msgstr ""
"https://files.pythonhosted.org/packages/21/"
"e9/2743311822e71c0756394b6c5ab15cb64ca66c78c6c6a5cd872c9ed33154/"
"sampleproject_doubleyoung18-1.3.0-py2.py3-none-any.whl"

#: ../source/guides/analyzing-pypi-package-downloads.rst:252
msgid ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"
msgstr ""
"https://files.pythonhosted.org/"
"packages/6f/5b/2f3fe94e1c02816fe23c7ceee5292fb186912929e1972eee7fb729fa27af/"
"sampleproject-1.3.1.tar.gz"

#: ../source/guides/analyzing-pypi-package-downloads.rst:257
msgid "Caveats"
msgstr "Оговорки"

#: ../source/guides/analyzing-pypi-package-downloads.rst:259
msgid ""
"In addition to the caveats listed in the background above, Linehaul suffered "
"from a bug which caused it to significantly under-report download statistics "
"prior to July 26, 2018. Downloads before this date are proportionally "
"accurate (e.g. the percentage of Python 2 vs. Python 3 downloads) but total "
"numbers are lower than actual by an order of magnitude."
msgstr ""
"В дополнение к предостережениям, перечисленным выше, Linehaul страдает от "
"ошибки, из-за которой он значительно занижает статистику загрузок до 26 июля "
"2018 года. Количество загрузок до этой даты пропорционально точно (например, "
"процентное соотношение загрузок Python 2 и Python 3), но общее количество на "
"порядок ниже фактического."

#: ../source/guides/analyzing-pypi-package-downloads.rst:267
msgid "Additional tools"
msgstr "Дополнительные инструменты"

#: ../source/guides/analyzing-pypi-package-downloads.rst:269
msgid ""
"Besides using the BigQuery console, there are some additional tools which "
"may be useful when analyzing download statistics."
msgstr ""
"Помимо использования консоли BigQuery, есть несколько дополнительных "
"инструментов, которые могут быть полезны при анализе статистики загрузок."

#: ../source/guides/analyzing-pypi-package-downloads.rst:273
msgid "``google-cloud-bigquery``"
msgstr "``google-cloud-bigquery``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:275
msgid ""
"You can also access the public PyPI download statistics dataset "
"programmatically via the BigQuery API and the `google-cloud-bigquery`_ "
"project, the official Python client library for BigQuery."
msgstr ""
"Вы также можете получить доступ к публичному набору данных статистики "
"загрузок PyPI программным путем через BigQuery API и проект `google-cloud-"
"bigquery`_, официальную клиентскую библиотеку Python для BigQuery."

#: ../source/guides/analyzing-pypi-package-downloads.rst:303
msgid "``pypinfo``"
msgstr "``pypinfo``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:305
msgid ""
"`pypinfo`_ is a command-line tool which provides access to the dataset and "
"can generate several useful queries. For example, you can query the total "
"number of download for a package with the command ``pypinfo package_name``."
msgstr ""
"`pypinfo`_ - это инструмент командной строки, который предоставляет доступ к "
"набору данных и может генерировать несколько полезных запросов. Например, вы "
"можете запросить общее количество загрузок для пакета с помощью команды "
"``pypinfo package_name``."

#: ../source/guides/analyzing-pypi-package-downloads.rst:309
msgid "Install `pypinfo`_ using pip."
msgstr "Установите `pypinfo`_ через :program:`pip`."

#: ../source/guides/analyzing-pypi-package-downloads.rst:315
msgid "Usage:"
msgstr "Использование:"

#: ../source/guides/analyzing-pypi-package-downloads.rst:331
msgid "``pandas-gbq``"
msgstr "``pandas-gbq``"

#: ../source/guides/analyzing-pypi-package-downloads.rst:333
msgid ""
"The `pandas-gbq`_ project allows for accessing query results via `Pandas`_."
msgstr ""
"Проект `pandas-gbq`_ позволяет получать доступ к результатам запросов через "
"`Pandas`_."

#: ../source/guides/analyzing-pypi-package-downloads.rst:337
#: ../source/specifications/dependency-specifiers.rst:535
msgid "References"
msgstr "Ссылка"

#: ../source/guides/analyzing-pypi-package-downloads.rst:339
msgid ""
"`PyPI Download Counts deprecation email <https://mail.python.org/pipermail/"
"distutils-sig/2013-May/020855.html>`__"
msgstr ""
"`PyPI Скачать Counts deprecation email <https://mail.python.org/pipermail/"
"distutils-sig/2013-May/020855.html>`__"

#: ../source/guides/analyzing-pypi-package-downloads.rst:340
msgid ""
"`PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/"
"distutils-sig/2016-May/028986.html>`__"
msgstr ""
"Сообщение об анонсе набора данных PyPI BigQuery по электронной почте "
"<https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__"

#: ../source/guides/creating-and-discovering-plugins.rst:3
msgid "Creating and discovering plugins"
msgstr "Создание и обнаружение плагинов"

#: ../source/guides/creating-and-discovering-plugins.rst:5
msgid ""
"Often when creating a Python application or library you'll want the ability "
"to provide customizations or extra features via **plugins**. Because Python "
"packages can be separately distributed, your application or library may want "
"to automatically **discover** all of the plugins available."
msgstr ""
"Часто при создании приложений или библиотек на Python вы хотите иметь "
"возможность предоставлять настройки или дополнительные возможности с помощью "
"**плагинов**. Поскольку пакеты Python могут распространяться отдельно, ваше "
"приложение или библиотека могут захотеть автоматически **обнаружить** все "
"доступные плагины."

#: ../source/guides/creating-and-discovering-plugins.rst:10
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr ""
"Существует три основных подхода к автоматическому обнаружению плагинов:"

#: ../source/guides/creating-and-discovering-plugins.rst:12
msgid "`Using naming convention`_."
msgstr "`Использование соглашения об именах`_."

#: ../source/guides/creating-and-discovering-plugins.rst:13
msgid "`Using namespace packages`_."
msgstr "`Использование пакетов пространства имён`_."

#: ../source/guides/creating-and-discovering-plugins.rst:14
msgid "`Using package metadata`_."
msgstr "`Использование метаданных пакета`_."

#: ../source/guides/creating-and-discovering-plugins.rst:18
msgid "Using naming convention"
msgstr "Использование соглашения об именах"

#: ../source/guides/creating-and-discovering-plugins.rst:20
msgid ""
"If all of the plugins for your application follow the same naming "
"convention, you can use :func:`pkgutil.iter_modules` to discover all of the "
"top-level modules that match the naming convention. For example, `Flask`_ "
"uses the naming convention ``flask_{plugin_name}``. If you wanted to "
"automatically discover all of the Flask plugins installed:"
msgstr ""
"Если все плагины вашего приложения имеют одинаковые имена, вы можете "
"использовать :func:`pkgutil.iter_modules` для поиска всех модулей верхнего "
"уровня, которые соответствуют этому соглашению. Например, `Flask`_ "
"использует соглашение об именовании ``flask_{plugin_name}``. Если вы хотите "
"автоматически обнаружить все установленные плагины Flask:"

#: ../source/guides/creating-and-discovering-plugins.rst:38
msgid ""
"If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins "
"installed then ``discovered_plugins`` would be:"
msgstr ""
"Если у вас установлены оба плагина `Flask-SQLAlchemy`_ и `Flask-Talisman`_, "
"то ``discovered_plugins`` будет иметь вид:"

#: ../source/guides/creating-and-discovering-plugins.rst:48
msgid ""
"Using naming convention for plugins also allows you to query the Python "
"Package Index's :ref:`simple repository API <simple-repository-api>` for all "
"packages that conform to your naming convention."
msgstr ""
"Использование соглашения об именовании для плагинов также позволяет "
"запрашивать у Python Package Index :ref:`simple repository API <simple-"
"repository-api>` все пакеты, которые соответствуют вашему соглашению об "
"именовании."

#: ../source/guides/creating-and-discovering-plugins.rst:58
msgid "Using namespace packages"
msgstr "Использование пакетов пространства имён"

#: ../source/guides/creating-and-discovering-plugins.rst:60
msgid ""
":doc:`Namespace packages <packaging-namespace-packages>` can be used to "
"provide a convention for where to place plugins and also provides a way to "
"perform discovery. For example, if you make the sub-package ``myapp."
"plugins`` a namespace package then other :term:`distributions <Distribution "
"Package>` can provide modules and packages to that namespace. Once "
"installed, you can use :func:`pkgutil.iter_modules` to discover all modules "
"and packages installed under that namespace:"
msgstr ""
":doc:`Пакеты пространства имен <пакеты-пространства имен>` могут быть "
"использованы для обеспечения соглашения о том, где размещать плагины, а "
"также обеспечивают способ обнаружения. Например, если вы сделаете подпакет "
"``myapp.plugins`` пакетом пространства имен, то другие :term:``дистрибутивы "
"<Distribution Package>`` смогут предоставлять модули и пакеты для этого "
"пространства имен. После установки вы можете использовать :func:`pkgutil."
"iter_modules` для обнаружения всех модулей и пакетов, установленных под этим "
"пространством имен:"

#: ../source/guides/creating-and-discovering-plugins.rst:88
msgid ""
"Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` "
"causes it to only look for the modules directly under that namespace. For "
"example, if you have installed distributions that provide the modules "
"``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` in "
"this case would be:"
msgstr ""
"Указание ``myapp.plugins.__path__`` в :func:`~pkgutil.iter_modules`` "
"заставляет его искать только те модули, которые находятся непосредственно в "
"этом пространстве имен. Например, если у вас установлены дистрибутивы, "
"предоставляющие модули ``myapp.plugins.a`` и ``myapp.plugins.b``, то "
"``discovered_plugins`` в этом случае будет:"

#: ../source/guides/creating-and-discovering-plugins.rst:100
msgid ""
"This sample uses a sub-package as the namespace package (``myapp.plugins``), "
"but it's also possible to use a top-level package for this purpose (such as "
"``myapp_plugins``). How to pick the namespace to use is a matter of "
"preference, but it's not recommended to make your project's main top-level "
"package (``myapp`` in this case) a namespace package for the purpose of "
"plugins, as one bad plugin could cause the entire namespace to break which "
"would in turn make your project unimportable. For the \"namespace sub-"
"package\" approach to work, the plugin packages must omit the :file:"
"`__init__.py` for your top-level package directory (``myapp`` in this case) "
"and include the namespace-package style :file:`__init__.py` in the namespace "
"sub-package directory (``myapp/plugins``).  This also means that plugins "
"will need to explicitly pass a list of packages to :func:`setup`'s "
"``packages`` argument instead of using :func:`setuptools.find_packages`."
msgstr ""
"В этом примере в качестве пакета пространства имен используется подпакет "
"(``myapp.plugins``), но можно также использовать для этой цели пакет "
"верхнего уровня (например, ``myapp_plugins``). Выбор пространства имен - это "
"вопрос предпочтений, но не рекомендуется делать основной пакет верхнего "
"уровня вашего проекта (``myapp`` в данном случае) пакетом пространства имен "
"для плагинов, так как один плохой плагин может привести к поломке всего "
"пространства имен, что в свою очередь сделает ваш проект неимпортируемым. "
"Чтобы подход \"namespace sub-package\" работал, пакеты плагинов должны "
"опускать :file:`__init__.py` для каталога пакета верхнего уровня (``myapp`` "
"в данном случае) и включать стиль namespace-package :file:`__init__.py` в "
"каталог namespace sub-package (``myapp/plugins``).  Это также означает, что "
"плагины должны будут явно передавать список пакетов в аргумент ``packages`` "
"в :func:`setup``, а не использовать :func:`setuptools.find_packages``."

#: ../source/guides/creating-and-discovering-plugins.rst:114
msgid ""
"Namespace packages are a complex feature and there are several different "
"ways to create them. It's highly recommended to read the :doc:`packaging-"
"namespace-packages` documentation and clearly document which approach is "
"preferred for plugins to your project."
msgstr ""
"Пакеты пространства имен - сложная функция, и существует несколько различных "
"способов их создания. Настоятельно рекомендуется прочитать документацию :doc:"
"`packaging-namespace-packages` и четко документировать, какой подход "
"предпочтителен для плагинов вашего проекта."

#: ../source/guides/creating-and-discovering-plugins.rst:122
msgid "Using package metadata"
msgstr "Использование метаданных пакета"

#: ../source/guides/creating-and-discovering-plugins.rst:124
msgid ""
"Packages can have metadata for plugins described in the :ref:`entry-points`. "
"By specifying them, a package announces that it contains a specific kind of "
"plugin. Another package supporting this kind of plugin can use the metadata "
"to discover that plugin."
msgstr ""
"Пакеты могут иметь метаданные для плагинов, описанные в :ref:`entry-points`. "
"Указывая их, пакет сообщает, что он содержит определенный тип плагина. "
"Другой пакет, поддерживающий этот тип плагина, может использовать метаданные "
"для обнаружения этого плагина."

#: ../source/guides/creating-and-discovering-plugins.rst:128
msgid ""
"For example if you have a package named ``myapp-plugin-a`` and it includes "
"the following in its ``pyproject.toml``:"
msgstr ""
"Например, если у вас есть пакет с именем ``myapp-plugin-a`` и он включает "
"следующее в свой ``pyproject.toml``:"

#: ../source/guides/creating-and-discovering-plugins.rst:136
msgid ""
"Then you can discover and load all of the registered entry points by using :"
"func:`importlib.metadata.entry_points` (or the backport_ "
"``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""
"Затем вы можете обнаружить и загрузить все зарегистрированные точки входа, "
"используя :func:`importlib.metadata.entry_points` (или backport_ "
"``importlib_metadata >= 3.6`` для Python 3.6-3.9):"

#: ../source/guides/creating-and-discovering-plugins.rst:151
msgid ""
"In this example, ``discovered_plugins`` would be a collection of type :class:"
"`importlib.metadata.EntryPoint`:"
msgstr ""
"В этом примере ``discovered_plugins`` будет коллекцией типа :class:"
"`importlib.metadata.EntryPoint``:"

#: ../source/guides/creating-and-discovering-plugins.rst:160
msgid ""
"Now the module of your choice can be imported by executing "
"``discovered_plugins['a'].load()``."
msgstr ""
"Теперь выбранный вами модуль можно импортировать, выполнив команду "
"``discovered_plugins['a'].load()``."

#: ../source/guides/creating-and-discovering-plugins.rst:163
msgid ""
"The ``entry_point`` specification in :file:`setup.py` is fairly flexible and "
"has a lot of options. It's recommended to read over the entire section on :"
"doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""
"Спецификация ``точки входа`` в :file:`setup.py` довольно гибкая и имеет "
"множество опций. Рекомендуется прочитать весь раздел по :doc:``точкам входа "
"<setuptools:userguide/entry_point>` ."

#: ../source/guides/creating-and-discovering-plugins.rst:167
msgid ""
"Since this specification is part of the :doc:`standard library <python:"
"library/importlib.metadata>`, most packaging tools other than setuptools "
"provide support for defining entry points."
msgstr ""
"Поскольку эта спецификация является частью :doc:`стандартной библиотеки "
"<python:library/importlib.metadata>`, большинство инструментов упаковки, "
"кроме setuptools, обеспечивают поддержку определения точек входа."

#: ../source/guides/creating-command-line-tools.rst:5
msgid "Creating and packaging command-line tools"
msgstr "Создание и упаковка инструментов командной строки"

#: ../source/guides/creating-command-line-tools.rst:7
#, fuzzy
#| msgid ""
#| "This guide will walk you through creating and packaging a standalone "
#| "command-line application that can be installed with :ref:`pipx`, a tool "
#| "creating and managing :term:`Python Virtual Environments <Virtual "
#| "Environment>` and exposing the executable scripts of packages (and "
#| "available manual pages) for use on the command-line."
msgid ""
"This guide will walk you through creating and packaging a standalone command-"
"line application that can be installed with :ref:`pipx`, a tool for creating "
"and managing :term:`Python Virtual Environments <Virtual Environment>` and "
"exposing the executable scripts of packages (and available manual pages) for "
"use on the command-line."
msgstr ""
"Это руководство поможет вам создать и упаковать автономное приложение "
"командной строки, которое можно установить с помощью :ref:`pipx`, "
"инструмента для создания и управления :term:`Python Virtual Environments "
"<Virtual Environment>` и предоставления исполняемых скриптов пакетов (и "
"доступных страниц руководства) для использования в командной строке."

#: ../source/guides/creating-command-line-tools.rst:12
msgid "Creating the package"
msgstr "Создание пакета"

#: ../source/guides/creating-command-line-tools.rst:14
msgid ""
"First of all, create a source tree for the :term:`project <Project>`. For "
"the sake of an example, we'll build a simple tool outputting a greeting (a "
"string) for a person based on arguments given on the command-line."
msgstr ""
"Прежде всего, создайте дерево исходных текстов для :term:`project "
"<Project>`. Для примера мы создадим простой инструмент, выводящий "
"приветствие (строку) для человека на основе аргументов, заданных в командной "
"строке."

#: ../source/guides/creating-command-line-tools.rst:17
#: ../source/guides/tool-recommendations.rst:45
msgid "Todo"
msgstr "Todo"

#: ../source/guides/creating-command-line-tools.rst:17
msgid ""
"Advise on the optimal structure of a Python package in another guide or "
"discussion and link to it here."
msgstr ""
"Посоветуйте оптимальную структуру пакета Python в другом руководстве или "
"обсуждении и дайте на него ссылку здесь."

#: ../source/guides/creating-command-line-tools.rst:19
msgid ""
"This project will adhere to :ref:`src-layout <src-layout-vs-flat-layout>` "
"and in the end be alike this file tree, with the top-level folder and "
"package name ``greetings``:"
msgstr ""
"Этот проект будет придерживаться :ref:`src-layout <src-layout-vs-flat-"
"layout>` и в итоге будет похож на это дерево файлов, с папкой верхнего "
"уровня и именем пакета ``greetings``:"

#: ../source/guides/creating-command-line-tools.rst:33
msgid ""
"The actual code responsible for the tool's functionality will be stored in "
"the file :file:`greet.py`, named after the main module:"
msgstr ""
"Собственно код, отвечающий за функциональность инструмента, будет храниться "
"в файле :file:`greet.py`, названном в честь основного модуля:"

#: ../source/guides/creating-command-line-tools.rst:62
msgid ""
"The above function receives several keyword arguments that determine how the "
"greeting to output is constructed. Now, construct the command-line interface "
"to provision it with the same, which is done in :file:`cli.py`:"
msgstr ""
"Приведенная выше функция получает несколько аргументов-ключей, которые "
"определяют, как будет построено приветствие для вывода. Теперь "
"сконструируйте интерфейс командной строки, чтобы обеспечить его тем же "
"самым, что делается в :file:`cli.py`:"

#: ../source/guides/creating-command-line-tools.rst:80
msgid ""
"The command-line interface is built with typer_, an easy-to-use CLI parser "
"based on Python type hints. It provides auto-completion and nicely styled "
"command-line help out of the box. Another option would be :py:mod:"
"`argparse`, a command-line parser which is included in Python's standard "
"library. It is sufficient for most needs, but requires a lot of code, "
"usually in ``cli.py``, to function properly. Alternatively, docopt_ makes it "
"possible to create CLI interfaces based solely on docstrings; advanced users "
"are encouraged to make use of click_ (on which ``typer`` is based)."
msgstr ""
"Интерфейс командной строки построен с помощью typer_, простого в "
"использовании парсера CLI, основанного на подсказках типов Python. Он "
"обеспечивает автозавершение и красиво оформленную справку по командной "
"строке из коробки. Другим вариантом может быть :py:mod:`argparse`, парсер "
"командной строки, включенный в стандартную библиотеку Python. Он достаточен "
"для большинства потребностей, но требует много кода, обычно в ``cli.py``, "
"для правильной работы. В качестве альтернативы, docopt_ позволяет создавать "
"интерфейсы CLI, основанные исключительно на строках документов; продвинутым "
"пользователям рекомендуется использовать click_ (на котором основан "
"``typer``)."

#: ../source/guides/creating-command-line-tools.rst:86
msgid ""
"Now, add an empty :file:`__init__.py` file, to define the project as a "
"regular :term:`import package <Import Package>`."
msgstr ""
"Теперь добавьте пустой файл :file:`__init__.py`, чтобы определить проект как "
"обычный :term:`import package <Import Package>`."

#: ../source/guides/creating-command-line-tools.rst:88
#, fuzzy
#| msgid ""
#| "The file :file:`__main__.py` marks the main entry point for the "
#| "application when running it via :mod:`runpy` (i.e. ``python -m "
#| "greetings``, which works immediately with flat layout, but requires "
#| "installation of the package with src layout), so initizalize the command-"
#| "line interface here:"
msgid ""
"The file :file:`__main__.py` marks the main entry point for the application "
"when running it via :mod:`runpy` (i.e. ``python -m greetings``, which works "
"immediately with flat layout, but requires installation of the package with "
"src layout), so initialize the command-line interface here:"
msgstr ""
"Файл :file:`__main__.py` обозначает основную точку входа в приложение при "
"его запуске через :mod:`runpy` (т.е. ``python -m greetings``, что сразу "
"работает при плоской раскладке, но требует установки пакета при src-"
"раскладке), поэтому инициализируйте здесь интерфейс командной строки:"

#: ../source/guides/creating-command-line-tools.rst:100
msgid ""
"In order to enable calling the command-line interface directly from the :"
"term:`source tree <Project Source Tree>`, i.e. as ``python src/greetings``, "
"a certain hack could be placed in this file; read more at :ref:`running-cli-"
"from-source-src-layout`."
msgstr ""
"Для того чтобы можно было вызывать интерфейс командной строки "
"непосредственно из :term:`source tree <Project Source Tree>`, т.е. как "
"``python src/greetings``, в этот файл можно поместить определенный хак; "
"подробнее читайте в :ref:`running-cli-from-source-src-layout``."

#: ../source/guides/creating-command-line-tools.rst:106
msgid "``pyproject.toml``"
msgstr "``pyproject.toml``"

#: ../source/guides/creating-command-line-tools.rst:108
msgid ""
"The project's :term:`metadata <Pyproject Metadata>` is placed in :term:"
"`pyproject.toml`. The :term:`pyproject metadata keys <Pyproject Metadata "
"Key>` and the ``[build-system]`` table may be filled in as described in :ref:"
"`writing-pyproject-toml`, adding a dependency on ``typer`` (this tutorial "
"uses version *0.12.3*)."
msgstr ""
"Метаданные проекта :term:`metadata <Pyproject Metadata>` размещаются в :term:"
"`pyproject.toml`. Ключи метаданных :term:`pyproject <Pyproject Metadata "
"Key>` и таблица ``[build-system]`` могут быть заполнены, как описано в :ref:"
"`writing-pyproject-toml`, добавив зависимость от ``typer`` (в этом "
"руководстве используется версия *0.12.3*)."

#: ../source/guides/creating-command-line-tools.rst:111
msgid ""
"For the project to be recognised as a command-line tool, additionally a "
"``console_scripts`` :ref:`entry point <entry-points>` (see :ref:"
"`console_scripts`) needs to be added as a :term:`subkey <Pyproject Metadata "
"Subkey>`:"
msgstr ""
"Чтобы проект распознавался как инструмент командной строки, дополнительно "
"необходимо добавить ``console_scripts`` :ref:`entry point <entry-points>` "
"(см. :ref:`console_scripts`) в качестве :term:`subkey <Pyproject Metadata "
"Subkey>`:"

#: ../source/guides/creating-command-line-tools.rst:118
msgid ""
"Now, the project's source tree is ready to be transformed into a :term:"
"`distribution package <Distribution Package>`, which makes it installable."
msgstr ""
"Теперь дерево исходных текстов проекта готово к преобразованию в :term:"
"`distribution package <Distribution Package>`, что делает его пригодным для "
"установки."

#: ../source/guides/creating-command-line-tools.rst:123
msgid "Installing the package with ``pipx``"
msgstr "Установка пакета с помощью ``pipx``"

#: ../source/guides/creating-command-line-tools.rst:125
msgid ""
"After installing ``pipx`` as described in :ref:`installing-stand-alone-"
"command-line-tools`, install your project:"
msgstr ""
"После установки ``pipx``, как описано в :ref:`installing-stand-alone-command-"
"line-tools`, установите ваш проект:"

#: ../source/guides/creating-command-line-tools.rst:132
msgid ""
"This will expose the executable script we defined as an entry point and make "
"the command ``greet`` available. Let's test it:"
msgstr ""
"Это откроет исполняемый скрипт, который мы определили как точку входа, и "
"сделает доступной команду ``greet``. Давайте проверим это:"

#: ../source/guides/creating-command-line-tools.rst:146
msgid ""
"Since this example uses ``typer``, you could now also get an overview of the "
"program's usage by calling it with the ``--help`` option, or configure "
"completions via the ``--install-completion`` option."
msgstr ""
"Поскольку в этом примере используется ``typer``, теперь вы также можете "
"получить обзор использования программы, вызвав ее с помощью опции ``--"
"help``, или настроить завершение работы с помощью опции ``--install-"
"completion``."

#: ../source/guides/creating-command-line-tools.rst:149
msgid ""
"To just run the program without installing it permanently, use ``pipx run``, "
"which will create a temporary (but cached) virtual environment for it:"
msgstr ""
"Чтобы просто запустить программу без ее постоянной установки, используйте "
"``pipx run``, который создаст для нее временное (но кэшированное) "
"виртуальное окружение:"

#: ../source/guides/creating-command-line-tools.rst:156
#, fuzzy
#| msgid ""
#| "This syntax is a bit unpractical, however; as the name of the entry point "
#| "we defined above does not match the package name, we need to state "
#| "explicitly which executable script to run (even though there is only on "
#| "in existence)."
msgid ""
"This syntax is a bit impractical, however; as the name of the entry point we "
"defined above does not match the package name, we need to state explicitly "
"which executable script to run (even though there is only on in existence)."
msgstr ""
"Однако этот синтаксис немного непрактичен: поскольку имя точки входа, "
"которую мы определили выше, не совпадает с именем пакета, нам нужно явно "
"указать, какой исполняемый скрипт запускать (даже если существует только "
"один)."

#: ../source/guides/creating-command-line-tools.rst:159
msgid ""
"There is, however, a more practical solution to this problem, in the form of "
"an entry point specific to ``pipx run``. The same can be defined as follows "
"in :file:`pyproject.toml`:"
msgstr ""
"Однако существует более практичное решение этой проблемы в виде точки входа, "
"специфичной для ``pipx run``. Ее можно определить следующим образом в :file:"
"`pyproject.toml`:"

#: ../source/guides/creating-command-line-tools.rst:168
msgid ""
"Thanks to this entry point (which *must* match the package name), ``pipx`` "
"will pick up the executable script as the default one and run it, which "
"makes this command possible:"
msgstr ""
"Благодаря этой точке входа (которая *должна* соответствовать имени пакета), "
"``pipx`` подберет исполняемый скрипт по умолчанию и запустит его, что делает "
"эту команду возможной:"

#: ../source/guides/creating-command-line-tools.rst:176
msgid "Conclusion"
msgstr "Заключение"

#: ../source/guides/creating-command-line-tools.rst:178
#, fuzzy
#| msgid ""
#| "You know by now how to package a command-line application written in "
#| "Python. A further step could be to distribute you package, meaning "
#| "uploading it to a :term:`package index <Package Index>`, most commonly :"
#| "term:`PyPI <Python Package Index (PyPI)>`. To do that, follow the "
#| "instructions at :ref:`Packaging your project`. And once you're done, "
#| "don't forget to :ref:`do some research <analyzing-pypi-package-"
#| "downloads>` on how your package is received!"
msgid ""
"You know by now how to package a command-line application written in Python. "
"A further step could be to distribute your package, meaning uploading it to "
"a :term:`package index <Package Index>`, most commonly :term:`PyPI <Python "
"Package Index (PyPI)>`. To do that, follow the instructions at :ref:"
"`Packaging your project`. And once you're done, don't forget to :ref:`do "
"some research <analyzing-pypi-package-downloads>` on how your package is "
"received!"
msgstr ""
"Вы уже знаете, как упаковать приложение командной строки, написанное на "
"Python. Следующим шагом может быть распространение вашего пакета, то есть "
"загрузка его в :term:`package index <Package Index>`, чаще всего :term:`PyPI "
"<Python Package Index (PyPI)>`. Чтобы сделать это, следуйте инструкциям в :"
"ref:`Packaging your project`. И как только вы закончите, не забудьте :ref:"
"`do some research <analyzing-pypi-package-downloads>` на предмет того, как "
"был принят ваш пакет!"

#: ../source/guides/distributing-packages-using-setuptools.rst:5
msgid "Packaging and distributing projects"
msgstr "Упаковка и распространение проектов"

#: ../source/guides/distributing-packages-using-setuptools.rst:7
msgid "Outdated"
msgstr "Устаревший"

#: ../source/guides/distributing-packages-using-setuptools.rst:8
msgid "2023-12-14"
msgstr "2023-12-14"

#: ../source/guides/distributing-packages-using-setuptools.rst:10
msgid ""
"This section covers some additional details on configuring, packaging and "
"distributing Python projects with ``setuptools`` that aren't covered by the "
"introductory tutorial in :doc:`/tutorials/packaging-projects`.  It still "
"assumes that you are already familiar with the contents of the :doc:`/"
"tutorials/installing-packages` page."
msgstr ""
"В этом разделе рассматриваются некоторые дополнительные детали по настройке, "
"упаковке и распространению проектов Python с помощью ``setuptools``, которые "
"не были рассмотрены во вводном руководстве в :doc:`/tutorials/packaging-"
"projects``.  При этом предполагается, что вы уже знакомы с содержанием "
"страницы :doc:`/tutorials/installing-packages`."

#: ../source/guides/distributing-packages-using-setuptools.rst:16
msgid ""
"The section does *not* aim to cover best practices for Python project "
"development as a whole.  For example, it does not provide guidance or tool "
"recommendations for version control, documentation, or testing."
msgstr ""
"Этот раздел *не* ставит целью охватить лучшие практики разработки проектов "
"на Python в целом.  Например, в нем нет руководства или рекомендаций по "
"инструментам для контроля версий, документации или тестирования."

#: ../source/guides/distributing-packages-using-setuptools.rst:20
msgid ""
"For more reference material, see :std:doc:`Building and Distributing "
"Packages <setuptools:userguide/index>` in the :ref:`setuptools` docs, but "
"note that some advisory content there may be outdated. In the event of "
"conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""
"Дополнительные справочные материалы см. в :std:doc:`Building and "
"Distributing Packages <setuptools:userguide/index>` в :ref:`setuptools` "
"docs, но учтите, что некоторые рекомендации там могут быть устаревшими. В "
"случае возникновения противоречий отдавайте предпочтение советам в "
"руководстве пользователя по упаковке Python."

#: ../source/guides/distributing-packages-using-setuptools.rst:28
msgid "Requirements for packaging and distributing"
msgstr "Требования к упаковке и распространению"

#: ../source/guides/distributing-packages-using-setuptools.rst:29
msgid ""
"First, make sure you have already fulfilled the :ref:`requirements for "
"installing packages <installing_requirements>`."
msgstr ""
"Во-первых, убедитесь, что вы уже выполнили :ref:`требования к установке "
"пакетов <installing_requirements>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:32
msgid "Install \"twine\" [1]_:"
msgstr "Установите «twine» [1]_:"

#: ../source/guides/distributing-packages-using-setuptools.rst:46
msgid ""
"You'll need this to upload your project :term:`distributions <Distribution "
"Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below "
"<Uploading your Project to PyPI>`)."
msgstr ""
"Он понадобится для загрузки вашего проекта :term:`distributions "
"<Дистрибутивный пакет>` в :term:`PyPI <Индекс пакетов Python (PyPI)>` (см. :"
"ref:`ниже <Загрузка проекта в PyPI>`)."

#: ../source/guides/distributing-packages-using-setuptools.rst:52
msgid "Configuring your project"
msgstr "Настройка вашего проекта"

#: ../source/guides/distributing-packages-using-setuptools.rst:56
msgid "Initial files"
msgstr "Исходные файлы"

#: ../source/guides/distributing-packages-using-setuptools.rst:61
msgid ""
"The most important file is :file:`setup.py` which exists at the root of your "
"project directory. For an example, see the `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
"Наиболее важным файлом является :file:`setup.py`, который существует в корне "
"каталога вашего проекта. Для примера смотрите `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"в проекте-образце PyPA <https://github.com/pypa/sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:66
msgid ":file:`setup.py` serves two primary functions:"
msgstr "Файл :file:`setup.py` выполняет две основные функции:"

#: ../source/guides/distributing-packages-using-setuptools.rst:68
msgid ""
"It's the file where various aspects of your project are configured. The "
"primary feature of :file:`setup.py` is that it contains a global ``setup()`` "
"function.  The keyword arguments to this function are how specific details "
"of your project are defined.  The most relevant arguments are explained in :"
"ref:`the section below <setup() args>`."
msgstr ""
"Это файл, в котором настраиваются различные аспекты вашего проекта. Главная "
"особенность :file:`setup.py` заключается в том, что он содержит глобальную "
"функцию ``setup()``.  Ключевые слова-аргументы этой функции определяют "
"конкретные детали вашего проекта.  Наиболее важные аргументы описаны в :ref:"
"`разделе ниже <setup() args>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:74
msgid ""
"It's the command line interface for running various commands that relate to "
"packaging tasks. To get a listing of available commands, run ``python3 setup."
"py --help-commands``."
msgstr ""
"Это интерфейс командной строки для запуска различных команд, связанных с "
"задачами упаковки. Чтобы получить список доступных команд, выполните команду "
"``python3 setup.py --help-commands``."

#: ../source/guides/distributing-packages-using-setuptools.rst:82
msgid ""
":file:`setup.cfg` is an ini file that contains option defaults for :file:"
"`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup."
"cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""
":file:`setup.cfg` - это ini-файл, содержащий параметры по умолчанию для "
"команд :file:`setup.py`.  Для примера смотрите файл `setup.cfg <https://"
"github.com/pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/"
"setup.cfg>`_ в проекте-образце `PyPA <https://github.com/pypa/"
"sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:89
msgid "README.rst / README.md"
msgstr "README.rst / README.md"

#: ../source/guides/distributing-packages-using-setuptools.rst:91
msgid ""
"All projects should contain a readme file that covers the goal of the "
"project. The most common format is `reStructuredText <https://docutils."
"sourceforge.io/rst.html>`_ with an \"rst\" extension, although this is not a "
"requirement; multiple variants of `Markdown <https://daringfireball.net/"
"projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:"
"`long_description_content_type <description>` argument)."
msgstr ""
"Все проекты должны содержать файл readme, в котором описывается цель "
"проекта. Наиболее распространенным форматом является `reStructuredText "
"<https://docutils.sourceforge.io/rst.html>`_ с расширением \"rst\", хотя это "
"не является обязательным условием; также поддерживаются различные варианты "
"`Markdown <https://daringfireball.net/projects/markdown/>`_ (посмотрите на "
"аргумент ``setup()`` :ref:`long_description_content_type <description>`)."

#: ../source/guides/distributing-packages-using-setuptools.rst:98
msgid ""
"For an example, see `README.md <https://github.com/pypa/sampleproject/blob/"
"main/README.md>`_ from the `PyPA sample project <https://github.com/pypa/"
"sampleproject>`_."
msgstr ""
"Для примера смотрите `README.md <https://github.com/pypa/sampleproject/blob/"
"main/README.md>`_ из проекта-образца `PyPA <https://github.com/pypa/"
"sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:102
msgid ""
"Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:"
"`README.rst`, :file:`README.txt`, or :file:`README`) included in source "
"distributions by default. The built-in :ref:`distutils` library adopts this "
"behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ "
"will include a :file:`README.md` if found. If you are using setuptools, you "
"don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, "
"include it to be explicit."
msgstr ""
"В проектах, использующих :ref:`setuptools` 0.6.27+, стандартные файлы readme "
"(:file:`README.rst`, :file:`README.txt` или :file:`README`) по умолчанию "
"включены в дистрибутивы исходных текстов. Встроенная библиотека :ref:"
"`distutils` перенимает это поведение начиная с Python 3.7. Кроме того, :ref:"
"`setuptools` 36.4.0+ будет включать :file:`README.md`, если он будет найден. "
"Если вы используете setuptools, вам не нужно указывать свой файл readme в :"
"file:`MANIFEST.in`. В противном случае включите его в явном виде."

#: ../source/guides/distributing-packages-using-setuptools.rst:111
msgid "MANIFEST.in"
msgstr "MANIFEST.in"

#: ../source/guides/distributing-packages-using-setuptools.rst:113
msgid ""
"A :file:`MANIFEST.in` is needed when you need to package additional files "
"that are not automatically included in a source distribution.  For details "
"on writing a :file:`MANIFEST.in` file, including a list of what's included "
"by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""
"Файл :file:`MANIFEST.in` необходим, когда вам нужно упаковать дополнительные "
"файлы, которые не включены автоматически в дистрибутив.  Подробнее о "
"написании файла :file:`MANIFEST.in`, включая список того, что включается по "
"умолчанию, смотрите в разделе \":ref:`Using MANIFEST.in`\"."

#: ../source/guides/distributing-packages-using-setuptools.rst:118
msgid ""
"However, you may not have to use a :file:`MANIFEST.in`. For an example, the "
"`PyPA sample project <https://github.com/pypa/sampleproject>`_ has removed "
"its manifest file, since all the necessary files have been included by :ref:"
"`setuptools` 43.0.0 and newer."
msgstr ""
"Однако вы можете не использовать :file:`MANIFEST.in`. Для примера, проект "
"примера `PyPA <https://github.com/pypa/sampleproject>`_ удалил свой файл "
"манифеста, так как все необходимые файлы были включены в :ref:`setuptools` "
"43.0.0 и новее."

#: ../source/guides/distributing-packages-using-setuptools.rst:123
msgid ""
":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""
":file:`MANIFEST.in' не влияет на бинарные дистрибутивы, такие как колеса."

#: ../source/guides/distributing-packages-using-setuptools.rst:126
msgid "LICENSE.txt"
msgstr "LICENSE.txt"

#: ../source/guides/distributing-packages-using-setuptools.rst:128
msgid ""
"Every package should include a license file detailing the terms of "
"distribution. In many jurisdictions, packages without an explicit license "
"can not be legally used or distributed by anyone other than the copyright "
"holder. If you're unsure which license to choose, you can use resources such "
"as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a "
"lawyer."
msgstr ""
"Каждый пакет должен содержать файл лицензии с подробным описанием условий "
"распространения. Во многих юрисдикциях пакеты без явной лицензии не могут "
"быть законно использованы или распространены кем-либо, кроме "
"правообладателя. Если вы не уверены, какую лицензию выбрать, вы можете "
"воспользоваться такими ресурсами, как `GitHub's Choose a License <https://"
"choosealicense.com/>`_ или проконсультироваться с юристом."

#: ../source/guides/distributing-packages-using-setuptools.rst:134
msgid ""
"For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/"
"blob/main/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/"
"pypa/sampleproject>`_."
msgstr ""
"Для примера смотрите `LICENSE.txt <https://github.com/pypa/sampleproject/"
"blob/main/LICENSE.txt>`_ из проекта-образца `PyPA <https://github.com/pypa/"
"sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:139
msgid "<your package>"
msgstr "<ваш пакет>"

#: ../source/guides/distributing-packages-using-setuptools.rst:141
msgid ""
"Although it's not required, the most common practice is to include your "
"Python modules and packages under a single top-level package that has the "
"same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""
"Хотя это и не обязательно, наиболее распространенной практикой является "
"включение ваших модулей и пакетов Python в один пакет верхнего уровня, "
"который имеет то же :ref:`имя <setup() name>`, что и ваш проект, или что-то "
"очень близкое."

#: ../source/guides/distributing-packages-using-setuptools.rst:145
msgid ""
"For an example, see the `sample <https://github.com/pypa/sampleproject/tree/"
"main/src/sample>`_ package that's included in the `PyPA sample project "
"<https://github.com/pypa/sampleproject>`_."
msgstr ""
"В качестве примера можно привести пакет `sample <https://github.com/pypa/"
"sampleproject/tree/main/src/sample>`_, который входит в состав проекта-"
"образца PyPA <https://github.com/pypa/sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:153
msgid "setup() args"
msgstr "Аргументы ``setup()``"

#: ../source/guides/distributing-packages-using-setuptools.rst:155
msgid ""
"As mentioned above, the primary feature of :file:`setup.py` is that it "
"contains a global ``setup()`` function.  The keyword arguments to this "
"function are how specific details of your project are defined."
msgstr ""
"Как уже говорилось выше, главная особенность :file:`setup.py` заключается в "
"том, что он содержит глобальную функцию ``setup()``.  Ключевые слова-"
"аргументы этой функции определяют конкретные детали вашего проекта."

#: ../source/guides/distributing-packages-using-setuptools.rst:159
msgid ""
"Some are temporarily explained below until their information is moved "
"elsewhere. The full list can be found :doc:`in the setuptools documentation "
"<setuptools:references/keywords>`."
msgstr ""
"Некоторые из них временно описаны ниже, пока информация о них не будет "
"перенесена в другое место. Полный список можно найти :doc:`в документации по "
"setuptools <setuptools:references/keywords>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:163
msgid ""
"Most of the snippets given are taken from the `setup.py <https://github.com/"
"pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup.py>`_ "
"contained in the `PyPA sample project <https://github.com/pypa/"
"sampleproject>`_."
msgstr ""
"Большинство приведенных фрагментов взяты из файла `setup.py <https://github."
"com/pypa/sampleproject/blob/db5806e0a3204034c51b1c00dde7d5eb3fa2532e/setup."
"py>`_, содержащегося в проекте-образце `PyPA <https://github.com/pypa/"
"sampleproject>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:170
msgid ""
"See :ref:`Choosing a versioning scheme` for more information on ways to use "
"versions to convey compatibility information to your users."
msgstr ""
"Дополнительные сведения о том, как использовать версии для передачи "
"информации о совместимости пользователям, см. в :ref:`Выбор схемы "
"версионирования`."

#: ../source/guides/distributing-packages-using-setuptools.rst:177
msgid "``packages``"
msgstr "``пакеты``"

#: ../source/guides/distributing-packages-using-setuptools.rst:183
msgid ""
"Set ``packages`` to a list of all :term:`packages <Import Package>` in your "
"project, including their subpackages, sub-subpackages, etc.  Although the "
"packages can be listed manually, ``setuptools.find_packages()`` finds them "
"automatically.  Use the ``include`` keyword argument to find only the given "
"packages.  Use the ``exclude`` keyword argument to omit packages that are "
"not intended to be released and installed."
msgstr ""
"Установите ``packages`` в список всех :term:`packages <Import Package>` в "
"вашем проекте, включая их подпакеты, подсубпакеты и т.д.  Хотя пакеты можно "
"перечислить вручную, ``setuptools.find_packages()`` находит их "
"автоматически.  Используйте ключевой аргумент ``include`` для поиска только "
"заданных пакетов.  Используйте ключевой аргумент ``exclude`` для исключения "
"пакетов, которые не предназначены для выпуска и установки."

#: ../source/guides/distributing-packages-using-setuptools.rst:192
msgid "``py_modules``"
msgstr "``py_modules``"

#: ../source/guides/distributing-packages-using-setuptools.rst:198
msgid ""
"If your project contains any single-file Python modules that aren't part of "
"a package, set ``py_modules`` to a list of the names of the modules (minus "
"the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""
"Если ваш проект содержит однофайловые модули Python, которые не являются "
"частью пакета, установите ``py_modules`` в список имен модулей (за вычетом "
"расширения ``.py``), чтобы :ref:`setuptools`` узнал о них."

#: ../source/guides/distributing-packages-using-setuptools.rst:204
#, fuzzy
msgid "``install_requires``"
msgstr "install_requires"

#: ../source/guides/distributing-packages-using-setuptools.rst:210
msgid ""
"\"install_requires\" should be used to specify what dependencies a project "
"minimally needs to run. When the project is installed by :ref:`pip`, this is "
"the specification that is used to install its dependencies."
msgstr ""
"\"install_requires\" следует использовать, чтобы указать, какие зависимости "
"минимально необходимы проекту для запуска. Когда проект устанавливается с "
"помощью :ref:`pip`, именно эта спецификация используется для установки его "
"зависимостей."

#: ../source/guides/distributing-packages-using-setuptools.rst:214
msgid ""
"For more on using \"install_requires\" see :ref:`install_requires vs "
"Requirements files`."
msgstr ""
"Подробнее об использовании \"install_requires\" смотрите :ref:"
"`install_requires vs Requirements files`."

#: ../source/guides/distributing-packages-using-setuptools.rst:221
msgid "``package_data``"
msgstr "``package_data``"

#: ../source/guides/distributing-packages-using-setuptools.rst:230
msgid ""
"Often, additional files need to be installed into a :term:`package <Import "
"Package>`. These files are often data that’s closely related to the "
"package’s implementation, or text files containing documentation that might "
"be of interest to programmers using the package. These files are called "
"\"package data\"."
msgstr ""
"Часто в :term:`пакет <Import Package>` необходимо установить дополнительные "
"файлы. Эти файлы часто представляют собой данные, тесно связанные с "
"реализацией пакета, или текстовые файлы, содержащие документацию, которая "
"может быть интересна программистам, использующим пакет. Такие файлы "
"называются \"данными пакета\"."

#: ../source/guides/distributing-packages-using-setuptools.rst:235
msgid ""
"The value must be a mapping from package name to a list of relative path "
"names that should be copied into the package. The paths are interpreted as "
"relative to the directory containing the package."
msgstr ""
"Значение должно представлять собой отображение имени пакета на список "
"относительных имен путей, которые должны быть скопированы в пакет. Пути "
"интерпретируются как относительные к директории, содержащей пакет."

#: ../source/guides/distributing-packages-using-setuptools.rst:239
msgid ""
"For more information, see :std:doc:`Including Data Files <setuptools:"
"userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""
"Дополнительную информацию см. в :std:doc:`Including Data Files <setuptools:"
"userguide/datafiles>` из :std:doc:`setuptools docs <setuptools:index>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:247
msgid "``data_files``"
msgstr "``data_files``"

#: ../source/guides/distributing-packages-using-setuptools.rst:253
msgid ""
"Although configuring :ref:`Package Data` is sufficient for most needs, in "
"some cases you may need to place data files *outside* of your :term:"
"`packages <Import Package>`.  The ``data_files`` directive allows you to do "
"that. It is mostly useful if you need to install files which are used by "
"other programs, which may be unaware of Python packages."
msgstr ""
"Хотя конфигурирования :ref:`Package Data` достаточно для большинства "
"потребностей, в некоторых случаях вам может понадобиться разместить файлы "
"данных *вне* вашего :term:`packages <Import Package>`.  Директива "
"``data_files`` позволяет это сделать. В основном она полезна, если вам нужно "
"установить файлы, используемые другими программами, которые могут не знать о "
"пакетах Python."

#: ../source/guides/distributing-packages-using-setuptools.rst:259
msgid ""
"Each ``(directory, files)`` pair in the sequence specifies the installation "
"directory and the files to install there. The ``directory`` must be a "
"relative path (although this may change in the future, see `wheel Issue #92 "
"<https://github.com/pypa/wheel/issues/92>`_), and it is interpreted relative "
"to the installation prefix (Python’s ``sys.prefix`` for a default "
"installation; ``site.USER_BASE`` for a user installation). Each file name in "
"``files`` is interpreted relative to the :file:`setup.py` script at the top "
"of the project source distribution."
msgstr ""
"Каждая пара ``(директория, файлы)`` в последовательности указывает "
"директорию установки и файлы для установки. Каталог ``directory`` должен "
"быть относительным путем (хотя это может измениться в будущем, см. `wheel "
"Issue #92 <https://github.com/pypa/wheel/issues/92>`_), и он "
"интерпретируется относительно префикса установки (Python'овский ``sys."
"prefix`` для установки по умолчанию; ``site.USER_BASE`` для установки "
"пользователем). Каждое имя файла в ``files`` интерпретируется относительно "
"скрипта :file:`setup.py`` в верхней части исходного дистрибутива проекта."

#: ../source/guides/distributing-packages-using-setuptools.rst:269
msgid ""
"For more information see the distutils section on :ref:`Installing "
"Additional Files <setuptools:distutils-additional-files>`."
msgstr ""
"Дополнительную информацию можно найти в разделе distutils на :ref:`Установка "
"дополнительных файлов <setuptools:distutils-additional-files>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:274
msgid ""
"When installing packages as egg, ``data_files`` is not supported. So, if "
"your project uses :ref:`setuptools`, you must use ``pip`` to install it. "
"Alternatively, if you must use ``python setup.py``, then you need to pass "
"the ``--old-and-unmanageable`` option."
msgstr ""
"При установке пакетов как яиц, ``data_files`` не поддерживается. Поэтому, "
"если ваш проект использует :ref:`setuptools`, то для его установки "
"необходимо использовать ``pip``. В противном случае, если вы должны "
"использовать ``python setup.py``, то вам нужно передать опцию ``-old-and-"
"unmanageable``."

#: ../source/guides/distributing-packages-using-setuptools.rst:281
#: ../source/specifications/pyproject-toml.rst:149
#, fuzzy
msgid "``scripts``"
msgstr "scripts"

#: ../source/guides/distributing-packages-using-setuptools.rst:283
msgid ""
"Although ``setup()`` supports a :ref:`scripts <setuptools:distutils-"
"installing-scripts>` keyword for pointing to pre-made scripts to install, "
"the recommended approach to achieve cross-platform compatibility is to use :"
"ref:`console_scripts` entry points (see below)."
msgstr ""
"Хотя ``setup()`` поддерживает ключевое слово :ref:`scripts <setuptools:"
"distutils-installing-scripts>` для указания на готовые скрипты для "
"установки, рекомендуемый подход для достижения кроссплатформенной "
"совместимости - использовать точки входа :ref:`console_scripts` (см. ниже)."

#: ../source/guides/distributing-packages-using-setuptools.rst:291
msgid "Choosing a versioning scheme"
msgstr "Выбор схемы управления версиями"

#: ../source/guides/distributing-packages-using-setuptools.rst:293
msgid ""
"See :ref:`versioning` for information on common version schemes and how to "
"choose between them."
msgstr ""
"Информацию о распространенных схемах версий и о том, как выбирать между "
"ними, смотрите в : ссылка:`версионирование`."

#: ../source/guides/distributing-packages-using-setuptools.rst:298
msgid "Working in \"development mode\""
msgstr "Работа в «режиме разработки»"

#: ../source/guides/distributing-packages-using-setuptools.rst:300
msgid ""
"You can install a project in \"editable\" or \"develop\" mode while you're "
"working on it. When installed as editable, a project can be edited in-place "
"without reinstallation: changes to Python source files in projects installed "
"as editable will be reflected the next time an interpreter process is "
"started."
msgstr ""
"Вы можете установить проект в режиме \"редактируемый\" или "
"\"разрабатываемый\", пока вы работаете над ним. Если проект установлен как "
"редактируемый, его можно редактировать на месте без переустановки: изменения "
"исходных файлов Python в проектах, установленных как редактируемые, будут "
"отражены при следующем запуске процесса интерпретатора."

#: ../source/guides/distributing-packages-using-setuptools.rst:306
msgid ""
"To install a Python package in \"editable\"/\"development\" mode Change "
"directory to the root of the project directory and run:"
msgstr ""
"Чтобы установить пакет Python в режиме \"редактируемый\"/\"разработка\", "
"измените каталог на корень каталога проекта и выполните команду:"

#: ../source/guides/distributing-packages-using-setuptools.rst:314
msgid ""
"The pip command-line flag ``-e`` is short for ``--editable``, and ``.`` "
"refers to the current working directory, so together, it means to install "
"the current directory (i.e. your project) in editable mode.  This will also "
"install any dependencies declared with ``install_requires`` and any scripts "
"declared with ``console_scripts``.  Dependencies will be installed in the "
"usual, non-editable mode."
msgstr ""
"Флаг командной строки pip ``-e`` - это сокращение от ``-editable``, а ``.`` "
"означает текущий рабочий каталог, так что вместе это означает установку "
"текущего каталога (т.е. вашего проекта) в режиме редактирования.  При этом "
"также будут установлены все зависимости, объявленные с помощью "
"``install_requires``, и все скрипты, объявленные с помощью "
"``console_scripts``.  Зависимости будут установлены в обычном, "
"нередактируемом режиме."

#: ../source/guides/distributing-packages-using-setuptools.rst:321
msgid ""
"You may want to install some of your dependencies in editable mode as well. "
"For example, supposing your project requires \"foo\" and \"bar\", but you "
"want \"bar\" installed from VCS in editable mode, then you could construct a "
"requirements file like so::"
msgstr ""
"Возможно, вы захотите установить некоторые из ваших зависимостей в "
"редактируемом режиме. Например, предположим, что ваш проект требует \"foo\" "
"и \"bar\", но вы хотите, чтобы \"bar\" устанавливался из VCS в редактируемом "
"режиме, тогда вы можете создать файл требований следующим образом::"

#: ../source/guides/distributing-packages-using-setuptools.rst:329
msgid ""
"The first line says to install your project and any dependencies. The second "
"line overrides the \"bar\" dependency, such that it's fulfilled from VCS, "
"not PyPI."
msgstr ""
"В первой строке говорится об установке вашего проекта и всех зависимостей. "
"Вторая строка переопределяет зависимость \"bar\" так, чтобы она выполнялась "
"из VCS, а не из PyPI."

#: ../source/guides/distributing-packages-using-setuptools.rst:333
msgid ""
"If, however, you want \"bar\" installed from a local directory in editable "
"mode, the requirements file should look like this, with the local paths at "
"the top of the file::"
msgstr ""
"Если же вы хотите установить \"Бар\" из локальной директории в редактируемом "
"режиме, файл требований должен выглядеть следующим образом, с локальными "
"путями в верхней части файла::"

#: ../source/guides/distributing-packages-using-setuptools.rst:338
msgid ""
"Otherwise, the dependency will be fulfilled from PyPI, due to the "
"installation order of the requirements file.  For more on requirements "
"files, see the :ref:`Requirements File <pip:Requirements Files>` section in "
"the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS "
"Support>` section of the pip docs."
msgstr ""
"В противном случае зависимость будет выполняться из PyPI, что обусловлено "
"порядком установки файла требований.  Подробнее о файлах требований смотрите "
"раздел :ref:`Requirements File <pip:Requirements Files>` в документации "
"pip.  Подробнее о VCS-установках смотрите в разделе :ref:`VCS Support <pip:"
"VCS Support>` документации pip."

#: ../source/guides/distributing-packages-using-setuptools.rst:342
msgid ""
"Lastly, if you don't want to install any dependencies at all, you can run:"
msgstr ""
"Наконец, если вы не хотите устанавливать никаких зависимостей, вы можете "
"выполнить команду:"

#: ../source/guides/distributing-packages-using-setuptools.rst:349
msgid ""
"For more information, see the :doc:`Development Mode <setuptools:userguide/"
"development_mode>` section of the :ref:`setuptools` docs."
msgstr ""
"Для получения дополнительной информации см. раздел :doc:`Режим разработки "
"<setuptools:userguide/development_mode>` в :ref:`setuptools` docs."

#: ../source/guides/distributing-packages-using-setuptools.rst:356
msgid "Packaging your project"
msgstr "Упаковка вашего проекта"

#: ../source/guides/distributing-packages-using-setuptools.rst:358
msgid ""
"To have your project installable from a :term:`Package Index` like :term:"
"`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:"
"`Distribution <Distribution Package>` (aka \":term:`Package <Distribution "
"Package>`\") for your project."
msgstr ""
"Чтобы ваш проект можно было установить из индекса :term:`Package Index`, "
"например :term:`PyPI <Python Package Index (PyPI)>`, вам нужно будет "
"создать :term:`Distribution <Distribution Package>` (он же \":term:`Package "
"<Distribution Package>`\") для вашего проекта."

#: ../source/guides/distributing-packages-using-setuptools.rst:363
msgid ""
"Before you can build wheels and sdists for your project, you'll need to "
"install the ``build`` package:"
msgstr ""
"Прежде чем вы сможете построить колеса и диски для своего проекта, вам нужно "
"будет установить пакет ``build``:"

#: ../source/guides/distributing-packages-using-setuptools.rst:380
msgid "Source distributions"
msgstr "Распространение в исходных кодах"

#: ../source/guides/distributing-packages-using-setuptools.rst:382
msgid ""
"Minimally, you should create a :term:`Source Distribution <Source "
"Distribution (or \"sdist\")>`:"
msgstr ""
"Минимумом вы должны создать :термин:`Источник распределения <Источник "
"распределения (или \"сдист\")>`:"

#: ../source/guides/distributing-packages-using-setuptools.rst:398
msgid ""
"A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built "
"Distribution`), and requires a build step when installed by pip.  Even if "
"the distribution is pure Python (i.e. contains no extensions), it still "
"involves a build step to build out the installation metadata from :file:"
"`setup.py` and/or :file:`setup.cfg`."
msgstr ""
"Исходный дистрибутив\" является несобранным (т.е. не является :term:`Built "
"Distribution`) и требует шага сборки при установке с помощью pip.  Даже если "
"дистрибутив является чистым Python (т.е. не содержит расширений), он все "
"равно требует сборки для создания метаданных установки из :file:`setup.py` и/"
"или :file:`setup.cfg`."

#: ../source/guides/distributing-packages-using-setuptools.rst:406
msgid "Wheels"
msgstr "Колёса"

#: ../source/guides/distributing-packages-using-setuptools.rst:408
msgid ""
"You should also create a wheel for your project. A wheel is a :term:`built "
"package <Built Distribution>` that can be installed without needing to go "
"through the \"build\" process. Installing wheels is substantially faster for "
"the end user than installing from a source distribution."
msgstr ""
"Вы также должны создать колесо для своего проекта. Колесо - это :term:"
"`сборка пакета <Сборка дистрибутива>`, который может быть установлен без "
"необходимости проходить процесс \"сборки\". Установка колес значительно "
"быстрее для конечного пользователя, чем установка из исходного дистрибутива."

#: ../source/guides/distributing-packages-using-setuptools.rst:413
msgid ""
"If your project is pure Python then you'll be creating a :ref:`\"Pure Python "
"Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""
"Если ваш проект является чистым Python, то вы будете создавать :ref: «Чистый "
"Python Колесо» (см. раздел ниже) <Чистый Python Колеса>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:416
msgid ""
"If your project contains compiled extensions, then you'll be creating what's "
"called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""
"Если ваш проект содержит компилированные расширения, то вы будете создавать "
"то, что называется:ref:`*Platform Wheel* (см. раздел ниже) <Platform "
"Wheels>`."

#: ../source/guides/distributing-packages-using-setuptools.rst:419
msgid ""
"If your project also supports Python 2 *and* contains no C extensions, then "
"you should create what's called a *Universal Wheel* by adding the following "
"to your :file:`setup.cfg` file:"
msgstr ""
"Если ваш проект также поддерживает Python 2 *и* не содержит расширений C, то "
"вам следует создать так называемое *универсальное колесо*, добавив следующее "
"в файл :file:`setup.cfg`:"

#: ../source/guides/distributing-packages-using-setuptools.rst:428
msgid ""
"Only use this setting if your project does not have any C extensions *and* "
"supports Python 2 and 3."
msgstr ""
"Используйте эту настройку только в том случае, если ваш проект не имеет "
"расширений на языке C *и* поддерживает Python 2 и 3."

#: ../source/guides/distributing-packages-using-setuptools.rst:435
msgid "Pure Python Wheels"
msgstr "Колёса чистого Python'а"

#: ../source/guides/distributing-packages-using-setuptools.rst:437
msgid ""
"*Pure Python Wheels* contain no compiled extensions, and therefore only "
"require a single Python wheel."
msgstr ""
"* Чистые Python колеса* не содержат компилированных расширений, и поэтому "
"требуется только одно колесо Python."

#: ../source/guides/distributing-packages-using-setuptools.rst:440
#: ../source/guides/distributing-packages-using-setuptools.rst:469
msgid "To build the wheel:"
msgstr "Для построения колеса выполните:"

#: ../source/guides/distributing-packages-using-setuptools.rst:454
msgid ""
"The ``wheel`` package will detect that the code is pure Python, and build a "
"wheel that's named such that it's usable on any Python 3 installation.  For "
"details on the naming of wheel files, see :pep:`425`."
msgstr ""
"Пакет ``wheel`` определит, что код - это чистый Python, и создаст колесо, "
"названное так, чтобы его можно было использовать на любой установке Python "
"3.  Подробнее об именовании файлов wheel смотрите в :pep:`425`."

#: ../source/guides/distributing-packages-using-setuptools.rst:458
msgid ""
"If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both "
"files for you; this is useful when you don't need multiple wheels."
msgstr ""
"Если вы запустите ``build`` без ``--wheel`` или ``--sdist``, он соберет оба "
"файла за вас; это полезно, когда вам не нужно несколько колес."

#: ../source/guides/distributing-packages-using-setuptools.rst:464
msgid "Platform Wheels"
msgstr "Платформо-зависимые колёса"

#: ../source/guides/distributing-packages-using-setuptools.rst:466
msgid ""
"*Platform Wheels* are wheels that are specific to a certain platform like "
"Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""
"*Платформенные колеса* - это колеса, которые специфичны для определенной "
"платформы, например Linux, macOS или Windows, обычно из-за содержания "
"скомпилированных расширений."

#: ../source/guides/distributing-packages-using-setuptools.rst:484
msgid ""
"The ``wheel`` package will detect that the code is not pure Python, and "
"build a wheel that's named such that it's only usable on the platform that "
"it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""
"Пакет ``wheel`` определит, что код не является чистым Python, и создаст "
"колесо, названное так, что его можно использовать только на той платформе, "
"на которой оно было создано. Подробнее об именовании файлов wheel смотрите "
"в :pep:`425`."

#: ../source/guides/distributing-packages-using-setuptools.rst:490
msgid ""
":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of "
"platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. "
"Details of the latter are defined in :pep:`513`."
msgstr ""
":term:`PyPI <Python Package Index (PyPI)>` в настоящее время поддерживает "
"загрузку платформенных колес для Windows, macOS и мульти-дистро "
"``manylinux*`` ABI. Подробности о последнем определены в :pep:`513`."

#: ../source/guides/distributing-packages-using-setuptools.rst:498
msgid "Uploading your Project to PyPI"
msgstr "Загрузка вашего проекта на PyPI"

#: ../source/guides/distributing-packages-using-setuptools.rst:500
msgid ""
"When you ran the command to create your distribution, a new directory ``dist/"
"`` was created under your project's root directory. That's where you'll find "
"your distribution file(s) to upload."
msgstr ""
"Когда вы выполнили команду создания дистрибутива, под корневым каталогом "
"вашего проекта был создан новый каталог ``dist/``. Именно в ней вы найдете "
"файл(ы) дистрибутива для загрузки."

#: ../source/guides/distributing-packages-using-setuptools.rst:504
msgid ""
"These files are only created when you run the command to create your "
"distribution. This means that any time you change the source of your project "
"or the configuration in your :file:`setup.py` file, you will need to rebuild "
"these files again before you can distribute the changes to PyPI."
msgstr ""
"Эти файлы создаются только тогда, когда вы выполняете команду создания "
"дистрибутива. Это означает, что при любом изменении исходного кода проекта "
"или конфигурации в файле :file:`setup.py` вам нужно будет заново создать эти "
"файлы, прежде чем вы сможете распространить изменения в PyPI."

#: ../source/guides/distributing-packages-using-setuptools.rst:509
msgid ""
"Before releasing on main PyPI repo, you might prefer training with the `PyPI "
"test site <https://test.pypi.org/>`_ which is cleaned on a semi regular "
"basis. See :ref:`using-test-pypi` on how to setup your configuration in "
"order to use it."
msgstr ""
"Перед выпуском на основной PyPI-репо, вы можете предпочесть тренировку на "
"`PyPI test site <https://test.pypi.org/>`_, который чистится на "
"полурегулярной основе. Смотрите :ref:`using-test-pypi` о том, как настроить "
"свою конфигурацию для его использования."

#: ../source/guides/distributing-packages-using-setuptools.rst:514
msgid ""
"In other resources you may encounter references to using ``python setup.py "
"register`` and ``python setup.py upload``. These methods of registering and "
"uploading a package are **strongly discouraged** as it may use a plaintext "
"HTTP or unverified HTTPS connection on some Python versions, allowing your "
"username and password to be intercepted during transmission."
msgstr ""
"На других ресурсах вы можете встретить упоминания об использовании ``python "
"setup.py register`` и ``python setup.py upload``. Эти методы регистрации и "
"загрузки пакетов **настоятельно не рекомендуются**, поскольку в некоторых "
"версиях Python они могут использовать HTTP-соединение с открытым текстом или "
"непроверенное HTTPS-соединение, что позволяет перехватить ваши имя "
"пользователя и пароль во время передачи."

#: ../source/guides/distributing-packages-using-setuptools.rst:520
msgid ""
"The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to "
"ensure safety of all users, certain kinds of URLs and directives are "
"forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** "
"trying to upload your distribution, you should check to see if your brief / "
"long descriptions provided in :file:`setup.py` are valid.  You can do this "
"by running :std:doc:`twine check <index>` on your package files:"
msgstr ""
"Парсер reStructuredText, используемый на PyPI, - это **не** Sphinx! Кроме "
"того, для обеспечения безопасности всех пользователей, некоторые виды URL и "
"директив запрещены или удалены (например, директива ``...raw::``). **Перед "
"тем, как** попытаться загрузить свой дистрибутив, вы должны проверить, "
"действительны ли ваши краткие/длинные описания, указанные в :file:`setup."
"py`.  Это можно сделать, выполнив :std:doc:`twine check <index>` для файлов "
"вашего пакета:"

#: ../source/guides/distributing-packages-using-setuptools.rst:533
msgid "Create an account"
msgstr "Создание учётной записи"

#: ../source/guides/distributing-packages-using-setuptools.rst:535
msgid ""
"First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. "
"You can create an account `using the form on the PyPI website <https://pypi."
"org/account/register/>`_."
msgstr ""
"Во-первых, вам нужна учетная запись пользователя :term:`PyPI <Python Package "
"Index (PyPI)>`. Вы можете создать учетную запись, используя форму на сайте "
"PyPI <https://pypi.org/account/register/>`_."

#: ../source/guides/distributing-packages-using-setuptools.rst:539
msgid ""
"Now you'll create a PyPI `API token`_ so you will be able to securely upload "
"your project."
msgstr ""
"Теперь вы создадите токен PyPI `API token`_, чтобы иметь возможность "
"безопасно загружать свой проект."

#: ../source/guides/distributing-packages-using-setuptools.rst:542
msgid ""
"Go to https://pypi.org/manage/account/#api-tokens and create a new `API "
"token`_; don't limit its scope to a particular project, since you are "
"creating a new project."
msgstr ""
"Перейдите на https://pypi.org/manage/account/#api-tokens и создайте новый "
"`API-токен`_; не ограничивайте его область действия конкретным проектом, "
"поскольку вы создаете новый проект."

#: ../source/guides/distributing-packages-using-setuptools.rst:546
msgid ""
"**Don't close the page until you have copied and saved the token — you won't "
"see that token again.**"
msgstr ""
"**Не закрывайте страницу, пока не скопируете и не сохраните токен - больше "
"вы его не увидите**"

#: ../source/guides/distributing-packages-using-setuptools.rst:549
msgid ""
"To avoid having to copy and paste the token every time you upload, you can "
"create a :file:`$HOME/.pypirc` file:"
msgstr ""
"Чтобы не копировать и не вставлять токен при каждой загрузке, вы можете "
"создать файл :file:`$HOME/.pypirc`:"

#: ../source/guides/distributing-packages-using-setuptools.rst:558
msgid "**Be aware that this stores your token in plaintext.**"
msgstr "**Помните, что при этом ваш токен хранится в открытом виде**"

#: ../source/guides/distributing-packages-using-setuptools.rst:560
#: ../source/guides/migrating-to-pypi-org.rst:74
#: ../source/guides/migrating-to-pypi-org.rst:113
#: ../source/guides/using-testpypi.rst:84
msgid ""
"For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""
"Более подробную информацию см. в :ref:`спецификации <pypirc>` для :file:`."
"pypirc`."

#: ../source/guides/distributing-packages-using-setuptools.rst:566
msgid "Upload your distributions"
msgstr "Загрузите свои дистрибутивы"

#: ../source/guides/distributing-packages-using-setuptools.rst:568
msgid ""
"Once you have an account you can upload your distributions to :term:`PyPI "
"<Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""
"После создания учетной записи вы можете загружать свои дистрибутивы в :term:"
"`PyPI <Python Package Index (PyPI)>`, используя :ref:`twine`."

#: ../source/guides/distributing-packages-using-setuptools.rst:571
msgid ""
"The process for uploading a release is the same regardless of whether or not "
"the project already exists on PyPI - if it doesn't exist yet, it will be "
"automatically created when the first release is uploaded."
msgstr ""
"Процесс загрузки релиза одинаков вне зависимости от того, существует ли уже "
"проект на PyPI - если его еще нет, он будет автоматически создан при "
"загрузке первого релиза."

#: ../source/guides/distributing-packages-using-setuptools.rst:575
msgid ""
"For the second and subsequent releases, PyPI only requires that the version "
"number of the new release differ from any previous releases."
msgstr ""
"Для второго и последующих релизов PyPI требует только, чтобы номер версии "
"нового релиза отличался от всех предыдущих релизов."

#: ../source/guides/distributing-packages-using-setuptools.rst:582
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is "
"the name of your project that you uploaded. It may take a minute or two for "
"your project to appear on the site."
msgstr ""
"Вы можете убедиться, что ваш пакет успешно загружен, перейдя по URL-адресу "
"``https://pypi.org/project/<sampleproject>``, где ``sampleproject`` - это "
"имя загруженного вами проекта. Возможно, потребуется минута или две, чтобы "
"ваш проект появился на сайте."

#: ../source/guides/distributing-packages-using-setuptools.rst:589
#: ../source/tutorials/installing-packages.rst:670
msgid ""
"Depending on your platform, this may require root or Administrator access. :"
"ref:`pip` is currently considering changing this by `making user installs "
"the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""
"В зависимости от вашей платформы, для этого может потребоваться доступ root "
"или администратора. :ref:`pip` в настоящее время рассматривает возможность "
"изменить это, сделав пользовательскую установку поведением по умолчанию "
"<https://github.com/pypa/pip/issues/1668>`_."

#: ../source/guides/dropping-older-python-versions.rst:5
msgid "Dropping support for older Python versions"
msgstr "Удаление поддержки старых версий Python'а"

#: ../source/guides/dropping-older-python-versions.rst:7
msgid ""
"The ability to drop support for older Python versions is enabled by the "
"standard :ref:`core-metadata` 1.2 specification via the :ref:`\"Requires-"
"Python\" <core-metadata-requires-python>` attribute."
msgstr ""
"Возможность отказаться от поддержки старых версий Python предусмотрена "
"стандартной спецификацией :ref:`core-metadata` 1.2 с помощью атрибута :ref:"
"`\"Requires-Python\" <core-metadata-requires-python>`."

#: ../source/guides/dropping-older-python-versions.rst:9
msgid ""
"Metadata 1.2+ installers, such as Pip, will adhere to this specification by "
"matching the current Python runtime and comparing it with the required "
"version in the package metadata. If they do not match, it will attempt to "
"install the last package distribution that supported that Python runtime."
msgstr ""
"Установщики с метаданными 1.2+, такие как Pip, будут придерживаться этой "
"спецификации, определяя текущую среду выполнения Python и сравнивая ее с "
"требуемой версией в метаданных пакета. Если они не совпадают, то будет "
"предпринята попытка установить последний дистрибутив пакета, который "
"поддерживал эту среду выполнения Python."

#: ../source/guides/dropping-older-python-versions.rst:12
msgid ""
"This mechanism can be used to drop support for older Python versions, by "
"amending the ``Requires-Python`` attribute in the package metadata."
msgstr ""
"Этот механизм можно использовать для отказа от поддержки старых версий "
"Python, изменив атрибут ``Requires-Python`` в метаданных пакета."

#: ../source/guides/dropping-older-python-versions.rst:15
msgid "Requirements"
msgstr "Требования"

#: ../source/guides/dropping-older-python-versions.rst:17
msgid ""
"This workflow requires that the user installing the package uses Pip [#]_, "
"or another installer that supports the Metadata 1.2 specification."
msgstr ""
"Этот рабочий процесс требует, чтобы пользователь, устанавливающий пакет, "
"использовал Pip [#]_ или другую программу установки, поддерживающую "
"спецификацию Metadata 1.2."

#: ../source/guides/dropping-older-python-versions.rst:20
msgid "Dealing with the universal wheels"
msgstr "Работа с универсальными колесами"

#: ../source/guides/dropping-older-python-versions.rst:22
msgid ""
"Traditionally, :ref:`setuptools` projects providing Python code that is "
"semantically compatible with both Python 2 and Python 3, produce :term:"
"`wheels <Wheel>` that have a ``py2.py3`` tag in their names. When dropping "
"support for Python 2, it is important not to forget to change this tag to "
"just ``py3``. It is often configured within :file:`setup.cfg` under the "
"``[bdist_wheel]`` section by setting ``universal = 1``."
msgstr ""
"Традиционно проекты :ref:`setuptools`, предоставляющие код на Python, "
"семантически совместимый как с Python 2, так и с Python 3, создают :term:"
"`wheels <Wheel>`, в именах которых присутствует тег ``py2.py3``. При отказе "
"от поддержки Python 2 важно не забыть изменить этот тег на просто ``py3``. "
"Часто его настраивают в :file:`setup.cfg` в разделе ``[bdist_wheel]``, "
"установив ``universal = 1``."

#: ../source/guides/dropping-older-python-versions.rst:29
msgid ""
"If you use this method, either remove this option or section, or explicitly "
"set ``universal`` to ``0``:"
msgstr ""
"Если вы используете этот метод, либо удалите эту опцию или секцию, либо явно "
"установите ``universal`` в ``0``:"

#: ../source/guides/dropping-older-python-versions.rst:41
msgid ""
"Regarding :ref:`deprecated <setup-py-deprecated>` direct ``setup.py`` "
"invocations, passing the ``--universal`` flag on the command line could "
"override this setting."
msgstr ""
"Что касается :ref:`deprecated <setup-py-deprecated>` прямых вызовов ``setup."
"py``, передача флага ``--universal`` в командной строке может отменить эту "
"настройку."

#: ../source/guides/dropping-older-python-versions.rst:45
msgid "Defining the Python version required"
msgstr "Определение требуемой версии Python'а"

#: ../source/guides/dropping-older-python-versions.rst:48
msgid "1. Install twine"
msgstr "1. Установить шпагат"

#: ../source/guides/dropping-older-python-versions.rst:50
msgid "Ensure that you have twine available at its latest version. Steps:"
msgstr "Убедитесь, что у вас есть шпагат последней версии. Шаги:"

#: ../source/guides/dropping-older-python-versions.rst:66
msgid "2. Specify the version ranges for supported Python distributions"
msgstr "2. Укажите диапазоны версий поддерживаемых дистрибутивов Python'а"

#: ../source/guides/dropping-older-python-versions.rst:68
msgid ""
"Set the version ranges declaring which Python distributions are supported "
"within your project's :file:`pyproject.toml`. The :ref:`requires-python` "
"configuration field corresponds to the :ref:`Requires-Python <core-metadata-"
"requires-python>` core metadata field:"
msgstr ""
"Устанавливает диапазоны версий, объявляющие, какие дистрибутивы Python "
"поддерживаются в :file:`pyproject.toml` вашего проекта. Поле конфигурации :"
"ref:`requires-python` соответствует полю метаданных ядра :ref:`Requires-"
"Python <core-metadata-requires-python>`:"

#: ../source/guides/dropping-older-python-versions.rst:80
msgid ""
"You can specify version ranges and exclusion rules (complying with the :ref:"
"`version-specifiers` specification), such as at least Python 3.9. Or, at "
"least Python 3.7 and beyond, skipping the 3.7.0 and 3.7.1 point releases:"
msgstr ""
"Вы можете указать диапазон версий и правила исключения (в соответствии со "
"спецификацией :ref:`version-specifiers`), например, не ниже Python 3.9. Или, "
"по крайней мере, Python 3.7 и далее, пропуская точечные выпуски 3.7.0 и "
"3.7.1:"

#: ../source/guides/dropping-older-python-versions.rst:89
msgid ""
"If using the :ref:`setuptools` build backend, consult the `dependency-"
"management`_ documentation for more options."
msgstr ""
"Если вы используете бэкенд сборки :ref:`setuptools`, обратитесь к "
"документации `dependency-management`_ за дополнительными опциями."

#: ../source/guides/dropping-older-python-versions.rst:92
msgid ""
"Avoid adding upper bounds to the version ranges, e. g. ``\">= 3.8, < "
"3.10\"``. Doing so can cause different errors and version conflicts. See the "
"`discourse-discussion`_ for more information."
msgstr ""
"Избегайте добавления верхних границ к диапазонам версий, например, ``\">= "
"3.8, < 3.10\"``. Это может привести к различным ошибкам и конфликтам версий. "
"Дополнительную информацию см. в `discourse-discussion`_."

#: ../source/guides/dropping-older-python-versions.rst:96
msgid "3. Validating the Metadata before publishing"
msgstr "3. Перед публикацией проверьте метаданные"

#: ../source/guides/dropping-older-python-versions.rst:98
msgid ""
"Within a Python source package (the zip or the tar-gz file you download) is "
"a text file called PKG-INFO."
msgstr ""
"Внутри исходного пакета Python (zip- или tar-gz-файла, который вы "
"скачиваете) находится текстовый файл PKG-INFO."

#: ../source/guides/dropping-older-python-versions.rst:100
msgid ""
"This file is generated by the :term:`build backend <Build Backend>` when it "
"generates the source package. The file contains a set of keys and values, "
"the list of keys is part of the PyPA standard metadata format."
msgstr ""
"Этот файл генерируется :term:`build backend <Build Backend>` при создании "
"исходного пакета. Файл содержит набор ключей и значений, список ключей "
"является частью стандартного формата метаданных PyPA."

#: ../source/guides/dropping-older-python-versions.rst:103
msgid "You can see the contents of the generated file like this:"
msgstr "Вы можете увидеть содержимое сгенерированного файла следующим образом:"

#: ../source/guides/dropping-older-python-versions.rst:109
msgid "Validate that the following is in place, before publishing the package:"
msgstr ""
"Перед публикацией пакета убедитесь, что все перечисленное ниже на месте:"

#: ../source/guides/dropping-older-python-versions.rst:111
msgid ""
"If you have upgraded correctly, the ``Metadata-Version`` value should be 1.2 "
"or higher."
msgstr ""
"Если вы выполнили обновление правильно, значение ``Metadata-Version`` должно "
"быть 1.2 или выше."

#: ../source/guides/dropping-older-python-versions.rst:112
msgid ""
"The ``Requires-Python`` field is set and matches your specification in the "
"configuration file."
msgstr ""
"Поле ``Requires-Python`` установлено и соответствует вашей спецификации в "
"файле конфигурации."

#: ../source/guides/dropping-older-python-versions.rst:115
msgid "4. Publishing the package"
msgstr "4. Публикация пакета"

#: ../source/guides/dropping-older-python-versions.rst:117
msgid "Proceed as suggested in :ref:`Uploading your Project to PyPI`."
msgstr "Действуйте, как указано в :ref:`Uploading your Project to PyPI`."

#: ../source/guides/dropping-older-python-versions.rst:120
msgid "Dropping a Python version"
msgstr "Отказ от версии Python"

#: ../source/guides/dropping-older-python-versions.rst:122
msgid ""
"In principle, at least metadata support for Python versions should be kept "
"as long as possible, because once that has been dropped, people still "
"depending on a version will be forced to downgrade. If however supporting a "
"specific version becomes a blocker for a new feature or other issues occur, "
"the metadata ``Requires-Python`` should be amended. Of course this also "
"depends on whether the project needs to be stable and well-covered for a "
"wider range of users."
msgstr ""
"В принципе, по крайней мере, поддержка версий Python в метаданных должна "
"сохраняться как можно дольше, потому что после отказа от неё люди, всё ещё "
"зависящие от версии, будут вынуждены перейти на новую версию. Если же "
"поддержка конкретной версии становится препятствием для новых возможностей "
"или возникают другие проблемы, метаданные ``Requires-Python`` должны быть "
"изменены. Конечно, это также зависит от того, должен ли проект быть "
"стабильным и хорошо покрытым для более широкого круга пользователей."

#: ../source/guides/dropping-older-python-versions.rst:128
msgid "Each version compatibility change should have its own release."
msgstr ""
"Каждое изменение совместимости версий должно иметь свой собственный релиз."

#: ../source/guides/dropping-older-python-versions.rst:132
msgid ""
"When dropping a Python version, it might also be rewarding to upgrade the "
"project's code syntax generally, apart from updating the versions used in "
"visible places (like the testing environment). Tools like pyupgrade_ or "
"`ruff <https://docs.astral.sh/ruff/linter/>`_ can automate some of this work."
msgstr ""
"При отказе от версии Python может быть полезно обновить синтаксис кода "
"проекта в целом, помимо обновления версий, используемых в видимых местах "
"(например, в тестовой среде). Такие инструменты, как pyupgrade_ или `ruff "
"<https://docs.astral.sh/ruff/linter/>`_, могут автоматизировать часть этой "
"работы."

#: ../source/guides/dropping-older-python-versions.rst:138
msgid "Support for the Metadata 1.2 specification has been added in Pip 9.0."
msgstr "В Pip 9.0 добавлена поддержка спецификации Metadata 1.2."

#: ../source/guides/hosting-your-own-index.rst:5
msgid "Hosting your own simple repository"
msgstr "Создание собственного простого хранилища"

#: ../source/guides/hosting-your-own-index.rst:8
msgid ""
"If you wish to host your own simple repository [1]_, you can either use a "
"software package like :doc:`devpi <devpi:index>` or you can simply create "
"the proper directory structure and use any web server that can serve static "
"files and generate an autoindex."
msgstr ""
"Если вы хотите разместить свой собственный простой репозиторий [1]_, вы "
"можете использовать пакет программного обеспечения, например:doc:`devpi "
"<devpi:index>` или вы можете просто создать правильную структуру каталога и "
"использовать любой веб-сервер, который может обслуживать статические файлы и "
"генерировать автоиндекс."

#: ../source/guides/hosting-your-own-index.rst:13
msgid ""
"In either case, since you'll be hosting a repository that is likely not in "
"your user's default repositories, you should instruct them in your project's "
"description to configure their installer appropriately. For example with pip:"
msgstr ""
"В любом случае, поскольку вы будете размещать репозитории, которые, "
"вероятно, не находятся в хранилищах по умолчанию вашего пользователя, вы "
"должны инструктировать их в описании вашего проекта, чтобы настроить их "
"установщик соответствующим образом. Например, с pip:"

#: ../source/guides/hosting-your-own-index.rst:29
msgid ""
"In addition, it is **highly** recommended that you serve your repository "
"with valid HTTPS. At this time, the security of your user's installations "
"depends on all repositories using a valid HTTPS setup."
msgstr ""
"Кроме того, **высоко** рекомендуется, чтобы вы служили своему репозиторию с "
"действительным HTTPS. В настоящее время безопасность установок вашего "
"пользователя зависит от всех репозиториев, использующих действительную "
"настройку HTTP."

#: ../source/guides/hosting-your-own-index.rst:35
msgid "\"Manual\" repository"
msgstr "Хранилище \"Руководство\""

#: ../source/guides/hosting-your-own-index.rst:37
msgid ""
"The directory layout is fairly simple, within a root directory you need to "
"create a directory for each project. This directory should be the :ref:"
"`normalized name <name-normalization>` of the project. Within each of these "
"directories simply place each of the downloadable files. If you have the "
"projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" (with the "
"version 0.1) You should end up with a structure that looks like::"
msgstr ""
"Схема каталогов довольно проста: в корневом каталоге необходимо создать "
"каталог для каждого проекта. Этот каталог должен быть :ref:`нормализованным "
"именем <имя-нормализация>` проекта. Внутри каждой из этих директорий просто "
"разместите все загружаемые файлы. Если у вас есть проекты \"Foo\" (с "
"версиями 1.0 и 2.0) и \"bar\" (с версией 0.1), то в итоге у вас должна "
"получиться структура, которая выглядит следующим образом::"

#: ../source/guides/hosting-your-own-index.rst:50
msgid ""
"Once you have this layout, simply configure your webserver to serve the root "
"directory with autoindex enabled. For an example using the built in Web "
"server in `Twisted`_, you would simply run ``twistd -n web --path .`` and "
"then instruct users to add the URL to their installer's configuration."
msgstr ""
"Как только вы получите эту схему, просто настройте свой веб-сервер на "
"обслуживание корневого каталога с включенным автоиндексом. Для примера, "
"используя встроенный веб-сервер в `Twisted`_, вы просто запустите ``twistd -"
"n web --path .``, а затем попросите пользователей добавить URL в "
"конфигурацию их программы установки."

#: ../source/guides/hosting-your-own-index.rst:57
#: ../source/guides/index-mirrors-and-caches.rst:47
msgid "Existing projects"
msgstr "Существующие проекты"

#: ../source/guides/hosting-your-own-index.rst:63
msgid "Package upload"
msgstr "Загрузка пакетов"

#: ../source/guides/hosting-your-own-index.rst:64
msgid "PyPI fall-through [2]_"
msgstr "Падение PyPI [2]_"

#: ../source/guides/hosting-your-own-index.rst:65
#: ../source/guides/index-mirrors-and-caches.rst:56
#: ../source/guides/supporting-windows-using-appveyor.rst:146
msgid "Additional notes"
msgstr "Дополнительные замечания"

#: ../source/guides/hosting-your-own-index.rst:67
#: ../source/guides/index-mirrors-and-caches.rst:58
msgid ":ref:`devpi`"
msgstr ":ссылка:`devpi`"

#: ../source/guides/hosting-your-own-index.rst:68
#: ../source/guides/hosting-your-own-index.rst:69
#: ../source/guides/hosting-your-own-index.rst:75
#: ../source/guides/hosting-your-own-index.rst:79
#: ../source/guides/hosting-your-own-index.rst:99
#: ../source/guides/hosting-your-own-index.rst:120
#: ../source/guides/index-mirrors-and-caches.rst:59
#: ../source/guides/index-mirrors-and-caches.rst:60
#: ../source/guides/index-mirrors-and-caches.rst:66
#: ../source/guides/index-mirrors-and-caches.rst:67
#: ../source/guides/index-mirrors-and-caches.rst:74
#: ../source/guides/index-mirrors-and-caches.rst:78
#: ../source/guides/index-mirrors-and-caches.rst:80
#: ../source/guides/index-mirrors-and-caches.rst:85
#: ../source/guides/index-mirrors-and-caches.rst:86
#: ../source/guides/index-mirrors-and-caches.rst:90
#: ../source/guides/index-mirrors-and-caches.rst:92
#: ../source/guides/index-mirrors-and-caches.rst:96
#: ../source/guides/index-mirrors-and-caches.rst:98
#: ../source/guides/index-mirrors-and-caches.rst:102
#: ../source/guides/index-mirrors-and-caches.rst:104
#: ../source/guides/index-mirrors-and-caches.rst:108
#: ../source/guides/index-mirrors-and-caches.rst:110
msgid "✔"
msgstr "✔"

#: ../source/guides/hosting-your-own-index.rst:70
msgid ""
"multiple indexes with inheritance, with syncing, replication, fail-over; "
"mirroring"
msgstr ""
"множественные индексы с наследованием, с синхронизацией, репликацией, "
"отказоустойчивостью; зеркалирование"

#: ../source/guides/hosting-your-own-index.rst:73
#: ../source/guides/index-mirrors-and-caches.rst:71
msgid ":ref:`simpleindex`"
msgstr ": ссылка:`simpleindex"

#: ../source/guides/hosting-your-own-index.rst:78
msgid ":ref:`pypiserver`"
msgstr ":ссылка:`pypiserver`"

#: ../source/guides/hosting-your-own-index.rst:83
msgid ":ref:`pypiprivate`"
msgstr ":ссылка:`pypiprivate`"

#: ../source/guides/hosting-your-own-index.rst:88
#: ../source/guides/index-mirrors-and-caches.rst:77
msgid ":ref:`pypicloud`"
msgstr ":ссылка:`pypicloud`"

#: ../source/guides/hosting-your-own-index.rst:91
msgid "unmaintained; also cached proxying; authentication, authorisation"
msgstr ""
"не поддерживается; также кэшированное проксирование; аутентификация, "
"авторизация"

#: ../source/guides/hosting-your-own-index.rst:93
msgid ":ref:`pywharf`"
msgstr ":ссылка:`pywharf`"

#: ../source/guides/hosting-your-own-index.rst:96
msgid "unmaintained; serve files in GitHub"
msgstr "не поддерживается; служебные файлы на GitHub"

#: ../source/guides/hosting-your-own-index.rst:98
#: ../source/guides/index-mirrors-and-caches.rst:83
msgid ":ref:`pulppython`"
msgstr ":ссылка:`pulppython`"

#: ../source/guides/hosting-your-own-index.rst:101
msgid "also mirroring, proxying; plugin for Pulp"
msgstr "также зеркалирование, проксирование; плагин для Pulp"

#: ../source/guides/hosting-your-own-index.rst:103
msgid ":ref:`pip2pi`"
msgstr ":ссылка:`pip2pi`"

#: ../source/guides/hosting-your-own-index.rst:106
msgid "also mirroring; manual synchronisation"
msgstr "также зеркальное отображение; ручная синхронизация"

#: ../source/guides/hosting-your-own-index.rst:108
msgid ":ref:`dumb-pypi`"
msgstr ":ссылка:`dumb-pypi`"

#: ../source/guides/hosting-your-own-index.rst:111
msgid "not a server, but a static file site generator"
msgstr "не сервер, а генератор сайтов со статическими файлами"

#: ../source/guides/hosting-your-own-index.rst:113
msgid ":ref:`httpserver`"
msgstr ": ссылка:`httpserver`"

#: ../source/guides/hosting-your-own-index.rst:116
msgid "standard-library"
msgstr "стандартная библиотека"

#: ../source/guides/hosting-your-own-index.rst:118
#: ../source/guides/index-mirrors-and-caches.rst:107
msgid "`Apache <https://httpd.apache.org/>`_"
msgstr "`Apache <https://httpd.apache.org/>`_"

#: ../source/guides/hosting-your-own-index.rst:121
#: ../source/guides/index-mirrors-and-caches.rst:111
msgid ""
"using `mod_rewrite <https://httpd.apache.org/docs/current/mod/mod_rewrite."
"html>`_ and `mod_cache_disk <https://httpd.apache.org/docs/current/mod/"
"mod_cache_disk.html>`_, you can cache requests to package indexes through an "
"Apache server"
msgstr ""
"Используя `мод_перезаписи <https://httpd.apache.org/docs/current/mod/"
"mod_rewrite.html>`_ и `мод_кэш_диска <https://httpd.apache.org/docs/current/"
"mod/mod_cache_disk.html>`_, вы можете кэшировать запросы к индексам пакетов "
"через сервер Apache"

#: ../source/guides/hosting-your-own-index.rst:131
msgid ""
"For complete documentation of the simple repository protocol, see :ref:"
"`simple repository API <simple-repository-api>`."
msgstr ""
"Полную документацию по протоколу простого репозитория смотрите в :ref:"
"`simple repository API <simple-repository-api>`."

#: ../source/guides/hosting-your-own-index.rst:134
msgid ""
"Can be configured to fall back to PyPI (or another package index) if a "
"requested package is missing."
msgstr ""
"Может быть настроен на возврат к PyPI (или другому индексу пакетов), если "
"запрашиваемый пакет отсутствует."

#: ../source/guides/index.rst:4
msgid ""
"**Guides** are focused on accomplishing a specific task and assume that you "
"are already familiar with the basics of Python packaging. If you're looking "
"for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""
"**Руководства** направлены на выполнение конкретной задачи и предполагают, "
"что вы уже знакомы с основами упаковки в Python. Если вы ищете введение в "
"упаковку, смотрите :doc:`/tutorials/index`."

#: ../source/guides/index-mirrors-and-caches.rst:5
msgid "Package index mirrors and caches"
msgstr "Зеркала и кэш индексов пакетов"

#: ../source/guides/index-mirrors-and-caches.rst:8
msgid "2023-11-08"
msgstr "2023-11-08"

#: ../source/guides/index-mirrors-and-caches.rst:10
msgid ""
"Mirroring or caching of PyPI (and other :term:`package indexes <Package "
"Index>`) can be used to speed up local package installation, allow offline "
"work, handle corporate firewalls or just plain Internet flakiness."
msgstr ""
"Зеркалирование или кэширование PyPI (и других : термин:`индексов пакетов "
"<Пакетный индекс>`) может быть использовано для ускорения локальной "
"установки пакетов, для работы в автономном режиме, для работы с "
"корпоративными брандмауэрами или для обычного интернет-флакинга."

#: ../source/guides/index-mirrors-and-caches.rst:15
msgid "There are multiple classes of options in this area:"
msgstr "В этой области существует несколько классов опций:"

#: ../source/guides/index-mirrors-and-caches.rst:17
msgid "local/hosted caching of package indexes."
msgstr "локальное/хостинговое кэширование индексов пакетов."

#: ../source/guides/index-mirrors-and-caches.rst:19
msgid ""
"local/hosted mirroring of a package index. A mirror is a (whole or partial) "
"copy of a package index, which can be used in place of the original index."
msgstr ""
"локальное/хостовое зеркалирование индекса пакета. Зеркало - это (полная или "
"частичная) копия индекса пакета, которая может использоваться вместо "
"оригинального индекса."

#: ../source/guides/index-mirrors-and-caches.rst:23
msgid ""
"private package index with fall-through to public package indexes (for "
"example, to mitigate dependency confusion attacks), also known as a proxy."
msgstr ""
"Частный индекс пакетов с переходом к публичным индексам пакетов (например, "
"для защиты от атак, вызывающих путаницу зависимостей), также известный как "
"прокси."

#: ../source/guides/index-mirrors-and-caches.rst:29
msgid "Caching with pip"
msgstr "Кэширование с помощью pip"

#: ../source/guides/index-mirrors-and-caches.rst:31
msgid ""
"pip provides a number of facilities for speeding up installation by using "
"local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""
"pip предоставляет ряд возможностей для ускорения установки за счет "
"использования локальных кэшированных копий :term:`packages <Distribution "
"Package>`:"

#: ../source/guides/index-mirrors-and-caches.rst:34
msgid ""
":ref:`Fast & local installs <pip:installing from local packages>` by "
"downloading all the requirements for a project and then pointing pip at "
"those downloaded files instead of going to PyPI."
msgstr ""
":ref:`Быстрая и локальная установка <pip:installing from local packages>` за "
"счет загрузки всех требований для проекта и последующего указания pip на эти "
"загруженные файлы вместо обращения к PyPI."

#: ../source/guides/index-mirrors-and-caches.rst:37
msgid ""
"A variation on the above which pre-builds the installation files for the "
"requirements using :ref:`python3 -m pip wheel <pip:pip wheel>`:"
msgstr ""
"Вариант вышеописанного, который предварительно собирает установочные файлы в "
"соответствии с требованиями, используя :ref:`python3 -m pip wheel <pip:pip "
"wheel>`:"

#: ../source/guides/index-mirrors-and-caches.rst:53
msgid "Cache"
msgstr "Кэш"

#: ../source/guides/index-mirrors-and-caches.rst:54
msgid "Mirror"
msgstr "Зеркало"

#: ../source/guides/index-mirrors-and-caches.rst:55
msgid "Proxy"
msgstr "Прокси"

#: ../source/guides/index-mirrors-and-caches.rst:62
msgid ""
"multiple indexes with inheritance; syncing, replication, fail-over; package "
"upload"
msgstr ""
"множественные индексы с наследованием; синхронизация, репликация, обход "
"отказа; загрузка пакетов"

#: ../source/guides/index-mirrors-and-caches.rst:65
msgid ":ref:`bandersnatch`"
msgstr ":ссылка:`bandersnatch`"

#: ../source/guides/index-mirrors-and-caches.rst:75
msgid "custom plugin enables caching; re-routing to other package indexes"
msgstr ""
"Пользовательский плагин включает кэширование; перенаправление к другим "
"индексам пакетов"

#: ../source/guides/index-mirrors-and-caches.rst:81
msgid "unmaintained; authentication, authorisation"
msgstr "не поддерживается; аутентификация, авторизация"

#: ../source/guides/index-mirrors-and-caches.rst:87
msgid "plugin for Pulp; multiple proxied indexes; package upload"
msgstr "плагин для Pulp; несколько проксированных индексов; загрузка пакетов"

#: ../source/guides/index-mirrors-and-caches.rst:89
msgid ":ref:`proxpi`"
msgstr ":ссылка:`proxpi`"

#: ../source/guides/index-mirrors-and-caches.rst:93
#: ../source/guides/index-mirrors-and-caches.rst:99
msgid "multiple proxied indexes"
msgstr "несколько проксированных индексов"

#: ../source/guides/index-mirrors-and-caches.rst:95
msgid ":ref:`nginx_pypi_cache`"
msgstr ": ссылка:`nginx_pypi_cache`"

#: ../source/guides/index-mirrors-and-caches.rst:101
msgid ":ref:`flaskpypiproxy`"
msgstr ":ссылка:`flaskpypiproxy`"

#: ../source/guides/index-mirrors-and-caches.rst:105
msgid "unmaintained"
msgstr "не обслуживается"

#: ../source/guides/installing-scientific-packages.rst:5
msgid "Installing scientific packages"
msgstr "Установка научных пакетов"

#: ../source/guides/installing-scientific-packages.rst:8
msgid ""
"Scientific software tends to have more complex dependencies than most, and "
"it will often have multiple build options to take advantage of different "
"kinds of hardware, or to interoperate with different pieces of external "
"software."
msgstr ""
"Научное программное обеспечение, как правило, имеет более сложные "
"зависимости, чем большинство других, и часто имеет несколько вариантов "
"сборки, чтобы использовать преимущества различных видов оборудования или "
"взаимодействовать с различными частями внешнего программного обеспечения."

#: ../source/guides/installing-scientific-packages.rst:13
msgid ""
"In particular, `NumPy <https://numpy.org/>`__, which provides the basis for "
"most of the software in the `scientific Python stack <https://scientific-"
"python.org>`_ can be configured to interoperate with different FORTRAN "
"libraries, and can take advantage of different levels of vectorized "
"instructions available in modern CPUs."
msgstr ""
"В частности, `NumPy <https://numpy.org/>`__, который является основой для "
"большинства программ в научном стеке Python <https://scientific-python."
"org>`_, может быть настроен на взаимодействие с различными библиотеками "
"FORTRAN и может использовать преимущества различных уровней векторизованных "
"инструкций, доступных в современных процессорах."

#: ../source/guides/installing-scientific-packages.rst:19
msgid ""
"Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-built "
"32-bit and 64-bit binaries in the ``wheel`` format are available for all "
"major operating systems (Windows, macOS, and Linux) on PyPI. Note, however, "
"that on Windows, NumPy binaries are linked against the `ATLAS <https://math-"
"atlas.sourceforge.net/>`__ BLAS/LAPACK library, restricted to SSE2 "
"instructions, so they may not provide optimal linear algebra performance."
msgstr ""
"Начиная с версии 1.10.4 NumPy и версии 1.0.0 SciPy, на PyPI доступны "
"предварительно собранные 32- и 64-битные двоичные файлы в формате ``колеса'' "
"для всех основных операционных систем (Windows, macOS и Linux). Обратите "
"внимание, однако, что в Windows двоичные файлы NumPy скомпонованы с "
"библиотекой BLAS/LAPACK `ATLAS <https://math-atlas.sourceforge.net/>`__, "
"ограниченной инструкциями SSE2, поэтому они могут не обеспечивать "
"оптимальную производительность линейной алгебры."

#: ../source/guides/installing-scientific-packages.rst:26
msgid ""
"There are a number of alternative options for obtaining scientific Python "
"libraries (or any other Python libraries that require a compilation "
"environment to install from source and don't provide pre-built wheel files "
"on PyPI)."
msgstr ""
"Существует несколько альтернативных вариантов получения научных библиотек "
"Python (или любых других библиотек Python, которые требуют среды компиляции "
"для установки из исходного кода и не предоставляют предварительно собранные "
"файлы wheel на PyPI)."

#: ../source/guides/installing-scientific-packages.rst:32
msgid "Building from source"
msgstr "Создание из исходников"

#: ../source/guides/installing-scientific-packages.rst:34
msgid ""
"The same complexity which makes it difficult to distribute NumPy (and many "
"of the projects that depend on it) as wheel files also make them difficult "
"to build from source yourself. However, for intrepid folks that are willing "
"to spend the time wrangling compilers and linkers for both C and FORTRAN, "
"building from source is always an option."
msgstr ""
"Та же сложность, которая затрудняет распространение NumPy (и многих "
"проектов, зависящих от него) в виде файлов на колесах, также затрудняет их "
"самостоятельную сборку из исходных текстов. Однако для смельчаков, готовых "
"потратить время на работу с компиляторами и компоновщиками для C и FORTRAN, "
"сборка из исходных текстов - это всегда вариант."

#: ../source/guides/installing-scientific-packages.rst:42
msgid "Linux distribution packages"
msgstr "Распространяемые пакеты Linux"

#: ../source/guides/installing-scientific-packages.rst:44
msgid ""
"For Linux users, the system package manager will often have pre-compiled "
"versions of various pieces of scientific software, including NumPy and other "
"parts of the scientific Python stack."
msgstr ""
"Для пользователей Linux в системном менеджере пакетов часто есть "
"предварительно скомпилированные версии различных научных программ, включая "
"NumPy и другие части научного стека Python."

#: ../source/guides/installing-scientific-packages.rst:48
msgid ""
"If using versions which may be several months old is acceptable, then this "
"is likely to be a good option (just make sure to allow access to "
"distributions installed into the system Python when using virtual "
"environments)."
msgstr ""
"Если использование версий, возраст которых может составлять несколько "
"месяцев, допустимо, то это, скорее всего, будет хорошим вариантом (только не "
"забудьте разрешить доступ к дистрибутивам, установленным в системе Python, "
"при использовании виртуальных сред)."

#: ../source/guides/installing-scientific-packages.rst:54
msgid "Windows installers"
msgstr "Установщики Windows"

#: ../source/guides/installing-scientific-packages.rst:56
msgid ""
"Many Python projects that don't (or can't) currently publish wheel files at "
"least publish Windows installers, either on PyPI or on their project "
"download page. Using these installers allows users to avoid the need to set "
"up a suitable environment to build extensions locally."
msgstr ""
"Многие Python-проекты, которые в настоящее время не публикуют (или не могут "
"опубликовать) файлы wheel, по крайней мере, публикуют инсталляторы для "
"Windows, либо на PyPI, либо на странице загрузки проекта. Использование этих "
"инсталляторов позволяет пользователям избежать необходимости создавать "
"подходящее окружение для локальной сборки расширений."

#: ../source/guides/installing-scientific-packages.rst:61
msgid ""
"The extensions provided in these installers are typically compatible with "
"the CPython Windows installers published on python.org."
msgstr ""
"Расширения, предоставляемые в этих установщиках, обычно совместимы с "
"установщиками CPython для Windows, опубликованными на python.org."

#: ../source/guides/installing-scientific-packages.rst:64
msgid ""
"As with Linux system packages, the Windows installers will only install into "
"a system Python installation - they do not support installation in virtual "
"environments. Allowing access to distributions installed into the system "
"Python when using virtual environments is a common approach to working "
"around this limitation."
msgstr ""
"Как и в случае с системными пакетами Linux, программы установки Windows "
"будут устанавливаться только в системную установку Python - они не "
"поддерживают установку в виртуальных средах. Предоставление доступа к "
"дистрибутивам, установленным в системный Python, при использовании "
"виртуальных сред - распространенный подход к обходу этого ограничения."

#: ../source/guides/installing-scientific-packages.rst:70
msgid ""
"The :term:`Wheel` project also provides a :command:`wheel convert` "
"subcommand that can convert a Windows :command:`bdist_wininst` installer to "
"a wheel."
msgstr ""
"Проект :term:`Wheel` также предоставляет подкоманду :command:`wheel "
"convert`, которая может преобразовать установщик Windows :command:"
"`bdist_wininst` в wheel."

#: ../source/guides/installing-scientific-packages.rst:77
msgid "macOS installers and package managers"
msgstr "Установщики и менеджеры пакетов macOS"

#: ../source/guides/installing-scientific-packages.rst:79
msgid ""
"Similar to the situation on Windows, many projects (including NumPy) publish "
"macOS installers that are compatible with the macOS CPython binaries "
"published on python.org."
msgstr ""
"Как и в случае с Windows, многие проекты (включая NumPy) публикуют "
"инсталляторы для macOS, совместимые с двоичными файлами macOS CPython, "
"опубликованными на python.org."

#: ../source/guides/installing-scientific-packages.rst:83
msgid ""
"macOS users also have access to Linux distribution style package managers "
"such as ``Homebrew``. The SciPy site has more details on using Homebrew to "
"`install SciPy on macOS <https://scipy.org/install/#macos>`_."
msgstr ""
"Пользователи macOS также имеют доступ к пакетным менеджерам в стиле "
"дистрибутива Linux, таким как ``Homebrew``. На сайте SciPy есть более "
"подробная информация об использовании Homebrew для `установки SciPy на macOS "
"<https://scipy.org/install/#macos>`_."

#: ../source/guides/installing-scientific-packages.rst:89
msgid "SciPy distributions"
msgstr "Дистрибутивы SciPy"

#: ../source/guides/installing-scientific-packages.rst:91
msgid ""
"The SciPy site lists `several distributions <https://scipy.org/install/>`_ "
"that provide the full SciPy stack to end users in an easy to use and update "
"format."
msgstr ""
"На сайте SciPy перечислены `несколько дистрибутивов <https://scipy.org/"
"install/>`_, которые предоставляют полный стек SciPy конечным пользователям "
"в удобном для использования и обновления формате."

#: ../source/guides/installing-scientific-packages.rst:96
msgid ""
"Some of these distributions may not be compatible with the standard ``pip`` "
"and ``virtualenv`` based toolchain."
msgstr ""
"Некоторые из этих дистрибутивов могут быть несовместимы со стандартным "
"инструментарием на базе ``pip`` и ``virtualenv``."

#: ../source/guides/installing-scientific-packages.rst:100
#: ../source/key_projects.rst:812
msgid "Spack"
msgstr "Spack"

#: ../source/guides/installing-scientific-packages.rst:101
msgid ""
"`Spack <https://github.com/spack/spack>`_ is a flexible package manager "
"designed to support multiple versions, configurations, platforms, and "
"compilers. It was built to support the needs of large supercomputing centers "
"and scientific application teams, who must often build software many "
"different ways. Spack is not limited to Python; it can install packages for "
"``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It is non-"
"destructive; installing a new version of one package does not break existing "
"installations, so many configurations can coexist on the same system."
msgstr ""
"`Spack <https://github.com/spack/spack>`_ - это гибкий менеджер пакетов, "
"разработанный для поддержки множества версий, конфигураций, платформ и "
"компиляторов. Он был создан для удовлетворения потребностей крупных "
"суперкомпьютерных центров и команд разработчиков научных приложений, которым "
"часто приходится собирать программное обеспечение разными способами. Spack "
"не ограничивается Python; он может устанавливать пакеты для ``C``, ``C++``, "
"``Fortran``, ``R`` и других языков.  Spack является неразрушающим; установка "
"новой версии одного пакета не нарушает существующие установки, поэтому на "
"одной системе может сосуществовать множество конфигураций."

#: ../source/guides/installing-scientific-packages.rst:110
msgid ""
"Spack offers a simple but powerful syntax that allows users to specify "
"versions and configuration options concisely. Package files are written in "
"pure Python, and they are templated so that it is easy to swap compilers, "
"dependency implementations (like MPI), versions, and build options with a "
"single package file.  Spack also generates *module* files so that packages "
"can be loaded and unloaded from the user's environment."
msgstr ""
"Spack предлагает простой, но мощный синтаксис, который позволяет "
"пользователям лаконично указывать версии и параметры конфигурации. Файлы "
"пакетов написаны на чистом Python, и они сконструированы таким образом, "
"чтобы в одном файле пакета можно было легко менять местами компиляторы, "
"реализации зависимостей (например, MPI), версии и параметры сборки.  Spack "
"также генерирует файлы *модулей*, чтобы пакеты можно было загружать и "
"выгружать из окружения пользователя."

#: ../source/guides/installing-scientific-packages.rst:119
msgid "The conda cross-platform package manager"
msgstr "Кроссплатформенный менеджер пакетов conda"

#: ../source/guides/installing-scientific-packages.rst:121
msgid ""
"``conda`` is an open source (BSD licensed) package management system and "
"environment management system that allows users to install multiple versions "
"of binary software packages and their dependencies, and easily switch "
"between them. It is a cross-platform tool working on Windows, MacOS, and "
"Linux. Conda can be used to package up and distribute all kinds of packages, "
"it is not limited to just Python packages. It has full support for native "
"virtual environments. Conda makes environments first-class citizens, making "
"it easy to create independent environments even for C libraries. It is "
"written in Python, but is Python-agnostic. Conda manages Python itself as a "
"package, so that :command:`conda update python` is possible, in contrast to "
"pip, which only manages Python packages."
msgstr ""
"``conda`` - это система управления пакетами с открытым исходным кодом "
"(лицензия BSD) и система управления окружением, которая позволяет "
"пользователям устанавливать несколько версий бинарных программных пакетов и "
"их зависимостей, а также легко переключаться между ними. Это "
"кроссплатформенный инструмент, работающий под Windows, MacOS и Linux. Conda "
"может использоваться для упаковки и распространения всех видов пакетов, она "
"не ограничивается только пакетами Python. Она имеет полную поддержку "
"собственных виртуальных сред. Conda делает окружения гражданами первого "
"класса, позволяя легко создавать независимые окружения даже для библиотек на "
"Си. Она написана на Python, но является Python-агностичной. Conda управляет "
"самим Python как пакетом, поэтому возможна команда :`conda update python`, в "
"отличие от pip, который управляет только пакетами Python."

#: ../source/guides/installing-scientific-packages.rst:133
msgid ""
"Anaconda `Anaconda <https://docs.anaconda.com/anaconda/>`_ is a Python "
"distribution published by Anaconda, Inc. It is a stable collection of Open "
"Source packages for big data and scientific use, and a collection of "
"Graphical Interface utilities for managing conda environments."
msgstr ""
"Anaconda `Anaconda <https://docs.anaconda.com/anaconda/>`_ - дистрибутив "
"Python, опубликованный компанией Anaconda, Inc. Это стабильная коллекция "
"пакетов с открытым исходным кодом для работы с большими данными и научными "
"исследованиями, а также набор утилит с графическим интерфейсом для "
"управления средами conda."

#: ../source/guides/installing-scientific-packages.rst:135
msgid ""
"In addition to the full distribution provided by Anaconda, the conda package "
"manager itself is available in  `miniconda <https://docs.anaconda.com/"
"miniconda/>`_, `miniforge <https://github.com/conda-forge/miniforge>`_, and "
"`pixi <https://pixi.sh/>`_."
msgstr ""
"В дополнение к полному дистрибутиву, предоставляемому Anaconda, сам менеджер "
"пакетов conda доступен в `miniconda <https://docs.anaconda.com/miniconda/"
">`_, `miniforge <https://github.com/conda-forge/miniforge>`_ и `pixi "
"<https://pixi.sh/>`_."

#: ../source/guides/installing-scientific-packages.rst:138
msgid ""
"Conda packages are available on multiple channels on Anaconda.org, including "
"the default channel supported by Anaconda, Inc, the community supported "
"conda-forge channel, which provides a wide variety of pre-built packages, "
"and some domain-specific package collections."
msgstr ""
"Пакеты Conda доступны по нескольким каналам на Anaconda.org, включая канал "
"по умолчанию, поддерживаемый Anaconda, Inc, канал conda-forge, "
"поддерживаемый сообществом, который предоставляет широкий спектр "
"предварительно созданных пакетов, а также некоторые коллекции пакетов, "
"специфичные для конкретного домена."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:4
msgid "Installing stand alone command line tools"
msgstr "Установка отдельных инструментов командной строки"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:6
msgid ""
"Many packages provide command line applications. Examples of such packages "
"are `mypy <https://github.com/python/mypy>`_, `flake8 <https://github.com/"
"PyCQA/flake8>`_, `black <https://github.com/psf/black>`_, and :ref:`pipenv`."
msgstr ""
"Многие пакеты предоставляют приложения командной строки. Примерами таких "
"пакетов являются: `mypy <https://github.com/python/mypy>`_, `flake8 <https://"
"github.com/PyCQA/flake8>`_, `black <https://github.com/psf/black>`_ и :ref:"
"`pipenv`."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:12
msgid ""
"Usually you want to be able to access these applications from anywhere on "
"your system, but installing packages and their dependencies to the same "
"global environment can cause version conflicts and break dependencies the "
"operating system has on Python packages."
msgstr ""
"Обычно вы хотите иметь доступ к этим приложениям из любой точки системы, но "
"установка пакетов и их зависимостей в одно и то же глобальное окружение "
"может привести к конфликту версий и нарушению зависимостей операционной "
"системы от пакетов Python."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:17
msgid ""
":ref:`pipx` solves this by creating a virtual environment for each package, "
"while also ensuring that its applications are accessible through a directory "
"that is on your ``$PATH``. This allows each package to be upgraded or "
"uninstalled without causing conflicts with other packages, and allows you to "
"safely run the applications from anywhere."
msgstr ""
":ref:`pipx` решает эту проблему, создавая виртуальное окружение для каждого "
"пакета, а также обеспечивая доступ к его приложениям через каталог, который "
"находится в вашем ``$PATH``. Это позволяет обновлять или удалять каждый "
"пакет, не вызывая конфликтов с другими пакетами, и позволяет безопасно "
"запускать приложения из любого места."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:23
msgid "pipx only works with Python 3.6+."
msgstr "pipx работает только с Python 3.6+."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:25
msgid "pipx is installed with pip:"
msgstr "pipx устанавливается вместе с pip:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:43
msgid ""
"``ensurepath`` ensures that the application directory is on your ``$PATH``. "
"You may need to restart your terminal for this update to take effect."
msgstr ""
"``ensurepath`` гарантирует, что каталог приложения находится в вашем "
"``$PATH``. Возможно, вам потребуется перезапустить терминал, чтобы "
"обновление вступило в силу."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:46
msgid ""
"Now you can install packages with ``pipx install`` and run the package's "
"applications(s) from anywhere."
msgstr ""
"Теперь вы можете устанавливать пакеты с помощью ``pipx install`` и запускать "
"приложения пакета из любого места."

#: ../source/guides/installing-stand-alone-command-line-tools.rst:54
#: ../source/specifications/entry-points.rst:114
msgid "For example:"
msgstr "Например:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:76
msgid ""
"To see a list of packages installed with pipx and which applications are "
"available, use ``pipx list``:"
msgstr ""
"Чтобы посмотреть список пакетов, установленных с помощью pipx, и доступных "
"приложений, используйте ``pipx list``:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:100
msgid "To upgrade or uninstall a package:"
msgstr "Чтобы обновить или удалить пакет:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:107
msgid "pipx can be upgraded or uninstalled with pip:"
msgstr "pipx можно обновить или удалить с помощью pip:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:123
msgid ""
"pipx also allows you to install and run the latest version of an application "
"in a temporary, ephemeral environment. For example:"
msgstr ""
"pipx также позволяет установить и запустить последнюю версию приложения во "
"временной, эфемерной среде. Например:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:130
msgid "To see the full list of commands pipx offers, run:"
msgstr ""
"Чтобы увидеть полный список команд, которые предлагает pipx, выполните "
"команду:"

#: ../source/guides/installing-stand-alone-command-line-tools.rst:136
msgid "You can learn more about pipx at https://pipx.pypa.io/."
msgstr "Подробнее о pipx можно узнать на сайте https://pipx.pypa.io/."

#: ../source/guides/installing-using-linux-tools.rst:5
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr "Установка pip/setuptools/wheel через менеджеры пакетов Linux"

#: ../source/guides/installing-using-linux-tools.rst:8
msgid "2021-07-26"
msgstr "2021-07-26"

#: ../source/guides/installing-using-linux-tools.rst:10
msgid ""
"This section covers how to install :ref:`pip`, :ref:`setuptools`, and :ref:"
"`wheel` using Linux package managers."
msgstr ""
"В этом разделе рассказывается о том, как установить :ref:`pip`, :ref:"
"`setuptools` и :ref:`wheel` с помощью менеджеров пакетов Linux."

#: ../source/guides/installing-using-linux-tools.rst:13
msgid ""
"If you're using a Python that was downloaded from `python.org <https://www."
"python.org>`_, then this section does not apply.  See the :ref:"
"`installing_requirements` section instead."
msgstr ""
"Если вы используете Python, загруженный с сайта `python.org <https://www."
"python.org>`_, то этот раздел не применим.  Вместо этого смотрите раздел :"
"ref:`installing_requirements`."

#: ../source/guides/installing-using-linux-tools.rst:17
msgid ""
"Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, "
"and :ref:`wheel` supported by a specific Linux Distribution to be outdated "
"by the time it's released to the public, and updates generally only occur "
"for security reasons, not for feature updates.  For certain Distributions, "
"there are additional repositories that can be enabled to provide newer "
"versions.  The repositories we know about are explained below."
msgstr ""
"Обратите внимание, что обычно версии :ref:`pip`, :ref:`setuptools` и :ref:"
"`wheel`, поддерживаемые конкретным дистрибутивом Linux, устаревают к моменту "
"его публичного выпуска, а обновления обычно происходят только по "
"соображениям безопасности, а не для обновления функций.  Для некоторых "
"дистрибутивов существуют дополнительные репозитории, которые могут быть "
"включены для получения более новых версий.  Репозитории, о которых мы знаем, "
"описаны ниже."

#: ../source/guides/installing-using-linux-tools.rst:24
msgid ""
"Also note that it's somewhat common for Distributions to apply patches for "
"the sake of security and normalization to their own standards.  In some "
"cases, this can lead to bugs or unexpected behaviors that vary from the "
"original unpatched versions.  When this is known, we will make note of it "
"below."
msgstr ""
"Также обратите внимание, что дистрибутивы нередко применяют исправления в "
"целях безопасности и приведения их в соответствие с собственными "
"стандартами.  В некоторых случаях это может привести к ошибкам или "
"неожиданному поведению, отличающемуся от первоначальных непропатченных "
"версий.  Когда об этом станет известно, мы сообщим об этом ниже."

#: ../source/guides/installing-using-linux-tools.rst:31
msgid "Fedora"
msgstr "Fedora"

#: ../source/guides/installing-using-linux-tools.rst:37
msgid ""
"To learn more about Python in Fedora, please visit the `official Fedora "
"docs`_, `Python Classroom`_ or `Fedora Loves Python`_."
msgstr ""
"Чтобы узнать больше о Python в Fedora, посетите `официальную документацию "
"Fedora`_, `Python Classroom`_ или `Fedora Loves Python`_."

#: ../source/guides/installing-using-linux-tools.rst:45
msgid "CentOS/RHEL"
msgstr "CentOS/RHEL"

#: ../source/guides/installing-using-linux-tools.rst:47
msgid ""
"CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core "
"repositories, although :ref:`setuptools` is installed by default."
msgstr ""
"CentOS и RHEL не предлагают :ref:`pip` или :ref:`wheel` в своих основных "
"репозиториях, хотя :ref:`setuptools` установлен по умолчанию."

#: ../source/guides/installing-using-linux-tools.rst:50
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr "Чтобы установить pip и wheel для системы Python, есть два варианта:"

#: ../source/guides/installing-using-linux-tools.rst:52
msgid ""
"Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using "
"`these instructions <https://docs.fedoraproject.org/en-US/epel/getting-"
"started/>`__. On EPEL 7, you can install pip and wheel like so:"
msgstr ""
"Включите `репозиторий EPEL <https://fedoraproject.org/wiki/EPEL>`_, "
"используя `эти инструкции <https://docs.fedoraproject.org/en-US/epel/getting-"
"started/>`__. На EPEL 7 вы можете установить pip и wheel следующим образом:"

#: ../source/guides/installing-using-linux-tools.rst:61
msgid ""
"Since EPEL only offers extra, non-conflicting packages, EPEL does not offer "
"setuptools, since it's in the core repository."
msgstr ""
"Поскольку EPEL предлагает только дополнительные, не противоречащие друг "
"другу пакеты, EPEL не предлагает setuptools, поскольку он находится в "
"основном репозитории."

#: ../source/guides/installing-using-linux-tools.rst:65
msgid ""
"Enable the `PyPA Copr Repo <https://copr.fedorainfracloud.org/coprs/pypa/"
"pypa/>`_ using `these instructions <https://fedoraproject.org/wiki/"
"Infrastructure/Fedorahosted-retirement>`__ [1]_. You can install pip and "
"wheel like so:"
msgstr ""
"Включите `PyPA Copr Repo <https://copr.fedorainfracloud.org/coprs/pypa/pypa/"
">`_, используя `эти инструкции <https://fedoraproject.org/wiki/"
"Infrastructure/Fedorahosted-retirement>`__ [1]_. Вы можете установить pip и "
"wheel следующим образом:"

#: ../source/guides/installing-using-linux-tools.rst:74
msgid "To additionally upgrade setuptools, run:"
msgstr "Чтобы дополнительно обновить setuptools, запустите:"

#: ../source/guides/installing-using-linux-tools.rst:81
msgid ""
"To install pip, wheel, and setuptools, in a parallel, non-system environment "
"(using yum) then there are two options:"
msgstr ""
"Чтобы установить pip, wheel и setuptools в параллельном, несистемном "
"окружении (с помощью yum), есть два варианта:"

#: ../source/guides/installing-using-linux-tools.rst:85
msgid ""
"Use the \"Software Collections\" feature to enable a parallel collection "
"that includes pip, setuptools, and wheel."
msgstr ""
"Используйте функцию \"Коллекции программ\", чтобы включить параллельную "
"коллекцию, включающую pip, setuptools и wheel."

#: ../source/guides/installing-using-linux-tools.rst:88
msgid ""
"For Redhat, see here: https://developers.redhat.com/products/"
"softwarecollections/overview"
msgstr ""
"Для Redhat смотрите здесь: https://developers.redhat.com/products/"
"softwarecollections/overview"

#: ../source/guides/installing-using-linux-tools.rst:90
msgid "For CentOS, see here: https://github.com/sclorg"
msgstr "Для CentOS смотрите здесь: https://github.com/sclorg"

#: ../source/guides/installing-using-linux-tools.rst:92
msgid "Be aware that collections may not contain the most recent versions."
msgstr "Помните, что коллекции могут содержать не самые последние версии."

#: ../source/guides/installing-using-linux-tools.rst:94
msgid ""
"Enable the `IUS repository <https://ius.io/setup>`_ and install one of the "
"`parallel-installable <https://ius.io/usage#parallel-installable-packages>`_ "
"Pythons, along with pip, setuptools, and wheel, which are kept fairly up to "
"date."
msgstr ""
"Включите `IUS-репозиторий <https://ius.io/setup>`_ и установите один из "
"`параллельно устанавливаемых <https://ius.io/usage#parallel-installable-"
"packages>`_ Pythons, а также pip, setuptools и wheel, которые поддерживаются "
"в актуальном состоянии."

#: ../source/guides/installing-using-linux-tools.rst:100
msgid "For example, for Python 3.4 on CentOS7/RHEL7:"
msgstr "Например, для Python 3.4 на CentOS7/RHEL7:"

#: ../source/guides/installing-using-linux-tools.rst:108
msgid "openSUSE"
msgstr "openSUSE"

#: ../source/guides/installing-using-linux-tools.rst:118
msgid "Debian/Ubuntu and derivatives"
msgstr "Debian/Ubuntu и производные"

#: ../source/guides/installing-using-linux-tools.rst:120
msgid "Firstly, update and refresh repository lists by running this command:"
msgstr ""
"Во-первых, обновите и дополните списки репозиториев, выполнив эту команду:"

#: ../source/guides/installing-using-linux-tools.rst:129
msgid ""
"Recent Debian/Ubuntu versions have modified pip to use the `\"User Scheme\" "
"<https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by default, "
"which is a significant behavior change that can be surprising to some users."
msgstr ""
"В последних версиях Debian/Ubuntu pip был модифицирован, чтобы по умолчанию "
"использовать `\"Схему пользователя\" <https://pip.pypa.io/en/stable/"
"user_guide/#user-installs>`_, что является значительным изменением "
"поведения, которое может быть неожиданным для некоторых пользователей."

#: ../source/guides/installing-using-linux-tools.rst:135
msgid "Arch Linux"
msgstr "Arch Linux"

#: ../source/guides/installing-using-linux-tools.rst:143
msgid ""
"Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so the "
"only option is to manually place the repo files as described."
msgstr ""
"В настоящее время для CentOS/RHEL не существует плагина yum \"copr\", "
"поэтому единственным вариантом является ручное размещение файлов репо, как "
"описано выше."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:2
msgid "Install packages in a virtual environment using pip and venv"
msgstr "Установка пакетов в виртуальной среде с использованием pip и venv"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:4
msgid ""
"This guide discusses how to create and activate a virtual environment using "
"the standard library's virtual environment tool :ref:`venv` and install "
"packages. The guide covers how to:"
msgstr ""
"В этом руководстве рассказывается о том, как создать и активировать "
"виртуальную среду с помощью инструмента виртуальной среды стандартной "
"библиотеки :ref:`venv` и установить пакеты. В руководстве рассказывается о "
"том, как:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:8
msgid "Create and activate a virtual environment"
msgstr "Создание и активация виртуальной среды"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:9
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:153
msgid "Prepare pip"
msgstr "Подготовьте pip"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:10
msgid "Install packages into a virtual environment using the ``pip`` command"
msgstr "Установка пакетов в виртуальную среду с помощью команды ``pip``"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:11
msgid "Use and create a requirements file"
msgstr "Использование и создание файла требований"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:14
msgid ""
"This guide applies to supported versions of Python, currently 3.8 and higher."
msgstr ""
"Это руководство относится к поддерживаемым версиям Python, в настоящее время "
"3.8 и выше."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:18
msgid ""
"This guide uses the term **package** to refer to a :term:`Distribution "
"Package`, which commonly is installed from an external host. This differs "
"from the term :term:`Import Package` which refers to import modules in your "
"Python source code."
msgstr ""
"В этом руководстве используется термин **упаковка** для обозначения термина :"
"термин: \" Пакет распределения \" , который обычно устанавливается из "
"внешнего хоста. Это отличается от термина :term:`Import Package', который "
"относится к модулям импорта в исходном коде Python."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:25
msgid ""
"This guide has the prerequisite that you are using an official Python "
"version obtained from <https://www.python.org/downloads/>. If you are using "
"your operating system's package manager to install Python, please ensure "
"that Python is installed before proceeding with these steps."
msgstr ""
"Это руководство содержит обязательное условие - использование официальной "
"версии Python, полученной по адресу <https://www.python.org/downloads/>. "
"Если вы используете менеджер пакетов вашей операционной системы для "
"установки Python, пожалуйста, убедитесь, что Python установлен, прежде чем "
"приступать к выполнению этих шагов."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:32
msgid "Create and Use Virtual Environments"
msgstr "Создание и использование виртуальных сред"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:35
msgid "Create a new virtual environment"
msgstr "Создайте новую виртуальную среду"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:37
msgid ""
":ref:`venv` (for Python 3) allows you to manage separate package "
"installations for different projects. It creates a \"virtual\" isolated "
"Python installation. When you switch projects, you can create a new virtual "
"environment which is isolated from other virtual environments. You benefit "
"from the virtual environment since packages can be installed confidently and "
"will not interfere with another project's environment."
msgstr ""
":ref:`venv` (для Python 3) позволяет управлять отдельными установками "
"пакетов для разных проектов. Она создает \"виртуальную\" изолированную "
"установку Python. При смене проекта вы можете создать новую виртуальную "
"среду, изолированную от других виртуальных сред. Вы получаете преимущество "
"от виртуальной среды, так как пакеты можно устанавливать уверенно и они не "
"будут мешать среде другого проекта."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:45
msgid ""
"It is recommended to use a virtual environment when working with third party "
"packages."
msgstr ""
"При работе с пакетами сторонних производителей рекомендуется использовать "
"виртуальную среду."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:48
msgid ""
"To create a virtual environment, go to your project's directory and run the "
"following command. This will create a new virtual environment in a local "
"folder named ``.venv``:"
msgstr ""
"Чтобы создать виртуальную среду, перейдите в каталог вашего проекта и "
"выполните следующую команду. Это создаст новое виртуальное окружение в "
"локальной папке с именем ``.venv``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:64
msgid ""
"The second argument is the location to create the virtual environment. "
"Generally, you can just create this in your project and call it ``.venv``."
msgstr ""
"Второй аргумент - это место создания виртуального окружения. Как правило, вы "
"можете просто создать его в своем проекте и назвать ``.venv``."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:67
msgid ""
"``venv`` will create a virtual Python installation in the ``.venv`` folder."
msgstr "``venv`` создаст виртуальную установку Python в папке ``.venv``."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:69
msgid ""
"You should exclude your virtual environment directory from your version "
"control system using ``.gitignore`` or similar."
msgstr ""
"Вы должны исключить каталог виртуального окружения из системы контроля "
"версий с помощью ``.gitignore`` или аналогичного инструмента."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:74
msgid "Activate a virtual environment"
msgstr "Активация виртуальной среды"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:76
msgid ""
"Before you can start installing or using packages in your virtual "
"environment you'll need to ``activate`` it. Activating a virtual environment "
"will put the virtual environment-specific ``python`` and ``pip`` executables "
"into your shell's ``PATH``."
msgstr ""
"Прежде чем вы начнете устанавливать или использовать пакеты в виртуальной "
"среде, ее нужно будет ``активировать``. Активация виртуальной среды поместит "
"специфические для виртуальной среды исполняемые файлы ``python`` и ``pip`` в "
"``PATH`` вашей оболочки."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:93
msgid ""
"To confirm the virtual environment is activated, check the location of your "
"Python interpreter:"
msgstr ""
"Чтобы убедиться, что виртуальная среда активирована, проверьте расположение "
"вашего интерпретатора Python:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:108
msgid ""
"While the virtual environment is active, the above command will output a "
"filepath that includes the ``.venv`` directory, by ending with the following:"
msgstr ""
"Пока виртуальная среда активна, приведенная выше команда выведет путь к "
"файлу, включающий каталог ``.venv``, заканчивающийся следующим образом:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:124
msgid ""
"While a virtual environment is activated, pip will install packages into "
"that specific environment. This enables you to import and use packages in "
"your Python application."
msgstr ""
"Пока виртуальная среда активирована, pip будет устанавливать пакеты в эту "
"среду. Это позволит вам импортировать и использовать пакеты в вашем "
"приложении Python."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:130
msgid "Deactivate a virtual environment"
msgstr "Деактивация виртуальной среды"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
msgid ""
"If you want to switch projects or leave your virtual environment, "
"``deactivate`` the environment:"
msgstr ""
"Если вы хотите сменить проект или покинуть виртуальную среду, "
"``деактивируйте`` среду:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:140
msgid ""
"Closing your shell will deactivate the virtual environment. If you open a "
"new shell window and want to use the virtual environment, reactivate it."
msgstr ""
"Закрытие оболочки приведет к деактивации виртуальной среды. Если вы откроете "
"новое окно оболочки и захотите использовать виртуальную среду, активируйте "
"ее снова."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:145
msgid "Reactivate a virtual environment"
msgstr "Повторная активация виртуальной среды"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:147
msgid ""
"If you want to reactivate an existing virtual environment, follow the same "
"instructions about activating a virtual environment. There's no need to "
"create a new virtual environment."
msgstr ""
"Если вы хотите повторно активировать существующую виртуальную среду, "
"следуйте тем же инструкциям по активации виртуальной среды. Создавать новую "
"виртуальную среду не нужно."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:155
msgid ""
":ref:`pip` is the reference Python package manager. It's used to install and "
"update packages into a virtual environment."
msgstr ""
":ref:`pip` - эталонный менеджер пакетов Python. Он используется для "
"установки и обновления пакетов в виртуальной среде."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:161
msgid ""
"The Python installers for macOS include pip. On Linux, you may have to "
"install an additional package such as ``python3-pip``. You can make sure "
"that pip is up-to-date by running:"
msgstr ""
"Python установщики для macOS включают pip. На Linux вам, возможно, придется "
"установить дополнительный пакет, такой как ``python3-pip``. Вы можете "
"убедиться, что pip обновляется при запуске:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:170
msgid ""
"Afterwards, you should have the latest version of pip installed in your user "
"site:"
msgstr ""
"После этого на вашем пользовательском сайте должна быть установлена "
"последняя версия pip:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:179
msgid ""
"The Python installers for Windows include pip. You can make sure that pip is "
"up-to-date by running:"
msgstr ""
"Установщики Python для Windows включают pip. Вы можете убедиться, что pip "
"обновлён до последней версии, запустив:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:187
msgid "Afterwards, you should have the latest version of pip:"
msgstr "После этого у вас должна быть установлена последняя версия pip:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:195
msgid "Install packages using pip"
msgstr "Установка пакетов с помощью pip"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:197
msgid ""
"When your virtual environment is activated, you can install packages. Use "
"the ``pip install`` command to install packages."
msgstr ""
"Когда ваша виртуальная среда активирована, вы можете устанавливать пакеты. "
"Для установки пакетов используйте команду ``pip install``."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:201
msgid "Install a package"
msgstr "Установить пакет"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:203
#, fuzzy
#| msgid ""
#| "For example,let's install the `Requests`_ library from the :term:`Python "
#| "Package Index (PyPI)`:"
msgid ""
"For example, let's install the `Requests`_ library from the :term:`Python "
"Package Index (PyPI)`:"
msgstr ""
"Например, давайте установим библиотеку `Requests`_ из :term:`Python Package "
"Index (PyPI)`:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:218
msgid ""
"pip should download requests and all of its dependencies and install them:"
msgstr "pip должен загружать запросы и все его зависимости и устанавливать их:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:239
msgid "Install a specific package version"
msgstr "Установить конкретную версию пакета"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:241
msgid ""
"pip allows you to specify which version of a package to install using :term:"
"`version specifiers <Version Specifier>`. For example, to install a specific "
"version of ``requests``:"
msgstr ""
"pip позволяет указать, какую версию пакета следует установить, используя :"
"term:`определители версии <Определитель версии>`. Например, чтобы установить "
"определенную версию пакета ``requests``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:257
msgid "To install the latest ``2.x`` release of requests:"
msgstr "Чтобы установить последний ``2.x`` выпуск requests:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:271
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""
"Чтобы установить предварительные версии пакетов, используйте флаг ``--pre``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:287
msgid "Install extras"
msgstr "Установка дополнительных"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:289
msgid ""
"Some packages have optional `extras`_. You can tell pip to install these by "
"specifying the extra in brackets:"
msgstr ""
"Некоторые пакеты содержат дополнительные `extras`_. Вы можете указать pip на "
"их установку, указав в скобках дополнительное дополнение:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:309
msgid "Install a package from source"
msgstr "Установите пакет из исходного кода"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:311
msgid ""
"pip can install a package directly from its source code. For example, to "
"install the source code in the ``google-auth`` directory:"
msgstr ""
"pip может установить пакет непосредственно из его исходного кода. Например, "
"чтобы установить исходный код в каталог ``google-auth``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:328
msgid ""
"Additionally, pip can install packages from source in :doc:`development mode "
"<setuptools:userguide/development_mode>`, meaning that changes to the source "
"directory will immediately affect the installed package without needing to "
"re-install:"
msgstr ""
"Кроме того, pip может устанавливать пакеты из исходного кода в :doc:`режиме "
"разработки <setuptools:userguide/development_mode>`, что означает, что "
"изменения в каталоге исходного кода немедленно повлияют на установленный "
"пакет без необходимости повторной установки:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:347
msgid "Install from version control systems"
msgstr "Установка из систем контроля версий"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:349
msgid ""
"pip can install packages directly from their version control system. For "
"example, you can install directly from a git repository:"
msgstr ""
"pip может устанавливать пакеты непосредственно из их системы контроля "
"версий. Например, вы можете установить пакет непосредственно из репозитория "
"git:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:356
msgid ""
"For more information on supported version control systems and syntax, see "
"pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"Дополнительную информацию о поддерживаемых системах контроля версий и "
"синтаксисе см. в документации pip по :ref:`VCS Support <pip:VCS Support>`."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:361
msgid "Install from local archives"
msgstr "Установка из локального архива"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:363
msgid ""
"If you have a local copy of a :term:`Distribution Package`'s archive (a zip, "
"wheel, or tar file) you can install it directly with pip:"
msgstr ""
"Если у вас есть локальная копия архива :term:`Distribution Package` (файл "
"zip, wheel или tar), вы можете установить его напрямую с помощью pip:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:378
msgid ""
"If you have a directory containing archives of multiple packages, you can "
"tell pip to look for packages there and not to use the :term:`Python Package "
"Index (PyPI)` at all:"
msgstr ""
"Если у вас есть каталог, содержащий архивы нескольких пакетов, вы можете "
"указать pip искать пакеты там и не использовать :term:`Python Package Index "
"(PyPI)` вообще:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:394
msgid ""
"This is useful if you are installing packages on a system with limited "
"connectivity or if you want to strictly control the origin of distribution "
"packages."
msgstr ""
"Это полезно, если вы устанавливаете пакеты на систему с ограниченными "
"возможностями подключения или хотите строго контролировать происхождение "
"дистрибутивных пакетов."

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:400
msgid "Install from other package indexes"
msgstr "Установка из других индексов пакетов"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:402
msgid ""
"If you want to download packages from a different index than the :term:"
"`Python Package Index (PyPI)`, you can use the ``--index-url`` flag:"
msgstr ""
"Если вы хотите загрузить пакеты из индекса, отличного от индекса :term:"
"`Python Package Index (PyPI)`, вы можете использовать флаг ``--index-url``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:417
msgid ""
"If you want to allow packages from both the :term:`Python Package Index "
"(PyPI)` and a separate index, you can use the ``--extra-index-url`` flag "
"instead:"
msgstr ""
"Если вы хотите разрешить пакеты как из :term:`Python Package Index (PyPI)`, "
"так и из отдельного индекса, вы можете использовать флаг ``--extra-index-"
"url`` вместо этого:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:434
#: ../source/tutorials/installing-packages.rst:393
msgid "Upgrading packages"
msgstr "Обновление пакетов"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:436
msgid ""
"pip can upgrade packages in-place using the ``--upgrade`` flag. For example, "
"to install the latest version of ``requests`` and all of its dependencies:"
msgstr ""
"pip может обновлять пакеты на месте, используя флаг ``--upgrade``. Например, "
"для установки последней версии ``requests`` и всех его зависимостей:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:452
msgid "Using a requirements file"
msgstr "Использование файла требований"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:454
msgid ""
"Instead of installing packages individually, pip allows you to declare all "
"dependencies in a :ref:`Requirements File <pip:Requirements Files>`. For "
"example you could create a :file:`requirements.txt` file containing:"
msgstr ""
"Вместо того чтобы устанавливать пакеты по отдельности, pip позволяет "
"объявить все зависимости в :ref:`Requirements File <pip:Requirements "
"Files>`. Например, вы можете создать файл :file:`requirements.txt`, "
"содержащий:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:463
msgid ""
"And tell pip to install all of the packages in this file using the ``-r`` "
"flag:"
msgstr ""
"И укажите pip установить все пакеты из этого файла, используя флаг ``-r``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:478
msgid "Freezing dependencies"
msgstr "Заморозка зависимостей"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:480
msgid ""
"Pip can export a list of all installed packages and their versions using the "
"``freeze`` command:"
msgstr ""
"Pip может экспортировать список всех установленных пакетов и их версий с "
"помощью команды ``freeze``:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:495
msgid "Which will output a list of package specifiers such as:"
msgstr "Что выведет список спецификаторов пакетов, например:"

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:511
msgid ""
"The ``pip freeze`` command is useful for creating :ref:`pip:Requirements "
"Files` that can re-create the exact versions of all packages installed in an "
"environment."
msgstr ""
"Команда ``pip freeze`` полезна для создания :ref:`pip:Requirements Files``, "
"которые могут воссоздать точные версии всех пакетов, установленных в "
"окружении."

#: ../source/guides/installing-using-virtualenv.rst:2
msgid "Installing packages using virtualenv"
msgstr "Установка пакетов с помощью virtualenv"

#: ../source/guides/installing-using-virtualenv.rst:4
msgid ""
"This guide discusses how to install packages using :ref:`pip` and :ref:"
"`virtualenv`, a tool to create isolated Python environments."
msgstr ""
"В этом руководстве рассказывается о том, как устанавливать пакеты с помощью :"
"ref:`pip` и :ref:`virtualenv`, инструмента для создания изолированных "
"окружений Python."

#: ../source/guides/installing-using-virtualenv.rst:8
msgid ""
"This \"how to\" guide on installing packages and using :ref:`virtualenv` is "
"under development. Please refer to the :ref:`virtualenv` documentation for "
"details on installation and usage."
msgstr ""
"Это руководство по установке пакетов и использованию :ref:`virtualenv` "
"находится в стадии разработки. Пожалуйста, обратитесь к документации по :ref:"
"`virtualenv` для получения подробной информации об установке и использовании."

#: ../source/guides/installing-using-virtualenv.rst:13
msgid ""
"This doc uses the term **package** to refer to a :term:`Distribution "
"Package`  which is different from an :term:`Import Package` that which is "
"used to import modules in your Python source code."
msgstr ""
"В этом документе термин **пакет** используется для обозначения :term:"
"`Distribution Package`, который отличается от :term:`Import Package`, "
"который используется для импорта модулей в исходный код Python."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:6
msgid "Licensing examples and user scenarios"
msgstr "Примеры лицензирования и пользовательские сценарии"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:9
#, fuzzy
#| msgid ""
#| ":pep:`639` has specified the way to declare a project's license and paths "
#| "to license files and other legally required information. This document "
#| "aims to provide clear guidance how to migrate from the legacy to the "
#| "standardized way of declaring licenses. Make sure your preferred build "
#| "backend supports :pep:`639` before trying to apply the newer guidelines. "
#| "As of February 2025, :doc:`setuptools <setuptools:userguide/"
#| "pyproject_config>` and :ref:`flit <flit:pyproject_toml_project>` don't "
#| "support :pep:`639` yet."
msgid ""
":pep:`639` has specified the way to declare a project's license and paths to "
"license files and other legally required information. This document aims to "
"provide clear guidance how to migrate from the legacy to the standardized "
"way of declaring licenses. Make sure your preferred build backend supports :"
"pep:`639` before trying to apply the newer guidelines."
msgstr ""
"В :pep:`639` указан способ объявления лицензии проекта, пути к файлам "
"лицензии и другая юридически необходимая информация. Этот документ призван "
"дать четкое руководство по переходу от устаревшего к стандартизированному "
"способу объявления лицензий. Убедитесь, что ваш бэкенд сборки поддерживает :"
"pep:`639`, прежде чем пытаться применить новые рекомендации. По состоянию на "
"февраль 2025 года, :doc:`setuptools <setuptools:userguide/pyproject_config>` "
"и :ref:`flit <flit:pyproject_toml_project>` пока не поддерживают :pep:`639`."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:18
msgid "Licensing Examples"
msgstr "Примеры лицензирования"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:23
msgid "Basic example"
msgstr "Базовый пример"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:25
msgid ""
"The Setuptools project itself, as of `version 75.6.0 <setuptools7560_>`__, "
"does not use the ``License`` field in its own project source metadata. "
"Further, it no longer explicitly specifies ``license_file``/"
"``license_files`` as it did previously, since Setuptools relies on its own "
"automatic inclusion of license-related files matching common patterns, such "
"as the :file:`LICENSE` file it uses."
msgstr ""
"Сам проект Setuptools, начиная с `версии 75.6.0 <setuptools7560_>`__, не "
"использует поле ``Лицензия`` в собственных метаданных источника проекта. "
"Кроме того, он больше не указывает явно ``license_file``/ ``license_files``, "
"как это было раньше, поскольку Setuptools полагается на собственное "
"автоматическое включение файлов, связанных с лицензией, соответствующих "
"общим шаблонам, таким как файл :file:`LICENSE``, который он использует."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:32
msgid ""
"It includes the following license-related metadata in its :file:`pyproject."
"toml`:"
msgstr ""
"Он включает следующие связанные с лицензией метаданные в свой :file:"
"`pyproject.toml`:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:42
msgid "The simplest migration to PEP 639 would consist of using this instead:"
msgstr ""
"Самый простой переход на PEP 639 будет заключаться в использовании этого "
"варианта:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:49
msgid "Or, if the project used :file:`setup.cfg`, in its ``[metadata]`` table:"
msgstr ""
"Или, если проект использовал :file:`setup.cfg`, в его таблице ``[metadata]``:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:56
msgid "The output Core Metadata for the distribution packages would then be:"
msgstr ""
"Выходные метаданные Core Metadata для дистрибутивных пакетов будут такими:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:63
msgid ""
"The :file:`LICENSE` file would be stored at :file:`/setuptools-{VERSION}/"
"LICENSE` in the sdist and :file:`/setuptools-{VERSION}.dist-info/licenses/"
"LICENSE` in the wheel, and unpacked from there into the site directory (e."
"g. :file:`site-packages/`) on installation; :file:`/` is the root of the "
"respective archive and ``{VERSION}`` the version of the Setuptools release "
"in the Core Metadata."
msgstr ""
"Файл :file:`LICENSE` будет храниться по адресу :file:`/setuptools-{VERSION}/"
"LICENSE` в sdist и :file:`/setuptools-{VERSION}.dist-info/licenses/LICENSE` "
"в wheel, и распаковываться оттуда в каталог сайта (например, :file:`site-"
"packages/`) при установке; :file:/` - корень соответствующего архива, а "
"``{VERSION}`` - версия выпуска Setuptools. например, :file:`site-packages/`) "
"при установке; :file:`/` - корень соответствующего архива, а ``{VERSION}`` - "
"версия релиза Setuptools в метаданных ядра."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:73
msgid "Advanced example"
msgstr "Расширенный пример"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:75
msgid ""
"Suppose Setuptools were to include the licenses of the third-party projects "
"that are vendored in the :file:`setuptools/_vendor/` and :file:"
"`pkg_resources/_vendor/` directories; specifically:"
msgstr ""
"Предположим, что Setuptools должна включить лицензии сторонних проектов, "
"которые хранятся в каталогах :file:`setuptools/_vendor/` и :file:"
"`pkg_resources/_vendor/`; а именно:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:86
msgid "The license expressions for these projects are:"
msgstr "Лицензионные выражения для этих проектов следующие:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:95
msgid ""
"A comprehensive license expression covering both Setuptools proper and its "
"vendored dependencies would contain these metadata, combining all the "
"license expressions into one. Such an expression might be:"
msgstr ""
"Всеобъемлющее выражение лицензии, охватывающее как собственно Setuptools, "
"так и его вендовые зависимости, будет содержать эти метаданные, объединяя "
"все выражения лицензии в одно. Такое выражение может быть следующим:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:103
msgid ""
"In addition, per the requirements of the licenses, the relevant license "
"files must be included in the package. Suppose the :file:`LICENSE` file "
"contains the text of the MIT license and the copyrights used by Setuptools, "
"``pyparsing``, ``more_itertools`` and ``ordered-set``; and the :file:"
"`LICENSE*` files in the :file:`setuptools/_vendor/packaging/` directory "
"contain the Apache 2.0 and 2-clause BSD license text, and the Packaging "
"copyright statement and `license choice notice <packaginglicense_>`__."
msgstr ""
"Кроме того, согласно требованиям лицензий, в пакет должны быть включены "
"соответствующие файлы лицензий. Допустим, файл :file:`LICENSE` содержит "
"текст лицензии MIT и авторские права, используемые Setuptools, "
"``pyparsing``, ``more_itertools`` и ``ordered-set``; а файлы :file:"
"`LICENSE*` в каталоге :file:`setuptools/_vendor/packaging/` содержат текст "
"лицензии Apache 2.0 и 2 пункта лицензии BSD, а также заявление об авторских "
"правах Packaging и уведомление о выборе лицензии <packaginglicense_>`__."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:111
msgid ""
"Specifically, we assume the license files are located at the following paths "
"in the project source tree (relative to the project root and :file:"
"`pyproject.toml`):"
msgstr ""
"В частности, мы предполагаем, что файлы лицензий расположены по следующим "
"путям в дереве исходных текстов проекта (относительно корня проекта и :file:"
"`pyproject.toml`):"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:122
msgid "Putting it all together, our :file:`pyproject.toml` would be:"
msgstr ""
"Если собрать все это вместе, то наш :file:`pyproject.toml` будет иметь вид:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:133
msgid ""
"Or alternatively, the license files can be specified explicitly (paths will "
"be interpreted as glob patterns):"
msgstr ""
"Или же файлы лицензии можно указать явно (пути будут интерпретированы как "
"glob-шаблоны):"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:147
msgid "If our project used :file:`setup.cfg`, we could define this in :"
msgstr ""
"Если бы наш проект использовал :file:`setup.cfg`, мы могли бы определить это "
"в :"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:159
msgid ""
"With either approach, the output Core Metadata in the distribution would be:"
msgstr ""
"При любом из этих подходов выходные метаданные Core Metadata в дистрибутиве "
"будут такими:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:170
msgid ""
"In the resulting sdist, with :file:`/` as the root of the archive and "
"``{VERSION}`` the version of the Setuptools release specified in the Core "
"Metadata, the license files would be located at the paths:"
msgstr ""
"В полученном sdist, с :file:`/` в качестве корня архива и ``{VERSION}`` "
"версией выпуска Setuptools, указанной в Core Metadata, файлы лицензий будут "
"расположены по путям:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:181
msgid ""
"In the built wheel, with :file:`/` being the root of the archive and "
"``{VERSION}`` as the previous, the license files would be stored at:"
msgstr ""
"В собранном колесе, где :file:`/` является корнем архива, а ``{VERSION}`` - "
"предыдущей, файлы лицензии будут храниться по адресу:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:191
msgid ""
"Finally, in the installed project, with :file:`site-packages/` being the "
"site dir and ``{VERSION}`` as the previous, the license files would be "
"installed to:"
msgstr ""
"Наконец, в установленном проекте, где :file:`site-packages/` является диром "
"сайта, а ``{VERSION}`` - предыдущей версией, файлы лицензии будут "
"установлены в:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:203
msgid "Expression examples"
msgstr "Примеры выражений"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:205
msgid "Some additional examples of valid ``License-Expression`` values:"
msgstr ""
"Некоторые дополнительные примеры допустимых значений ``License-Expression``:"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:220
msgid "User Scenarios"
msgstr "Пользовательские сценарии"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:222
msgid ""
"The following covers the range of common use cases from a user perspective, "
"providing guidance for each. Do note that the following should **not** be "
"considered legal advice, and readers should consult a licensed legal "
"practitioner in their jurisdiction if they are unsure about the specifics "
"for their situation."
msgstr ""
"Ниже рассматривается ряд распространенных случаев использования с точки "
"зрения пользователя и даются рекомендации по каждому из них. Обратите "
"внимание, что нижеследующее **не** должно рассматриваться как юридическая "
"консультация, и читатели должны проконсультироваться с лицензированным "
"юристом в своей юрисдикции, если они не уверены в специфике своей ситуации."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:230
msgid "I have a private package that won't be distributed"
msgstr "У меня есть частный пакет, который не будет распространяться"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:232
msgid ""
"If your package isn't shared publicly, i.e. outside your company, "
"organization or household, it *usually* isn't strictly necessary to include "
"a formal license, so you wouldn't necessarily have to do anything extra here."
msgstr ""
"Если ваш пакет не будет распространяться публично, то есть за пределами "
"вашей компании, организации или домохозяйства, то *обычно* нет необходимости "
"включать официальную лицензию, так что вам не придется делать здесь ничего "
"лишнего."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:236
msgid ""
"However, it is still a good idea to include ``LicenseRef-Proprietary`` as a "
"license expression in your package configuration, and/or a copyright "
"statement and any legal notices in a :file:`LICENSE.txt` file in the root of "
"your project directory, which will be automatically included by packaging "
"tools."
msgstr ""
"Тем не менее, не лишним будет включить ``LicenseRef-Proprietary`` в качестве "
"выражения лицензии в конфигурацию пакета, и/или заявление об авторских "
"правах и любые юридические уведомления в файл :file:`LICENSE.txt` в корне "
"каталога вашего проекта, который будет автоматически включен средствами "
"упаковки."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:244
msgid "I just want to share my own work without legal restrictions"
msgstr "Я просто хочу поделиться своими работами без юридических ограничений"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:246
msgid ""
"While you aren't required to include a license, if you don't, no one has "
"`any permission to download, use or improve your work "
"<dontchoosealicense_>`__, so that's probably the *opposite* of what you "
"actually want. The `MIT license <chooseamitlicense_>`__ is a great choice "
"instead, as it's simple, widely used and allows anyone to do whatever they "
"want with your work (other than sue you, which you probably also don't want)."
msgstr ""
"Хотя вы не обязаны включать лицензию, если вы ее не включите, ни у кого не "
"будет `никакого разрешения на скачивание, использование или улучшение вашей "
"работы <dontchoosealicense_>`__, так что это, вероятно, *противоположное* "
"тому, что вы на самом деле хотите. Лицензия Массачусетского технологического "
"института <chooseamitlicense_>`__ - отличный выбор, поскольку она проста, "
"широко используется и позволяет любому делать с вашей работой все, что он "
"захочет (кроме как подать на вас в суд, чего вы, вероятно, тоже не хотите)."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:253
msgid ""
"To apply it, just paste `the text <chooseamitlicense_>`__ into a file named :"
"file:`LICENSE.txt` at the root of your repo, and add the year and your name "
"to the copyright line. Then, just add ``license = \"MIT\"`` under "
"``[project]`` in your :file:`pyproject.toml` if your packaging tool supports "
"it, or in its config file/section. You're done!"
msgstr ""
"Чтобы применить его, просто вставьте ``текст <chooseamitlicense_>``__ в файл "
"с именем :file:`LICENSE.txt`` в корне вашего репо, и добавьте год и ваше имя "
"в строку копирайта. Затем просто добавьте ``license = \"MIT\"`` под "
"``[project]`` в ваш :file:`pyproject.toml`, если ваш инструмент упаковки "
"поддерживает это, или в его конфигурационный файл/раздел. Все готово!"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:261
msgid "I want to distribute my project under a specific license"
msgstr "Я хочу распространять свой проект под определенной лицензией"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:263
msgid ""
"To use a particular license, simply paste its text into a :file:`LICENSE."
"txt` file at the root of your repo, if you don't have it in a file starting "
"with :file:`LICENSE` or :file:`COPYING` already, and add ``license = "
"\"LICENSE-ID\"`` under ``[project]`` in your :file:`pyproject.toml` if your "
"packaging tool supports it, or else in its config file. You can find the "
"``LICENSE-ID`` and copyable license text on sites like `ChooseALicense "
"<choosealicenselist_>`__ or `SPDX <spdxlist_>`__."
msgstr ""
"Чтобы использовать определенную лицензию, просто вставьте ее текст в файл :"
"file:`LICENSE.txt` в корне вашего репозитория, если он еще не находится в "
"файле, начинающемся с :file:`LICENSE` или :file:`COPYING`, и добавьте "
"``license = \"LICENSE-ID\"`` под ``[project]`` в вашем :file:`pyproject."
"toml`, если ваш инструмент упаковки поддерживает это, или в другом случае в "
"его конфигурационном файле. Вы можете найти ``LICENSE-ID`` и копируемый "
"текст лицензии на сайтах вроде `ChooseALicense <choosealicenselist_>`__ или "
"`SPDX <spdxlist_>`__."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:272
msgid ""
"Many popular code hosts, project templates and packaging tools can add the "
"license file for you, and may support the expression as well in the future."
msgstr ""
"Многие популярные хостинги кода, шаблоны проектов и средства упаковки могут "
"добавить файл лицензии за вас, а в будущем, возможно, будут поддерживать и "
"выражение."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:277
msgid "I maintain an existing package that's already licensed"
msgstr "Я поддерживаю существующий пакет, который уже лицензирован"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:279
msgid ""
"If you already have license files and metadata in your project, you should "
"only need to make a couple of tweaks to take advantage of the new "
"functionality."
msgstr ""
"Если в вашем проекте уже есть лицензионные файлы и метаданные, то вам нужно "
"будет внести всего пару изменений, чтобы воспользоваться новой "
"функциональностью."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:283
msgid ""
"In your project config file, enter your license expression under ``license`` "
"(``[project]`` table in :file:`pyproject.toml`), or the equivalent for your "
"packaging tool, and make sure to remove any legacy ``license`` table subkeys "
"or ``License ::`` classifiers. Your existing ``license`` value may already "
"be valid as one (e.g. ``MIT``, ``Apache-2.0 OR BSD-2-Clause``, etc); "
"otherwise, check the `SPDX license list <spdxlist_>`__ for the identifier "
"that matches the license used in your project."
msgstr ""
"В конфигурационном файле проекта введите выражение лицензии в ``license`` "
"(таблица ``[project]`` в :file:`pyproject.toml`) или эквивалентное выражение "
"для вашего инструмента упаковки, и убедитесь, что удалили все устаревшие "
"подключи таблицы ``license`` или классификаторы ``License ::``. Возможно, "
"существующее значение ``лицензии`` уже является действительным (например, "
"``MIT``, ``Apache-2.0 OR BSD-2-Clause`` и т. д.); в противном случае "
"проверьте список лицензий <spdxlist_>`__ для идентификатора, который "
"соответствует лицензии, используемой в вашем проекте."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:292
msgid ""
"Make sure to list your license files under ``license-files`` under "
"``[project]`` in :file:`pyproject.toml` or else in your tool's configuration "
"file."
msgstr ""
"Убедитесь, что вы перечислили файлы лицензий в разделе ``license-files`` под "
"``[project]`` в :file:`pyproject.toml` или в другом файле конфигурации "
"вашего инструмента."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:296
msgid ""
"See the :ref:`licensing-example-basic` for a simple but complete real-world "
"demo of how this works in practice. See also the best-effort guidance on how "
"to translate license classifiers into license expression provided by the :"
"pep:`639` authors: `Mapping License Classifiers to SPDX Identifiers "
"<mappingclassifierstospdx_>`__. Packaging tools may support automatically "
"converting legacy licensing metadata; check your tool's documentation for "
"more information."
msgstr ""
"Смотрите :ref:`licensing-example-basic` для простой, но полной демонстрации "
"того, как это работает на практике. См. также руководство по переводу "
"классификаторов лицензий в выражения лицензий, предоставленное авторами :pep:"
"`639`: `Mapping License Classifiers to SPDX Identifiers "
"<mappingclassifierstospdx_>`__. Средства упаковки могут поддерживать "
"автоматическое преобразование устаревших лицензионных метаданных; для "
"получения дополнительной информации обратитесь к документации вашего "
"средства."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:306
msgid "My package includes other code under different licenses"
msgstr "Мой пакет включает в себя другой код под разными лицензиями"

#: ../source/guides/licensing-examples-and-user-scenarios.rst:308
msgid ""
"If your project includes code from others covered by different licenses, "
"such as vendored dependencies or files copied from other open source "
"software, you can construct a license expression to describe the licenses "
"involved and the relationship between them."
msgstr ""
"Если ваш проект включает в себя код, полученный от других людей, на которые "
"распространяются разные лицензии, например, зависимые файлы или файлы, "
"скопированные из других программ с открытым исходным кодом, вы можете "
"построить лицензионное выражение, чтобы описать соответствующие лицензии и "
"отношения между ними."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:314
msgid ""
"In short, ``License-1 AND License-2`` mean that *both* licenses apply to "
"your project, or parts of it (for example, you included a file under another "
"license), and ``License-1 OR License-2`` means that *either* of the licenses "
"can be used, at the user's option (for example, you want to allow users a "
"choice of multiple licenses). You can use parenthesis (``()``) for grouping "
"to form expressions that cover even the most complex situations."
msgstr ""
"Вкратце, ``Лицензия-1 И Лицензия-2`` означает, что *обе* лицензии применимы "
"к вашему проекту или его части (например, вы включили файл под другой "
"лицензией), а ``Лицензия-1 ИЛИ Лицензия-2`` означает, что *любая* из "
"лицензий может быть использована по выбору пользователя (например, вы хотите "
"предоставить пользователям возможность выбора из нескольких лицензий). Вы "
"можете использовать круглые скобки (``()``) для группировки, чтобы "
"сформировать выражения, которые охватывают даже самые сложные ситуации."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:322
msgid ""
"In your project config file, enter your license expression under ``license`` "
"(``[project]`` table of :file:`pyproject.toml`), or the equivalent for your "
"packaging tool, and make sure to remove any legacy ``license`` table subkeys "
"or ``License ::`` classifiers."
msgstr ""
"В файле конфигурации проекта введите выражение лицензии в ``license`` "
"(таблица ``[project]`` в :file:`pyproject.toml`), или эквивалентное "
"выражение для вашего инструмента упаковки, и убедитесь, что вы удалили все "
"устаревшие подключи таблицы ``license`` или классификаторы ``License ::``."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:328
msgid ""
"Also, make sure you add the full license text of all the licenses as files "
"somewhere in your project repository. List the relative path or glob "
"patterns to each of them under ``license-files`` under ``[project]`` in :"
"file:`pyproject.toml` (if your tool supports it), or else in your tool's "
"configuration file."
msgstr ""
"Также убедитесь, что вы добавили полный текст всех лицензий в виде файлов "
"куда-то в репозиторий вашего проекта. Укажите относительный путь или glob-"
"шаблоны к каждому из них в ``license-files`` в ``[project]`` в :file:"
"`pyproject.toml` (если ваш инструмент поддерживает это), или в другом "
"конфигурационном файле вашего инструмента."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:334
msgid ""
"As an example, if your project was licensed MIT but incorporated a vendored "
"dependency (say, ``packaging``) that was licensed under either Apache 2.0 or "
"the 2-clause BSD, your license expression would be ``MIT AND (Apache-2.0 OR "
"BSD-2-Clause)``. You might have a :file:`LICENSE.txt` in your repo root, and "
"a :file:`LICENSE-APACHE.txt` and :file:`LICENSE-BSD.txt` in the :file:"
"`_vendor/` subdirectory, so to include all of them, you'd specify "
"``[\"LICENSE.txt\", \"_vendor/packaging/LICENSE*\"]`` as glob patterns, or "
"``[\"LICENSE.txt\", \"_vendor/LICENSE-APACHE.txt\", \"_vendor/LICENSE-BSD."
"txt\"]`` as literal file paths."
msgstr ""
"Например, если ваш проект имеет лицензию MIT, но включает зависимость от "
"поставщика (скажем, ``упаковку''), которая лицензируется либо под Apache "
"2.0, либо под BSD с двумя оговорками, ваше выражение лицензии будет ``MIT "
"AND (Apache-2.0 OR BSD-2-Clause)``. У вас может быть :file:`LICENSE.txt` в "
"корне репо, а также :file:`LICENSE-APACHE.txt` и :file:`LICENSE-BSD.txt` в "
"подкаталоге :file:`_vendor/`, поэтому, чтобы включить их все, вы укажете "
"``[\"LICENSE. txt\", \"_vendor/packaging/LICENSE*\"]`` как glob-шаблоны, или "
"``[\"LICENSE.txt\", \"_vendor/LICENSE-APACHE.txt\", \"_vendor/LICENSE-BSD."
"txt\"]`` как буквальные пути к файлам."

#: ../source/guides/licensing-examples-and-user-scenarios.rst:345
msgid ""
"See a fully worked out :ref:`licensing-example-advanced` for an end-to-end "
"application of this to a real-world complex project, with many technical "
"details, and consult a `tutorial <spdxtutorial_>`__ for more help and "
"examples using SPDX identifiers and expressions."
msgstr ""
"Смотрите полностью проработанный пример :ref:`licensing-example-advanced` "
"для комплексного применения этого метода в реальном сложном проекте, с "
"множеством технических деталей, а также обратитесь к `учебнику "
"<spdxtutorial_>`__ для получения дополнительной помощи и примеров "
"использования идентификаторов и выражений SPDX."

#: ../source/guides/making-a-pypi-friendly-readme.rst:2
msgid "Making a PyPI-friendly README"
msgstr "Создание дружественного к PyPI файла README"

#: ../source/guides/making-a-pypi-friendly-readme.rst:4
msgid ""
"README files can help your users understand your project and can be used to "
"set your project's description on PyPI. This guide helps you create a README "
"in a PyPI-friendly format and include your README in your package so it "
"appears on PyPI."
msgstr ""
"Файлы README могут помочь вашим пользователям понять ваш проект и могут быть "
"использованы для создания описания вашего проекта на PyPI. Это руководство "
"поможет вам создать README в удобном для PyPI формате и включить README в "
"ваш пакет, чтобы он появился на PyPI."

#: ../source/guides/making-a-pypi-friendly-readme.rst:9
msgid "Creating a README file"
msgstr "Создание файла :file:`README`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:11
msgid ""
"README files for Python projects are often named ``README``, ``README.txt``, "
"``README.rst``, or ``README.md``."
msgstr ""
"Файлы README для проектов Python часто называются ``README``, ``README."
"txt``, ``README.rst`` или ``README.md``."

#: ../source/guides/making-a-pypi-friendly-readme.rst:13
msgid ""
"For your README to display properly on PyPI, choose a markup language "
"supported by PyPI. Formats supported by `PyPI's README renderer <https://"
"github.com/pypa/readme_renderer>`_ are:"
msgstr ""
"Чтобы ваш README правильно отображался на PyPI, выберите язык разметки, "
"поддерживаемый PyPI. Форматы, поддерживаемые `PyPI's README renderer "
"<https://github.com/pypa/readme_renderer>`_, следующие:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:16
msgid "plain text"
msgstr "простой текст"

#: ../source/guides/making-a-pypi-friendly-readme.rst:17
msgid ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (without "
"Sphinx extensions)"
msgstr ""
"`reStructuredText <https://docutils.sourceforge.io/rst.html>`_ (без "
"расширений Sphinx)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:18
msgid ""
"Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by "
"default, or `CommonMark <https://commonmark.org/>`_)"
msgstr ""
"текст в формате Markdown (`GitHub Flavored Markdown <https://github.github."
"com/gfm/>`_ по умолчанию или `CommonMark <https://commonmark.org/>`_)"

#: ../source/guides/making-a-pypi-friendly-readme.rst:21
msgid ""
"It's customary to save your README file in the root of your project, in the "
"same directory as your :file:`setup.py` file."
msgstr ""
"Обычно файл README сохраняется в корне проекта, в той же директории, что и "
"файл :file:`setup.py`."

#: ../source/guides/making-a-pypi-friendly-readme.rst:25
msgid "Including your README in your package's metadata"
msgstr "Включение файла README в метаданные вашего пакета"

#: ../source/guides/making-a-pypi-friendly-readme.rst:27
msgid ""
"To include your README's contents as your package description, set your "
"project's ``Description`` and ``Description-Content-Type`` metadata, "
"typically in your project's :file:`setup.py` file."
msgstr ""
"Чтобы включить содержимое README в описание пакета, установите метаданные "
"проекта ``Description`` и ``Description-Content-Type``, обычно в файле "
"проекта :file:`setup.py``."

#: ../source/guides/making-a-pypi-friendly-readme.rst:33
msgid ":ref:`description-optional`"
msgstr ":ref:`description-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:34
msgid ":ref:`description-content-type-optional`"
msgstr ":ref:`description-content-type-optional`"

#: ../source/guides/making-a-pypi-friendly-readme.rst:36
msgid ""
"For example, to set these values in a package's :file:`setup.py` file, use "
"``setup()``'s ``long_description`` and ``long_description_content_type``."
msgstr ""
"Например, чтобы установить эти значения в файле пакета :file:`setup.py`, "
"используйте ``setup()`` ``long_description`` и "
"``long_description_content_type``."

#: ../source/guides/making-a-pypi-friendly-readme.rst:39
msgid ""
"Set the value of ``long_description`` to the contents (not the path) of the "
"README file itself. Set the ``long_description_content_type`` to an accepted "
"``Content-Type``-style value for your README file's markup, such as ``text/"
"plain``, ``text/x-rst`` (for reStructuredText), or ``text/markdown``."
msgstr ""
"Установите значение ``long_description`` в содержимое (не путь) самого файла "
"README. Установите значение ``long_description_content_type`` в принятый "
"стиль ``Content-Type`` для разметки вашего файла README, например ``text/"
"plain``, ``text/x-rst`` (для reStructuredText) или ``text/markdown``."

#: ../source/guides/making-a-pypi-friendly-readme.rst:45
msgid ""
"If you're using GitHub-flavored Markdown to write a project's description, "
"ensure you upgrade the following tools:"
msgstr ""
"Если для написания описания проекта вы используете Markdown со вкусом "
"GitHub, убедитесь, что вы обновили следующие инструменты:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:60
msgid "The minimum required versions of the respective tools are:"
msgstr ""
"Минимально необходимыми версиями соответствующих инструментов являются:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:62
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:63
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:64
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:66
msgid ""
"It's recommended that you use ``twine`` to upload the project's distribution "
"packages:"
msgstr ""
"Рекомендуется использовать ``twine`` для загрузки дистрибутивных пакетов "
"проекта:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:72
msgid ""
"For example, see this :file:`setup.py` file, which reads the contents of :"
"file:`README.md` as ``long_description`` and identifies the markup as GitHub-"
"flavored Markdown:"
msgstr ""
"Например, смотрите этот файл :file:`setup.py`, который считывает содержимое :"
"file:`README.md` как ``длинное_описание`` и идентифицирует разметку как "
"GitHub-flavored Markdown:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:94
msgid "Validating reStructuredText markup"
msgstr "Проверка разметки reStructuredText"

#: ../source/guides/making-a-pypi-friendly-readme.rst:96
msgid ""
"If your README is written in reStructuredText, any invalid markup will "
"prevent it from rendering, causing PyPI to instead just show the README's "
"raw source."
msgstr ""
"Если ваш README написан на reStructuredText, то любая некорректная разметка "
"не позволит его отобразить, в результате чего PyPI просто покажет исходный "
"текст README."

#: ../source/guides/making-a-pypi-friendly-readme.rst:99
msgid ""
"Note that Sphinx extensions used in docstrings, such as :doc:`directives "
"<sphinx:usage/restructuredtext/directives>` and :doc:`roles <sphinx:usage/"
"restructuredtext/roles>` (e.g., \"``:py:func:`getattr```\" or \"``:ref:`my-"
"reference-label```\"), are not allowed here and will result in error "
"messages like \"``Error: Unknown interpreted text role \"py:func\".``\"."
msgstr ""
"Обратите внимание, что расширения Sphinx, используемые в документах, такие "
"как :doc:`directives <sphinx:usage/restructuredtext/directives>` и :doc:"
"`roles <sphinx:usage/restructuredtext/roles>` (например, \"``:py:func:"
"`getattr``\" или \"``:ref:`my-reference-label``\"), здесь недопустимы и "
"приведут к сообщениям об ошибках типа \"``Ошибка: Неизвестная "
"интерпретируемая текстовая роль \"py:func\".``\"."

#: ../source/guides/making-a-pypi-friendly-readme.rst:104
msgid ""
"You can check your README for markup errors before uploading as follows:"
msgstr ""
"Вы можете проверить свой README на наличие ошибок разметки перед загрузкой "
"следующим образом:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:106
msgid ""
"Install the latest version of `twine <https://github.com/pypa/twine>`_; "
"version 1.12.0 or higher is required:"
msgstr ""
"Установите последнюю версию `twine <https://github.com/pypa/twine>`_; "
"требуется версия 1.12.0 или выше:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:121
msgid ""
"Build the sdist and wheel for your project as described under :ref:"
"`Packaging Your Project`."
msgstr ""
"Соберите sdist и wheel для вашего проекта, как описано в разделе :ref:"
"`Packaging Your Project`."

#: ../source/guides/making-a-pypi-friendly-readme.rst:124
msgid "Run ``twine check`` on the sdist and wheel:"
msgstr "Запустите ``twine check`` на sdist и wheel:"

#: ../source/guides/making-a-pypi-friendly-readme.rst:130
msgid ""
"This command will report any problems rendering your README.  If your markup "
"renders fine, the command will output ``Checking distribution FILENAME: "
"Passed``."
msgstr ""
"Эта команда сообщит о любых проблемах с рендерингом вашего README.  Если "
"разметка отображается нормально, команда выведет ``Проверка дистрибутива "
"FILENAME: Пройдена``."

#: ../source/guides/migrating-to-pypi-org.rst:6
msgid "Migrating to PyPI.org"
msgstr "Переход на PyPI.org"

#: ../source/guides/migrating-to-pypi-org.rst:8
#: ../source/guides/multi-version-installs.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:9
#: ../source/guides/supporting-windows-using-appveyor.rst:7
msgid "Obsolete"
msgstr "Устаревшее"

#: ../source/guides/migrating-to-pypi-org.rst:10
msgid ""
":term:`pypi.org` is the new, rewritten version of PyPI that has replaced the "
"legacy PyPI code base. It is the default version of PyPI that people are "
"expected to use. These are the tools and processes that people will need to "
"interact with ``PyPI.org``."
msgstr ""
":term:`pypi.org` - это новая, переработанная версия PyPI, которая заменила "
"устаревшую кодовую базу PyPI. Это версия PyPI по умолчанию, которую люди "
"должны использовать. Это инструменты и процессы, которые понадобятся людям "
"для взаимодействия с ``PyPI.org``."

#: ../source/guides/migrating-to-pypi-org.rst:16
msgid "Publishing releases"
msgstr "Публикация выпусков"

#: ../source/guides/migrating-to-pypi-org.rst:18
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""
"С сентября 2016 года платформой загрузки по умолчанию является ``pypi.org``."

#: ../source/guides/migrating-to-pypi-org.rst:20
msgid ""
"Uploads through ``pypi.python.org`` were *switched off* on **July 3, 2017**. "
"As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""
"Загрузка через ``pypi.python.org`` была *отключена* с **июля 3 июля 2017 "
"года**. По состоянию на 13 апреля 2018 года URL-адресом PyPI является ``pypi."
"org``."

#: ../source/guides/migrating-to-pypi-org.rst:23
msgid ""
"The recommended way to migrate to PyPI.org for uploading is to ensure that "
"you are using a new enough version of your upload tool."
msgstr ""
"Рекомендуемый способ перехода на PyPI.org для загрузки - убедиться, что вы "
"используете достаточно новую версию вашего инструмента загрузки."

#: ../source/guides/migrating-to-pypi-org.rst:26
msgid ""
"The default upload settings switched to ``pypi.org`` in the following "
"versions:"
msgstr ""
"Настройки загрузки по умолчанию переключились на ``pypi.org`` в следующих "
"версиях:"

#: ../source/guides/migrating-to-pypi-org.rst:28
msgid "``twine`` 1.8.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:29
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:30
msgid "Python 2.7.13 (``distutils`` update)"
msgstr "Python 2.7.13 (обновление ``distutils``)"

#: ../source/guides/migrating-to-pypi-org.rst:31
msgid "Python 3.4.6 (``distutils`` update)"
msgstr "Python 3.4.6 (обновление ``distutils``)"

#: ../source/guides/migrating-to-pypi-org.rst:32
msgid "Python 3.5.3 (``distutils`` update)"
msgstr "Python 3.5.3 (обновление ``distutils``)"

#: ../source/guides/migrating-to-pypi-org.rst:33
msgid "Python 3.6.0 (``distutils`` update)"
msgstr "Python 3.6.0 (обновление ``distutils``)"

#: ../source/guides/migrating-to-pypi-org.rst:35
msgid ""
"In addition to ensuring you're on a new enough version of the tool for the "
"tool's default to have switched, you must also make sure that you have not "
"configured the tool to override its default upload URL. Typically this is "
"configured in a file located at :file:`$HOME/.pypirc`. If you see a file "
"like:"
msgstr ""
"Помимо того, что вы находитесь на достаточно новой версии инструмента, чтобы "
"его значение по умолчанию изменилось, вы также должны убедиться, что не "
"настроили инструмент на переопределение URL-адреса загрузки по умолчанию. "
"Обычно это настраивается в файле, расположенном по адресу :file:`$HOME/."
"pypirc`. Если вы видите файл вида:"

#: ../source/guides/migrating-to-pypi-org.rst:52
msgid ""
"Then simply delete the line starting with ``repository`` and you will use "
"your upload tool's default URL."
msgstr ""
"Затем просто удалите строку, начинающуюся с ``repository``, и вы будете "
"использовать URL по умолчанию вашего инструмента загрузки."

#: ../source/guides/migrating-to-pypi-org.rst:55
msgid ""
"If for some reason you're unable to upgrade the version of your tool to a "
"version that defaults to using PyPI.org, then you may edit :file:`$HOME/."
"pypirc` and include the ``repository:`` line, but use the value ``https://"
"upload.pypi.org/legacy/`` instead:"
msgstr ""
"Если по каким-то причинам вы не можете обновить версию вашего инструмента до "
"версии, которая по умолчанию использует PyPI.org, то вы можете "
"отредактировать :file:`$HOME/.pypirc` и включить строку ``repository:``, но "
"вместо нее использовать значение ``https://upload.pypi.org/legacy/``:"

#: ../source/guides/migrating-to-pypi-org.rst:71
msgid ""
"(``legacy`` in this URL refers to the fact that this is the new server "
"implementation's emulation of the legacy server implementation's upload API.)"
msgstr ""
"(``legacy`` в этом URL означает, что это новая реализация сервера, "
"эмулирующая API загрузки старой реализации сервера)"

#: ../source/guides/migrating-to-pypi-org.rst:77
msgid "Registering package names & metadata"
msgstr "Регистрация имён и метаданных пакетов"

#: ../source/guides/migrating-to-pypi-org.rst:79
msgid ""
"Explicit pre-registration of package names with the ``setup.py register`` "
"command prior to the first upload is no longer required, and is not "
"currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""
"Явная предварительная регистрация имен пакетов с помощью команды ``setup.py "
"register`` перед первой загрузкой больше не требуется, и в настоящее время "
"не поддерживается эмуляцией устаревшего API загрузки на PyPI.org."

#: ../source/guides/migrating-to-pypi-org.rst:83
msgid ""
"As a result, attempting explicit registration after switching to using PyPI."
"org for uploads will give the following error message::"
msgstr ""
"В результате попытка явной регистрации после перехода на использование PyPI."
"org для загрузки приведет к следующему сообщению об ошибке::"

#: ../source/guides/migrating-to-pypi-org.rst:88
msgid ""
"The solution is to skip the registration step, and proceed directly to "
"uploading artifacts."
msgstr ""
"Решение состоит в том, чтобы пропустить шаг регистрации и перейти "
"непосредственно к загрузке артефактов."

#: ../source/guides/migrating-to-pypi-org.rst:93
#: ../source/guides/using-testpypi.rst:5
msgid "Using TestPyPI"
msgstr "Использование TestPyPI"

#: ../source/guides/migrating-to-pypi-org.rst:95
msgid ""
"Legacy TestPyPI (testpypi.python.org) is no longer available; use `test.pypi."
"org <https://test.pypi.org>`_ instead. If you use TestPyPI, you must update "
"your :file:`$HOME/.pypirc` to handle TestPyPI's new location, by replacing "
"``https://testpypi.python.org/pypi`` with ``https://test.pypi.org/legacy/``, "
"for example:"
msgstr ""
"Устаревший TestPyPI (testpypi.python.org) больше не доступен; вместо него "
"используйте `test.pypi.org <https://test.pypi.org>`_. Если вы используете "
"TestPyPI, вы должны обновить свой :file:`$HOME/.pypirc` для соответствия "
"новому местоположению TestPyPI, заменив ``https://testpypi.python.org/pypi`` "
"на ``https://test.pypi.org/legacy/``, например:"

#: ../source/guides/migrating-to-pypi-org.rst:117
msgid "Registering new user accounts"
msgstr "Регистрация новых учётных записей пользователей"

#: ../source/guides/migrating-to-pypi-org.rst:119
msgid ""
"In order to help mitigate spam attacks against PyPI, new user registration "
"through ``pypi.python.org`` was *switched off* on **February 20, 2018**. New "
"user registrations at ``pypi.org`` are open."
msgstr ""
"Для того, чтобы помочь смягчить спам-атаки на PyPI, регистрация новых "
"пользователей через ``pypi.python.org`` была *отключена* с **февраля 20, "
"2018**. Регистрация новых пользователей на ``pypi.org`` открыта."

#: ../source/guides/migrating-to-pypi-org.rst:125
msgid "Browsing packages"
msgstr "Просмотр пакетов"

#: ../source/guides/migrating-to-pypi-org.rst:127
msgid ""
"While ``pypi.python.org`` is may still be used in links from other PyPA "
"documentation, etc, the default interface for browsing packages is ``pypi."
"org``. The domain pypi.python.org now redirects to pypi.org, and may be "
"disabled sometime in the future."
msgstr ""
"Хотя ``pypi.python.org`` по-прежнему может использоваться в ссылках из "
"другой документации PyPA и т.д., по умолчанию для просмотра пакетов "
"используется интерфейс ``pypi.org``. Домен pypi.python.org сейчас "
"перенаправляет на pypi.org, и может быть отключен в будущем."

#: ../source/guides/migrating-to-pypi-org.rst:134
msgid "Downloading packages"
msgstr "Загрузка пакетов"

#: ../source/guides/migrating-to-pypi-org.rst:136
msgid "``pypi.org`` is the default host for downloading packages."
msgstr "``pypi.org`` является хостом по умолчанию для загрузки пакетов."

#: ../source/guides/migrating-to-pypi-org.rst:139
msgid "Managing published packages and releases"
msgstr "Управление опубликованными пакетами и выпусками"

#: ../source/guides/migrating-to-pypi-org.rst:141
msgid ""
"``pypi.org`` provides a fully functional interface for logged in users to "
"manage their published packages and releases."
msgstr ""
"``pypi.org`` предоставляет полнофункциональный интерфейс для авторизованных "
"пользователей для управления своими опубликованными пакетами и релизами."

#: ../source/guides/modernize-setup-py-project.rst:6
msgid "How to modernize a ``setup.py`` based project?"
msgstr "Как модернизировать проект, основанный на ``setup.py``?"

#: ../source/guides/modernize-setup-py-project.rst:10
msgid "Should ``pyproject.toml`` be added?"
msgstr "Нужно ли добавить ``pyproject.toml``?"

#: ../source/guides/modernize-setup-py-project.rst:12
msgid ""
"A :term:`pyproject.toml` file is strongly recommended. The presence of a :"
"file:`pyproject.toml` file itself does not bring much. [#]_ What is actually "
"strongly recommended is the ``[build-system]`` table in :file:`pyproject."
"toml`."
msgstr ""
"Настоятельно рекомендуется наличие файла :term:`pyproject.toml`. Само по "
"себе наличие файла :file:`pyproject.toml` мало что дает. [#]_ Что "
"действительно настоятельно рекомендуется, так это таблица ``[build-system]`` "
"в :file:`pyproject.toml`."

#: ../source/guides/modernize-setup-py-project.rst:16
msgid ""
"Note that it has influence on the build isolation feature of pip, see below."
msgstr ""
"Обратите внимание, что это влияет на функцию изоляции сборки в pip, см. ниже."

#: ../source/guides/modernize-setup-py-project.rst:23
msgid ""
"No, :file:`setup.py` can exist in a modern :ref:`setuptools` based project. "
"The :term:`setup.py` file is a valid configuration file for setuptools that "
"happens to be written in Python. However, the following commands are "
"deprecated and **MUST NOT** be run anymore, and their recommended "
"replacement commands should be used instead:"
msgstr ""
"Нет, :file:`setup.py` может существовать в современном проекте, основанном "
"на :ref:`setuptools`. Файл :term:`setup.py` является допустимым "
"конфигурационным файлом для setuptools, который, как оказалось, написан на "
"Python. Однако следующие команды устарели и **НЕ ДОЛЖНЫ** больше "
"выполняться, и вместо них следует использовать рекомендуемые команды-"
"заменители:"

#: ../source/guides/modernize-setup-py-project.rst:36
msgid "``python -m build``"
msgstr "``python -m build``"

#: ../source/guides/modernize-setup-py-project.rst:42
#: ../source/guides/modernize-setup-py-project.rst:66
#: ../source/guides/modernize-setup-py-project.rst:111
#: ../source/guides/modernize-setup-py-project.rst:129
#: ../source/guides/modernize-setup-py-project.rst:221
msgid "For more details:"
msgstr "Более подробная информация:"

#: ../source/guides/modernize-setup-py-project.rst:44
msgid ":ref:`setup-py-deprecated`"
msgstr ":ref:`setup-py-deprecated`"

#: ../source/guides/modernize-setup-py-project.rst:48
msgid "Where to start?"
msgstr "С чего начать?"

#: ../source/guides/modernize-setup-py-project.rst:50
msgid ""
"The :term:`project` must contain a :file:`pyproject.toml` file at the root "
"of its source tree that contains a ``[build-system]`` table like so:"
msgstr ""
"Термин :term:`project` должен содержать в корне дерева исходников файл :file:"
"`pyproject.toml`, который содержит таблицу ``[build-system]``, как показано "
"ниже:"

#: ../source/guides/modernize-setup-py-project.rst:60
msgid ""
"This is the standardized method of letting :term:`build frontends <Build "
"Frontend>` know that :ref:`setuptools` is the :term:`build backend <Build "
"Backend>` for this project."
msgstr ""
"Это стандартный способ сообщить :term:`build frontends <Build Frontend>` о "
"том, что :ref:`setuptools` является :term:`build backend <Build Backend>` "
"для этого проекта."

#: ../source/guides/modernize-setup-py-project.rst:63
msgid ""
"Note that the presence of a :file:`pyproject.toml` file (even if empty) "
"triggers :ref:`pip` to change its default behavior to use *build isolation*."
msgstr ""
"Обратите внимание, что наличие файла :file:`pyproject.toml` (даже если он "
"пуст) заставляет :ref:`pip` изменить свое поведение по умолчанию на "
"использование *изоляции сборки*."

#: ../source/guides/modernize-setup-py-project.rst:68
msgid ":ref:`distributing-packages`"
msgstr ":ref:`distributing-packages`"

#: ../source/guides/modernize-setup-py-project.rst:69
#: ../source/guides/modernize-setup-py-project.rst:113
msgid ":ref:`pyproject-build-system-table`"
msgstr ":ref:`pyproject-сборка-система-таблица`"

#: ../source/guides/modernize-setup-py-project.rst:70
#: ../source/guides/modernize-setup-py-project.rst:131
#: ../source/guides/modernize-setup-py-project.rst:247
msgid ":doc:`pip:reference/build-system/pyproject-toml`"
msgstr ":doc:`pip:reference/build-system/pyproject-toml`"

#: ../source/guides/modernize-setup-py-project.rst:74
msgid "How to handle additional build-time dependencies?"
msgstr "Как обрабатывать дополнительные зависимости во время сборки?"

#: ../source/guides/modernize-setup-py-project.rst:76
msgid ""
"On top of setuptools itself, if :file:`setup.py` depends on other third-"
"party libraries (outside of Python's standard library), those must be listed "
"in the ``requires`` list of the ``[build-system]`` table, so that the build "
"frontend knows to install them when building the :term:`distributions "
"<Distribution Package>`."
msgstr ""
"Помимо самой setuptools, если :file:`setup.py` зависит от других сторонних "
"библиотек (вне стандартной библиотеки Python), они должны быть перечислены в "
"списке ``requires`` таблицы ``[build-system]``, чтобы фронтенд сборки знал, "
"что их нужно установить при сборке :term:`distributions <Distribution "
"Package>`."

#: ../source/guides/modernize-setup-py-project.rst:82
#: ../source/guides/modernize-setup-py-project.rst:139
#: ../source/guides/modernize-setup-py-project.rst:174
msgid "For example, a :file:`setup.py` file such as this:"
msgstr "Например, файл :file:`setup.py` выглядит следующим образом:"

#: ../source/guides/modernize-setup-py-project.rst:99
msgid ""
"requires a :file:`pyproject.toml` file like this (:file:`setup.py` stays "
"unchanged):"
msgstr ""
"требует наличия такого файла :file:`pyproject.toml` (:file:`setup.py` "
"остается неизменным):"

#: ../source/guides/modernize-setup-py-project.rst:117
msgid "What is the build isolation feature?"
msgstr "Что такое изоляция сборки?"

#: ../source/guides/modernize-setup-py-project.rst:119
msgid ""
"Build frontends typically create an ephemeral virtual environment where they "
"install only the build dependencies (and their dependencies) that are listed "
"under ``build-system.requires`` and trigger the build in that environment."
msgstr ""
"Обычно фронтенды сборки создают эфемерное виртуальное окружение, в котором "
"устанавливают только те зависимости сборки (и их зависимости), которые "
"перечислены в ``build-system.requires``, и запускают сборку в этом окружении."

#: ../source/guides/modernize-setup-py-project.rst:124
msgid ""
"For some projects this isolation is unwanted and it can be deactivated as "
"follows:"
msgstr ""
"Для некоторых проектов эта изоляция нежелательна, и ее можно отключить "
"следующим образом:"

#: ../source/guides/modernize-setup-py-project.rst:126
msgid "``python -m build --no-isolation``"
msgstr "``python -m build --no-isolation``"

#: ../source/guides/modernize-setup-py-project.rst:127
msgid "``python -m pip install --no-build-isolation``"
msgstr "``python -m pip install --no-build-isolation``"

#: ../source/guides/modernize-setup-py-project.rst:135
msgid "How to handle packaging metadata?"
msgstr "Как обрабатывать метаданные упаковки?"

#: ../source/guides/modernize-setup-py-project.rst:137
msgid ""
"All static metadata can optionally be moved to a ``[project]`` table in :"
"file:`pyproject.toml`."
msgstr ""
"Все статические метаданные по желанию могут быть перенесены в таблицу "
"``[проект]`` в :file:`pyproject.toml`."

#: ../source/guides/modernize-setup-py-project.rst:151
msgid "can be entirely replaced by a :file:`pyproject.toml` file like this:"
msgstr ""
"может быть полностью заменен файлом :file:`pyproject.toml`, например, таким:"

#: ../source/guides/modernize-setup-py-project.rst:164
msgid ""
"Read :ref:`pyproject-project-table` for the full specification of the "
"content allowed in the ``[project]`` table."
msgstr ""
"Читайте :ref:`pyproject-project-table` для полной спецификации содержимого, "
"допустимого в таблице ``[project]``."

#: ../source/guides/modernize-setup-py-project.rst:169
msgid "How to handle dynamic metadata?"
msgstr "Как обрабатывать динамические метаданные?"

#: ../source/guides/modernize-setup-py-project.rst:171
msgid ""
"If some packaging metadata fields are not static they need to be listed as "
"``dynamic`` in this ``[project]`` table."
msgstr ""
"Если некоторые поля метаданных упаковки не являются статическими, их нужно "
"указать как ``динамические`` в этой таблице ``[проект]``."

#: ../source/guides/modernize-setup-py-project.rst:191
msgid "can be modernized as follows:"
msgstr "можно модернизировать следующим образом:"

#: ../source/guides/modernize-setup-py-project.rst:223
msgid ":ref:`declaring-project-metadata-dynamic`"
msgstr ":ref:`декларирование метаданных проекта-динамический`"

#: ../source/guides/modernize-setup-py-project.rst:227
msgid "What if something that can not be changed expects a ``setup.py`` file?"
msgstr ""
"Что делать, если что-то, что нельзя изменить, ожидает файл ``setup.py``?"

#: ../source/guides/modernize-setup-py-project.rst:229
msgid ""
"For example, a process exists that can not be changed easily and it needs to "
"execute a command such as ``python setup.py --name``."
msgstr ""
"Например, существует процесс, который нельзя легко изменить, и ему нужно "
"выполнить команду типа ``python setup.py --name``."

#: ../source/guides/modernize-setup-py-project.rst:232
msgid ""
"It is perfectly fine to leave a :file:`setup.py` file in the project source "
"tree even after all its content has been moved to :file:`pyproject.toml`. "
"This file can be as minimalistic as this:"
msgstr ""
"Совершенно нормально оставлять файл :file:`setup.py` в дереве исходников "
"проекта даже после того, как все его содержимое было перемещено в :file:"
"`pyproject.toml`. Этот файл может быть таким минималистичным:"

#: ../source/guides/modernize-setup-py-project.rst:246
msgid ":ref:`pyproject-toml-spec`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/guides/modernize-setup-py-project.rst:248
msgid ":doc:`setuptools:build_meta`"
msgstr ":doc:`setuptools:build_meta`"

#: ../source/guides/multi-version-installs.rst:6
msgid "Multi-version installs"
msgstr "Установка нескольких версий"

#: ../source/guides/multi-version-installs.rst:11
msgid ""
"easy_install allows simultaneous installation of different versions of the "
"same project into a single environment shared by multiple programs which "
"must ``require`` the appropriate version of the project at run time (using "
"``pkg_resources``)."
msgstr ""
"easy_install позволяет одновременно устанавливать различные версии одного и "
"того же проекта в единое окружение, разделяемое несколькими программами, "
"которые должны ``требовать`` соответствующую версию проекта во время "
"выполнения (используя ``pkg_resources``)."

#: ../source/guides/multi-version-installs.rst:16
msgid ""
"For many use cases, virtual environments address this need without the "
"complication of the ``require`` directive. However, the advantage of "
"parallel installations within the same environment is that it works for an "
"environment shared by multiple applications, such as the system Python in a "
"Linux distribution."
msgstr ""
"Для многих случаев использования виртуальные среды решают эту задачу без "
"усложнения директивы ``require``. Однако преимущество параллельной установки "
"в одной среде заключается в том, что она работает для среды, разделяемой "
"несколькими приложениями, например, для системы Python в дистрибутиве Linux."

#: ../source/guides/multi-version-installs.rst:22
msgid ""
"The major limitation of ``pkg_resources`` based parallel installation is "
"that as soon as you import ``pkg_resources`` it locks in the *default* "
"version of everything which is already available on sys.path. This can cause "
"problems, since ``setuptools`` created command line scripts use "
"``pkg_resources`` to find the entry point to execute. This means that, for "
"example, you can't use ``require`` tests invoked through ``nose`` or a WSGI "
"application invoked through ``gunicorn`` if your application needs a non-"
"default version of anything that is available on the standard ``sys.path`` - "
"the script wrapper for the main application will lock in the version that is "
"available by default, so the subsequent ``require`` call in your own code "
"fails with a spurious version conflict."
msgstr ""
"Основное ограничение параллельной установки на основе ``pkg_resources`` "
"заключается в том, что как только вы импортируете ``pkg_resources``, он "
"фиксирует *default* версию всего, что уже доступно в sys.path. Это может "
"вызвать проблемы, поскольку скрипты командной строки, созданные "
"``setuptools``, используют ``pkg_resources`` для поиска точки входа для "
"выполнения. Это означает, что, например, вы не сможете использовать тесты "
"``require``, вызываемые через ``nose``, или приложения WSGI, вызываемые "
"через ``gunicorn``, если вашему приложению нужна версия, отличная от той, "
"что доступна по умолчанию в стандартном ``sys.path`` - скриптовая обертка "
"для основного приложения заблокирует версию, доступную по умолчанию, и "
"последующий вызов ``require`` в вашем собственном коде завершится с ложным "
"конфликтом версий."

#: ../source/guides/multi-version-installs.rst:34
msgid ""
"This can be worked around by setting all dependencies in ``__main__."
"__requires__`` before importing ``pkg_resources`` for the first time, but "
"that approach does mean that standard command line invocations of the "
"affected tools can't be used - it's necessary to write a custom wrapper "
"script or use ``python3 -c '<command>'`` to invoke the application's main "
"entry point directly."
msgstr ""
"Это можно обойти, установив все зависимости в ``__main__.__requires__`` "
"перед первым импортом ``pkg_resources``, но такой подход означает, что "
"стандартные вызовы командной строки соответствующих инструментов не могут "
"быть использованы - необходимо написать собственный сценарий-обертку или "
"использовать ``python3 -c '<command>'`` для прямого вызова основной точки "
"входа приложения."

#: ../source/guides/multi-version-installs.rst:41
msgid ""
"Refer to the `pkg_resources documentation <https://setuptools.readthedocs.io/"
"en/latest/pkg_resources.html#workingset-objects>`__ for more details."
msgstr ""
"За более подробной информацией обратитесь к документации по `pkg_resources "
"<https://setuptools.readthedocs.io/en/latest/pkg_resources.html#workingset-"
"objects>`__."

#: ../source/guides/packaging-binary-extensions.rst:5
msgid "Packaging binary extensions"
msgstr "Упаковка двоичных расширений"

#: ../source/guides/packaging-binary-extensions.rst:8
msgid "2013-12-08"
msgstr "2013-12-08"

#: ../source/guides/packaging-binary-extensions.rst:10
msgid ""
"One of the features of the CPython reference interpreter is that, in "
"addition to allowing the execution of Python code, it also exposes a rich C "
"API for use by other software. One of the most common uses of this C API is "
"to create importable C extensions that allow things which aren't always easy "
"to achieve in pure Python code."
msgstr ""
"Одна из особенностей эталонного интерпретатора CPython заключается в том, "
"что, помимо возможности выполнения кода Python, он также предоставляет "
"богатый C API для использования другими программами. Одно из наиболее "
"распространенных применений этого C API - создание импортируемых расширений "
"C, которые позволяют делать вещи, которые не всегда легко реализовать в "
"чистом коде Python."

#: ../source/guides/packaging-binary-extensions.rst:18
msgid "An overview of binary extensions"
msgstr "Обзор двоичных расширений"

#: ../source/guides/packaging-binary-extensions.rst:21
msgid "Use cases"
msgstr "Варианты использования"

#: ../source/guides/packaging-binary-extensions.rst:23
msgid ""
"The typical use cases for binary extensions break down into just three "
"conventional categories:"
msgstr ""
"Типичные случаи использования бинарных расширений делятся всего на три "
"условные категории:"

#: ../source/guides/packaging-binary-extensions.rst:26
msgid ""
"**accelerator modules**: these modules are completely self-contained, and "
"are created solely to run faster than the equivalent pure Python code runs "
"in CPython. Ideally, accelerator modules will always have a pure Python "
"equivalent to use as a fallback if the accelerated version isn't available "
"on a given system. The CPython standard library makes extensive use of "
"accelerator modules. *Example*: When importing ``datetime``, Python falls "
"back to the `datetime.py <https://github.com/python/cpython/blob/main/Lib/"
"datetime.py>`_ module if the C implementation ( `_datetimemodule.c <https://"
"github.com/python/cpython/blob/main/Modules/_datetimemodule.c>`_) is not "
"available."
msgstr ""
"**Модули ускорителей**: эти модули полностью автономны и создаются "
"исключительно для того, чтобы работать быстрее, чем эквивалентный код на "
"чистом Python в CPython. В идеале, модули-ускорители всегда должны иметь "
"эквивалент на чистом Python, который можно использовать в качестве запасного "
"варианта, если ускоренная версия недоступна на данной системе. В стандартной "
"библиотеке CPython широко используются модули-ускорители. *Пример*: При "
"импорте ``datetime`` Python возвращается к модулю ``datetime.py <https://"
"github.com/python/cpython/blob/main/Lib/datetime.py>`_, если реализация на C "
"( ``_datetimemodule.c <https://github.com/python/cpython/blob/main/Modules/"
"_datetimemodule.c>`_) недоступна."

#: ../source/guides/packaging-binary-extensions.rst:37
msgid ""
"**wrapper modules**: these modules are created to expose existing C "
"interfaces to Python code. They may either expose the underlying C interface "
"directly, or else expose a more \"Pythonic\" API that makes use of Python "
"language features to make the API easier to use. The CPython standard "
"library makes extensive use of wrapper modules. *Example*: `functools.py "
"<https://github.com/python/cpython/blob/main/Lib/functools.py>`_ is a Python "
"module wrapper for `_functoolsmodule.c <https://github.com/python/cpython/"
"blob/main/Modules/_functoolsmodule.c>`_."
msgstr ""
"**модули-обертки**: эти модули создаются для раскрытия существующих "
"интерфейсов C в коде Python. Они могут либо напрямую раскрывать основной "
"интерфейс C, либо раскрывать более \"питоновский\" API, который использует "
"возможности языка Python, чтобы сделать API проще в использовании. В "
"стандартной библиотеке CPython широко используются модули-обертки. *Пример*: "
"`functools.py <https://github.com/python/cpython/blob/main/Lib/functools."
"py>`_ - это модуль-обертка Python для `_functoolsmodule.c <https://github."
"com/python/cpython/blob/main/Modules/_functoolsmodule.c>`_."

#: ../source/guides/packaging-binary-extensions.rst:45
msgid ""
"**low-level system access**: these modules are created to access lower level "
"features of the CPython runtime, the operating system, or the underlying "
"hardware. Through platform specific code, extension modules may achieve "
"things that aren't possible in pure Python code. A number of CPython "
"standard library modules are written in C in order to access interpreter "
"internals that aren't exposed at the language level. *Example*: ``sys``, "
"which comes from `sysmodule.c <https://github.com/python/cpython/blob/main/"
"Python/sysmodule.c>`_."
msgstr ""
"**низкоуровневый доступ к системе**: эти модули создаются для доступа к "
"функциям нижнего уровня среды выполнения CPython, операционной системы или "
"базового оборудования. С помощью специфического для платформы кода модули "
"расширения могут достигать того, что невозможно в чистом коде Python. Ряд "
"модулей стандартной библиотеки CPython написан на языке C, чтобы получить "
"доступ к внутренним функциям интерпретатора, которые не раскрываются на "
"уровне языка. *Пример*: ``Sys``, который берется из `sysmodule.c <https://"
"github.com/python/cpython/blob/main/Python/sysmodule.c>`_."

#: ../source/guides/packaging-binary-extensions.rst:54
msgid ""
"One particularly notable feature of C extensions is that, when they don't "
"need to call back into the interpreter runtime, they can release CPython's "
"global interpreter lock around long-running operations (regardless of "
"whether those operations are CPU or IO bound)."
msgstr ""
"Особенно примечательной особенностью расширений на C является то, что, когда "
"им не нужно возвращаться во время выполнения интерпретатора, они могут "
"освободить глобальную блокировку интерпретатора CPython для длительных "
"операций (независимо от того, связаны ли эти операции с процессором или IO)."

#: ../source/guides/packaging-binary-extensions.rst:59
msgid ""
"Not all extension modules will fit neatly into the above categories. The "
"extension modules included with NumPy, for example, span all three use cases "
"- they move inner loops to C for speed reasons, wrap external libraries "
"written in C, FORTRAN and other languages, and use low level system "
"interfaces for both CPython and the underlying operation system to support "
"concurrent execution of vectorised operations and to tightly control the "
"exact memory layout of created objects."
msgstr ""
"Не все модули расширения будут четко вписываться в вышеперечисленные "
"категории. Например, модули расширения, входящие в состав NumPy, охватывают "
"все три варианта использования - они переносят внутренние циклы на C по "
"соображениям скорости, оборачивают внешние библиотеки, написанные на C, "
"FORTRAN и других языках, и используют низкоуровневые системные интерфейсы "
"как для CPython, так и для базовой операционной системы, чтобы поддерживать "
"одновременное выполнение векторных операций и жестко контролировать точное "
"расположение в памяти созданных объектов."

#: ../source/guides/packaging-binary-extensions.rst:69
msgid "Disadvantages"
msgstr "Недостатки"

#: ../source/guides/packaging-binary-extensions.rst:71
msgid ""
"The main disadvantage of using binary extensions is the fact that it makes "
"subsequent distribution of the software more difficult. One of the "
"advantages of using Python is that it is largely cross platform, and the "
"languages used to write extension modules (typically C or C++, but really "
"any language that can bind to the CPython C API) typically require that "
"custom binaries be created for different platforms."
msgstr ""
"Основным недостатком использования бинарных расширений является то, что это "
"затрудняет последующее распространение программного обеспечения. Одним из "
"преимуществ использования Python является то, что он в значительной степени "
"кроссплатформенный, а языки, используемые для написания модулей расширения "
"(обычно это C или C++, но на самом деле любой язык, который может "
"связываться с CPython C API), обычно требуют создания собственных двоичных "
"файлов для разных платформ."

#: ../source/guides/packaging-binary-extensions.rst:78
msgid "This means that binary extensions:"
msgstr "Это означает, что двоичные расширения:"

#: ../source/guides/packaging-binary-extensions.rst:80
msgid ""
"require that end users be able to either build them from source, or else "
"that someone publish pre-built binaries for common platforms"
msgstr ""
"требуют, чтобы конечные пользователи могли либо собрать их из исходных "
"текстов, либо чтобы кто-то опубликовал предварительно собранные двоичные "
"файлы для распространенных платформ"

#: ../source/guides/packaging-binary-extensions.rst:83
msgid ""
"may not be compatible with different builds of the CPython reference "
"interpreter"
msgstr ""
"может быть несовместим с различными сборками эталонного интерпретатора "
"CPython"

#: ../source/guides/packaging-binary-extensions.rst:86
msgid ""
"often will not work correctly with alternative interpreters such as PyPy, "
"IronPython or Jython"
msgstr ""
"часто не будет корректно работать с альтернативными интерпретаторами, такими "
"как PyPy, IronPython или Jython"

#: ../source/guides/packaging-binary-extensions.rst:89
msgid ""
"if handcoded, make maintenance more difficult by requiring that maintainers "
"be familiar not only with Python, but also with the language used to create "
"the binary extension, as well as with the details of the CPython C API."
msgstr ""
"при ручном кодировании усложняют сопровождение, требуя, чтобы сопровождающие "
"были знакомы не только с Python, но и с языком, использованным для создания "
"бинарного расширения, а также с деталями CPython C API."

#: ../source/guides/packaging-binary-extensions.rst:94
msgid ""
"if a pure Python fallback implementation is provided, make maintenance more "
"difficult by requiring that changes be implemented in two places, and "
"introducing additional complexity in the test suite to ensure both versions "
"are always executed."
msgstr ""
"если предусмотрена обратная реализация на чистом Python, усложняет "
"сопровождение, требуя, чтобы изменения были реализованы в двух местах, и "
"вносит дополнительные сложности в набор тестов, чтобы гарантировать, что обе "
"версии всегда выполняются."

#: ../source/guides/packaging-binary-extensions.rst:99
msgid ""
"Another disadvantage of relying on binary extensions is that alternative "
"import mechanisms (such as the ability to import modules directly from "
"zipfiles) often won't work for extension modules (as the dynamic loading "
"mechanisms on most platforms can only load libraries from disk)."
msgstr ""
"Еще одним недостатком использования бинарных расширений является то, что "
"альтернативные механизмы импорта (например, возможность импортировать модули "
"непосредственно из zip-файлов) часто не работают для модулей расширений "
"(поскольку механизмы динамической загрузки на большинстве платформ могут "
"загружать библиотеки только с диска)."

#: ../source/guides/packaging-binary-extensions.rst:106
msgid "Alternatives to handcoded accelerator modules"
msgstr "Альтернативы ручному написанию ускоряющих модулей"

#: ../source/guides/packaging-binary-extensions.rst:108
msgid ""
"When extension modules are just being used to make code run faster (after "
"profiling has identified the code where the speed increase is worth "
"additional maintenance effort), a number of other alternatives should also "
"be considered:"
msgstr ""
"Если модули расширения используются только для ускорения работы кода (после "
"того как профилирование выявило код, где увеличение скорости стоит "
"дополнительных усилий по сопровождению), следует рассмотреть и ряд других "
"альтернатив:"

#: ../source/guides/packaging-binary-extensions.rst:113
msgid ""
"look for existing optimised alternatives. The CPython standard library "
"includes a number of optimised data structures and algorithms (especially in "
"the builtins and the ``collections`` and ``itertools`` modules). The Python "
"Package Index also offers additional alternatives. Sometimes, the "
"appropriate choice of standard library or third party module can avoid the "
"need to create your own accelerator module."
msgstr ""
"искать существующие оптимизированные альтернативы. Стандартная библиотека "
"CPython содержит ряд оптимизированных структур данных и алгоритмов (особенно "
"во встроенных модулях и модулях ``коллекции`` и ``итертулы``). Индекс "
"пакетов Python также предлагает дополнительные альтернативы. Иногда "
"правильный выбор стандартной библиотеки или стороннего модуля позволяет "
"избежать необходимости создания собственного модуля-ускорителя."

#: ../source/guides/packaging-binary-extensions.rst:120
msgid ""
"for long running applications, the JIT compiled `PyPy interpreter <https://"
"www.pypy.org/>`__ may offer a suitable alternative to the standard CPython "
"runtime. The main barrier to adopting PyPy is typically reliance on other "
"binary extension modules - while PyPy does emulate the CPython C API, "
"modules that rely on that cause problems for the PyPy JIT, and the emulation "
"layer can often expose latent defects in extension modules that CPython "
"currently tolerates (frequently around reference counting errors - an object "
"having one live reference instead of two often won't break anything, but no "
"references instead of one is a major problem)."
msgstr ""
"Для долго работающих приложений JIT-компилируемый интерпретатор `PyPy "
"<https://www.pypy.org/>`__ может стать подходящей альтернативой стандартной "
"среде выполнения CPython. Основным препятствием для внедрения PyPy обычно "
"является зависимость от других бинарных модулей расширения - хотя PyPy и "
"эмулирует CPython C API, модули, полагающиеся на него, создают проблемы для "
"PyPy JIT, а слой эмуляции часто может выявить скрытые дефекты в модулях "
"расширения, к которым CPython в настоящее время терпим (часто вокруг ошибок "
"подсчета ссылок - объект с одной живой ссылкой вместо двух часто ничего не "
"нарушает, но отсутствие ссылок вместо одной является большой проблемой)."

#: ../source/guides/packaging-binary-extensions.rst:130
msgid ""
"`Cython <https://cython.org/>`__ is a mature static compiler that can "
"compile most Python code to C extension modules. The initial compilation "
"provides some speed increases (by bypassing the CPython interpreter layer), "
"and Cython's optional static typing features can offer additional "
"opportunities for speed increases. Using Cython still carries the "
"`disadvantages`_ associated with using binary extensions, but has the "
"benefit of having a reduced barrier to entry for Python programmers "
"(relative to other languages like C or C++)."
msgstr ""
"`Cython <https://cython.org/>`__ - это зрелый статический компилятор, "
"который может компилировать большинство кода Python в модули расширения C. "
"Первоначальная компиляция обеспечивает некоторое увеличение скорости (минуя "
"слой интерпретатора CPython), а дополнительные функции статической типизации "
"Cython могут предложить дополнительные возможности для увеличения скорости. "
"Использование Cython все еще имеет недостатки, связанные с использованием "
"бинарных расширений, но имеет преимущество в виде снижения барьера входа для "
"программистов на Python (по сравнению с другими языками, такими как C или C+"
"+)."

#: ../source/guides/packaging-binary-extensions.rst:139
msgid ""
"`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members of "
"the scientific Python community, that aims to leverage LLVM to allow "
"selective compilation of pieces of a Python application to native machine "
"code at runtime. It requires that LLVM be available on the system where the "
"code is running, but can provide significant speed increases, especially for "
"operations that are amenable to vectorisation."
msgstr ""
"`Numba <http://numba.pydata.org/>`__ - это новый инструмент, созданный "
"членами научного Python-сообщества, цель которого - использовать LLVM для "
"выборочной компиляции частей Python-приложения в нативный машинный код во "
"время выполнения. Он требует, чтобы LLVM был доступен в системе, на которой "
"выполняется код, но может обеспечить значительное увеличение скорости, "
"особенно для операций, которые поддаются векторизации."

#: ../source/guides/packaging-binary-extensions.rst:148
msgid "Alternatives to handcoded wrapper modules"
msgstr "Альтернативы ручному написанию модулей-обёрток"

#: ../source/guides/packaging-binary-extensions.rst:150
msgid ""
"The C ABI (Application Binary Interface) is a common standard for sharing "
"functionality between multiple applications. One of the strengths of the "
"CPython C API (Application Programming Interface) is allowing Python users "
"to tap into that functionality. However, wrapping modules by hand is quite "
"tedious, so a number of other alternative approaches should be considered."
msgstr ""
"C ABI (Application Binary Interface) - это общий стандарт для совместного "
"использования функциональности несколькими приложениями. Одной из сильных "
"сторон CPython C API (Application Programming Interface) является "
"возможность использования этой функциональности пользователями Python. "
"Однако создавать модули вручную довольно утомительно, поэтому следует "
"рассмотреть ряд других альтернативных подходов."

#: ../source/guides/packaging-binary-extensions.rst:156
msgid ""
"The approaches described below don't simplify the distribution case at all, "
"but they *can* significantly reduce the maintenance burden of keeping "
"wrapper modules up to date."
msgstr ""
"Описанные ниже подходы не упрощают ситуацию с дистрибутивами, но они *могут* "
"значительно снизить нагрузку на поддержку модулей-оберток в актуальном "
"состоянии."

#: ../source/guides/packaging-binary-extensions.rst:160
msgid ""
"In addition to being useful for the creation of accelerator modules, `Cython "
"<https://cython.org/>`__ is also widely used for creating wrapper modules "
"for C or C++ APIs. It involves wrapping the interfaces by hand, which gives "
"a wide range of freedom in designing and optimising the wrapper code, but "
"may not be a good choice for wrapping very large APIs quickly. See the `list "
"of third-party tools <https://github.com/cython/cython/wiki/AutoPxd>`_ for "
"automatic wrapping with Cython. It also supports performance-oriented Python "
"implementations that provide a CPython-like C-API, such as PyPy and Pyston."
msgstr ""
"Помимо того, что `Cython <https://cython.org/>`__ полезен для создания "
"модулей ускорителей, он также широко используется для создания модулей-"
"оберток для API на C или C++. Это предполагает обертывание интерфейсов "
"вручную, что дает широкую свободу в проектировании и оптимизации кода "
"обертки, но может быть не лучшим выбором для быстрого обертывания очень "
"больших API. См. `список сторонних инструментов <https://github.com/cython/"
"cython/wiki/AutoPxd>`_ для автоматического обертывания с помощью Cython. Он "
"также поддерживает ориентированные на производительность реализации Python, "
"которые предоставляют CPython-подобный C-API, такие как PyPy и Pyston."

#: ../source/guides/packaging-binary-extensions.rst:171
msgid ""
":doc:`pybind11 <pybind11:index>` is a pure C++11 library that provides a "
"clean C++ interface to the CPython (and PyPy) C API. It does not require a "
"pre-processing step; it is written entirely in templated C++. Helpers are "
"included for Setuptools or CMake builds. It was based on `Boost.Python "
"<https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/index.html>`__, "
"but doesn't require the Boost libraries or BJam."
msgstr ""
":doc:`pybind11 <pybind11:index>` - это чистая библиотека C++11, которая "
"предоставляет чистый C++ интерфейс к CPython (и PyPy) C API. Она не требует "
"предварительной обработки и написана полностью на шаблонизированном C++. В "
"комплект включены помощники для сборки Setuptools или CMake. Он был основан "
"на `Boost.Python <https://www.boost.org/doc/libs/1_76_0/libs/python/doc/html/"
"index.html>`__, но не требует библиотек Boost или BJam."

#: ../source/guides/packaging-binary-extensions.rst:178
msgid ""
":doc:`cffi <cffi:index>` is a project created by some of the PyPy developers "
"to make it straightforward for developers that already know both Python and "
"C to expose their C modules to Python applications. It also makes it "
"relatively straightforward to wrap a C module based on its header files, "
"even if you don't know C yourself."
msgstr ""
":doc:`cffi <cffi:index>` - это проект, созданный некоторыми разработчиками "
"PyPy, чтобы упростить разработчикам, которые уже знают Python и C, "
"возможность использовать свои C-модули в Python-приложениях. Он также "
"позволяет относительно просто обернуть модуль на Си на основе его "
"заголовочных файлов, даже если вы сами не знаете Си."

#: ../source/guides/packaging-binary-extensions.rst:184
msgid ""
"One of the key advantages of ``cffi`` is that it is compatible with the PyPy "
"JIT, allowing CFFI wrapper modules to participate fully in PyPy's tracing "
"JIT optimisations."
msgstr ""
"Одним из ключевых преимуществ ``cffi`` является его совместимость с PyPy "
"JIT, что позволяет модулям-оберткам CFFI полноценно участвовать в JIT-"
"оптимизации трассировки PyPy."

#: ../source/guides/packaging-binary-extensions.rst:188
msgid ""
"`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that allows "
"a variety of programming languages, including Python, to interface with C "
"and C++ code."
msgstr ""
"`SWIG <http://www.swig.org/>`__ - это генератор интерфейсов-оберток, который "
"позволяет различным языкам программирования, включая Python, "
"взаимодействовать с кодом на C и C++."

#: ../source/guides/packaging-binary-extensions.rst:192
msgid ""
"The standard library's ``ctypes`` module, while useful for getting access to "
"C level interfaces when header information isn't available, suffers from the "
"fact that it operates solely at the C ABI level, and thus has no automatic "
"consistency checking between the interface actually being exported by the "
"library and the one declared in the Python code. By contrast, the above "
"alternatives are all able to operate at the C *API* level, using C header "
"files to ensure consistency between the interface exported by the library "
"being wrapped and the one expected by the Python wrapper module. While "
"``cffi`` *can* operate directly at the C ABI level, it suffers from the same "
"interface inconsistency problems as ``ctypes`` when it is used that way."
msgstr ""
"Модуль ``ctypes'' стандартной библиотеки, хотя и полезен для получения "
"доступа к интерфейсам уровня C, когда информация о заголовках недоступна, "
"страдает от того, что он работает исключительно на уровне C ABI, и поэтому "
"не имеет автоматической проверки согласованности между интерфейсом, "
"фактически экспортируемым библиотекой, и интерфейсом, объявленным в коде "
"Python. В отличие от этого, все вышеперечисленные альтернативы способны "
"работать на уровне C *API*, используя заголовочные файлы C для обеспечения "
"согласованности между интерфейсом, экспортируемым обертываемой библиотекой, "
"и интерфейсом, ожидаемым модулем-оберткой Python. Хотя ``cffi`` *может* "
"работать непосредственно на уровне C ABI, он страдает от тех же проблем "
"несогласованности интерфейсов, что и ``ctypes``, когда его используют таким "
"образом."

#: ../source/guides/packaging-binary-extensions.rst:206
msgid "Alternatives for low level system access"
msgstr "Альтернативы для низкоуровневого доступа к системе"

#: ../source/guides/packaging-binary-extensions.rst:208
msgid ""
"For applications that need low level system access (regardless of the "
"reason), a binary extension module often *is* the best way to go about it. "
"This is particularly true for low level access to the CPython runtime "
"itself, since some operations (like releasing the Global Interpreter Lock) "
"are simply invalid when the interpreter is running code, even if a module "
"like ``ctypes`` or ``cffi`` is used to obtain access to the relevant C API "
"interfaces."
msgstr ""
"Для приложений, которым нужен низкоуровневый доступ к системе (независимо от "
"причины), модуль бинарного расширения часто *является* лучшим способом "
"решения этой проблемы. Это особенно верно для низкоуровневого доступа к "
"самой среде выполнения CPython, поскольку некоторые операции (например, "
"снятие глобальной блокировки интерпретатора) просто недействительны, когда "
"интерпретатор выполняет код, даже если для получения доступа к "
"соответствующим интерфейсам C API используется модуль типа ``ctypes`` или "
"``cffi``."

#: ../source/guides/packaging-binary-extensions.rst:216
msgid ""
"For cases where the extension module is manipulating the underlying "
"operating system or hardware (rather than the CPython runtime), it may "
"sometimes be better to just write an ordinary C library (or a library in "
"another systems programming language like C++ or Rust that can export a C "
"compatible ABI), and then use one of the wrapping techniques described above "
"to make the interface available as an importable Python module."
msgstr ""
"Для случаев, когда модуль расширения манипулирует базовой операционной "
"системой или аппаратным обеспечением (а не средой выполнения CPython), "
"иногда лучше просто написать обычную библиотеку на C (или библиотеку на "
"другом системном языке программирования, например C++ или Rust, который "
"может экспортировать ABI, совместимый с C), а затем использовать одну из "
"описанных выше техник обертывания, чтобы сделать интерфейс доступным в "
"качестве импортируемого модуля Python."

#: ../source/guides/packaging-binary-extensions.rst:225
msgid "Implementing binary extensions"
msgstr "Реализация двоичных расширений"

#: ../source/guides/packaging-binary-extensions.rst:227
msgid ""
"The CPython :doc:`Extending and Embedding <python:extending/index>` guide "
"includes an introduction to writing a :doc:`custom extension module in C "
"<python:extending/extending>`."
msgstr ""
"Руководство CPython :doc:`Extending and Embedding <python:extending/index>` "
"включает в себя введение в написание модуля расширения :doc:`custom "
"extension module in C <python:extending/extending>`."

#: ../source/guides/packaging-binary-extensions.rst:231
msgid ""
"FIXME: Elaborate that all this is one of the reasons why you probably "
"*don't* want to handcode your extension modules :)"
msgstr ""
"FIXME: Уточните, что все это - одна из причин, почему вы, вероятно, *не* "
"хотите вручную кодировать свои модули расширения :)"

#: ../source/guides/packaging-binary-extensions.rst:236
msgid "Extension module lifecycle"
msgstr "Жизненный цикл модуля расширения"

#: ../source/guides/packaging-binary-extensions.rst:238
#: ../source/guides/packaging-binary-extensions.rst:244
#: ../source/guides/packaging-binary-extensions.rst:250
#: ../source/guides/packaging-binary-extensions.rst:256
#: ../source/guides/packaging-binary-extensions.rst:376
msgid "FIXME: This section needs to be fleshed out."
msgstr "FIXME: Этот раздел нуждается в доработке."

#: ../source/guides/packaging-binary-extensions.rst:242
msgid "Implications of shared static state and subinterpreters"
msgstr "Последствия общего статического состояния и субинтерпретаторов"

#: ../source/guides/packaging-binary-extensions.rst:248
msgid "Implications of the GIL"
msgstr "Последствия GIL"

#: ../source/guides/packaging-binary-extensions.rst:254
msgid "Memory allocation APIs"
msgstr "API для распределения памяти"

#: ../source/guides/packaging-binary-extensions.rst:262
msgid "ABI Compatibility"
msgstr "Совместимость ABI"

#: ../source/guides/packaging-binary-extensions.rst:264
msgid ""
"The CPython C API does not guarantee ABI stability between minor releases "
"(3.2, 3.3, 3.4, etc.). This means that, typically, if you build an extension "
"module against one version of Python, it is only guaranteed to work with the "
"same minor version of Python and not with any other minor versions."
msgstr ""
"CPython C API не гарантирует стабильность ABI между минорными версиями (3.2, "
"3.3, 3.4 и т.д.). Это означает, что, как правило, если вы собираете модуль "
"расширения для одной версии Python, он гарантированно будет работать только "
"с той же минорной версией Python, но не с любыми другими минорными версиями."

#: ../source/guides/packaging-binary-extensions.rst:270
msgid ""
"Python 3.2 introduced the Limited API, with is a well-defined subset of "
"Python's C API. The symbols needed for the Limited API form the \"Stable "
"ABI\" which is guaranteed to be compatible across all Python 3.x versions. "
"Wheels containing extensions built against the stable ABI use the ``abi3`` "
"ABI tag, to reflect that they're compatible with all Python 3.x versions."
msgstr ""
"В Python 3.2 появился Limited API, который представляет собой четко "
"определенное подмножество API Python на языке C. Символы, необходимые для "
"Limited API, образуют \"Стабильный ABI\", который гарантированно совместим "
"со всеми версиями Python 3.x. Колеса, содержащие расширения, созданные на "
"основе стабильного ABI, используют тег ``abi3`` ABI, чтобы показать, что они "
"совместимы со всеми версиями Python 3.x."

#: ../source/guides/packaging-binary-extensions.rst:277
msgid ""
"CPython's :doc:`C API stability<python:c-api/stable>` page provides detailed "
"information about the API / ABI stability guarantees, how to use the Limited "
"API and the exact contents of the \"Limited API\"."
msgstr ""
"Страница CPython :doc:`C API stability<python:c-api/stable>` содержит "
"подробную информацию о гарантиях стабильности API / ABI, о том, как "
"использовать Limited API и о точном содержании \"Limited API\"."

#: ../source/guides/packaging-binary-extensions.rst:283
msgid "Building binary extensions"
msgstr "Создание бинарных расширений"

#: ../source/guides/packaging-binary-extensions.rst:285
msgid "FIXME: Cover the build-backends available for building extensions."
msgstr "FIXME: Покройте сборки-бэкенды, доступные для сборки расширений."

#: ../source/guides/packaging-binary-extensions.rst:288
msgid "Building extensions for multiple platforms"
msgstr "Создание расширений для нескольких платформ"

#: ../source/guides/packaging-binary-extensions.rst:290
msgid ""
"If you plan to distribute your extension, you should provide :term:`wheels "
"<Wheel>` for all the platforms you intend to support. These are usually "
"built on continuous integration (CI) systems. There are tools to help you "
"build highly redistributable binaries from CI; these include :ref:"
"`cibuildwheel` and :ref:`multibuild`."
msgstr ""
"Если вы планируете распространять свое расширение, вам следует предоставить :"
"term:`wheels <Wheel>` для всех платформ, которые вы собираетесь "
"поддерживать. Обычно они создаются на основе систем непрерывной интеграции "
"(CI). Существуют инструменты, которые помогут вам собрать перераспределяемые "
"двоичные файлы из CI; к ним относятся :ref:`cibuildwheel` и :ref:"
"`multibuild`."

#: ../source/guides/packaging-binary-extensions.rst:296
msgid ""
"For most extensions, you will need to build wheels for all the platforms you "
"intend to support. This means that the number of wheels you need to build is "
"the product of::"
msgstr ""
"Для большинства расширений вам потребуется создать колеса для всех платформ, "
"которые вы собираетесь поддерживать. Это означает, что количество колес, "
"которые вам нужно построить, складывается из::"

#: ../source/guides/packaging-binary-extensions.rst:302
msgid ""
"Using CPython's :ref:`Stable ABI <cpython-stable-abi>` can help "
"significantly reduce the number of wheels you need to provide, since a "
"single wheel on a platform can be used with all Python minor versions; "
"eliminating one dimension of the matrix. It also removes the need to "
"generate new wheels for each new minor version of Python."
msgstr ""
"Использование CPython :ref:`Stable ABI <cpython-stable-abi>` может "
"значительно сократить количество колес, которые вам нужно предоставить, так "
"как одно колесо на платформе может использоваться со всеми минорными "
"версиями Python, устраняя одно измерение матрицы. Это также избавляет от "
"необходимости генерировать новые колеса для каждой новой минорной версии "
"Python."

#: ../source/guides/packaging-binary-extensions.rst:309
msgid "Binary extensions for Windows"
msgstr "Двоичные расширения для Windows"

#: ../source/guides/packaging-binary-extensions.rst:311
msgid ""
"Before it is possible to build a binary extension, it is necessary to ensure "
"that you have a suitable compiler available. On Windows, Visual C is used to "
"build the official CPython interpreter, and should be used to build "
"compatible binary extensions.  To set up a build environment for binary "
"extensions, install `Visual Studio Community Edition <https://visualstudio."
"microsoft.com/downloads/>`__ - any recent version is fine."
msgstr ""
"Прежде чем приступить к созданию бинарного расширения, необходимо убедиться, "
"что у вас есть подходящий компилятор. В Windows для сборки официального "
"интерпретатора CPython используется Visual C, который следует использовать "
"для сборки совместимых бинарных расширений.  Чтобы создать среду сборки для "
"бинарных расширений, установите `Visual Studio Community Edition <https://"
"visualstudio.microsoft.com/downloads/>`__ - подойдет любая последняя версия."

#: ../source/guides/packaging-binary-extensions.rst:318
msgid ""
"One caveat: if you use Visual Studio 2019 or later, your extension will "
"depend on an \"extra\" file, ``VCRUNTIME140_1.dll``, in addition to the "
"``VCRUNTIME140.dll`` that all previous versions back to 2015 depend on. This "
"will add an extra requirement to using your extension on versions of CPython "
"that do not include this extra file. To avoid this, you can add the compile-"
"time argument ``/d2FH4-``. Recent versions of Python may include this file."
msgstr ""
"Одна оговорка: если вы используете Visual Studio 2019 или более позднюю "
"версию, ваше расширение будет зависеть от \"дополнительного\" файла, "
"``VCRUNTIME140_1.dll``, в дополнение к ``VCRUNTIME140.dll``, от которого "
"зависят все предыдущие версии, начиная с 2015 года. Это добавит "
"дополнительные требования к использованию вашего расширения в версиях "
"CPython, которые не включают этот дополнительный файл. Чтобы избежать этого, "
"вы можете добавить аргумент времени компиляции ``/d2FH4-``. Последние версии "
"Python могут включать этот файл."

#: ../source/guides/packaging-binary-extensions.rst:326
msgid ""
"Building for Python prior to 3.5 is discouraged, because older versions of "
"Visual Studio are no longer available from Microsoft. If you do need to "
"build for older versions, you can set ``DISTUTILS_USE_SDK=1`` and "
"``MSSdk=1`` to force a the currently activated version of MSVC to be found, "
"and you should exercise care when designing your extension not to malloc/"
"free memory across different libraries, avoid relying on changed data "
"structures, and so on. Tools for generating extension modules usually avoid "
"these things for you."
msgstr ""
"Сборка для Python до версии 3.5 не рекомендуется, поскольку старые версии "
"Visual Studio больше не поставляются компанией Microsoft. Если вам все же "
"необходимо собирать для старых версий, вы можете установить "
"``DISTUTILS_USE_SDK=1`` и ``MSSdk=1`` для принудительного поиска текущей "
"активированной версии MSVC, а также проявить осторожность при разработке "
"расширения, чтобы не расшаривать/свобождать память в разных библиотеках, не "
"полагаться на измененные структуры данных и так далее. Инструменты для "
"генерации модулей расширения обычно позволяют избежать этих проблем."

#: ../source/guides/packaging-binary-extensions.rst:337
msgid "Binary extensions for Linux"
msgstr "Двоичные расширения для Linux"

#: ../source/guides/packaging-binary-extensions.rst:339
msgid ""
"Linux binaries must use a sufficiently old glibc to be compatible with older "
"distributions. The `manylinux <https://github.com/pypa/manylinux>`_ Docker "
"images provide a build environment with a glibc old enough to support most "
"current Linux distributions on common architectures."
msgstr ""
"Для совместимости с более старыми дистрибутивами Linux двоичные файлы должны "
"использовать достаточно старый glibc. Docker-образы `manylinux <https://"
"github.com/pypa/manylinux>`_ предоставляют среду сборки с достаточно старой "
"glibc для поддержки большинства современных дистрибутивов Linux на "
"распространенных архитектурах."

#: ../source/guides/packaging-binary-extensions.rst:345
msgid "Binary extensions for macOS"
msgstr "Двоичные расширения для macOS"

#: ../source/guides/packaging-binary-extensions.rst:347
msgid ""
"Binary compatibility on macOS is determined by the target minimum deployment "
"system, e.g. *10.9*, which is often specified with the "
"``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building binaries "
"on macOS. When building with setuptools / distutils, the deployment target "
"is specified with the flag ``--plat-name``, e.g. ``macosx-10.9-x86_64``. For "
"common deployment targets for macOS Python distributions, see the `MacPython "
"Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/Spinning-"
"wheels>`_."
msgstr ""
"Совместимость бинарных файлов на macOS определяется целевой минимальной "
"системой развертывания, например *10.9*, которая часто указывается с помощью "
"переменной окружения ``MACOSX_DEPLOYMENT_TARGET`` при сборке бинарных файлов "
"на macOS. При сборке с помощью setuptools / distutils цель развертывания "
"указывается с помощью флага ``--plat-name``, например ``macosx-10.9-"
"x86_64``. Об общих целях развертывания для дистрибутивов macOS Python см. в "
"`MacPython Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/"
"Spinning-wheels>`_."

#: ../source/guides/packaging-binary-extensions.rst:357
msgid "Publishing binary extensions"
msgstr "Публикация двоичных расширений"

#: ../source/guides/packaging-binary-extensions.rst:359
msgid ""
"Publishing binary extensions through PyPI uses the same upload mechanisms as "
"publishing pure Python packages. You build a wheel file for your extension "
"using the build-backend and upload it to PyPI using :doc:`twine <twine:"
"index>`."
msgstr ""
"Публикация бинарных расширений через PyPI использует те же механизмы "
"загрузки, что и публикация пакетов чистого Python. Вы создаете wheel-файл "
"для своего расширения с помощью build-бэкенда и загружаете его в PyPI с "
"помощью :doc:`twine <twine:index>`."

#: ../source/guides/packaging-binary-extensions.rst:365
msgid "Avoid binary-only releases"
msgstr "Избегайте выпуска только бинарных релизов"

#: ../source/guides/packaging-binary-extensions.rst:367
msgid ""
"It is strongly recommended that you publish your binary extensions as well "
"as the source code that was used to build them. This allows users to build "
"the extension from source if they need to. Notably, this is required for "
"certain Linux distributions that build from source within their own build "
"systems for the distro package repositories."
msgstr ""
"Настоятельно рекомендуется публиковать бинарные расширения, а также исходный "
"код, который был использован для их создания. Это позволит пользователям при "
"необходимости собрать расширение из исходного кода. В частности, это "
"требуется для некоторых дистрибутивов Linux, которые собирают расширения из "
"исходного кода в своих собственных системах сборки для репозиториев пакетов "
"дистрибутива."

#: ../source/guides/packaging-binary-extensions.rst:374
msgid "Weak linking"
msgstr "Слабая связь"

#: ../source/guides/packaging-binary-extensions.rst:379
msgid "Additional resources"
msgstr "Дополнительные ресурсы"

#: ../source/guides/packaging-binary-extensions.rst:381
msgid ""
"Cross-platform development and distribution of extension modules is a "
"complex topic, so this guide focuses primarily on providing pointers to "
"various tools that automate dealing with the underlying technical "
"challenges. The additional resources in this section are instead intended "
"for developers looking to understand more about the underlying binary "
"interfaces that those systems rely on at runtime."
msgstr ""
"Кросс-платформенная разработка и распространение модулей расширения - "
"сложная тема, поэтому в данном руководстве основное внимание уделено "
"указателям на различные инструменты, автоматизирующие решение основных "
"технических проблем. Дополнительные ресурсы в этом разделе предназначены для "
"разработчиков, желающих больше узнать о базовых бинарных интерфейсах, на "
"которые опираются эти системы во время выполнения."

#: ../source/guides/packaging-binary-extensions.rst:388
msgid "Cross-platform wheel generation with scikit-build"
msgstr "Кросс-платформенная генерация колёс при помощи scikit-build"

#: ../source/guides/packaging-binary-extensions.rst:390
msgid ""
"The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ package "
"helps abstract cross-platform build operations and provides additional "
"capabilities when creating binary extension packages. Additional "
"documentation is also available on the `C runtime, compiler, and build "
"system generator <https://scikit-build.readthedocs.io/en/latest/generators."
"html>`_ for Python binary extension modules."
msgstr ""
"Пакет `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ "
"помогает абстрагироваться от кроссплатформенных операций сборки и "
"предоставляет дополнительные возможности при создании пакетов бинарных "
"расширений. Также доступна дополнительная документация по `C runtime, "
"компилятору и генератору системы сборки <https://scikit-build.readthedocs.io/"
"en/latest/generators.html>`_ для бинарных модулей расширения Python."

#: ../source/guides/packaging-binary-extensions.rst:398
msgid "Introduction to C/C++ extension modules"
msgstr "Введение в модули расширения на C/C++"

#: ../source/guides/packaging-binary-extensions.rst:400
msgid ""
"For a more in depth explanation of how extension modules are used by CPython "
"on a Debian system, see the following articles:"
msgstr ""
"Для более подробного объяснения того, как модули расширения используются в "
"CPython на системе Debian, смотрите следующие статьи:"

#: ../source/guides/packaging-binary-extensions.rst:403
msgid ""
"`What are (c)python extension modules? <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"
msgstr ""
"Что такое модули расширения (c)python? <https://thomasnyberg.com/"
"what_are_extension_modules.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:404
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr "`Освобождение gil <https://thomasnyberg.com/releasing_the_gil.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:405
msgid ""
"`Writing cpython extension modules using C++ <https://thomasnyberg.com/"
"cpp_extension_modules.html>`_"
msgstr ""
"`Написание модулей расширения cpython с использованием C++ <https://"
"thomasnyberg.com/cpp_extension_modules.html>`_"

#: ../source/guides/packaging-binary-extensions.rst:408
msgid "Additional considerations for binary wheels"
msgstr "Дополнительные соображения для бинарных колес"

#: ../source/guides/packaging-binary-extensions.rst:410
msgid ""
"The `pypackaging-native <https://pypackaging-native.github.io/>`_ website "
"has additional coverage of packaging Python packages with native code. It "
"aims to provide an overview of the most important packaging issues for such "
"projects, with in-depth explanations and references."
msgstr ""
"Сайт `pypackaging-native <https://pypackaging-native.github.io/>`_ содержит "
"дополнительные сведения об упаковке пакетов Python с нативным кодом. Его "
"цель - предоставить обзор наиболее важных вопросов упаковки для таких "
"проектов, а также подробные объяснения и ссылки."

#: ../source/guides/packaging-binary-extensions.rst:415
msgid ""
"Examples of topics covered are non-Python compiled dependencies (\"native "
"dependencies\"), the importance of the ABI (Application Binary Interface) of "
"native code, dependency on SIMD code and cross compilation."
msgstr ""
"Например, рассматриваются такие темы, как зависимости, не компилируемые в "
"Python (\"нативные зависимости\"), важность ABI (Application Binary "
"Interface) нативного кода, зависимости от SIMD-кода и кросс-компиляция."

#: ../source/guides/packaging-namespace-packages.rst:5
msgid "Packaging namespace packages"
msgstr "Упаковка пакетов пространства имён"

#: ../source/guides/packaging-namespace-packages.rst:7
msgid ""
"Namespace packages allow you to split the sub-packages and modules within a "
"single :term:`package <Import Package>` across multiple, separate :term:"
"`distribution packages <Distribution Package>` (referred to as "
"**distributions** in this document to avoid ambiguity). For example, if you "
"have the following package structure:"
msgstr ""
"Пакеты пространства имен позволяют разделить подпакеты и модули одного :term:"
"`пакета <Импортный пакет>` на несколько отдельных :term:`дистрибутивных "
"пакетов <Дистрибутивный пакет>` (во избежание двусмысленности в этом "
"документе они называются **дистрибутивами**). Например, если у вас есть "
"следующая структура пакета:"

#: ../source/guides/packaging-namespace-packages.rst:26
msgid "And you use this package in your code like so::"
msgstr "И вы используете этот пакет в своем коде следующим образом::"

#: ../source/guides/packaging-namespace-packages.rst:31
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr "Затем вы можете разбить эти подпакеты на два отдельных дистрибутива:"

#: ../source/guides/packaging-namespace-packages.rst:50
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""
"Теперь каждый подпакет может быть установлен, использован и версионирован "
"отдельно."

#: ../source/guides/packaging-namespace-packages.rst:52
msgid ""
"Namespace packages can be useful for a large collection of loosely-related "
"packages (such as a large corpus of client libraries for multiple products "
"from a single company). However, namespace packages come with several "
"caveats and are not appropriate in all cases. A simple alternative is to use "
"a prefix on all of your distributions such as ``import "
"mynamespace_subpackage_a`` (you could even use ``import "
"mynamespace_subpackage_a as subpackage_a`` to keep the import object short)."
msgstr ""
"Пакеты пространства имен могут быть полезны для большой коллекции слабо "
"связанных между собой пакетов (например, большой корпус клиентских библиотек "
"для нескольких продуктов одной компании). Однако пакеты пространства имен "
"имеют несколько оговорок и подходят не во всех случаях. Простая альтернатива "
"- использовать во всех дистрибутивах префикс, например ``import "
"mynamespace_subpackage_a`` (можно даже использовать ``import "
"mynamespace_subpackage_a as subpackage_a``, чтобы сохранить краткость "
"объекта импорта)."

#: ../source/guides/packaging-namespace-packages.rst:62
msgid "Creating a namespace package"
msgstr "Создание пакета пространства имён"

#: ../source/guides/packaging-namespace-packages.rst:64
msgid ""
"There are currently two different approaches to creating namespace packages, "
"from which the latter is discouraged:"
msgstr ""
"В настоящее время существует два различных подхода к созданию пакетов "
"пространства имен, из которых последний не рекомендуется:"

#: ../source/guides/packaging-namespace-packages.rst:67
msgid ""
"Use `native namespace packages`_. This type of namespace package is defined "
"in :pep:`420` and is available in Python 3.3 and later. This is recommended "
"if packages in your namespace only ever need to support Python 3 and "
"installation via ``pip``."
msgstr ""
"Используйте `нативные пакеты пространства имен`_. Этот тип пакетов "
"пространства имен определен в :pep:`420` и доступен в Python 3.3 и более "
"поздних версиях. Это рекомендуется, если пакеты в вашем пространстве имен "
"должны поддерживать только Python 3 и устанавливаться через ``pip``."

#: ../source/guides/packaging-namespace-packages.rst:71
msgid ""
"Use `legacy namespace packages`_. This comprises `pkgutil-style namespace "
"packages`_ and `pkg_resources-style namespace packages`_."
msgstr ""
"Используйте пакеты `legacy namespace`_. Это включает в себя пакеты "
"пространства имен в стиле `pkgutil`_ и пакеты пространства имен в стиле "
"`pkg_resources`_."

#: ../source/guides/packaging-namespace-packages.rst:75
msgid "Native namespace packages"
msgstr "Родные пакеты пространства имён"

#: ../source/guides/packaging-namespace-packages.rst:77
msgid ""
"Python 3.3 added **implicit** namespace packages from :pep:`420`. All that "
"is required to create a native namespace package is that you just omit :file:"
"`__init__.py` from the namespace package directory. An example file "
"structure (following :ref:`src-layout <setuptools:src-layout>`):"
msgstr ""
"В Python 3.3 добавлены **имплицитные** пакеты пространства имен из :pep:"
"`420`. Все, что требуется для создания нативного пакета пространства имен, "
"это просто опустить :file:`__init__.py` из каталога пакета пространства "
"имен. Пример файловой структуры (в соответствии с :ref:`src-layout "
"<setuptools:src-layout>`):"

#: ../source/guides/packaging-namespace-packages.rst:94
msgid ""
"It is extremely important that every distribution that uses the namespace "
"package omits the :file:`__init__.py` or uses a pkgutil-style :file:"
"`__init__.py`. If any distribution does not, it will cause the namespace "
"logic to fail and the other sub-packages will not be importable."
msgstr ""
"Очень важно, чтобы каждый дистрибутив, использующий пакет namespace, "
"опускал :file:`__init__.py` или использовал :file:`__init__.py` в стиле "
"pkgutil. Если какой-либо дистрибутив этого не сделает, это приведет к сбою "
"логики пространства имен, и другие подпакеты не будут импортированы."

#: ../source/guides/packaging-namespace-packages.rst:99
msgid ""
"The ``src-layout`` directory structure allows automatic discovery of "
"packages by most :term:`build backends <Build Backend>`. See :ref:`src-"
"layout-vs-flat-layout` for more information. If however you want to manage "
"exclusions or inclusions of packages yourself, this is possible to be "
"configured in the top-level :file:`pyproject.toml`:"
msgstr ""
"Структура каталогов ``rc-layout`` позволяет автоматически находить пакеты "
"большинством :term:`build backends <Build Backend>`. Более подробную "
"информацию смотрите в :ref:`src-layout-vs-flat-layout. Если же вы хотите "
"самостоятельно управлять исключениями или включениями пакетов, это можно "
"настроить в верхнем уровне :file:`pyproject.toml`:"

#: ../source/guides/packaging-namespace-packages.rst:117
msgid "The same can be accomplished with a :file:`setup.cfg`:"
msgstr "То же самое можно сделать с помощью :file:`setup.cfg`:"

#: ../source/guides/packaging-namespace-packages.rst:129
msgid "Or :file:`setup.py`:"
msgstr "Или :файл:`setup.py`:"

#: ../source/guides/packaging-namespace-packages.rst:142
msgid ""
":ref:`setuptools` will search the directory structure for implicit namespace "
"packages by default."
msgstr ""
":ref:`setuptools` по умолчанию будет искать в структуре каталогов пакеты "
"неявного пространства имен."

#: ../source/guides/packaging-namespace-packages.rst:145
msgid ""
"A complete working example of two native namespace packages can be found in "
"the `native namespace package example project`_."
msgstr ""
"Полный рабочий пример двух пакетов нативного пространства имен можно найти в "
"проекте `Пример пакета нативного пространства имен`_."

#: ../source/guides/packaging-namespace-packages.rst:151
msgid ""
"Because native and pkgutil-style namespace packages are largely compatible, "
"you can use native namespace packages in the distributions that only support "
"Python 3 and pkgutil-style namespace packages in the distributions that need "
"to support Python 2 and 3."
msgstr ""
"Поскольку пакеты пространства имен native и pkgutil-style в значительной "
"степени совместимы, вы можете использовать пакеты пространства имен native в "
"дистрибутивах, поддерживающих только Python 3, и пакеты пространства имен "
"pkgutil-style в дистрибутивах, которые должны поддерживать Python 2 и 3."

#: ../source/guides/packaging-namespace-packages.rst:158
msgid "Legacy namespace packages"
msgstr "Унаследованные пакеты пространства имен"

#: ../source/guides/packaging-namespace-packages.rst:160
msgid ""
"These two methods, that were used to create namespace packages prior to :pep:"
"`420`, are now considered to be obsolete and should not be used unless you "
"need compatibility with packages already using this method. Also, :doc:"
"`pkg_resources <setuptools:pkg_resources>` has been deprecated."
msgstr ""
"Эти два метода, которые использовались для создания пакетов пространства "
"имен до появления :pep:`420`, теперь считаются устаревшими и не должны "
"использоваться, если вам не нужна совместимость с пакетами, уже "
"использующими этот метод. Кроме того, :doc:`pkg_resources <setuptools:"
"pkg_resources>` был устаревшим."

#: ../source/guides/packaging-namespace-packages.rst:165
msgid ""
"To migrate an existing package, all packages sharing the namespace must be "
"migrated simultaneously."
msgstr ""
"Чтобы перенести существующий пакет, необходимо одновременно перенести все "
"пакеты, разделяющие это пространство имен."

#: ../source/guides/packaging-namespace-packages.rst:167
msgid ""
"While native namespace packages and pkgutil-style namespace packages are "
"largely compatible, pkg_resources-style namespace packages are not "
"compatible with the other methods. It's inadvisable to use different methods "
"in different distributions that provide packages to the same namespace."
msgstr ""
"В то время как пакеты родного пространства имен и пакеты пространства имен в "
"стиле pkgutil в основном совместимы, пакеты пространства имен в стиле "
"pkg_resources не совместимы с другими методами. Нежелательно использовать "
"разные методы в разных дистрибутивах, предоставляющих пакеты для одного и "
"того же пространства имен."

#: ../source/guides/packaging-namespace-packages.rst:174
msgid "pkgutil-style namespace packages"
msgstr "Пакеты пространства имён в стиле pkgutil"

#: ../source/guides/packaging-namespace-packages.rst:176
msgid ""
"Python 2.3 introduced the :doc:`pkgutil <python:library/pkgutil>` module and "
"the :py:func:`python:pkgutil.extend_path` function. This can be used to "
"declare namespace packages that need to be compatible with both Python 2.3+ "
"and Python 3. This is the recommended approach for the highest level of "
"compatibility."
msgstr ""
"В Python 2.3 появился модуль :doc:`pkgutil <python:library/pkgutil>` и "
"функция :py:func:`python:pkgutil.extend_path`. Это можно использовать для "
"объявления пакетов пространства имен, которые должны быть совместимы как с "
"Python 2.3+, так и с Python 3. Это рекомендуемый подход для достижения "
"максимального уровня совместимости."

#: ../source/guides/packaging-namespace-packages.rst:181
msgid ""
"To create a pkgutil-style namespace package, you need to provide an :file:"
"`__init__.py` file for the namespace package:"
msgstr ""
"Чтобы создать пакет пространства имен в стиле pkgutil, вам нужно "
"предоставить файл :file:`__init__.py` для пакета пространства имен:"

#: ../source/guides/packaging-namespace-packages.rst:195
#: ../source/guides/packaging-namespace-packages.rst:242
msgid ""
"The :file:`__init__.py` file for the namespace package needs to contain the "
"following:"
msgstr ""
"Файл :file:`__init__.py` для пакета namespace должен содержать следующее:"

#: ../source/guides/packaging-namespace-packages.rst:202
#: ../source/guides/packaging-namespace-packages.rst:249
msgid ""
"**Every** distribution that uses the namespace package must include such an :"
"file:`__init__.py`. If any distribution does not, it will cause the "
"namespace logic to fail and the other sub-packages will not be importable.  "
"Any additional code in :file:`__init__.py` will be inaccessible."
msgstr ""
"**Каждый** дистрибутив, использующий пакет namespace, должен включать такой :"
"файл:`__init__.py`. Если дистрибутив не включит его, это приведет к сбою "
"логики пространства имен, и другие подпакеты будут недоступны для импорта.  "
"Любой дополнительный код в :file:`__init__.py` будет недоступен."

#: ../source/guides/packaging-namespace-packages.rst:207
msgid ""
"A complete working example of two pkgutil-style namespace packages can be "
"found in the `pkgutil namespace example project`_."
msgstr ""
"Полный рабочий пример двух пакетов пространства имен в стиле pkgutil можно "
"найти в проекте `pkgutil namespace example`_."

#: ../source/guides/packaging-namespace-packages.rst:217
msgid "pkg_resources-style namespace packages"
msgstr "Пакеты пространства имён в стиле pkg_resources"

#: ../source/guides/packaging-namespace-packages.rst:219
msgid ""
":doc:`Setuptools <setuptools:index>` provides the `pkg_resources."
"declare_namespace`_ function and the ``namespace_packages`` argument to :"
"func:`~setuptools.setup`. Together these can be used to declare namespace "
"packages. While this approach is no longer recommended, it is widely present "
"in most existing namespace packages. If you are creating a new distribution "
"within an existing namespace package that uses this method then it's "
"recommended to continue using this as the different methods are not cross-"
"compatible and it's not advisable to try to migrate an existing package."
msgstr ""
":doc:`Setuptools <setuptools:index>` предоставляет функцию `pkg_resources."
"declare_namespace`_ и аргумент ``namespace_packages``:func:`~setuptools."
"setup'. Вместе они могут быть использованы для объявления пакетов "
"пространства имен. Хотя этот подход больше не рекомендуется, он широко "
"присутствует в большинстве существующих пакетов пространства имен. Если вы "
"создаете новое распределение в существующем пакете пространства имен, "
"который использует этот метод, рекомендуется продолжать использовать это, "
"поскольку различные методы не являются взаимосовместимыми, и не "
"рекомендуется пытаться мигрировать существующий пакет."

#: ../source/guides/packaging-namespace-packages.rst:228
msgid ""
"To create a pkg_resources-style namespace package, you need to provide an :"
"file:`__init__.py` file for the namespace package:"
msgstr ""
"Чтобы создать пакет пространства имен в стиле pkg_resources, вам нужно "
"предоставить файл :file:`__init__.py` для пакета пространства имен:"

#: ../source/guides/packaging-namespace-packages.rst:254
msgid ""
"Some older recommendations advise the following in the namespace package :"
"file:`__init__.py`:"
msgstr ""
"В некоторых старых рекомендациях в пакете пространства имен :file:`__init__."
"py` рекомендуется следующее:"

#: ../source/guides/packaging-namespace-packages.rst:264
msgid ""
"The idea behind this was that in the rare case that setuptools isn't "
"available packages would fall-back to the pkgutil-style packages. This isn't "
"advisable because pkgutil and pkg_resources-style namespace packages are not "
"cross-compatible. If the presence of setuptools is a concern then the "
"package should just explicitly depend on setuptools via ``install_requires``."
msgstr ""
"Идея заключалась в том, что в редких случаях, когда setuptools недоступен, "
"пакеты будут возвращаться к пакетам в стиле pkgutil. Это нежелательно, "
"поскольку пакеты пространства имен в стиле pkgutil и pkg_resources не "
"являются кросс-совместимыми. Если наличие setuptools является проблемой, то "
"пакет должен просто явно зависеть от setuptools через ``install_requires``."

#: ../source/guides/packaging-namespace-packages.rst:271
msgid ""
"Finally, every distribution must provide the ``namespace_packages`` argument "
"to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""
"Наконец, каждый дистрибутив должен предоставить аргумент "
"``namespace_packages`` в :func:`~setuptools.setup` в :file:`setup.py`. "
"Например:"

#: ../source/guides/packaging-namespace-packages.rst:285
msgid ""
"A complete working example of two pkg_resources-style namespace packages can "
"be found in the `pkg_resources namespace example project`_."
msgstr ""
"Полный рабочий пример двух пакетов пространства имен в стиле pkg_resources "
"можно найти в проекте `pkg_resources namespace example`_."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
msgid ""
"Publishing package distribution releases using GitHub Actions CI/CD workflows"
msgstr ""
"Публикация релизов дистрибутивов пакетов с помощью рабочих процессов GitHub "
"Actions CI/CD"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:7
msgid ""
"`GitHub Actions CI/CD`_ allows you to run a series of commands whenever an "
"event occurs on the GitHub platform. One popular choice is having a workflow "
"that's triggered by a ``push`` event. This guide shows you how to publish a "
"Python distribution whenever a tagged commit is pushed. It will use the "
"`pypa/gh-action-pypi-publish GitHub Action`_ for publishing. It also uses "
"GitHub's `upload-artifact`_ and `download-artifact`_ actions for temporarily "
"storing and downloading the source packages."
msgstr ""
"`GitHub Actions CI/CD`_ позволяет запускать серию команд каждый раз, когда "
"на платформе GitHub происходит какое-либо событие. Одним из популярных "
"вариантов является рабочий процесс, который запускается по событию ``push``. "
"В этом руководстве показано, как публиковать дистрибутив Python каждый раз, "
"когда выкладывается коммит с меткой. Для публикации будет использован экшен "
"GitHub `pypa/gh-action-pypi-publish`_. Также используются действия GitHub "
"`upload-artifact`_ и `download-artifact`_ для временного хранения и загрузки "
"исходных пакетов."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:19
msgid ""
"This guide *assumes* that you already have a project that you know how to "
"build distributions for and *it lives on GitHub*.  This guide also avoids "
"details of building platform specific projects. If you have binary "
"components, check out :ref:`cibuildwheel`'s GitHub Action examples."
msgstr ""
"Это руководство *предполагает*, что у вас уже есть проект, для которого вы "
"знаете, как собирать дистрибутивы, и *он живет на GitHub*.  Это руководство "
"также избегает подробностей сборки проектов для конкретных платформ. Если у "
"вас есть бинарные компоненты, посмотрите примеры GitHub Action от :ref:"
"`cibuildwheel`."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:25
#, fuzzy
#| msgid "Configuring trusted publishing"
msgid "Configuring Trusted Publishing"
msgstr "Настройка доверенной публикации"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:27
#, fuzzy
#| msgid ""
#| "This guide relies on PyPI's `trusted publishing`_ implementation to "
#| "connect to `GitHub Actions CI/CD`_. This is recommended for security "
#| "reasons, since the generated tokens are created for each of your projects "
#| "individually and expire automatically. Otherwise, you'll need to generate "
#| "an `API token`_ for both PyPI and TestPyPI. In case of publishing to "
#| "third-party indexes like :doc:`devpi <devpi:index>`, you may need to "
#| "provide a username/password combination."
msgid ""
"This guide relies on PyPI's `Trusted Publishing`_ implementation to connect "
"to `GitHub Actions CI/CD`_. This is recommended for security reasons, since "
"the generated tokens are created for each of your projects individually and "
"expire automatically. Otherwise, you'll need to generate an `API token`_ for "
"both PyPI and TestPyPI. In case of publishing to third-party indexes like :"
"doc:`devpi <devpi:index>`, you may need to provide a username/password "
"combination."
msgstr ""
"В этом руководстве используется реализация PyPI `trusted publishing`_ для "
"подключения к `GitHub Actions CI/CD`_. Это рекомендуется из соображений "
"безопасности, поскольку генерируемые токены создаются для каждого вашего "
"проекта отдельно и автоматически истекают. В противном случае вам придется "
"сгенерировать `API-токен`_ как для PyPI, так и для TestPyPI. В случае "
"публикации в сторонние индексы, такие как :doc:`devpi <devpi:index>`, вам "
"может потребоваться указать комбинацию имя пользователя/пароль."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:35
#, fuzzy
#| msgid ""
#| "Since this guide will demonstrate uploading to both PyPI and TestPyPI, "
#| "we'll need two trusted publishers configured. The following steps will "
#| "lead you through creating the \"pending\" publishers for your new :term:"
#| "`PyPI project <Project>`. However it is also possible to add `trusted "
#| "publishing`_ to any pre-existing project, if you are its owner."
msgid ""
"Since this guide will demonstrate uploading to both PyPI and TestPyPI, we'll "
"need two trusted publishers configured. The following steps will lead you "
"through creating the \"pending\" publishers for your new :term:`PyPI project "
"<Project>`. However it is also possible to add `Trusted Publishing`_ to any "
"pre-existing project, if you are its owner."
msgstr ""
"Поскольку в этом руководстве мы продемонстрируем загрузку на PyPI и "
"TestPyPI, нам понадобятся два доверенных издателя. Следующие шаги приведут "
"вас к созданию \"ожидающих\" издателей для вашего нового :term:`PyPI проекта "
"<Project>`. Однако можно также добавить `доверенную публикацию`_ в любой уже "
"существующий проект, если вы являетесь его владельцем."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:44
msgid ""
"If you followed earlier versions of this guide, you have created the secrets "
"``PYPI_API_TOKEN`` and ``TEST_PYPI_API_TOKEN`` for direct PyPI and TestPyPI "
"access. These are obsolete now and you should remove them from your GitHub "
"repository and revoke them in your PyPI and TestPyPI account settings in "
"case you are replacing your old setup with the new one."
msgstr ""
"Если вы следовали предыдущим версиям этого руководства, вы создали секреты "
"``PYPI_API_TOKEN`` и ``TEST_PYPI_API_TOKEN`` для прямого доступа к PyPI и "
"TestPyPI. Теперь они устарели, и вам следует удалить их из вашего "
"репозитория GitHub и отозвать их в настройках ваших аккаунтов PyPI и "
"TestPyPI, если вы заменяете старую настройку на новую."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:51
msgid "Let's begin! 🚀"
msgstr "Давайте начнем! 🚀"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:53
msgid "Go to https://pypi.org/manage/account/publishing/."
msgstr "Зайдите на сайт https://pypi.org/manage/account/publishing/."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:54
msgid ""
"Fill in the name you wish to publish your new :term:`PyPI project <Project>` "
"under (the ``name`` value in your ``setup.cfg`` or ``pyproject.toml``), the "
"GitHub repository owner's name (org or user), and repository name, and the "
"name of the release workflow file under the ``.github/`` folder, see :ref:"
"`workflow-definition`. Finally, add the name of the GitHub Environment "
"(``pypi``) we're going set up under your repository. Register the trusted "
"publisher."
msgstr ""
"Введите имя, под которым вы хотите опубликовать свой новый :term:`PyPI-"
"проект <Project>` (значение ``name`` в вашем ``setup.cfg`` или ``pyproject."
"toml``), имя владельца репозитория GitHub (org или user), имя репозитория, а "
"также имя файла рабочего процесса релиза в папке ``.github/``, см. :ref:"
"`workflow-definition``. Наконец, добавьте имя окружения GitHub (``pypi``), "
"которое мы собираемся установить под вашим репозиторием. Зарегистрируйте "
"доверенного издателя."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:63
msgid ""
"Now, go to https://test.pypi.org/manage/account/publishing/ and repeat the "
"second step, but this time, enter ``testpypi`` as the name of the GitHub "
"Environment."
msgstr ""
"Теперь перейдите на https://test.pypi.org/manage/account/publishing/ и "
"повторите второй шаг, но на этот раз введите ``testpypi`` в качестве имени "
"среды GitHub."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:66
msgid ""
"Your \"pending\" publishers are now ready for their first use and will "
"create your projects automatically once you use them for the first time."
msgstr ""
"Ваши \"ожидающие\" издатели теперь готовы к первому использованию и будут "
"создавать ваши проекты автоматически, как только вы впервые их используете."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
msgid ""
"If you don't have a TestPyPI account, you'll need to create it. It's not the "
"same as a regular PyPI account."
msgstr ""
"Если у вас нет учетной записи TestPyPI, вам нужно ее создать. Это не то же "
"самое, что обычная учетная запись PyPI."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:78
#, fuzzy
#| msgid ""
#| "For security reasons, you must require `manual approval <https://docs."
#| "github.com/en/actions/deployment/targeting-different-environments/using-"
#| "environments-for-deployment#deployment-protection-rules>`_ on each run "
#| "for the ``pypi`` environment."
msgid ""
"For security reasons, you must require `manual approval <https://docs.github."
"com/en/actions/how-tos/managing-workflow-runs-and-deployments/managing-"
"deployments/managing-environments-for-deployment#creating-an-environment>`_ "
"on each run for the ``pypi`` environment."
msgstr ""
"По соображениям безопасности вы должны требовать `ручного одобрения <https://"
"docs.github.com/en/actions/deployment/targeting-different-environments/using-"
"environments-for-deployment#deployment-protection-rules>`_ при каждом "
"запуске для среды ``pypi``."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:85
msgid "Creating a workflow definition"
msgstr "Создание определения рабочего процесса"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:87
msgid ""
"GitHub CI/CD workflows are declared in YAML files stored in the ``.github/"
"workflows/`` directory of your repository."
msgstr ""
"Рабочие процессы GitHub CI/CD объявляются в файлах YAML, хранящихся в "
"директории ``.github/workflows/`` вашего репозитория."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:90
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr "Давайте создадим файл ``.github/workflows/publish-to-test-pypi.yml``."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:93
msgid ""
"Start it with a meaningful name and define the event that should make GitHub "
"run this workflow:"
msgstr ""
"Начните его с осмысленного имени и определите событие, которое должно "
"заставить GitHub запустить этот рабочий процесс:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:101
msgid "Checking out the project and building distributions"
msgstr "Проверка проекта и сборка дистрибутивов"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:103
msgid ""
"We will have to define two jobs to publish to PyPI and TestPyPI "
"respectively, and an additional job to build the distribution packages."
msgstr ""
"Нам нужно будет определить два задания для публикации в PyPI и TestPyPI "
"соответственно, а также дополнительное задание для сборки дистрибутива."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:107
msgid ""
"First, we'll define the job for building the dist packages of your project "
"and storing them for later use:"
msgstr ""
"Сначала мы определим задание для сборки дист-пакетов вашего проекта и "
"хранения их для последующего использования:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:115
msgid ""
"This will download your repository into the CI runner and then install and "
"activate the newest available Python 3 release."
msgstr ""
"Это позволит загрузить ваш репозиторий в CI runner, а затем установить и "
"активировать самый новый доступный релиз Python 3."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:118
msgid ""
"And now we can build the dists from source and store them. In this example, "
"we'll use the ``build`` package. So add this to the steps list:"
msgstr ""
"Теперь мы можем собрать дисты из исходного кода и сохранить их. В этом "
"примере мы будем использовать пакет ``build``. Так что добавьте его в список "
"шагов:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:128
msgid "Defining a workflow job environment"
msgstr "Определение рабочей среды рабочего процесса"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:130
#, fuzzy
#| msgid ""
#| "Now, let's add initial setup for our job that will publish to PyPI. It's "
#| "a process that will execute commands that we'll define later. In this "
#| "guide, we'll use the latest stable Ubuntu LTS version provided by GitHub "
#| "Actions. This also defines a GitHub Environment for the job to run in its "
#| "context and a URL to be displayed in GitHub's UI nicely. Additionally, it "
#| "allows acquiring an OpenID Connect token that the ``pypi-publish`` "
#| "actions needs to implement secretless trusted publishing to PyPI."
msgid ""
"Now, let's add initial setup for our job that will publish to PyPI. It's a "
"process that will execute commands that we'll define later. In this guide, "
"we'll use the latest stable Ubuntu LTS version provided by GitHub Actions. "
"This also defines a GitHub Environment for the job to run in its context and "
"a URL to be displayed in GitHub's UI nicely. Additionally, it allows "
"acquiring an OpenID Connect token that the ``pypi-publish`` actions needs to "
"implement secretless Trusted Publishing to PyPI."
msgstr ""
"Теперь давайте добавим начальную настройку для нашего задания, которое будет "
"публиковаться в PyPI. Это процесс, который будет выполнять команды, которые "
"мы определим позже. В этом руководстве мы будем использовать последнюю "
"стабильную версию Ubuntu LTS, предоставленную GitHub Actions. Здесь также "
"определяется окружение GitHub для запуска задания в его контексте и URL-"
"адрес, который будет красиво отображаться в пользовательском интерфейсе "
"GitHub. Кроме того, она позволяет получить токен OpenID Connect, который "
"необходим действию ``pypi-publish`` для реализации секретной доверенной "
"публикации в PyPI."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:144
msgid ""
"This will also ensure that the PyPI publishing workflow is only triggered if "
"the current commit is tagged."
msgstr ""
"Это также гарантирует, что рабочий процесс публикации PyPI будет запущен "
"только в том случае, если текущий коммит помечен."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:148
msgid "Publishing the distribution to PyPI"
msgstr "Публикация дистрибутива в PyPI"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:150
msgid "Finally, add the following steps at the end:"
msgstr "Наконец, добавьте следующие шаги в конце:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:157
msgid ""
"This step uses the `pypa/gh-action-pypi-publish`_ GitHub Action: after the "
"stored distribution package has been downloaded by the `download-artifact`_ "
"action, it uploads the contents of the ``dist/`` folder into PyPI "
"unconditionally."
msgstr ""
"Этот шаг использует действие `pypa/gh-action-pypi-publish`_ GitHub: после "
"загрузки сохраненного дистрибутива действием `download-artifact`_, оно "
"безусловно загружает содержимое папки ``dist/`` в PyPI."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:164
msgid ""
"Starting with version `v1.11.0 <https://github.com/pypa/gh-action-pypi-"
"publish/releases/tag/v1.11.0>`_, `pypa/gh-action-pypi-publish`_ generates "
"and uploads :pep:`740`-compatible attestations for each distribution by "
"default. No additional manual signing steps are required."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:172
msgid "Separate workflow for publishing to TestPyPI"
msgstr "Отдельный рабочий процесс для публикации в TestPyPI"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:174
msgid ""
"Now, repeat these steps and create another job for publishing to the "
"TestPyPI package index under the ``jobs`` section:"
msgstr ""
"Теперь повторите эти шаги и создайте еще одно задание для публикации в "
"индекс пакета TestPyPI в разделе ``jobs``:"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:184
msgid ""
"Requiring manual approvals in the ``testpypi`` GitHub Environment is "
"typically unnecessary as it's designed to run on each commit to the main "
"branch and is often used to indicate a healthy release publishing pipeline."
msgstr ""
"Требование ручного одобрения в среде ``testpypi`` GitHub обычно не "
"требуется, поскольку она предназначена для выполнения каждого коммита в "
"основной ветке и часто используется для обозначения здорового конвейера "
"публикации pipрелизов."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:188
msgid "The whole CI/CD workflow"
msgstr "Весь рабочий процесс CI/CD"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:190
msgid ""
"This paragraph showcases the whole workflow after following the above guide."
msgstr ""
"В этом пункте показан весь рабочий процесс после выполнения вышеописанного "
"руководства."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:198
msgid "That's all, folks!"
msgstr "Вот и все, друзья!"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:200
msgid ""
"Now, whenever you push a tagged commit to your Git repository remote on "
"GitHub, this workflow will publish it to PyPI. And it'll publish any push to "
"TestPyPI which is useful for providing test builds to your alpha users as "
"well as making sure that your release pipeline remains healthy!"
msgstr ""
"Теперь, когда бы вы ни отправили помеченный коммит в свой Git-репозиторий на "
"GitHub, этот рабочий процесс будет публиковать его в PyPI. И он будет "
"публиковать любой push в TestPyPI, что полезно для предоставления тестовых "
"сборок вашим альфа-пользователям, а также для того, чтобы убедиться, что ваш "
"конвейер релизовpip остаётся здоровым!"

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:208
msgid ""
"If your repository has frequent commit activity and every push is uploaded "
"to TestPyPI as described, the project might exceed the `PyPI project size "
"limit <https://pypi.org/help/#project-size-limit>`_. The limit could be "
"increased, but a better solution may constitute to use a PyPI-compatible "
"server like :ref:`pypiserver` in the CI for testing purposes."
msgstr ""
"Если в вашем репозитории часто происходят коммиты и каждый push загружается "
"в TestPyPI, как описано выше, проект может превысить ограничение на размер "
"проекта <https://pypi.org/help/#project-size-limit>`_. Лимит может быть "
"увеличен, но лучшим решением может быть использование PyPI-совместимого "
"сервера, например :ref:`pypiserver`, в CI для тестирования."

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:216
msgid ""
"It is recommended to keep the integrated GitHub Actions at their latest "
"versions, updating them frequently."
msgstr ""
"Рекомендуется поддерживать интегрированные GitHub Actions в последних "
"версиях и часто их обновлять."

#: ../source/guides/section-build-and-publish.rst:3
msgid "Building and Publishing"
msgstr "Строительство и публикации"

#: ../source/guides/section-hosting.rst:3
msgid "Hosting"
msgstr "Хостинг"

#: ../source/guides/section-install.rst:3
#: ../source/specifications/pylock-toml.rst:729
msgid "Installation"
msgstr "Установка"

#: ../source/guides/single-sourcing-package-version.rst:-1
msgid "0; url=../../discussions/single-source-version/"
msgstr "0; url=../../discussions/single-source-version/"

#: ../source/guides/single-sourcing-package-version.rst:6
msgid "Redirecting stale single-source package version link..."
msgstr ""
"Перенаправление устаревшей ссылки на версию пакета из одного источника..."

#: ../source/guides/single-sourcing-package-version.rst:8
msgid ""
"If the page doesn't automatically refresh, see :ref:`single-source-version`."
msgstr ""
"Если страница не обновляется автоматически, смотрите :ref:`single-source-"
"version`."

#: ../source/guides/supporting-multiple-python-versions.rst:7
msgid "Supporting multiple Python versions"
msgstr "Поддержка нескольких версий Python'а"

#: ../source/guides/supporting-multiple-python-versions.rst:10
msgid "2014-12-24"
msgstr "2014-12-24"

#: ../source/guides/supporting-multiple-python-versions.rst:36
msgid ""
"In addition to the work required to create a Python package, it is often "
"necessary that the package must be made available on different versions of "
"Python.  Different Python versions may contain different (or renamed) "
"standard library packages, and the changes between Python versions 2.x and 3."
"x include changes in the language syntax."
msgstr ""
"Помимо работы, необходимой для создания пакета Python, часто возникает "
"необходимость сделать его доступным для разных версий Python.  Разные версии "
"Python могут содержать разные (или переименованные) пакеты стандартной "
"библиотеки, а изменения между версиями Python 2.x и 3.x включают изменения в "
"синтаксисе языка."

#: ../source/guides/supporting-multiple-python-versions.rst:42
msgid ""
"Performed manually, all the testing required to ensure that the package "
"works correctly on all the target Python versions (and OSs!) could be very "
"time-consuming. Fortunately, several tools are available for dealing with "
"this, and these will briefly be discussed here."
msgstr ""
"Если выполнять тестирование вручную, то все проверки, необходимые для "
"обеспечения корректной работы пакета на всех целевых версиях Python (и ОС!), "
"могут занять очень много времени. К счастью, существует несколько "
"инструментов для решения этой проблемы, о которых мы вкратце расскажем здесь."

#: ../source/guides/supporting-multiple-python-versions.rst:48
msgid "Automated testing and continuous integration"
msgstr "Автоматическое тестирование и непрерывная интеграция"

#: ../source/guides/supporting-multiple-python-versions.rst:50
msgid ""
"Several hosted services for automated testing are available. These services "
"will typically monitor your source code repository (e.g. at `GitHub <https://"
"github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your "
"project's test suite every time a new commit is made."
msgstr ""
"Существует несколько хостинговых сервисов для автоматизированного "
"тестирования. Эти сервисы обычно следят за вашим репозиторием исходного кода "
"(например, на `GitHub <https://github.com>`_ или `Bitbucket <https://"
"bitbucket.org>`_) и запускают набор тестов вашего проекта каждый раз, когда "
"делается новый коммит."

#: ../source/guides/supporting-multiple-python-versions.rst:55
msgid ""
"These services also offer facilities to run your project's test suite on "
"*multiple versions of Python*, giving rapid feedback about whether the code "
"will work, without the developer having to perform such tests themselves."
msgstr ""
"Эти сервисы также предлагают возможности для запуска тестового набора вашего "
"проекта на *многих версиях Python*, что позволяет быстро получить информацию "
"о том, будет ли работать код, без необходимости разработчику самому "
"выполнять такие тесты."

#: ../source/guides/supporting-multiple-python-versions.rst:59
msgid ""
"Wikipedia has an extensive `comparison <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ of many continuous-"
"integration systems. There are two hosted services which when used in "
"conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""
"В Википедии есть обширное \"сравнение <https://en.wikipedia.org/wiki/"
"Comparison_of_continuous_integration_software>`_ многих систем непрерывной "
"интеграции\". Существует два хостинговых сервиса, которые при совместном "
"использовании обеспечивают автоматизированное тестирование в Linux, Mac и "
"Windows:"

#: ../source/guides/supporting-multiple-python-versions.rst:65
msgid ""
"`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS "
"environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit "
"while the macOS is 10.9.2 at the time of writing."
msgstr ""
"В системе Travis CI <https://travis-ci.org>`_ есть как Linux, так и macOS. "
"Среда Linux - это Ubuntu 12.04 LTS Server Edition 64 bit, а macOS на момент "
"написания статьи - 10.9.2."

#: ../source/guides/supporting-multiple-python-versions.rst:68
msgid ""
"`Appveyor <https://www.appveyor.com/>`_ provides a Windows environment "
"(Windows Server 2012)."
msgstr ""
"`Appveyor <https://www.appveyor.com/>`_ предоставляет среду Windows (Windows "
"Server 2012)."

#: ../source/guides/supporting-multiple-python-versions.rst:79
msgid ""
"Both `Travis CI`_ and Appveyor_ require a `YAML <https://yaml.org>`_-"
"formatted file as specification for the instructions for testing. If any "
"tests fail, the output log for that specific configuration can be inspected."
msgstr ""
"И `Travis CI`_, и Appveyor_ требуют файл формата `YAML <https://yaml.org>`_ "
"в качестве спецификации инструкций для тестирования. Если какие-либо тесты "
"провалены, можно просмотреть журнал вывода для данной конкретной "
"конфигурации."

#: ../source/guides/supporting-multiple-python-versions.rst:84
msgid ""
"For Python projects that are intended to be deployed on both Python 2 and 3 "
"with a single-source strategy, there are a number of options."
msgstr ""
"Для проектов на Python, которые предполагается развернуть как на Python 2, "
"так и на Python 3 с использованием стратегии единого источника, есть "
"несколько вариантов."

#: ../source/guides/supporting-multiple-python-versions.rst:88
msgid "Tools for single-source Python packages"
msgstr "Инструменты для создания пакетов Python с одним источником"

#: ../source/guides/supporting-multiple-python-versions.rst:90
msgid ""
"`six <https://pypi.org/project/six/>`_ is a tool developed by Benjamin "
"Peterson for wrapping over the differences between Python 2 and Python 3. "
"The six_ package has enjoyed widespread use and may be regarded as a "
"reliable way to write a single-source Python module that can be use in both "
"Python 2 and 3. The six_ module can be used from as early as Python 2.5. A "
"tool called `modernize <https://pypi.org/project/modernize>`_, developed by "
"Armin Ronacher, can be used to automatically apply the code modifications "
"provided by six_."
msgstr ""
"`six <https://pypi.org/project/six/>`_ - это инструмент, разработанный "
"Бенджамином Петерсоном для преодоления различий между Python 2 и Python 3. "
"Пакет six_ получил широкое распространение и может рассматриваться как "
"надежный способ написать модуль Python с одним исходным кодом, который можно "
"использовать как в Python 2, так и в Python 3. Модуль six_ можно "
"использовать уже в Python 2.5. Инструмент под названием `modernize <https://"
"pypi.org/project/modernize>`_, разработанный Армином Ронахером, может быть "
"использован для автоматического применения модификаций кода, предоставляемых "
"six_."

#: ../source/guides/supporting-multiple-python-versions.rst:99
msgid ""
"Similar to six_, `python-future <http://python-future.org/overview.html>`_ "
"is a package that provides a compatibility layer between Python 2 and Python "
"3 source code; however, unlike six_, this package aims to provide "
"interoperability between Python 2 and Python 3 with a language syntax that "
"matches one of the two Python versions: one may use"
msgstr ""
"Как и six_, `python-future <http://python-future.org/overview.html>`_ - это "
"пакет, обеспечивающий слой совместимости между исходным кодом Python 2 и "
"Python 3; однако, в отличие от six_, этот пакет направлен на обеспечение "
"совместимости между Python 2 и Python 3 с синтаксисом языка, соответствующим "
"одной из двух версий Python: можно использовать"

#: ../source/guides/supporting-multiple-python-versions.rst:106
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr "модуль Python 2 (по синтаксису) в проекте Python 3."

#: ../source/guides/supporting-multiple-python-versions.rst:107
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr "модуль Python 3 (по синтаксису) в проекте *Python 2*."

#: ../source/guides/supporting-multiple-python-versions.rst:109
msgid ""
"Because of the bi-directionality, python-future_ offers a pathway to "
"converting a Python 2 package to Python 3 syntax module-by-module. However, "
"in contrast to six_, python-future_ is supported only from Python 2.6. "
"Similar to modernize_ for six_, python-future_ comes with two scripts called "
"``futurize`` and ``pasteurize`` that can be applied to either a Python 2 "
"module or a Python 3 module respectively."
msgstr ""
"Благодаря двунаправленности, python-future_ предлагает путь к преобразованию "
"пакета Python 2 в синтаксис Python 3 модуль за модулем. Однако, в отличие от "
"six_, python-future_ поддерживается только начиная с Python 2.6. Подобно "
"modernize_ для six_, python-future_ поставляется с двумя скриптами "
"``futurize`` и ``pasteurize``, которые могут быть применены как к модулю "
"Python 2, так и к модулю Python 3 соответственно."

#: ../source/guides/supporting-multiple-python-versions.rst:116
msgid ""
"Use of six_ or python-future_ adds an additional runtime dependency to your "
"package: with python-future_, the ``futurize`` script can be called with the "
"``--stage1`` option to apply only the changes that Python 2.6+ already "
"provides for forward-compatibility to Python 3. Any remaining compatibility "
"problems would require manual changes."
msgstr ""
"Использование six_ или python-future_ добавляет дополнительную зависимость "
"от времени выполнения: при использовании python-future_ скрипт ``futurize`` "
"может быть вызван с опцией ``--stage1`` для применения только тех изменений, "
"которые Python 2.6+ уже обеспечивает для прямой совместимости с Python 3. "
"Любые оставшиеся проблемы совместимости потребуют внесения изменений вручную."

#: ../source/guides/supporting-multiple-python-versions.rst:123
msgid "What's in which Python?"
msgstr "Что находится в каком Python?"

#: ../source/guides/supporting-multiple-python-versions.rst:125
msgid ""
"Ned Batchelder provides a list of changes in each Python release for `Python "
"2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder."
"com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used "
"to check whether any changes between Python versions may affect your package."
msgstr ""
"Нед Батчелдер приводит список изменений в каждом выпуске Python для `Python "
"2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, "
"`Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/"
"whats_in_which_python_3.html>`__ и `Python 3.4-3.6 <https://nedbatchelder."
"com/blog/201803/whats_in_which_python_3436.html>`__. Эти списки можно "
"использовать для проверки того, могут ли какие-либо изменения между версиями "
"Python повлиять на ваш пакет."

#: ../source/guides/supporting-windows-using-appveyor.rst:5
msgid "Supporting Windows using Appveyor"
msgstr "Поддержка Windows с помощью Appveyor"

#: ../source/guides/supporting-windows-using-appveyor.rst:8
msgid "2015-12-03"
msgstr "2015-12-03"

#: ../source/guides/supporting-windows-using-appveyor.rst:10
msgid ""
"This section covers how to use the free `Appveyor`_ continuous integration "
"service to provide Windows support for your project. This includes testing "
"the code on Windows, and building Windows-targeted binaries for projects "
"that use C extensions."
msgstr ""
"В этом разделе рассказывается о том, как использовать бесплатную службу "
"непрерывной интеграции `Appveyor`_ для обеспечения поддержки Windows в вашем "
"проекте. Сюда входит тестирование кода под Windows и сборка двоичных файлов, "
"ориентированных на Windows, для проектов, использующих расширения C."

#: ../source/guides/supporting-windows-using-appveyor.rst:19
msgid ""
"Many projects are developed on Unix by default, and providing Windows "
"support can be a challenge, because setting up a suitable Windows test "
"environment is non-trivial, and may require buying software licenses."
msgstr ""
"Многие проекты по умолчанию разрабатываются на Unix, и обеспечение поддержки "
"Windows может быть сложной задачей, поскольку создание подходящей тестовой "
"среды Windows нетривиально и может потребовать покупки лицензий на "
"программное обеспечение."

#: ../source/guides/supporting-windows-using-appveyor.rst:23
msgid ""
"The Appveyor service is a continuous integration service, much like the "
"better-known `Travis`_ service that is commonly used for testing by projects "
"hosted on `GitHub`_. However, unlike Travis, the build workers on Appveyor "
"are Windows hosts and have the necessary compilers installed to build Python "
"extensions."
msgstr ""
"Сервис Appveyor - это сервис непрерывной интеграции, подобный более "
"известному сервису `Travis`_, который обычно используется для тестирования "
"проектов, размещенных на `GitHub`_. Однако, в отличие от Travis, рабочие "
"сборщики Appveyor являются хостами Windows и имеют необходимые компиляторы "
"для сборки расширений Python."

#: ../source/guides/supporting-windows-using-appveyor.rst:29
msgid ""
"Windows users typically do not have access to a C compiler, and therefore "
"are reliant on projects that use C extensions distributing binary wheels on "
"PyPI in order for the distribution to be installable via ``python -m pip "
"install <dist>``. By using Appveyor as a build service (even if not using it "
"for testing) it is possible for projects without a dedicated Windows "
"environment to provide Windows-targeted binaries."
msgstr ""
"Пользователи Windows, как правило, не имеют доступа к компилятору языка C, "
"поэтому проекты, использующие расширения C, должны распространять бинарные "
"колеса на PyPI, чтобы дистрибутив можно было установить с помощью ``python -"
"m pip install <dist>``. Использование Appveyor в качестве сервиса сборки "
"(даже если он не используется для тестирования) позволяет проектам, не "
"имеющим выделенной среды Windows, предоставлять двоичные файлы, "
"ориентированные на Windows."

#: ../source/guides/supporting-windows-using-appveyor.rst:37
msgid "Setting up"
msgstr "Настройка"

#: ../source/guides/supporting-windows-using-appveyor.rst:39
msgid ""
"In order to use Appveyor to build Windows wheels for your project, you must "
"have an account on the service. Instructions on setting up an account are "
"given in `the Appveyor documentation <https://www.appveyor.com/docs/>`__. "
"The free tier of account is perfectly adequate for open source projects."
msgstr ""
"Чтобы использовать Appveyor для сборки Windows-колес для вашего проекта, вы "
"должны иметь учетную запись на этом сервисе. Инструкции по настройке учетной "
"записи приведены в документации Appveyor <https://www.appveyor.com/docs/"
">`__. Бесплатный уровень учетной записи вполне подходит для проектов с "
"открытым исходным кодом."

#: ../source/guides/supporting-windows-using-appveyor.rst:44
msgid ""
"Appveyor provides integration with `GitHub`_ and `Bitbucket`_, so as long as "
"your project is hosted on one of those two services, setting up Appveyor "
"integration is straightforward."
msgstr ""
"Appveyor обеспечивает интеграцию с `GitHub`_ и `Bitbucket`_, поэтому, если "
"ваш проект размещен на одном из этих двух сервисов, настройка интеграции с "
"Appveyor не составит труда."

#: ../source/guides/supporting-windows-using-appveyor.rst:48
msgid ""
"Once you have set up your Appveyor account and added your project, Appveyor "
"will automatically build your project each time a commit occurs. This "
"behaviour will be familiar to users of Travis."
msgstr ""
"После того, как вы настроили свой аккаунт Appveyor и добавили проект, "
"Appveyor будет автоматически собирать ваш проект каждый раз, когда "
"происходит коммит. Такое поведение будет знакомо пользователям Travis."

#: ../source/guides/supporting-windows-using-appveyor.rst:53
msgid "Adding Appveyor support to your project"
msgstr "Добавление поддержки Appveyor в ваш проект"

#: ../source/guides/supporting-windows-using-appveyor.rst:55
msgid ""
"In order to define how Appveyor should build your project, you need to add "
"an :file:`appveyor.yml` file to your project. The full details of what can "
"be included in the file are covered in the Appveyor documentation. This "
"guide will provide the details necessary to set up wheel builds."
msgstr ""
"Для того чтобы определить, как Appveyor должен собирать ваш проект, вам "
"необходимо добавить в проект файл :file:`appveyor.yml`. Все подробности о "
"том, что может быть включено в этот файл, описаны в документации Appveyor. В "
"этом руководстве мы расскажем о том, как настроить сборку колес."

#: ../source/guides/supporting-windows-using-appveyor.rst:60
msgid ""
"Appveyor includes by default all of the compiler toolchains needed to build "
"extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of 3.3 and "
"3.4, the tools work out of the box. But for 64-bit versions of Python 3.3 "
"and 3.4, there is a small amount of additional configuration needed to let "
"distutils know where to find the 64-bit compilers. (From 3.5 onwards, the "
"version of Visual Studio used includes 64-bit compilers with no additional "
"setup)."
msgstr ""
"Appveyor по умолчанию включает в себя все цепочки инструментов компилятора, "
"необходимые для создания расширений для Python. Для Python 2.7, 3.5+ и 32-"
"битных версий 3.3 и 3.4 инструменты работают из коробки. Но для 64-битных "
"версий Python 3.3 и 3.4 требуется небольшая дополнительная настройка, чтобы "
"distutils знал, где найти 64-битные компиляторы. (Начиная с версии 3.5, "
"используемая версия Visual Studio включает 64-битные компиляторы без "
"дополнительных настроек)."

#: ../source/guides/supporting-windows-using-appveyor.rst:68
msgid "appveyor.yml"
msgstr ":file:`appveyor.yml`"

#: ../source/guides/supporting-windows-using-appveyor.rst:74
msgid ""
"This file can be downloaded from `here <https://raw.githubusercontent.com/"
"pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/"
"appveyor.yml>`__."
msgstr ""
"Этот файл можно скачать отсюда <https://raw.githubusercontent.com/pypa/"
"python-packaging-user-guide/master/source/guides/appveyor-sample/appveyor."
"yml>`__."

#: ../source/guides/supporting-windows-using-appveyor.rst:76
msgid ""
"The :file:`appveyor.yml` file must be located in the root directory of your "
"project. It is in ``YAML`` format, and consists of a number of sections."
msgstr ""
"Файл :file:`appveyor.yml` должен находиться в корневом каталоге вашего "
"проекта. Он имеет формат ``YAML`` и состоит из нескольких секций."

#: ../source/guides/supporting-windows-using-appveyor.rst:79
msgid ""
"The ``environment`` section is the key to defining the Python versions for "
"which your wheels will be created. Appveyor comes with Python 2.6, 2.7, 3.3, "
"3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The example file "
"builds for all of these environments except Python 2.6. Installing for "
"Python 2.6 is more complex, as it does not come with pip included. We don't "
"support 2.6 in this document (as Windows users still using Python 2 are "
"generally able to move to Python 2.7 without too much difficulty)."
msgstr ""
"Раздел ``окружение`` - это ключ к определению версий Python, для которых "
"будут создаваться ваши колеса. Appveyor поставляется с установленным Python "
"2.6, 2.7, 3.3, 3.4 и 3.5, как в 32-битных, так и в 64-битных сборках. Файл "
"примера собирается для всех этих сред, кроме Python 2.6. Установка для "
"Python 2.6 более сложна, так как в комплект поставки не входит pip. Мы не "
"поддерживаем 2.6 в этом документе (поскольку пользователи Windows, все еще "
"использующие Python 2, обычно могут перейти на Python 2.7 без особых "
"проблем)."

#: ../source/guides/supporting-windows-using-appveyor.rst:87
msgid ""
"The ``install`` section uses pip to install any additional software that the "
"project may require. The only requirement for building wheels is the "
"``wheel`` project, but projects may wish to customise this code in certain "
"circumstances (for example, to install additional build packages such as "
"``Cython``, or test tools such as ``tox``)."
msgstr ""
"В разделе ``install`` используется pip для установки любого дополнительного "
"программного обеспечения, которое может потребоваться проекту. Единственным "
"требованием для сборки колес является проект ``wheel``, но проекты могут "
"захотеть изменить этот код в определенных обстоятельствах (например, для "
"установки дополнительных пакетов сборки, таких как ``Cython``, или "
"инструментов тестирования, таких как ``tox``)."

#: ../source/guides/supporting-windows-using-appveyor.rst:93
msgid ""
"The ``build`` section simply switches off builds - there is no build step "
"needed for Python, unlike languages like ``C#``."
msgstr ""
"Секция ``build`` просто отключает сборку - в отличие от таких языков, как "
"``C#``, для Python не требуется никаких действий по сборке."

#: ../source/guides/supporting-windows-using-appveyor.rst:96
msgid ""
"The main sections that will need to be tailored to your project are "
"``test_script`` and ``after_test``."
msgstr ""
"Основные секции, которые необходимо адаптировать под ваш проект, - это "
"``тестовый_скрипт`` и ``после_теста``."

#: ../source/guides/supporting-windows-using-appveyor.rst:99
msgid ""
"The ``test_script`` section is where you will run your project's tests. The "
"supplied file runs your test suite using ``setup.py test``. If you are only "
"interested in building wheels, and not in running your tests on Windows, you "
"can replace this section with a dummy command such as ``echo Skipped "
"Tests``. You may wish to use another test tool, such as ``nose`` or :file:"
"`py.test`.  Or you may wish to use a test driver like ``tox`` - however if "
"you are using ``tox`` there are some additional configuration changes you "
"will need to consider, which are described below."
msgstr ""
"Раздел ``тест_скрипт`` - это место, где вы будете запускать тесты вашего "
"проекта. В прилагаемом файле набор тестов запускается с помощью команды "
"``setup.py test``. Если вас интересует только сборка колес, а не запуск "
"тестов под Windows, вы можете заменить этот раздел фиктивной командой, "
"например ``echo Skipped Tests``. Возможно, вы захотите использовать другой "
"инструмент тестирования, например ``nose`` или :file:`py.test``.  Или вы "
"можете использовать тестовый драйвер, например ``tox`` - однако если вы "
"используете ``tox``, вам придется внести некоторые дополнительные изменения "
"в конфигурацию, которые описаны ниже."

#: ../source/guides/supporting-windows-using-appveyor.rst:108
msgid ""
"The ``after_test`` runs once your tests have completed, and so is where the "
"wheels should be built. Assuming your project uses the recommended tools "
"(specifically, ``setuptools``) then the ``setup.py bdist_wheel`` command "
"will build your wheels."
msgstr ""
"Команда ``after_test`` запускается после завершения тестов, и именно в ней "
"должны быть собраны колеса. Если ваш проект использует рекомендуемые "
"инструменты (в частности, ``setuptools``), то команда ``setup.py "
"bdist_wheel'' соберет ваши колеса."

#: ../source/guides/supporting-windows-using-appveyor.rst:113
msgid ""
"Note that wheels will only be built if your tests succeed. If you expect "
"your tests to fail on Windows, you can skip them as described above."
msgstr ""
"Обратите внимание, что колеса будут собраны только в том случае, если ваши "
"тесты пройдут успешно. Если вы ожидаете, что ваши тесты не пройдут под "
"Windows, вы можете пропустить их, как описано выше."

#: ../source/guides/supporting-windows-using-appveyor.rst:118
msgid "Support script"
msgstr "Скрипт поддержки"

#: ../source/guides/supporting-windows-using-appveyor.rst:120
msgid ""
"The :file:`appveyor.yml` file relies on a single support script, which sets "
"up the environment to use the SDK compiler for 64-bit builds on Python 3.3 "
"and 3.4.  For projects which do not need a compiler, or which don't support "
"3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml` file is needed."
msgstr ""
"Файл :file:`appveyor.yml` опирается на единственный скрипт поддержки, "
"который настраивает среду для использования компилятора SDK для 64-битных "
"сборок на Python 3.3 и 3.4.  Для проектов, которым не нужен компилятор или "
"которые не поддерживают 3.3 или 3.4 на 64-битной Windows, необходим только "
"файл :file:`appveyor.yml`."

#: ../source/guides/supporting-windows-using-appveyor.rst:125
msgid ""
"`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows batch "
"script that runs a single command in an environment with the appropriate "
"compiler for the selected Python version. All you need to do is to set the "
"single environment variable ``DISTUTILS_USE_SDK`` to a value of ``1`` and "
"the script does the rest. It sets up the SDK needed for 64-bit builds of "
"Python 3.3 or 3.4, so don't set the environment variable for any other "
"builds."
msgstr ""
"``build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-"
"guide/master/source/guides/appveyor-sample/build.cmd>``__ - это пакетный "
"скрипт для Windows, который запускает единственную команду в среде с "
"компилятором, соответствующим выбранной версии Python. Все, что вам нужно "
"сделать, это установить единственную переменную окружения "
"``DISTUTILS_USE_SDK`` в ``1``, а все остальное сделает скрипт. Он "
"устанавливает SDK, необходимый для 64-битных сборок Python 3.3.3 или 3.4, "
"поэтому не устанавливайте переменную окружения для других сборок."

#: ../source/guides/supporting-windows-using-appveyor.rst:132
msgid ""
"You can simply download the batch file and include it in your project "
"unchanged."
msgstr ""
"Вы можете просто загрузить пакетный файл и включить его в свой проект без "
"изменений."

#: ../source/guides/supporting-windows-using-appveyor.rst:136
msgid "Access to the built wheels"
msgstr "Доступ к собранным колёсам"

#: ../source/guides/supporting-windows-using-appveyor.rst:138
msgid ""
"When your build completes, the built wheels will be available from the "
"Appveyor control panel for your project. They can be found by going to the "
"build status page for each build in turn. At the top of the build output "
"there is a series of links, one of which is \"Artifacts\". That page will "
"include a list of links to the wheels for that Python version / "
"architecture. You can download those wheels and upload them to PyPI as part "
"of your release process."
msgstr ""
"Когда сборка завершится, построенные колеса будут доступны в панели "
"управления Appveyor для вашего проекта. Их можно найти, перейдя на страницу "
"состояния сборки для каждой сборки по очереди. В верхней части результатов "
"сборки есть ряд ссылок, одна из которых - \"Артефакты\". На этой странице "
"будет список ссылок на колеса для данной версии/архитектуры Python. Вы "
"можете скачать эти колеса и загрузить их в PyPI как часть вашего процесса "
"выпуска."

#: ../source/guides/supporting-windows-using-appveyor.rst:149
msgid "Testing with tox"
msgstr "Тестирование с помощью tox"

#: ../source/guides/supporting-windows-using-appveyor.rst:151
msgid ""
"Many projects use the :doc:`Tox <tox:index>` tool to run their tests. It "
"ensures that tests are run in an isolated environment using the exact files "
"that will be distributed by the project."
msgstr ""
"Многие проекты используют инструмент :doc:`Tox <tox:index>` для запуска "
"своих тестов. Он обеспечивает запуск тестов в изолированном окружении с "
"использованием именно тех файлов, которые будут распространяться проектом."

#: ../source/guides/supporting-windows-using-appveyor.rst:155
msgid ""
"In order to use ``tox`` on Appveyor there are a couple of additional "
"considerations (in actual fact, these issues are not specific to Appveyor, "
"and may well affect other CI systems)."
msgstr ""
"Для использования ``tox`` в Appveyor есть пара дополнительных соображений "
"(на самом деле, эти вопросы не относятся к Appveyor и вполне могут "
"затрагивать другие CI-системы)."

#: ../source/guides/supporting-windows-using-appveyor.rst:159
msgid ""
"By default, ``tox`` only passes a chosen subset of environment variables to "
"the test processes. Because ``distutils`` uses environment variables to "
"control the compiler, this \"test isolation\" feature will cause the tests "
"to use the wrong compiler by default."
msgstr ""
"По умолчанию ``tox`` передает тестовым процессам только выбранное "
"подмножество переменных окружения. Поскольку ``distutils`` использует "
"переменные окружения для управления компилятором, эта функция \"изоляции "
"тестов\" приведет к тому, что тесты по умолчанию будут использовать "
"неправильный компилятор."

#: ../source/guides/supporting-windows-using-appveyor.rst:164
msgid ""
"To force ``tox`` to pass the necessary environment variables to the "
"subprocess, you need to set the ``tox`` configuration option ``passenv`` to "
"list the additional environment variables to be passed to the subprocess. "
"For the SDK compilers, you need"
msgstr ""
"Чтобы заставить ``tox`` передавать подпроцессу необходимые переменные "
"окружения, нужно установить в конфигурационной опции ``tox`` ``passenv`` "
"список дополнительных переменных окружения, которые нужно передать "
"подпроцессу. Для компиляторов SDK необходимо"

#: ../source/guides/supporting-windows-using-appveyor.rst:169
msgid "``DISTUTILS_USE_SDK``"
msgstr "``DISTUTILS_USE_SDK``"

#: ../source/guides/supporting-windows-using-appveyor.rst:170
msgid "``MSSdk``"
msgstr "``MSSdk``"

#: ../source/guides/supporting-windows-using-appveyor.rst:171
msgid "``INCLUDE``"
msgstr "``INCLUDE``"

#: ../source/guides/supporting-windows-using-appveyor.rst:172
msgid "``LIB``"
msgstr "``LIB``"

#: ../source/guides/supporting-windows-using-appveyor.rst:174
msgid ""
"The ``passenv`` option can be set in your :file:`tox.ini`, or if you prefer "
"to avoid adding Windows-specific settings to your general project files, it "
"can be set by setting the ``TOX_TESTENV_PASSENV`` environment variable. The "
"supplied :file:`build.cmd` script does this by default whenever "
"``DISTUTILS_USE_SDK`` is set."
msgstr ""
"Опция ``passenv`` может быть задана в вашем :file:`tox.ini`, или, если вы "
"предпочитаете не добавлять специфические для Windows настройки в общие файлы "
"проекта, ее можно задать, установив переменную окружения "
"``TOX_TESTENV_PASSENV``. Поставляемый в комплекте скрипт :file:`build.cmd` "
"делает это по умолчанию, когда установлено значение ``DISTUTILS_USE_SDK``."

#: ../source/guides/supporting-windows-using-appveyor.rst:180
msgid ""
"When used interactively, ``tox`` allows you to run your tests against "
"multiple environments (often, this means multiple Python versions). This "
"feature is not as useful in a CI environment like Travis or Appveyor, where "
"all tests are run in isolated environments for each configuration. As a "
"result, projects often supply an argument ``-e ENVNAME`` to ``tox`` to "
"specify which environment to use (there are default environments for most "
"versions of Python)."
msgstr ""
"При интерактивном использовании ``tox`` позволяет запускать тесты в "
"нескольких окружениях (часто это означает несколько версий Python). Эта "
"возможность не так полезна в среде CI, такой как Travis или Appveyor, где "
"все тесты запускаются в изолированных окружениях для каждой конфигурации. В "
"результате проекты часто передают аргумент ``-e ENVNAME`` в ``tox``, чтобы "
"указать, какое окружение использовать (есть окружения по умолчанию для "
"большинства версий Python)."

#: ../source/guides/supporting-windows-using-appveyor.rst:187
msgid ""
"However, this does *not* work well with a Windows CI system like Appveyor, "
"where there are (for example) two installations of Python 3.4 (32-bit and 64-"
"bit) available, but only one ``py34`` environment in ``tox``."
msgstr ""
"Однако это *не* хорошо работает с системой Windows CI, такой как Appveyor, "
"где (например) доступны две установки Python 3.4 (32-битная и 64-битная), но "
"только одно окружение ``py34`` в ``tox``."

#: ../source/guides/supporting-windows-using-appveyor.rst:191
msgid ""
"In order to run tests using ``tox``, therefore, projects should probably use "
"the default ``py`` environment in ``tox``, which uses the Python interpreter "
"that was used to run ``tox``. This will ensure that when Appveyor runs the "
"tests, they will be run with the configured interpreter."
msgstr ""
"Поэтому для запуска тестов с помощью ``tox`` проектам, вероятно, следует "
"использовать стандартное окружение ``py`` в ``tox``, которое использует "
"интерпретатор Python, использовавшийся для запуска ``tox``. Это гарантирует, "
"что когда Appveyor запустит тесты, они будут запущены с настроенным "
"интерпретатором."

#: ../source/guides/supporting-windows-using-appveyor.rst:196
msgid ""
"In order to support running under the ``py`` environment, it is possible "
"that projects with complex ``tox`` configurations might need to modify "
"their :file:`tox.ini` file. Doing so is, however, outside the scope of this "
"document."
msgstr ""
"Для поддержки работы в среде ``py``, возможно, проектам со сложной "
"конфигурацией ``tox`` потребуется изменить свой файл :file:`tox.ini`. Однако "
"это выходит за рамки данного документа."

#: ../source/guides/supporting-windows-using-appveyor.rst:202
msgid "Automatically uploading wheels"
msgstr "Автоматическая загрузка колёс"

#: ../source/guides/supporting-windows-using-appveyor.rst:204
msgid ""
"It is possible to request Appveyor to automatically upload wheels. There is "
"a ``deployment`` step available in :file:`appveyor.yml` that can be used to "
"(for example) copy the built artifacts to a FTP site, or an Amazon S3 "
"instance. Documentation on how to do this is included in the Appveyor guides."
msgstr ""
"Можно попросить Appveyor автоматически загружать колеса. В :file:`appveyor."
"yml` есть шаг ``развертывания``, который можно использовать, чтобы "
"(например) скопировать собранные артефакты на FTP-сайт или в экземпляр "
"Amazon S3. Документация о том, как это сделать, включена в руководства по "
"Appveyor."

#: ../source/guides/supporting-windows-using-appveyor.rst:209
msgid ""
"Alternatively, it would be possible to add a ``twine upload`` step to the "
"build.  The supplied :file:`appveyor.yml` does not do this, as it is not "
"clear that uploading new wheels after every commit is desirable (although "
"some projects may wish to do this)."
msgstr ""
"В качестве альтернативы можно было бы добавить в сборку шаг ``twine "
"upload``.  Поставляемый :file:`appveyor.yml` этого не делает, поскольку "
"неясно, насколько желательна загрузка новых колес после каждого коммита "
"(хотя некоторые проекты могут захотеть это сделать)."

#: ../source/guides/supporting-windows-using-appveyor.rst:215
msgid "External dependencies"
msgstr "Внешние зависимости"

#: ../source/guides/supporting-windows-using-appveyor.rst:217
msgid ""
"The supplied scripts will successfully build any distribution that does not "
"rely on 3rd party external libraries for the build."
msgstr ""
"Прилагаемые скрипты успешно соберут любой дистрибутив, который не зависит от "
"сторонних внешних библиотек для сборки."

#: ../source/guides/supporting-windows-using-appveyor.rst:220
msgid ""
"It is possible to add steps to the :file:`appveyor.yml` configuration "
"(typically in the \"install\" section) to download and/or build external "
"libraries needed by the distribution. And if needed, it is possible to add "
"extra configuration for the build to supply the location of these libraries "
"to the compiler. However, this level of configuration is beyond the scope of "
"this document."
msgstr ""
"В конфигурацию :file:`appveyor.yml` можно добавить шаги (обычно в разделе "
"\"install\") для загрузки и/или сборки внешних библиотек, необходимых "
"дистрибутиву. При необходимости можно добавить дополнительную конфигурацию "
"для сборки, чтобы указать компилятору местоположение этих библиотек. Однако "
"такой уровень конфигурации выходит за рамки данного документа."

#: ../source/guides/supporting-windows-using-appveyor.rst:229
msgid "Support scripts"
msgstr "Скрипты поддержки"

#: ../source/guides/supporting-windows-using-appveyor.rst:231
msgid "For reference, the SDK setup support script is listed here:"
msgstr "Для справки, сценарий поддержки установки SDK приведен здесь:"

#: ../source/guides/supporting-windows-using-appveyor.rst:233
msgid "``appveyor-sample/build.cmd``"
msgstr "``appveyor-sample/build.cmd``"

#: ../source/guides/tool-recommendations.rst:5
msgid "Tool recommendations"
msgstr "Рекомендации по инструментам"

#: ../source/guides/tool-recommendations.rst:7
msgid ""
"The Python packaging landscape consists of many different tools. For many "
"tasks, the :term:`Python Packaging Authority <Python Packaging Authority "
"(PyPA)>` (PyPA, the working group which encompasses many packaging tools and "
"maintains this guide) purposefully does not make a blanket recommendation; "
"for example, the reason there are many build backends is that the landscape "
"was opened up in order to enable the development of new backends serving "
"certain users' needs better than the previously unique backend, setuptools. "
"This guide does point to some tools that are widely recognized, and also "
"makes some recommendations of tools that you should *not* use because they "
"are deprecated or insecure."
msgstr ""
"Сфера упаковки Python состоит из множества различных инструментов. Для "
"многих задач : термин:` Python Packaging Authority <Python Packaging "
"Authority (PyPA)>` (PyPA, рабочая группа, объединяющая многие инструменты "
"упаковки и поддерживающая это руководство) намеренно не дает общих "
"рекомендаций; например, причина существования множества бэкендов сборки в "
"том, что ландшафт был открыт, чтобы позволить разработку новых бэкендов, "
"обслуживающих потребности определенных пользователей лучше, чем ранее "
"уникальный бэкенд, setuptools. В этом руководстве указаны некоторые "
"инструменты, которые широко известны, а также даны рекомендации по "
"инструментам, которые не следует использовать, поскольку они устарели или "
"небезопасны."

#: ../source/guides/tool-recommendations.rst:20
msgid "Virtual environments"
msgstr "Виртуальная среда"

#: ../source/guides/tool-recommendations.rst:22
msgid ""
"The standard tools to create and use virtual environments manually are :ref:"
"`virtualenv` (PyPA project) and :doc:`venv <python:library/venv>` (part of "
"the Python standard library, though missing some features of virtualenv)."
msgstr ""
"Стандартными инструментами для создания и использования виртуальных сред "
"вручную являются : ссылка:`virtualenv` (проект PyPA) и : документация:`venv "
"<питон:библиотека/venv>` (часть стандартной библиотеки Python, хотя и "
"лишенная некоторых возможностей virtualenv)."

#: ../source/guides/tool-recommendations.rst:28
msgid "Installing packages"
msgstr "Установка пакетов"

#: ../source/guides/tool-recommendations.rst:30
msgid ""
":ref:`Pip` is the standard tool to install packages from :term:`PyPI <Python "
"Package Index (PyPI)>`. You may want to read pip's recommendations for :doc:"
"`secure installs <pip:topics/secure-installs>`. Pip is available by default "
"in most Python installations through the standard library package :doc:"
"`ensurepip <python:library/ensurepip>`."
msgstr ""
": ссылка:`Pip` - это стандартный инструмент для установки пакетов из : "
"термин:`PyPI <Python Package Index (PyPI)>`. Вы можете ознакомиться с "
"рекомендациями pip по : документу:`безопасная установка <pip:topics/"
"безопасная установка>`. Pip доступен по умолчанию в большинстве инсталляций "
"Python через стандартный библиотечный пакет : документ:`ensurepip <python: "
"библиотека/ensurepip>`."

#: ../source/guides/tool-recommendations.rst:36
msgid ""
"Alternatively, consider :ref:`pipx` for the specific use case of installing "
"Python applications that are distributed through PyPI and run from the "
"command line. Pipx is a wrapper around pip and venv that installs each "
"application into a dedicated virtual environment. This avoids conflicts "
"between the dependencies of different applications, and also with system-"
"wide applications making use of the same Python interpreter (especially on "
"Linux)."
msgstr ""
"В качестве альтернативы можно рассмотреть : ссылка:`pipx` для конкретного "
"случая установки Python-приложений, распространяемых через PyPI и "
"запускаемых из командной строки. Pipx - это обертка вокруг pip и venv, "
"которая устанавливает каждое приложение в отдельное виртуальное окружение. "
"Это позволяет избежать конфликтов между зависимостями различных приложений, "
"а также общесистемных приложений, использующих один и тот же интерпретатор "
"Python (особенно в Linux)."

#: ../source/guides/tool-recommendations.rst:43
msgid ""
"For scientific software specifically, consider :ref:`Conda` or :ref:`Spack`."
msgstr ""
"Для научного программного обеспечения, в частности, рассмотрите : ссылка:"
"`Conda` или :ссылка:`Spack`."

#: ../source/guides/tool-recommendations.rst:45
msgid "Write a \"pip vs. Conda\" comparison, here or in a new discussion."
msgstr ""
"Напишите отзыв о сравнении \"pip против Conda\" здесь или в новом обсуждении."

#: ../source/guides/tool-recommendations.rst:47
msgid ""
"Do **not** use ``easy_install`` (part of :ref:`setuptools`), which is "
"deprecated in favor of pip (see :ref:`pip vs easy_install` for details). "
"Likewise, do **not** use ``python setup.py install`` or ``python setup.py "
"develop``, which are also deprecated (see :ref:`setup-py-deprecated` for "
"background and :ref:`modernize-setup-py-project` for migration advice)."
msgstr ""
"Не **не** используйте ``easy_install`` (часть : ссылка:`setuptools``), "
"который устарел в пользу pip (подробности см. в :ссылка:`pip против "
"easy_install``). Аналогично, **не** используйте ``питон setup.py install`` "
"или ``питон setup.py develop``, которые также устарели (смотрите : ссылка:"
"`setup-py-отказ от использования`` и :ссылка:`модернизация-setup-py-"
"проекта`` для рекомендаций по переходу)."

#: ../source/guides/tool-recommendations.rst:55
msgid "Lock files"
msgstr "Блокировка файлов"

#: ../source/guides/tool-recommendations.rst:57
msgid ""
":ref:`pip-tools` and :ref:`Pipenv` are two recognized tools to create lock "
"files, which contain the exact versions of all packages installed into an "
"environment, for reproducibility purposes."
msgstr ""
": ссылка:`pip-tools` и :ссылка:`Pipenv` - два признанных инструмента для "
"создания файлов блокировки, которые содержат точные версии всех пакетов, "
"установленных в окружении, для целей воспроизводимости."

#: ../source/guides/tool-recommendations.rst:63
msgid "Build backends"
msgstr "Создание бэкендов"

#: ../source/guides/tool-recommendations.rst:67
msgid ""
"Please, remember: this document does not seek to steer the reader towards a "
"particular tool, only to enumerate common tools. Different use cases often "
"need specialized workflows."
msgstr ""
"Пожалуйста, помните: этот документ не направлен на то, чтобы склонить "
"читателя к выбору конкретного инструмента, а лишь перечисляет общие "
"инструменты. Для различных случаев использования часто требуются "
"специализированные рабочие процессы."

#: ../source/guides/tool-recommendations.rst:71
msgid ""
"Popular :term:`build backends <build backend>` for pure-Python packages "
"include, in alphabetical order:"
msgstr ""
"Популярные : термин:`сборка бэкендов <сборка бэкенда>` для пакетов pure-"
"Python включают в себя, в алфавитном порядке:"

#: ../source/guides/tool-recommendations.rst:74
msgid ""
":doc:`Flit-core <flit:pyproject_toml>` -- developed with but separate from :"
"ref:`Flit`. A minimal and opinionated build backend. It does not support "
"plugins."
msgstr ""
": документ:`Flit-core <flit:pyproject_toml>` -- разрабатывается совместно "
"с : ссылка:`Flit`, но отдельно от :ссылка:`Flit`. Минимальный бэкенд для "
"сборки с собственным мнением. Не поддерживает плагины."

#: ../source/guides/tool-recommendations.rst:77
msgid ""
"Hatchling_ -- developed with but separate from :ref:`Hatch`. Supports "
"plugins."
msgstr ""
"Hatchling_ -- разработан вместе с : ссылка:`Hatch`, но отдельно от него. "
"Поддерживает плагины."

#: ../source/guides/tool-recommendations.rst:79
msgid ""
"PDM-backend_ -- developed with but separate from :ref:`PDM`. Supports "
"plugins."
msgstr ""
"PDM-бэкенд_ -- разработан совместно с : ссылка:`PDM`, но отдельно от него. "
"Поддерживает плагины."

#: ../source/guides/tool-recommendations.rst:81
msgid ""
"Poetry-core_ -- developed with but separate from :ref:`Poetry`. Supports "
"plugins."
msgstr ""
"Poetry-core_ -- разрабатывается вместе с : ссылка:`Poetry`, но отдельно от "
"него. Поддерживает плагины."

#: ../source/guides/tool-recommendations.rst:84
msgid ""
"Unlike other backends on this list, Poetry-core does not support the "
"standard :ref:`[project] table <writing-pyproject-toml>` (it uses a "
"different format, in the ``[tool.poetry]`` table)."
msgstr ""
"В отличие от других бэкендов в этом списке, Poetry-core не поддерживает "
"стандартную : ссылка:`[проект] таблица <writing-pyproject-toml>` (он "
"использует другой формат, в таблице ``[ инструмент.поэзия]``)."

#: ../source/guides/tool-recommendations.rst:88
msgid ""
":ref:`setuptools`, which used to be the only build backend. Supports plugins."
msgstr ""
": ссылка:`setuptools`, который раньше был единственным бэкендом сборки. "
"Поддерживает плагины."

#: ../source/guides/tool-recommendations.rst:92
msgid ""
"If you use setuptools, please be aware that some features that predate "
"standardisation efforts are now deprecated and only *temporarily kept* for "
"compatibility."
msgstr ""
"Если вы используете setuptools, пожалуйста, имейте в виду, что некоторые "
"функции, появившиеся до стандартизации, теперь устарели и сохраняются только "
"*временно* для совместимости."

#: ../source/guides/tool-recommendations.rst:96
msgid ""
"In particular, do **not** use direct ``python setup.py`` invocations. On the "
"other hand, configuring setuptools with a :file:`setup.py` file is still "
"fully supported, although it is recommended to use the modern :ref:"
"`[project] table in pyproject.toml <writing-pyproject-toml>` (or :file:"
"`setup.cfg`) whenever possible and keep :file:`setup.py` only if "
"programmatic configuration is needed. See :ref:`setup-py-deprecated`."
msgstr ""
"В частности, **не** используйте прямые вызовы ``python setup.py``. С другой "
"стороны, настройка setuptools с помощью файла : файл:`setup.py` по-прежнему "
"полностью поддерживается, хотя рекомендуется использовать современную "
"таблицу : ссылка:`[ проект] в pyproject.toml <запись-pyproject-toml>` (или :"
"файл:`setup.cfg`), когда это возможно, и сохранять :файл:`setup.py` только в "
"случае необходимости программной настройки. Смотрите : ссылка:`setup-py-"
"deprecated`."

#: ../source/guides/tool-recommendations.rst:103
msgid ""
"Other examples of deprecated features you should **not** use include the "
"``setup_requires`` argument to ``setup()`` (use the :ref:`[build-system] "
"table <pyproject-guide-build-system-table>` in :file:`pyproject.toml` "
"instead), and the ``easy_install`` command (cf. :ref:`pip vs easy_install`)."
msgstr ""
"Другие примеры устаревших функций, которые не следует **не** использовать, "
"включают аргумент ``setup_requires`` для ``setup()`` (вместо него "
"используйте : ссылка:`[ сборка-системы] таблица <pyproject-guide-build-"
"system-table>` в :файл:`pyproject.toml``), и команду ``easy_install`` (ср. :"
"ссылка:`pip против easy_install``)."

#: ../source/guides/tool-recommendations.rst:108
msgid ""
"Do **not** use :ref:`distutils`, which is deprecated, and has been removed "
"from the standard library in Python 3.12, although it still remains "
"available from setuptools."
msgstr ""
"Не используйте : ссылка:`distutils`, который устарел и был удален из "
"стандартной библиотеки в Python 3.12, хотя он по-прежнему доступен из "
"setuptools."

#: ../source/guides/tool-recommendations.rst:112
msgid ""
"For packages with :term:`extension modules <extension module>`, it is best "
"to use a build system with dedicated support for the language the extension "
"is written in, for example:"
msgstr ""
"Для пакетов с : термин:`модули расширения <модуль расширения>`, лучше всего "
"использовать систему сборки с поддержкой языка, на котором написано "
"расширение, например:"

#: ../source/guides/tool-recommendations.rst:116
msgid ""
":ref:`setuptools` -- natively supports C and C++ (with third-party plugins "
"for Go and Rust),"
msgstr ""
": ссылка:`setuptools` - изначально поддерживает C и C++ (со сторонними "
"плагинами для Go и Rust),"

#: ../source/guides/tool-recommendations.rst:117
msgid ""
":ref:`meson-python` -- C, C++, Fortran, Rust, and other languages supported "
"by Meson,"
msgstr ""
": ссылка:`meson-python` -- C, C++, Fortran, Rust и другие языки, "
"поддерживаемые Meson,"

#: ../source/guides/tool-recommendations.rst:118
msgid ""
":ref:`scikit-build-core` -- C, C++, Fortran, and other languages supported "
"by CMake,"
msgstr ""
": ссылка:`scikit-build-core` -- C, C++, Fortran и другие языки, "
"поддерживаемые CMake,"

#: ../source/guides/tool-recommendations.rst:119
msgid ":ref:`maturin` -- Rust, via Cargo."
msgstr ": ссылка:`maturin` - Rust, через Cargo."

#: ../source/guides/tool-recommendations.rst:123
msgid "Building distributions"
msgstr "Распределение зданий"

#: ../source/guides/tool-recommendations.rst:125
msgid ""
"The standard tool to build :term:`source distributions <source distribution "
"(or \"sdist\")>` and :term:`wheels <wheel>` for uploading to PyPI is :ref:"
"`build`.  It will invoke whichever build backend you :ref:`declared "
"<pyproject-guide-build-system-table>` in :file:`pyproject.toml`."
msgstr ""
"Стандартным инструментом для сборки : термин:`источник дистрибутива "
"<источник дистрибутива (или \"sdist\")>` и :термин:`колеса <колесо>` для "
"загрузки на PyPI является : ссылка:`build`.  Он будет вызывать тот бэкенд "
"сборки, который вы : ссылка:`декларировали <pyproject-guide-build-system-"
"table>` в :файл:`pyproject.toml`."

#: ../source/guides/tool-recommendations.rst:130
msgid ""
"Do **not** use ``python setup.py sdist`` and ``python setup.py bdist_wheel`` "
"for this task. All direct invocations of :file:`setup.py` are :ref:"
"`deprecated <setup-py-deprecated>`."
msgstr ""
"Не используйте для этой задачи ``python setup.py sdist`` и ``python setup.py "
"bdist_wheel``. Все прямые вызовы : файл:`setup.py` являются :ссылка:"
"`утратившими актуальность <setup-py-deprecated>`."

#: ../source/guides/tool-recommendations.rst:134
msgid ""
"If you have :term:`extension modules <extension module>` and want to "
"distribute wheels for multiple platforms, use :ref:`cibuildwheel` as part of "
"your CI setup to build distributable wheels."
msgstr ""
"Если у вас есть : термин:`модули расширения <модуль расширения>` и вы хотите "
"распространять колеса для нескольких платформ, используйте : ссылка:"
"`cibuildwheel` как часть вашей настройки CI для сборки распространяемых "
"колес."

#: ../source/guides/tool-recommendations.rst:140
msgid "Uploading to PyPI"
msgstr "Загрузка на PyPI"

#: ../source/guides/tool-recommendations.rst:142
msgid ""
"For projects hosted on or published via supported CI/CD platforms, it is "
"recommended to use the :ref:`Trusted Publishing <trusted-publishing>`, which "
"allows the package to be securely uploaded to PyPI from a CI/CD workflow "
"without a manually configured API token."
msgstr ""
"Для проектов, размещенных на поддерживаемых CI/CD платформах или "
"опубликованных с их помощью, рекомендуется использовать :ref:`Trusted "
"Publishing <trusted-publishing>`, который позволяет безопасно загрузить "
"пакет в PyPI из CI/CD рабочего процесса без ручной настройки API-токена."

#: ../source/guides/tool-recommendations.rst:147
msgid ""
"As of November 2024, PyPI supports the following platforms as Trusted "
"Publishing providers:"
msgstr ""
"По состоянию на ноябрь 2024 года PyPI поддерживает следующие платформы в "
"качестве доверенных поставщиков публикаций:"

#: ../source/guides/tool-recommendations.rst:150
msgid "GitHub Actions (on ``https://github.com``)"
msgstr "Действия на GitHub (на ``https://github.com``)"

#: ../source/guides/tool-recommendations.rst:151
msgid "GitLab CI/CD (on ``https://gitlab.com``)"
msgstr "GitLab CI/CD (на ``https://gitlab.com``)"

#: ../source/guides/tool-recommendations.rst:152
msgid "ActiveState"
msgstr "ActiveState"

#: ../source/guides/tool-recommendations.rst:153
msgid "Google Cloud"
msgstr "Google Cloud"

#: ../source/guides/tool-recommendations.rst:155
msgid ""
"The other available method is to upload the package manually using :ref:"
"`twine`."
msgstr ""
"Другой доступный способ - загрузить пакет вручную с помощью : ссылка:`twine`."

#: ../source/guides/tool-recommendations.rst:159
msgid ""
"**Never** use ``python setup.py upload`` for this task. In addition to "
"being :ref:`deprecated <setup-py-deprecated>`, it is insecure."
msgstr ""
"**Никогда** не используйте ``python setup.py upload`` для этой задачи. "
"Помимо того, что он является : ссылка:`утратившим актуальность <setup-py-"
"deprecated>`, он еще и небезопасен."

#: ../source/guides/tool-recommendations.rst:164
msgid "Workflow tools"
msgstr "Инструменты рабочего процесса"

#: ../source/guides/tool-recommendations.rst:166
msgid ""
"These tools are environment managers that automatically manage virtual "
"environments for a project. They also act as \"task runners\", allowing you "
"to define and invoke tasks such as running tests, compiling documentation, "
"regenerating some files, etc. Some of them provide shortcuts for building "
"distributions and uploading to PyPI, and some support lock files for "
"applications. They often call the tools mentioned above under the hood. In "
"alphabetical order:"
msgstr ""
"Эти инструменты представляют собой менеджеры окружения, которые "
"автоматически управляют виртуальными средами для проекта. Они также "
"выступают в роли \"бегунков задач\", позволяя вам определять и вызывать "
"такие задачи, как запуск тестов, компиляция документации, регенерация "
"некоторых файлов и т. д. Некоторые из них предоставляют ярлыки для сборки "
"дистрибутивов и загрузки в PyPI, а некоторые поддерживают блокировку файлов "
"для приложений. Часто они вызывают инструменты, упомянутые выше под капотом. "
"В алфавитном порядке:"

#: ../source/guides/tool-recommendations.rst:174
msgid ":ref:`Flit`,"
msgstr ":ссылка:`Flit`,"

#: ../source/guides/tool-recommendations.rst:175
msgid ":ref:`Hatch`,"
msgstr ":ссылка:`Hatch`,"

#: ../source/guides/tool-recommendations.rst:176
msgid ":doc:`nox <nox:index>`,"
msgstr ": документ:`nox <nox: индекс>`,"

#: ../source/guides/tool-recommendations.rst:177
msgid ":ref:`PDM`,"
msgstr ":ссылка:`PDM`,"

#: ../source/guides/tool-recommendations.rst:178
msgid ":ref:`Pipenv`,"
msgstr ":ссылка:`Pipenv`,"

#: ../source/guides/tool-recommendations.rst:179
msgid ":ref:`Poetry`,"
msgstr ":ссылка:`Поэзия`,"

#: ../source/guides/tool-recommendations.rst:180
msgid ":doc:`tox <tox:index>`."
msgstr ": документ:`токсический <токсический:индекс>`."

#: ../source/guides/using-manifest-in.rst:5
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr "Включение файлов в исходные дистрибутивы с помощью ``MANIFEST.in``"

#: ../source/guides/using-manifest-in.rst:7
msgid ""
"The information on this page has moved to :doc:`setuptools:userguide/"
"miscellaneous` in the setuptools documentation."
msgstr ""
"Информация на этой странице была перемещена в :doc:`setuptools:userguide/"
"miscellaneous` в документации по setuptools."

#: ../source/guides/using-testpypi.rst:7
msgid ""
"``TestPyPI`` is a separate instance of the :term:`Python Package Index "
"(PyPI)` that allows you to try out the distribution tools and process "
"without worrying about affecting the real index. TestPyPI is hosted at `test."
"pypi.org <https://test.pypi.org>`_"
msgstr ""
"``TestPyPI`` - это отдельный экземпляр :term:``Python Package Index "
"(PyPI)``, который позволяет вам опробовать инструменты и процесс "
"распространения, не беспокоясь о том, что это повлияет на настоящий индекс. "
"TestPyPI размещен по адресу `test.pypi.org <https://test.pypi.org>`_"

#: ../source/guides/using-testpypi.rst:13
msgid "Registering your account"
msgstr "Регистрация учётной записи"

#: ../source/guides/using-testpypi.rst:15
msgid ""
"Because TestPyPI has a separate database from the live PyPI, you'll need a "
"separate user account specifically for TestPyPI. Go to https://test.pypi.org/"
"account/register/ to register your account."
msgstr ""
"Поскольку TestPyPI имеет отдельную базу данных от живого PyPI, вам "
"понадобится отдельная учетная запись пользователя специально для TestPyPI. "
"Перейдите на https://test.pypi.org/account/register/, чтобы зарегистрировать "
"свою учетную запись."

#: ../source/guides/using-testpypi.rst:19
msgid ""
"The database for TestPyPI may be periodically pruned, so it is not unusual "
"for user accounts to be deleted."
msgstr ""
"База данных TestPyPI может периодически подвергаться обрезке, поэтому "
"нередко учетные записи пользователей удаляются."

#: ../source/guides/using-testpypi.rst:24
msgid "Using TestPyPI with Twine"
msgstr "Использование TestPyPI вместе с Twine"

#: ../source/guides/using-testpypi.rst:26
msgid ""
"You can upload your distributions to TestPyPI using :ref:`twine` by "
"specifying the ``--repository`` flag:"
msgstr ""
"Вы можете загрузить свои дистрибутивы в TestPyPI с помощью :ref:`twine`, "
"указав флаг ``--repository``:"

#: ../source/guides/using-testpypi.rst:33
msgid ""
"You can see if your package has successfully uploaded by navigating to the "
"URL ``https://test.pypi.org/project/<sampleproject>`` where "
"``sampleproject`` is the name of your project that you uploaded. It may take "
"a minute or two for your project to appear on the site."
msgstr ""
"Вы можете убедиться, что ваш пакет успешно загружен, перейдя по URL-адресу "
"``https://test.pypi.org/project/<sampleproject>``, где ``sampleproject`` - "
"это имя загруженного вами проекта. Возможно, потребуется минута или две, "
"чтобы ваш проект появился на сайте."

#: ../source/guides/using-testpypi.rst:39
msgid "Using TestPyPI with pip"
msgstr "Использование TestPyPI вместе с pip"

#: ../source/guides/using-testpypi.rst:41
msgid ""
"You can tell :ref:`pip` to download packages from TestPyPI instead of PyPI "
"by specifying the ``--index-url`` flag:"
msgstr ""
"Вы можете указать :ref:`pip` загружать пакеты с TestPyPI вместо PyPI, указав "
"флаг ``--index-url``:"

#: ../source/guides/using-testpypi.rst:56
msgid ""
"If you want to allow pip to also download packages from PyPI, you can "
"specify ``--extra-index-url`` to point to PyPI. This is useful when the "
"package you're testing has dependencies:"
msgstr ""
"Если вы хотите, чтобы pip также загружал пакеты с PyPI, вы можете указать "
"``--extra-index-url``, чтобы он указывал на PyPI. Это полезно, когда у "
"тестируемого пакета есть зависимости:"

#: ../source/guides/using-testpypi.rst:73
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr "Настройка TestPyPI в :file:`.pypirc`"

#: ../source/guides/using-testpypi.rst:75
msgid ""
"If you want to avoid being prompted for your username and password every "
"time, you can configure TestPyPI in your :file:`$HOME/.pypirc`:"
msgstr ""
"Если вы хотите, чтобы вам не приходилось каждый раз запрашивать имя "
"пользователя и пароль, вы можете настроить TestPyPI в вашем :file:`$HOME/."
"pypirc`:"

#: ../source/guides/writing-pyproject-toml.rst:5
msgid "Writing your ``pyproject.toml``"
msgstr "Написание вашего ``pyproject.toml``"

#: ../source/guides/writing-pyproject-toml.rst:7
msgid ""
"``pyproject.toml`` is a configuration file used by packaging tools, as well "
"as other tools such as linters, type checkers, etc. There are three possible "
"TOML tables in this file."
msgstr ""
"``pyproject.toml`` - это конфигурационный файл, используемый инструментами "
"упаковки, а также другими инструментами, такими как линеры, программы "
"проверки типов и т.д. В этом файле есть три возможные таблицы TOML."

#: ../source/guides/writing-pyproject-toml.rst:11
msgid ""
"The ``[build-system]`` table is **strongly recommended**. It allows you to "
"declare which :term:`build backend` you use and which other dependencies are "
"needed to build your project."
msgstr ""
"Таблица ``[build-system]`` является **настоятельно рекомендуемой**. Она "
"позволяет указать, какой :term:`build backend` вы используете и какие другие "
"зависимости необходимы для сборки вашего проекта."

#: ../source/guides/writing-pyproject-toml.rst:15
msgid ""
"The ``[project]`` table is the format that most build backends use to "
"specify your project's basic metadata, such as the dependencies, your name, "
"etc."
msgstr ""
"Таблица ``[project]`` - это формат, который используется большинством "
"сборочных бэкендов для указания основных метаданных вашего проекта, таких "
"как зависимости, ваше имя и т.д."

#: ../source/guides/writing-pyproject-toml.rst:18
msgid ""
"The ``[tool]`` table has tool-specific subtables, e.g., ``[tool.hatch]``, "
"``[tool.black]``, ``[tool.mypy]``. We only touch upon this table here "
"because its contents are defined by each tool. Consult the particular tool's "
"documentation to know what it can contain."
msgstr ""
"Таблица ``[tool]`` имеет подтаблицы, специфичные для каждого инструмента, "
"например, ``[tool.hatch]``, ``[tool.black]``, ``[tool.mypy]``. Здесь мы "
"касаемся только этой таблицы, поскольку ее содержимое определяется каждым "
"инструментом. Чтобы узнать, что в ней может содержаться, обратитесь к "
"документации конкретного инструмента."

#: ../source/guides/writing-pyproject-toml.rst:25
msgid ""
"The ``[build-system]`` table should always be present, regardless of which "
"build backend you use (``[build-system]`` *defines* the build tool you use)."
msgstr ""
"Таблица ``[build-system]`` должна присутствовать всегда, независимо от того, "
"какой бэкенд сборки вы используете (``[build-system]`` *определяет* "
"инструмент сборки, который вы используете)."

#: ../source/guides/writing-pyproject-toml.rst:29
msgid ""
"On the other hand, the ``[project]`` table is understood by *most* build "
"backends, but some build backends use a different format."
msgstr ""
"С другой стороны, таблица ``[project]`` понимается *большинством* сборочных "
"бэкендов, но некоторые бэкенды используют другой формат."

#: ../source/guides/writing-pyproject-toml.rst:32
msgid ""
"A notable exception is Poetry_, which before version 2.0 (released January "
"5, 2025) did not use the ``[project]`` table, it used the ``[tool.poetry]`` "
"table instead. With version 2.0, it supports both. Also, the setuptools_ "
"build backend supports both the ``[project]`` table, and the older format in "
"``setup.cfg`` or ``setup.py``."
msgstr ""
"Заметным исключением является Poetry_, который до версии 2.0 (выпущенной 5 "
"января 2025 года) не использовал таблицу ``[project]``, а использовал "
"таблицу ``[tool.poetry]``. В версии 2.0 она поддерживает обе таблицы. Кроме "
"того, бэкенд сборки setuptools_ поддерживает как таблицу ``[project]``, так "
"и более старый формат в ``setup.cfg`` или ``setup.py``."

#: ../source/guides/writing-pyproject-toml.rst:38
msgid ""
"For new projects, use the ``[project]`` table, and keep ``setup.py`` only if "
"some programmatic configuration is needed (such as building C extensions), "
"but the ``setup.cfg`` and ``setup.py`` formats are still valid. See :ref:"
"`setup-py-deprecated`."
msgstr ""
"Для новых проектов используйте таблицу ``[project]``, а ``setup.py`` "
"сохраняйте только в том случае, если требуется некоторая программная "
"настройка (например, сборка расширений на C), но форматы ``setup.cfg`` и "
"``setup.py`` по-прежнему актуальны. См. :ref:`setup-py-deprecated`."

#: ../source/guides/writing-pyproject-toml.rst:47
msgid "Declaring the build backend"
msgstr "Объявление бэкенда сборки"

#: ../source/guides/writing-pyproject-toml.rst:49
msgid ""
"The ``[build-system]`` table contains a ``build-backend`` key, which "
"specifies the build backend to be used. It also contains a ``requires`` key, "
"which is a list of dependencies needed to build the project -- this is "
"typically just the build backend package, but it may also contain additional "
"dependencies. You can also constrain the versions, e.g., ``requires = "
"[\"setuptools >= 61.0\"]``."
msgstr ""
"Таблица ``[build-system]`` содержит ключ ``build-backend``, который "
"указывает используемый бэкенд сборки. Она также содержит ключ ``requires``, "
"который представляет собой список зависимостей, необходимых для сборки "
"проекта - обычно это только пакет бэкенда сборки, но может содержать и "
"дополнительные зависимости. Вы также можете ограничить версии, например, "
"``requires = [\"setuptools >= 61.0\"]``."

#: ../source/guides/writing-pyproject-toml.rst:55
msgid ""
"Usually, you'll just copy what your build backend's documentation suggests "
"(after :ref:`choosing your build backend <choosing-build-backend>`). Here "
"are the values for some common build backends:"
msgstr ""
"Обычно вы просто копируете то, что предлагает документация вашего бэкенда "
"сборки (после :ref:`выбора бэкенда сборки <choosing-build-backend>`). Вот "
"значения для некоторых распространенных бэкендов сборки:"

#: ../source/guides/writing-pyproject-toml.rst:63
msgid "Static vs. dynamic metadata"
msgstr "Статические и динамические метаданные"

#: ../source/guides/writing-pyproject-toml.rst:65
msgid "The rest of this guide is devoted to the ``[project]`` table."
msgstr "Остальная часть этого руководства посвящена таблице ``[проекта]``."

#: ../source/guides/writing-pyproject-toml.rst:67
msgid ""
"Most of the time, you will directly write the value of a ``[project]`` "
"field. For example: ``requires-python = \">= 3.8\"``, or ``version = "
"\"1.0\"``."
msgstr ""
"Чаще всего вы будете напрямую записывать значение поля ``[проект]``. "
"Например: ``requires-python = \">= 3.8\"``, или ``version = \"1.0\"``."

#: ../source/guides/writing-pyproject-toml.rst:71
msgid ""
"However, in some cases, it is useful to let your build backend compute the "
"metadata for you. For example: many build backends can read the version from "
"a ``__version__`` attribute in your code, a Git tag, or similar. In such "
"cases, you should mark the field as dynamic using, e.g.,"
msgstr ""
"Однако в некоторых случаях полезно позволить бэкенду сборки вычислять "
"метаданные за вас. Например, многие сборки могут считывать версию из "
"атрибута ``__version__`` в вашем коде, тега Git или чего-то подобного. В "
"таких случаях вам следует пометить поле как динамическое, например, с "
"помощью,"

#: ../source/guides/writing-pyproject-toml.rst:82
msgid ""
"When a field is dynamic, it is the build backend's responsibility to fill "
"it.  Consult your build backend's documentation to learn how it does it."
msgstr ""
"Если поле динамическое, его заполнение возлагается на бэкенд сборки.  "
"Обратитесь к документации вашего бэкенда сборки, чтобы узнать, как он это "
"делает."

#: ../source/guides/writing-pyproject-toml.rst:88
msgid "Basic information"
msgstr "Базовая информация"

#: ../source/guides/writing-pyproject-toml.rst:93
#: ../source/specifications/pyproject-toml.rst:120
#: ../source/specifications/pyproject-toml.rst:145
#: ../source/specifications/pyproject-toml.rst:157
msgid "``name``"
msgstr "``name``"

#: ../source/guides/writing-pyproject-toml.rst:95
msgid ""
"Put the name of your project on PyPI. This field is required and is the only "
"field that cannot be marked as dynamic."
msgstr ""
"Укажите название вашего проекта на PyPI. Это поле обязательно для заполнения "
"и является единственным полем, которое не может быть помечено как "
"динамическое."

#: ../source/guides/writing-pyproject-toml.rst:103
msgid ""
"The project name must consist of ASCII letters, digits, underscores "
"\"``_``\", hyphens \"``-``\" and periods \"``.``\". It must not start or end "
"with an underscore, hyphen or period."
msgstr ""
"Имя проекта должно состоять из букв ASCII, цифр, знаков подчеркивания "
"\"``_``\", дефисов \"``-``\" и точек \"``.``\". Оно не должно начинаться или "
"заканчиваться подчеркиванием, дефисом или точкой."

#: ../source/guides/writing-pyproject-toml.rst:107
msgid ""
"Comparison of project names is case insensitive and treats arbitrarily long "
"runs of underscores, hyphens, and/or periods as equal.  For example, if you "
"register a project named ``cool-stuff``, users will be able to download it "
"or declare a dependency on it using any of the following spellings: ``Cool-"
"Stuff``, ``cool.stuff``, ``COOL_STUFF``, ``CoOl__-.-__sTuFF``."
msgstr ""
"Сравнение имен проектов не зависит от регистра и рассматривает произвольно "
"длинные символы подчеркивания, дефиса и/или точки как одинаковые.  Например, "
"если вы зарегистрируете проект с именем ``cool-stuff``, пользователи смогут "
"загрузить его или объявить зависимость от него, используя любое из следующих "
"написаний: ``Cool-Stuff``, ``cool.stuff``, ``COOL_STUFF``, ``CoOl__-.-"
"__sTuFF``."

#: ../source/guides/writing-pyproject-toml.rst:115
#: ../source/specifications/pyproject-toml.rst:125
#: ../source/specifications/pyproject-toml.rst:151
#: ../source/specifications/pyproject-toml.rst:172
msgid "``version``"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:117
msgid "Put the version of your project."
msgstr "Положите версию вашего проекта."

#: ../source/guides/writing-pyproject-toml.rst:124
msgid ""
"Some more complicated version specifiers like ``2020.0.0a1`` (for an alpha "
"release) are possible; see the :ref:`specification <version-specifiers>` for "
"full details."
msgstr ""
"Возможны и более сложные спецификации версий, например ``2020.0.0a1`` (для "
"альфа-версии); подробности см. в :ref:`specification <version-specifiers>`."

#: ../source/guides/writing-pyproject-toml.rst:128
msgid "This field is required, although it is often marked as dynamic using"
msgstr ""
"Это поле является обязательным, хотя часто его помечают как динамическое с "
"помощью"

#: ../source/guides/writing-pyproject-toml.rst:135
msgid ""
"This allows use cases such as filling the version from a ``__version__`` "
"attribute or a Git tag. Consult the :ref:`single-source-version` discussion "
"for more details."
msgstr ""
"Это позволяет использовать такие случаи, как заполнение версии из атрибута "
"``__version__`` или тега Git. За более подробной информацией обратитесь к "
"обсуждению :ref:`single-source-version`."

#: ../source/guides/writing-pyproject-toml.rst:141
msgid "Dependencies and requirements"
msgstr "Зависимости и требования"

#: ../source/guides/writing-pyproject-toml.rst:144
#: ../source/specifications/pyproject-toml.rst:451
msgid "``dependencies``/``optional-dependencies``"
msgstr "``зависимости``/``опциональные-зависимости``"

#: ../source/guides/writing-pyproject-toml.rst:146
msgid "If your project has dependencies, list them like this:"
msgstr ""
"Если у вашего проекта есть зависимости, перечислите их следующим образом:"

#: ../source/guides/writing-pyproject-toml.rst:158
msgid ""
"See :ref:`Dependency specifiers <dependency-specifiers>` for the full syntax "
"you can use to constrain versions."
msgstr ""
"Полный синтаксис, который можно использовать для ограничения версий, см. в :"
"ref:`Спецификаторы зависимости <dependency-specifiers>`."

#: ../source/guides/writing-pyproject-toml.rst:161
msgid ""
"You may want to make some of your dependencies optional, if they are only "
"needed for a specific feature of your package. In that case, put them in "
"``optional-dependencies``."
msgstr ""
"Вы можете сделать некоторые из ваших зависимостей необязательными, если они "
"необходимы только для определенной функции вашего пакета. В этом случае "
"поместите их в `` по выбору-зависимости``."

#: ../source/guides/writing-pyproject-toml.rst:174
msgid ""
"Each of the keys defines a \"packaging extra\". In the example above, one "
"could use, e.g., ``pip install your-project-name[gui]`` to install your "
"project with GUI support, adding the PyQt5 dependency."
msgstr ""
"Каждый из ключей определяет \"дополнительную упаковку\". В примере выше "
"можно использовать, например, ``pip install your-project-name[gui]`` для "
"установки проекта с поддержкой графического интерфейса, добавив зависимость "
"PyQt5."

#: ../source/guides/writing-pyproject-toml.rst:183
#: ../source/specifications/pylock-toml.rst:95
#: ../source/specifications/pyproject-toml.rst:148
#: ../source/specifications/pyproject-toml.rst:241
msgid "``requires-python``"
msgstr "``требуется-python``"

#: ../source/guides/writing-pyproject-toml.rst:185
msgid ""
"This lets you declare the minimum version of Python that you support "
"[#requires-python-upper-bounds]_."
msgstr ""
"Это позволяет объявить минимальную версию Python, которую вы поддерживаете "
"[#requires-python-upper-bounds]_."

#: ../source/guides/writing-pyproject-toml.rst:197
msgid "Creating executable scripts"
msgstr "Создание исполняемых скриптов"

#: ../source/guides/writing-pyproject-toml.rst:199
msgid ""
"To install a command as part of your package, declare it in the ``[project."
"scripts]`` table."
msgstr ""
"Чтобы установить команду как часть вашего пакета, объявите ее в таблице "
"``[project.scripts]``."

#: ../source/guides/writing-pyproject-toml.rst:207
msgid ""
"In this example, after installing your project, a ``spam-cli`` command will "
"be available. Executing this command will do the equivalent of ``import sys; "
"from spam import main_cli; sys.exit(main_cli())``."
msgstr ""
"В этом примере после установки вашего проекта будет доступна команда ``spam-"
"li``. Выполнение этой команды эквивалентно выполнению команды ``import sys; "
"from spam import main_cli; sys.exit(main_cli())``."

#: ../source/guides/writing-pyproject-toml.rst:211
msgid ""
"On Windows, scripts packaged this way need a terminal, so if you launch them "
"from within a graphical application, they will make a terminal pop up. To "
"prevent this from happening, use the ``[project.gui-scripts]`` table instead "
"of ``[project.scripts]``."
msgstr ""
"В Windows скрипты, упакованные таким образом, нуждаются в терминале, поэтому "
"если вы запустите их из графического приложения, они вызовут всплывающий "
"терминал. Чтобы этого не происходило, используйте таблицу ``[project.gui-"
"scripts]`` вместо ``[project.scripts]``."

#: ../source/guides/writing-pyproject-toml.rst:221
msgid ""
"In that case, launching your script from the command line will give back "
"control immediately, leaving the script to run in the background."
msgstr ""
"В этом случае запуск скрипта из командной строки сразу же вернет управление, "
"оставив скрипт работать в фоновом режиме."

#: ../source/guides/writing-pyproject-toml.rst:224
msgid ""
"The difference between ``[project.scripts]`` and ``[project.gui-scripts]`` "
"is only relevant on Windows."
msgstr ""
"Разница между ``[project.scripts]`` и ``[project.gui-scripts]`` актуальна "
"только для Windows."

#: ../source/guides/writing-pyproject-toml.rst:230
msgid "About your project"
msgstr "О вашем проекте"

#: ../source/guides/writing-pyproject-toml.rst:233
#: ../source/specifications/pyproject-toml.rst:328
msgid "``authors``/``maintainers``"
msgstr "``авторы``/ ``майнтейнеры``"

#: ../source/guides/writing-pyproject-toml.rst:235
msgid ""
"Both of these fields contain lists of people identified by a name and/or an "
"email address."
msgstr ""
"Оба эти поля содержат списки людей, идентифицированных по имени и/или адресу "
"электронной почты."

#: ../source/guides/writing-pyproject-toml.rst:255
#: ../source/specifications/pyproject-toml.rst:135
#: ../source/specifications/pyproject-toml.rst:187
msgid "``description``"
msgstr "``description``"

#: ../source/guides/writing-pyproject-toml.rst:257
msgid ""
"This should be a one-line description of your project, to show as the "
"\"headline\" of your project page on PyPI (`example <pypi-pip_>`_), and "
"other places such as lists of search results (`example <pypi-search-pip_>`_)."
msgstr ""
"Это должно быть однострочное описание вашего проекта, которое будет "
"отображаться в качестве \"заголовка\" страницы вашего проекта на PyPI "
"(`пример <pypi-pip_>`_), а также в других местах, таких как списки "
"результатов поиска (`пример <pypi-search-pip_>`_)."

#: ../source/guides/writing-pyproject-toml.rst:268
#: ../source/specifications/pyproject-toml.rst:147
#: ../source/specifications/pyproject-toml.rst:200
msgid "``readme``"
msgstr "``readme``"

#: ../source/guides/writing-pyproject-toml.rst:270
msgid ""
"This is a longer description of your project, to display on your project "
"page on PyPI. Typically, your project will have a ``README.md`` or ``README."
"rst`` file and you just put its file name here."
msgstr ""
"Это более длинное описание вашего проекта, которое будет отображаться на "
"странице вашего проекта на PyPI. Обычно у вашего проекта есть файл ``README."
"md`` или ``README.rst``, и вы просто помещаете его имя сюда."

#: ../source/guides/writing-pyproject-toml.rst:279
msgid "The README's format is auto-detected from the extension:"
msgstr "Формат README определяется автоматически по расширению:"

#: ../source/guides/writing-pyproject-toml.rst:281
msgid "``README.md`` → `GitHub-flavored Markdown <gfm_>`_,"
msgstr "``README.md`` → `GitHub-flavored Markdown <gfm_>`_,"

#: ../source/guides/writing-pyproject-toml.rst:282
msgid ""
"``README.rst`` → `reStructuredText <rest_>`_ (without Sphinx extensions)."
msgstr "``README.rst`` → ``reStructuredText <rest_>`_ (без расширений Sphinx)."

#: ../source/guides/writing-pyproject-toml.rst:284
msgid "You can also specify the format explicitly, like this:"
msgstr "Вы также можете указать формат в явном виде, например, так:"

#: ../source/guides/writing-pyproject-toml.rst:297
#, fuzzy
#| msgid "``license-files``"
msgid "``license`` and ``license-files``"
msgstr "``лицензионные файлы``"

#: ../source/guides/writing-pyproject-toml.rst:299
msgid "As per :pep:`639` licenses should be declared with two fields:"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:301
#, fuzzy
#| msgid ""
#| "This is a valid :term:`SPDX license expression <License Expression>` "
#| "consisting of one or more :term:`license identifiers <License "
#| "Identifier>`. The full license list is available at the `SPDX license "
#| "list page <spdxlicenselist_>`_. The supported list version is 3.17 or any "
#| "later compatible one."
msgid ""
"``license`` is an :term:`SPDX license expression <License Expression>` "
"consisting of one or more :term:`license identifiers <License Identifier>`."
msgstr ""
"Это действительное выражение лицензии :term:`SPDX <License Expression>`, "
"состоящее из одного или нескольких :term:`license identifiers <License "
"Identifier>`. Полный список лицензий доступен на странице `списка лицензий "
"SPDX <spdxlicenselist_>`_. Поддерживаемая версия списка - 3.17 или любая "
"более поздняя совместимая."

#: ../source/guides/writing-pyproject-toml.rst:303
msgid "``license-files`` is a list of license file glob patterns."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:305
msgid ""
"A previous PEP had specified ``license`` to be a table with a ``file`` or a "
"``text`` key, this format is now deprecated. Most :term:`build "
"backends<build backend>` now support the new format as shown in the "
"following table."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:309
msgid "build backend versions that introduced :pep:`639` support"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:312
#, fuzzy
#| msgid "hatch"
msgid "hatchling"
msgstr "hatch"

#: ../source/guides/writing-pyproject-toml.rst:313
#, fuzzy
#| msgid "Setuptools"
msgid "setuptools"
msgstr "Инструменты настройки"

#: ../source/guides/writing-pyproject-toml.rst:314
msgid "flit-core [#flit-core-pep639]_"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:315
#, fuzzy
#| msgid "Build backends"
msgid "pdm-backend"
msgstr "Создание бэкендов"

#: ../source/guides/writing-pyproject-toml.rst:316
#, fuzzy
#| msgid "poetry"
msgid "poetry-core"
msgstr "поэзия"

#: ../source/guides/writing-pyproject-toml.rst:317
#, fuzzy
#| msgid "build"
msgid "uv-build"
msgstr "построить"

#: ../source/guides/writing-pyproject-toml.rst:318
msgid "1.27.0"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:319
msgid "77.0.3"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:320
msgid "3.12"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:321
msgid "2.4.0"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:322
msgid "2.2.0"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:323
msgid "0.7.19"
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:329
#: ../source/specifications/pyproject-toml.rst:142
#: ../source/specifications/pyproject-toml.rst:253
msgid "``license``"
msgstr "``лицензия``"

#: ../source/guides/writing-pyproject-toml.rst:331
#, fuzzy
#| msgid ""
#| "This is a valid :term:`SPDX license expression <License Expression>` "
#| "consisting of one or more :term:`license identifiers <License "
#| "Identifier>`. The full license list is available at the `SPDX license "
#| "list page <spdxlicenselist_>`_. The supported list version is 3.17 or any "
#| "later compatible one."
msgid ""
"The new format for ``license`` is a valid :term:`SPDX license expression "
"<License Expression>` consisting of one or more :term:`license identifiers "
"<License Identifier>`. The full license list is available at the `SPDX "
"license list page <spdxlicenselist_>`_. The supported list version is 3.17 "
"or any later compatible one."
msgstr ""
"Это действительное выражение лицензии :term:`SPDX <License Expression>`, "
"состоящее из одного или нескольких :term:`license identifiers <License "
"Identifier>`. Полный список лицензий доступен на странице `списка лицензий "
"SPDX <spdxlicenselist_>`_. Поддерживаемая версия списка - 3.17 или любая "
"более поздняя совместимая."

#: ../source/guides/writing-pyproject-toml.rst:344
msgid ""
"If you get a build error that ``license`` should be a dict/table, your build "
"backend doesn't yet support the new format. See the `above section <license-"
"and-license-files_>`_ for more context. The now deprecated format is "
"`described in PEP 621 <https://peps.python.org/pep-0621/#license>`__."
msgstr ""

#: ../source/guides/writing-pyproject-toml.rst:349
msgid ""
"As a general rule, it is a good idea to use a standard, well-known license, "
"both to avoid confusion and because some organizations avoid software whose "
"license is unapproved."
msgstr ""
"Как правило, лучше использовать стандартную, хорошо известную лицензию, как "
"для того, чтобы избежать путаницы, так и потому, что некоторые организации "
"избегают программ, лицензия которых не утверждена."

#: ../source/guides/writing-pyproject-toml.rst:353
msgid ""
"If your project is licensed with a license that doesn't have an existing "
"SPDX identifier, you can create a custom one in format ``LicenseRef-"
"[idstring]``. The custom identifiers must follow the SPDX specification, "
"`clause 10.1 <spdxcustomids_>`_ of the version 2.2 or any later compatible "
"one."
msgstr ""
"Если ваш проект лицензирован по лицензии, для которой не существует "
"идентификатора SPDX, вы можете создать собственный идентификатор в формате "
"``LicenseRef-[idstring]``. Пользовательские идентификаторы должны "
"соответствовать спецификации SPDX, `пункт 10.1 <spdxcustomids_>`_ версии 2.2 "
"или любой более поздней совместимой."

#: ../source/guides/writing-pyproject-toml.rst:367
#: ../source/specifications/pyproject-toml.rst:143
#: ../source/specifications/pyproject-toml.rst:289
msgid "``license-files``"
msgstr "``лицензионные файлы``"

#: ../source/guides/writing-pyproject-toml.rst:369
msgid ""
"This is a list of license files and files containing other legal information "
"you want to distribute with your package."
msgstr ""
"Это список лицензионных файлов и файлов, содержащих другую юридическую "
"информацию, которую вы хотите распространить вместе с пакетом."

#: ../source/guides/writing-pyproject-toml.rst:377
msgid "The glob patterns must follow the specification:"
msgstr "Шаблоны glob должны соответствовать спецификации:"

#: ../source/guides/writing-pyproject-toml.rst:379
msgid ""
"Alphanumeric characters, underscores (``_``), hyphens (``-``) and dots (``."
"``) will be matched verbatim."
msgstr ""
"Буквенно-цифровые символы, знаки подчеркивания (``_``), дефисы (``-``) и "
"точки (``.``) будут соответствовать дословно."

#: ../source/guides/writing-pyproject-toml.rst:381
msgid ""
"Special characters: ``*``, ``?``, ``**`` and character ranges: [] are "
"supported."
msgstr ""
"Специальные символы: ``*``, ``?``, ``**`` и диапазоны символов: [] "
"поддерживаются."

#: ../source/guides/writing-pyproject-toml.rst:382
msgid "Path delimiters must be the forward slash character (``/``)."
msgstr "Разделителями путей должны быть символы прямой косой черты (``/``)."

#: ../source/guides/writing-pyproject-toml.rst:383
msgid ""
"Patterns are relative to the directory containing :file:`pyproject.toml`, "
"and thus may not start with a slash character."
msgstr ""
"Шаблоны являются относительными к директории, содержащей :file:`pyproject."
"toml`, и поэтому не могут начинаться с символа слэша."

#: ../source/guides/writing-pyproject-toml.rst:385
msgid "Parent directory indicators (``..``) must not be used."
msgstr "Индикаторы родительских каталогов (``..``) не должны использоваться."

#: ../source/guides/writing-pyproject-toml.rst:386
msgid "Each glob must match at least one file."
msgstr "Каждый glob должен соответствовать хотя бы одному файлу."

#: ../source/guides/writing-pyproject-toml.rst:388
msgid ""
"Literal paths are valid globs. Any characters or character sequences not "
"covered by this specification are invalid."
msgstr ""
"Буквальные пути являются допустимыми глобусами. Любые символы или "
"последовательности символов, не предусмотренные данной спецификацией, "
"являются недопустимыми."

#: ../source/guides/writing-pyproject-toml.rst:394
#: ../source/specifications/pyproject-toml.rst:141
#: ../source/specifications/pyproject-toml.rst:372
msgid "``keywords``"
msgstr "``ключевые слова``"

#: ../source/guides/writing-pyproject-toml.rst:396
msgid ""
"This will help PyPI's search box to suggest your project when people search "
"for these keywords."
msgstr ""
"Это поможет поисковой строке PyPI предлагать ваш проект при поиске по этим "
"ключевым словам."

#: ../source/guides/writing-pyproject-toml.rst:408
#: ../source/specifications/pyproject-toml.rst:133
#: ../source/specifications/pyproject-toml.rst:384
msgid "``classifiers``"
msgstr "`` классификаторы ``"

#: ../source/guides/writing-pyproject-toml.rst:410
msgid ""
"A list of PyPI classifiers that apply to your project. Check the `full list "
"of possibilities <classifier-list_>`_."
msgstr ""
"Список классификаторов PyPI, которые применимы к вашему проекту. Проверьте "
"`полный список возможностей <classifier-list_>`_."

#: ../source/guides/writing-pyproject-toml.rst:434
msgid ""
"Although the list of classifiers is often used to declare what Python "
"versions a project supports, this information is only used for searching and "
"browsing projects on PyPI, not for installing projects. To actually restrict "
"what Python versions a project can be installed on, use the :ref:`requires-"
"python` argument."
msgstr ""
"Хотя список классификаторов часто используется для объявления того, какие "
"версии Python поддерживает проект, эта информация используется только для "
"поиска и просмотра проектов на PyPI, но не для установки проектов. Чтобы "
"действительно ограничить, на каких версиях Python может быть установлен "
"проект, используйте аргумент :ref:`requires-python`."

#: ../source/guides/writing-pyproject-toml.rst:439
msgid ""
"To prevent a package from being uploaded to PyPI, use the special "
"``Private :: Do Not Upload`` classifier. PyPI will always reject packages "
"with classifiers beginning with ``Private ::``."
msgstr ""
"Чтобы предотвратить загрузку пакета в PyPI, используйте специальный "
"классификатор ``Private :: Do Not Upload``. PyPI всегда будет отклонять "
"пакеты с классификаторами, начинающимися с ``Private ::``."

#: ../source/guides/writing-pyproject-toml.rst:446
#: ../source/specifications/pyproject-toml.rst:150
#: ../source/specifications/pyproject-toml.rst:402
msgid "``urls``"
msgstr "``urls``"

#: ../source/guides/writing-pyproject-toml.rst:448
msgid ""
"A list of URLs associated with your project, displayed on the left sidebar "
"of your PyPI project page."
msgstr ""
"Список URL-адресов, связанных с вашим проектом, отображаемый на левой "
"боковой панели страницы проекта PyPI."

#: ../source/guides/writing-pyproject-toml.rst:453
msgid ""
"See :ref:`well-known-labels` for a listing of labels that PyPI and other "
"packaging tools are specifically aware of, and `PyPI's project metadata docs "
"<https://docs.pypi.org/project_metadata/#project-urls>`_ for PyPI-specific "
"URL processing."
msgstr ""
"См. :ref:`well-known-labels` для списка меток, о которых PyPI и другие "
"инструменты упаковки знают, и `PyPI's project metadata docs <https://docs."
"pypi.org/project_metadata/#project-urls>`_ для обработки URL, специфичных "
"для PyPI."

#: ../source/guides/writing-pyproject-toml.rst:467
msgid ""
"Note that if the label contains spaces, it needs to be quoted, e.g., "
"``Website = \"https://example.com\"`` but ``\"Official Website\" = \"https://"
"example.com\"``."
msgstr ""
"Обратите внимание, что если метка содержит пробелы, ее нужно заключить в "
"кавычки, например, ``Website = «https://example.com»``, но ``«Официальный "
"сайт» = «https://example.com»``."

#: ../source/guides/writing-pyproject-toml.rst:471
msgid ""
"Users are advised to use :ref:`well-known-labels` for their project URLs "
"where appropriate, since consumers of metadata (like package indices) can "
"specialize their presentation."
msgstr ""
"Пользователям рекомендуется использовать :ref:`well-known-labels` для URL-"
"адресов своих проектов, где это уместно, поскольку потребители метаданных "
"(например, индексов пакетов) могут специализировать их представление."

#: ../source/guides/writing-pyproject-toml.rst:475
msgid ""
"For example in the following metadata, neither ``MyHomepage`` nor "
"``\"Download Link\"`` is a well-known label, so they will be rendered "
"verbatim:"
msgstr ""
"Например, в следующих метаданных ни ``MyHomepage``, ни ``«Download Link»`` "
"не являются известными метками, поэтому они будут отображены дословно:"

#: ../source/guides/writing-pyproject-toml.rst:485
msgid ""
"Whereas in this metadata ``HomePage`` and ``DOWNLOAD`` both have well-known "
"equivalents (``homepage`` and ``download``), and can be presented with those "
"semantics in mind (the project's home page and its external download "
"location, respectively)."
msgstr ""
"В то время как в этих метаданных ``HomePage`` и ``DOWNLOAD`` имеют "
"общеизвестные эквиваленты (``homepage`` и ``download``), и могут быть "
"представлены с учетом этой семантики (домашняя страница проекта и его "
"внешнее место загрузки, соответственно)."

#: ../source/guides/writing-pyproject-toml.rst:497
msgid "Advanced plugins"
msgstr "Расширенные плагины"

#: ../source/guides/writing-pyproject-toml.rst:499
msgid ""
"Some packages can be extended through plugins. Examples include Pytest_ and "
"Pygments_. To create such a plugin, you need to declare it in a subtable of "
"``[project.entry-points]`` like this:"
msgstr ""
"Некоторые пакеты могут быть расширены с помощью плагинов. В качестве примера "
"можно привести Pytest_ и Pygments_. Чтобы создать такой плагин, нужно "
"объявить его в подтаблице ``[project.entry-points]`` следующим образом:"

#: ../source/guides/writing-pyproject-toml.rst:508
msgid "See the :ref:`Plugin guide <plugin-entry-points>` for more information."
msgstr ""
"Дополнительную информацию см. в :ref:`Руководство по плагинам <plugin-entry-"
"points>`."

#: ../source/guides/writing-pyproject-toml.rst:513
msgid "A full example"
msgstr "Полный пример"

#: ../source/guides/writing-pyproject-toml.rst:576
msgid ""
"Think twice before applying an upper bound like ``requires-python = \"<= "
"3.10\"`` here. `This blog post <requires-python-blog-post_>`_ contains some "
"information regarding possible problems."
msgstr ""
"Подумайте дважды, прежде чем применять здесь верхнюю границу вроде "
"``requires-python = \"<= 3.10\"``. ``Эта запись в блоге <requires-python-"
"blog-post_>`` содержит некоторую информацию о возможных проблемах."

#: ../source/guides/writing-pyproject-toml.rst:580
msgid ""
"flit-core `does not yet <flit-issue-735_>`_ support WITH in SPDX license "
"expressions."
msgstr ""

#: ../source/index.rst:-1
msgid ""
"The Python Packaging User Guide (PyPUG) is a collection of tutorials and "
"guides for packaging Python software."
msgstr ""
"Руководство пользователя по упаковке Python (PyPUG) - это коллекция "
"учебников и руководств по упаковке программ на Python."

#: ../source/index.rst:-1
msgid "python, packaging, guide, tutorial"
msgstr "python, упаковка, руководство, учебник"

#: ../source/index.rst:3 ../source/key_projects.rst:247
msgid "Python Packaging User Guide"
msgstr "Руководство пользователя по созданию Python’ьих пакетов"

#: ../source/index.rst:25
msgid ""
"Welcome to the *Python Packaging User Guide*, a collection of tutorials and "
"references to help you distribute and install Python packages with modern "
"tools."
msgstr ""
"Добро пожаловать в *Руководство пользователя по упаковке Python*, коллекцию "
"руководств и ссылок, которые помогут вам распространять и устанавливать "
"пакеты Python с помощью современных инструментов."

#: ../source/index.rst:29
msgid ""
"This guide is maintained on `GitHub`_ by the :doc:`Python Packaging "
"Authority <pypa:index>`. We happily accept :doc:`contributions and feedback "
"<contribute>`. 😊"
msgstr ""
"Это руководство поддерживается на `GitHub`_ силами :doc:`Python Packaging "
"Authority <pypa:index>`. Мы с радостью принимаем :doc:`дополнения и отзывы "
"<contribute>`. 😊"

#: ../source/index.rst:36
msgid "Overview and Flow"
msgstr "Обзор и поток"

#: ../source/index.rst:40
msgid ""
"Building your understanding of Python packaging is a journey. Patience and "
"continuous improvement are key to success. The overview and flow sections "
"provide a starting point for understanding the Python packaging ecosystem."
msgstr ""
"Понимание упаковки Python - это путешествие. Терпение и постоянное "
"совершенствование - ключ к успеху. Разделы \"Обзор\" и \"Поток\" служат "
"отправной точкой для понимания экосистемы упаковки Python."

#: ../source/index.rst:44
msgid ""
"The :doc:`overview` explains Python packaging and its use when preparing and "
"distributing projects. This section helps you build understanding about "
"selecting the tools and processes that are most suitable for your use case. "
"It includes what packaging is, the problems that it solves, and key "
"considerations."
msgstr ""
"В :doc:`обзор` рассказывается об упаковке Python и ее использовании при "
"подготовке и распространении проектов. Этот раздел поможет вам понять, как "
"выбрать инструменты и процессы, наиболее подходящие для вашего случая "
"использования. В нем рассказывается о том, что такое упаковка, какие "
"проблемы она решает, а также о ключевых моментах."

#: ../source/index.rst:51
msgid ""
"To get an overview of the workflow used to publish your code, see :doc:"
"`packaging flow <flow>`."
msgstr ""
"Чтобы получить представление о рабочем процессе, используемом для публикации "
"вашего кода, смотрите :doc:`packaging flow <flow>`."

#: ../source/index.rst:57
msgid ""
"Tutorials walk through the steps needed to complete a project for the first "
"time. Tutorials aim to help you succeed and provide a starting point for "
"future exploration. The :doc:`tutorials/index` section includes:"
msgstr ""
"Учебники рассказывают о шагах, необходимых для выполнения проекта в первый "
"раз. Учебники призваны помочь вам добиться успеха и стать отправной точкой "
"для дальнейших исследований. Раздел :doc:`tutorials/index` включает:"

#: ../source/index.rst:62
msgid ""
"A :doc:`tutorial on installing packages <tutorials/installing-packages>`"
msgstr "A :doc:`учебник по установке пакетов <tutorials/installing-packages>`"

#: ../source/index.rst:63
msgid ""
"A :doc:`tutorial on managing application dependencies <tutorials/managing-"
"dependencies>` in a version controlled project"
msgstr ""
"Учебник по управлению зависимостями приложений <tutorials/managing-"
"dependencies>` в проекте с контролем версий"

#: ../source/index.rst:65
msgid ""
"A :doc:`tutorial on packaging and distributing <tutorials/packaging-"
"projects>` your project"
msgstr ""
"Учебник по упаковке и распространению <tutorials/packaging-projects> вашего "
"проекта"

#: ../source/index.rst:71
msgid ""
"Guides provide steps to perform a specific task. Guides are more focused on "
"users who are already familiar with Python packaging and are looking for "
"specific information."
msgstr ""
"Руководства содержат шаги по выполнению конкретной задачи. Руководства в "
"большей степени ориентированы на пользователей, которые уже знакомы с "
"упаковкой Python и ищут конкретную информацию."

#: ../source/index.rst:75
msgid ""
"The :doc:`guides/index` section provides \"how to\" instructions in three "
"major areas: package installation; building and distributing packages; "
"miscellaneous topics."
msgstr ""
"Раздел :doc:`guides/index` содержит инструкции \"как делать\" в трех "
"основных областях: установка пакетов; сборка и распространение пакетов; "
"различные темы."

#: ../source/index.rst:80
msgid "Explanations and Discussions"
msgstr "Объяснения и обсуждения"

#: ../source/index.rst:82
#, fuzzy
#| msgid ""
#| "The :doc:`discussions/index` section for in-depth explanations and "
#| "discussion about topics, such as:"
msgid ""
"The :doc:`discussions/index` section provides in-depth explanations and "
"discussion about topics, such as:"
msgstr ""
"Раздел :doc:`discussions/index` для подробного объяснения и обсуждения таких "
"тем, как:"

#: ../source/index.rst:85
msgid ":doc:`discussions/deploying-python-applications`"
msgstr ":doc:`обсуждения/развертывание-python-приложений`"

#: ../source/index.rst:86
msgid ":doc:`discussions/pip-vs-easy-install`"
msgstr ": документ:`обсуждения/pip-vs-easy-install`"

#: ../source/index.rst:89
msgid "Reference"
msgstr "Ссылка"

#: ../source/index.rst:91
msgid ""
"The :doc:`specifications/index` section for packaging interoperability "
"specifications."
msgstr ""
"Раздел :doc:`specifications/index` для спецификаций совместимости упаковки."

#: ../source/index.rst:92
msgid ""
"The list of :doc:`other projects <key_projects>` maintained by members of "
"the Python Packaging Authority."
msgstr ""
"Список :doc:`других проектов <key_projects>`, поддерживаемых членами Python "
"Packaging Authority."

#: ../source/index.rst:93
msgid "The :doc:`glossary` for definitions of terms used in Python packaging."
msgstr ""
"В :doc:`глоссарии` содержатся определения терминов, используемых в упаковке "
"Python."

#: ../source/key_projects.rst:6
msgid "Project Summaries"
msgstr "Обзор проектов"

#: ../source/key_projects.rst:8
msgid ""
"Summaries and links for the most relevant projects in the space of Python "
"installation and packaging."
msgstr ""
"Краткие обзоры и ссылки на самые актуальные проекты в области установки и "
"упаковки Python."

#: ../source/key_projects.rst:14
msgid "PyPA Projects"
msgstr "Проекты PyPA"

#: ../source/key_projects.rst:19
msgid "bandersnatch"
msgstr "bandersnatch"

#: ../source/key_projects.rst:21
msgid ""
"`Docs <https://bandersnatch.readthedocs.io>`__ | `Issues <https://github.com/"
"pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/"
"bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"
msgstr ""
"`Документы <https://bandersnatch.readthedocs.io>`__ | `Выпуски <https://"
"github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/"
"bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"

#: ../source/key_projects.rst:26
msgid ""
"``bandersnatch`` is a PyPI mirroring client designed to efficiently create a "
"complete mirror of the contents of PyPI. Organizations thus save bandwidth "
"and latency on package downloads (especially in the context of automated "
"tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN). "
"Files can be served from a local directory or `AWS S3`_."
msgstr ""
"``bandersnatch`` - это клиент зеркалирования PyPI, предназначенный для "
"эффективного создания полного зеркала содержимого PyPI. Таким образом, "
"организации экономят пропускную способность и задержки при загрузке пакетов "
"(особенно в контексте автоматизированных тестов), а также предотвращают "
"сильную загрузку сети доставки контента PyPI (CDN). Файлы могут "
"обслуживаться из локальной директории или из `AWS S3`_."

#: ../source/key_projects.rst:37
msgid "build"
msgstr "построить"

#: ../source/key_projects.rst:39
msgid ""
":any:`Docs <build:index>` | `Issues <https://github.com/pypa/build/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/build>`__"
msgstr ""
":any:`Docs <build:index>` | `Проблемы <https://github.com/pypa/build/"
"issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://"
"pypi.org/project/build>`__"

#: ../source/key_projects.rst:44
msgid ""
"``build`` is a :pep:`517` compatible Python package builder. It provides a "
"CLI to build packages, as well as a Python API."
msgstr ""
"``build`` - это совместимый с :pep:`517` сборщик пакетов на Python. Он "
"предоставляет CLI для создания пакетов, а также Python API."

#: ../source/key_projects.rst:51
msgid "cibuildwheel"
msgstr "cibuildwheel"

#: ../source/key_projects.rst:53
msgid ""
"`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github."
"com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | "
"`Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | "
"`Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""
"`Документы <https://cibuildwheel.readthedocs.io/>`__ | `Проблемы <https://"
"github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/"
"cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | "
"`Обсуждения <https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord "
"#cibuildwheel <https://discord.com/invite/pypa>`__"

#: ../source/key_projects.rst:60
msgid ""
"``cibuildwheel`` is a Python package that builds :term:`wheels <Wheel>` for "
"all common platforms and Python versions on most CI systems. Also see :ref:"
"`multibuild`."
msgstr ""
"``cibuildwheel`` - это Python-пакет, который собирает :term:`колеса <Wheel>` "
"для всех распространенных платформ и версий Python на большинстве CI-систем. "
"Также смотрите :ref:`multibuild`."

#: ../source/key_projects.rst:66
msgid "distlib"
msgstr "distlib"

#: ../source/key_projects.rst:68
msgid ""
":doc:`Docs <distlib:index>` | `Issues <https://github.com/pypa/distlib/"
"issues>`__ | `GitHub <https://github.com/pypa/distlib>`__ | `PyPI <https://"
"pypi.org/project/distlib>`__"
msgstr ""
":doc:`Документы <distlib:index>` | `Проблемы <https://github.com/pypa/"
"distlib/issues>`__ | `GitHub <https://github.com/pypa/distlib>`__ | `PyPI "
"<https://pypi.org/project/distlib>`__"

#: ../source/key_projects.rst:73
msgid ""
"``distlib`` is a library which implements low-level functions that relate to "
"packaging and distribution of Python software.  ``distlib`` implements "
"several relevant PEPs (Python Enhancement Proposal standards) and is useful "
"for developers of third-party packaging tools to make and upload binary and "
"source :term:`distributions <Distribution Package>`, achieve "
"interoperability, resolve dependencies, manage package resources, and do "
"other similar functions."
msgstr ""
"``distlib`` - это библиотека, реализующая низкоуровневые функции, связанные "
"с упаковкой и распространением программ на Python.  ``distlib`` реализует "
"несколько соответствующих PEP (стандарты Python Enhancement Proposal) и "
"полезна разработчикам сторонних средств упаковки для создания и загрузки "
"бинарных и исходных :term:`distributions <Distribution Package>`, достижения "
"совместимости, разрешения зависимостей, управления ресурсами пакета и "
"выполнения других подобных функций."

#: ../source/key_projects.rst:82
msgid ""
"Unlike the stricter :ref:`packaging` project (below), which specifically "
"implements modern Python packaging interoperability standards, ``distlib`` "
"also attempts to provide reasonable fallback behaviours when asked to handle "
"legacy packages and metadata that predate the modern interoperability "
"standards and fall into the subset of packages that are incompatible with "
"those standards."
msgstr ""
"В отличие от более строгого проекта :ref:`packaging` (см. ниже), который "
"специально реализует современные стандарты совместимости упаковки Python, "
"``distlib`` также пытается обеспечить разумное обратное поведение, когда "
"требуется работать со старыми пакетами и метаданными, которые появились до "
"современных стандартов совместимости и попадают в подмножество пакетов, "
"несовместимых с этими стандартами."

#: ../source/key_projects.rst:93
msgid "distutils"
msgstr "distutils"

#: ../source/key_projects.rst:95
msgid ""
"The original Python packaging system, added to the standard library in "
"Python 2.0 and removed in 3.12."
msgstr ""
"Оригинальная система упаковки Python, добавленная в стандартную библиотеку в "
"Python 2.0 и удаленная в 3.12."

#: ../source/key_projects.rst:98
msgid ""
"Due to the challenges of maintaining a packaging system where feature "
"updates are tightly coupled to language runtime updates, direct usage of :"
"ref:`distutils` has been actively discouraged, with :ref:`Setuptools` being "
"the preferred replacement. :ref:`Setuptools` not only provides features that "
"plain :ref:`distutils` doesn't offer (such as dependency declarations and "
"entry point declarations), it also provides a consistent build interface and "
"feature set across all supported Python versions."
msgstr ""
"Из-за сложностей, связанных с поддержкой системы упаковки, в которой "
"обновления функций тесно связаны с обновлениями времени выполнения языка, "
"прямое использование :ref:`distutils` активно не рекомендуется, а "
"предпочтительной заменой является :ref:`Setuptools`. :ref:`Setuptools` не "
"только предоставляет возможности, которых нет в обычном :ref:`distutils` "
"(такие как объявление зависимостей и объявление точек входа), но и "
"обеспечивает согласованный интерфейс сборки и набор функций для всех "
"поддерживаемых версий Python."

#: ../source/key_projects.rst:107
msgid ""
"Consequently, :ref:`distutils` was deprecated in Python 3.10 by :pep:`632` "
"and has been :doc:`removed <python:whatsnew/3.12>` from the standard library "
"in Python 3.12.  Setuptools bundles the standalone copy of distutils, and it "
"is injected even on Python < 3.12 if you import setuptools first or use pip."
msgstr ""
"Следовательно, :ref:`distutils` был устаревшим в Python 3.10 с помощью :pep:"
"`632` и был :doc:`удален <python:whatsnew/3.12>` из стандартной библиотеки в "
"Python 3.12.  Setuptools включает в себя автономную копию distutils, и она "
"внедряется даже на Python < 3.12, если вы сначала импортируете setuptools "
"или используете pip."

#: ../source/key_projects.rst:116
msgid "flit"
msgstr "flit"

#: ../source/key_projects.rst:118
msgid ""
"`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""
"`Документы <https://flit.readthedocs.io/en/latest/>`__ | `Проблемы <https://"
"github.com/pypa/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"

#: ../source/key_projects.rst:122
msgid ""
"Flit provides a simple way to create and upload pure Python packages and "
"modules to PyPI.  It focuses on `making the easy things easy <flit-"
"rationale_>`_ for packaging.  Flit can generate a configuration file to "
"quickly set up a simple project, build source distributions and wheels, and "
"upload them to PyPI."
msgstr ""
"Flit предоставляет простой способ создания и загрузки пакетов и модулей на "
"чистом Python в PyPI.  Он фокусируется на том, чтобы \"сделать легкие вещи "
"легкими <flit-rationale_>`_ для упаковки\".  Flit может сгенерировать "
"конфигурационный файл для быстрой настройки простого проекта, собрать "
"исходные дистрибутивы и колеса и загрузить их в PyPI."

#: ../source/key_projects.rst:127
msgid ""
"Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on "
"tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to "
"upload them to PyPI. Flit requires Python 3, but you can use it to "
"distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""
"Flit использует ``pyproject.toml`` для конфигурирования проекта. Flit не "
"полагается на такие инструменты, как :ref:`setuptools` для сборки "
"дистрибутивов или :ref:`twine` для их загрузки на PyPI. Flit требует Python "
"3, но вы можете использовать его для распространения модулей для Python 2, "
"если они могут быть импортированы на Python 3."

#: ../source/key_projects.rst:132
msgid ""
"The flit package is lifted by `Matthias Bussonnier <https://github.com/"
"Carreau>`__ since October 2023 on the `tidelift platform <https://tidelift."
"com/lifter/search/pypi/flit>`__, and funds sent to the PSF and earmarked for "
"PyPA usage."
msgstr ""
"Пакет flit поднимается `Маттиасом Буссоньером <https://github.com/"
"Carreau>`__ с октября 2023 года на платформе `tidelift <https://tidelift.com/"
"lifter/search/pypi/flit>`__, а средства отправляются в PSF и предназначаются "
"для использования в PyPA."

#: ../source/key_projects.rst:142
msgid "hatch"
msgstr "hatch"

#: ../source/key_projects.rst:144
msgid ""
"`Docs <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/pypa/"
"hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""
"`Документы <https://hatch.pypa.io/latest/>`__ | `GitHub <https://github.com/"
"pypa/hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"

#: ../source/key_projects.rst:148
msgid ""
"Hatch is a unified command-line tool meant to conveniently manage "
"dependencies and environment isolation for Python developers. Python package "
"developers use Hatch and its :term:`build backend <Build Backend>` Hatchling "
"to configure, version, specify dependencies for, and publish packages to "
"PyPI. Its plugin system allows for easily extending functionality."
msgstr ""
"Hatch - это унифицированный инструмент командной строки, предназначенный для "
"удобного управления зависимостями и изоляции окружения для разработчиков "
"Python. Разработчики пакетов Python используют Hatch и его :term:`build "
"backend <Build Backend>` Hatchling для конфигурирования, версионирования, "
"указания зависимостей и публикации пакетов в PyPI. Его система плагинов "
"позволяет легко расширять функциональность."

#: ../source/key_projects.rst:157
msgid "packaging"
msgstr "packaging"

#: ../source/key_projects.rst:159
msgid ""
":doc:`Docs <packaging:index>` | `Issues <https://github.com/pypa/packaging/"
"issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://"
"pypi.org/project/packaging>`__"
msgstr ""
":doc:`Документы <packaging:index>` | `Проблемы <https://github.com/pypa/"
"packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | "
"`PyPI <https://pypi.org/project/packaging>`__"

#: ../source/key_projects.rst:164
msgid ""
"Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""
"Основные утилиты для Python упаковки, используемой:ref:`pip'' и :ref:"
"`setuptools'."

#: ../source/key_projects.rst:166
msgid ""
"The core utilities in the packaging library handle version handling, "
"specifiers, markers, requirements, tags, and similar attributes and tasks "
"for Python packages. Most Python users rely on this library without needing "
"to explicitly call it; developers of the other Python packaging, "
"distribution, and installation tools listed here often use its functionality "
"to parse, discover, and otherwise handle dependency attributes."
msgstr ""
"Основные утилиты библиотеки упаковки работают с версиями, спецификаторами, "
"маркерами, требованиями, тегами и подобными атрибутами и задачами для "
"пакетов Python. Большинство пользователей Python используют эту библиотеку "
"без необходимости ее явного вызова; разработчики других перечисленных здесь "
"инструментов для упаковки, распространения и установки Python часто "
"используют ее функциональность для анализа, обнаружения и другой обработки "
"атрибутов зависимостей."

#: ../source/key_projects.rst:174
msgid ""
"This project specifically focuses on implementing the modern Python "
"packaging interoperability standards defined at :ref:`packaging-"
"specifications`, and will report errors for sufficiently old legacy packages "
"that are incompatible with those standards. In contrast, the :ref:`distlib` "
"project is a more permissive library that attempts to provide a plausible "
"reading of ambiguous metadata in cases where :ref:`packaging` will instead "
"report on error."
msgstr ""
"Этот проект фокусируется на реализации современных стандартов совместимости "
"упаковки Python, определенных в :ref:`packaging-specifications`, и будет "
"сообщать об ошибках для достаточно старых унаследованных пакетов, "
"несовместимых с этими стандартами. В отличие от этого, проект :ref:`distlib` "
"- это более свободная библиотека, которая пытается обеспечить правдоподобное "
"прочтение неоднозначных метаданных в тех случаях, когда :ref:`packaging` "
"вместо этого сообщит об ошибке."

#: ../source/key_projects.rst:186
#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "pip"
msgstr "pip"

#: ../source/key_projects.rst:188
msgid ""
"`Docs <https://pip.pypa.io/>`__ | `Issues <https://github.com/pypa/pip/"
"issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi."
"org/project/pip/>`__"
msgstr ""
"`Документы <https://pip.pypa.io/>`__ | `Проблемы <https://github.com/pypa/"
"pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://"
"pypi.org/project/pip/>`__"

#: ../source/key_projects.rst:193
msgid ""
"The most popular tool for installing Python packages, and the one included "
"with modern versions of Python."
msgstr ""
"Самый популярный инструмент для установки пакетов Python, входящий в состав "
"современных версий Python."

#: ../source/key_projects.rst:196
msgid ""
"It provides the essential core features for finding, downloading, and "
"installing packages from PyPI and other Python package indexes, and can be "
"incorporated into a wide range of development workflows via its command-line "
"interface (CLI)."
msgstr ""
"Он предоставляет основные функции для поиска, загрузки и установки пакетов "
"из PyPI и других индексов пакетов Python, а также может быть включен в "
"широкий спектр рабочих процессов разработки с помощью интерфейса командной "
"строки (CLI)."

#: ../source/key_projects.rst:204
msgid "Pipenv"
msgstr "Pipenv"

#: ../source/key_projects.rst:206
msgid ""
":doc:`Docs <pipenv:index>` | `Source <https://github.com/pypa/pipenv>`__ | "
"`Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/"
"project/pipenv>`__"
msgstr ""
":doc:`Документы <pipenv:index>` | `Источник <https://github.com/pypa/"
"pipenv>`__ | `Проблемы <https://github.com/pypa/pipenv/issues>`__ | `PyPI "
"<https://pypi.org/project/pipenv>`__"

#: ../source/key_projects.rst:211
msgid ""
"Pipenv is a project that aims to bring the best of all packaging worlds to "
"the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:"
"`virtualenv` into one single toolchain. It can autoimport ``requirements."
"txt`` and also check for CVEs in `Pipfile`_ using `safety <https://pyup.io/"
"safety>`_."
msgstr ""
"Pipenv - это проект, целью которого является привнесение лучшего из всех "
"миров упаковки в мир Python. Он объединяет :ref:`Pipfile`, :ref:`pip` и :ref:"
"`virtualenv` в единый инструментарий. Он может автоимпортировать "
"``requirements.txt``, а также проверять CVE в ``Pipfile`` с помощью `safety "
"<https://pyup.io/safety>`_."

#: ../source/key_projects.rst:216
msgid ""
"Pipenv aims to help users manage environments, dependencies, and imported "
"packages on the command line. It also works well on Windows (which other "
"tools often underserve), makes and checks file hashes, to ensure compliance "
"with hash-locked dependency specifiers, and eases uninstallation of packages "
"and dependencies."
msgstr ""
"Pipenv призван помочь пользователям управлять окружениями, зависимостями и "
"импортированными пакетами в командной строке. Он также хорошо работает под "
"Windows (что часто не удается другим инструментам), создает и проверяет хэши "
"файлов, чтобы обеспечить соответствие спецификаторам зависимостей с хэш-"
"блокировкой, и облегчает удаление пакетов и зависимостей."

#: ../source/key_projects.rst:225
msgid "Pipfile"
msgstr "Pipfile"

#: ../source/key_projects.rst:227
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr "`Исходный код <https://github.com/pypa/pipfile>`__"

#: ../source/key_projects.rst:229
msgid ""
":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level "
"application-centric alternative to :ref:`pip`'s lower-level :file:"
"`requirements.txt` file."
msgstr ""
":file:`Pipfile` и его собрат :file:`Pipfile.lock` являются ориентированной "
"на приложения альтернативой более низкоуровневому файлу :ref:`pip` :file:"
"`requirements.txt`."

#: ../source/key_projects.rst:236
msgid "pipx"
msgstr "pipx"

#: ../source/key_projects.rst:238
msgid ""
"`Docs <https://pipx.pypa.io/>`__ | `GitHub <https://github.com/pypa/pipx>`__ "
"| `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""
"`Docs <https://pipx.pypa.io/>`__ | `GitHub <https://github.com/pypa/pipx>`__ "
"| `PyPI <https://pypi.org/project/pipx/>`__"

#: ../source/key_projects.rst:242
msgid ""
"pipx is a tool to install and run Python command-line applications without "
"causing dependency conflicts with other packages installed on the system."
msgstr ""
"pipx - это инструмент для установки и запуска приложений командной строки "
"Python, не вызывая конфликтов зависимостей с другими пакетами, "
"установленными в системе."

#: ../source/key_projects.rst:249
msgid ""
":doc:`Docs <index>` | `Issues <https://github.com/pypa/packaging.python.org/"
"issues>`__ | `GitHub <https://github.com/pypa/packaging.python.org>`__"
msgstr ""
":doc:`Документы <индекс>` | `Вопросы <https://github.com/pypa/packaging."
"python.org/issues>`__ | `GitHub <https://github.com/pypa/packaging.python."
"org>`__"

#: ../source/key_projects.rst:253
msgid "This guide!"
msgstr "Это руководство!"

#: ../source/key_projects.rst:258
msgid "readme_renderer"
msgstr "readme_renderer"

#: ../source/key_projects.rst:260
msgid ""
"`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"
msgstr ""
"`GitHub и документация <https://github.com/pypa/readme_renderer/>`__ | `PyPI "
"<https://pypi.org/project/readme-renderer/>`__"

#: ../source/key_projects.rst:263
msgid ""
"``readme_renderer`` is a library that package developers use to render their "
"user documentation (README) files into HTML from markup languages such as "
"Markdown or reStructuredText. Developers call it on its own or via :ref:"
"`twine`, as part of their release management process, to check that their "
"package descriptions will properly display on PyPI."
msgstr ""
"``readme_renderer`` - это библиотека, которую разработчики пакетов "
"используют для рендеринга файлов пользовательской документации (README) в "
"HTML из языков разметки, таких как Markdown или reStructuredText. "
"Разработчики вызывают ее самостоятельно или через :ref:`twine`, как часть "
"процесса управления релизами, чтобы проверить, что описания их пакетов будут "
"правильно отображаться на PyPI."

#: ../source/key_projects.rst:274
msgid "Setuptools"
msgstr "Инструменты настройки"

#: ../source/key_projects.rst:276
msgid ""
"`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://"
"github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/"
"setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""
"`Документы <https://setuptools.readthedocs.io/en/latest/>`__ | `Проблемы "
"<https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/"
"pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"

#: ../source/key_projects.rst:281
msgid ""
"Setuptools (which includes ``easy_install``) is a collection of enhancements "
"to the Python distutils that allow you to more easily build and distribute "
"Python :term:`distributions <Distribution Package>`, especially ones that "
"have dependencies on other packages."
msgstr ""
"Setuptools (включающий ``easy_install``) - это набор улучшений для Python "
"distutils, которые позволяют вам легче собирать и распространять Python :"
"term:`distributions <Distribution Package>`, особенно те, которые имеют "
"зависимости от других пакетов."

#: ../source/key_projects.rst:289
msgid "trove-classifiers"
msgstr "trove-classifiers"

#: ../source/key_projects.rst:291
msgid ""
"`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"
msgstr ""
"`Проблемы <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub "
"<https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/"
"project/trove-classifiers/>`__"

#: ../source/key_projects.rst:295
msgid ""
"trove-classifiers is the canonical source for `classifiers on PyPI <https://"
"pypi.org/classifiers/>`_, which project maintainers use to :ref:"
"`systematically describe their projects <core-metadata-classifier>` so that "
"users can better find projects that match their needs on the PyPI."
msgstr ""
"trove-classifiers - это канонический источник для `классификаторов на PyPI "
"<https://pypi.org/classifiers/>`_, которые сопровождающие проектов "
"используют для :ref:`систематического описания своих проектов <core-metadata-"
"classifier>`, чтобы пользователи могли лучше находить проекты, "
"соответствующие их потребностям, на PyPI."

#: ../source/key_projects.rst:300
msgid ""
"The trove-classifiers package contains a list of valid classifiers and "
"deprecated classifiers (which are paired with the classifiers that replace "
"them).  Use this package to validate classifiers used in packages intended "
"for uploading to PyPI. As this list of classifiers is published as code, you "
"can install and import it, giving you a more convenient workflow compared to "
"referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. "
"The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for "
"the project hosts discussions on proposed classifiers and requests for new "
"classifiers."
msgstr ""
"Пакет trove-classifiers содержит список валидных классификаторов и "
"устаревших классификаторов (которые сопровождаются классификаторами, которые "
"их заменяют).  Используйте этот пакет для проверки классификаторов, "
"используемых в пакетах, предназначенных для загрузки в PyPI. Поскольку этот "
"список классификаторов опубликован в виде кода, вы можете устанавливать и "
"импортировать его, что обеспечивает более удобный рабочий процесс по "
"сравнению с обращением к `списку, опубликованному на PyPI <https://pypi.org/"
"classifiers/>`_. На трекере `issue tracker <https://github.com/pypa/trove-"
"classifiers/issues>`_ проекта ведутся обсуждения предлагаемых "
"классификаторов и запросы на новые классификаторы."

#: ../source/key_projects.rst:314
msgid "twine"
msgstr "twine"

#: ../source/key_projects.rst:316
msgid ""
"`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | "
"`PyPI <https://pypi.org/project/twine>`__"
msgstr ""
"`Документы <https://twine.readthedocs.io/en/latest/>`__ | `Проблемы <https://"
"github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/"
"twine>`__ | `PyPI <https://pypi.org/project/twine>`__"

#: ../source/key_projects.rst:321
msgid ""
"Twine is the primary tool developers use to upload packages to the Python "
"Package Index or other Python package indexes. It is a command-line program "
"that passes program files and metadata to a web API. Developers use it "
"because it's the official PyPI upload tool, it's fast and secure, it's "
"maintained, and it reliably works."
msgstr ""
"Twine - это основной инструмент, используемый разработчиками для загрузки "
"пакетов в Python Package Index или другие индексы пакетов Python. Это "
"программа командной строки, которая передает файлы программ и метаданные в "
"веб-интерфейс. Разработчики используют его, потому что это официальный "
"инструмент загрузки PyPI, он быстрый и безопасный, его поддерживают, и он "
"надежно работает."

#: ../source/key_projects.rst:331 ../source/overview.rst:405
msgid "virtualenv"
msgstr "virtualenv"

#: ../source/key_projects.rst:333
msgid ""
"`Docs <https://virtualenv.pypa.io/en/stable/index.html>`__ | `Issues "
"<https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/"
"pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"
msgstr ""
"`Документация <https://virtualenv.pypa.io/en/stable/index.html>`__ | "
"`Замечания <https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://"
"github.com/pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/"
">`__"

#: ../source/key_projects.rst:338
msgid ""
"virtualenv is a tool for creating isolated Python :term:`Virtual "
"Environments <Virtual Environment>`, like :ref:`venv`. Unlike :ref:`venv`, "
"virtualenv can create virtual environments for other versions of Python, "
"which it locates using the PATH environment variable. It also provides "
"convenient features for configuring, maintaining, duplicating, and "
"troubleshooting virtual environments. For more information, see the section "
"on :ref:`Creating and using Virtual Environments`."
msgstr ""
"virtualenv - это инструмент для создания изолированных Python :term:`Virtual "
"Environments <Виртуальная среда>`, подобно :ref:`venv`. В отличие от :ref:"
"`venv`, virtualenv может создавать виртуальные среды для других версий "
"Python, которые он находит с помощью переменной окружения PATH. Он также "
"предоставляет удобные функции для настройки, поддержки, дублирования и "
"устранения неполадок в виртуальных средах. Для получения дополнительной "
"информации см. раздел :ref:`Создание и использование виртуальных сред`."

#: ../source/key_projects.rst:350
msgid "Warehouse"
msgstr "Warehouse"

#: ../source/key_projects.rst:352
msgid ""
"`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/"
"warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""
"`Документы <https://warehouse.pypa.io/>`__ | `Проблемы <https://github.com/"
"pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"

#: ../source/key_projects.rst:356
msgid ""
"The current codebase powering the :term:`Python Package Index (PyPI)`. It is "
"hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` "
"downloads."
msgstr ""
"Текущая кодовая база, лежащая в основе :term:`Python Package Index (PyPI)`. "
"Она размещена на сайте `pypi.org <https://pypi.org/>`_. Источник по "
"умолчанию для загрузки :ref:`pip`."

#: ../source/key_projects.rst:364
msgid "wheel"
msgstr "wheel"

#: ../source/key_projects.rst:366
msgid ""
"`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github."
"com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | "
"`PyPI <https://pypi.org/project/wheel>`__"
msgstr ""
"`Документы <https://wheel.readthedocs.io/en/latest/>`__ | `Проблемы <https://"
"github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/"
"wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"

#: ../source/key_projects.rst:371
msgid ""
"Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` "
"extension for creating :term:`wheel distributions <Wheel>`.  Additionally, "
"it offers its own command line utility for creating and installing wheels."
msgstr ""
"В первую очередь, проект wheel предлагает расширение ``bdist_wheel`` :ref:"
"`setuptools`` для создания дистрибутивов :term:`wheel <Wheel>`.  Кроме того, "
"он предлагает собственную утилиту командной строки для создания и установки "
"колес."

#: ../source/key_projects.rst:375
msgid ""
"See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that "
"package developers use to check and fix Python packages they are making in "
"the binary wheel format. It provides functionality to discover dependencies, "
"check metadata for compliance, and repair the wheel and metadata to properly "
"link and include external shared libraries in a package."
msgstr ""
"См. также `auditwheel <https://github.com/pypa/auditwheel>`__, инструмент, "
"который разработчики пакетов используют для проверки и исправления пакетов "
"Python, которые они создают в формате бинарного колеса. Он предоставляет "
"функциональность для обнаружения зависимостей, проверки метаданных на "
"соответствие, а также исправления колеса и метаданных для правильного "
"связывания и включения внешних общих библиотек в пакет."

#: ../source/key_projects.rst:384
msgid "Non-PyPA Projects"
msgstr "Проекты, не связанные с PyPA"

#: ../source/key_projects.rst:389
msgid "buildout"
msgstr "buildout"

#: ../source/key_projects.rst:391
msgid ""
"`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs."
"launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""
"`Документы <http://www.buildout.org/en/latest/>`__ | `Проблемы <https://bugs."
"launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc."
"buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"

#: ../source/key_projects.rst:396
msgid ""
"Buildout is a Python-based build system for creating, assembling and "
"deploying applications from multiple parts, some of which may be non-Python-"
"based.  It lets you create a buildout configuration and reproduce the same "
"software later."
msgstr ""
"Buildout - это система сборки на основе Python для создания, сборки и "
"развертывания приложений из нескольких частей, некоторые из которых могут "
"быть не на основе Python.  Она позволяет создать конфигурацию сборки и "
"воспроизвести то же самое программное обеспечение позже."

#: ../source/key_projects.rst:403
msgid "conda"
msgstr "conda"

#: ../source/key_projects.rst:405
msgid ":doc:`Docs <conda:index>`"
msgstr ":doc:`Документы <conda:index>`"

#: ../source/key_projects.rst:407
msgid ""
"Conda is a package, dependency, and environment management system for any "
"language — Python, R, Ruby, C/C++, Fortran, and more. It is written in "
"Python and widely used in the Python scientific computing community, due to "
"its support for non-Python compiled libraries and extensions. It is used as "
"the basis of the `Anaconda <https://docs.anaconda.com/anaconda/>`__ Python "
"distribution from Anaconda, Inc. It was originally aimed at the scientific "
"community, but can also be used on its own, or with the :doc:`miniconda "
"<conda:miniconda>`, `miniforge <https://github.com/conda-forge/miniforge>`_ "
"or `pixi <https://pixi.sh/>`_ systems. It is available for Windows, Mac and "
"Linux systems."
msgstr ""
"Conda - это система управления пакетами, зависимостями и окружением для "
"любого языка - Python, R, Ruby, C/C++, Fortran и других. Она написана на "
"языке Python и широко используется в сообществе научных вычислений на Python "
"благодаря поддержке непитоновских компилируемых библиотек и расширений. На "
"нем основан дистрибутив `Anaconda <https://docs.anaconda.com/anaconda/>`__ "
"Python от Anaconda, Inc. Изначально он был ориентирован на научное "
"сообщество, но также может использоваться самостоятельно или вместе с "
"системами :doc:`miniconda <conda:miniconda>`, `miniforge <https://github.com/"
"conda-forge/miniforge>`_ или `pixi <https://pixi.sh/>`_. Он доступен для "
"систем Windows, Mac и Linux."

#: ../source/key_projects.rst:416
msgid ""
"Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, "
"but provides many of their combined features, such as package management, "
"virtual environment management and deployment of binary extensions and other "
"binary code."
msgstr ""
"Conda является совершенно отдельным инструментом от :ref:`pip`, virtualenv и "
"wheel, но предоставляет многие из их объединенных возможностей, таких как "
"управление пакетами, управление виртуальным окружением и развертывание "
"бинарных расширений и другого бинарного кода."

#: ../source/key_projects.rst:420
msgid ""
"Conda does not install packages from PyPI -- it can only manage packages "
"built specifically for conda, which can be made available on a \"conda "
"channel\", such as those hosted on `anaconda.org <https://anaconda.org>`__, "
"or a local (e.g. intranet) package server. In addition to the \"default\" "
"channels managed by `Anaconda, Inc. <https://www.anaconda.com/>`__, there "
"are a wide variety of packages from the community supported `conda-forge "
"project <https://conda-forge.org/>`__"
msgstr ""
"Conda не устанавливает пакеты из PyPI - она может управлять только пакетами, "
"созданными специально для conda, которые могут быть доступны на «канале "
"conda», например, размещенном на `anaconda.org <https://anaconda.org>`__, "
"или на локальном (например, интранет) сервере пакетов. В дополнение к "
"каналам «по умолчанию», управляемым `Anaconda, Inc. <https://www.anaconda."
"com/>`__, существует широкий спектр пакетов из поддерживаемого сообществом "
"проекта `conda-forge <https://conda-forge.org/>`__"

#: ../source/key_projects.rst:426
msgid ""
"Note that :ref:`pip` can be installed into, and work side-by-side with conda "
"for managing :term:`distributions <Distribution Package>` from PyPI. It is "
"also possible to build conda packages from Python source packages using "
"tools such as `conda skeleton <https://docs.conda.io/projects/conda-build/en/"
"latest/user-guide/tutorials/build-pkgs-skeleton.html>`__: a tool to "
"automatically make conda packages from Python packages available on PyPI."
msgstr ""
"Обратите внимание, что :ref:`pip` может быть установлен и работать бок о бок "
"с conda для управления :term:`distributions <Distribution Package>` из PyPI. "
"Также можно собирать пакеты conda из исходных пакетов Python с помощью таких "
"инструментов, как `conda skeleton <https://docs.conda.io/projects/conda-"
"build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`__: "
"инструмент для автоматического создания пакетов conda из пакетов Python, "
"доступных на PyPI."

#: ../source/key_projects.rst:435
msgid "devpi"
msgstr "devpi"

#: ../source/key_projects.rst:437
msgid ""
"`Docs <http://doc.devpi.net/latest/>`__ | :gh:`Issues <devpi/devpi/issues>` "
"| `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""
"`Документы <http://doc.devpi.net/latest/>`__ | :gh:`Проблемы <devpi/devpi/"
"issues>` | `PyPI <https://pypi.org/project/devpi>`__"

#: ../source/key_projects.rst:441
msgid ""
"devpi features a powerful PyPI-compatible server and PyPI proxy cache with a "
"complementary command line tool to drive packaging, testing and release "
"activities with Python. devpi also provides a browsable and searchable web "
"interface. devpi supports mirroring PyPI, multiple :term:`package indexes "
"<Package Index>` with inheritance, syncing between these indexes, index "
"replication and fail-over, and package upload."
msgstr ""
"devpi - это мощный PyPI-совместимый сервер и прокси-кэш PyPI с "
"дополнительным инструментом командной строки для управления процессами "
"упаковки, тестирования и выпуска на Python. devpi также предоставляет веб-"
"интерфейс с возможностью просмотра и поиска. devpi поддерживает "
"зеркалирование PyPI, несколько индексов пакетов <Пакетный индекс>` с "
"наследованием, синхронизацию между этими индексами, репликацию индекса и "
"восстановление после отказа, а также загрузку пакетов."

#: ../source/key_projects.rst:452
msgid "dumb-pypi"
msgstr "dumb-pypi"

#: ../source/key_projects.rst:454
msgid ""
"`GitHub <https://github.com/chriskuehl/dumb-pypi>`__ | `PyPI <https://pypi."
"org/project/dumb-pypi>`__"
msgstr ""
"`GitHub <https://github.com/chriskuehl/dumb-pypi>`__ | `PyPI <https://pypi."
"org/project/dumb-pypi>`__"

#: ../source/key_projects.rst:457
msgid ""
"dumb-pypi is a simple :term:`package index <Package Index>` static file site "
"generator, which then must be hosted by a static file webserver to become "
"the package index. It supports serving the hash, core-metadata, and yank-"
"status."
msgstr ""
"dumb-pypi - это простой : термин:`пакетный индекс <Пакетный индекс>` "
"генератор статических файлов сайта, который затем должен быть размещен на "
"статическом файловом веб-сервере, чтобы стать пакетным индексом. Он "
"поддерживает обслуживание хэша, основных метаданных и yank-статуса."

#: ../source/key_projects.rst:464
msgid "enscons"
msgstr "enscons"

#: ../source/key_projects.rst:466
msgid ""
":gh:`Source <dholth/enscons>` | :gh:`Issues <dholth/enscons/issues>` | `PyPI "
"<https://pypi.org/project/enscons>`__"
msgstr ""
":gh:`Source <dholth/enscons>` | :gh:`Проблемы <dholth/enscons/issues>` | "
"`PyPI <https://pypi.org/project/enscons>`__"

#: ../source/key_projects.rst:470
msgid ""
"Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-"
"compatible source distributions and wheels without using distutils or "
"setuptools, including distributions with C extensions. Enscons has a "
"different architecture and philosophy than :ref:`distutils`. Rather than "
"adding build features to a Python packaging system, enscons adds Python "
"packaging to a general purpose build system. Enscons helps you to build "
"sdists that can be automatically built by :ref:`pip`, and wheels that are "
"independent of enscons."
msgstr ""
"Enscons - это инструмент для упаковки на Python, основанный на `SCons`_. Он "
"собирает :ref:`pip`-совместимые исходные дистрибутивы и колеса без "
"использования distutils или setuptools, включая дистрибутивы с расширениями "
"C. Enscons имеет другую архитектуру и философию, чем :ref:`distutils`. "
"Вместо того, чтобы добавлять функции сборки в систему упаковки Python, "
"enscons добавляет упаковку Python в систему сборки общего назначения. "
"Enscons помогает вам создавать sdists, которые могут быть автоматически "
"собраны :ref:`pip`, и колеса, которые не зависят от enscons."

#: ../source/key_projects.rst:485
msgid "Flask-Pypi-Proxy"
msgstr "Flask-Pypi-Proxy"

#: ../source/key_projects.rst:487
msgid ""
"`Docs <https://flask-pypi-proxy.readthedocs.io>`__ | :gh:`GitHub <tzulberti/"
"Flask-PyPi-Proxy>` | `PyPI <https://pypi.org/project/Flask-Pypi-Proxy/>`__"
msgstr ""
"`документация <https://flask-pypi-proxy.readthedocs.io>`__ | :gh:`GitHub "
"<tzulberti/Flask-PyPi-Proxy>` | `PyPI <https://pypi.org/project/Flask-Pypi-"
"Proxy/>`__"

#: ../source/key_projects.rst:491 ../source/key_projects.rst:685
#: ../source/key_projects.rst:744
msgid "Not maintained, project archived"
msgstr "Не поддерживается, проект сдан в архив"

#: ../source/key_projects.rst:493
msgid ""
"Flask-Pypi-Proxy is a :term:`package index <Package Index>` as a cached "
"proxy for PyPI."
msgstr ""
"Flask-Pypi-Proxy - это : термин:`индекс пакета <Индекс пакета>` в качестве "
"кэшированного прокси для PyPI."

#: ../source/key_projects.rst:499
msgid "Hashdist"
msgstr "Hashdist"

#: ../source/key_projects.rst:501
msgid ""
"`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/hashdist/hashdist/>`__"
msgstr ""
"`Документы <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/hashdist/hashdist/>`__"

#: ../source/key_projects.rst:504
msgid ""
"Hashdist is a library for building non-root software distributions. Hashdist "
"is trying to be “the Debian of choice for cases where Debian technology "
"doesn’t work”. The best way for Pythonistas to think about Hashdist may be a "
"more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed "
"at solving the problem of installing scientific software, and making package "
"distribution stateless, cached, and branchable. It is used by some "
"researchers but has been lacking in maintenance since 2016."
msgstr ""
"Hashdist - это библиотека для создания дистрибутивов программного "
"обеспечения без рута. Hashdist пытается стать \"выбором Debian для случаев, "
"когда технология Debian не работает\". Pythonистам лучше всего думать о "
"Hashdist как о более мощном гибриде :ref:`virtualenv` и :ref:`buildout`. Он "
"нацелен на решение проблемы установки научного программного обеспечения и "
"делает распространение пакетов нестационарным, кэшируемым и ветвящимся. "
"Используется некоторыми исследователями, но с 2016 года не поддерживается."

#: ../source/key_projects.rst:516
msgid "Maturin"
msgstr "Maturin"

#: ../source/key_projects.rst:518
msgid ""
"`Docs <https://www.maturin.rs>`__ | `GitHub <https://github.com/PyO3/"
"maturin>`__"
msgstr ""
"`Документы <https://www.maturin.rs>`__ | `GitHub <https://github.com/PyO3/"
"maturin>`__"

#: ../source/key_projects.rst:521
msgid ""
"Maturin is a build backend for Rust extension modules, also written in Rust. "
"It supports building wheels for python 3.7+ on Windows, Linux, macOS and "
"FreeBSD, can upload them to PyPI and has basic PyPy and GraalPy support."
msgstr ""
"Maturin - это бэкенд для сборки модулей расширения Rust, также написанный на "
"Rust. Он поддерживает сборку колес для python 3.7+ под Windows, Linux, macOS "
"и FreeBSD, может загружать их в PyPI и имеет базовую поддержку PyPy и "
"GraalPy."

#: ../source/key_projects.rst:529
msgid "meson-python"
msgstr "meson-python"

#: ../source/key_projects.rst:531
msgid ""
"`Docs <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/mesonbuild/meson-python>`__"
msgstr ""
"`Документы <https://meson-python.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/mesonbuild/meson-python>`__"

#: ../source/key_projects.rst:534
msgid ""
"``meson-python`` is a build backend that uses the Meson_ build system. It "
"enables Python package authors to use Meson_ as the build system for their "
"package. It supports a wide variety of languages, including C, and is able "
"to fill the needs of most complex build configurations."
msgstr ""
"``meson-python`` - это бэкенд сборки, использующий систему сборки Meson_. Он "
"позволяет авторам пакетов Python использовать Meson_ в качестве системы "
"сборки для своего пакета. Он поддерживает широкий спектр языков, включая C, "
"и способен удовлетворить потребности большинства сложных конфигураций сборки."

#: ../source/key_projects.rst:544
msgid "multibuild"
msgstr "multibuild"

#: ../source/key_projects.rst:546
msgid "`GitHub <https://github.com/multi-build/multibuild>`__"
msgstr "`GitHub <https://github.com/multi-build/multibuild>`__"

#: ../source/key_projects.rst:548
msgid ""
"Multibuild is a set of CI scripts for building and testing Python :term:"
"`wheels <Wheel>` for Linux, macOS, and (less flexibly) Windows. Also see :"
"ref:`cibuildwheel`."
msgstr ""
"Multibuild - это набор CI-скриптов для сборки и тестирования Python :term:"
"`wheels <Wheel>` для Linux, macOS и (менее гибко) Windows. Также смотрите :"
"ref:`cibuildwheel`."

#: ../source/key_projects.rst:554
msgid "nginx_pypi_cache"
msgstr "nginx_pypi_cache"

#: ../source/key_projects.rst:556
msgid ":gh:`GitHub <hauntsaninja/nginx_pypi_cache>`"
msgstr ":gh:`GitHub <hauntsaninja/nginx_pypi_cache>`"

#: ../source/key_projects.rst:558
msgid ""
"nginx_pypi_cache is a :term:`package index <Package Index>` caching proxy "
"using `nginx <https://nginx.org/en/>`_."
msgstr ""
"nginx_pypi_cache - это : термин:`пакетный индекс <пакетный индекс>` "
"кэширующего прокси, использующего `nginx <https://nginx.org/en/>`_."

#: ../source/key_projects.rst:564
msgid "pdm"
msgstr "pdm"

#: ../source/key_projects.rst:566
msgid ""
"`Docs <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-project/"
"pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"
msgstr ""
"`Документы <https://pdm.fming.dev/>`__ | `GitHub <https://github.com/pdm-"
"project/pdm/>`__ | `PyPI <https://pypi.org/project/pdm>`__"

#: ../source/key_projects.rst:570
msgid ""
"PDM is a modern Python package manager. It uses :term:`pyproject.toml` to "
"store project metadata as defined in :pep:`621`."
msgstr ""
"PDM - это современный менеджер пакетов Python. Он использует :term:"
"`pyproject.toml` для хранения метаданных проекта, как определено в :pep:"
"`621`."

#: ../source/key_projects.rst:578
msgid ""
"`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""
"`Документы <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"

#: ../source/key_projects.rst:582
msgid ""
"Pex is a tool for generating :file:`.pex` (Python EXecutable) files, "
"standalone Python environments in the spirit of :ref:`virtualenv`. PEX files "
"are :doc:`zipapps <python:library/zipapp>` that make deployment of Python "
"applications as simple as ``cp``. A single PEX file can support multiple "
"target platforms and can be created from standard :ref:`pip`-resolvable "
"requirements, a lockfile generated with ``pex3 lock ...`` or even another "
"PEX. PEX files can optionally have tools embedded that support turning the "
"PEX file into a standard venv, graphing dependencies and more."
msgstr ""
"Pex - это инструмент для генерации :file:`.pex` (Python EXecutable) файлов, "
"автономных окружений Python в духе :ref:`virtualenv`. Файлы PEX - это :doc:"
"`zipapps <python:library/zipapp>`, которые делают развертывание приложений "
"Python таким же простым, как ``cp``. Один PEX-файл может поддерживать "
"несколько целевых платформ и может быть создан из стандартных :ref:`pip`-"
"разрешаемых требований, файла блокировки, созданного с помощью ``pex3 "
"lock ...`` или даже другого PEX. В PEX-файлы могут быть встроены "
"инструменты, поддерживающие превращение PEX-файла в стандартный venv, "
"построение графиков зависимостей и многое другое."

#: ../source/key_projects.rst:594
msgid "pip-tools"
msgstr "pip-инструменты"

#: ../source/key_projects.rst:596
msgid ""
"`Docs <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-"
"tools/>`__"
msgstr ""
"`Документы <https://pip-tools.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/"
"project/pip-tools/>`__"

#: ../source/key_projects.rst:600
msgid ""
"pip-tools is a suite of tools meant for Python system administrators and "
"release managers who particularly want to keep their builds deterministic "
"yet stay up to date with new versions of their dependencies. Users can "
"specify particular release of their dependencies via hash, conveniently make "
"a properly formatted list of requirements from information in other parts of "
"their program, update all dependencies (a feature :ref:`pip` currently does "
"not provide), and create layers of constraints for the program to obey."
msgstr ""
"pip-tools - это набор инструментов, предназначенных для системных "
"администраторов Python и менеджеров релизов, которые особенно хотят "
"сохранить детерминированность своих сборок и при этом быть в курсе новых "
"версий своих зависимостей. Пользователи могут указать конкретный релиз своих "
"зависимостей через хэш, удобно составить правильно оформленный список "
"требований из информации в других частях своей программы, обновить все "
"зависимости (функция, которую :ref:`pip` в настоящее время не "
"предоставляет), а также создать слои ограничений, которым должна подчиняться "
"программа."

#: ../source/key_projects.rst:612
msgid "pip2pi"
msgstr "pip2pi"

#: ../source/key_projects.rst:614
msgid ""
":gh:`GitHub <wolever/pip2pi>` | `PyPI <https://pypi.org/project/pip2pi/>`__"
msgstr ""
":gh:`GitHub <волевой/pip2pi>` | `PyPI <https://pypi.org/project/pip2pi/>`__"

#: ../source/key_projects.rst:617
msgid ""
"pip2pi is a :term:`package index <Package Index>` server where specific "
"packages are manually synchronised."
msgstr ""
"pip2pi - это сервер : термин:`индекс пакетов <Индекс пакетов>`, на котором "
"вручную синхронизируются определенные пакеты."

#: ../source/key_projects.rst:623
msgid "piwheels"
msgstr "piwheels"

#: ../source/key_projects.rst:625
msgid ""
"`Website <https://www.piwheels.org/>`__ | :doc:`Docs <piwheels:index>` | "
"`GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""
"Веб-сайт <https://www.piwheels.org/>`__ | :doc:`Docs <piwheels:index>` | "
"`GitHub <https://github.com/piwheels/piwheels/>`__"

#: ../source/key_projects.rst:629
msgid ""
"piwheels is a website, and software underpinning it, that fetches source "
"code distribution packages from PyPI and compiles them into binary wheels "
"that are optimized for installation onto Raspberry Pi computers. Raspberry "
"Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""
"piwheels - это веб-сайт и программное обеспечение, лежащее в его основе, "
"которое собирает пакеты дистрибутива исходного кода с PyPI и компилирует их "
"в бинарные диски, оптимизированные для установки на компьютеры Raspberry Pi. "
"В Raspberry Pi OS предварительно настроен pip на использование piwheels.org "
"в качестве дополнительного индекса к PyPI."

#: ../source/key_projects.rst:638
msgid "poetry"
msgstr "поэзия"

#: ../source/key_projects.rst:640
msgid ""
"`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-"
"poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""
"`Документы <https://python-poetry.org/>`__ | `GitHub <https://github.com/"
"python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"

#: ../source/key_projects.rst:644
msgid ""
"poetry is a command-line tool to handle dependency installation and "
"isolation as well as building and packaging of Python packages. It uses "
"``pyproject.toml`` and, instead of depending on the resolver functionality "
"within :ref:`pip`, provides its own dependency resolver. It attempts to "
"speed users' experience of installation and dependency resolution by locally "
"caching metadata about dependencies."
msgstr ""
"poetry - это инструмент командной строки для установки и изоляции "
"зависимостей, а также сборки и упаковки пакетов Python. Он использует "
"``pyproject.toml`` и, вместо того, чтобы зависеть от функциональности "
"разрешителя в :ref:`pip``, предоставляет свой собственный разрешитель "
"зависимостей. Он пытается ускорить процесс установки и разрешения "
"зависимостей, локально кэшируя метаданные о зависимостях."

#: ../source/key_projects.rst:654
msgid "proxpi"
msgstr "proxpi"

#: ../source/key_projects.rst:656
msgid ""
":gh:`GitHub <EpicWink/proxpi>` | `PyPI <https://pypi.org/project/proxpi/>`__"
msgstr ""
":gh:`GitHub <EpicWink/proxpi>` | `PyPI <https://pypi.org/project/proxpi/>`__"

#: ../source/key_projects.rst:659
msgid ""
"proxpi is a simple :term:`package index <Package Index>` which proxies PyPI "
"and other indexes with caching."
msgstr ""
"proxpi - это простой : термин:`индекс пакетов <Индекс пакетов>`, который "
"проксирует PyPI и другие индексы с кэшированием."

#: ../source/key_projects.rst:665
msgid "Pulp-python"
msgstr "Pulp-python"

#: ../source/key_projects.rst:667
msgid ""
"`Docs <https://docs.pulpproject.org/pulp_python/>`__ | :gh:`GitHub <pulp/"
"pulp_python>` | `PyPI <https://pypi.org/project/pulp-python/>`__"
msgstr ""
"`Документация <https://docs.pulpproject.org/pulp_python/>`__ | :gh:`GitHub "
"<pulp/pulp_python>` | `PyPI <https://pypi.org/project/pulp-python/>`__."

#: ../source/key_projects.rst:671
msgid ""
"Pulp-python is the Python :term:`package index <Package Index>` plugin for "
"`Pulp <https://pulpproject.org/>`_. Pulp-python supports mirrors backed by "
"local or `AWS S3`_, package upload, and proxying to multiple package indexes."
msgstr ""
"Pulp-python - это плагин Python : термин:`пакетный индекс <Пакетный индекс>` "
"для `Pulp <https://pulpproject.org/>`_. Pulp-python поддерживает зеркала, "
"поддерживаемые локальным или `AWS S3`_, загрузку пакетов и проксирование к "
"нескольким индексам пакетов."

#: ../source/key_projects.rst:679
msgid "PyPI Cloud"
msgstr "Облако PyPI"

#: ../source/key_projects.rst:681
msgid ""
"`Docs <https://pypicloud.readthedocs.io/>`__ | :gh:`GitHub <stevearc/"
"pypicloud>` | `PyPI <https://pypi.org/project/pypicloud/>`__"
msgstr ""
"`Документация <https://pypicloud.readthedocs.io/>`__ | :gh:`GitHub <stevearc/"
"pypicloud>` | `PyPI <https://pypi.org/project/pypicloud/>`__."

#: ../source/key_projects.rst:687
msgid ""
"PyPI Cloud is a :term:`package index <Package Index>` server, backed by `AWS "
"S3`_ or another cloud storage service, or local files. PyPI Cloud supports "
"redirect/cached proxying for PyPI, as well as authentication and "
"authorisation."
msgstr ""
"PyPI Облако - это : термин:`индекс пакетов <Индекс пакетов>` сервер, "
"поддерживающий `AWS S3`_ или другой облачный сервис хранения, или локальные "
"файлы. PyPI Облако поддерживает перенаправление/кэширование прокси для PyPI, "
"а также аутентификацию и авторизацию."

#: ../source/key_projects.rst:695
msgid "pypiprivate"
msgstr "pypiprivate"

#: ../source/key_projects.rst:697
msgid ""
":gh:`GitHub <helpshift/pypiprivate>` | `PyPI <https://pypi.org/project/"
"pypiprivate/>`__"
msgstr ""
":gh:`GitHub <helpshift/pypiprivate>` | `PyPI <https://pypi.org/project/"
"pypiprivate/>`__"

#: ../source/key_projects.rst:700
msgid ""
"pypiprivate serves a local (or `AWS S3`_-hosted) directory of packages as a :"
"term:`package index <Package Index>`."
msgstr ""
"pypiprivate обслуживает локальную (или размещенную на `AWS S3`_ директорию "
"пакетов как : термин:`пакетный индекс <Пакетный индекс>`."

#: ../source/key_projects.rst:706
msgid "pypiserver"
msgstr "pypiserver"

#: ../source/key_projects.rst:708
msgid ""
"`GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi."
"org/project/pypiserver/>`__"
msgstr ""
"`GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi."
"org/project/pypiserver/>`__"

#: ../source/key_projects.rst:711
msgid ""
"pypiserver is a minimalist application that serves as a private Python :term:"
"`package index <Package Index>` (from a local directory) within "
"organizations, implementing a simple API and browser interface. You can "
"upload private packages using standard upload tools, and users can download "
"and install them with :ref:`pip`, without publishing them publicly. "
"Organizations who use pypiserver usually download packages both from "
"pypiserver and from PyPI."
msgstr ""
"pypiserver - это минималистичное приложение, которое служит в качестве "
"частного Python : термин:`индекс пакетов <Пакетный индекс>` (из локальной "
"директории) в организациях, реализуя простой API и интерфейс браузера. Вы "
"можете загружать частные пакеты с помощью стандартных инструментов загрузки, "
"а пользователи могут скачивать и устанавливать их с помощью : ссылка:`pip`, "
"не публикуя их публично. Организации, использующие pypiserver, обычно "
"загружают пакеты как с pypiserver, так и с PyPI."

#: ../source/key_projects.rst:722
msgid "PyScaffold"
msgstr "PyScaffold"

#: ../source/key_projects.rst:724
msgid ""
"`Docs <https://pyscaffold.org>`__ | `GitHub <https://github.com/pyscaffold/"
"pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"
msgstr ""
"`Документы <https://pyscaffold.org>`__ | `GitHub <https://github.com/"
"pyscaffold/pyscaffold>`__ | `PyPI <https://pypi.org/project/pyscaffold/>`__"

#: ../source/key_projects.rst:728
msgid ""
"PyScaffold is a project generator for bootstrapping Python packages, ready "
"to be shared on PyPI and installable via :ref:`pip`. It relies on a set of "
"sane default configurations for established tools (such as :ref:"
"`setuptools`, pytest_ and Sphinx_) to provide a productive environment so "
"developers can start coding right away. PyScaffold can also be used with "
"existing projects to make packaging easier."
msgstr ""
"PyScaffold - это генератор проектов для создания загрузочных пакетов Python, "
"готовых к распространению на PyPI и установке через :ref:`pip`. Он опирается "
"на набор разумных конфигураций по умолчанию для установленных инструментов "
"(таких как :ref:`setuptools`, pytest_ и Sphinx_) для создания продуктивной "
"среды, чтобы разработчики могли сразу же приступить к написанию кода. "
"PyScaffold также можно использовать с существующими проектами, чтобы "
"упростить их упаковку."

#: ../source/key_projects.rst:739
msgid "pywharf"
msgstr "pywharf"

#: ../source/key_projects.rst:741
msgid ""
":gh:`GitHub <pywharf/pywharf>` | `PyPI <https://pypi.org/project/pywharf>`__"
msgstr ""
":gh:`GitHub <pywharf/pywharf>` | `PyPI <https://pypi.org/project/pywharf>`__"

#: ../source/key_projects.rst:746
msgid ""
"pywharf is a :term:`package index <Package Index>` server, serving files "
"locally or from `GitHub <https://github.com/>`_."
msgstr ""
"pywharf - это сервер : термин:`пакетный индекс <Пакетный индекс>`, "
"обслуживающий файлы локально или с `GitHub <https://github.com/>`_."

#: ../source/key_projects.rst:752
msgid "scikit-build"
msgstr "scikit-build"

#: ../source/key_projects.rst:754
msgid ""
"`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/"
"scikit-build>`__"
msgstr ""
"`Документы <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/"
"project/scikit-build>`__"

#: ../source/key_projects.rst:758
msgid ""
"Scikit-build is a :ref:`setuptools` wrapper for CPython that builds C/C++/"
"Fortran/Cython extensions It uses `cmake <https://pypi.org/project/cmake>`__ "
"(available on PyPI) to provide better support for additional compilers, "
"build systems, cross compilation, and locating dependencies and their "
"associated build requirements. To speed up and parallelize the build of "
"large projects, the user can install `ninja <https://pypi.org/project/"
"ninja>`__ (also available on PyPI)."
msgstr ""
"Scikit-build - это :ref:`setuptools` обертка для CPython, которая собирает "
"расширения C/C++/Fortran/Cython. Она использует `cmake <https://pypi.org/"
"project/cmake>`__ (доступен на PyPI) для обеспечения лучшей поддержки "
"дополнительных компиляторов, систем сборки, кросс-компиляции, а также поиска "
"зависимостей и связанных с ними требований к сборке. Для ускорения и "
"распараллеливания сборки больших проектов пользователь может установить "
"`ninja <https://pypi.org/project/ninja>`__ (также доступен на PyPI)."

#: ../source/key_projects.rst:769
msgid "scikit-build-core"
msgstr "scikit-build-core"

#: ../source/key_projects.rst:771
msgid ""
"`Docs <https://scikit-build-core.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/scikit-build/scikit-build-core/>`__ | `PyPI <https://"
"pypi.org/project/scikit-build-core>`__"
msgstr ""
"`Документы <https://scikit-build-core.readthedocs.io/en/latest/>`__ | "
"`GitHub <https://github.com/scikit-build/scikit-build-core/>`__ | `PyPI "
"<https://pypi.org/project/scikit-build-core>`__"

#: ../source/key_projects.rst:775
msgid ""
"Scikit-build-core is a build backend for CPython C/C++/Fortran/Cython "
"extensions.  It enables users to write extensions with `cmake <https://pypi."
"org/project/cmake>`__ (available on PyPI) to provide better support for "
"additional compilers, build systems, cross compilation, and locating "
"dependencies and their associated build requirements. CMake/Ninja are "
"automatically downloaded from PyPI if not available on the system."
msgstr ""
"Scikit-build-core - это бэкенд сборки для расширений CPython C/C++/Fortran/"
"Cython.  Он позволяет пользователям писать расширения с помощью `cmake "
"<https://pypi.org/project/cmake>`__ (доступен на PyPI), обеспечивая лучшую "
"поддержку дополнительных компиляторов, систем сборки, кросс-компиляции, а "
"также поиска зависимостей и связанных с ними требований к сборке. CMake/"
"Ninja автоматически загружаются с PyPI, если не доступны в системе."

#: ../source/key_projects.rst:785
msgid "shiv"
msgstr "shiv"

#: ../source/key_projects.rst:787
msgid ""
"`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github."
"com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""
"`Документы <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"

#: ../source/key_projects.rst:791
msgid ""
"shiv is a command line utility for building fully self contained Python "
"zipapps as outlined in :pep:`441`, but with all their dependencies included. "
"Its primary goal is making distributing Python applications and command line "
"tools fast & easy."
msgstr ""
"shiv - это утилита командной строки для создания полностью самодостаточных "
"Python zipapps, как описано в :pep:`441`, но с включением всех зависимостей. "
"Ее основная цель - сделать распространение Python-приложений и инструментов "
"командной строки быстрым и легким."

#: ../source/key_projects.rst:799
msgid "simpleindex"
msgstr "simpleindex"

#: ../source/key_projects.rst:801
msgid ""
":gh:`GitHub <uranusjr/simpleindex>` | `PyPI <https://pypi.org/project/"
"simpleindex/>`__"
msgstr ""
":gh:`GitHub <uranusjr/simpleindex>` | `PyPI <https://pypi.org/project/"
"simpleindex/>`__"

#: ../source/key_projects.rst:804
msgid ""
"simpleindex is a :term:`package index <Package Index>` which routes URLs to "
"multiple package indexes (including PyPI), serves local (or cloud-hosted, "
"for example `AWS S3`_, with a custom plugin) directories of packages, and "
"supports custom plugins."
msgstr ""
"simpleindex - это : термин:`индекс пакетов <Пакетный индекс>`, который "
"направляет URL к нескольким индексам пакетов (включая PyPI), обслуживает "
"локальные (или размещенные в облаке, например, `AWS S3`_, с помощью "
"пользовательского плагина) каталоги пакетов, а также поддерживает "
"пользовательские плагины."

#: ../source/key_projects.rst:814
msgid ""
":doc:`Docs <spack:index>` | `GitHub <https://github.com/spack/spack>`__ | "
"`Paper <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `Slides <https://tgamblin.github.io/files/"
"Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""
":doc:`Документы <spack:index>` | `GitHub <https://github.com/spack/spack>`__ "
"| `Paper <https://www.computer.org/csdl/proceedings-article/"
"sc/2015/2807623/12OmNBf94Xq>`__ | `Slides <https://tgamblin.github.io/files/"
"Gamblin-Spack-SC15-Talk.pdf>`__"

#: ../source/key_projects.rst:819
msgid ""
"A flexible package manager designed to support multiple versions, "
"configurations, platforms, and compilers.  Spack is like Homebrew, but "
"packages are written in Python and parameterized to allow easy swapping of "
"compilers, library versions, build options, etc. Arbitrarily many versions "
"of packages can coexist on the same system. Spack was designed for rapidly "
"building high performance scientific applications on clusters and "
"supercomputers."
msgstr ""
"Гибкий менеджер пакетов, разработанный для поддержки множества версий, "
"конфигураций, платформ и компиляторов.  Spack похож на Homebrew, но пакеты "
"написаны на Python и параметризованы, что позволяет легко менять местами "
"компиляторы, версии библиотек, параметры сборки и т. д. На одной системе "
"может сосуществовать произвольное количество версий пакетов. Spack был "
"разработан для быстрого создания высокопроизводительных научных приложений "
"на кластерах и суперкомпьютерах."

#: ../source/key_projects.rst:827
msgid ""
"Spack is not in PyPI (yet), but it requires no installation and can be used "
"immediately after cloning from GitHub."
msgstr ""
"Spack нет в PyPI (пока), но он не требует установки и может быть использован "
"сразу после клонирования с GitHub."

#: ../source/key_projects.rst:833
msgid "zest.releaser"
msgstr "zest.releaser"

#: ../source/key_projects.rst:835
msgid ""
"`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://"
"github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/"
"zest.releaser/>`__"
msgstr ""
"`Документы <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub "
"<https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi."
"org/project/zest.releaser/>`__"

#: ../source/key_projects.rst:839
msgid ""
"``zest.releaser`` is a Python package release tool providing an abstraction "
"layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to "
"automate incrementing package version numbers, updating changelogs, tagging "
"releases in source control, and uploading new packages to PyPI."
msgstr ""
"``zest.releaser`` - это инструмент для выпуска пакетов на Python, "
"предоставляющий слой абстракции поверх :ref:`twine``. Разработчики Python "
"используют ``zest.releaser`` для автоматизации увеличения номеров версий "
"пакетов, обновления журналов изменений, маркировки релизов в системе "
"контроля исходного кода и загрузки новых пакетов в PyPI."

#: ../source/key_projects.rst:846
msgid "Standard Library Projects"
msgstr "Проекты в стандартное библиотеке"

#: ../source/key_projects.rst:851
msgid "ensurepip"
msgstr "ensurepip"

#: ../source/key_projects.rst:853
msgid ""
"`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues "
"<https://bugs.python.org/>`__"
msgstr ""
"`Документация <https://docs.python.org/3/library/ensurepip.html>`__ | "
"`Замечания <http://bugs.python.org>`__"

#: ../source/key_projects.rst:856
msgid ""
"A package in the Python Standard Library that provides support for "
"bootstrapping :ref:`pip` into an existing Python installation or virtual "
"environment.  In most cases, end users won't use this module, but rather it "
"will be used during the build of the Python distribution."
msgstr ""
"Пакет стандартной библиотеки Python, обеспечивающий поддержку загрузки :ref:"
"`pip` в существующую установку Python или виртуальную среду.  В большинстве "
"случаев конечные пользователи не будут использовать этот модуль, скорее он "
"будет использоваться во время сборки дистрибутива Python."

#: ../source/key_projects.rst:864
msgid "http.server"
msgstr "http.server"

#: ../source/key_projects.rst:866
msgid ""
":doc:`Docs <python:library/http.server>` | :gh:`Issues <python/cpython/"
"issues>`"
msgstr ""
": Док:`Документы <python:library/http.server>` | :gh:`Выпуски <python/"
"cpython/issues>`"

#: ../source/key_projects.rst:869
msgid ""
"A package and command-line interface which can host a directory as a "
"website, for example as a :term:`package index <Package Index>` (see :ref:"
"`Hosting your Own Simple Repository`)."
msgstr ""
"Пакет и интерфейс командной строки, который может размещать каталог в виде "
"сайта, например, как : термин:`пакетный индекс <Пакетный индекс>` (см. :"
"ссылка:`Хостинг собственного простого репозитория`)."

#: ../source/key_projects.rst:876
msgid "venv"
msgstr "venv"

#: ../source/key_projects.rst:878
msgid ""
"`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <https://"
"github.com/python/cpython/issues>`__"
msgstr ""
"`Документация <https://docs.python.org/3/library/venv.html>`__ | `Замечания "
"<https://github.com/python/cpython/issues>`__"

#: ../source/key_projects.rst:881
msgid ""
"A package in the Python Standard Library (starting with Python 3.3) for "
"creating :term:`Virtual Environments <Virtual Environment>`.  For more "
"information, see the section on :ref:`Creating and using Virtual "
"Environments`."
msgstr ""
"Пакет в стандартной библиотеке Python (начиная с Python 3.3) для создания :"
"term:`виртуальных сред <Virtual Environment>`.  Для получения дополнительной "
"информации см. раздел :ref:`Создание и использование виртуальных сред`."

#: ../source/news.rst:2
msgid "News"
msgstr "Новости"

#: ../source/news.rst:4
msgid ""
"This document is not currently updated. Previously, the document highlighted "
"changes in Python packaging."
msgstr ""
"В настоящее время этот документ не обновляется. Ранее в этом документе "
"освещались изменения в упаковке Python."

#: ../source/news.rst:9
msgid "September 2019"
msgstr "Сентябрь 2019"

#: ../source/news.rst:10
msgid "Added a guide about publishing dists via GitHub Actions. (:pr:`647`)"
msgstr ""
"Добавлено руководство по публикации дистрибутивов через GitHub Actions. (:pr:"
"`647`)"

#: ../source/news.rst:13
msgid "August 2019"
msgstr "Август 2019"

#: ../source/news.rst:14
msgid "Updated to use :file:`python3 -m` when installing pipx. (:pr:`631`)"
msgstr ""
"Обновлено для использования :file:`python3 -m` при установке pipx. (:pr:"
"`631`)"

#: ../source/news.rst:17
msgid "July 2019"
msgstr "Июль 2019"

#: ../source/news.rst:18
msgid "Marked all PEP numbers with the :pep: role. (:pr:`629`)"
msgstr "Пометили все номера PEP ролью :pep:. (:pr:`629`)"

#: ../source/news.rst:19
msgid "Upgraded Sphinx version and removed pypa.io intersphinx. (:pr:`625`)"
msgstr "Обновлена версия Sphinx и удален pypa.io intersphinx. (:pr:`625`)"

#: ../source/news.rst:20
msgid "Mentioned :file:`find_namespace_packages`. (:pr:`622`)"
msgstr "Упоминается :file:`find_namespace_packages`. (:pr:`622`)"

#: ../source/news.rst:21
msgid "Updated directory layout examples for consistency. (:pr:`611`)"
msgstr ""
"Обновлены примеры расположения каталогов для согласованности. (:pr:`611`)"

#: ../source/news.rst:22
msgid "Updated Bandersnatch link to GitHub. (:pr:`623`)"
msgstr "Обновлена ссылка Bandersnatch на GitHub. (:pr:`623`)"

#: ../source/news.rst:25
msgid "June 2019"
msgstr "Июнь 2019"

#: ../source/news.rst:26
msgid "Fixed some typos. (:pr:`620`)"
msgstr "Исправлены некоторые опечатки. (:pr:`620`)"

#: ../source/news.rst:29
msgid "May 2019"
msgstr "Май 2019"

#: ../source/news.rst:30
msgid "Added :file:`python_requires` usage to packaging tutorial. (:pr:`613`)"
msgstr ""
"В учебник по упаковке добавлено использование :file:`python_requires`. (:pr:"
"`613`)"

#: ../source/news.rst:31
msgid "Added a MANIFEST.in guide page. (:pr:`609`)"
msgstr "Добавлена страница руководства MANIFEST.in. (:pr:`609`)"

#: ../source/news.rst:34
msgid "April 2019"
msgstr "Апрель 2019"

#: ../source/news.rst:35
msgid ""
"Added a mention for :file:`shiv` in the key projects section. (:pr:`608`)"
msgstr ""
"Добавлено упоминание о :file:`shiv` в разделе ключевых проектов. (:pr:`608`)"

#: ../source/news.rst:36
msgid "Reduced emphasis on virtualenv. (:pr:`606`)"
msgstr "Уменьшен акцент на virtualenv. (:pr:`606`)"

#: ../source/news.rst:39
msgid "March 2019"
msgstr "Март 2019"

#: ../source/news.rst:40
msgid "Moved single-sourcing guide version option to Python 3. (:pr:`605`)"
msgstr ""
"Переместите опцию версии руководства для одиночного сорсинга в Python 3. (:"
"pr:`605`)"

#: ../source/news.rst:41
msgid "Covered RTD details for contributing. (:pr:`600`)"
msgstr "Покрытые детали RTD для внесения вклада. (:pr:`600`)"

#: ../source/news.rst:44
msgid "February 2019"
msgstr "Февраль 2019"

#: ../source/news.rst:45
msgid ""
"Elaborate upon the differences between the tutorial and the real packaging "
"process. (:pr:`602`)"
msgstr ""
"Подробно расскажите о различиях между учебным пособием и реальным процессом "
"упаковки. (:pr:`602`)"

#: ../source/news.rst:46
msgid "Added instructions to install Python CLI applications. (:pr:`594`)"
msgstr "Добавлены инструкции по установке приложений Python CLI. (:pr:`594`)"

#: ../source/news.rst:49
msgid "January 2019"
msgstr "Январь 2019"

#: ../source/news.rst:50
msgid "Added :file:`--no-deps` to the packaging tutorial. (:pr:`593`)"
msgstr "В учебник по упаковке добавлен :file:`--no-deps`. (:pr:`593`)"

#: ../source/news.rst:51
msgid "Updated Sphinx and Nox. (:pr:`591`)"
msgstr "Обновлены Сфинкс и Нокс. (:pr:`591`)"

#: ../source/news.rst:52
msgid "Referenced Twine from Python3. (:pr:`581`)"
msgstr "Ссылка на Twine из Python3. (:pr:`581`)"

#: ../source/news.rst:55
msgid "December 2018"
msgstr "Декабрь 2018"

#: ../source/news.rst:56
msgid "No programmers in the office!"
msgstr "Никаких программистов в офисе!"

#: ../source/news.rst:59
msgid "November 2018"
msgstr "Ноябрь 2018"

#: ../source/news.rst:60
msgid "Removed landing page link to PyPI migration guide. (:pr:`575`)"
msgstr ""
"Удалена ссылка на целевую страницу с руководством по миграции PyPI. (:pr:"
"`575`)"

#: ../source/news.rst:61
msgid "Changed bumpversion to bump2version. (:pr:`572`)"
msgstr "Заменена bumpversion на bump2version. (:pr:`572`)"

#: ../source/news.rst:62
msgid "Added single-sourcing package version example. (:pr:`573`)"
msgstr "Добавлен пример версии пакета с одним источником. (:pr:`573`)"

#: ../source/news.rst:63
msgid "Added a guide for creating documentation. (:pr:`568`)"
msgstr "Добавлено руководство по созданию документации. (:pr:`568`)"

#: ../source/news.rst:66
msgid "October 2018"
msgstr "Октябрь 2018"

#: ../source/news.rst:67
msgid "Updated Nox package name. (:pr:`566`)"
msgstr "Обновлено имя пакета Nox. (:pr:`566`)"

#: ../source/news.rst:68
msgid "Mentioned Sphinx extensions in guides. (:pr:`562`)"
msgstr "Упоминание расширений Sphinx в руководствах. (:pr:`562`)"

#: ../source/news.rst:71
msgid "September 2018"
msgstr "Сентябрь 2018"

#: ../source/news.rst:72
msgid "Added a section on checking RST markup. (:pr:`554`)"
msgstr "Добавлен раздел о проверке разметки RST. (:pr:`554`)"

#: ../source/news.rst:73
msgid "Updated user installs page. (:pr:`558`)"
msgstr "Обновлена страница установки пользователей. (:pr:`558`)"

#: ../source/news.rst:74
msgid "Updated Google BigQuery urls. (:pr:`556`)"
msgstr "Обновленные урлы Google BigQuery. (:pr:`556`)"

#: ../source/news.rst:75
msgid "Replaced tar command with working command. (:pr:`552`)"
msgstr "Замененная команда tar с рабочей командой. (:pr:`552')"

#: ../source/news.rst:76
msgid ""
"Changed to double quotes in the pip install SomeProject==1.4. (:pr:`550`)"
msgstr ""
"Заменены на двойные кавычки в pip install SomeProject==1.4. (:pr:`550`)"

#: ../source/news.rst:79
msgid "August 2018"
msgstr "Август 2018"

#: ../source/news.rst:80
msgid "Removed the recommendation to store passwords in cleartext. (:pr:`546`)"
msgstr "Удалена рекомендация хранить пароли в открытом виде. (:pr:`546`)"

#: ../source/news.rst:81
msgid ""
"Moved the Overview to a task based lead in along with the others. (:pr:`540`)"
msgstr ""
"Перемещение \"Обзор\" в раздел \"Задачи\" вместе с остальными. (:pr:`540`)"

#: ../source/news.rst:82
msgid "Updated Python version supported by virtualenv. (:pr:`538`)"
msgstr "Обновлена версия Python, поддерживаемая virtualenv. (:pr:`538`)"

#: ../source/news.rst:83
msgid "Added outline/rough draft of new Overview page. (:pr:`519`)"
msgstr "Добавлен набросок/черновик новой страницы \"Обзор\". (:pr:`519`)"

#: ../source/news.rst:86
msgid "July 2018"
msgstr "Июль 2018"

#: ../source/news.rst:88
msgid "Improved binary extension docs. (:pr:`531`)"
msgstr "Улучшена документация по бинарным расширениям. (:pr:`531`)"

#: ../source/news.rst:89
msgid "Added scikit-build to key projects. (:pr:`530`)"
msgstr "Добавлена scikit-build в ключевые проекты. (:pr:`530`)"

#: ../source/news.rst:92
msgid "June 2018"
msgstr "Июнь 2018"

#: ../source/news.rst:94
msgid "Fixed categories of interop PEP for pypa.io. (:pr:`527`)"
msgstr "Исправлены категории interop PEP для pypa.io. (:pr:`527`)"

#: ../source/news.rst:95
msgid "Updated Markdown descriptions explanation. (:pr:`522`)"
msgstr "Обновлены пояснения к описаниям в формате Markdown. (:pr:`522`)"

#: ../source/news.rst:98
msgid "May 2018"
msgstr "Май 2018"

#: ../source/news.rst:100
msgid "Noted issues with Provides-Dist and Obsoletes-Dist. (:pr:`513`)"
msgstr "Замечены проблемы с Provides-Dist и Obsoletes-Dist. (:pr:`513`)"

#: ../source/news.rst:101
msgid ""
"Removed outdated warning about Python version mixing with Pipenv. (:pr:`501`)"
msgstr ""
"Убрано устаревшее предупреждение о смешивании версий Python с Pipenv. (:pr:"
"`501`)"

#: ../source/news.rst:102
msgid "Simplified packaging tutorial. (:pr:`498`)"
msgstr "Упрощенный учебник по упаковке. (:pr:`498`)"

#: ../source/news.rst:103
msgid "Updated Windows users instructions for clarity. (:pr:`493`)"
msgstr ""
"Обновлены инструкции для пользователей Windows для большей ясности. (:pr:"
"`493`)"

#: ../source/news.rst:104
msgid "Updated the license section description for completeness. (:pr:`492`)"
msgstr "Обновлено описание раздела лицензии для полноты. (:pr:`492`)"

#: ../source/news.rst:105
msgid "Added specification-style document to contributing section. (:pr:`489`)"
msgstr "В раздел вкладов добавлен документ в стиле спецификации. (:pr:`489`)"

#: ../source/news.rst:106
msgid "Added documentation types to contributing guide. (:pr:`485`)"
msgstr ""
"Добавлены типы документации в руководство по внесению вкладов. (:pr:`485`)"

#: ../source/news.rst:109
msgid "April 2018"
msgstr "Апрель 2018"

#: ../source/news.rst:111
msgid "Added README guide. (:pr:`461`)"
msgstr "Добавлено руководство README. (:pr:`461`)"

#: ../source/news.rst:112
msgid "Updated instructions and status for PyPI launch. (:pr:`475`)"
msgstr "Обновлены инструкции и статус для запуска PyPI. (:pr:`475`)"

#: ../source/news.rst:113
msgid "Added instructions for Warehouse. (:pr:`471`)"
msgstr "Добавлены инструкции для Хранилища. (:pr:`471`)"

#: ../source/news.rst:114
msgid "Removed GPG references from publishing tutorial. (:pr:`466`)"
msgstr "Удалены ссылки на GPG из руководства по публикации. (:pr:`466`)"

#: ../source/news.rst:115
msgid "Added 'What’s in which Python 3.4–3.6?'. (:pr:`468`)"
msgstr "Добавлен раздел \"Что в каком Python 3.4-3.6?\" (:pr:`468`)"

#: ../source/news.rst:116
msgid "Added a guide for phasing out Python versions. (:pr:`459`)"
msgstr ""
"Добавлено руководство по постепенному отказу от версий Python. (:pr:`459`)"

#: ../source/news.rst:117
msgid "Made default Description-Content-Type variant GFM. (:pr:`462`)"
msgstr "Сделан вариант Description-Content-Type по умолчанию GFM. (:pr:`462`)"

#: ../source/news.rst:120
msgid "March 2018"
msgstr "Март 2018"

#: ../source/news.rst:122
msgid "Updated \"installing scientific packages\". (:pr:`455`)"
msgstr "Обновлена \"Установка научных пакетов\". (:pr:`455`)"

#: ../source/news.rst:123
msgid ""
"Added :file:`long_description_content_type` to follow PEP 556. (:pr:`457`)"
msgstr ""
"Добавлен :file:`long_description_content_type`, чтобы следовать PEP 556. (:"
"pr:`457`)"

#: ../source/news.rst:124
msgid "Clarified a long description classifier on pypi.org. (:pr:`456`)"
msgstr "Уточнен классификатор длинных описаний на pypi.org. (:pr:`456`)"

#: ../source/news.rst:125
msgid "Updated Core Metadata spec to follow PEP 556. (:pr:`412`)"
msgstr ""
"Обновление спецификации Core Metadata в соответствии с PEP 556. (:pr:`412`)"

#: ../source/news.rst:128
msgid "February 2018"
msgstr "Февраль 2018"

#: ../source/news.rst:130
msgid ""
"Added python3-venv and python3-pip to Debian installation instructions. (:pr:"
"`445`)"
msgstr ""
"Добавлены python3-venv и python3-pip в инструкции по установке Debian. (:pr:"
"`445`)"

#: ../source/news.rst:131
msgid "Updated PyPI migration info. (:pr:`439`)"
msgstr "Обновлена информация о миграции PyPI. (:pr:`439`)"

#: ../source/news.rst:132
msgid ""
"Added a warning about managing multiple versions with pipenv. (:pr:`430`)"
msgstr ""
"Добавлено предупреждение об управлении несколькими версиями с помощью "
"pipenv. (:pr:`430`)"

#: ../source/news.rst:133
msgid "Added example of multiple emails to Core Metadata. (:pr:`429`)"
msgstr "Добавлен пример нескольких писем в Core Metadata. (:pr:`429`)"

#: ../source/news.rst:134
msgid "Added explanation of \"legacy\" in test.pypi.org/legacy. (:pr:`426`)"
msgstr "Добавлено объяснение \"legacy\" в test.pypi.org/legacy. (:pr:`426`)"

#: ../source/news.rst:137
msgid "January 2018"
msgstr "Январь 2018"

#: ../source/news.rst:139
msgid "Added a link to PyPI's list of classifiers. (:pr:`425`)"
msgstr "Добавлена ссылка на список классификаторов PyPI. (:pr:`425`)"

#: ../source/news.rst:140
msgid "Updated README.rst explanation. (:pr:`419`)"
msgstr "Обновлено пояснение в README.rst. (:pr:`419`)"

#: ../source/news.rst:143
msgid "December 2017"
msgstr "Декабрь 2017"

#: ../source/news.rst:145
msgid ""
"Replaced :file:`~` with :file:`$HOME` in guides and tutorials.  (:pr:`418`)"
msgstr ""
"Заменено :file:`~` на :file:`$HOME` в руководствах и учебниках.  (:pr:`418`)"

#: ../source/news.rst:146
msgid "Noted which fields can be used with environment markers. (:pr:`416`)"
msgstr ""
"Уточнено, какие поля могут использоваться с маркерами окружения. (:pr:`416`)"

#: ../source/news.rst:147
msgid "Updated Requires-Python section. (:pr:`414`)"
msgstr "Обновлен раздел Requires-Python. (:pr:`414`)"

#: ../source/news.rst:148
msgid "Added news page. (:pr:`404`)"
msgstr "Добавлена страница новостей (:pr:`404`)"

#: ../source/news.rst:151
msgid "November 2017"
msgstr "Ноябрь 2017"

#: ../source/news.rst:153
msgid ""
"Introduced a new dependency management tutorial based on Pipenv. (:pr:`402`)"
msgstr ""
"Представлен новый учебник по управлению зависимостями на основе Pipenv. (:pr:"
"`402`)"

#: ../source/news.rst:154
msgid ""
"Updated the *Single Sourcing Package Version* tutorial to reflect pip's "
"current strategy. (:pr:`400`)"
msgstr ""
"Обновлен учебник *Версия пакета единого источника*.чтобы отразить текущую "
"стратегию pip. (:pr:`400`)"

#: ../source/news.rst:156
msgid ""
"Added documentation about the ``py_modules`` argument to ``setup``. (:pr:"
"`398`)"
msgstr ""
"Добавлена документация об аргументе ``py_modules`` в ``setup``. (:pr:`398`)"

#: ../source/news.rst:157
msgid "Simplified the wording for the :file:`manifest.in` section. (:pr:`395`)"
msgstr "Упрощена формулировка раздела :file:`manifest.in`. (:pr:`395`)"

#: ../source/news.rst:160
msgid "October 2017"
msgstr "Октябрь 2017"

#: ../source/news.rst:162
msgid ""
"Added a specification for the :file:`entry_points.txt` file. (:pr:`398`)"
msgstr "Добавлена спецификация для файла :file:`entry_points.txt`. (:pr:`398`)"

#: ../source/news.rst:163
msgid ""
"Created a new guide for managing packages using ``pip`` and ``virtualenv``. "
"(:pr:`385`)"
msgstr ""
"Создано новое руководство по управлению пакетами с помощью ``pip`` и "
"``virtualenv``. (:pr:`385`)"

#: ../source/news.rst:164
msgid "Split the specifications page into multiple pages. (:pr:`386`)"
msgstr "Разделите страницу спецификаций на несколько страниц. (:pr:`386`)"

#: ../source/news.rst:167
msgid "September 2017"
msgstr "Сентябрь 2017"

#: ../source/news.rst:169
msgid ""
"Encouraged using ``readme_renderer`` to validate :file:`README.rst`. (:pr:"
"`379`)"
msgstr ""
"Рекомендовано использовать ``readme_renderer`` для проверки :file:`README."
"rst`. (:pr:`379`)"

#: ../source/news.rst:171
msgid "Recommended using the ``--user-base`` option. (:pr:`374`)"
msgstr "Рекомендуется использовать опцию ``--user-base``. (:pr:`374`)"

#: ../source/news.rst:174
msgid "August 2017"
msgstr "Август 2017"

#: ../source/news.rst:176
msgid ""
"Added a new, experimental tutorial on installing packages using ``Pipenv``. "
"(:pr:`369`)"
msgstr ""
"Добавлен новый, экспериментальный учебник по установке пакетов с помощью "
"``Pipenv``. (:pr:`369`)"

#: ../source/news.rst:177
msgid "Added a new guide on how to use ``TestPyPI``. (:pr:`366`)"
msgstr "Добавлено новое руководство по использованию ``TestPyPI``. (:pr:`366`)"

#: ../source/news.rst:178
msgid "Added :file:`pypi.org` as a term. (:pr:`365`)"
msgstr "Добавлен :file:`pypi.org` в качестве термина. (:pr:`365`)"

#: ../source/news.rst:181
msgid "July 2017"
msgstr "Июль 2017"

#: ../source/news.rst:183
msgid "Added ``flit`` to the key projects list. (:pr:`358`)"
msgstr "Добавлен ``flit`` в список ключевых проектов. (:pr:`358`)"

#: ../source/news.rst:184
msgid "Added ``enscons`` to the list of key projects. (:pr:`357`)"
msgstr "В список ключевых проектов добавлен ``enscons``. (:pr:`357`)"

#: ../source/news.rst:185
msgid ""
"Updated this guide's ``readme`` with instructions on how to build the guide "
"locally. (:pr:`356`)"
msgstr ""
"Обновлено ``readme`` этого руководства с инструкциями о том, как собрать "
"руководство локально. (:pr:`356`)"

#: ../source/news.rst:186
msgid ""
"Made the new ``TestPyPI`` URL more visible, adding note to homepage about "
"pypi.org. (:pr:`354`)"
msgstr ""
"Сделали новый URL ``TestPyPI`` более заметным, добавив на главную страницу "
"заметку о pypi.org. (:pr:`354`)"

#: ../source/news.rst:187
msgid ""
"Added a note about the removal of the explicit registration API. (:pr:`347`)"
msgstr "Добавлено примечание об удалении API явной регистрации. (:pr:`347`)"

#: ../source/news.rst:190
msgid "June 2017"
msgstr "Июнь 2017"

#: ../source/news.rst:192
msgid "Added a document on migrating uploads to :file:`PyPI.org`. (:pr:`339`)"
msgstr "Добавлен документ о переносе загрузок в :file:`PyPI.org`. (:pr:`339`)"

#: ../source/news.rst:193
msgid "Added documentation for ``python_requires``. (:pr:`338`)"
msgstr "Добавлена документация для ``python_requires``. (:pr:`338`)"

#: ../source/news.rst:194
msgid ""
"Added a note about PyPI migration in the *Tool Recommendations* tutorial. (:"
"pr:`335`)"
msgstr ""
"Добавлено примечание о миграции на PyPI в руководстве *Рекомендации "
"инструментов*. (:pr:`335`)"

#: ../source/news.rst:195
msgid ""
"Added a note that :file:`manifest.in` does not affect wheels. (:pr:`332`)"
msgstr ""
"Добавлено примечание о том, что :file:`manifest.in` не влияет на колеса. (:"
"pr:`332`)"

#: ../source/news.rst:196
msgid "Added a license section to the distributing guide. (:pr:`331`)"
msgstr ""
"В руководство по распространению добавлен раздел о лицензии. (:pr:`331`)"

#: ../source/news.rst:197
msgid "Expanded the section on the ``name`` argument. (:pr:`329`)"
msgstr "Расширен раздел, посвященный аргументу ``имя``. (:pr:`329`)"

#: ../source/news.rst:198
msgid "Adjusted the landing page. (:pr:`327`, :pr:`326`, :pr:`324`)"
msgstr "Скорректирована целевая страница. (:pr:`327`, :pr:`326`, :pr:`324`)"

#: ../source/news.rst:199
msgid "Updated to Sphinx 1.6.2. (:pr:`323`)"
msgstr "Обновление до Sphinx 1.6.2 (:pr:`323`)"

#: ../source/news.rst:200
msgid "Switched to the PyPA theme. (:pr:`305`)"
msgstr "Переключение на тему PyPA (:pr:`305`)"

#: ../source/news.rst:201
msgid "Re-organized the documentation into the new structure. (:pr:`318`)"
msgstr ""
"Реорганизовал документацию в соответствии с новой структурой. (:pr:`318`)"

#: ../source/news.rst:204
msgid "May 2017"
msgstr "Май 2017"

#: ../source/news.rst:206
msgid ""
"Added documentation for the ``Description-Content-Type`` field. (:pr:`258`)"
msgstr ""
"Добавлена документация для поля ``Description-Content-Type``. (:pr:`258`)"

#: ../source/news.rst:207
msgid "Added contributor and style guide. (:pr:`307`)"
msgstr "Добавлены контрибьютор и руководство по стилю. (:pr:`307`)"

#: ../source/news.rst:208
msgid ""
"Documented ``pip`` and ``easy_install``'s differences for per-project "
"indexes. (:pr:`233`)"
msgstr ""
"Документированы различия между ``pip`` и ``easy_install`` для индексов по "
"проектам. (:pr:`233`)"

#: ../source/news.rst:211
msgid "April 2017"
msgstr "Апрель 2017"

#: ../source/news.rst:213
msgid "Added travis configuration for testing pull requests. (:pr:`300`)"
msgstr ""
"Добавлена конфигурация travis для тестирования pull-запросов. (:pr:`300`)"

#: ../source/news.rst:214
msgid ""
"Mentioned the requirement of the ``wheel`` package for creating wheels (:pr:"
"`299`)"
msgstr ""
"Упоминание о необходимости использования пакета ``wheel`` для создания колес "
"(:pr:`299`)"

#: ../source/news.rst:215
msgid ""
"Removed the ``twine register`` reference in the *Distributing Packages* "
"tutorial. (:pr:`271`)"
msgstr ""
"Удалена ссылка на ``twine register`` в руководстве *Распространение "
"пакетов*. (:pr:`271`)"

#: ../source/news.rst:216
msgid "Added a topic on plugin discovery. (:pr:`294`, :pr:`296`)"
msgstr "Добавлена тема по обнаружению плагинов. (:pr:`294`, :pr:`296`)"

#: ../source/news.rst:217
msgid "Added a topic on namespace packages. (:pr:`290`)"
msgstr "Добавлена тема о пакетах пространств имен. (:pr:`290`)"

#: ../source/news.rst:218
msgid ""
"Added documentation explaining prominently how to install ``pip`` in ``/usr/"
"local``. (:pr:`230`)"
msgstr ""
"Добавлена документация, наглядно объясняющая, как установить ``pip`` в ``/"
"usr/local``. (:pr:`230`)"

#: ../source/news.rst:219
msgid ""
"Updated development mode documentation to mention that order of local "
"packages matters. (:pr:`208`)"
msgstr ""
"Обновлена документация по режиму разработки, чтобы упомянуть, что порядок "
"локальных пакетов имеет значение. (:pr:`208`)"

#: ../source/news.rst:220
msgid ""
"Convert readthedocs link for their ``.org`` -> ``.io`` migration for hosted "
"projects (:pr:`239`)"
msgstr ""
"Преобразование ссылки readthedocs для их миграции на ``.org`` -> ``.io`` для "
"размещенных проектов (:pr:`239`)"

#: ../source/news.rst:221
msgid ""
"Swapped order of :file:`setup.py` arguments for the upload command, as order "
"is significant. (:pr:`260`)"
msgstr ""
"Поменяли местами порядок аргументов :file:`setup.py` для команды upload, так "
"как порядок имеет значение. (:pr:`260`)"

#: ../source/news.rst:223
msgid ""
"Explained how to install from unsupported sources using a helper "
"application. (:pr:`289`)"
msgstr ""
"Объяснено, как устанавливать из неподдерживаемых источников с помощью "
"вспомогательного приложения. (:pr:`289`)"

#: ../source/news.rst:227
msgid "March 2017"
msgstr "Март 2017"

#: ../source/news.rst:229
msgid "Covered ``manylinux1`` in *Platform Wheels*. (:pr:`283`)"
msgstr "Покрытие ``manylinux1`` в *Platform Wheels*. (:pr:`283`)"

#: ../source/news.rst:232
msgid "February 2017"
msgstr "Февраль 2017"

#: ../source/news.rst:234
msgid "Added :pep:`518`. (:pr:`281`)"
msgstr "Добавлен :pep:`518` (:pr:`281`)"

#: ../source/overview.rst:3
msgid "Overview of Python Packaging"
msgstr "Обзор упаковки Python"

#: ../source/overview.rst:7
msgid ""
"As a general-purpose programming language, Python is designed to be used in "
"many ways. You can build web sites or industrial robots or a game for your "
"friends to play, and much more, all using the same core technology."
msgstr ""
"Будучи языком программирования общего назначения, Python предназначен для "
"разнообразного использования. Вы можете создавать веб-сайты, промышленных "
"роботов, игры для своих друзей и многое другое, используя одну и ту же "
"базовую технологию."

#: ../source/overview.rst:12
msgid ""
"Python's flexibility is why the first step in every Python project must be "
"to think about the project's audience and the corresponding environment "
"where the project will run. It might seem strange to think about packaging "
"before writing code, but this process does wonders for avoiding future "
"headaches."
msgstr ""
"Гибкость Python - вот почему первым шагом в каждом проекте на Python должно "
"быть обдумывание аудитории проекта и соответствующего окружения, в котором "
"он будет работать. Может показаться странным думать об упаковке до написания "
"кода, но этот процесс позволяет избежать головной боли в будущем."

#: ../source/overview.rst:18
msgid ""
"This overview provides a general-purpose decision tree for reasoning about "
"Python's plethora of packaging options. Read on to choose the best "
"technology for your next project."
msgstr ""
"В этом обзоре представлено дерево решений общего назначения для рассуждений "
"о множестве вариантов упаковки Python. Читайте дальше, чтобы выбрать лучшую "
"технологию для вашего следующего проекта."

#: ../source/overview.rst:23
msgid "Thinking about deployment"
msgstr "Мысли о развёртывании"

#: ../source/overview.rst:25
msgid ""
"Packages exist to be installed (or *deployed*), so before you package "
"anything, you'll want to have some answers to the deployment questions below:"
msgstr ""
"Пакеты существуют для того, чтобы их устанавливали (или *развертывали*), "
"поэтому прежде чем упаковывать что-либо, вам нужно получить ответы на "
"вопросы по развертыванию, приведенные ниже:"

#: ../source/overview.rst:29
msgid ""
"Who are your software's users? Will your software be installed by other "
"developers doing software development, operations people in a datacenter, or "
"a less software-savvy group?"
msgstr ""
"Кто будет пользоваться вашим программным обеспечением? Будет ли ваше "
"программное обеспечение устанавливаться другими разработчиками, "
"занимающимися разработкой программного обеспечения, операторами в центре "
"обработки данных или другими людьми, менее подкованными в вопросах "
"программного обеспечения?"

#: ../source/overview.rst:32
msgid ""
"Is your software intended to run on servers, desktops, mobile clients "
"(phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""
"Ваше программное обеспечение предназначено для работы на серверах, "
"настольных компьютерах, мобильных клиентах (телефонах, планшетах и т. д.) "
"или встроено в специализированные устройства?"

#: ../source/overview.rst:34
msgid ""
"Is your software installed individually, or in large deployment batches?"
msgstr ""
"Ваше программное обеспечение устанавливается индивидуально или большими "
"партиями?"

#: ../source/overview.rst:36
msgid ""
"Packaging is all about target environment and deployment experience. There "
"are many answers to the questions above and each combination of "
"circumstances has its own solutions. With this information, the following "
"overview will guide you to the packaging technologies best suited to your "
"project."
msgstr ""
"Упаковка зависит от целевой среды и опыта развертывания. Существует "
"множество ответов на поставленные выше вопросы, и для каждого сочетания "
"обстоятельств есть свои решения. Благодаря этой информации следующий обзор "
"поможет вам выбрать технологии упаковки, наиболее подходящие для вашего "
"проекта."

#: ../source/overview.rst:43
msgid "Packaging Python libraries and tools"
msgstr "Python'ьи библиотеки и инструменты для упаковки"

#: ../source/overview.rst:45
msgid ""
"You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are "
"just a few of the tools Python's ecosystem provides for distributing Python "
"code to developers, which you can read about in :doc:`guides/distributing-"
"packages-using-setuptools`."
msgstr ""
"Возможно, вы слышали о PyPI, ``setup.py`` и ``wheel`` файлах. Это лишь "
"некоторые из инструментов, предоставляемых экосистемой Python для "
"распространения кода Python среди разработчиков, о которых вы можете "
"прочитать в :doc:`guides/distributing-packages-using-setuptools`."

#: ../source/overview.rst:50
msgid ""
"The following approaches to packaging are meant for libraries and tools used "
"by technical audience in a development setting. If you're looking for ways "
"to package Python for a non-technical audience and/or a production setting, "
"skip ahead to :ref:`packaging-applications`."
msgstr ""
"Следующие подходы к упаковке предназначены для библиотек и инструментов, "
"используемых технической аудиторией в условиях разработки. Если вы ищете "
"способы упаковки Python для нетехнической аудитории и/или в производственных "
"условиях, переходите к :ref:`packaging-applications`."

#: ../source/overview.rst:56
msgid "Python modules"
msgstr "Модули Python'а"

#: ../source/overview.rst:58
msgid ""
"A Python file, provided it only relies on the standard library, can be "
"redistributed and reused. You will also need to ensure it's written for the "
"right version of Python, and only relies on the standard library."
msgstr ""
"Файл Python, если он опирается только на стандартную библиотеку, может быть "
"распространен и использован повторно. Вам также нужно убедиться, что он "
"написан для правильной версии Python и опирается только на стандартную "
"библиотеку."

#: ../source/overview.rst:63
msgid ""
"This is great for sharing simple scripts and snippets between people who "
"both have compatible Python versions (such as via email, StackOverflow, or "
"GitHub gists). There are even some entire Python libraries that offer this "
"as an option, such as :doc:`bottle.py<bottle:tutorial>` and :doc:`boltons "
"<boltons:architecture>`."
msgstr ""
"Это отлично подходит для обмена простыми скриптами и фрагментами между "
"людьми, у которых обе версии Python совместимы (например, по электронной "
"почте, через StackOverflow или GitHub gists). Есть даже целые библиотеки "
"Python, которые предлагают такую возможность, например :doc:`bottle."
"py<bottle:tutorial>` и :doc:`boltons <boltons:architecture>`."

#: ../source/overview.rst:70
msgid ""
"However, this pattern won't scale for projects that consist of multiple "
"files, need additional libraries, or need a specific version of Python, "
"hence the options below."
msgstr ""
"Однако этот шаблон не подходит для проектов, состоящих из множества файлов, "
"требующих дополнительных библиотек или конкретной версии Python, поэтому "
"ниже приведены варианты."

#: ../source/overview.rst:75
msgid "Python source distributions"
msgstr "Дистрибутивы с исходным кодом Python"

#: ../source/overview.rst:77
msgid ""
"If your code consists of multiple Python files, it's usually organized into "
"a directory structure. Any directory containing Python files can comprise "
"an :term:`Import Package`."
msgstr ""
"Если ваш код состоит из нескольких файлов Python, он обычно организован в "
"структуру каталогов. Любой каталог, содержащий файлы Python, может "
"составлять :term:`Import Package`."

#: ../source/overview.rst:81
msgid ""
"Because packages consist of multiple files, they are harder to distribute. "
"Most protocols support transferring only one file at a time (when was the "
"last time you clicked a link and it downloaded multiple files?). It's easier "
"to get incomplete transfers, and harder to guarantee code integrity at the "
"destination."
msgstr ""
"Поскольку пакеты состоят из нескольких файлов, их сложнее распространять. "
"Большинство протоколов поддерживают передачу только одного файла за раз "
"(когда вы в последний раз нажимали на ссылку и она загружала несколько "
"файлов?). Легче получить неполную передачу, и сложнее гарантировать "
"целостность кода в месте назначения."

#: ../source/overview.rst:87
msgid ""
"So long as your code contains nothing but pure Python code, and you know "
"your deployment environment supports your version of Python, then you can "
"use Python's native packaging tools to create a *source* :term:`Distribution "
"Package`, or *sdist* for short."
msgstr ""
"Если ваш код содержит только чистый код Python, и вы знаете, что ваша среда "
"развертывания поддерживает вашу версию Python, то вы можете использовать "
"собственные средства упаковки Python для создания *source* :term:"
"`Distribution Package`, или *sdist* для краткости."

#: ../source/overview.rst:92
msgid ""
"Python's *sdists* are compressed archives (``.tar.gz`` files) containing one "
"or more packages or modules. If your code is pure-Python, and you only "
"depend on other Python packages, you can go to the :ref:`source-distribution-"
"format` specification to learn more."
msgstr ""
"Python'овские *sdists* - это сжатые архивы (файлы ``.tar.gz``), содержащие "
"один или несколько пакетов или модулей. Если ваш код - это чистый Python, и "
"вы зависите только от других пакетов Python, вы можете обратиться к "
"спецификации :ref:`source-distribution-format`, чтобы узнать больше."

#: ../source/overview.rst:97
msgid ""
"If you rely on any non-Python code, or non-Python packages (such as `libxml2 "
"<https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi."
"org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi."
"org/project/numpy>`_), you will need to use the format detailed in the next "
"section, which also has many advantages for pure-Python libraries."
msgstr ""
"Если вы полагаетесь на какой-либо не-Python код или не-Python пакеты "
"(например, `libxml2 <https://en.wikipedia.org/wiki/Libxml2>`_ в случае `lxml "
"<https://pypi.org/project/lxml/>`_, или BLAS библиотеки в случае `numpy "
"<https://pypi.org/project/numpy>`_), вам нужно будет использовать формат, "
"подробно описанный в следующем разделе, который также имеет много "
"преимуществ для чисто-Python библиотек."

#: ../source/overview.rst:104
msgid ""
"Python and PyPI support multiple distributions providing different "
"implementations of the same package. For instance the unmaintained-but-"
"seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL "
"package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an "
"actively-maintained fork of PIL!"
msgstr ""
"Python и PyPI поддерживают несколько дистрибутивов, предоставляющих "
"различные реализации одного и того же пакета. Например, неосновной, но "
"многозначительный дистрибутив `PIL <https://pypi.org/project/PIL/>`_ "
"предоставляет пакет PIL, как и `Pillow <https://pypi.org/project/Pillow/>`_, "
"активно поддерживаемый форк PIL!"

#: ../source/overview.rst:111
msgid ""
"This Python packaging superpower makes it possible for Pillow to be a drop-"
"in replacement for PIL, just by changing your project's ``install_requires`` "
"or ``requirements.txt``."
msgstr ""
"Эта суперспособность упаковки Python позволяет Pillow стать полноценной "
"заменой PIL, просто изменив ``install_requires`` или ``requirements.txt`` в "
"вашем проекте."

#: ../source/overview.rst:116
msgid "Python binary distributions"
msgstr "Бинарные дистрибутивы Python"

#: ../source/overview.rst:118
msgid ""
"So much of Python's practical power comes from its ability to integrate with "
"the software ecosystem, in particular libraries written in C, C++, Fortran, "
"Rust, and other languages."
msgstr ""
"Практическая мощь Python во многом обусловлена его способностью "
"интегрироваться с экосистемой программного обеспечения, в частности с "
"библиотеками, написанными на C, C++, Fortran, Rust и других языках."

#: ../source/overview.rst:122
msgid ""
"Not all developers have the right tools or experiences to build these "
"components written in these compiled languages, so Python created the :term:"
"`Wheel`, a package format designed to ship libraries with compiled "
"artifacts. In fact, Python's package installer, ``pip``, always prefers "
"wheels because installation is always faster, so even pure-Python packages "
"work better with wheels."
msgstr ""
"Не у всех разработчиков есть нужные инструменты или опыт для создания "
"компонентов, написанных на этих компилируемых языках, поэтому Python создал :"
"term:`Wheel`, формат пакета, предназначенный для поставки библиотек со "
"скомпилированными артефактами. На самом деле, программа установки пакетов "
"Python, ``pip``, всегда предпочитает wheels, потому что установка всегда "
"быстрее, поэтому даже чисто питоновские пакеты лучше работают с wheels."

#: ../source/overview.rst:129
msgid ""
"Binary distributions are best when they come with source distributions to "
"match. Even if you don't upload wheels of your code for every operating "
"system, by uploading the sdist, you're enabling users of other platforms to "
"still build it for themselves. Default to publishing both sdist and wheel "
"archives together, *unless* you're creating artifacts for a very specific "
"use case where you know the recipient only needs one or the other."
msgstr ""
"Лучше всего, когда бинарные дистрибутивы сопровождаются дистрибутивами с "
"исходным кодом. Даже если вы не выкладываете \"колеса\" своего кода для "
"каждой операционной системы, выкладывая sdist, вы даете возможность "
"пользователям других платформ собрать его для себя. По умолчанию "
"рекомендуется публиковать архивы sdist и wheel вместе, *за исключением "
"случаев, когда вы создаете артефакты для очень специфического случая "
"использования, когда вы знаете, что получателю нужно только одно или другое."

#: ../source/overview.rst:137
msgid ""
"Python and PyPI make it easy to upload both wheels and sdists together. Just "
"follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""
"Python и PyPI позволяют легко загружать и wheels, и sdists вместе. Просто "
"следуйте руководству :doc:`tutorials/packaging-projects`."

#: ../source/overview.rst:145
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr ""
"Краткое описание возможностей Python по упаковке инструментов и библиотек."

#: ../source/overview.rst:145
msgid ""
"Python's recommended built-in library and tool packaging technologies. "
"Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?"
"v=iLVNWfPWAC8>`_."
msgstr ""
"Рекомендуемые в Python технологии упаковки встроенных библиотек и "
"инструментов. Отрывок из книги `Градиент упаковки (2017) <https://www."
"youtube.com/watch?v=iLVNWfPWAC8>`_."

#: ../source/overview.rst:152
msgid "Packaging Python applications"
msgstr "Упаковка Python'ьих приложений"

#: ../source/overview.rst:154
msgid ""
"So far we've only discussed Python's native distribution tools. Based on our "
"introduction, you would be correct to infer these built-in approaches only "
"target environments which have Python, and an audience who knows how to "
"install Python packages."
msgstr ""
"До сих пор мы обсуждали только встроенные средства распространения Python. "
"Исходя из нашего вступления, вы можете сделать вывод, что эти встроенные "
"подходы предназначены только для сред, в которых есть Python, и для "
"аудитории, которая знает, как устанавливать пакеты Python."

#: ../source/overview.rst:159
msgid ""
"With the variety of operating systems, configurations, and people out there, "
"this assumption is only safe when targeting a developer audience."
msgstr ""
"Учитывая разнообразие операционных систем, конфигураций и людей, это "
"предположение безопасно только при ориентации на аудиторию разработчиков."

#: ../source/overview.rst:163
msgid ""
"Python's native packaging is mostly built for distributing reusable code, "
"called libraries, between developers. You can piggyback **tools**, or basic "
"applications for developers, on top of Python's library packaging, using "
"technologies like :doc:`setuptools entry_points <setuptools:userguide/"
"entry_point>`."
msgstr ""
"Собственная упаковка Python в основном создана для распространения "
"многократно используемого кода, называемого библиотеками, между "
"разработчиками. Вы можете создавать **инструменты**, или базовые приложения "
"для разработчиков, поверх упаковки библиотек Python, используя такие "
"технологии, как :doc:`setuptools entry_points <setuptools:userguide/"
"entry_point>`."

#: ../source/overview.rst:169
msgid ""
"Libraries are building blocks, not complete applications. For distributing "
"applications, there's a whole new world of technologies out there."
msgstr ""
"Библиотеки - это строительные блоки, а не готовые приложения. Для "
"распространения приложений существует целый мир новых технологий."

#: ../source/overview.rst:173
msgid ""
"The next few sections organize these application packaging options according "
"to their dependencies on the target environment, so you can choose the right "
"one for your project."
msgstr ""
"В следующих нескольких разделах эти варианты упаковки приложений расположены "
"в соответствии с их зависимостью от целевой среды, чтобы вы могли выбрать "
"подходящий для своего проекта."

#: ../source/overview.rst:178
msgid "Depending on a framework"
msgstr "В зависимости от фреймворка"

#: ../source/overview.rst:180
msgid ""
"Some types of Python applications, like web site backends and other network "
"services, are common enough that they have frameworks to enable their "
"development and packaging. Other types of applications, like dynamic web "
"frontends and mobile clients, are complex enough to target that a framework "
"becomes more than a convenience."
msgstr ""
"Некоторые типы приложений Python, такие как бэкенды веб-сайтов и другие "
"сетевые сервисы, достаточно распространены, чтобы для их разработки и "
"упаковки существовали фреймворки. Другие типы приложений, такие как "
"динамические веб-фронтенды и мобильные клиенты, достаточно сложны, чтобы "
"фреймворк стал не просто удобством."

#: ../source/overview.rst:186
msgid ""
"In all these cases, it makes sense to work backwards, from the framework's "
"packaging and deployment story. Some frameworks include a deployment system "
"which wraps the technologies outlined in the rest of the guide. In these "
"cases, you'll want to defer to your framework's packaging guide for the "
"easiest and most reliable production experience."
msgstr ""
"Во всех этих случаях имеет смысл работать в обратном направлении, начиная с "
"истории упаковки и развертывания фреймворка. Некоторые фреймворки включают в "
"себя систему развертывания, в которой используются технологии, описанные в "
"остальной части руководства. В этих случаях вам лучше обратиться к "
"руководству по упаковке вашего фреймворка, чтобы получить наиболее простой и "
"надежный опыт производства."

#: ../source/overview.rst:192
msgid ""
"If you ever wonder how these platforms and frameworks work under the hood, "
"you can always read the sections beyond."
msgstr ""
"Если вам интересно, как эти платформы и фреймворки работают \"под капотом\", "
"вы всегда можете прочитать разделы дальше."

#: ../source/overview.rst:196
msgid "Service platforms"
msgstr "Сервисные платформы"

#: ../source/overview.rst:198
msgid ""
"If you're developing for a \"`Platform-as-a-Service <https://en.wikipedia."
"org/wiki/Platform_as_a_service>`_\" or \"PaaS\", you are going to want to "
"follow their respective packaging guides. These types of platforms take care "
"of packaging and deployment, as long as you follow their patterns. Most "
"software does not fit one of these templates, hence the existence of all the "
"other options below."
msgstr ""
"Если вы разрабатываете для \"Платформы как сервиса <https://en.wikipedia.org/"
"wiki/Platform_as_a_service>`_\" или \"PaaS\", вам следует следовать "
"соответствующим руководствам по упаковке. Эти типы платформ берут на себя "
"заботу об упаковке и развертывании, если вы следуете их шаблонам. "
"Большинство программ не подходит ни под один из этих шаблонов, поэтому "
"существуют все остальные варианты, описанные ниже."

#: ../source/overview.rst:205
msgid ""
"If you're developing software that will be deployed to machines you own, "
"users' personal computers, or any other arrangement, read on."
msgstr ""
"Если вы разрабатываете программное обеспечение, которое будет развернуто на "
"машинах, принадлежащих вам, персональных компьютерах пользователей или в "
"любом другом месте, читайте дальше."

#: ../source/overview.rst:209
msgid "Web browsers and mobile applications"
msgstr "Веб-браузеры и мобильные приложения"

#: ../source/overview.rst:211
msgid ""
"Python's steady advances are leading it into new spaces. These days you can "
"write a mobile app or web application frontend in Python. While the language "
"may be familiar, the packaging and deployment practices are brand new."
msgstr ""
"Постоянное развитие Python приводит его в новые пространства. В наши дни на "
"Python можно написать мобильное приложение или фронтенд веб-приложения. Хотя "
"язык может быть знакомым, практика упаковки и развертывания совершенно новая."

#: ../source/overview.rst:216
msgid ""
"If you're planning on releasing to these new frontiers, you'll want to check "
"out the following frameworks, and refer to their packaging guides:"
msgstr ""
"Если вы планируете выходить на эти новые рубежи, вам стоит обратить внимание "
"на следующие фреймворки и ознакомиться с их руководствами по упаковке:"

#: ../source/overview.rst:220
#, fuzzy
msgid "`Kivy <https://kivy.org/>`_"
msgstr "`Kivy <https://kivy.org/#home>`_"

#: ../source/overview.rst:221
msgid "`Beeware <https://pybee.org/>`_"
msgstr "`Beeware <https://pybee.org/>`_"

#: ../source/overview.rst:222
msgid "`Brython <https://brython.info/>`_"
msgstr "`Brython <https://brython.info/>`_"

#: ../source/overview.rst:223
#, fuzzy
msgid "`Flexx <https://flexx.readthedocs.io/en/latest/>`_"
msgstr "`Flexx <http://flexx.readthedocs.io/en/latest/>`_"

#: ../source/overview.rst:225
msgid ""
"If you are *not* interested in using a framework or platform, or just wonder "
"about some of the technologies and techniques utilized by the frameworks "
"above, continue reading below."
msgstr ""
"Если вы *не* заинтересованы в использовании фреймворка или платформы, или "
"вам просто интересно узнать о некоторых технологиях и методах, используемых "
"в вышеперечисленных фреймворках, продолжайте читать ниже."

#: ../source/overview.rst:230
msgid "Depending on a pre-installed Python"
msgstr "В зависимости от предустановленного Python'а"

#: ../source/overview.rst:232
msgid ""
"Pick an arbitrary computer, and depending on the context, there's a very "
"good chance Python is already installed. Included by default in most Linux "
"and Mac operating systems for many years now, you can reasonably depend on "
"Python preexisting in your data centers or on the personal machines of "
"developers and data scientists."
msgstr ""
"Выберите произвольный компьютер, и, в зависимости от контекста, с большой "
"вероятностью Python уже установлен. Уже много лет он включен по умолчанию в "
"большинство операционных систем Linux и Mac, поэтому вы можете с "
"уверенностью рассчитывать на то, что Python уже есть в ваших центрах "
"обработки данных или на персональных компьютерах разработчиков и "
"специалистов по обработке данных."

#: ../source/overview.rst:238
msgid "Technologies which support this model:"
msgstr "Технологии, поддерживающие эту модель:"

#: ../source/overview.rst:240
msgid ":gh:`PEX <pantsbuild/pex#user-content-pex>` (Python EXecutable)"
msgstr ":gh:`PEX <pantsbuild/pex#user-content-pex>` (исполняемый файл Python)"

#: ../source/overview.rst:241
msgid ""
":doc:`zipapp <python:library/zipapp>` (does not help manage dependencies, "
"requires Python 3.5+)"
msgstr ""
":doc:`zipapp <python:library/zipapp>` (не помогает управлять зависимостями, "
"требует Python 3.5+)"

#: ../source/overview.rst:242
msgid ":gh:`shiv <linkedin/shiv#user-content-shiv>` (requires Python 3)"
msgstr ":gh:`shiv <linkedin/shiv#user-content-shiv>` (требуется Python 3)"

#: ../source/overview.rst:244
msgid ""
"Of all the approaches here, depending on a pre-installed Python relies the "
"most on the target environment. Of course, this also makes for the smallest "
"package, as small as single-digit megabytes, or even kilobytes."
msgstr ""
"Из всех представленных здесь подходов зависимость от предустановленного "
"Python в наибольшей степени зависит от целевого окружения. Конечно, при этом "
"получается и самый маленький пакет, размером в одну цифру мегабайта или даже "
"килобайта."

#: ../source/overview.rst:249
msgid ""
"In general, decreasing the dependency on the target system increases the "
"size of our package, so the solutions here are roughly arranged by "
"increasing size of output."
msgstr ""
"В общем случае уменьшение зависимости от целевой системы увеличивает размер "
"нашего пакета, поэтому решения здесь расположены примерно по возрастанию "
"размера выхода."

#: ../source/overview.rst:256
msgid "Depending on a separate software distribution ecosystem"
msgstr ""
"В зависимости от отдельной экосистемы распространения программного "
"обеспечения"

#: ../source/overview.rst:258
msgid ""
"For a long time many operating systems, including Mac and Windows, lacked "
"built-in package management. Only recently did these OSes gain so-called "
"\"app stores\", but even those focus on consumer applications and offer "
"little for developers."
msgstr ""
"Долгое время многие операционные системы, включая Mac и Windows, не имели "
"встроенных средств управления пакетами. Лишь недавно в этих ОС появились так "
"называемые \"магазины приложений\", но даже они ориентированы на "
"потребительские приложения и мало что предлагают разработчикам."

#: ../source/overview.rst:263
msgid ""
"Developers long sought remedies, and in this struggle, emerged with their "
"own package management solutions, such as `Homebrew <https://brew.sh/>`_. "
"The most relevant alternative for Python developers is a package ecosystem "
"called `Anaconda <https://en.wikipedia.org/wiki/"
"Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is "
"increasingly common in academic, analytical, and other data-oriented "
"environments, even making its way `into server-oriented environments "
"<https://web.archive.org/web/20190403064038/https://www.paypal-engineering."
"com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""
"Разработчики долго искали выход из ситуации, и в этой борьбе появились "
"собственные решения по управлению пакетами, такие как `Homebrew <https://"
"brew.sh/>`_. Наиболее актуальной альтернативой для разработчиков Python "
"является экосистема пакетов под названием `Anaconda <https://en.wikipedia."
"org/wiki/Anaconda_(Python_distribution)>`_. Anaconda построена на основе "
"Python и получает все большее распространение в академических, аналитических "
"и других средах, ориентированных на работу с данными, и даже пробивается `в "
"серверно-ориентированные среды` <https://web.archive.org/web/20190403064038/"
"https://www.paypal-engineering.com/2016/09/07/python-packaging-at-paypal/>`_."

#: ../source/overview.rst:273
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr "Инструкции по созданию и публикации для экосистемы Anaconda:"

#: ../source/overview.rst:275
msgid ""
"`Building libraries and applications with conda <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"
msgstr ""
"`Создание библиотек и приложений с помощью conda <https://conda.io/projects/"
"conda-build/en/latest/user-guide/tutorials/index.html>`_"

#: ../source/overview.rst:276
msgid ""
"`Transitioning a native Python package to Anaconda <https://conda.io/"
"projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton."
"html>`_"
msgstr ""
"`Переход родного пакета Python на Anaconda <https://conda.io/projects/conda-"
"build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`_"

#: ../source/overview.rst:278
msgid ""
"A similar model involves installing an alternative Python distribution, but "
"does not support arbitrary operating system-level packages:"
msgstr ""
"Аналогичная модель предполагает установку альтернативного дистрибутива "
"Python, но не поддерживает произвольные пакеты на уровне операционной "
"системы:"

#: ../source/overview.rst:282
msgid ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"
msgstr ""
"`ActiveState ActivePython <https://www.activestate.com/products/python/>`_"

#: ../source/overview.rst:283
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr "`WinPython <http://winpython.github.io/>`_"

#: ../source/overview.rst:288
msgid "Bringing your own Python executable"
msgstr "Поставка собственного исполняемого файла Python'а"

#: ../source/overview.rst:290
msgid ""
"Computing as we know it is defined by the ability to execute programs. Every "
"operating system natively supports one or more formats of programs they can "
"natively execute."
msgstr ""
"Вычислительная техника, как мы ее знаем, определяется способностью выполнять "
"программы. Каждая операционная система поддерживает один или несколько "
"форматов программ, которые она может выполнять."

#: ../source/overview.rst:294
msgid ""
"There are many techniques and technologies which turn your Python program "
"into one of these formats, most of which involve embedding the Python "
"interpreter and any other dependencies into a single executable file."
msgstr ""
"Существует множество методик и технологий, позволяющих превратить вашу "
"программу на Python в один из этих форматов. Большинство из них "
"подразумевает встраивание интерпретатора Python и других зависимостей в один "
"исполняемый файл."

#: ../source/overview.rst:299
msgid ""
"This approach, called *freezing*, offers wide compatibility and seamless "
"user experience, though often requires multiple technologies, and a good "
"amount of effort."
msgstr ""
"Такой подход, называемый *заморозкой*, обеспечивает широкую совместимость и "
"беспроблемный пользовательский опыт, хотя зачастую требует использования "
"нескольких технологий и значительных усилий."

#: ../source/overview.rst:303
msgid "A selection of Python freezers:"
msgstr "Выбор морозильных камер Python:"

#: ../source/overview.rst:305
msgid ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ - Cross-"
"platform"
msgstr ""
"`pyInstaller <https://pyinstaller.readthedocs.io/en/stable/>`_ – "
"кроссплатформенный"

#: ../source/overview.rst:306
msgid ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""
"`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - "
"Кроссплатформенный"

#: ../source/overview.rst:307
msgid ""
"`constructor <https://github.com/conda/constructor>`_ - For command-line "
"installers"
msgstr ""
"`constructor <https://github.com/conda/constructor>`_ - Для инсталляторов "
"командной строки"

#: ../source/overview.rst:308
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr "`py2exe <http://www.py2exe.org/>`_ - только для Windows"

#: ../source/overview.rst:309
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - только для Mac"

#: ../source/overview.rst:310
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr "`osnap <https://github.com/jamesabel/osnap>`_ - Windows и Mac"

#: ../source/overview.rst:311
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr "`pynsist <https://pypi.org/project/pynsist/>`_ - только для Windows"

#: ../source/overview.rst:313
msgid ""
"Most of the above imply single-user deployments. For multi-component server "
"applications, see :gh:`Chef Omnibus <chef/omnibus#user-content--omnibus>`."
msgstr ""
"Большинство из вышеперечисленного подразумевает однопользовательское "
"развертывание. Для многокомпонентных серверных приложений смотрите :gh:`Chef "
"Omnibus <chef/omnibus#user-content--omnibus>`."

#: ../source/overview.rst:319
msgid "Bringing your own userspace"
msgstr "Поставка собственного пользовательского пространства"

#: ../source/overview.rst:321
msgid ""
"An increasing number of operating systems -- including Linux, Mac OS, and "
"Windows -- can be set up to run applications packaged as lightweight images, "
"using a relatively modern arrangement often referred to as `operating-system-"
"level virtualization <https://en.wikipedia.org/wiki/Operating-system-"
"level_virtualization>`_, or *containerization*."
msgstr ""
"Все больше операционных систем, включая Linux, Mac OS и Windows, могут быть "
"настроены на запуск приложений, упакованных в легкие образы, с помощью "
"относительно современной схемы, часто называемой `виртуализацией на уровне "
"операционной системы` <https://en.wikipedia.org/wiki/Operating-system-"
"level_virtualization>`_, или *контейнеризацией*."

#: ../source/overview.rst:328
msgid ""
"These techniques are mostly Python agnostic, because they package whole OS "
"filesystems, not just Python or Python packages."
msgstr ""
"Эти методы в основном не зависят от Python, поскольку они упаковывают целые "
"файловые системы ОС, а не только Python или пакеты Python."

#: ../source/overview.rst:331
msgid ""
"Adoption is most extensive among Linux servers, where the technology "
"originated and where the technologies below work best:"
msgstr ""
"Наиболее широкое распространение эта технология получила на серверах под "
"управлением Linux, где она зародилась и где представленные ниже технологии "
"работают лучше всего:"

#: ../source/overview.rst:334
msgid "`AppImage <https://appimage.org/>`_"
msgstr "`AppImage <https://appimage.org/>`_"

#: ../source/overview.rst:335
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr "`Docker <https://www.fullstackpython.com/docker.html>`_"

#: ../source/overview.rst:336
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr "`Flatpak <https://flatpak.org/>`_"

#: ../source/overview.rst:337
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr "`Snapcraft <https://snapcraft.io/>`_"

#: ../source/overview.rst:340
msgid "Bringing your own kernel"
msgstr "Поставка собственного ядра"

#: ../source/overview.rst:342
#, fuzzy
#| msgid ""
#| "Most operating systems support some form of classical virtualization, "
#| "running applications packaged as images containing a full operating "
#| "system of their own. Running these virtual machines, or VMs, is a mature "
#| "approach, widespread in data center environments."
msgid ""
"Most desktop operating systems support some form of classical "
"virtualization, running applications packaged as images containing a full "
"operating system of their own. Running these virtual machines, or VMs, is a "
"mature approach, widespread in data center environments."
msgstr ""
"Большинство операционных систем поддерживают ту или иную форму классической "
"виртуализации, позволяя запускать приложения, упакованные в образы, "
"содержащие полноценную операционную систему. Запуск таких виртуальных машин, "
"или ВМ, является зрелым подходом, широко распространенным в средах центров "
"обработки данных."

#: ../source/overview.rst:347
msgid ""
"These techniques are mostly reserved for larger scale deployments in data "
"centers, though certain complex applications can benefit from this "
"packaging. The technologies are Python agnostic, and include:"
msgstr ""
"Эти технологии в основном предназначены для крупномасштабных развертываний в "
"центрах обработки данных, хотя некоторые сложные приложения могут извлечь "
"выгоду из такой упаковки. Технологии не зависят от Python и включают в себя:"

#: ../source/overview.rst:351
msgid "KVM on Linux"
msgstr ""

#: ../source/overview.rst:352
msgid "Hyper-V on Windows"
msgstr ""

#: ../source/overview.rst:353
msgid ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_, and :doc:`other formats "
"<openstack:user/formats>`"
msgstr ""
"`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en."
"wikipedia.org/wiki/Amazon_Machine_Image>`_, и :doc:`другие форматы "
"<openstack:user/formats>`"

#: ../source/overview.rst:356
#, fuzzy
#| msgid ""
#| "`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud "
#| "management system in Python, with extensive VM support"
msgid ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud "
"management system written in Python, with extensive VM support"
msgstr ""
"`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - система "
"управления облаком на Python, с широкой поддержкой виртуальных машин"

#: ../source/overview.rst:360
msgid "Bringing your own hardware"
msgstr "Поставка собственного оборудования"

#: ../source/overview.rst:362
msgid ""
"The most all-encompassing way to ship your software would be to ship it "
"already-installed on some hardware. This way, your software's user would "
"require only electricity."
msgstr ""
"Самым универсальным способом доставки программного обеспечения является его "
"установка на какое-либо оборудование. Таким образом, пользователю вашей "
"программы потребуется только электричество."

#: ../source/overview.rst:366
msgid ""
"Whereas the virtual machines described above are primarily reserved for the "
"tech-savvy, you can find hardware appliances being used by everyone from the "
"most advanced data centers to the youngest children."
msgstr ""
"В то время как виртуальные машины, описанные выше, предназначены в основном "
"для технически подкованных людей, аппаратные устройства могут использоваться "
"всеми - от самых продвинутых центров обработки данных до самых маленьких "
"детей."

#: ../source/overview.rst:370
msgid ""
"Embed your code on an :gh:`Adafruit <adafruit/circuitpython>`, `MicroPython "
"<https://micropython.org/>`_, or more-powerful hardware running Python, then "
"ship it to the datacenter or your users' homes. They plug and play, and you "
"can call it a day."
msgstr ""
"Вставьте свой код в :gh:`Adafruit <adafruit/circuitpython>`, `MicroPython "
"<https://micropython.org/>`_ или более мощное оборудование под управлением "
"Python, затем отправьте его в центр обработки данных или домой к вашим "
"пользователям. Они подключаются и играют, и можно считать, что все готово."

#: ../source/overview.rst:379
msgid "A summary of technologies used to package Python applications."
msgstr ""
"Краткое описание технологий, используемых для упаковки приложений Python."

#: ../source/overview.rst:379
msgid ""
"The simplified gamut of technologies used to package Python applications."
msgstr ""
"Упрощенный набор технологий, используемых для упаковки приложений на Python."

#: ../source/overview.rst:382
msgid "What about..."
msgstr "Как насчёт..."

#: ../source/overview.rst:384
msgid ""
"The sections above can only summarize so much, and you might be wondering "
"about some of the more conspicuous gaps."
msgstr ""
"Приведенные выше разделы могут лишь подытожить многое, и вам, возможно, "
"будет интересно узнать о некоторых наиболее заметных пробелах."

#: ../source/overview.rst:388
msgid "Operating system packages"
msgstr "Пакетов операционной системы"

#: ../source/overview.rst:390
msgid ""
"As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some "
"operating systems have package managers of their own. If you're very sure of "
"the operating system you're targeting, you can depend directly on a format "
"like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, "
"Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ "
"(for Red Hat, Fedora, etc.), and use that built-in package manager to take "
"care of installation, and even deployment. You can even use `FPM <https://"
"fpm.readthedocs.io/en/latest/cli-reference.html#virtualenv>`_ to generate "
"both deb and RPMs from the same source."
msgstr ""
"Как упоминалось выше в :ref:`зависимость от отдельной экосистемы`, некоторые "
"операционные системы имеют собственные менеджеры пакетов. Если вы очень "
"уверены в операционной системе, на которую ориентируетесь, вы можете "
"напрямую зависеть от такого формата, как `deb <https://en.wikipedia.org/wiki/"
"Deb_(file_format)>`_ (для Debian, Ubuntu и т.д.) или `RPM <https://en."
"wikipedia.org/wiki/RPM_Package_Manager>`_ (для Red Hat, Fedora и т.д.), и "
"использовать этот встроенный менеджер пакетов для установки и даже "
"развертывания. Вы даже можете использовать `FPM <https://fpm.readthedocs.io/"
"en/latest/cli-reference.html#virtualenv>`_ для генерации deb и RPM из одного "
"источника."

#: ../source/overview.rst:401
msgid ""
"In most deployment pipelines, the OS package manager is just one piece of "
"the puzzle."
msgstr ""
"В большинстве pipконвейеров развертывания менеджер пакетов ОС является лишь "
"одним из элементов головоломки."

#: ../source/overview.rst:407
msgid ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` have been an indispensable "
"tool for multiple generations of Python developer, but are slowly fading "
"from view, as they are being wrapped by higher-level tools. With packaging "
"in particular, virtualenvs are used as a primitive in :doc:`the dh-"
"virtualenv tool <dh-virtualenv:tutorial>` and `osnap <https://github.com/"
"jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""
":doc:`Virtualenvs <python-guide:dev/virtualenvs>` были незаменимым "
"инструментом для многих поколений разработчиков Python, но постепенно "
"исчезают из поля зрения, поскольку их обволакивают инструменты более "
"высокого уровня. В частности, при упаковке virtualenvs используются в "
"качестве примитива в :doc:`инструменте dh-virtualenv <dh-virtualenv:"
"tutorial>` и `osnap <https://github.com/jamesabel/osnap>`_, оба из которых "
"оборачивают virtualenvs в самодостаточный способ."

#: ../source/overview.rst:416
msgid ""
"For production deployments, do not rely on running ``python -m pip install`` "
"from the Internet into a virtualenv, as one might do in a development "
"environment. The overview above is full of much better solutions."
msgstr ""
"При развертывании на производстве не стоит полагаться на запуск ``python -m "
"pip install`` из интернета в virtualenv, как это можно сделать в среде "
"разработки. В обзоре выше есть много лучших решений."

#: ../source/overview.rst:421
msgid "Security"
msgstr "Безопасность"

#: ../source/overview.rst:423
msgid ""
"The further down the gradient you come, the harder it gets to update "
"components of your package. Everything is more tightly bound together."
msgstr ""
"Чем дальше вниз по градиенту, тем сложнее обновлять компоненты вашего "
"пакета. Все более тесно связано друг с другом."

#: ../source/overview.rst:426
msgid ""
"For example, if a kernel security issue emerges, and you're deploying "
"containers, the host system's kernel can be updated without requiring a new "
"build on behalf of the application. If you deploy VM images, you'll need a "
"new build. Whether or not this dynamic makes one option more secure is still "
"a bit of an old debate, going back to the still-unsettled matter of `static "
"versus dynamic linking <https://www.google.com/search?"
"channel=fs&q=static+vs+dynamic+linking>`_."
msgstr ""
"Например, если возникает проблема безопасности ядра, а вы развертываете "
"контейнеры, ядро хост-системы можно обновить, не требуя новой сборки от "
"имени приложения. Если же вы развертываете образы виртуальных машин, вам "
"потребуется новая сборка. Вопрос о том, делает ли эта динамика один из "
"вариантов более безопасным, все еще остается немного старым спором, "
"восходящим к до сих пор не решенному вопросу `статического и динамического "
"связывания <https://www.google.com/search?"
"channel=fs&q=static+vs+dynamic+linking>`_."

#: ../source/overview.rst:435
msgid "Wrap up"
msgstr "Заключение"

#: ../source/overview.rst:437
msgid ""
"Packaging in Python has a bit of a reputation for being a bumpy ride. This "
"impression is mostly a byproduct of Python's versatility. Once you "
"understand the natural boundaries between each packaging solution, you begin "
"to realize that the varied landscape is a small price Python programmers pay "
"for using one of the most balanced, flexible languages available."
msgstr ""
"Упаковка в Python имеет репутацию не очень удобной. Это впечатление в "
"основном является побочным продуктом универсальности Python. Как только вы "
"поймете естественные границы между каждым решением для упаковки, вы начнете "
"понимать, что разнообразный ландшафт - это небольшая цена, которую "
"программисты на Python платят за использование одного из самых "
"сбалансированных и гибких языков."

#: ../source/specifications/binary-distribution-format.rst:7
msgid "Binary distribution format"
msgstr "Формат распространения двоичных пакетов"

#: ../source/specifications/binary-distribution-format.rst:9
msgid ""
"This page specifies the binary distribution format for Python packages, also "
"called the wheel format."
msgstr ""
"Эта страница определяет формат распространения бинарных пакетов Python, "
"также называемый форматом колеса."

#: ../source/specifications/binary-distribution-format.rst:12
msgid ""
"A wheel is a ZIP-format archive with a specially formatted file name and the "
"``.whl`` extension.  It contains a single distribution nearly as it would be "
"installed according to PEP 376 with a particular installation scheme.  "
"Although a specialized installer is recommended, a wheel file may be "
"installed by simply unpacking into site-packages with the standard 'unzip' "
"tool while preserving enough information to spread its contents out onto "
"their final paths at any later time."
msgstr ""
"Колесо - это архив формата ZIP со специальным именем файла и расширением ``."
"whl``.  Он содержит один дистрибутив почти в том виде, в каком он будет "
"установлен согласно PEP 376 при определенной схеме установки.  Хотя "
"рекомендуется использовать специализированный инсталлятор, файл wheel может "
"быть установлен простой распаковкой в site-пакеты стандартным инструментом "
"'unzip', сохраняя при этом достаточно информации для того, чтобы разложить "
"его содержимое по конечным путям в любое последующее время."

#: ../source/specifications/binary-distribution-format.rst:22
msgid "Details"
msgstr "Детали"

#: ../source/specifications/binary-distribution-format.rst:25
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr "Установка колеса 'distribution-1.0-py32-none-any.whl'"

#: ../source/specifications/binary-distribution-format.rst:27
msgid "Wheel installation notionally consists of two phases:"
msgstr "Установка колес условно состоит из двух этапов:"

#: ../source/specifications/binary-distribution-format.rst:29
msgid "Unpack."
msgstr "Распакуйте."

#: ../source/specifications/binary-distribution-format.rst:31
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr "Разбор ``distribution-1.0.dist-info/WHEEL``."

#: ../source/specifications/binary-distribution-format.rst:32
msgid ""
"Check that installer is compatible with Wheel-Version.  Warn if minor "
"version is greater, abort if major version is greater."
msgstr ""
"Проверка совместимости программы установки с Wheel-Version.  Предупреждение, "
"если минорная версия больше, прерывание, если мажорная версия больше."

#: ../source/specifications/binary-distribution-format.rst:34
msgid ""
"If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""
"Если Root-Is-Purelib == 'true', распакуйте архив в purelib (site-packages)."

#: ../source/specifications/binary-distribution-format.rst:36
msgid "Else unpack archive into platlib (site-packages)."
msgstr "Иначе распакуйте архив в platlib (site-packages)."

#: ../source/specifications/binary-distribution-format.rst:38
msgid "Spread."
msgstr "Распространение."

#: ../source/specifications/binary-distribution-format.rst:40
msgid ""
"Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there is "
"data) ``distribution-1.0.data/``."
msgstr ""
"Распакованный архив включает ``distribution-1.0.dist-info/`` и (если есть "
"данные) ``distribution-1.0.data/``."

#: ../source/specifications/binary-distribution-format.rst:42
msgid ""
"Move each subtree of ``distribution-1.0.data/`` onto its destination path. "
"Each subdirectory of ``distribution-1.0.data/`` is a key into a dict of "
"destination directories, such as ``distribution-1.0.data/(purelib|platlib|"
"headers|scripts|data)``. These subdirectories are :ref:`installation paths "
"defined by sysconfig <python:installation_paths>`."
msgstr ""
"Переместите каждое поддерево из ``распределение-1.0. данные/`` на путь "
"назначения. Каждый подкаталог ``распределение-1.0. данные/`` является ключом "
"к дикте директорий назначения, например ``распределение-1.0. данные/(purelib|"
"platlib|headers|scripts|data)``. Эти подкаталоги являются : ссылка:`путями "
"установки, определенными sysconfig <python:installation_paths>`."

#: ../source/specifications/binary-distribution-format.rst:48
msgid ""
"If applicable, update scripts starting with ``#!python`` to point to the "
"correct interpreter."
msgstr ""
"Если применимо, обновите скрипты, начинающиеся с ``#!python``, чтобы они "
"указывали на правильный интерпретатор."

#: ../source/specifications/binary-distribution-format.rst:50
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""
"Обновите ``distribution-1.0.dist-info/RECORD`` с установленными путями."

#: ../source/specifications/binary-distribution-format.rst:52
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr "Удалите пустой каталог ``distribution-1.0.data``."

#: ../source/specifications/binary-distribution-format.rst:53
msgid ""
"Compile any installed .py to .pyc. (Uninstallers should be smart enough to "
"remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""
"Скомпилируйте все установленные .py в .pyc. (Деинсталляторы должны быть "
"достаточно умны, чтобы удалять .pyc, даже если он не упомянут в RECORD)"

#: ../source/specifications/binary-distribution-format.rst:57
msgid "Recommended installer features"
msgstr "Рекомендуемые функции программы установки"

#: ../source/specifications/binary-distribution-format.rst:67
msgid "Rewrite ``#!python``."
msgstr "Переписать ``#!python``."

#: ../source/specifications/binary-distribution-format.rst:60
msgid ""
"In wheel, scripts are packaged in ``{distribution}-{version}.data/scripts/"
"``.  If the first line of a file in ``scripts/`` starts with exactly ``b'#!"
"python'``, rewrite to point to the correct interpreter.  Unix installers may "
"need to add the +x bit to these files if the archive was created on Windows."
msgstr ""
"В wheel скрипты упаковываются в ``{distribution}-{version}.data/scripts/``.  "
"Если первая строка файла в ``scripts/`` начинается с ``b'#!python'``, "
"перепишите ее, чтобы она указывала на правильный интерпретатор.  "
"Установщикам Unix может потребоваться добавить бит +x к этим файлам, если "
"архив был создан под Windows."

#: ../source/specifications/binary-distribution-format.rst:66
msgid ""
"The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a GUI "
"script instead of a console script."
msgstr ""
"Допускается использование соглашения ``b'#!pythonw'``. ``b'#!pythonw'`` "
"указывает на графический, а не консольный сценарий."

#: ../source/specifications/binary-distribution-format.rst:72
msgid "Generate script wrappers."
msgstr "Генерируйте обертки для скриптов."

#: ../source/specifications/binary-distribution-format.rst:70
msgid ""
"In wheel, scripts packaged on Unix systems will certainly not have "
"accompanying .exe wrappers.  Windows installers may want to add them during "
"install."
msgstr ""
"В колесе скрипты, упакованные в Unix-системы, конечно, не будут иметь "
"сопровождающих .exe-оберток.  Установщики Windows могут захотеть добавить их "
"во время установки."

#: ../source/specifications/binary-distribution-format.rst:75
msgid "Recommended archiver features"
msgstr "Рекомендуемые функции архиватора"

#: ../source/specifications/binary-distribution-format.rst:82
msgid "Place ``.dist-info`` at the end of the archive."
msgstr "Поместите ``.dist-info`` в конец архива."

#: ../source/specifications/binary-distribution-format.rst:78
msgid ""
"Archivers are encouraged to place the ``.dist-info`` files physically at the "
"end of the archive.  This enables some potentially interesting ZIP tricks "
"including the ability to amend the metadata without rewriting the entire "
"archive."
msgstr ""
"Архиваторам рекомендуется помещать файлы ``.dist-info`` физически в конец "
"архива.  Это позволяет использовать некоторые потенциально интересные трюки "
"ZIP, включая возможность изменять метаданные, не переписывая весь архив."

#: ../source/specifications/binary-distribution-format.rst:85
#: ../source/specifications/pylock-toml.rst:51
msgid "File Format"
msgstr "Формат файла"

#: ../source/specifications/binary-distribution-format.rst:90
msgid "File name convention"
msgstr "Соглашение об именах файлов"

#: ../source/specifications/binary-distribution-format.rst:92
msgid ""
"The wheel filename is ``{distribution}-{version}(-{build tag})?-{python tag}-"
"{abi tag}-{platform tag}.whl``."
msgstr ""
"Имя файла колеса - ``{distribution}-{version}(-{build tag})?-{python tag}-"
"{abi tag}-{platform tag}.whl``."

#: ../source/specifications/binary-distribution-format.rst:96
msgid "distribution"
msgstr "дистрибутив"

#: ../source/specifications/binary-distribution-format.rst:96
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr "Имя дистрибутива, например, 'django', 'pyramid'."

#: ../source/specifications/binary-distribution-format.rst:99
msgid "version"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:99
msgid "Distribution version, e.g. 1.0."
msgstr "Версия дистрибутива, например, 1.0."

#: ../source/specifications/binary-distribution-format.rst:124
msgid "build tag"
msgstr "построить тег"

#: ../source/specifications/binary-distribution-format.rst:102
msgid ""
"Optional build number.  Must start with a digit.  Acts as a tie-breaker if "
"two wheel file names are the same in all other respects (i.e. name, version, "
"and other tags).  Sort as an empty tuple if unspecified, else sort as a two-"
"item tuple with the first item being the initial digits as an ``int``, and "
"the second item being the remainder of the tag as a ``str``."
msgstr ""
"Необязательный номер сборки.  Должен начинаться с цифры.  Действует как "
"ограничитель, если два имени файлов wheel одинаковы по всем остальным "
"параметрам (т. е. по имени, версии и другим тегам).  Сортируется как пустой "
"кортеж, если не указан, иначе сортируется как кортеж из двух элементов, где "
"первый элемент - начальные цифры в виде ``int'', а второй элемент - остаток "
"тега в виде ``str''."

#: ../source/specifications/binary-distribution-format.rst:109
msgid ""
"A common use-case for build numbers is rebuilding a binary distribution due "
"to a change in the build environment, like when using the manylinux image to "
"build distributions using pre-release CPython versions."
msgstr ""
"Частым случаем использования номеров сборок является перестроение бинарного "
"дистрибутива из-за изменения среды сборки, например, при использовании "
"образа manylinux для сборки дистрибутивов, использующих предварительные "
"версии CPython."

#: ../source/specifications/binary-distribution-format.rst:116
msgid ""
"Build numbers are not a part of the distribution version and thus are "
"difficult to reference externally, especially so outside the Python "
"ecosystem of tools and standards. A common case where a distribution would "
"need to referenced externally is when resolving a security vulnerability."
msgstr ""
"Номера сборок не являются частью версии дистрибутива, поэтому на них сложно "
"ссылаться извне, особенно за пределами экосистемы инструментов и стандартов "
"Python. Чаще всего внешние ссылки на дистрибутив требуются при устранении "
"уязвимости в системе безопасности."

#: ../source/specifications/binary-distribution-format.rst:121
msgid ""
"Due to this limitation, new distributions which need to be referenced "
"externally **should not** use build numbers when building the new "
"distribution. Instead a **new distribution version** should be created for "
"such cases."
msgstr ""
"Из-за этого ограничения новые дистрибутивы, на которые необходимо ссылаться "
"извне, **не должны** использовать номера сборок при сборке нового "
"дистрибутива. Вместо этого в таких случаях следует создавать **новую версию "
"дистрибутива**."

#: ../source/specifications/binary-distribution-format.rst:127
msgid "language implementation and version tag"
msgstr "реализация языка и тег версии"

#: ../source/specifications/binary-distribution-format.rst:127
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr "Например, 'py27', 'py2', 'py3'."

#: ../source/specifications/binary-distribution-format.rst:130
#: ../source/specifications/platform-compatibility-tags.rst:20
msgid "abi tag"
msgstr "метка abi"

#: ../source/specifications/binary-distribution-format.rst:130
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr "Например, 'cp33m', 'abi3', 'none'."

#: ../source/specifications/binary-distribution-format.rst:133
#: ../source/specifications/platform-compatibility-tags.rst:23
msgid "platform tag"
msgstr "тег платформы"

#: ../source/specifications/binary-distribution-format.rst:133
msgid "E.g. 'linux_x86_64', 'any'."
msgstr "Например, 'linux_x86_64', 'any'."

#: ../source/specifications/binary-distribution-format.rst:135
msgid ""
"For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build of "
"a package called 'distribution', and is compatible with Python 2.7 (any "
"Python 2.7 implementation), with no ABI (pure Python), on any CPU "
"architecture."
msgstr ""
"Например, ``distribution-1.0-1-py27-none-any.whl`` - это первая сборка "
"пакета под названием \"distribution\", совместимая с Python 2.7 (любой "
"реализацией Python 2.7), без ABI (чистый Python), на любой архитектуре "
"процессора."

#: ../source/specifications/binary-distribution-format.rst:140
msgid ""
"The last three components of the filename before the extension are called "
"\"compatibility tags.\"  The compatibility tags express the package's basic "
"interpreter requirements and are detailed in PEP 425."
msgstr ""
"Последние три компонента имени файла перед расширением называются \"тегами "
"совместимости\".  Теги совместимости выражают основные требования пакета к "
"интерпретатору и подробно описаны в PEP 425."

#: ../source/specifications/binary-distribution-format.rst:145
msgid "Escaping and Unicode"
msgstr "Экранирование и Юникод"

#: ../source/specifications/binary-distribution-format.rst:147
msgid ""
"As the components of the filename are separated by a dash (``-``, HYPHEN-"
"MINUS), this character cannot appear within any component. This is handled "
"as follows:"
msgstr ""
"Поскольку компоненты имени файла разделены тире (``-``, HYPHEN-MINUS), этот "
"символ не может появиться ни в одном компоненте. Это решается следующим "
"образом:"

#: ../source/specifications/binary-distribution-format.rst:150
msgid ""
"In distribution names, any run of ``-_.`` characters (HYPHEN-MINUS, LOW LINE "
"and FULL STOP) should be replaced with ``_`` (LOW LINE), and uppercase "
"characters should be replaced with corresponding lowercase ones. This is "
"equivalent to regular :ref:`name normalization <name-normalization>` "
"followed by replacing ``-`` with ``_``. Tools consuming wheels must be "
"prepared to accept ``.`` (FULL STOP) and uppercase letters, however, as "
"these were allowed by an earlier version of this specification."
msgstr ""
"В именах дистрибутивов любые пробелы символов ``-_.`` (HYPHEN-MINUS, LOW "
"LINE и FULL STOP) должны быть заменены на ``_`` (LOW LINE), а прописные "
"символы должны быть заменены на соответствующие строчные. Это эквивалентно "
"регулярной :ref:`нормализации имени <имя-нормализация>` с последующей "
"заменой ``-`` на ``_``. Инструменты, использующие колеса, должны быть готовы "
"принять ``.`` (FULL STOP) и заглавные буквы, так как они были разрешены в "
"более ранней версии этой спецификации."

#: ../source/specifications/binary-distribution-format.rst:157
msgid ""
"Version numbers should be normalised according to the :ref:`Version "
"specifier specification <version-specifiers>`. Normalised version numbers "
"cannot contain ``-``."
msgstr ""
"Номера версий должны быть нормализованы в соответствии с :ref:`Спецификация "
"спецификатора версии <version-specifiers>`. Нормализованные номера версий не "
"могут содержать ``-``."

#: ../source/specifications/binary-distribution-format.rst:159
msgid ""
"The remaining components may not contain ``-`` characters, so no escaping is "
"necessary."
msgstr ""
"Остальные компоненты не могут содержать символов ``-``, поэтому "
"экранирование не требуется."

#: ../source/specifications/binary-distribution-format.rst:162
msgid ""
"Tools producing wheels should verify that the filename components do not "
"contain ``-``, as the resulting file may not be processed correctly if they "
"do."
msgstr ""
"Утилиты, создающие колеса, должны убедиться, что компоненты имени файла не "
"содержат ``-``, так как в противном случае результирующий файл может быть "
"обработан некорректно."

#: ../source/specifications/binary-distribution-format.rst:165
msgid ""
"The archive filename is Unicode.  It will be some time before the tools are "
"updated to support non-ASCII filenames, but they are supported in this "
"specification."
msgstr ""
"Имя архивного файла имеет формат Unicode.  Пройдет некоторое время, прежде "
"чем инструменты будут обновлены для поддержки имен файлов, отличных от "
"ASCII, но в данной спецификации они поддерживаются."

#: ../source/specifications/binary-distribution-format.rst:169
msgid ""
"The filenames *inside* the archive are encoded as UTF-8.  Although some ZIP "
"clients in common use do not properly display UTF-8 filenames, the encoding "
"is supported by both the ZIP specification and Python's ``zipfile``."
msgstr ""
"Имена файлов *внутри* архива кодируются как UTF-8.  Хотя некоторые "
"распространенные ZIP-клиенты не отображают имена файлов в кодировке UTF-8, "
"эта кодировка поддерживается как спецификацией ZIP, так и ``zipfile`` в "
"Python."

#: ../source/specifications/binary-distribution-format.rst:175
msgid "File contents"
msgstr "Содержимое файлов"

#: ../source/specifications/binary-distribution-format.rst:177
msgid ""
"The contents of a wheel file, where {distribution} is replaced with the :ref:"
"`normalized name <name-normalization>` of the package, e.g. ``beaglevote`` "
"and {version} is replaced with its :ref:`normalized version <version-"
"specifiers-normalization>`, e.g. ``1.0.0``, (with dash/``-`` characters "
"replaced with underscore/``_`` characters in both fields) consist of:"
msgstr ""
"Содержимое файла wheel, где {distribution} заменено на :ref:`нормализованное "
"название <name-normalization>` пакета, например ``beaglevote``, а {version} "
"заменено на его :ref:`нормализованную версию <version-specifiers-"
"normalization>`, например ``1.0.0``, (с символами тире/``-`` замененными на "
"символы подчеркивания/``_`` в обоих полях) состоит из:"

#: ../source/specifications/binary-distribution-format.rst:184
msgid ""
"``/``, the root of the archive, contains all files to be installed in "
"``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and "
"``platlib`` are usually both ``site-packages``."
msgstr ""
"``/``, корень архива, содержит все файлы, которые должны быть установлены в "
"``purelib`` или ``platlib``, как указано в ``WHEEL``.  ``purelib`` и "
"``platlib`` обычно являются ``сайт-пакетами``."

#: ../source/specifications/binary-distribution-format.rst:187
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr "``{distribution}-{version}.dist-info/`` содержит метаданные."

#: ../source/specifications/binary-distribution-format.rst:188
msgid ""
":file:`{distribution}-{version}.dist-info/licenses/` contains license files."
msgstr ""
":file:`{distribution}-{version}.dist-info/licenses/` содержит файлы лицензий."

#: ../source/specifications/binary-distribution-format.rst:189
msgid ""
"``{distribution}-{version}.data/`` contains one subdirectory for each non-"
"empty install scheme key not already covered, where the subdirectory name is "
"an index into a dictionary of install paths (e.g. ``data``, ``scripts``, "
"``headers``, ``purelib``, ``platlib``)."
msgstr ""
"``{distribution}-{version}.data/`` содержит один подкаталог для каждого "
"непустого ключа схемы установки, который еще не покрыт, где имя подкаталога "
"является индексом в словаре путей установки (например, ``data``, ``cripts``, "
"``headers``, ``purelib``, ``platlib``)."

#: ../source/specifications/binary-distribution-format.rst:193
msgid ""
"Python scripts must appear in ``scripts`` and begin with exactly ``b'#!"
"python'`` in order to enjoy script wrapper generation and ``#!python`` "
"rewriting at install time.  They may have any or no extension.  The "
"``scripts`` directory may only contain regular files."
msgstr ""
"Python-скрипты должны находиться в ``scripts` и начинаться с ``b'#!python``, "
"чтобы во время установки можно было сгенерировать обертку скрипта и "
"переписать ``#!python``.  Они могут иметь любое расширение или не иметь "
"его.  Каталог ``scripts`` может содержать только обычные файлы."

#: ../source/specifications/binary-distribution-format.rst:197
msgid ""
"``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 or "
"greater format metadata."
msgstr ""
"``{distribution}-{version}.dist-info/METADATA`` - это метаданные формата "
"Metadata версии 1.1 или выше."

#: ../source/specifications/binary-distribution-format.rst:199
msgid ""
"``{distribution}-{version}.dist-info/WHEEL`` is metadata about the archive "
"itself in the same basic key: value format::"
msgstr ""
"``{distribution}-{version}.dist-info/WHEEL`` - это метаданные о самом архиве "
"в том же базовом формате key: value::"

#: ../source/specifications/binary-distribution-format.rst:209
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr "``Wheel-Version`` - это номер версии спецификации Wheel."

#: ../source/specifications/binary-distribution-format.rst:210
msgid ""
"``Generator`` is the name and optionally the version of the software that "
"produced the archive."
msgstr ""
"``Генератор`` - это имя и, опционально, версия программы, создавшей архив."

#: ../source/specifications/binary-distribution-format.rst:212
msgid ""
"``Root-Is-Purelib`` is true if the top level directory of the archive should "
"be installed into purelib; otherwise the root should be installed into "
"platlib."
msgstr ""
"``Root-Is-Purelib`` имеет значение true, если каталог верхнего уровня архива "
"должен быть установлен в purelib; в противном случае корень должен быть "
"установлен в platlib."

#: ../source/specifications/binary-distribution-format.rst:215
msgid ""
"``Tag`` is the wheel's expanded compatibility tags; in the example the "
"filename would contain ``py2.py3-none-any``."
msgstr ""
"``Tag`` - это расширенные теги совместимости колеса; в примере имя файла "
"будет содержать ``py2.py3-none-any``."

#: ../source/specifications/binary-distribution-format.rst:217
msgid ""
"``Build`` is the build number and is omitted if there is no build number."
msgstr ""
"``Build`` - это номер сборки и опускается, если номер сборки отсутствует."

#: ../source/specifications/binary-distribution-format.rst:218
msgid ""
"A wheel installer should warn if Wheel-Version is greater than the version "
"it supports, and must fail if Wheel-Version has a greater major version than "
"the version it supports."
msgstr ""
"Программа установки колеса должна предупреждать, если Wheel-Version больше, "
"чем поддерживаемая ею версия, и должна выходить из строя, если Wheel-Version "
"имеет большую мажорную версию, чем поддерживаемая ею версия."

#: ../source/specifications/binary-distribution-format.rst:221
msgid ""
"Wheel, being an installation format that is intended to work across multiple "
"versions of Python, does not generally include .pyc files."
msgstr ""
"Wheel, будучи форматом установки, предназначенным для работы с несколькими "
"версиями Python, обычно не включает файлы .pyc."

#: ../source/specifications/binary-distribution-format.rst:223
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr "Колесо не содержит setup.py или setup.cfg."

#: ../source/specifications/binary-distribution-format.rst:225
msgid ""
"This version of the wheel specification is based on the distutils install "
"schemes and does not define how to install files to other locations. The "
"layout offers a superset of the functionality provided by the existing "
"wininst and egg binary formats."
msgstr ""
"Эта версия спецификации wheel основана на схемах установки distutils и не "
"определяет, как устанавливать файлы в другие места. Схема предлагает "
"супернабор функций, предоставляемых существующими бинарными форматами "
"wininst и egg."

#: ../source/specifications/binary-distribution-format.rst:232
#: ../source/specifications/recording-installed-packages.rst:23
msgid "The .dist-info directory"
msgstr "Директория .dist-info"

#: ../source/specifications/binary-distribution-format.rst:234
msgid ""
"Wheel .dist-info directories include at a minimum METADATA, WHEEL, and "
"RECORD."
msgstr ""
"Каталоги Wheel .dist-info включают в себя как минимум METADATA, WHEEL и "
"RECORD."

#: ../source/specifications/binary-distribution-format.rst:236
msgid ""
"METADATA is the package metadata, the same format as PKG-INFO as found at "
"the root of sdists."
msgstr ""
"METADATA - это метаданные пакета, в том же формате, что и PKG-INFO, которые "
"находятся в корне sdists."

#: ../source/specifications/binary-distribution-format.rst:238
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr "WHEEL - это метаданные колеса, специфичные для сборки пакета."

#: ../source/specifications/binary-distribution-format.rst:239
msgid ""
"RECORD is a list of (almost) all the files in the wheel and their secure "
"hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a "
"hash of itself, must include its hash.  The hash algorithm must be sha256 or "
"better; specifically, md5 and sha1 are not permitted, as signed wheel files "
"rely on the strong hashes in RECORD to validate the integrity of the archive."
msgstr ""
"RECORD - это список (почти) всех файлов в колесе и их защищенных хэшей.  В "
"отличие от PEP 376, каждый файл, кроме RECORD, который не может содержать "
"хэш самого себя, должен содержать свой хэш.  Алгоритм хэша должен быть "
"sha256 или лучше; в частности, md5 и sha1 не допускаются, так как "
"подписанные файлы колеса полагаются на надежные хэши в RECORD для "
"подтверждения целостности архива."

#: ../source/specifications/binary-distribution-format.rst:245
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr "В архив не включены файлы PEP 376 \"INSTALLER\" и \"REQUESTED\"."

#: ../source/specifications/binary-distribution-format.rst:246
msgid ""
"RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""
"RECORD.jws используется для цифровых подписей.  Он не упоминается в RECORD."

#: ../source/specifications/binary-distribution-format.rst:248
msgid ""
"RECORD.p7s is allowed as a courtesy to anyone who would prefer to use S/MIME "
"signatures to secure their wheel files.  It is not mentioned in RECORD."
msgstr ""
"RECORD.p7s разрешен в качестве любезности для тех, кто предпочитает "
"использовать подписи S/MIME для защиты своих колесных файлов.  Она не "
"упоминается в RECORD."

#: ../source/specifications/binary-distribution-format.rst:251
msgid ""
"During extraction, wheel installers verify all the hashes in RECORD against "
"the file contents.  Apart from RECORD and its signatures, installation will "
"fail if any file in the archive is not both mentioned and correctly hashed "
"in RECORD."
msgstr ""
"Во время извлечения программа установки колес сверяет все хэши в RECORD с "
"содержимым файлов.  Помимо RECORD и его сигнатур, установка завершится "
"неудачей, если какой-либо файл в архиве не упомянут и не захеширован "
"правильно в RECORD."

#: ../source/specifications/binary-distribution-format.rst:257
msgid "Subdirectories in :file:`.dist-info/`"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:259
msgid ""
"Subdirectories under :file:`.dist-info/` are reserved for future use. The "
"following subdirectory names under :file:`.dist-info/` are reserved for "
"specific usage:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:263
#, fuzzy
#| msgid "Project name"
msgid "Subdirectory name"
msgstr "Название проекта"

#: ../source/specifications/binary-distribution-format.rst:263
msgid "PEP / Standard"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:265
#, fuzzy
#| msgid "``license``"
msgid "``licenses``"
msgstr "``лицензия``"

#: ../source/specifications/binary-distribution-format.rst:265
#: ../source/specifications/binary-distribution-format.rst:266
msgid ":pep:`639`"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:266
#, fuzzy
#| msgid "``license-files``"
msgid "``license_files``"
msgstr "``лицензионные файлы``"

#: ../source/specifications/binary-distribution-format.rst:267
#, fuzzy
#| msgid "``LIB``"
msgid "``LICENSES``"
msgstr "``LIB``"

#: ../source/specifications/binary-distribution-format.rst:267
msgid "`REUSE licensing framework <https://reuse.software>`__"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:268
msgid "``sboms``"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:268
msgid ":pep:`770`"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:272
msgid "The :file:`.dist-info/licenses/` directory"
msgstr "Каталог :file:`.dist-info/licenses/`"

#: ../source/specifications/binary-distribution-format.rst:274
msgid ""
"If the metadata version is 2.4 or greater and one or more ``License-File`` "
"fields is specified, the :file:`.dist-info/` directory MUST contain a :file:"
"`licenses/` subdirectory, which MUST contain the files listed in the "
"``License-File`` fields in the :file:`METADATA` file at their respective "
"paths relative to the :file:`licenses/` directory."
msgstr ""
"Если версия метаданных 2.4 или выше и указано одно или несколько полей "
"``License-File``, каталог :file:`.dist-info/` ДОЛЖЕН содержать подкаталог :"
"file:`licenses/`, который ДОЛЖЕН содержать файлы, перечисленные в полях "
"``License-File`` в файле :file:`METADATA`` по их соответствующим путям "
"относительно каталога :file:`licenses/`."

#: ../source/specifications/binary-distribution-format.rst:281
#, fuzzy
#| msgid "The :file:`.dist-info/licenses/` directory"
msgid "The :file:`.dist-info/sboms/` directory"
msgstr "Каталог :file:`.dist-info/licenses/`"

#: ../source/specifications/binary-distribution-format.rst:283
msgid ""
"All files contained within the :file:`.dist-info/sboms/` directory MUST be "
"Software Bill-of-Materials (SBOM) files that describe software contained "
"within the distribution archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:288
msgid "The .data directory"
msgstr "Директория .data"

#: ../source/specifications/binary-distribution-format.rst:290
msgid ""
"Any file that is not normally installed inside site-packages goes into the ."
"data directory, named as the .dist-info directory but with the .data/ "
"extension::"
msgstr ""
"Все файлы, которые обычно не устанавливаются внутри пакетов сайта, "
"помещаются в каталог .data, названный так же, как и каталог .dist-info, но с "
"расширением .data/::"

#: ../source/specifications/binary-distribution-format.rst:298
msgid ""
"The .data directory contains subdirectories with the scripts, headers, "
"documentation and so forth from the distribution.  During installation the "
"contents of these subdirectories are moved onto their destination paths."
msgstr ""
"Каталог .data содержит подкаталоги со скриптами, заголовками, документацией "
"и прочим из дистрибутива.  Во время установки содержимое этих подкаталогов "
"переносится на путь назначения."

#: ../source/specifications/binary-distribution-format.rst:304
msgid "Signed wheel files"
msgstr "Подписанные файлы колес"

#: ../source/specifications/binary-distribution-format.rst:306
msgid ""
"Wheel files include an extended RECORD that enables digital signatures.  PEP "
"376's RECORD is altered to include a secure hash "
"``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding with "
"no trailing = characters) as the second column instead of an md5sum.  All "
"possible entries are hashed, including any generated files such as .pyc "
"files, but not RECORD which cannot contain its own hash. For example::"
msgstr ""
"Файлы колес включают расширенную запись RECORD, которая позволяет "
"использовать цифровые подписи.  В PEP 376 RECORD изменен, чтобы включать "
"безопасный хэш ``digestname=urlsafe_b64encode_nopad(digest)`` (кодировка "
"urlsafe base64 без задних символов =) в качестве второго столбца вместо "
"md5sum.  Хешируются все возможные записи, включая любые сгенерированные "
"файлы, такие как файлы .pyc, но не RECORD, который не может содержать свой "
"собственный хеш. Например::"

#: ../source/specifications/binary-distribution-format.rst:317
msgid ""
"The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in RECORD "
"at all since they can only be added after RECORD is generated. Every other "
"file in the archive must have a correct hash in RECORD or the installation "
"will fail."
msgstr ""
"Файл(ы) подписи RECORD.jws и RECORD.p7s вообще не упоминаются в RECORD, "
"поскольку они могут быть добавлены только после создания RECORD. Все "
"остальные файлы в архиве должны иметь правильный хэш в RECORD, иначе "
"установка завершится неудачей."

#: ../source/specifications/binary-distribution-format.rst:322
msgid ""
"If JSON web signatures are used, one or more JSON Web Signature JSON "
"Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent to "
"RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of RECORD "
"as the signature's JSON payload:"
msgstr ""
"Если используются веб-подписи JSON, одна или несколько подписей JSON Web "
"Signature JSON Serialization (JWS-JS) хранятся в файле RECORD.jws, "
"примыкающем к RECORD.  JWS используется для подписи RECORD путем включения "
"SHA-256 хэша RECORD в качестве полезной нагрузки JSON подписи:"

#: ../source/specifications/binary-distribution-format.rst:331
msgid "(The hash value is the same format used in RECORD.)"
msgstr "(Хеш-значение имеет тот же формат, что и в RECORD)"

#: ../source/specifications/binary-distribution-format.rst:333
msgid ""
"If RECORD.p7s is used, it must contain a detached S/MIME format signature of "
"RECORD."
msgstr ""
"Если используется файл RECORD.p7s, он должен содержать отделенную подпись "
"RECORD в формате S/MIME."

#: ../source/specifications/binary-distribution-format.rst:336
msgid ""
"A wheel installer is not required to understand digital signatures but MUST "
"verify the hashes in RECORD against the extracted file contents. When the "
"installer checks file hashes against RECORD, a separate signature checker "
"only needs to establish that RECORD matches the signature."
msgstr ""
"Программа установки колеса не обязана понимать цифровые подписи, но ДОЛЖНА "
"проверять хэши в RECORD по содержимому извлеченного файла. Когда программа "
"установки сверяет хэши файлов с RECORD, отдельному средству проверки подписи "
"достаточно убедиться, что RECORD соответствует подписи."

#: ../source/specifications/binary-distribution-format.rst:341
msgid "See"
msgstr "Смотрите"

#: ../source/specifications/binary-distribution-format.rst:343
msgid "https://datatracker.ietf.org/doc/html/rfc7515"
msgstr "https://datatracker.ietf.org/doc/html/rfc7515"

#: ../source/specifications/binary-distribution-format.rst:344
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-json-web-signature-json-"
"serialization-01"

#: ../source/specifications/binary-distribution-format.rst:345
msgid "https://datatracker.ietf.org/doc/html/rfc7517"
msgstr "https://datatracker.ietf.org/doc/html/rfc7517"

#: ../source/specifications/binary-distribution-format.rst:346
msgid ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"
msgstr ""
"https://datatracker.ietf.org/doc/html/draft-jones-jose-json-private-key-01"

#: ../source/specifications/binary-distribution-format.rst:350
#: ../source/specifications/platform-compatibility-tags.rst:370
msgid "FAQ"
msgstr "ЧаВо"

#: ../source/specifications/binary-distribution-format.rst:354
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""
"Wheel определяет каталог .data.  Должен ли я поместить туда все свои данные?"

#: ../source/specifications/binary-distribution-format.rst:356
msgid ""
"This specification does not have an opinion on how you should organize your "
"code.  The .data directory is just a place for any files that are not "
"normally installed inside ``site-packages`` or on the PYTHONPATH. In other "
"words, you may continue to use ``pkgutil.get_data(package, resource)`` even "
"though *those* files will usually not be distributed in *wheel's* ``.data`` "
"directory."
msgstr ""
"Эта спецификация не имеет своего мнения о том, как вы должны организовывать "
"свой код.  Каталог .data - это просто место для любых файлов, которые обычно "
"не устанавливаются в ``сайт-пакеты`` или в PYTHONPATH. Другими словами, вы "
"можете продолжать использовать ``pkgutil.get_data(package, resource)``, даже "
"если *эти* файлы обычно не будут распространяться в директории *wheel'а* ``."
"data``."

#: ../source/specifications/binary-distribution-format.rst:365
msgid "Why does wheel include attached signatures?"
msgstr "Почему колесо включает в себя прикрепленные подписи?"

#: ../source/specifications/binary-distribution-format.rst:367
msgid ""
"Attached signatures are more convenient than detached signatures because "
"they travel with the archive.  Since only the individual files are signed, "
"the archive can be recompressed without invalidating the signature or "
"individual files can be verified without having to download the whole "
"archive."
msgstr ""
"Прикрепленные подписи более удобны, чем отсоединенные, поскольку они "
"путешествуют вместе с архивом.  Поскольку подписываются только отдельные "
"файлы, архив можно перекомпрессировать, не аннулируя подпись, или проверить "
"отдельные файлы без необходимости загружать весь архив."

#: ../source/specifications/binary-distribution-format.rst:375
msgid "Why does wheel allow JWS signatures?"
msgstr "Почему колесо разрешает подписи JWS?"

#: ../source/specifications/binary-distribution-format.rst:377
msgid ""
"The JOSE specifications of which JWS is a part are designed to be easy to "
"implement, a feature that is also one of wheel's primary design goals.  JWS "
"yields a useful, concise pure-Python implementation."
msgstr ""
"Спецификации JOSE, частью которых является JWS, разработаны для простоты "
"реализации, что также является одной из основных целей дизайна Wheel.  JWS "
"представляет собой полезную и лаконичную реализацию на чистом Python."

#: ../source/specifications/binary-distribution-format.rst:383
msgid "Why does wheel also allow S/MIME signatures?"
msgstr "Почему wheel также позволяет использовать подписи S/MIME?"

#: ../source/specifications/binary-distribution-format.rst:385
msgid ""
"S/MIME signatures are allowed for users who need or want to use existing "
"public key infrastructure with wheel."
msgstr ""
"Подписи S/MIME разрешены для пользователей, которым необходимо или хочется "
"использовать существующую инфраструктуру открытых ключей с помощью колеса."

#: ../source/specifications/binary-distribution-format.rst:388
msgid ""
"Signed packages are only a basic building block in a secure package update "
"system.  Wheel only provides the building block."
msgstr ""
"Подписанные пакеты являются лишь базовым элементом системы безопасного "
"обновления пакетов.  Wheel предоставляет только строительный блок."

#: ../source/specifications/binary-distribution-format.rst:393
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr "Как обстоят дела с \"purelib\" и \"platlib\"?"

#: ../source/specifications/binary-distribution-format.rst:395
msgid ""
"Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is "
"significant on some platforms. For example, Fedora installs pure Python "
"packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent "
"packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""
"Wheel сохраняет различие между \"purelib\" и \"platlib\", что важно для "
"некоторых платформ. Например, Fedora устанавливает пакеты чистого Python в '/"
"usr/lib/pythonX.Y/site-packages', а платформозависимые пакеты - в '/usr/"
"lib64/pythonX.Y/site-packages'."

#: ../source/specifications/binary-distribution-format.rst:400
msgid ""
"A wheel with \"Root-Is-Purelib: false\" with all its files in ``{name}-"
"{version}.data/purelib`` is equivalent to a wheel with \"Root-Is-Purelib: "
"true\" with those same files in the root, and it is legal to have files in "
"both the \"purelib\" and \"platlib\" categories."
msgstr ""
"Колесо с \"Root-Is-Purelib: false\" со всеми своими файлами в ``{name}-"
"{version}.data/purelib`` эквивалентно колесу с \"Root-Is-Purelib: true\" с "
"теми же файлами в корне, и законно иметь файлы как в категории \"purelib\", "
"так и в категории \"platlib\"."

#: ../source/specifications/binary-distribution-format.rst:405
msgid ""
"In practice a wheel should have only one of \"purelib\" or \"platlib\" "
"depending on whether it is pure Python or not and those files should be at "
"the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""
"На практике колесо должно иметь только один из \"purelib\" или \"platlib\" в "
"зависимости от того, является ли оно чистым Python или нет, и эти файлы "
"должны находиться в корне с соответствующей настройкой для \"Root-is-"
"purelib\"."

#: ../source/specifications/binary-distribution-format.rst:413
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr "Можно ли импортировать код Python непосредственно из файла wheel?"

#: ../source/specifications/binary-distribution-format.rst:415
msgid ""
"Technically, due to the combination of supporting installation via simple "
"extraction and using an archive format that is compatible with "
"``zipimport``, a subset of wheel files *do* support being placed directly on "
"``sys.path``. However, while this behaviour is a natural consequence of the "
"format design, actually relying on it is generally discouraged."
msgstr ""
"Технически, из-за сочетания поддержки установки через простое извлечение и "
"использования формата архива, совместимого с ``zipimport``, подмножество "
"файлов колеса *до* поддерживает размещение непосредственно в ```sys.path``. "
"Однако, хотя такое поведение является естественным следствием дизайна "
"формата, полагаться на него, как правило, не рекомендуется."

#: ../source/specifications/binary-distribution-format.rst:421
msgid ""
"Firstly, wheel *is* designed primarily as a distribution format, so skipping "
"the installation step also means deliberately avoiding any reliance on "
"features that assume full installation (such as being able to use standard "
"tools like ``pip`` and ``virtualenv`` to capture and manage dependencies in "
"a way that can be properly tracked for auditing and security update "
"purposes, or integrating fully with the standard build machinery for C "
"extensions by publishing header files in the appropriate place)."
msgstr ""
"Во-первых, wheel *is* разработан в первую очередь как формат дистрибутива, "
"поэтому пропуск шага установки также означает намеренный отказ от "
"использования функций, предполагающих полную установку (например, "
"возможность использовать стандартные инструменты вроде ``pip`` и "
"``virtualenv`` для захвата и управления зависимостями таким образом, чтобы "
"их можно было правильно отслеживать для целей аудита и обновления "
"безопасности, или полная интеграция со стандартным механизмом сборки для C-"
"расширений путем публикации заголовочных файлов в соответствующем месте)."

#: ../source/specifications/binary-distribution-format.rst:430
msgid ""
"Secondly, while some Python software is written to support running directly "
"from a zip archive, it is still common for code to be written assuming it "
"has been fully installed. When that assumption is broken by trying to run "
"the software from a zip archive, the failures can often be obscure and hard "
"to diagnose (especially when they occur in third party libraries). The two "
"most common sources of problems with this are the fact that importing C "
"extensions from a zip archive is *not* supported by CPython (since doing so "
"is not supported directly by the dynamic loading machinery on any platform) "
"and that when running from a zip archive the ``__file__`` attribute no "
"longer refers to an ordinary filesystem path, but to a combination path that "
"includes both the location of the zip archive on the filesystem and the "
"relative path to the module inside the archive. Even when software correctly "
"uses the abstract resource APIs internally, interfacing with external "
"components may still require the availability of an actual on-disk file."
msgstr ""
"Во-вторых, хотя некоторые программы на Python написаны так, что поддерживают "
"запуск непосредственно из zip-архива, все равно часто код пишется в "
"предположении, что он полностью установлен. Когда это предположение "
"нарушается при попытке запустить программу из zip-архива, сбои часто бывают "
"неясными и трудно диагностируемыми (особенно когда они происходят в "
"библиотеках сторонних разработчиков). Два наиболее распространенных "
"источника проблем с этим - тот факт, что импорт расширений C из zip-архива "
"*не* поддерживается CPython (поскольку это не поддерживается напрямую "
"механизмом динамической загрузки на любой платформе) и что при запуске из "
"zip-архива атрибут ``__file__`` ссылается уже не на обычный путь к файловой "
"системе, а на комбинированный путь, включающий как расположение zip-архива в "
"файловой системе, так и относительный путь к модулю внутри архива. Даже если "
"программа корректно использует абстрактные API ресурсов внутри, "
"взаимодействие с внешними компонентами все равно может потребовать наличия "
"реального файла на диске."

#: ../source/specifications/binary-distribution-format.rst:447
msgid ""
"Like metaclasses, monkeypatching and metapath importers, if you're not "
"already sure you need to take advantage of this feature, you almost "
"certainly don't need it. If you *do* decide to use it anyway, be aware that "
"many projects will require a failure to be reproduced with a fully installed "
"package before accepting it as a genuine bug."
msgstr ""
"Как и в случае с метаклассами, monkeypatching и импортерами metapath, если "
"вы еще не уверены, что вам нужно воспользоваться этой возможностью, она вам "
"почти наверняка не понадобится. Если же вы *решили* воспользоваться ею, "
"имейте в виду, что многие проекты потребуют воспроизвести сбой с полностью "
"установленным пакетом, прежде чем принять его за настоящую ошибку."

#: ../source/specifications/binary-distribution-format.rst:455
#: ../source/specifications/core-metadata.rst:1035
#: ../source/specifications/dependency-groups.rst:250
#: ../source/specifications/dependency-specifiers.rst:516
#: ../source/specifications/direct-url-data-structure.rst:292
#: ../source/specifications/direct-url.rst:67
#: ../source/specifications/entry-points.rst:164
#: ../source/specifications/externally-managed-environments.rst:472
#: ../source/specifications/inline-script-metadata.rst:213
#: ../source/specifications/name-normalization.rst:50
#: ../source/specifications/platform-compatibility-tags.rst:434
#: ../source/specifications/pylock-toml.rst:826
#: ../source/specifications/pyproject-toml.rst:630
#: ../source/specifications/recording-installed-packages.rst:278
#: ../source/specifications/simple-repository-api.rst:972
#: ../source/specifications/source-distribution-format.rst:153
#: ../source/specifications/version-specifiers.rst:1269
#: ../source/specifications/virtual-environments.rst:54
msgid "History"
msgstr "История"

#: ../source/specifications/binary-distribution-format.rst:457
msgid "February 2013: This specification was approved through :pep:`427`."
msgstr "Февраль 2013 г: Эта спецификация была одобрена через :pep:`427`."

#: ../source/specifications/binary-distribution-format.rst:458
msgid ""
"February 2021: The rules on escaping in wheel filenames were revised, to "
"bring them into line with what popular tools actually do."
msgstr ""
"Февраль 2021 года: Правила экранирования в именах файлов wheel были "
"пересмотрены, чтобы привести их в соответствие с тем, что на самом деле "
"делают популярные инструменты."

#: ../source/specifications/binary-distribution-format.rst:460
msgid ""
"December 2024: Clarified that the ``scripts`` folder should only contain "
"regular files (the expected behaviour of consuming tools when encountering "
"symlinks or subdirectories in this folder is not formally defined, and hence "
"may vary between tools)."
msgstr ""
"Декабрь 2024: Уточнено, что папка ``scripts`` должна содержать только "
"обычные файлы (ожидаемое поведение инструментов потребления при встрече с "
"симлинками или подкаталогами в этой папке формально не определено, и поэтому "
"может отличаться для разных инструментов)."

#: ../source/specifications/binary-distribution-format.rst:464
#: ../source/specifications/recording-installed-packages.rst:288
msgid ""
"December 2024: The :file:`.dist-info/licenses/` directory was specified "
"through :pep:`639`."
msgstr ""
"Декабрь 2024 года: Каталог :file:`.dist-info/licenses/` был указан через :"
"pep:`639`."

#: ../source/specifications/binary-distribution-format.rst:466
msgid ""
"January 2025: Clarified that name and version needs to be normalized for ``."
"dist-info`` and ``.data`` directories."
msgstr ""
"Январь 2025 года: Уточнено, что имя и версия должны быть нормализованы для "
"директорий ``.dist-info`` и ``.data``."

#: ../source/specifications/binary-distribution-format.rst:471
msgid "Appendix"
msgstr "Приложение"

#: ../source/specifications/binary-distribution-format.rst:473
msgid "Example urlsafe-base64-nopad implementation::"
msgstr "Пример реализации urlsafe-base64-nopad::"

#: ../source/specifications/build-details/index.rst:7
#: ../source/specifications/build-details/index.rst:41
msgid "v1.0"
msgstr ""

#: ../source/specifications/build-details/index.rst:5
msgid ":file:`build-details.json`"
msgstr ""

#: ../source/specifications/build-details/index.rst:13
msgid ""
"The ``build-details.json`` file is a standardized file format that provides "
"build-specfic information of a Python installation, such as its version, "
"extension ABI details, and other information that is specific to that "
"particular build of Python."
msgstr ""

#: ../source/specifications/build-details/index.rst:18
msgid ""
"Starting from Python 3.14, a ``build-details.json`` file is installed in the "
"platform-independent standard library directory (``stdlib``, e.g. ``/usr/lib/"
"python3.14/build-details.json``)."
msgstr ""

#: ../source/specifications/build-details/index.rst:22
msgid ""
"Please refer to the :ref:`latest version <build-details-v1.0>` for its "
"specification."
msgstr ""

#: ../source/specifications/build-details/index.rst:28
#: ../source/specifications/build-details/v1.0.rst:16
#: ../source/specifications/inline-script-metadata.rst:100
#: ../source/specifications/pylock-toml.rst:722
msgid "Example"
msgstr "Пример"

#: ../source/specifications/build-details/index.rst:35
#, fuzzy
#| msgid "Changes"
msgid "Changelog"
msgstr "Изменения"

#: ../source/specifications/build-details/index.rst:45
#: ../source/specifications/build-details/v1.0.rst:9
#: ../source/specifications/dependency-groups.rst:20
#: ../source/specifications/dependency-specifiers.rst:26
#: ../source/specifications/direct-url-data-structure.rst:19
#: ../source/specifications/direct-url.rst:15
#: ../source/specifications/file-yanking.rst:20
#: ../source/specifications/index-hosted-attestations.rst:17
#: ../source/specifications/inline-script-metadata.rst:13
#: ../source/specifications/license-expression.rst:12
#: ../source/specifications/project-status-markers.rst:20
msgid "Specification"
msgstr "Спецификация"

#: ../source/specifications/build-details/index.rst:46
msgid ":ref:`build-details-v1.0`"
msgstr ""

#: ../source/specifications/build-details/index.rst:48
#, fuzzy
#| msgid "JSON Schema"
msgid "Schema"
msgstr "Схема JSON"

#: ../source/specifications/build-details/index.rst:49
#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"https://packaging.python.org/en/latest/specifications/schemas/build-details-"
"v1.0.schema.json"
msgstr ""

#: ../source/specifications/build-details/index.rst:52
msgid "Initial version, introduced by :pep:`739`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:5
msgid "``build-details.json`` v1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"*build-details.json — a static description file with build details of Python "
"installations*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "type"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Project"
msgid "*object*"
msgstr "Проект"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "properties"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**schema\\_version**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Semantic versioning"
msgid "Schema version."
msgstr "Семантическая версификация"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This is a string following the format ``<MAJOR>.<MINOR>``, where ``<MAJOR>`` "
"and ``<MINOR>`` are unpaded numbers and represent the **major** and "
"**minor** components of the version. Versions may be arithmetically compared "
"by intrepreting the version string as a decimal number."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"For this specification version, this value is constant and **MUST** be "
"``1.0``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Future versions of this schema **MUST** use a higher version number. Future "
"versions of this schema **MUST NOT** use the same **major** version "
"component as other schema version unless its specification is deemed "
"backwards-compatible with them — it can't change, or extend, any parts of "
"the current specification in such a way as the semantics of the interpreted "
"data differ, or that data valid under the new specification is invalid under "
"the older specification, with the exception of additional properties (errors "
"caused by ``additionalProperties``)."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*string*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "enscons"
msgid "const"
msgstr "enscons"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**base\\_prefix**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Base prefix of the Python installation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Either an absolute path, or a path relative to directory where this file is "
"contained."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Examples"
msgid "examples"
msgstr "Примеры"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "../.."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "base\\_interpreter"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the Python interprer of the base installation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Either an absolute path, or a path relative to ``base_prefix``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the installation provides an interpreter "
"executable."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/bin/python"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "bin/python"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "platform tag"
msgid "**platform**"
msgstr "тег платформы"

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "platform tag"
msgid "System platform string."
msgstr "тег платформы"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "This field **SHOULD** be equivalent to ``sysconfig.get_platform()``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "linux_x86_64"
msgid "linux-x86\\_64"
msgstr "linux_x86_64"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**language**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the Python language specification."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Version"
msgid "**version**"
msgstr "Версия"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"String representation the Python language version — a version string "
"consisting only of the *major* and *minor* components."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **SHOULD** be equivalent to ``sysconfig.get_python_version()``."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Versioning"
msgid "version\\_info"
msgstr "Версионирование"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object in the format of :py:data:`sys.version_info`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "This section **SHOULD** be equivalent to :py:data:`sys.version_info`."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "major"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "3"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "minor"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "micro"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "1"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Release"
msgid "releaselevel"
msgstr "Выпуск"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "final"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Mercurial"
msgid "serial"
msgstr "Mercurial"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**major**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Numbers**"
msgid "*number*"
msgstr "**Числа**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**minor**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**micro**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**releaselevel**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "enum"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "alpha, beta, candidate, final"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**serial**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Additional notes"
msgid "additionalProperties"
msgstr "Дополнительные замечания"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "False"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Implementation Notes"
msgid "**implementation**"
msgstr "Примечания к реализации"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to Python implementation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **SHOULD** be equivalent to :py:data:`sys.implementation`. It "
"follows specification defined in PEP 421, meaning that on top of the "
"required keys, implementation-specific keys can also exist, but must be "
"prefixed with an underscore."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "**name**"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Lower-case name of the Python implementation."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "cpython"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "pypy"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Object in the format of :py:data:`sys.version_info`, containing the "
"implementation version."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "7"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "16"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "True"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "abi tag"
msgid "abi"
msgstr "метка abi"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Headings**"
msgid "**flags**"
msgstr "**Заголовки**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Build configuration flags, used to calculate the extension suffix."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"The flags **MUST** be defined in the order they appear on the extension "
"suffix."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*array*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "t"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "d"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "extension\\_suffix"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Suffix used for extensions built against the current implementation version."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation supports "
"extensions, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".cpython-314-x86\\_64-linux-gnu.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "stable\\_abi\\_suffix"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Suffix used for extensions built against the stable ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation has a stable ABI "
"extension suffix, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".abi3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "suffixes"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Valid module suffixes grouped by type."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** be present if the Python installation supports "
"importing external files, and it **SHOULD** be equivalent to the ``importlib."
"machinery.*_SUFFIXES`` attributes."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"Additionally, if a Python implementation provides extension kinds other than "
"the ones listed on ``importlib.machinery`` module, they **MAY** add a sub-"
"section for them."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "source"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".py"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".pyc"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "optimized_bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "debug_bytecode"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Versions"
msgid "extensions"
msgstr "Версии"

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".cpython-313-x86\\_64-linux-gnu.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ".so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "python"
msgid "libpython"
msgstr "python"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** by present if Python installation provides a "
"``libpython`` library, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "``dynamic``"
msgid "dynamic"
msgstr "``динамический``"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the dynamic ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a dynamic "
"``libpython`` library, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/libpython3.14.so.1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/libpython3.14.so.1.0"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "dynamic\\_stableabi"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the dynamic ``libpython`` library for the stable ABI."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a dynamic "
"``libpython`` library targeting the Stable ABI, otherwise this entry will be "
"missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "If this key is present ``dynamic`` **MUST** also be set."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/libpython3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/libpython3.so"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "static"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the static ``libpython`` library."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python installation provides a static "
"``libpython`` library, otherwise this entry will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/python3.14/config-3.14-x86\\_64-linux-gnu/libpython3.14.a"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/python3.14/config-3.14-x86\\_64-linux-gnu/libpython3.14.a"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Building binary extensions"
msgid "link\\_extensions"
msgstr "Создание бинарных расширений"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Should extensions built against a dynamic ``libpython`` link to it?"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "*boolean*"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "c\\_api"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing details related to the Python C API."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This section **MUST** be present if the Python implementation provides a C "
"API, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "**Numbers**"
msgid "**headers**"
msgstr "**Числа**"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the C API headers."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/include/python3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "include/python3.14"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "pkgconfig\\_path"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "The path to the pkg-config definition files."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This field **MUST** be present if the Python implementation provides pkg-"
"config definition files, otherwise this section will be missing."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "/usr/lib/pkgconfig"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid "lib/pkgconfig"
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
#, fuzzy
#| msgid "Arbitrary equality"
msgid "arbitrary\\_data"
msgstr "Произвольное равенство"

#: ../source/specifications/build-details/v1.0.rst:12
msgid "Object containing extra arbitrary data."
msgstr ""

#: ../source/specifications/build-details/v1.0.rst:12
msgid ""
"This is meant to be used as an escape-hatch, to include any relevant data "
"that is not covered by this specification. Implementations may choose what "
"data to provide in this section."
msgstr ""

#: ../source/specifications/core-metadata.rst:7
msgid "Core metadata specifications"
msgstr "Спецификации основных метаданных"

#: ../source/specifications/core-metadata.rst:9
msgid "This page describes version 2.5, approved in September 2025."
msgstr ""

#: ../source/specifications/core-metadata.rst:11
msgid ""
"Fields defined in the following specification should be considered valid, "
"complete and not subject to change. The required fields are:"
msgstr ""
"Поля, определенные в следующей спецификации, должны считаться "
"действительными, полными и не подлежащими изменению. К обязательным полям "
"относятся:"

#: ../source/specifications/core-metadata.rst:14
msgid "``Metadata-Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:15
msgid "``Name``"
msgstr "``Имя``"

#: ../source/specifications/core-metadata.rst:16
msgid "``Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:18
msgid "All the other fields are optional."
msgstr "Все остальные поля являются необязательными."

#: ../source/specifications/core-metadata.rst:20
msgid ""
"The standard file format for metadata (including in :doc:`wheels <binary-"
"distribution-format>` and :doc:`installed projects <recording-installed-"
"packages>`) is based on the format of email headers. However, email formats "
"have been revised several times, and exactly which email RFC applies to "
"packaging metadata is not specified. In the absence of a precise definition, "
"the practical standard is set by what the standard library :mod:`python:"
"email.parser` module can parse using the :data:`~.python:email.policy."
"compat32` policy."
msgstr ""
"Стандартный формат файлов для метаданных (в том числе в :doc:`wheels <binary-"
"distribution-format>` и :doc:`installed projects <recording-installed-"
"packages>`) основан на формате заголовков электронной почты. Однако форматы "
"электронной почты неоднократно пересматривались, и какой именно почтовый RFC "
"применяется к метаданным упаковки, не уточняется. В отсутствие точного "
"определения практический стандарт устанавливается тем, что может разобрать "
"модуль стандартной библиотеки :mod:`python:email.parser`, используя "
"политику :data:`~.python:email.policy.compat32`."

#: ../source/specifications/core-metadata.rst:29
msgid ""
"Whenever metadata is serialised to a byte stream (for example, to save to a "
"file), strings must be serialised using the UTF-8 encoding."
msgstr ""
"При сериализации метаданных в поток байтов (например, для сохранения в файл) "
"строки должны быть сериализованы с использованием кодировки UTF-8."

#: ../source/specifications/core-metadata.rst:32
msgid ""
"Although :pep:`566` defined a way to transform metadata into a JSON-"
"compatible dictionary, this is not yet used as a standard interchange "
"format. The need for tools to work with years worth of existing packages "
"makes it difficult to shift to a new format."
msgstr ""
"Хотя в :pep:`566` определен способ преобразования метаданных в JSON-"
"совместимый словарь, он пока не используется в качестве стандартного формата "
"обмена. Необходимость работы инструментов с многолетними существующими "
"пакетами затрудняет переход на новый формат."

#: ../source/specifications/core-metadata.rst:37
msgid ""
"*Interpreting old metadata:* In :pep:`566`, the version specifier field "
"format specification was relaxed to accept the syntax used by popular "
"publishing tools (namely to remove the requirement that version specifiers "
"must be surrounded by parentheses). Metadata consumers may want to use the "
"more relaxed formatting rules even for metadata files that are nominally "
"less than version 2.1."
msgstr ""
"*Интерпретация старых метаданных:* В :pep:`566` спецификация формата поля "
"спецификатора версии была смягчена, чтобы принять синтаксис, используемый "
"популярными издательскими инструментами (а именно, убрать требование, что "
"спецификаторы версии должны быть окружены круглыми скобками). Потребители "
"метаданных могут захотеть использовать более мягкие правила форматирования "
"даже для файлов метаданных, которые номинально меньше версии 2.1."

#: ../source/specifications/core-metadata.rst:48
msgid "Metadata-Version"
msgstr "Metadata-Version"

#: ../source/specifications/core-metadata.rst:52
#, fuzzy
#| msgid ""
#| "Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", "
#| "\"2.1\", \"2.2\", \"2.3\", and \"2.4\"."
msgid ""
"Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", "
"\"2.1\", \"2.2\", \"2.3\", \"2.4\", and \"2.5\"."
msgstr ""
"Версия формата файла; допустимые значения: «1.0», «1.1», «1.2», «2.1», "
"«2.2», «2.3» и «2.4»."

#: ../source/specifications/core-metadata.rst:55
msgid ""
"Automated tools consuming metadata SHOULD warn if ``metadata_version`` is "
"greater than the highest version they support, and MUST fail if "
"``metadata_version`` has a greater major version than the highest version "
"they support (as described in the :ref:`Version specifier specification "
"<version-specifiers>`, the major version is the value before the first dot)."
msgstr ""
"Автоматизированные инструменты, потребляющие метаданные, ДОЛЖНЫ "
"предупреждать, если ``metadata_version`` больше, чем самая высокая "
"поддерживаемая ими версия, и ДОЛЖНЫ отказать, если ``metadata_version`` "
"имеет большую основную версию, чем самая высокая поддерживаемая ими версия "
"(как описано в :ref:`Спецификация спецификатора версии <version-"
"specifiers>`, основная версия - это значение перед первой точкой)."

#: ../source/specifications/core-metadata.rst:62
msgid ""
"For broader compatibility, build tools MAY choose to produce distribution "
"metadata using the lowest metadata version that includes all of the needed "
"fields."
msgstr ""
"Для более широкой совместимости инструменты сборки MAY выбирают для создания "
"метаданных дистрибутива самую низкую версию метаданных, которая включает все "
"необходимые поля."

#: ../source/specifications/core-metadata.rst:66
#: ../source/specifications/core-metadata.rst:84
#: ../source/specifications/core-metadata.rst:101
#: ../source/specifications/core-metadata.rst:176
#: ../source/specifications/core-metadata.rst:191
#: ../source/specifications/core-metadata.rst:229
#: ../source/specifications/core-metadata.rst:301
#: ../source/specifications/core-metadata.rst:305
#: ../source/specifications/core-metadata.rst:309
#: ../source/specifications/core-metadata.rst:313
#: ../source/specifications/core-metadata.rst:345
#: ../source/specifications/core-metadata.rst:367
#: ../source/specifications/core-metadata.rst:385
#: ../source/specifications/core-metadata.rst:410
#: ../source/specifications/core-metadata.rst:432
#: ../source/specifications/core-metadata.rst:658
#: ../source/specifications/core-metadata.rst:693
#: ../source/specifications/core-metadata.rst:703
#: ../source/specifications/core-metadata.rst:932
#: ../source/specifications/core-metadata.rst:1029
msgid "Example::"
msgstr "Пример::"

#: ../source/specifications/core-metadata.rst:74
msgid "Name"
msgstr "Имя"

#: ../source/specifications/core-metadata.rst:77
msgid "Added restrictions on format from the :ref:`name format <name-format>`."
msgstr "Добавлены ограничения на формат из :ref:`формат имени <имя-формат>`."

#: ../source/specifications/core-metadata.rst:80
msgid ""
"The name of the distribution. The name field is the primary identifier for a "
"distribution. It must conform to the :ref:`name format specification <name-"
"format>`."
msgstr ""
"Имя дистрибутива. Поле имени является основным идентификатором дистрибутива. "
"Оно должно соответствовать спецификации :ref:`формата имени <name-format>`."

#: ../source/specifications/core-metadata.rst:88
msgid ""
"For comparison purposes, the names should be :ref:`normalized <name-"
"normalization>` before comparing."
msgstr ""
"Для сравнения имена должны быть :ref:`нормализованы <имя-нормализация>` "
"перед сравнением."

#: ../source/specifications/core-metadata.rst:93
msgid "Version"
msgstr "Версия"

#: ../source/specifications/core-metadata.rst:97
msgid ""
"A string containing the distribution's version number.  This field  must be "
"in the format specified in the :ref:`Version specifier specification "
"<version-specifiers>`."
msgstr ""
"Строка, содержащая номер версии дистрибутива.  Это поле должно быть в "
"формате, указанном в :ref:`Спецификация спецификатора версии <version-"
"specifiers>`."

#: ../source/specifications/core-metadata.rst:109
msgid "Dynamic (multiple use)"
msgstr "Динамический (многократное использование)"

#: ../source/specifications/core-metadata.rst:113
msgid ""
"A string containing the name of another core metadata field. The field names "
"``Name``, ``Version``, and ``Metadata-Version`` may not be specified in this "
"field."
msgstr ""
"Строка, содержащая имя другого поля метаданных ядра. Имена полей ``Name``, "
"``Version`` и ``Metadata-Version`` не могут быть указаны в этом поле."

#: ../source/specifications/core-metadata.rst:117
msgid ""
"When found in the metadata of a source distribution, the following rules "
"apply:"
msgstr ""
"При нахождении в метаданных исходного дистрибутива действуют следующие "
"правила:"

#: ../source/specifications/core-metadata.rst:120
msgid ""
"If a field is *not* marked as ``Dynamic``, then the value of the field in "
"any wheel built from the sdist MUST match the value in the sdist. If the "
"field is not in the sdist, and not marked as ``Dynamic``, then it MUST NOT "
"be present in the wheel."
msgstr ""
"Если поле *не* помечено как ``динамическое'', то значение этого поля в любом "
"колесе, построенном из sdist, ДОЛЖНО совпадать со значением в sdist. Если "
"поле отсутствует в sdist и не помечено как ``динамическое'', то оно НЕ "
"ДОЛЖНО присутствовать в колесе."

#: ../source/specifications/core-metadata.rst:124
msgid ""
"If a field is marked as ``Dynamic``, it may contain any valid value in a "
"wheel built from the sdist (including not being present at all)."
msgstr ""
"Если поле помечено как ``динамическое'', оно может содержать любое "
"допустимое значение в колесе, собранном из sdist (в том числе не "
"присутствовать вообще)."

#: ../source/specifications/core-metadata.rst:127
msgid ""
"If the sdist metadata version is older than version 2.2, then all fields "
"should be treated as if they were specified with ``Dynamic`` (i.e. there are "
"no special restrictions on the metadata of wheels built from the sdist)."
msgstr ""
"Если версия метаданных sdist старше версии 2.2, то все поля должны "
"рассматриваться так, как если бы они были указаны с ``Dynamic`` (т.е. нет "
"никаких специальных ограничений на метаданные колес, собранных из sdist)."

#: ../source/specifications/core-metadata.rst:131
msgid ""
"In any context other than a source distribution, ``Dynamic`` is for "
"information only, and indicates that the field value was calculated at wheel "
"build time, and may not be the same as the value in the sdist or in other "
"wheels for the project."
msgstr ""
"В любом контексте, кроме дистрибутива исходного кода, ``Dynamic'' "
"используется только для информации и указывает, что значение поля было "
"вычислено во время сборки колеса, и может не совпадать со значением в sdist "
"или в других колесах для проекта."

#: ../source/specifications/core-metadata.rst:136
msgid ""
"Note in particular that if you have obtained a prebuilt wheel, you cannot "
"assume that a field which is not marked as ``Dynamic`` will have the same "
"value in other wheels, as some wheels are not built directly from the sdist, "
"but are modified from existing wheels (the ``auditwheel`` tool does this, "
"for example, and it's commonly used when building wheels for PyPI). Such "
"modifications *could* include changing metadata (even non-dynamic "
"metadata).  Similarly, if you have a sdist and a wheel which you didn't "
"build from that sdist, you cannot assume that the wheel's metadata matches "
"that of the sdist, even if the field is not marked as ``Dynamic``."
msgstr ""

#: ../source/specifications/core-metadata.rst:146
msgid ""
"Full details of the semantics of ``Dynamic`` are described in :pep:`643`."
msgstr "Полные подробности семантики ``Dynamic`` описаны в :pep:`643`."

#: ../source/specifications/core-metadata.rst:151
msgid "Platform (multiple use)"
msgstr "Platform (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:155
msgid ""
"A Platform specification describing an operating system supported by the "
"distribution which is not listed in the \"Operating System\" Trove "
"classifiers. See \"Classifier\" below."
msgstr ""
"Спецификация платформы, описывающая операционную систему, поддерживаемую "
"дистрибутивом, которая не указана в классификаторах Trove \"Операционная "
"система\". См. раздел \"Классификатор\" ниже."

#: ../source/specifications/core-metadata.rst:159
#: ../source/specifications/core-metadata.rst:465
#: ../source/specifications/core-metadata.rst:492
#: ../source/specifications/core-metadata.rst:515
#: ../source/specifications/core-metadata.rst:544
#: ../source/specifications/core-metadata.rst:585
#: ../source/specifications/core-metadata.rst:641
#: ../source/specifications/core-metadata.rst:775
#: ../source/specifications/core-metadata.rst:816
#: ../source/specifications/core-metadata.rst:873
#: ../source/specifications/core-metadata.rst:903
#: ../source/specifications/core-metadata.rst:983
#: ../source/specifications/core-metadata.rst:1005
msgid "Examples::"
msgstr "Примеры::"

#: ../source/specifications/core-metadata.rst:167
msgid "Supported-Platform (multiple use)"
msgstr "Supported-Platform (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:171
msgid ""
"Binary distributions containing a PKG-INFO file will use the Supported-"
"Platform field in their metadata to specify the OS and CPU for which the "
"binary distribution was compiled.  The semantics of the Supported-Platform "
"field are not specified in this PEP."
msgstr ""
"Бинарные дистрибутивы, содержащие файл PKG-INFO, будут использовать поле "
"Supported-Platform в своих метаданных для указания ОС и CPU, для которых был "
"скомпилирован бинарный дистрибутив.  Семантика поля Supported-Platform не "
"определена в данном PEP."

#: ../source/specifications/core-metadata.rst:185
msgid "Summary"
msgstr "Краткое описание"

#: ../source/specifications/core-metadata.rst:189
msgid "A one-line summary of what the distribution does."
msgstr "Однострочная сводка того, что делает дистрибутив."

#: ../source/specifications/core-metadata.rst:209
msgid "This field may be specified in the message body instead."
msgstr "Это поле может быть указано в теле сообщения."

#: ../source/specifications/core-metadata.rst:212
msgid ""
"A longer description of the distribution that can run to several "
"paragraphs.  Software that deals with metadata should not assume any maximum "
"size for this field, though people shouldn't include their instruction "
"manual as the description."
msgstr ""
"Более длинное описание дистрибутива, которое может состоять из нескольких "
"абзацев.  Программы, работающие с метаданными, не должны устанавливать "
"максимальный размер этого поля, однако людям не стоит включать в описание "
"инструкцию по эксплуатации."

#: ../source/specifications/core-metadata.rst:217
msgid ""
"The contents of this field can be written using reStructuredText markup "
"[1]_.  For programs that work with the metadata, supporting markup is "
"optional; programs can also display the contents of the field as-is.  This "
"means that authors should be conservative in the markup they use."
msgstr ""
"Содержимое этого поля может быть записано с помощью разметки "
"reStructuredText [1]_.  Для программ, работающих с метаданными, "
"поддерживающая разметка необязательна; программы могут отображать содержимое "
"поля как есть.  Это означает, что авторы должны быть консервативны в "
"используемой ими разметке."

#: ../source/specifications/core-metadata.rst:223
msgid ""
"To support empty lines and lines with indentation with respect to the RFC "
"822 format, any CRLF character has to be suffixed by 7 spaces followed by a "
"pipe (\"|\") char. As a result, the Description field is encoded into a "
"folded field that can be interpreted by RFC822 parser [2]_."
msgstr ""
"Для поддержки пустых строк и строк с отступами в соответствии с форматом RFC "
"822 любой символ CRLF должен быть дополнен 7 пробелами, за которыми следует "
"символ pipe (\"|\"). В результате поле Description кодируется в свернутое "
"поле, которое может быть интерпретировано синтаксическим анализатором RFC822 "
"[2]_."

#: ../source/specifications/core-metadata.rst:240
msgid ""
"This encoding implies that any occurrences of a CRLF followed by 7 spaces "
"and a pipe char have to be replaced by a single CRLF when the field is "
"unfolded using a RFC822 reader."
msgstr ""
"Эта кодировка подразумевает, что все случаи, когда за CRLF следуют 7 "
"пробелов и символ pipe, должны быть заменены одним CRLF, когда поле "
"разворачивается с помощью устройства чтения RFC822."

#: ../source/specifications/core-metadata.rst:244
msgid ""
"Alternatively, the distribution's description may instead be provided in the "
"message body (i.e., after a completely blank line following the headers, "
"with no indentation or other special formatting necessary)."
msgstr ""
"В качестве альтернативы описание дистрибутива может быть представлено в теле "
"сообщения (т. е. после полностью пустой строки, следующей за заголовками, "
"без отступов или другого специального форматирования)."

#: ../source/specifications/core-metadata.rst:253
msgid "Description-Content-Type"
msgstr "Description-Content-Type"

#: ../source/specifications/core-metadata.rst:257
msgid ""
"A string stating the markup syntax (if any) used in the distribution's "
"description, so that tools can intelligently render the description."
msgstr ""
"Строка, указывающая синтаксис разметки (если таковая имеется), используемый "
"в описании дистрибутива, чтобы инструменты могли грамотно отобразить "
"описание."

#: ../source/specifications/core-metadata.rst:260
msgid ""
"Historically, PyPI supported descriptions in plain text and "
"`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
"restructuredtext.html>`_, and could render reST into HTML. However, it is "
"common for distribution authors to write the description in `Markdown "
"<https://daringfireball.net/projects/markdown/>`_ (:rfc:`7763`) as many code "
"hosting sites render Markdown READMEs, and authors would reuse the file for "
"the description. PyPI didn't recognize the format and so could not render "
"the description correctly. This resulted in many packages on PyPI with "
"poorly-rendered descriptions when Markdown is left as plain text, or worse, "
"was attempted to be rendered as reST. This field allows the distribution "
"author to specify the format of their description, opening up the "
"possibility for PyPI and other tools to be able to render Markdown and other "
"formats."
msgstr ""
"Исторически PyPI поддерживал описания в виде обычного текста и "
"`reStructuredText (reST) <https://docutils.sourceforge.io/docs/ref/rst/"
"restructuredtext.html>`_, а также мог преобразовывать reST в HTML. Однако "
"часто авторы дистрибутивов пишут описание в формате `Markdown <https://"
"daringfireball.net/projects/markdown/>`_ (:rfc:`7763`), так как многие сайты "
"хостинга кода выдают Markdown README, и авторы могут использовать этот файл "
"для описания. PyPI не распознавал этот формат и поэтому не мог корректно "
"отобразить описание. Это привело к тому, что многие пакеты на PyPI имели "
"плохо отрисованные описания, когда Markdown оставался простым текстом или, "
"что еще хуже, пытался быть отрисованным как reST. Это поле позволяет автору "
"дистрибутива указать формат описания, открывая возможность для PyPI и других "
"инструментов отображать Markdown и другие форматы."

#: ../source/specifications/core-metadata.rst:273
msgid ""
"The format of this field is the same as the ``Content-Type`` header in HTTP "
"(i.e.: `RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type."
"html>`_). Briefly, this means that it has a ``type/subtype`` part and then "
"it can optionally have a number of parameters:"
msgstr ""
"Формат этого поля такой же, как у заголовка ``Content-Type`` в HTTP (т.е.: "
"`RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type.html>`_). "
"Вкратце это означает, что оно имеет часть ``тип/подтип``, а затем может "
"иметь несколько параметров:"

#: ../source/specifications/core-metadata.rst:279
msgid "Format::"
msgstr "Формат::"

#: ../source/specifications/core-metadata.rst:283
msgid "The ``type/subtype`` part has only a few legal values:"
msgstr "Часть ``тип/подтип`` имеет только несколько допустимых значений:"

#: ../source/specifications/core-metadata.rst:285
msgid "``text/plain``"
msgstr "``text/plain``"

#: ../source/specifications/core-metadata.rst:286
msgid "``text/x-rst``"
msgstr "``text/x-rst``"

#: ../source/specifications/core-metadata.rst:287
msgid "``text/markdown``"
msgstr "``text/markdown``"

#: ../source/specifications/core-metadata.rst:289
msgid ""
"The ``charset`` parameter can be used to specify the character encoding of "
"the description. The only legal value is ``UTF-8``. If omitted, it is "
"assumed to be ``UTF-8``."
msgstr ""
"Параметр ``charset'' может использоваться для указания кодировки описания. "
"Единственным допустимым значением является ``UTF-8``. Если значение опущено, "
"то предполагается, что оно равно ``UTF-8``."

#: ../source/specifications/core-metadata.rst:293
msgid ""
"Other parameters might be specific to the chosen subtype. For example, for "
"the ``markdown`` subtype, there is an optional ``variant`` parameter that "
"allows specifying the variant of Markdown in use (defaults to ``GFM`` if not "
"specified). Currently, two variants are recognized:"
msgstr ""
"Другие параметры могут быть специфичны для выбранного подтипа. Например, для "
"подтипа ``markdown`` есть необязательный параметр ``variant``, который "
"позволяет указать используемый вариант Markdown (по умолчанию ``GFM``, если "
"не указан). В настоящее время распознаются два варианта:"

#: ../source/specifications/core-metadata.rst:298
msgid "``GFM`` for :rfc:`GitHub-flavored Markdown <7764#section-3.2>`"
msgstr "``GFM`` для :rfc:``GitHub-flavored Markdown <7764#section-3.2>`"

#: ../source/specifications/core-metadata.rst:299
msgid "``CommonMark`` for :rfc:`CommonMark <7764#section-3.5>`"
msgstr "``CommonMark`` для :rfc:``CommonMark <7764#section-3.5>`"

#: ../source/specifications/core-metadata.rst:317
msgid ""
"If a ``Description-Content-Type`` is not specified, then applications should "
"attempt to render it as ``text/x-rst; charset=UTF-8`` and fall back to "
"``text/plain`` if it is not valid rst."
msgstr ""
"Если ``Description-Content-Type`` не указан, то приложения должны попытаться "
"отобразить его как ``text/x-rst; charset=UTF-8`` и вернуться к ``text/"
"plain``, если он не является корректным rst."

#: ../source/specifications/core-metadata.rst:321
msgid ""
"If a ``Description-Content-Type`` is an unrecognized value, then the assumed "
"content type is ``text/plain`` (Although PyPI will probably reject anything "
"with an unrecognized value)."
msgstr ""
"Если ``Description-Content-Type`` является нераспознанным значением, то "
"предполагаемый тип содержимого - ``text/plain`` (хотя PyPI, вероятно, "
"отклонит все, что имеет нераспознанное значение)."

#: ../source/specifications/core-metadata.rst:325
msgid ""
"If the ``Description-Content-Type`` is ``text/markdown`` and ``variant`` is "
"not specified or is set to an unrecognized value, then the assumed "
"``variant`` is ``GFM``."
msgstr ""
"Если ``Description-Content-Type`` имеет значение ``text/markdown``, а "
"``вариант`` не указан или имеет нераспознанное значение, то предполагаемым "
"``вариантом`` будет ``GFM``."

#: ../source/specifications/core-metadata.rst:329
msgid ""
"So for the last example above, the ``charset`` defaults to ``UTF-8`` and the "
"``variant`` defaults to ``GFM`` and thus it is equivalent to the example "
"before it."
msgstr ""
"Таким образом, в последнем примере по умолчанию ``charset`` принимает "
"значение ``UTF-8``, а ``variant`` принимает значение ``GFM``, и поэтому он "
"эквивалентен предыдущему примеру."

#: ../source/specifications/core-metadata.rst:338
msgid "Keywords"
msgstr "Ключевые слова"

#: ../source/specifications/core-metadata.rst:342
msgid ""
"A list of additional keywords, separated by commas, to be used to assist "
"searching for the distribution in a larger catalog."
msgstr ""
"Список дополнительных ключевых слов, разделенных запятыми, которые будут "
"использоваться для облегчения поиска дистрибутива в большом каталоге."

#: ../source/specifications/core-metadata.rst:351
msgid ""
"The specification previously showed keywords separated by spaces, but "
"distutils and setuptools implemented it with commas. These tools have been "
"very widely used for many years, so it was easier to update the "
"specification to match the de facto standard."
msgstr ""
"Ранее в спецификации ключевые слова разделялись пробелами, но в distutils и "
"setuptools это было сделано через запятую. Эти инструменты очень широко "
"используются уже много лет, поэтому было проще обновить спецификацию, чтобы "
"она соответствовала стандарту де-факто."

#: ../source/specifications/core-metadata.rst:360
msgid "Author"
msgstr "Автор"

#: ../source/specifications/core-metadata.rst:364
msgid ""
"A string containing the author's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"Строка, содержащая, как минимум, имя автора; может быть указана "
"дополнительная контактная информация."

#: ../source/specifications/core-metadata.rst:377
msgid "Author-email"
msgstr "Author-email"

#: ../source/specifications/core-metadata.rst:381
msgid ""
"A string containing the author's e-mail address.  It can contain a name and "
"e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"Строка, содержащая адрес электронной почты автора.  Может содержать имя и "
"адрес электронной почты в законных формах для заголовка RFC-822 ``From:``."

#: ../source/specifications/core-metadata.rst:389
#: ../source/specifications/core-metadata.rst:436
msgid ""
"Per RFC-822, this field may contain multiple comma-separated e-mail "
"addresses::"
msgstr ""
"Согласно RFC-822, это поле может содержать несколько адресов электронной "
"почты, разделенных запятыми::"

#: ../source/specifications/core-metadata.rst:399
msgid "Maintainer"
msgstr "Сопровождающий"

#: ../source/specifications/core-metadata.rst:403
msgid ""
"A string containing the maintainer's name at a minimum; additional contact "
"information may be provided."
msgstr ""
"Строка, содержащая, как минимум, имя сопровождающего; может быть "
"предоставлена дополнительная контактная информация."

#: ../source/specifications/core-metadata.rst:406
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author``."
msgstr ""
"Обратите внимание, что это поле предназначено для использования, когда "
"проект поддерживается кем-то, кроме оригинального автора: его следует "
"опустить, если оно идентично ``Author``."

#: ../source/specifications/core-metadata.rst:420
msgid "Maintainer-email"
msgstr "Maintainer-email"

#: ../source/specifications/core-metadata.rst:424
msgid ""
"A string containing the maintainer's e-mail address.  It can contain a name "
"and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""
"Строка, содержащая адрес электронной почты сопровождающего.  Может содержать "
"имя и адрес электронной почты в законных формах для заголовка RFC-822 ``From:"
"``."

#: ../source/specifications/core-metadata.rst:428
msgid ""
"Note that this field is intended for use when a project is being maintained "
"by someone other than the original author:  it should be omitted if it is "
"identical to ``Author-email``."
msgstr ""
"Обратите внимание, что это поле предназначено для использования, когда "
"проект поддерживается кем-то, кроме оригинального автора: оно должно быть "
"опущено, если оно идентично ``Author-email``."

#: ../source/specifications/core-metadata.rst:446
msgid "License"
msgstr "Лицензия"

#: ../source/specifications/core-metadata.rst:449
msgid "in favour of ``License-Expression``."
msgstr "в пользу ``лицензии-выражения``."

#: ../source/specifications/core-metadata.rst:453
msgid ""
"As of Metadata 2.4, ``License`` and ``License-Expression`` are mutually "
"exclusive. If both are specified, tools which parse metadata will disregard "
"``License`` and PyPI will reject uploads. See `PEP 639 <https://peps.python."
"org/pep-0639/#deprecate-license-field>`__."
msgstr ""
"Начиная с версии Metadata 2.4, ``License`` и ``License-Expression`` являются "
"взаимоисключающими. Если указаны оба значения, инструменты, анализирующие "
"метаданные, будут игнорировать ``Лицензию``, а PyPI будет отклонять "
"загрузки. Смотрите `PEP 639 <https://peps.python.org/pep-0639/#deprecate-"
"license-field>`__."

#: ../source/specifications/core-metadata.rst:458
msgid ""
"Text indicating the license covering the distribution where the license is "
"not a selection from the \"License\" Trove classifiers. See :ref:"
"`\"Classifier\" <metadata-classifier>` below. This field may also be used to "
"specify a particular version of a license which is named via the "
"``Classifier`` field, or to indicate a variation or exception to such a "
"license."
msgstr ""
"Текст, указывающий на лицензию, распространяемую на дистрибутив, если "
"лицензия не является выбором из классификаторов \"License\" Trove. См. :ref:"
"``Классификатор`` <metadata-classifier>` ниже. Это поле также может "
"использоваться для указания конкретной версии лицензии, названной через поле "
"``Классификатор'', или для указания разновидности или исключения из такой "
"лицензии."

#: ../source/specifications/core-metadata.rst:478
msgid "License-Expression"
msgstr "License-Expression"

#: ../source/specifications/core-metadata.rst:482
#, fuzzy
#| msgid ""
#| "Text string that is a valid SPDX license expression as defined in :pep:"
#| "`639`. Tools SHOULD validate and perform case normalization of the "
#| "expression."
msgid ""
"Text string that is a valid SPDX :term:`license expression <License "
"Expression>`, as specified in :doc:`/specifications/license-expression`."
msgstr ""
"Текстовая строка, которая является действительным выражением лицензии SPDX, "
"как определено в :pep:`639`. Инструменты ДОЛЖНЫ проверять и выполнять "
"нормализацию регистра выражения."

#: ../source/specifications/core-metadata.rst:486
msgid ""
"Note that the expression in this field only applies to the :term:"
"`Distribution Archive` containing the metadata with this field (e.g., :term:"
"`Source Distribution <Source Distribution (or \"sdist\")>` or :term:"
"`Wheel`), not the project overall or other files related to the project "
"(including other distribution archives)."
msgstr ""

#: ../source/specifications/core-metadata.rst:507
msgid "License-File (multiple use)"
msgstr "Лицензия-файл (многократное использование)"

#: ../source/specifications/core-metadata.rst:511
msgid ""
"Each entry is a string representation of the path of a license-related file. "
"The path is located within the project source tree, relative to the project "
"root directory. For details see :pep:`639`."
msgstr ""
"Каждая запись представляет собой строковое представление пути к файлу, "
"связанному с лицензией. Путь находится в дереве исходных текстов проекта, "
"относительно корневого каталога проекта. Подробности см. в :pep:`639`."

#: ../source/specifications/core-metadata.rst:528
msgid "Classifier (multiple use)"
msgstr "Classifier (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:532
msgid ""
"Each entry is a string giving a single classification value for the "
"distribution.  Classifiers are described in :pep:`301`, and the Python "
"Package Index publishes a dynamic list of `currently defined classifiers "
"<https://pypi.org/classifiers/>`__."
msgstr ""
"Каждая запись представляет собой строку, дающую одно значение классификации "
"для дистрибутива.  Классификаторы описаны в :pep:`301`, а Python Package "
"Index публикует динамический список `определенных в данный момент "
"классификаторов` <https://pypi.org/classifiers/>`__."

#: ../source/specifications/core-metadata.rst:538
msgid ""
"The use of ``License ::`` classifiers  is deprecated as of Metadata 2.4, use "
"``License-Expression`` instead. See `PEP 639 <https://peps.python.org/"
"pep-0639/#deprecate-license-classifiers>`_."
msgstr ""
"Использование классификаторов ``License ::`` устарело начиная с версии "
"Metadata 2.4, вместо них используйте ``License-Expression``. См. `PEP 639 "
"<https://peps.python.org/pep-0639/#deprecate-license-classifiers>`_."

#: ../source/specifications/core-metadata.rst:542
#: ../source/specifications/core-metadata.rst:632
#: ../source/specifications/core-metadata.rst:871
#: ../source/specifications/core-metadata.rst:896
msgid "This field may be followed by an environment marker after a semicolon."
msgstr "За этим полем может следовать маркер окружения после точки с запятой."

#: ../source/specifications/core-metadata.rst:553
msgid "Requires-Dist (multiple use)"
msgstr "Requires-Dist (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:556
#: ../source/specifications/core-metadata.rst:619
#: ../source/specifications/core-metadata.rst:843
#: ../source/specifications/core-metadata.rst:885
msgid ""
"The field format specification was relaxed to accept the syntax used by "
"popular publishing tools."
msgstr ""
"Спецификация формата полей была смягчена, чтобы принять синтаксис, "
"используемый популярными издательскими инструментами."

#: ../source/specifications/core-metadata.rst:560
msgid ""
"Each entry contains a string naming some other distutils project required by "
"this distribution."
msgstr ""
"Каждая запись содержит строку с названием другого проекта distutils, "
"необходимого для данного дистрибутива."

#: ../source/specifications/core-metadata.rst:563
msgid "The format of a requirement string contains from one to four parts:"
msgstr "Формат строки требований содержит от одной до четырех частей:"

#: ../source/specifications/core-metadata.rst:565
msgid ""
"A project name, in the same format as the ``Name:`` field. The only "
"mandatory part."
msgstr ""
"Название проекта в том же формате, что и поле ``Имя:``. Единственная "
"обязательная часть."

#: ../source/specifications/core-metadata.rst:567
msgid ""
"A comma-separated list of 'extra' names. These are defined by the required "
"project, referring to specific features which may need extra dependencies. "
"The names MUST conform to the restrictions specified by the ``Provides-Extra:"
"`` field."
msgstr ""
"Список \"дополнительных\" имен, разделенный запятыми. Они определяются "
"требуемым проектом и относятся к конкретным функциям, для которых могут "
"потребоваться дополнительные зависимости. Имена ДОЛЖНЫ соответствовать "
"ограничениям, указанным в поле ``Provides-Extra:``."

#: ../source/specifications/core-metadata.rst:571
msgid ""
"A version specifier. Tools parsing the format should accept optional "
"parentheses around this, but tools generating it should not use parentheses."
msgstr ""
"Спецификатор версии. Инструменты, разбирающие формат, должны принимать "
"необязательные круглые скобки вокруг него, но инструменты, генерирующие его, "
"не должны использовать круглые скобки."

#: ../source/specifications/core-metadata.rst:574
msgid ""
"An environment marker after a semicolon. This means that the requirement is "
"only needed in the specified conditions."
msgstr ""
"Маркер окружения после точки с запятой. Это означает, что требование "
"необходимо только в указанных условиях."

#: ../source/specifications/core-metadata.rst:577
msgid "See :pep:`508` for full details of the allowed format."
msgstr "Подробную информацию о допустимом формате см. в :pep:`508`."

#: ../source/specifications/core-metadata.rst:579
msgid ""
"The project names should correspond to names as found on the `Python Package "
"Index`_."
msgstr ""
"Имена проектов должны соответствовать именам, найденным в `Python Package "
"Index`_."

#: ../source/specifications/core-metadata.rst:582
msgid ""
"Version specifiers must follow the rules described in :doc:`version-"
"specifiers`."
msgstr ""
"Спецификаторы версий должны следовать правилам, описанным в :doc:`version-"
"specifiers`."

#: ../source/specifications/core-metadata.rst:596
msgid "Requires-Python"
msgstr "Requires-Python"

#: ../source/specifications/core-metadata.rst:600
msgid ""
"This field specifies the Python version(s) that the distribution is "
"compatible with. Installation tools may look at this when picking which "
"version of a project to install."
msgstr ""
"В этом поле указывается версия(и) Python, с которой(ыми) совместим(ы) "
"дистрибутив. Утилиты установки могут учитывать это поле при выборе версии "
"проекта для установки."

#: ../source/specifications/core-metadata.rst:604
msgid "The value must be in the format specified in :doc:`version-specifiers`."
msgstr "Значение должно быть в формате, указанном в :doc:`version-specifiers`."

#: ../source/specifications/core-metadata.rst:606
msgid ""
"For example, if a distribution uses :ref:`f-strings <whatsnew36-pep498>` "
"then it may prevent installation on Python < 3.6 by specifying::"
msgstr ""
"Например, если дистрибутив использует :ref:`f-strings <whatsnew36-pep498>`, "
"то он может предотвратить установку на Python < 3.6, указав::"

#: ../source/specifications/core-metadata.rst:611
msgid "This field cannot be followed by an environment marker."
msgstr "За этим полем не может следовать маркер окружения."

#: ../source/specifications/core-metadata.rst:616
msgid "Requires-External (multiple use)"
msgstr "Requires-External (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:623
msgid ""
"Each entry contains a string describing some dependency in the system that "
"the distribution is to be used.  This field is intended to serve as a hint "
"to downstream project maintainers, and has no semantics which are meaningful "
"to the ``distutils`` distribution."
msgstr ""
"Каждая запись содержит строку, описывающую некоторую зависимость в системе, "
"в которой будет использоваться дистрибутив.  Это поле служит подсказкой для "
"сопровождающих проектов и не имеет семантики, значимой для дистрибутива "
"``distutils``."

#: ../source/specifications/core-metadata.rst:628
msgid ""
"The format of a requirement string is a name of an external dependency, "
"optionally followed by a version declaration within parentheses."
msgstr ""
"Формат строки требований - это имя внешней зависимости, за которым в круглых "
"скобках по желанию следует объявление версии."

#: ../source/specifications/core-metadata.rst:634
msgid ""
"Because they refer to non-Python software releases, version numbers for this "
"field are **not** required to conform to the format specified in the :ref:"
"`Version specifier specification <version-specifiers>`: they should "
"correspond to the version scheme used by the external dependency."
msgstr ""
"Поскольку они ссылаются на релизы программного обеспечения, отличного от "
"Python, номера версий в этом поле **не обязаны соответствовать формату, "
"указанному в :ref:`Спецификация спецификатора версии <version-specifiers>`: "
"они должны соответствовать схеме версий, используемой внешней зависимостью."

#: ../source/specifications/core-metadata.rst:639
msgid "Notice that there is no particular rule on the strings to be used."
msgstr ""
"Обратите внимание, что нет никаких особых правил относительно используемых "
"строк."

#: ../source/specifications/core-metadata.rst:651
msgid "Project-URL (multiple-use)"
msgstr "Project-URL (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:655
msgid ""
"A string containing a browsable URL for the project and a label for it, "
"separated by a comma."
msgstr ""
"Строка, содержащая просматриваемый URL-адрес проекта и его метку, "
"разделенные запятой."

#: ../source/specifications/core-metadata.rst:662
msgid "The label is free text limited to 32 characters."
msgstr ""
"Этикетка представляет собой свободный текст, ограниченный 32 символами."

#: ../source/specifications/core-metadata.rst:664
msgid ""
"Starting with :pep:`753`, project metadata consumers (such as the Python "
"Package Index) can use a standard normalization process to discover \"well-"
"known\" labels, which can then be given special presentations when being "
"rendered for human consumption. See :ref:`well-known-project-urls`."
msgstr ""
"Начиная с :pep:`753`, потребители метаданных проекта (такие как Python "
"Package Index) могут использовать стандартный процесс нормализации для "
"обнаружения «известных» меток, которые затем могут быть представлены в "
"особом виде при выводе на экран. См. :ref:`well-known-project-urls`."

#: ../source/specifications/core-metadata.rst:674
msgid "Provides-Extra (multiple use)"
msgstr "Provides-Extra (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:677
msgid ""
":pep:`685` restricted valid values to be unambiguous (i.e. no normalization "
"required). For older metadata versions, value restrictions were brought into "
"line with ``Name:`` and normalization rules were introduced."
msgstr ""
":pep:`685` ограничивал допустимые значения, чтобы они были однозначными (т."
"е. нормализация не требовалась). Для более старых версий метаданных "
"ограничения на значения были приведены в соответствие с ``Name:`` и были "
"введены правила нормализации."

#: ../source/specifications/core-metadata.rst:682
msgid ""
"A string containing the name of an optional feature. A valid name consists "
"only of lowercase ASCII letters, ASCII numbers, and hyphen. It must start "
"and end with a letter or number. Hyphens cannot be followed by another "
"hyphen. Names are limited to those which match the following regex (which "
"guarantees unambiguity)::"
msgstr ""
"Строка, содержащая имя необязательной функции. Правильное имя состоит только "
"из строчных букв ASCII, цифр ASCII и дефиса. Оно должно начинаться и "
"заканчиваться буквой или цифрой. За дефисом не может следовать другой дефис. "
"Имена ограничиваются теми, которые соответствуют следующему регексу (который "
"гарантирует однозначность)::"

#: ../source/specifications/core-metadata.rst:690
msgid ""
"The specified name may be used to make a dependency conditional on whether "
"the optional feature has been requested."
msgstr ""
"Указанное имя можно использовать, чтобы сделать зависимость зависимой от "
"того, была ли запрошена необязательная функция."

#: ../source/specifications/core-metadata.rst:698
msgid ""
"A second distribution requires an optional dependency by placing it inside "
"square brackets, and can request multiple features by separating them with a "
"comma (,). The requirements are evaluated for each requested feature and "
"added to the set of requirements for the distribution."
msgstr ""
"Второй дистрибутив требует необязательную зависимость, помещая ее в "
"квадратные скобки, и может запросить несколько функций, разделяя их запятой "
"(,). Требования оцениваются для каждой запрошенной функции и добавляются к "
"набору требований для дистрибутива."

#: ../source/specifications/core-metadata.rst:708
msgid ""
"Two feature names ``test`` and ``doc`` are reserved to mark dependencies "
"that are needed for running automated tests and generating documentation, "
"respectively."
msgstr ""
"Два имени функций ``test`` и ``doc`` зарезервированы для обозначения "
"зависимостей, необходимых для выполнения автоматизированных тестов и "
"создания документации, соответственно."

#: ../source/specifications/core-metadata.rst:712
msgid ""
"It is legal to specify ``Provides-Extra:`` without referencing it in any "
"``Requires-Dist:``."
msgstr ""
"Разрешается указывать ``Provides-Extra:`` без ссылки на него в каком-либо "
"``Requires-Dist:``."

#: ../source/specifications/core-metadata.rst:715
msgid ""
"When writing data for older metadata versions, names MUST be normalized "
"following the same rules used for the ``Name:`` field when performing "
"comparisons. Tools writing metadata MUST raise an error if two ``Provides-"
"Extra:`` entries would clash after being normalized."
msgstr ""
"При записи данных для старых версий метаданных имена ДОЛЖНЫ быть "
"нормализованы по тем же правилам, которые используются для поля ``Name:`` "
"при выполнении сравнений. Средства записи метаданных ДОЛЖНЫ выдавать ошибку, "
"если две записи ``Provides-Extra:`` будут конфликтовать после нормализации."

#: ../source/specifications/core-metadata.rst:720
msgid ""
"When reading data for older metadata versions, tools SHOULD warn when values "
"for this field would be invalid under newer metadata versions. If a value "
"would be invalid following the rules for ``Name:`` in any core metadata "
"version, the user SHOULD be warned and the value ignored to avoid ambiguity. "
"Tools MAY choose to raise an error when reading an invalid name for older "
"metadata versions."
msgstr ""
"При чтении данных для старых версий метаданных инструменты ДОЛЖНЫ "
"предупреждать, что значения для этого поля будут недопустимы в новых версиях "
"метаданных. Если значение будет недействительным в соответствии с правилами "
"для ``Имя:`` в любой основной версии метаданных, пользователь ДОЛЖЕН быть "
"предупрежден, а значение проигнорировано, чтобы избежать двусмысленности. "
"Инструментальные средства МОГУТ выдавать ошибку при чтении недопустимого "
"имени для старых версий метаданных."

#: ../source/specifications/core-metadata.rst:730
#, fuzzy
#| msgid "Supported-Platform (multiple use)"
msgid "Import-Name (multiple use)"
msgstr "Supported-Platform (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:734
msgid ""
"A string containing an import name that the project exclusively provides "
"when installed. The specified import name MUST be a valid Python identifier "
"or can be empty. The import names listed in this field MUST be importable "
"when the project is installed on *some* platform for the same version of the "
"project. This implies that the metadata MUST be consistent across all sdists "
"and wheels for a project release."
msgstr ""

#: ../source/specifications/core-metadata.rst:741
#: ../source/specifications/core-metadata.rst:796
msgid ""
"An import name MAY be followed by a semicolon and the term \"private\" (e.g. "
"``; private``) with any amount of whitespace surrounding the semicolon. This "
"signals to tools that the import name is not part of the public API for the "
"project."
msgstr ""

#: ../source/specifications/core-metadata.rst:746
#: ../source/specifications/core-metadata.rst:801
msgid ""
"Projects SHOULD list all the shortest import names that are exclusively "
"provided by the project. If any of the shortest names are dotted names, all "
"intervening names from that name to the top-level name should also be listed "
"appropriately in ``Import-Name`` and/or ``Import-Namespace``."
msgstr ""

#: ../source/specifications/core-metadata.rst:751
#: ../source/specifications/core-metadata.rst:811
msgid ""
"If a project lists the same name in both ``Import-Name`` and ``Import-"
"Namespace``, tools MUST raise an error due to ambiguity."
msgstr ""

#: ../source/specifications/core-metadata.rst:754
msgid ""
"Tools SHOULD raise an error when two projects that are about to be installed "
"list names that overlap in each other's ``Import-Name`` entries, or when a "
"project has an entry in ``Import-Name`` that overlaps with another project's "
"``Import-Namespace`` entries. This is to avoid projects unexpectedly "
"shadowing another project's code. Tools MAY warn or raise an error when "
"installing a project into a preexisting environment where there is import "
"name overlap with a project that is already installed."
msgstr ""

#: ../source/specifications/core-metadata.rst:762
msgid ""
"Projects MAY have an empty ``Import-Name`` field in their metadata to "
"represent a project with no import names (i.e. there are no Python modules "
"of any kind in the distribution file)."
msgstr ""

#: ../source/specifications/core-metadata.rst:766
msgid ""
"Since projects MAY have no ``Import-Name`` metadata (either because the "
"project uses an older metadata version, or because it didn't specify any), "
"then tools have no information about what names the project provides. "
"However, in practice the majority of projects have their project name match "
"what their import name would be. As such, it is a reasonable assumption to "
"make that a project name that is normalized in some way to an import name (e."
"g. ``packaging.utils.canonicalize_name(name, validate=True).replace(\"-\", "
"\"_\")``) can be used if some answer is needed."
msgstr ""

#: ../source/specifications/core-metadata.rst:786
#, fuzzy
#| msgid "Supported-Platform (multiple use)"
msgid "Import-Namespace (multiple use)"
msgstr "Supported-Platform (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:790
msgid ""
"A string containing an import name that the project provides when installed, "
"but not exclusively. The specified import name MUST be a valid Python "
"identifier. This field is used for namespace packages where multiple "
"projects can contribute to the same import namespace. Projects all listing "
"the same import name in ``Import-Namespace`` can be installed together "
"without shadowing each other."
msgstr ""

#: ../source/specifications/core-metadata.rst:806
msgid ""
"The import names listed in this field MUST be importable when the project is "
"installed on *some* platform for the same version of the project. This "
"implies that the metadata MUST be consistent across all sdists and wheels "
"for a project release."
msgstr ""

#: ../source/specifications/core-metadata.rst:814
msgid "Note that ``Import-Namespace`` CANNOT be empty like ``Import-Name``."
msgstr ""

#: ../source/specifications/core-metadata.rst:823
msgid "Rarely Used Fields"
msgstr "Редко используемые поля"

#: ../source/specifications/core-metadata.rst:825
msgid ""
"The fields in this section are currently rarely used, as their design was "
"inspired by comparable mechanisms in Linux package management systems, and "
"it isn't at all clear how tools should interpret them in the context of an "
"open index server such as `PyPI <https://pypi.org>`__."
msgstr ""
"Поля в этом разделе в настоящее время используются редко, поскольку их "
"дизайн был вдохновлен аналогичными механизмами в системах управления "
"пакетами Linux, и совершенно не ясно, как инструменты должны "
"интерпретировать их в контексте открытого индексного сервера, такого как "
"`PyPI <https://pypi.org>`__."

#: ../source/specifications/core-metadata.rst:830
msgid ""
"As a result, popular installation tools ignore them completely, which in "
"turn means there is little incentive for package publishers to set them "
"appropriately. However, they're retained in the metadata specification, as "
"they're still potentially useful for informational purposes, and can also be "
"used for their originally intended purpose in combination with a curated "
"package repository."
msgstr ""
"В результате популярные инструменты установки полностью игнорируют их, что, "
"в свою очередь, не стимулирует издателей пакетов устанавливать их должным "
"образом. Тем не менее, они сохранены в спецификации метаданных, поскольку "
"все еще потенциально полезны в информационных целях, а также могут быть "
"использованы по своему первоначальному назначению в сочетании с курируемым "
"репозиторием пакетов."

#: ../source/specifications/core-metadata.rst:840
msgid "Provides-Dist (multiple use)"
msgstr "Provides-Dist (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:847
msgid ""
"Each entry contains a string naming a Distutils project which is contained "
"within this distribution.  This field *must* include the project identified "
"in the ``Name`` field, followed by the version : Name (Version)."
msgstr ""
"Каждая запись содержит строку, называющую проект Distutils, который "
"содержится в этом дистрибутиве.  Это поле *должно* включать проект, "
"указанный в поле ``Имя``, за которым следует версия : Имя (Версия)."

#: ../source/specifications/core-metadata.rst:852
msgid ""
"A distribution may provide additional names, e.g. to indicate that multiple "
"projects have been bundled together.  For instance, source distributions of "
"the ``ZODB`` project have historically included the ``transaction`` project, "
"which is now available as a separate distribution.  Installing such a source "
"distribution satisfies requirements for both ``ZODB`` and ``transaction``."
msgstr ""
"Дистрибутив может содержать дополнительные имена, например, чтобы указать, "
"что несколько проектов были объединены вместе.  Например, исходные "
"дистрибутивы проекта ``ZODB`` исторически включали проект ``transaction``, "
"который теперь доступен как отдельный дистрибутив.  Установка такого "
"исходного дистрибутива удовлетворяет требованиям как для ``ZODB``, так и для "
"``transaction``."

#: ../source/specifications/core-metadata.rst:859
msgid ""
"A distribution may also provide a \"virtual\" project name, which does not "
"correspond to any separately-distributed project:  such a name might be used "
"to indicate an abstract capability which could be supplied by one of "
"multiple projects.  E.g., multiple projects might supply RDBMS bindings for "
"use by a given ORM:  each project might declare that it provides ``ORM-"
"bindings``, allowing other projects to depend only on having at most one of "
"them installed."
msgstr ""
"Дистрибутив может также предоставлять \"виртуальное\" имя проекта, которое "
"не соответствует ни одному отдельно распространяемому проекту: такое имя "
"может использоваться для обозначения абстрактной возможности, которая может "
"быть предоставлена одним из нескольких проектов.  Например, несколько "
"проектов могут поставлять привязки к РСУБД для использования данной ORM: "
"каждый проект может объявить, что он предоставляет ``ORM-bindings'', "
"позволяя другим проектам зависеть только от наличия хотя бы одной из этих "
"привязок."

#: ../source/specifications/core-metadata.rst:867
msgid ""
"A version declaration may be supplied and must follow the rules described "
"in :doc:`version-specifiers`. The distribution's version number will be "
"implied if none is specified."
msgstr ""
"Может быть указано объявление версии, которое должно соответствовать "
"правилам, описанным в :doc:`version-specifiers`. Номер версии дистрибутива "
"будет подразумеваться, если он не указан."

#: ../source/specifications/core-metadata.rst:882
msgid "Obsoletes-Dist (multiple use)"
msgstr "Obsoletes-Dist (можно использовать несколько раз)"

#: ../source/specifications/core-metadata.rst:889
msgid ""
"Each entry contains a string describing a distutils project's distribution "
"which this distribution renders obsolete, meaning that the two projects "
"should not be installed at the same time."
msgstr ""
"Каждая запись содержит строку, описывающую дистрибутив проекта distutils, "
"который этот дистрибутив делает устаревшим, что означает, что эти два "
"проекта не должны быть установлены одновременно."

#: ../source/specifications/core-metadata.rst:893
msgid ""
"Version declarations can be supplied.  Version numbers must be in the format "
"specified in :doc:`version-specifiers`."
msgstr ""
"Декларации версий могут быть предоставлены.  Номера версий должны быть в "
"формате, указанном в :doc:`version-specifiers`."

#: ../source/specifications/core-metadata.rst:898
msgid ""
"The most common use of this field will be in case a project name changes, e."
"g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install "
"Torqued Python, the Gorgon distribution should be removed."
msgstr ""
"Чаще всего это поле используется в случае изменения названия проекта, "
"например, когда Gorgon 2.3 переходит в Torqued Python 1.0. При установке "
"Torqued Python дистрибутив Gorgon должен быть удален."

#: ../source/specifications/core-metadata.rst:911
msgid "Deprecated Fields"
msgstr "Утраченные поля"

#: ../source/specifications/core-metadata.rst:913
msgid ""
"Deprecated fields should be avoided, but they are valid metadata fields. "
"They may be removed in future versions of the core metadata standard (at "
"which point they will only be valid in files that specify a metadata version "
"prior to the removal). Tools SHOULD warn users when deprecated fields are "
"used."
msgstr ""
"Устаревших полей следует избегать, но они являются действительными полями "
"метаданных. Они могут быть удалены в будущих версиях основного стандарта "
"метаданных (в этом случае они будут действительны только в файлах, в которых "
"указана версия метаданных, предшествующая удалению). Инструменты ДОЛЖНЫ "
"предупреждать пользователей об использовании устаревших полей."

#: ../source/specifications/core-metadata.rst:922
msgid "Home-page"
msgstr "Home-page"

#: ../source/specifications/core-metadata.rst:928
#: ../source/specifications/core-metadata.rst:945
msgid "Per :pep:`753`, use :ref:`core-metadata-project-url` instead."
msgstr ""
"Согласно :pep:`753`, вместо этого используйте :ref:`core-metadata-project-"
"url`."

#: ../source/specifications/core-metadata.rst:930
msgid "A string containing the URL for the distribution's home page."
msgstr "Строка, содержащая URL-адрес главной страницы дистрибутива."

#: ../source/specifications/core-metadata.rst:939
msgid "Download-URL"
msgstr "Download-URL"

#: ../source/specifications/core-metadata.rst:947
msgid ""
"A string containing the URL from which this version of the distribution can "
"be downloaded.  (This means that the URL can't be something like \"``.../"
"BeagleVote-latest.tgz``\", but instead must be \"``.../BeagleVote-0.45."
"tgz``\".)"
msgstr ""
"Строка, содержащая URL, с которого можно загрузить данную версию "
"дистрибутива.  (Это означает, что URL не может быть чем-то вроде «``.../"
"BeagleVote-latest.tgz``», а вместо этого должен быть «``.../BeagleVote-0.45."
"tgz``».)"

#: ../source/specifications/core-metadata.rst:953
msgid "Requires"
msgstr "Требуется"

#: ../source/specifications/core-metadata.rst:956
msgid "in favour of ``Requires-Dist``"
msgstr "в пользу ``Requires-Dist``"

#: ../source/specifications/core-metadata.rst:959
msgid ""
"Each entry contains a string describing some other module or package "
"required by this package."
msgstr ""
"Каждая запись содержит строку, описывающую другой модуль или пакет, "
"необходимый для данного пакета."

#: ../source/specifications/core-metadata.rst:962
msgid ""
"The format of a requirement string is identical to that of a module or "
"package name usable with the ``import`` statement, optionally followed by a "
"version declaration within parentheses."
msgstr ""
"Формат строки требований идентичен формату имени модуля или пакета, "
"используемого с помощью оператора ``импорта``, за которым в круглых скобках "
"по желанию следует объявление версии."

#: ../source/specifications/core-metadata.rst:966
msgid ""
"A version declaration is a series of conditional operators and version "
"numbers, separated by commas. Conditional operators must be one of \"<\", "
"\">\"', \"<=\", \">=\", \"==\", and \"!=\". Version numbers must be in the "
"format accepted by the ``distutils.version.StrictVersion`` class: two or "
"three dot-separated numeric components, with an optional \"pre-release\" tag "
"on the end consisting of the letter 'a' or 'b' followed by a number. Example "
"version numbers are \"1.0\", \"2.3a2\", \"1.3.99\","
msgstr ""
"Объявление версии представляет собой ряд условных операторов и номеров "
"версий, разделенных запятыми. Условные операторы должны быть одним из \"<\", "
"\">\"', \"<=\", \">=\", \"==\" и \"!=\". Номера версий должны иметь формат, "
"принятый классом ``distutils.version.StrictVersion``: два или три числовых "
"компонента, разделенных точками, с необязательным тегом \"pre-release\" на "
"конце, состоящим из буквы 'a' или 'b', за которой следует число. Примеры "
"номеров версий: \"1.0\", \"2.3a2\", \"1.3.99\","

#: ../source/specifications/core-metadata.rst:974
msgid ""
"Any number of conditional operators can be specified, e.g. the string "
"\">1.0, !=1.3.4, <2.0\" is a legal version declaration."
msgstr ""
"Можно указать любое количество условных операторов, например, строка "
"\">1.0, !=1.3.4, <2.0\" является законным объявлением версии."

#: ../source/specifications/core-metadata.rst:977
msgid ""
"All of the following are possible requirement strings: \"rfc822\", \"zlib "
"(>=1.1.4)\", \"zope\"."
msgstr ""
"Возможными строками требований являются все следующие: \"rfc822\", \"zlib "
"(>=1.1.4)\", \"zope\"."

#: ../source/specifications/core-metadata.rst:980
msgid ""
"There’s no canonical list of what strings should be used; the Python "
"community is left to choose its own standards."
msgstr ""
"Не существует канонического списка того, какие строки должны использоваться; "
"сообщество Python оставляет за собой право выбирать собственные стандарты."

#: ../source/specifications/core-metadata.rst:993
msgid "Provides"
msgstr "Предоставляет"

#: ../source/specifications/core-metadata.rst:996
msgid "in favour of ``Provides-Dist``"
msgstr "в пользу ``Provides-Dist``"

#: ../source/specifications/core-metadata.rst:999
msgid ""
"Each entry contains a string describing a package or module that will be "
"provided by this package once it is installed. These strings should match "
"the ones used in Requirements fields. A version declaration may be supplied "
"(without a comparison operator); the package’s version number will be "
"implied if none is specified."
msgstr ""
"Каждая запись содержит строку, описывающую пакет или модуль, который будет "
"предоставлен этим пакетом после его установки. Эти строки должны совпадать с "
"теми, что используются в полях Requirements. Может быть указано объявление "
"версии (без оператора сравнения); номер версии пакета будет подразумеваться, "
"если он не указан."

#: ../source/specifications/core-metadata.rst:1015
msgid "Obsoletes"
msgstr "Обзоры"

#: ../source/specifications/core-metadata.rst:1018
msgid "in favour of ``Obsoletes-Dist``"
msgstr "в пользу ``Obsoletes-Dist``"

#: ../source/specifications/core-metadata.rst:1021
msgid ""
"Each entry contains a string describing a package or module that this "
"package renders obsolete, meaning that the two packages should not be "
"installed at the same time. Version declarations can be supplied."
msgstr ""
"Каждая запись содержит строку, описывающую пакет или модуль, который этот "
"пакет делает устаревшим, что означает, что эти два пакета не должны быть "
"установлены одновременно. Могут быть предоставлены объявления версий."

#: ../source/specifications/core-metadata.rst:1025
msgid ""
"The most common use of this field will be in case a package name changes, e."
"g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install "
"Torqued Python, the Gorgon package should be removed."
msgstr ""
"Чаще всего это поле используется в случае изменения названия пакета, "
"например, Gorgon 2.3 переходит в Torqued Python 1.0. При установке Torqued "
"Python пакет Gorgon должен быть удален."

#: ../source/specifications/core-metadata.rst:1037
msgid "March 2001: Core metadata 1.0 was approved through :pep:`241`."
msgstr "Март 2001: Core metadata 1.0 был одобрен через :pep:`241`."

#: ../source/specifications/core-metadata.rst:1039
#, fuzzy
#| msgid "April 2003: Core metadata 1.1 was approved through :pep:`314`:"
msgid "April 2003: Core metadata 1.1 was approved through :pep:`314`."
msgstr "Апрель 2003 года: Core metadata 1.1 был одобрен через :pep:`314`:"

#: ../source/specifications/core-metadata.rst:1041
msgid "February 2010: Core metadata 1.2 was approved through :pep:`345`."
msgstr "Февраль 2010 г: Core metadata 1.2 был одобрен через :pep:`345`."

#: ../source/specifications/core-metadata.rst:1043
msgid "February 2018: Core metadata 2.1 was approved through :pep:`566`."
msgstr "Февраль 2018 г: Core metadata 2.1 был одобрен через :pep:`566`."

#: ../source/specifications/core-metadata.rst:1045
msgid "Added ``Description-Content-Type`` and ``Provides-Extra``."
msgstr "Добавлены ``Description-Content-Type`` и ``Provides-Extra``."

#: ../source/specifications/core-metadata.rst:1046
msgid "Added canonical method for transforming metadata to JSON."
msgstr "Добавлен метод canonical для преобразования метаданных в JSON."

#: ../source/specifications/core-metadata.rst:1047
msgid "Restricted the grammar of the ``Name`` field."
msgstr "Ограничение грамматики поля ``Имя``."

#: ../source/specifications/core-metadata.rst:1049
msgid "October 2020: Core metadata 2.2 was approved through :pep:`643`."
msgstr "Октябрь 2020 года: Core metadata 2.2 был одобрен через :pep:`643`."

#: ../source/specifications/core-metadata.rst:1051
msgid "Added the ``Dynamic`` field."
msgstr "Добавлено поле ``Динамика``."

#: ../source/specifications/core-metadata.rst:1053
msgid "March 2022: Core metadata 2.3 was approved through :pep:`685`."
msgstr "Март 2022: Core metadata 2.3 был одобрен через :pep:`685`."

#: ../source/specifications/core-metadata.rst:1055
msgid "Restricted extra names to be normalized."
msgstr "Ограниченные дополнительные имена, подлежащие нормализации."

#: ../source/specifications/core-metadata.rst:1057
msgid "August 2024: Core metadata 2.4 was approved through :pep:`639`."
msgstr "Август 2024 года: Core metadata 2.4 был одобрен через :pep:`639`."

#: ../source/specifications/core-metadata.rst:1059
msgid "Added the ``License-Expression`` field."
msgstr "Добавлено поле ``Лицензия-выражение``."

#: ../source/specifications/core-metadata.rst:1060
msgid "Added the ``License-File`` field."
msgstr "Добавлено поле ``Лицензионный файл``."

#: ../source/specifications/core-metadata.rst:1062
msgid ""
"August 2025: Clarified that ``Dynamic`` only affects how fields must be "
"treated when building a wheel from a sdist, not when modifying a wheel."
msgstr ""

#: ../source/specifications/core-metadata.rst:1066
#, fuzzy
#| msgid "October 2020: Core metadata 2.2 was approved through :pep:`643`."
msgid "September 2025: Core metadata 2.5 was approved through :pep:`794`."
msgstr "Октябрь 2020 года: Core metadata 2.2 был одобрен через :pep:`643`."

#: ../source/specifications/core-metadata.rst:1068
#, fuzzy
#| msgid "Added the ``Dynamic`` field."
msgid "Added the ``Import-Name`` field."
msgstr "Добавлено поле ``Динамика``."

#: ../source/specifications/core-metadata.rst:1069
#, fuzzy
#| msgid "Added the ``Dynamic`` field."
msgid "Added the ``Import-Namespace`` field."
msgstr "Добавлено поле ``Динамика``."

#: ../source/specifications/core-metadata.rst:1071
msgid ""
"October 2025: Clarified that ``License-Expression`` applies to the "
"containing distribution file and not the project itself."
msgstr ""

#: ../source/specifications/core-metadata.rst:1076
msgid "reStructuredText markup: https://docutils.sourceforge.io/"
msgstr "Разметка reStructuredText: https://docutils.sourceforge.io/"

#: ../source/specifications/core-metadata.rst:1081
msgid "RFC 822 Long Header Fields: :rfc:`822#section-3.1.1`"
msgstr "Длинные поля заголовка RFC 822: :rfc:`822#section-3.1.1`"

#: ../source/specifications/dependency-groups.rst:5
msgid "Dependency Groups"
msgstr "Группы зависимости"

#: ../source/specifications/dependency-groups.rst:7
#, fuzzy
#| msgid ""
#| "This specification defines Dependency Groups, a mechanism for storing "
#| "package requirements in ``pyproject.toml`` files such that they are not "
#| "included in project metadata when it is built."
msgid ""
"This specification defines dependency groups, a mechanism for storing "
"package requirements in ``pyproject.toml`` files such that they are not "
"included in project metadata when it is built."
msgstr ""
"Эта спецификация определяет Dependency Groups, механизм для хранения "
"требований к пакетам в файлах ``pyproject.toml`` таким образом, чтобы они не "
"включались в метаданные проекта при его сборке."

#: ../source/specifications/dependency-groups.rst:11
#, fuzzy
#| msgid ""
#| "Dependency Groups are suitable for internal development use-cases like "
#| "linting and testing, as well as for projects which are not built for "
#| "distribution, like collections of related scripts."
msgid ""
"Dependency groups are suitable for internal development use-cases like "
"linting and testing, as well as for projects which are not built for "
"distribution, like collections of related scripts."
msgstr ""
"Группы зависимостей подходят для использования во внутренней разработке, "
"например, для линтинга и тестирования, а также для проектов, которые не "
"предназначены для распространения, например, для коллекций связанных "
"скриптов."

#: ../source/specifications/dependency-groups.rst:15
#, fuzzy
#| msgid ""
#| "Fundamentally, Dependency Groups should be thought of as being a "
#| "standardized subset of the capabilities of ``requirements.txt`` files "
#| "(which are ``pip``-specific)."
msgid ""
"Fundamentally, dependency groups should be thought of as being a "
"standardized subset of the capabilities of ``requirements.txt`` files (which "
"are ``pip``-specific)."
msgstr ""
"По сути, группы зависимостей следует рассматривать как стандартизированное "
"подмножество возможностей файлов ``requirements.txt`` (которые являются "
"специфическими для ``pip``)."

#: ../source/specifications/dependency-groups.rst:25
#, fuzzy
#| msgid "This is a simple table which shows a ``test`` group::"
msgid "This is a simple table which shows ``docs`` and ``test`` groups::"
msgstr "Это простая таблица, которая показывает группу ``тест``::"

#: ../source/specifications/dependency-groups.rst:31
#, fuzzy
#| msgid "and a similar table which defines ``test`` and ``coverage`` groups::"
msgid ""
"and a similar table which defines ``docs``, ``test``, and ``coverage`` "
"groups::"
msgstr "и аналогичная таблица, определяющая группы ``тестов`` и ``покрытий``::"

#: ../source/specifications/dependency-groups.rst:39
msgid "The ``[dependency-groups]`` Table"
msgstr "Таблица ``[dependency-groups]``"

#: ../source/specifications/dependency-groups.rst:41
#, fuzzy
#| msgid ""
#| "Dependency Groups are defined as a table in ``pyproject.toml`` named "
#| "``dependency-groups``. The ``dependency-groups`` table contains an "
#| "arbitrary number of user-defined keys, each of which has, as its value, a "
#| "list of requirements."
msgid ""
"Dependency groups are defined as a table in ``pyproject.toml`` named "
"``dependency-groups``. The ``dependency-groups`` table contains an arbitrary "
"number of user-defined keys, each of which has, as its value, a list of "
"requirements."
msgstr ""
"Группы зависимостей определяются в виде таблицы в файле ``pyproject.toml`` с "
"именем ``dependency-groups``. Таблица ``dependency-groups`` содержит "
"произвольное количество определяемых пользователем ключей, каждый из которых "
"имеет в качестве значения список требований."

#: ../source/specifications/dependency-groups.rst:46
msgid ""
"``[dependency-groups]`` keys, sometimes also called \"group names\", must "
"be :ref:`valid non-normalized names <name-format>`. Tools which handle "
"Dependency Groups MUST :ref:`normalize <name-normalization>` these names "
"before comparisons."
msgstr ""
"Ключи ``[dependency-groups]``, иногда также называемые «именами групп», "
"должны быть :ref:`valid non-normalized names <name-format>`. Инструменты, "
"работающие с группами зависимостей, ДОЛЖНЫ :ref:`normalize <name-"
"normalization>` эти имена перед сравнением."

#: ../source/specifications/dependency-groups.rst:51
msgid ""
"Tools SHOULD prefer to present the original, non-normalized name to users, "
"and if duplicate names are detected after normalization, tools SHOULD emit "
"an error."
msgstr ""
"Инструменты ДОЛЖНЫ предпочитать представлять пользователям оригинальное, "
"ненормализованное имя, а если после нормализации обнаруживаются дубликаты "
"имен, инструменты ДОЛЖНЫ выдавать ошибку."

#: ../source/specifications/dependency-groups.rst:55
msgid ""
"Requirement lists, the values in ``[dependency-groups]``, may contain "
"strings, tables (``dict`` in Python), or a mix of strings and tables. "
"Strings must be valid :ref:`dependency specifiers <dependency-specifiers>`, "
"and tables must be valid Dependency Group Includes."
msgstr ""
"Списки требований, значения в ``[dependency-groups]``, могут содержать "
"строки, таблицы (``dict`` в Python) или смесь строк и таблиц. Строки должны "
"быть валидными :ref:`dependency specifiers <dependency-specifiers>`, а "
"таблицы должны быть валидными Dependency Group Includes."

#: ../source/specifications/dependency-groups.rst:61
msgid "Dependency Group Include"
msgstr "Группа зависимости Включает"

#: ../source/specifications/dependency-groups.rst:63
msgid ""
"A Dependency Group Include includes another Dependency Group in the current "
"group."
msgstr ""
"Группа зависимостей Include включает другую группу зависимостей в текущую "
"группу."

#: ../source/specifications/dependency-groups.rst:66
msgid ""
"An include is a table with exactly one key, ``\"include-group\"``, whose "
"value is a string, the name of another Dependency Group."
msgstr ""
"Включенная группа - это таблица с одним ключом, ``«include-group»``, "
"значением которого является строка, имя другой группы зависимостей."

#: ../source/specifications/dependency-groups.rst:69
msgid ""
"Includes are defined to be exactly equivalent to the contents of the named "
"Dependency Group, inserted into the current group at the location of the "
"include. For example, if ``foo = [\"a\", \"b\"]`` is one group, and ``bar = "
"[\"c\", {include-group = \"foo\"}, \"d\"]`` is another, then ``bar`` should "
"evaluate to ``[\"c\", \"a\", \"b\", \"d\"]`` when Dependency Group Includes "
"are expanded."
msgstr ""
"Включения определяются как точно эквивалентные содержимому именованной "
"группы зависимостей, вставленные в текущую группу в месте расположения "
"включения. Например, если ``foo = [«a», «b»]`` - это одна группа, а ``bar = "
"[«c», {include-group = «foo»}, «d»]`` - другая, то ``bar`` должен "
"оцениваться как ``[«c», «a», „b“, «d»]`` при раскрытии Dependency Group "
"Includes."

#: ../source/specifications/dependency-groups.rst:75
msgid ""
"Dependency Group Includes may specify the same package multiple times. Tools "
"SHOULD NOT deduplicate or otherwise alter the list contents produced by the "
"include. For example, given the following table:"
msgstr ""
"Включения групп зависимостей могут указывать один и тот же пакет несколько "
"раз. Инструменты НЕ ДОЛЖНЫ дедуплицировать или иным образом изменять "
"содержимое списка, созданного включением. Например, в следующей таблице:"

#: ../source/specifications/dependency-groups.rst:92
msgid ""
"The resolved value of ``all`` SHOULD be ``[\"foo\", \"foo\", \"foo>1.0\", "
"\"foo<1.0\"]``. Tools should handle such a list exactly as they would handle "
"any other case in which they are asked to process the same requirement "
"multiple times with different version constraints."
msgstr ""
"Разрешенное значение ``all`` ДОЛЖНО быть ``[«foo», „foo“, «foo>1.0», "
"«foo<1.0»]``. Инструменты должны работать с таким списком точно так же, как "
"и в любом другом случае, когда их просят обработать одно и то же требование "
"несколько раз с разными ограничениями на версию."

#: ../source/specifications/dependency-groups.rst:97
msgid ""
"Dependency Group Includes may include groups containing Dependency Group "
"Includes, in which case those includes should be expanded as well. "
"Dependency Group Includes MUST NOT include cycles, and tools SHOULD report "
"an error if they detect a cycle."
msgstr ""
"Dependency Group Includes может включать группы, содержащие Dependency Group "
"Includes, в этом случае эти включения также должны быть расширены. "
"Dependency Group Includes НЕ ДОЛЖНЫ включать циклы, и инструменты ДОЛЖНЫ "
"сообщать об ошибке, если они обнаруживают цикл."

#: ../source/specifications/dependency-groups.rst:102
msgid "Package Building"
msgstr "Создание пакета"

#: ../source/specifications/dependency-groups.rst:104
#, fuzzy
#| msgid ""
#| "Build backends MUST NOT include Dependency Group data in built "
#| "distributions as package metadata. This means that sdist ``PKG-INFO`` and "
#| "wheel ``METADATA`` files should not include referenceable fields "
#| "containing Dependency Groups."
msgid ""
"Build backends MUST NOT include Dependency Group data in built distributions "
"as package metadata. This means that sdist ``PKG-INFO`` and wheel "
"``METADATA`` files should not include referenceable fields containing "
"dependency groups."
msgstr ""
"Бэкенды сборки НЕ ДОЛЖНЫ включать данные о группах зависимостей в собранные "
"дистрибутивы в качестве метаданных пакета. Это означает, что файлы sdist "
"``PKG-INFO`` и wheel ``METADATA`` не должны содержать ссылаемые поля, "
"содержащие Dependency Groups."

#: ../source/specifications/dependency-groups.rst:108
#, fuzzy
#| msgid ""
#| "It is, however, valid to use Dependency Groups in the evaluation of "
#| "dynamic metadata, and ``pyproject.toml`` files included in sdists will "
#| "still contain ``[dependency-groups]``. However, the table's contents are "
#| "not part of a built package's interfaces."
msgid ""
"It is, however, valid to use dependency groups in the evaluation of dynamic "
"metadata, and ``pyproject.toml`` files included in sdists will still contain "
"``[dependency-groups]``. However, the table's contents are not part of a "
"built package's interfaces."
msgstr ""
"Однако использование групп зависимостей при оценке динамических метаданных "
"допустимо, и файлы ``pyproject.toml``, включенные в sdists, по-прежнему "
"будут содержать ``[dependency-groups]``. Однако содержимое таблицы не "
"является частью интерфейсов собранного пакета."

#: ../source/specifications/dependency-groups.rst:114
msgid "Installing Dependency Groups & Extras"
msgstr "Установка групп зависимостей и дополнительных функций"

#: ../source/specifications/dependency-groups.rst:116
#, fuzzy
#| msgid ""
#| "There is no syntax or specification-defined interface for installing or "
#| "referring to Dependency Groups. Tools are expected to provide dedicated "
#| "interfaces for this purpose."
msgid ""
"There is no syntax or specification-defined interface for installing or "
"referring to dependency groups. Tools are expected to provide dedicated "
"interfaces for this purpose."
msgstr ""
"Не существует синтаксиса или определенного спецификацией интерфейса для "
"установки или обращения к группам зависимостей. Ожидается, что инструменты "
"будут предоставлять специальные интерфейсы для этой цели."

#: ../source/specifications/dependency-groups.rst:120
#, fuzzy
#| msgid ""
#| "Tools MAY choose to provide the same or similar interfaces for "
#| "interacting with Dependency Groups as they do for managing extras. Tools "
#| "authors are advised that the specification does not forbid having an "
#| "extra whose name matches a Dependency Group. Separately, users are "
#| "advised to avoid creating Dependency Groups whose names match extras, and "
#| "tools MAY treat such matching as an error."
msgid ""
"Tools MAY choose to provide the same or similar interfaces for interacting "
"with dependency groups as they do for managing extras. Tools authors are "
"advised that the specification does not forbid having an extra whose name "
"matches a Dependency Group. Separately, users are advised to avoid creating "
"dependency groups whose names match extras, and tools MAY treat such "
"matching as an error."
msgstr ""
"Инструменты МОГУТ предоставлять те же или подобные интерфейсы для "
"взаимодействия с группами зависимостей, что и для управления дополнениями. "
"Авторам инструментов рекомендуется обратить внимание на то, что спецификация "
"не запрещает иметь экстра, имя которого совпадает с группой зависимостей. "
"Отдельно пользователям рекомендуется избегать создания групп зависимостей, "
"имена которых совпадают с именами дополнений, а инструменты МОГУТ "
"рассматривать такое совпадение как ошибку."

#: ../source/specifications/dependency-groups.rst:128
msgid "Validation and Compatibility"
msgstr "Проверка и совместимость"

#: ../source/specifications/dependency-groups.rst:130
#, fuzzy
#| msgid ""
#| "Tools supporting Dependency Groups may want to validate data before using "
#| "it. When implementing such validation, authors should be aware of the "
#| "possibility of future extensions to the specification, so that they do "
#| "not unnecessarily emit errors or warnings."
msgid ""
"Tools supporting dependency groups may want to validate data before using "
"it. When implementing such validation, authors should be aware of the "
"possibility of future extensions to the specification, so that they do not "
"unnecessarily emit errors or warnings."
msgstr ""
"Инструменты, поддерживающие группы зависимостей, могут захотеть проверять "
"данные перед их использованием. При реализации такой проверки авторы должны "
"учитывать возможность будущих расширений спецификации, чтобы не выдавать "
"ненужных ошибок или предупреждений."

#: ../source/specifications/dependency-groups.rst:135
#, fuzzy
#| msgid ""
#| "Tools SHOULD error when evaluating or processing unrecognized data in "
#| "Dependency Groups."
msgid ""
"Tools SHOULD error when evaluating or processing unrecognized data in "
"dependency groups."
msgstr ""
"Инструменты ДОЛЖНЫ ошибаться при оценке или обработке нераспознанных данных "
"в группах зависимостей."

#: ../source/specifications/dependency-groups.rst:138
#, fuzzy
#| msgid ""
#| "Tools SHOULD NOT eagerly validate the contents of *all* Dependency Groups "
#| "unless they have a need to do so."
msgid ""
"Tools SHOULD NOT eagerly validate the contents of *all* dependency groups "
"unless they have a need to do so."
msgstr ""
"Инструментальные средства НЕ ДОЛЖНЫ с нетерпением проверять содержимое "
"*всех* групп зависимостей, если у них нет необходимости в этом."

#: ../source/specifications/dependency-groups.rst:141
msgid ""
"This means that in the presence of the following data, most tools should "
"allow the ``foo`` group to be used and only error if the ``bar`` group is "
"used:"
msgstr ""
"Это означает, что при наличии следующих данных большинство инструментов "
"должны разрешить использование группы ``foo`` и ошибаться только в случае "
"использования группы ``bar``:"

#: ../source/specifications/dependency-groups.rst:152
#, fuzzy
#| msgid ""
#| "There are several known cases of tools which have good cause to be "
#| "stricter. Linters and validators are an example, as their purpose is to "
#| "validate the contents of all Dependency Groups."
msgid ""
"There are several known cases of tools which have good cause to be stricter. "
"Linters and validators are an example, as their purpose is to validate the "
"contents of all dependency groups."
msgstr ""
"Известно несколько случаев, когда инструменты имеют все основания быть более "
"строгими. Примером могут служить линеры и валидаторы, поскольку их задача - "
"проверять содержимое всех групп зависимостей."

#: ../source/specifications/dependency-groups.rst:157
#: ../source/specifications/inline-script-metadata.rst:123
msgid "Reference Implementation"
msgstr "Справочное осуществление"

#: ../source/specifications/dependency-groups.rst:159
msgid ""
"The following Reference Implementation prints the contents of a Dependency "
"Group to stdout, newline delimited. The output is therefore valid "
"``requirements.txt`` data."
msgstr ""
"Следующая реализация справочника выводит содержимое группы зависимостей в "
"stdout с разграничением по новой строке. Таким образом, на выходе получаются "
"корректные данные ``requirements.txt``."

#: ../source/specifications/dependency-groups.rst:252
msgid "October 2024: This specification was approved through :pep:`735`."
msgstr "Октябрь 2024 года: Эта спецификация была одобрена через :pep:`735`."

#: ../source/specifications/dependency-specifiers.rst:7
msgid "Dependency specifiers"
msgstr "Спецификаторы зависимостей"

#: ../source/specifications/dependency-specifiers.rst:9
msgid ""
"This document describes the dependency specifiers format as originally "
"specified in :pep:`508`."
msgstr ""
"Этот документ описывает формат спецификаторов зависимостей, изначально "
"указанный в :pep:`508`."

#: ../source/specifications/dependency-specifiers.rst:12
msgid ""
"The job of a dependency is to enable tools like pip [#pip]_ to find the "
"right package to install. Sometimes this is very loose - just specifying a "
"name, and sometimes very specific - referring to a specific file to install. "
"Sometimes dependencies are only relevant in one platform, or only some "
"versions are acceptable, so the language permits describing all these cases."
msgstr ""
"Задача зависимостей - дать возможность таким инструментам, как pip [#pip]_, "
"найти нужный пакет для установки. Иногда это очень неконкретно - просто "
"указание имени, а иногда очень конкретно - ссылка на конкретный файл для "
"установки. Иногда зависимости актуальны только для одной платформы, или "
"допустимы только некоторые версии, поэтому язык позволяет описывать все эти "
"случаи."

#: ../source/specifications/dependency-specifiers.rst:18
msgid ""
"The language defined is a compact line based format which is already in "
"widespread use in pip requirements files, though we do not specify the "
"command line option handling that those files permit. There is one caveat - "
"the URL reference form, specified in :ref:`Versioning specifier "
"specification <version-specifiers>` is not actually implemented in pip, but "
"we use that format rather than pip's current native format."
msgstr ""
"Определенный язык - это компактный формат, основанный на строках, который "
"уже широко используется в файлах требований pip, хотя мы не указываем "
"обработку опций командной строки, которую допускают эти файлы. Есть одна "
"оговорка - форма URL-ссылки, указанная в :ref:`Спецификация спецификатора "
"версий <version-specifiers>`, на самом деле не реализована в pip, но мы "
"используем этот формат, а не текущий родной формат pip."

#: ../source/specifications/dependency-specifiers.rst:31
msgid "All features of the language shown with a name based lookup::"
msgstr "Все возможности языка отображаются с помощью поиска по названию::"

#: ../source/specifications/dependency-specifiers.rst:35
msgid "A minimal URL based lookup::"
msgstr "Минимальный поиск на основе URL ::"

#: ../source/specifications/dependency-specifiers.rst:40
msgid "Concepts"
msgstr "Концепции"

#: ../source/specifications/dependency-specifiers.rst:42
msgid ""
"A dependency specification always specifies a distribution name. It may "
"include extras, which expand the dependencies of the named distribution to "
"enable optional features. The version installed can be controlled using "
"version limits, or giving the URL to a specific artifact to install. Finally "
"the dependency can be made conditional using environment markers."
msgstr ""
"Спецификация зависимостей всегда указывает имя дистрибутива. Она может "
"включать дополнения, которые расширяют зависимости именованного дистрибутива "
"для включения дополнительных возможностей. Установленная версия может "
"контролироваться с помощью ограничений версии или указания URL-адреса "
"конкретного артефакта для установки. Наконец, зависимость может быть "
"обусловлена с помощью маркеров окружения."

#: ../source/specifications/dependency-specifiers.rst:49
msgid "Grammar"
msgstr "Грамматика"

#: ../source/specifications/dependency-specifiers.rst:51
msgid ""
"We first cover the grammar briefly and then drill into the semantics of each "
"section later."
msgstr ""
"Сначала мы кратко рассмотрим грамматику, а затем углубимся в семантику "
"каждого раздела."

#: ../source/specifications/dependency-specifiers.rst:54
msgid ""
"A distribution specification is written in ASCII text. We use a parsley "
"[#parsley]_ grammar to provide a precise grammar. It is expected that the "
"specification will be embedded into a larger system which offers framing "
"such as comments, multiple line support via continuations, or other such "
"features."
msgstr ""
"Спецификация дистрибутива записывается в виде ASCII-текста. Мы используем "
"грамматику parsley [#parsley]_, чтобы обеспечить точную грамматику. "
"Предполагается, что спецификация будет встроена в более крупную систему, "
"которая предлагает такие возможности, как комментарии, поддержка нескольких "
"строк через продолжения или другие подобные возможности."

#: ../source/specifications/dependency-specifiers.rst:59
msgid ""
"The full grammar including annotations to build a useful parse tree is "
"included at the end of this document."
msgstr ""
"Полная грамматика, включая аннотации для построения полезного дерева "
"разбора, приведена в конце этого документа."

#: ../source/specifications/dependency-specifiers.rst:62
msgid ""
"Versions may be specified according to the rules of the :ref:`Version "
"specifier specification <version-specifiers>`. (Note: URI is defined in :rfc:"
"`std-66 <3986>`)::"
msgstr ""
"Версии могут быть указаны в соответствии с правилами спецификации "
"спецификатора версий <version-specifiers>`. (Примечание: URI определены в :"
"rfc:`std-66 <3986>`)::"

#: ../source/specifications/dependency-specifiers.rst:73
msgid ""
"Environment markers allow making a specification only take effect in some "
"environments::"
msgstr ""
"Маркеры среды позволяют сделать так, чтобы спецификация действовала только в "
"некоторых средах::"

#: ../source/specifications/dependency-specifiers.rst:102
msgid ""
"Optional components of a distribution may be specified using the extras "
"field::"
msgstr ""
"Дополнительные компоненты дистрибутива могут быть указаны с помощью поля "
"extras::"

#: ../source/specifications/dependency-specifiers.rst:111
msgid "Restrictions on names for extras is defined in :pep:`685`."
msgstr "Ограничения на имена для дополнений определены в :pep:`685`."

#: ../source/specifications/dependency-specifiers.rst:113
msgid "Giving us a rule for name based requirements::"
msgstr "Предоставляем правило для требований, основанных на именах::"

#: ../source/specifications/dependency-specifiers.rst:117
msgid "And a rule for direct reference specifications::"
msgstr "И правило для спецификаций с прямыми ссылками::"

#: ../source/specifications/dependency-specifiers.rst:121
msgid "Leading to the unified rule that can specify a dependency.::"
msgstr "Приводит к единому правилу, которое может указывать на зависимость.::"

#: ../source/specifications/dependency-specifiers.rst:126
msgid "Whitespace"
msgstr "Пробел"

#: ../source/specifications/dependency-specifiers.rst:128
msgid ""
"Non line-breaking whitespace is mostly optional with no semantic meaning. "
"The sole exception is detecting the end of a URL requirement."
msgstr ""
"Неразрывные пробельные символы в большинстве случаев являются "
"необязательными и не имеют смыслового значения. Единственным исключением "
"является определение конца требования URL."

#: ../source/specifications/dependency-specifiers.rst:134
msgid "Names"
msgstr "Имена"

#: ../source/specifications/dependency-specifiers.rst:136
msgid ""
"Python distribution names are currently defined in :pep:`345`. Names act as "
"the primary identifier for distributions. They are present in all dependency "
"specifications, and are sufficient to be a specification on their own. "
"However, PyPI places strict restrictions on names - they must match a case "
"insensitive regex or they won't be accepted. Accordingly, in this document "
"we limit the acceptable values for identifiers to that regex. A full "
"redefinition of name may take place in a future metadata PEP. The regex (run "
"with re.IGNORECASE) is::"
msgstr ""
"Имена дистрибутивов Python в настоящее время определены в :pep:`345`. Имена "
"выступают в качестве основного идентификатора дистрибутивов. Они "
"присутствуют во всех спецификациях зависимостей, и их достаточно, чтобы быть "
"самостоятельной спецификацией. Однако PyPI накладывает строгие ограничения "
"на имена - они должны соответствовать регистронезависимому регексу, иначе "
"они не будут приняты. Соответственно, в этом документе мы ограничиваем "
"допустимые значения для идентификаторов этим regex. Полное переопределение "
"имени может произойти в будущем PEP для метаданных. Регекс (выполняется с re."
"IGNORECASE) выглядит так::"

#: ../source/specifications/dependency-specifiers.rst:150
msgid "Extras"
msgstr "Дополнительно"

#: ../source/specifications/dependency-specifiers.rst:152
msgid ""
"An extra is an optional part of a distribution. Distributions can specify as "
"many extras as they wish, and each extra results in the declaration of "
"additional dependencies of the distribution **when** the extra is used in a "
"dependency specification. For instance::"
msgstr ""
"Экстра - это необязательная часть дистрибутива. Дистрибутивы могут указывать "
"столько дополнений, сколько захотят, и каждое дополнение приводит к "
"объявлению дополнительных зависимостей дистрибутива, **когда** дополнение "
"используется в спецификации зависимостей. Например::"

#: ../source/specifications/dependency-specifiers.rst:159
msgid ""
"Extras union in the dependencies they define with the dependencies of the "
"distribution they are attached to. The example above would result in "
"requests being installed, and requests own dependencies, and also any "
"dependencies that are listed in the \"security\" extra of requests."
msgstr ""
"Дополнения объединяют зависимости, которые они определяют, с зависимостями "
"дистрибутива, к которому они присоединены. Приведенный выше пример приведет "
"к установке requests, собственных зависимостей запросов, а также любых "
"зависимостей, перечисленных в дополнении запросы \"безопасности\"."

#: ../source/specifications/dependency-specifiers.rst:164
msgid ""
"If multiple extras are listed, all the dependencies are unioned together."
msgstr ""
"Если перечислено несколько дополнений, все зависимости объединяются вместе."

#: ../source/specifications/dependency-specifiers.rst:169
msgid "Versions"
msgstr "Версии"

#: ../source/specifications/dependency-specifiers.rst:171
msgid ""
"See the :ref:`Version specifier specification <version-specifiers>` for more "
"detail on both version numbers and version comparisons. Version "
"specifications limit the versions of a distribution that can be used. They "
"only apply to distributions looked up by name, rather than via a URL. "
"Version comparison are also used in the markers feature. The optional "
"brackets around a version are present for compatibility with :pep:`345` but "
"should not be generated, only accepted."
msgstr ""
"Более подробно о номерах версий и их сравнении см. в :ref:`Спецификация "
"спецификаторов версий <version-specifiers>`. Спецификаторы версий "
"ограничивают версии дистрибутива, которые могут быть использованы. Они "
"применяются только к дистрибутивам, которые ищутся по имени, а не по URL. "
"Сравнение версий также используется в функции маркеров. Необязательные "
"скобки вокруг версии присутствуют для совместимости с :pep:`345`, но не "
"должны генерироваться, а только приниматься."

#: ../source/specifications/dependency-specifiers.rst:182
msgid "Environment Markers"
msgstr "Маркеры окружающей среды"

#: ../source/specifications/dependency-specifiers.rst:184
msgid ""
"Environment markers allow a dependency specification to provide a rule that "
"describes when the dependency should be used. For instance, consider a "
"package that needs argparse. In Python 2.7 argparse is always present. On "
"older Python versions it has to be installed as a dependency. This can be "
"expressed as so::"
msgstr ""
"Маркеры окружения позволяют спецификации зависимости предоставить правило, "
"описывающее, когда зависимость должна быть использована. Например, "
"рассмотрим пакет, которому нужен argparse. В Python 2.7 argparse "
"присутствует всегда. В более старых версиях Python он должен быть установлен "
"как зависимость. Это можно выразить так::"

#: ../source/specifications/dependency-specifiers.rst:191
msgid ""
"A marker expression evaluates to either True or False. When it evaluates to "
"False, the dependency specification should be ignored."
msgstr ""
"Маркерное выражение оценивается либо в True, либо в False. Если оно имеет "
"значение False, спецификация зависимости должна быть проигнорирована."

#: ../source/specifications/dependency-specifiers.rst:194
msgid ""
"The marker language is inspired by Python itself, chosen for the ability to "
"safely evaluate it without running arbitrary code that could become a "
"security vulnerability. Markers were first standardised in :pep:`345`. This "
"document fixes some issues that were observed in the design described in :"
"pep:`426`."
msgstr ""
"Язык маркеров вдохновлен самим Python и выбран за возможность безопасной "
"оценки без запуска произвольного кода, который может стать уязвимостью "
"безопасности. Впервые маркеры были стандартизированы в :pep:`345`. В этом "
"документе исправлены некоторые проблемы, которые были замечены в "
"конструкции, описанной в :pep:`426`."

#: ../source/specifications/dependency-specifiers.rst:199
#, fuzzy
#| msgid ""
#| "Comparisons in marker expressions are typed by the comparison operator.  "
#| "The <marker_op> operators that are not in <version_cmp> perform the same "
#| "as they do for strings in Python. The <version_cmp> operators use the "
#| "version comparison rules of the :ref:`Version specifier specification "
#| "<version-specifiers>` when those are defined (that is when both sides "
#| "have a valid version specifier). If there is no defined behaviour of this "
#| "specification and the operator exists in Python, then the operator falls "
#| "back to the Python behaviour. Otherwise an error should be raised. e.g. "
#| "the following will result in  errors::"
msgid ""
"Comparisons in marker expressions are typed by the comparison operator and "
"the type of the marker value. The <marker_op> operators that are not in "
"<version_cmp> perform the same as they do for strings or sets in Python "
"based on whether the marker value is a string or set itself. The "
"<version_cmp> operators use the version comparison rules of the :ref:"
"`Version specifier specification <version-specifiers>` when those are "
"defined (that is when both sides have a valid version specifier). If there "
"is no defined behaviour of this specification and the operator exists in "
"Python, then the operator falls back to the Python behaviour for the types "
"involved. Otherwise an error should be raised. e.g. the following will "
"result in errors::"
msgstr ""
"Сравнения в маркерных выражениях типизируются оператором сравнения.  "
"Операторы <marker_op>, не входящие в <version_cmp>, работают так же, как и "
"для строк в Python. Операторы <version_cmp> используют правила сравнения "
"версий из спецификации спецификаторов версий <version-specifiers>`, когда "
"они определены (то есть когда обе стороны имеют корректный спецификатор "
"версии). Если поведение этой спецификации не определено, а оператор "
"существует в Python, то оператор возвращается к поведению Python. В "
"противном случае должна быть выдана ошибка. Например, следующие действия "
"приведут к ошибкам::"

#: ../source/specifications/dependency-specifiers.rst:213
msgid ""
"User supplied constants are always encoded as strings with either ``'`` or "
"``\"`` quote marks. Note that backslash escapes are not defined, but "
"existing implementations do support them. They are not included in this "
"specification because they add complexity and there is no observable need "
"for them today. Similarly we do not define non-ASCII character support: all "
"the runtime variables we are referencing are expected to be ASCII-only."
msgstr ""
"Пользовательские константы всегда кодируются как строки с кавычками ````` "
"или `````````. Обратите внимание, что экранирование обратной косой черты не "
"определено, но существующие реализации поддерживают его. Они не включены в "
"эту спецификацию, потому что добавляют сложности, и в настоящее время в них "
"нет видимой необходимости. Точно так же мы не определяем поддержку символов, "
"отличных от ASCII: все переменные времени выполнения, на которые мы "
"ссылаемся, должны быть только ASCII."

#: ../source/specifications/dependency-specifiers.rst:220
msgid ""
"The variables in the marker grammar such as \"os_name\" resolve to values "
"looked up in the Python runtime. With the exception of \"extra\" all values "
"are defined on all Python versions today - it is an error in the "
"implementation of markers if a value is not defined."
msgstr ""
"Переменные в грамматике маркеров, такие как \"os_name\", разрешаются в "
"значения, которые ищутся во времени выполнения Python. За исключением "
"\"extra\", все значения определены во всех современных версиях Python - если "
"значение не определено, это ошибка в реализации маркеров."

#: ../source/specifications/dependency-specifiers.rst:225
msgid ""
"Unknown variables must raise an error rather than resulting in a comparison "
"that evaluates to True or False."
msgstr ""
"Неизвестные переменные должны вызывать ошибку, а не приводить к сравнению, "
"которое оценивается как True или False."

#: ../source/specifications/dependency-specifiers.rst:228
msgid ""
"Variables whose value cannot be calculated on a given Python implementation "
"should evaluate to ``0`` for versions, and an empty string for all other "
"variables."
msgstr ""
"Переменные, значение которых не может быть вычислено в данной реализации "
"Python, должны оцениваться как ``0`` для версий, и как пустая строка для "
"всех остальных переменных."

#: ../source/specifications/dependency-specifiers.rst:232
msgid ""
"The \"extra\" variable is special. It is used by wheels to signal which "
"specifications apply to a given extra in the wheel ``METADATA`` file, but "
"since the ``METADATA`` file is based on a draft version of :pep:`426`, there "
"is no current specification for this. Regardless, outside of a context where "
"this special handling is taking place, the \"extra\" variable should result "
"in an error like all other unknown variables."
msgstr ""
"Переменная \"extra\" - особенная. Она используется колесами для сигнализации "
"о том, какие спецификации применяются к данной extra в файле ``METADATA`` "
"колеса, но поскольку файл ``METADATA`` основан на черновой версии :pep:"
"`426``, текущей спецификации для этого не существует. Независимо от этого, "
"вне контекста, где происходит такая специальная обработка, переменная "
"\"extra\" должна приводить к ошибке, как и все остальные неизвестные "
"переменные."

#: ../source/specifications/dependency-specifiers.rst:239
msgid ""
"The \"extras\" and \"dependency_groups\" variables are also special. They "
"are used to specify any requested extras or dependency groups when "
"installing from a lock file. Outside of the context of lock files, these two "
"variables should result in an error like all other unknown variables."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:247
msgid "Marker"
msgstr "Маркер"

#: ../source/specifications/dependency-specifiers.rst:248
msgid "Python equivalent"
msgstr "Эквивалент Python"

#: ../source/specifications/dependency-specifiers.rst:249
msgid "Type"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:250
msgid "Sample values"
msgstr "Образцовые значения"

#: ../source/specifications/dependency-specifiers.rst:251
msgid "``os_name``"
msgstr "``ос_название``"

#: ../source/specifications/dependency-specifiers.rst:252
msgid ":py:data:`os.name`"
msgstr ":py: данные:`ос. название`"

#: ../source/specifications/dependency-specifiers.rst:253
#: ../source/specifications/dependency-specifiers.rst:257
#: ../source/specifications/dependency-specifiers.rst:262
#: ../source/specifications/dependency-specifiers.rst:266
#: ../source/specifications/dependency-specifiers.rst:270
#: ../source/specifications/dependency-specifiers.rst:274
#: ../source/specifications/dependency-specifiers.rst:278
#: ../source/specifications/dependency-specifiers.rst:292
#: ../source/specifications/dependency-specifiers.rst:301
msgid "String"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:254
msgid "``posix``, ``java``"
msgstr "``posix``, ``java``"

#: ../source/specifications/dependency-specifiers.rst:255
msgid "``sys_platform``"
msgstr "``системная платформа``"

#: ../source/specifications/dependency-specifiers.rst:256
msgid ":py:data:`sys.platform`"
msgstr ":py: данные:`sys. платформа`"

#: ../source/specifications/dependency-specifiers.rst:258
msgid ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (note that \"linux\" is "
"from Python3 and \"linux2\" from Python2)"
msgstr ""
"``linux``, ``linux2``, ``darwin``, ``java1.8.0_51`` (обратите внимание, что "
"\"linux\" - из Python3, а \"linux2\" - из Python2)"

#: ../source/specifications/dependency-specifiers.rst:260
msgid "``platform_machine``"
msgstr "``платформа_машины``"

#: ../source/specifications/dependency-specifiers.rst:261
msgid ":py:func:`platform.machine()`"
msgstr ":py:func:`платформа.машина()`"

#: ../source/specifications/dependency-specifiers.rst:263
#: ../source/specifications/platform-compatibility-tags.rst:256
msgid "``x86_64``"
msgstr "``x86_64``"

#: ../source/specifications/dependency-specifiers.rst:264
msgid "``platform_python_implementation``"
msgstr "``платформа_python_имплементация``"

#: ../source/specifications/dependency-specifiers.rst:265
msgid ":py:func:`platform.python_implementation()`"
msgstr ":py:func:`платформа.python_имплементация()`"

#: ../source/specifications/dependency-specifiers.rst:267
msgid "``CPython``, ``Jython``"
msgstr "``CPython``, ``Jython``"

#: ../source/specifications/dependency-specifiers.rst:268
msgid "``platform_release``"
msgstr "``платформа_выпуска``"

#: ../source/specifications/dependency-specifiers.rst:269
msgid ":py:func:`platform.release()`"
msgstr ":py:func:`платформа. релиз()`"

#: ../source/specifications/dependency-specifiers.rst:271
msgid "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"
msgstr "``3.14.1-x86_64-linode39``, ``14.5.0``, ``1.8.0_51``"

#: ../source/specifications/dependency-specifiers.rst:272
msgid "``platform_system``"
msgstr "``платформа_системы``"

#: ../source/specifications/dependency-specifiers.rst:273
msgid ":py:func:`platform.system()`"
msgstr ":py:func:`платформа.система()`"

#: ../source/specifications/dependency-specifiers.rst:275
msgid "``Linux``, ``Windows``, ``Java``"
msgstr "``Linux``, ``Windows``, ``Java``"

#: ../source/specifications/dependency-specifiers.rst:276
msgid "``platform_version``"
msgstr "``платформа_версия``"

#: ../source/specifications/dependency-specifiers.rst:277
msgid ":py:func:`platform.version()`"
msgstr ":py:func:`платформа.версия()`"

#: ../source/specifications/dependency-specifiers.rst:279
msgid ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"
msgstr ""
"``#1 SMP Fri Apr 25 13:07:35 EDT 2014`` ``Java HotSpot(TM) 64-Bit Server VM, "
"25.51-b03, Oracle Corporation`` ``Darwin Kernel Version 14.5.0: Wed Jul 29 "
"02:18:53 PDT 2015; root:xnu-2782.40.9~2/RELEASE_X86_64``"

#: ../source/specifications/dependency-specifiers.rst:282
msgid "``python_version``"
msgstr "``python_версия``"

#: ../source/specifications/dependency-specifiers.rst:283
msgid "``'.'.join(platform.python_version_tuple()[:2])``"
msgstr "``'.'.join(platform.python_version_tuple()[:2])``"

#: ../source/specifications/dependency-specifiers.rst:284
#: ../source/specifications/dependency-specifiers.rst:288
#: ../source/specifications/dependency-specifiers.rst:296
#, fuzzy
#| msgid "Version specifiers"
msgid ":ref:`Version <version-specifiers>`"
msgstr "Спецификаторы версии"

#: ../source/specifications/dependency-specifiers.rst:285
msgid "``3.4``, ``2.7``"
msgstr "``3.4``, ``2.7``"

#: ../source/specifications/dependency-specifiers.rst:286
msgid "``python_full_version``"
msgstr "``python_полная_версия``"

#: ../source/specifications/dependency-specifiers.rst:287
msgid ":py:func:`platform.python_version()`"
msgstr ":py:func:`платформа. python_версия()`"

#: ../source/specifications/dependency-specifiers.rst:289
#: ../source/specifications/dependency-specifiers.rst:297
msgid "``3.4.0``, ``3.5.0b1``"
msgstr "``3.4.0``, ``3.5.0b1``"

#: ../source/specifications/dependency-specifiers.rst:290
msgid "``implementation_name``"
msgstr "``имя_реализации``"

#: ../source/specifications/dependency-specifiers.rst:291
msgid ":py:data:`sys.implementation.name <sys.implementation>`"
msgstr ":py: данные:`sys.имплементация. название <sys.имплементация>`"

#: ../source/specifications/dependency-specifiers.rst:293
msgid "``cpython``"
msgstr "``cpython``"

#: ../source/specifications/dependency-specifiers.rst:294
msgid "``implementation_version``"
msgstr "``Версия_реализации``"

#: ../source/specifications/dependency-specifiers.rst:295
msgid "see definition below"
msgstr "смотрите определение ниже"

#: ../source/specifications/dependency-specifiers.rst:298
msgid "``extra``"
msgstr "``экстра``"

#: ../source/specifications/dependency-specifiers.rst:299
#: ../source/specifications/dependency-specifiers.rst:304
#: ../source/specifications/dependency-specifiers.rst:309
msgid ""
"An error except when defined by the context interpreting the specification."
msgstr ""
"Ошибка, за исключением случаев, когда она определена контекстом, "
"интерпретирующим спецификацию."

#: ../source/specifications/dependency-specifiers.rst:302
#, fuzzy
#| msgid "``pyproject.toml``"
msgid "``toml``"
msgstr "``pyproject.toml``"

#: ../source/specifications/dependency-specifiers.rst:303
#: ../source/specifications/pylock-toml.rst:108
#, fuzzy
#| msgid "``extra``"
msgid "``extras``"
msgstr "``экстра``"

#: ../source/specifications/dependency-specifiers.rst:306
#: ../source/specifications/dependency-specifiers.rst:311
msgid "Set of strings"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:307
msgid "``{\"toml\"}``"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:308
#, fuzzy
#| msgid "``dependencies``"
msgid "``dependency_groups``"
msgstr "``зависимости``"

#: ../source/specifications/dependency-specifiers.rst:312
#, fuzzy
#| msgid "``test``"
msgid "``{\"test\"}``"
msgstr "``тест``"

#: ../source/specifications/dependency-specifiers.rst:314
msgid ""
"The ``implementation_version`` marker variable is derived from :py:data:`sys."
"implementation.version <sys.implementation>`:"
msgstr ""
"Маркерная переменная ``имплементация_версия`` получена из :py: данные:`sys."
"имплементация.версия <sys.имплементация>`:"

#: ../source/specifications/dependency-specifiers.rst:331
msgid ""
"This environment markers section, initially defined through :pep:`508`, "
"supersedes the environment markers section in :pep:`345`."
msgstr ""
"Этот раздел маркеров окружения, первоначально определенный через :pep:`508`, "
"заменяет раздел маркеров окружения в :pep:`345`."

#: ../source/specifications/dependency-specifiers.rst:337
msgid "Complete Grammar"
msgstr "Полная грамматика"

#: ../source/specifications/dependency-specifiers.rst:339
msgid "The complete parsley grammar::"
msgstr "Полная грамматика петрушки::"

#: ../source/specifications/dependency-specifiers.rst:446
msgid "A test program - if the grammar is in a string ``grammar``:"
msgstr "Тестовая программа - если грамматика находится в строке ``grammar``:"

#: ../source/specifications/dependency-specifiers.rst:518
msgid "November 2015: This specification was approved through :pep:`508`."
msgstr "Ноябрь 2015 г: Эта спецификация была одобрена через :pep:`508`."

#: ../source/specifications/dependency-specifiers.rst:519
msgid ""
"July 2019: The definition of ``python_version`` was `changed <python-version-"
"change_>`_ from ``platform.python_version()[:3]`` to ``'.'.join(platform."
"python_version_tuple()[:2])``, to accommodate potential future versions of "
"Python with 2-digit major and minor versions (e.g. 3.10). [#future_versions]_"
msgstr ""
"Июль 2019: Определение ``python_version`` было ``изменено <python-version-"
"change_>`` с ``platform.python_version()[:3]`` на ``'.'.join(platform."
"python_version_tuple()[:2])``, чтобы учесть потенциальные будущие версии "
"Python с двузначными мажорными и минорными версиями (например, 3.10). "
"[#future_versions]_"

#: ../source/specifications/dependency-specifiers.rst:524
msgid ""
"June 2024: The definition of ``version_many`` was changed to allow trailing "
"commas, matching with the behavior of the Python implementation that has "
"been in use since late 2022."
msgstr ""
"Июнь 2024 года: Определение ``версии_малого`` было изменено, чтобы разрешить "
"запятые в конце, что соответствует поведению реализации Python, которая "
"используется с конца 2022 года."

#: ../source/specifications/dependency-specifiers.rst:527
msgid ""
"April 2025: Added ``extras`` and ``dependency_groups`` for :ref:`lock-file-"
"spec` as approved through :pep:`751`."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:529
#: ../source/specifications/name-normalization.rst:56
msgid ""
"August 2025: The suggested name validation regex was fixed to match the "
"field specification (it previously finished with ``$`` instead of ``\\Z``, "
"incorrectly permitting trailing newlines)"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:537
msgid ""
"pip, the recommended installer for Python packages (http://pip.readthedocs."
"org/en/stable/)"
msgstr ""
"pip, рекомендуемая программа установки пакетов Python (http://pip."
"readthedocs.org/en/stable/)"

#: ../source/specifications/dependency-specifiers.rst:540
msgid "The parsley PEG library. (https://pypi.python.org/pypi/parsley/)"
msgstr "Библиотека PEG Петрушка. (https://pypi.python.org/pypi/parsley/)"

#: ../source/specifications/dependency-specifiers.rst:543
msgid ""
"Future Python versions might be problematic with the definition of "
"Environment Marker Variable ``python_version`` (https://github.com/python/"
"peps/issues/560)"
msgstr ""
"В будущих версиях Python могут возникнуть проблемы с определением маркерной "
"переменной среды ``python_version`` (https://github.com/python/peps/"
"issues/560)"

#: ../source/specifications/direct-url.rst:6
msgid "Recording the Direct URL Origin of installed distributions"
msgstr "Запись прямого URL-адреса происхождения установленных дистрибутивов"

#: ../source/specifications/direct-url.rst:8
msgid ""
"This document specifies a :file:`direct_url.json` file in the ``*.dist-"
"info`` directory of an installed distribution, to record the Direct URL "
"Origin of the distribution. The general structure and usage of ``*.dist-"
"info`` directories is described in :ref:`recording-installed-packages`."
msgstr ""
"Этот документ определяет файл :file:`direct_url.json` в директории ``*.dist-"
"info`` установленного дистрибутива для записи прямого URL Origin "
"дистрибутива. Общая структура и использование директорий ``*.dist-info`` "
"описаны в :ref:`recording-installed-packages``."

#: ../source/specifications/direct-url.rst:17
msgid ""
"The :file:`direct_url.json` file MUST be created in the :file:`*.dist-info` "
"directory by installers when installing a distribution from a requirement "
"specifying a direct URL reference (including a VCS URL)."
msgstr ""
"Файл :file:`direct_url.json` ДОЛЖЕН создаваться в каталоге :file:`*.dist-"
"info` установщиками при установке дистрибутива из требования, указывающего "
"прямую URL-ссылку (включая VCS URL)."

#: ../source/specifications/direct-url.rst:21
#: ../source/specifications/recording-installed-packages.rst:222
msgid ""
"This file MUST NOT be created when installing a distribution from an other "
"type of requirement (i.e. name plus version specifier)."
msgstr ""
"Этот файл НЕ ДОЛЖЕН создаваться при установке дистрибутива из требований "
"другого типа (т.е. имя плюс спецификатор версии)."

#: ../source/specifications/direct-url.rst:24
msgid ""
"This JSON file MUST be a UTF-8 encoded, :rfc:`8259` compliant, serialization "
"of the :doc:`direct-url-data-structure`."
msgstr ""
"Этот JSON-файл ДОЛЖЕН быть кодировкой UTF-8, :rfc:`8259` совместимой с "
"сериализацией :doc:`direct-url-data-structure`."

#: ../source/specifications/direct-url.rst:29
msgid ""
"When the requested URL has the file:// scheme and points to a local "
"directory that happens to contain a VCS checkout, installers MUST NOT "
"attempt to infer any VCS information and therefore MUST NOT output any VCS "
"related information (such as ``vcs_info``) in :file:`direct_url.json`."
msgstr ""
"Если запрашиваемый URL имеет схему file:// и указывает на локальный каталог, "
"который содержит VCS checkout, программы установки НЕ ДОЛЖНЫ пытаться "
"вывести какую-либо VCS информацию и, следовательно, НЕ ДОЛЖНЫ выводить какую-"
"либо связанную с VCS информацию (например, ``vcs_info``) в :file:`direct_url."
"json``."

#: ../source/specifications/direct-url.rst:36
msgid ""
"As a general rule, installers should as much as possible preserve the "
"information that was provided in the requested URL when generating :file:"
"`direct_url.json`. For example user:password environment variables should be "
"preserved and ``requested_revision`` should reflect the revision that was "
"provided in the requested URL as faithfully as possible. This information is "
"however *enriched* with more precise data, such as ``commit_id``."
msgstr ""
"Как правило, программы установки должны по возможности сохранять информацию, "
"которая была предоставлена в запрошенном URL при генерации :file:`direct_url."
"json`. Например, переменные окружения user:password должны быть сохранены, а "
"``запрашиваемая_ревизия`` должна как можно точнее отражать ревизию, "
"указанную в запрошенном URL. Однако эта информация может быть *обогащена* "
"более точными данными, такими как ``commit_id``."

#: ../source/specifications/direct-url.rst:45
msgid "Example pip commands and their effect on direct_url.json"
msgstr "Примеры команд pip и их влияние на direct_url.json"

#: ../source/specifications/direct-url.rst:47
msgid "Commands that generate a ``direct_url.json``:"
msgstr "Команды, генерирующие файл ``direct_url.json``:"

#: ../source/specifications/direct-url.rst:49
msgid "``pip install https://example.com/app-1.0.tgz``"
msgstr ""

#: ../source/specifications/direct-url.rst:50
msgid "``pip install https://example.com/app-1.0.whl``"
msgstr ""

#: ../source/specifications/direct-url.rst:51
msgid ""
"``pip install \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"``"
msgstr ""
"``pip install \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"``"

#: ../source/specifications/direct-url.rst:52
msgid "``pip install ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:53
msgid "``pip install file:///home/user/app``"
msgstr ""

#: ../source/specifications/direct-url.rst:54
msgid ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (in which case, ``url`` will be the local "
"directory where the git repository has been cloned to, and ``dir_info`` will "
"be present with ``\"editable\": true`` and no ``vcs_info`` will be set)"
msgstr ""
"``pip install --editable \"app @ git+https://example.com/repo/app."
"git#subdirectory=setup\"`` (в этом случае ``url`` будет локальным каталогом, "
"в который был клонирован git-репозиторий, а ``dir_info`` будет "
"присутствовать с ``\"editable\": true`` и не будет установлено ``vcs_info``)"

#: ../source/specifications/direct-url.rst:58
msgid "``pip install -e ./app``"
msgstr ""

#: ../source/specifications/direct-url.rst:60
msgid "Commands that *do not* generate a ``direct_url.json``"
msgstr "Команды, которые *не* генерируют ``direct_url.json``"

#: ../source/specifications/direct-url.rst:62
#, fuzzy
msgid "``pip install app``"
msgstr "Используйте ``pip`` для установки Pipenv:"

#: ../source/specifications/direct-url.rst:63
msgid "``pip install app --no-index --find-links https://example.com/``"
msgstr ""

#: ../source/specifications/direct-url.rst:69
msgid "March 2020: This specification was approved through :pep:`610`."
msgstr "Март 2020 года: Эта спецификация была одобрена через :pep:`610`."

#: ../source/specifications/direct-url-data-structure.rst:7
msgid "Direct URL Data Structure"
msgstr "Структура данных прямого URL"

#: ../source/specifications/direct-url-data-structure.rst:9
msgid ""
"This document specifies a JSON-serializable abstract data structure that can "
"represent URLs to python projects and distribution artifacts such as VCS "
"source trees, local source trees, source distributions and wheels."
msgstr ""
"Этот документ определяет JSON-сериализуемую абстрактную структуру данных, "
"которая может представлять URL-адреса проектов python и артефактов "
"распространения, таких как деревья исходных текстов VCS, локальные деревья "
"исходных текстов, дистрибутивы исходных текстов и колеса."

#: ../source/specifications/direct-url-data-structure.rst:13
msgid ""
"At time of writing, it is not formally specified how to merge the parts of "
"this data structure into a single URL that can be passed to tools. A common "
"representation is the pip URL format (`VCS Support <pip-vcs-support_>`_), "
"other examples are provided in the :ref:`Version specifier specification "
"<version-specifiers>`."
msgstr ""
"На момент написания статьи формально не определено, как объединить части "
"этой структуры данных в единый URL, который можно передавать инструментам. "
"Общим представлением является формат URL pip (`VCS Support <pip-vcs-"
"support_>`_), другие примеры приведены в : ссылка:`Спецификация "
"спецификатора версии <версия-спецификаторы>`."

#: ../source/specifications/direct-url-data-structure.rst:21
msgid ""
"The Direct URL Data Structure MUST be a dictionary, serializable to JSON "
"according to :rfc:`8259`."
msgstr ""
"Структура данных прямого URL ДОЛЖНА представлять собой словарь, "
"сериализуемый в JSON в соответствии с :rfc:`8259`."

#: ../source/specifications/direct-url-data-structure.rst:24
msgid ""
"It MUST contain at least two fields. The first one is ``url``, with type "
"``string``. Its content must be a valid URL according to the `WHATWG URL "
"Standard <whatwg-url-standard_>`_."
msgstr ""
"Он ДОЛЖЕН содержать как минимум два поля. Первое - ``url``, с типом "
"``string``. Его содержимое должно быть правильным URL в соответствии со "
"стандартом URL <whatwg-url-standard_>`_."

#: ../source/specifications/direct-url-data-structure.rst:28
msgid ""
"Depending on what ``url`` refers to, the second field MUST be one of "
"``vcs_info`` (if ``url`` is a VCS reference), ``archive_info`` (if ``url`` "
"is a source archive or a wheel), or ``dir_info`` (if ``url``  is a local "
"directory). These info fields have a (possibly empty) subdictionary as "
"value, with the possible keys defined below."
msgstr ""
"В зависимости от того, на что ссылается ``url``, второе поле ДОЛЖНО быть "
"одним из ``vcs_info`` (если ``url`` является ссылкой на VCS), "
"``archive_info`` (если ``url`` является архивом исходного кода или колесом), "
"или ``dir_info`` (если ``url`` является локальным каталогом). Эти "
"информационные поля имеют в качестве значения (возможно, пустой) подсловарь, "
"возможные ключи которого определены ниже."

#: ../source/specifications/direct-url-data-structure.rst:35
msgid "Security Considerations"
msgstr "Соображения безопасности"

#: ../source/specifications/direct-url-data-structure.rst:37
msgid ""
"When persisted, ``url`` MUST be stripped of any sensitive authentication "
"information, for security reasons."
msgstr ""
"При сохранении ``url`` должен быть очищен от любой конфиденциальной "
"информации об аутентификации в целях безопасности."

#: ../source/specifications/direct-url-data-structure.rst:40
msgid ""
"The user:password section of the URL MAY however be composed of environment "
"variables, matching the following regular expression:"
msgstr ""
"Однако секция user:password в URL МОЖЕТ состоять из переменных окружения, "
"соответствующих следующему регулярному выражению:"

#: ../source/specifications/direct-url-data-structure.rst:48
msgid ""
"Additionally, the user:password section of the URL MAY be a well-known, non "
"security sensitive string. A typical example is ``git`` in the case of a URL "
"such as ``ssh://git@gitlab.com/user/repo``."
msgstr ""
"Кроме того, секция user:password в URL может быть известной строкой, не "
"связанной с безопасностью. Типичным примером является ``git`` в случае "
"такого URL, как ``ssh://git@gitlab.com/user/repo``."

#: ../source/specifications/direct-url-data-structure.rst:55
msgid "VCS URLs"
msgstr "VCS URLs"

#: ../source/specifications/direct-url-data-structure.rst:57
msgid ""
"When ``url`` refers to a VCS repository, the ``vcs_info`` key MUST be "
"present as a dictionary with the following keys:"
msgstr ""
"Когда ``url`` ссылается на VCS-репозиторий, ключ ``vcs_info`` ДОЛЖЕН "
"присутствовать в виде словаря со следующими ключами:"

#: ../source/specifications/direct-url-data-structure.rst:60
msgid ""
"A ``vcs`` key (type ``string``) MUST be present, containing the name of the "
"VCS (i.e. one of ``git``, ``hg``, ``bzr``, ``svn``). Other VCS's SHOULD be "
"registered by writing a PEP to amend this specification. The ``url`` value "
"MUST be compatible with the corresponding VCS, so an installer can hand it "
"off without transformation to a checkout/download command of the VCS."
msgstr ""
"Ключ ``vcs`` (тип ``string``) ДОЛЖЕН присутствовать, содержащий имя VCS (т."
"е. одно из ``git``, ``hg``, ``bzr``, ``svn``). Другие VCS ДОЛЖНЫ быть "
"зарегистрированы путем написания PEP для изменения этой спецификации. "
"Значение ``url`` ДОЛЖНО быть совместимым с соответствующей VCS, чтобы "
"установщик мог передать его без преобразования команде проверки/загрузки VCS."

#: ../source/specifications/direct-url-data-structure.rst:66
msgid ""
"A ``requested_revision`` key (type ``string``) MAY be present naming a "
"branch/tag/ref/commit/revision/etc (in a format compatible with the VCS). "
"This field MUST match the revision requested by the user and MUST NOT exist "
"when the user did not select a specific revision."
msgstr ""
"Ключ ``запрошенная_ревизия`` (тип ``строка``) МОЖЕТ присутствовать, называя "
"ветку/тег/реф/коммит/ревизию/etc (в формате, совместимом с VCS). Это поле "
"ДОЛЖНО соответствовать ревизии, запрошенной пользователем, и НЕ ДОЛЖНО "
"существовать, если пользователь не выбрал конкретную ревизию."

#: ../source/specifications/direct-url-data-structure.rst:70
msgid ""
"A ``commit_id`` key (type ``string``) MUST be present, containing the exact "
"commit/revision number that was/is to be installed. If the VCS supports "
"commit-hash based revision identifiers, such commit-hash MUST be used as "
"``commit_id`` in order to reference an immutable version of the source code."
msgstr ""
"Ключ ``commit_id`` (тип ``string``) ДОЛЖЕН присутствовать, содержащий точный "
"номер коммита/ревизии, которая была/есть установлена. Если VCS поддерживает "
"идентификаторы ревизий на основе commit-hash, то такой commit-hash ДОЛЖЕН "
"использоваться в качестве ``commit_id``, чтобы ссылаться на неизменяемую "
"версию исходного кода."

#: ../source/specifications/direct-url-data-structure.rst:80
msgid "Archive URLs"
msgstr "Архивные URL"

#: ../source/specifications/direct-url-data-structure.rst:82
msgid ""
"When ``url`` refers to a source archive or a wheel, the ``archive_info`` key "
"MUST be present as a dictionary with the following keys:"
msgstr ""
"Когда ``url`` ссылается на исходный архив или колесо, ключ ``archive_info`` "
"ДОЛЖЕН присутствовать в виде словаря со следующими ключами:"

#: ../source/specifications/direct-url-data-structure.rst:85
msgid ""
"A ``hashes`` key SHOULD be present as a dictionary mapping a hash name to a "
"hex encoded digest of the file."
msgstr ""
"Ключ ``hashes`` ДОЛЖЕН присутствовать в виде словаря, сопоставляющего имя "
"хэша с шестнадцатеричным дайджестом файла."

#: ../source/specifications/direct-url-data-structure.rst:88
msgid ""
"Multiple hashes can be included, and it is up to the consumer to decide what "
"to do with multiple hashes (it may validate all of them or a subset of them, "
"or nothing at all)."
msgstr ""
"Можно включить несколько хэшей, и потребитель сам решает, что делать с "
"несколькими хэшами (он может подтвердить все из них или их подмножество, или "
"вообще ничего)."

#: ../source/specifications/direct-url-data-structure.rst:92
msgid "These hash names SHOULD always be normalized to be lowercase."
msgstr "Эти имена хэшей ДОЛЖНЫ быть всегда приведены к нижнему регистру."

#: ../source/specifications/direct-url-data-structure.rst:94
msgid ""
"Any hash algorithm available via :py:mod:`hashlib` (specifically any that "
"can be passed to :py:func:`hashlib.new()` and do not require additional "
"parameters) can be used as a key for the hashes dictionary. At least one "
"secure algorithm from :py:data:`hashlib.algorithms_guaranteed` SHOULD always "
"be included. At time of writing, ``sha256`` specifically is recommended."
msgstr ""
"В качестве ключа для словаря хэшей можно использовать любой алгоритм, "
"доступный через :py:mod:`hashlib` (в частности, те, которые можно передать "
"в :py:func:`hashlib.new()` и которые не требуют дополнительных параметров). "
"По крайней мере, один безопасный алгоритм из :py:data:`hashlib. "
"алгоритмы_гарантированы` ДОЛЖЕН быть всегда включен. На момент написания "
"статьи рекомендуется ``sha256`."

#: ../source/specifications/direct-url-data-structure.rst:100
msgid ""
"A deprecated ``hash`` key (type ``string``) MAY be present for backwards "
"compatibility purposes, with value ``<hash-algorithm>=<expected-hash>``."
msgstr ""
"Устаревший ключ ``hash`` (тип ``string``) МОЖЕТ присутствовать в целях "
"обратной совместимости, со значением ``<hash-algorithm>=<expected-hash>``."

#: ../source/specifications/direct-url-data-structure.rst:103
msgid ""
"Producers of the data structure SHOULD emit the ``hashes`` key whether one "
"or multiple hashes are available. Producers SHOULD continue to emit the "
"``hash`` key in contexts where they did so before, so as to keep backwards "
"compatibility for existing clients."
msgstr ""
"Производители структуры данных ДОЛЖНЫ выдавать ключ ``hashes`` независимо от "
"того, один или несколько хэшей доступны. Производители ДОЛЖНЫ продолжать "
"выдавать ключ ``hash`` в тех контекстах, где они делали это раньше, чтобы "
"сохранить обратную совместимость для существующих клиентов."

#: ../source/specifications/direct-url-data-structure.rst:107
msgid ""
"When both the ``hash`` and ``hashes`` keys are present, the hash represented "
"in the ``hash`` key MUST also be present in the ``hashes`` dictionary, so "
"consumers can consider the ``hashes`` key only if it is present, and fall "
"back to ``hash`` otherwise."
msgstr ""
"Если присутствуют ключи ``hash`` и ``hashes``, хэш, представленный в ключе "
"``hash``, ДОЛЖЕН присутствовать и в словаре ``hashes``, поэтому пользователи "
"могут рассматривать ключ ``hashes``, только если он присутствует, и "
"возвращаться к ``hash`` в противном случае."

#: ../source/specifications/direct-url-data-structure.rst:114
msgid "Local directories"
msgstr "Локальные каталоги"

#: ../source/specifications/direct-url-data-structure.rst:116
msgid ""
"When ``url`` refers to a local directory, the ``dir_info`` key MUST be "
"present as a dictionary with the following key:"
msgstr ""
"Когда ``url`` ссылается на локальный каталог, ключ ``dir_info`` ДОЛЖЕН "
"присутствовать в виде словаря со следующим ключом:"

#: ../source/specifications/direct-url-data-structure.rst:119
msgid ""
"``editable`` (type: ``boolean``): ``true`` if the distribution was/is to be "
"installed in editable mode, ``false`` otherwise. If absent, default to "
"``false``."
msgstr ""
"``editable`` (тип: ``boolean``): ``true``, если дистрибутив был/будет "
"установлен в редактируемом режиме, ``false`` в противном случае. Если "
"отсутствует, то по умолчанию ``false``."

#: ../source/specifications/direct-url-data-structure.rst:122
msgid ""
"When ``url`` refers to a local directory, it MUST have the ``file`` scheme "
"and be compliant with :rfc:`8089`. In particular, the path component must be "
"absolute. Symbolic links SHOULD be preserved when making relative paths "
"absolute."
msgstr ""
"Когда ``url`` ссылается на локальный каталог, он ДОЛЖЕН иметь схему ``file`` "
"и соответствовать :rfc:`8089`. В частности, компонент пути должен быть "
"абсолютным. Символьные ссылки ДОЛЖНЫ сохраняться при преобразовании "
"относительных путей в абсолютные."

#: ../source/specifications/direct-url-data-structure.rst:130
msgid "Projects in subdirectories"
msgstr "Проекты в подкаталогах"

#: ../source/specifications/direct-url-data-structure.rst:132
msgid ""
"A top-level ``subdirectory`` field MAY be present containing a directory "
"path, relative to the root of the VCS repository, source archive or local "
"directory, to specify where ``pyproject.toml`` or ``setup.py`` is located."
msgstr ""
"Поле верхнего уровня ``поддиректория`` МОЖЕТ содержать путь к каталогу, "
"относительно корня VCS-репозитория, исходного архива или локального "
"каталога, чтобы указать, где находится ``pyproject.toml`` или ``setup.py``."

#: ../source/specifications/direct-url-data-structure.rst:139
msgid "Registered VCS"
msgstr "Зарегистрированный VCS"

#: ../source/specifications/direct-url-data-structure.rst:141
msgid ""
"This section lists the registered VCS's; expanded, VCS-specific information "
"on how to use the ``vcs``, ``requested_revision``, and other fields of "
"``vcs_info``; and in some cases additional VCS-specific fields. Tools MAY "
"support other VCS's although it is RECOMMENDED to register them by writing a "
"PEP to amend this specification. The ``vcs`` field SHOULD be the command "
"name (lowercased). Additional fields that would be necessary to support such "
"VCS SHOULD be prefixed with the VCS command name."
msgstr ""
"В этом разделе перечислены зарегистрированные VCS; расширенная, специфичная "
"для VCS информация о том, как использовать поля ``vcs``, "
"``requested_revision`` и другие поля ``vcs_info``; и в некоторых случаях "
"дополнительные специфичные для VCS поля. Инструменты МОГУТ поддерживать "
"другие VCS, хотя РЕКОМЕНДУЕТСЯ регистрировать их путем написания PEP для "
"изменения этой спецификации. Поле ``vcs`` ДОЛЖНО представлять собой имя "
"команды (в нижнем регистре). Дополнительные поля, необходимые для поддержки "
"такой VCS, ДОЛЖНЫ иметь префикс с именем команды VCS."

#: ../source/specifications/direct-url-data-structure.rst:151
msgid "Git"
msgstr "Git"

#: ../source/specifications/direct-url-data-structure.rst:154
#: ../source/specifications/direct-url-data-structure.rst:181
#: ../source/specifications/direct-url-data-structure.rst:199
#: ../source/specifications/direct-url-data-structure.rst:217
msgid "Home page"
msgstr "Домашняя страница"

#: ../source/specifications/direct-url-data-structure.rst:154
msgid "https://git-scm.com/"
msgstr "https://git-scm.com/"

#: ../source/specifications/direct-url-data-structure.rst:157
#: ../source/specifications/direct-url-data-structure.rst:184
#: ../source/specifications/direct-url-data-structure.rst:202
#: ../source/specifications/direct-url-data-structure.rst:220
msgid "vcs command"
msgstr "команда vcs"

#: ../source/specifications/direct-url-data-structure.rst:157
#: ../source/specifications/direct-url-data-structure.rst:160
msgid "git"
msgstr "git"

#: ../source/specifications/direct-url-data-structure.rst:160
#: ../source/specifications/direct-url-data-structure.rst:187
#: ../source/specifications/direct-url-data-structure.rst:205
#: ../source/specifications/direct-url-data-structure.rst:223
msgid "``vcs`` field"
msgstr "поле ``vcs``"

#: ../source/specifications/direct-url-data-structure.rst:164
#: ../source/specifications/direct-url-data-structure.rst:190
#: ../source/specifications/direct-url-data-structure.rst:208
#: ../source/specifications/direct-url-data-structure.rst:227
msgid "``requested_revision`` field"
msgstr "поле ``запрошенный_пересмотр``"

#: ../source/specifications/direct-url-data-structure.rst:163
msgid ""
"A tag name, branch name, Git ref, commit hash, shortened commit hash, or "
"other commit-ish."
msgstr ""
"Имя тега, имя ветки, Git ref, хэш коммита, сокращённый хэш коммита или "
"другое имя коммита."

#: ../source/specifications/direct-url-data-structure.rst:167
#: ../source/specifications/direct-url-data-structure.rst:193
#: ../source/specifications/direct-url-data-structure.rst:211
#: ../source/specifications/direct-url-data-structure.rst:232
msgid "``commit_id`` field"
msgstr "поле ``commit_id``"

#: ../source/specifications/direct-url-data-structure.rst:167
msgid "A commit hash (40 hexadecimal characters sha1)."
msgstr "Хэш фиксации (40 шестнадцатеричных символов sha1)."

#: ../source/specifications/direct-url-data-structure.rst:171
msgid ""
"Tools can use the ``git show-ref`` and ``git symbolic-ref`` commands to "
"determine if the ``requested_revision`` corresponds to a Git ref. In turn, a "
"ref beginning with ``refs/tags/`` corresponds to a tag, and a ref beginning "
"with ``refs/remotes/origin/`` after cloning corresponds to a branch."
msgstr ""
"Инструменты могут использовать команды ``git show-ref`` и ``git symbolic-"
"ref``, чтобы определить, соответствует ли ``запрашиваемая_ревизия`` Git-"
"рефлекту. В свою очередь, ссылка, начинающаяся с ``refs/tags/``, "
"соответствует тегу, а ссылка, начинающаяся с ``refs/remotes/origin/`` после "
"клонирования, соответствует ветке."

#: ../source/specifications/direct-url-data-structure.rst:178
msgid "Mercurial"
msgstr "Mercurial"

#: ../source/specifications/direct-url-data-structure.rst:181
msgid "https://www.mercurial-scm.org/"
msgstr "https://www.mercurial-scm.org/"

#: ../source/specifications/direct-url-data-structure.rst:184
#: ../source/specifications/direct-url-data-structure.rst:187
msgid "hg"
msgstr "hg"

#: ../source/specifications/direct-url-data-structure.rst:190
msgid "A tag name, branch name, changeset ID, shortened changeset ID."
msgstr ""
"Имя тега, имя ветки, идентификатор набора изменений, сокращенный "
"идентификатор набора изменений."

#: ../source/specifications/direct-url-data-structure.rst:193
msgid "A changeset ID (40 hexadecimal characters)."
msgstr "Идентификатор набора изменений (40 шестнадцатеричных символов)."

#: ../source/specifications/direct-url-data-structure.rst:196
msgid "Bazaar"
msgstr "Bazaar"

#: ../source/specifications/direct-url-data-structure.rst:199
msgid "https://www.breezy-vcs.org/"
msgstr "https://www.breezy-vcs.org/"

#: ../source/specifications/direct-url-data-structure.rst:202
#: ../source/specifications/direct-url-data-structure.rst:205
msgid "bzr"
msgstr "bzr"

#: ../source/specifications/direct-url-data-structure.rst:208
msgid "A tag name, branch name, revision id."
msgstr "Имя тега, имя ветки, идентификатор ревизии."

#: ../source/specifications/direct-url-data-structure.rst:211
msgid "A revision id."
msgstr "Идентификатор ревизии."

#: ../source/specifications/direct-url-data-structure.rst:214
msgid "Subversion"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:217
msgid "https://subversion.apache.org/"
msgstr ""

#: ../source/specifications/direct-url-data-structure.rst:220
#: ../source/specifications/direct-url-data-structure.rst:223
msgid "svn"
msgstr "svn"

#: ../source/specifications/direct-url-data-structure.rst:226
msgid ""
"``requested_revision`` must be compatible with ``svn checkout`` ``--"
"revision`` option. In Subversion, branch or tag is part of ``url``."
msgstr ""
"``requested_revision`` должен быть совместим с опцией ``vn checkout`` ``--"
"revision``. В Subversion ветка или тег являются частью ``url``."

#: ../source/specifications/direct-url-data-structure.rst:230
msgid ""
"Since Subversion does not support globally unique identifiers, this field is "
"the Subversion revision number in the corresponding repository."
msgstr ""
"Поскольку Subversion не поддерживает глобально уникальные идентификаторы, "
"это поле представляет собой номер ревизии Subversion в соответствующем "
"хранилище."

#: ../source/specifications/direct-url-data-structure.rst:235
msgid "JSON Schema"
msgstr "Схема JSON"

#: ../source/specifications/direct-url-data-structure.rst:237
msgid ""
"The following JSON Schema can be used to validate the contents of "
"``direct_url.json``:"
msgstr ""
"Следующая JSON-схема может быть использована для проверки содержимого файла "
"``direct_url.json``:"

#: ../source/specifications/direct-url-data-structure.rst:244
msgid "Source archive:"
msgstr "Архив источников:"

#: ../source/specifications/direct-url-data-structure.rst:257
msgid "Git URL with tag and commit-hash:"
msgstr "URL-адрес Git с тегом и хэшем фиксации:"

#: ../source/specifications/direct-url-data-structure.rst:270
msgid "Local directory:"
msgstr "Локальный справочник:"

#: ../source/specifications/direct-url-data-structure.rst:279
msgid "Local directory in editable mode:"
msgstr "Локальная директория в режиме редактирования:"

#: ../source/specifications/direct-url-data-structure.rst:294
msgid ""
"March 2020: This specification was approved through :pep:`610`, defining the "
"``direct_url.json`` metadata file."
msgstr ""
"Март 2020 года: Эта спецификация была одобрена через :pep:`610`, определяя "
"файл метаданных ``direct_url.json``."

#: ../source/specifications/direct-url-data-structure.rst:296
msgid ""
"January 2023: Added the ``archive_info.hashes`` key (`discussion <archive-"
"info-hashes_>`_)."
msgstr ""
"Январь 2023 года: Добавлен ключ ``archive_info.hashes`` (``discussion "
"<archive-info-hashes_>`_)."

#: ../source/specifications/entry-points.rst:5
msgid "Entry points specification"
msgstr "Спецификация точек входа"

#: ../source/specifications/entry-points.rst:7
msgid ""
"*Entry points* are a mechanism for an installed distribution to advertise "
"components it provides to be discovered and used by other code. For example:"
msgstr ""
"*Точки входа* - это механизм, с помощью которого установленный дистрибутив "
"рекламирует предоставляемые им компоненты, чтобы их могли обнаружить и "
"использовать другие программы. Например:"

#: ../source/specifications/entry-points.rst:11
msgid ""
"Distributions can specify ``console_scripts`` entry points, each referring "
"to a function. When *pip* (or another console_scripts aware installer) "
"installs the distribution, it will create a command-line wrapper for each "
"entry point."
msgstr ""
"Дистрибутивы могут указывать точки входа ``console_scripts``, каждая из "
"которых ссылается на функцию. Когда *pip* (или другая программа установки с "
"поддержкой console_scripts) устанавливает дистрибутив, она создаст обертку "
"командной строки для каждой точки входа."

#: ../source/specifications/entry-points.rst:14
msgid ""
"Applications can use entry points to load plugins; e.g. Pygments (a syntax "
"highlighting tool) can use additional lexers and styles from separately "
"installed packages. For more about this, see :doc:`/guides/creating-and-"
"discovering-plugins`."
msgstr ""
"Приложения могут использовать точки входа для загрузки плагинов; например, "
"Pygments (инструмент подсветки синтаксиса) может использовать дополнительные "
"лексеры и стили из отдельно установленных пакетов. Подробнее об этом см. в :"
"doc:`/guides/creating-and-discovering-plugins`."

#: ../source/specifications/entry-points.rst:19
msgid ""
"The entry point file format was originally developed to allow packages built "
"with setuptools to provide integration point metadata that would be read at "
"runtime with :py:mod:`importlib.metadata`. It is now defined as a PyPA "
"interoperability specification in order to allow build tools other than "
"``setuptools`` to publish :py:mod:`importlib.metadata` compatible entry "
"point metadata, and runtime libraries other than :py:mod:`importlib."
"metadata` to portably read published entry point metadata (potentially with "
"different caching and conflict resolution strategies)."
msgstr ""
"Формат файла точки входа был первоначально разработан для того, чтобы "
"пакеты, собранные с помощью setuptools, могли предоставлять метаданные точки "
"интеграции, которые можно было бы прочитать во время выполнения с помощью :"
"py:mod:`importlib. метаданные`. Теперь он определен как спецификация "
"совместимости PyPA, чтобы позволить инструментам сборки, отличным от "
"``setuptools``, публиковать совместимые с :py:mod:`importlib.метаданные` "
"метаданные точки входа, а библиотекам времени выполнения, отличным от :py:"
"mod:`importlib. метаданные``, переносимо читать опубликованные метаданные "
"точки входа (потенциально с различными стратегиями кэширования и разрешения "
"конфликтов)."

#: ../source/specifications/entry-points.rst:28
msgid "Data model"
msgstr "Модель данных"

#: ../source/specifications/entry-points.rst:30
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr "Концептуально точка входа определяется тремя необходимыми свойствами:"

#: ../source/specifications/entry-points.rst:32
msgid ""
"The **group** that an entry point belongs to indicates what sort of object "
"it provides. For instance, the group ``console_scripts`` is for entry points "
"referring to functions which can be used as a command, while ``pygments."
"styles`` is the group for classes defining pygments styles. The consumer "
"typically defines the expected interface. To avoid clashes, consumers "
"defining a new group should use names starting with a PyPI name owned by the "
"consumer project, followed by ``.``. Group names must be one or more groups "
"of letters, numbers and underscores, separated by dots (regex ``^\\w+(\\."
"\\w+)*$``)."
msgstr ""
"Группа **группа**, к которой принадлежит точка входа, указывает, какого рода "
"объект она предоставляет. Например, группа ``console_scripts`` предназначена "
"для точек входа, ссылающихся на функции, которые могут быть использованы в "
"качестве команды, а ``pygments.styles`` - это группа для классов, "
"определяющих стили pygments. Потребитель обычно определяет ожидаемый "
"интерфейс. Чтобы избежать столкновений, потребители, определяющие новую "
"группу, должны использовать имена, начинающиеся с имени PyPI, принадлежащего "
"проекту-потребителю, за которым следует ``.``. Имена групп должны "
"представлять собой одну или несколько групп букв, цифр и символов "
"подчеркивания, разделенных точками (regex ``^\\w+(\\.\\w+)*$``)."

#: ../source/specifications/entry-points.rst:42
msgid ""
"The **name** identifies this entry point within its group. The precise "
"meaning of this is up to the consumer. For console scripts, the name of the "
"entry point is the command that will be used to launch it. Within a "
"distribution, entry point names should be unique. If different distributions "
"provide the same name, the consumer decides how to handle such conflicts. "
"The name may contain any characters except ``=``, but it cannot start or end "
"with any whitespace character, or start with ``[``. For new entry points, it "
"is recommended to use only letters, numbers, underscores, dots and dashes "
"(regex ``[\\w.-]+``)."
msgstr ""
"Имя **name** идентифицирует эту точку входа в своей группе. Точное значение "
"этого параметра зависит от пользователя. Для консольных скриптов имя точки "
"входа - это команда, которая будет использована для ее запуска. В пределах "
"дистрибутива имена точек входа должны быть уникальными. Если разные "
"дистрибутивы предоставляют одно и то же имя, потребитель решает, как "
"справиться с такими конфликтами. Имя может содержать любые символы, кроме "
"``=``, но оно не может начинаться или заканчиваться любым символом пробела, "
"а также начинаться с ``[``. Для новых точек входа рекомендуется использовать "
"только буквы, цифры, символы подчеркивания, точки и тире (regex "
"``[\\w.-]+``)."

#: ../source/specifications/entry-points.rst:51
msgid ""
"The **object reference** points to a Python object. It is either in the form "
"``importable.module``, or ``importable.module:object.attr``. Each of the "
"parts delimited by dots and the colon is a valid Python identifier. It is "
"intended to be looked up like this::"
msgstr ""
"Ссылка **объект** указывает на объект Python. Она имеет вид ``importable."
"module`` или ``importable.module:object.attr``. Каждая из частей, "
"разделенных точками и двоеточием, является допустимым идентификатором "
"Python. Он предназначен для поиска следующим образом::"

#: ../source/specifications/entry-points.rst:64
msgid ""
"Some tools call this kind of object reference by itself an 'entry point', "
"for want of a better term, especially where it points to a function to "
"launch a program."
msgstr ""
"В некоторых инструментах такая ссылка на объект сама по себе называется "
"\"точкой входа\", за неимением лучшего термина, особенно если она указывает "
"на функцию для запуска программы."

#: ../source/specifications/entry-points.rst:68
msgid ""
"There is also an optional property: the **extras** are a set of strings "
"identifying optional features of the distribution providing the entry point. "
"If these are specified, the entry point requires the dependencies of those "
"'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""
"Есть также необязательное свойство: **extras** - это набор строк, "
"определяющих необязательные возможности дистрибутива, предоставляющего точку "
"входа. Если они указаны, то точка входа требует зависимостей от этих "
"\"дополнений\". См. поле метаданных :ref:`metadata_provides_extra`."

#: ../source/specifications/entry-points.rst:73
msgid ""
"Using extras for an entry point is no longer recommended. Consumers should "
"support parsing them from existing distributions, but may then ignore them. "
"New publishing tools need not support specifying extras. The functionality "
"of handling extras was tied to setuptools' model of managing 'egg' packages, "
"but newer tools such as pip and virtualenv use a different model."
msgstr ""
"Использовать extras в качестве точки входа больше не рекомендуется. "
"Потребители должны поддерживать их разбор из существующих дистрибутивов, но "
"затем могут их игнорировать. Новые инструменты публикации не должны "
"поддерживать указание дополнений. Функциональность работы с дополнениями "
"была привязана к модели setuptools по управлению \"яичными\" пакетами, но "
"новые инструменты, такие как pip и virtualenv, используют другую модель."

#: ../source/specifications/entry-points.rst:80
msgid "File format"
msgstr "Формат файла"

#: ../source/specifications/entry-points.rst:82
msgid ""
"Entry points are defined in a file called :file:`entry_points.txt` in the :"
"file:`*.dist-info` directory of the distribution. This is the directory "
"described in :ref:`recording-installed-packages` for installed "
"distributions, and in :ref:`binary-distribution-format` for wheels. The file "
"uses the UTF-8 character encoding."
msgstr ""
"Точки входа определяются в файле :file:`entry_points.txt` в каталоге :file:"
"`*.dist-info` дистрибутива. Это каталог, описанный в :ref:`recording-"
"installed-packages` для установленных дистрибутивов, и в :ref:`binary-"
"distribution-format` для колес. В файле используется кодировка UTF-8."

#: ../source/specifications/entry-points.rst:88
msgid ""
"The file contents are in INI format, as read by Python's :mod:`configparser` "
"module. However, configparser treats names as case-insensitive by default, "
"whereas entry point names are case sensitive. A case-sensitive config parser "
"can be made like this::"
msgstr ""
"Содержимое файла имеет формат INI, читаемый модулем Python :mod:"
"`configparser`. Однако по умолчанию configparser рассматривает имена как "
"нечувствительные к регистру, в то время как имена точек входа чувствительны "
"к регистру. Конфигурационный парсер с учетом регистра может быть сделан "
"следующим образом::"

#: ../source/specifications/entry-points.rst:98
msgid ""
"The entry points file must always use ``=`` to delimit names from values "
"(whereas configparser also allows using ``:``)."
msgstr ""
"В файле точек входа всегда должно использоваться ``=`` для разделения имен и "
"значений (в то время как configparser также позволяет использовать ``:``)."

#: ../source/specifications/entry-points.rst:101
msgid ""
"The sections of the config file represent entry point groups, the names are "
"names, and the values encode both the object reference and the optional "
"extras. If extras are used, they are a comma-separated list inside square "
"brackets."
msgstr ""
"Секции конфигурационного файла представляют собой группы точек входа, имена "
"- это имена, а значения кодируют как ссылку на объект, так и необязательные "
"дополнения. Если используются дополнительные параметры, они представляют "
"собой список, разделенный запятыми, заключенный в квадратные скобки."

#: ../source/specifications/entry-points.rst:105
msgid ""
"Within a value, readers must accept and ignore spaces (including multiple "
"consecutive spaces) before or after the colon, between the object reference "
"and the left square bracket, between the extra names and the square brackets "
"and colons delimiting them, and after the right square bracket. The syntax "
"for extras is formally specified as part of :pep:`508` (as ``extras``) and "
"restrictions on values specified in :pep:`685`. For tools writing the file, "
"it is recommended only to insert a space between the object reference and "
"the left square bracket."
msgstr ""
"Внутри значения читатели должны принимать и игнорировать пробелы (включая "
"несколько последовательных пробелов) до или после двоеточия, между ссылкой "
"на объект и левой квадратной скобкой, между дополнительными именами и "
"разграничивающими их квадратными скобками и двоеточиями, а также после "
"правой квадратной скобки. Синтаксис для extras формально указан в :pep:`508` "
"(как ``extras``), а ограничения на значения указаны в :pep:`685`. Для "
"инструментов, записывающих файл, рекомендуется вставлять пробел только между "
"ссылкой на объект и левой квадратной скобкой."

#: ../source/specifications/entry-points.rst:128
msgid "Use for scripts"
msgstr "Используйте для скриптов"

#: ../source/specifications/entry-points.rst:130
msgid ""
"Two groups of entry points have special significance in packaging: "
"``console_scripts`` and ``gui_scripts``. In both groups, the name of the "
"entry point should be usable as a command in a system shell after the "
"package is installed. The object reference points to a function which will "
"be called with no arguments when this command is run. The function may "
"return an integer to be used as a process exit code, and returning ``None`` "
"is equivalent to returning ``0``."
msgstr ""
"Две группы точек входа имеют особое значение при упаковке: "
"``console_scripts`` и ``gui_scripts``. В обеих группах имя точки входа "
"должно быть пригодно для использования в качестве команды в системной "
"оболочке после установки пакета. Ссылка на объект указывает на функцию, "
"которая будет вызвана без аргументов при выполнении этой команды. Функция "
"может возвращать целое число, которое будет использоваться в качестве кода "
"завершения процесса, а возврат ``None`` эквивалентен возврату ``0``."

#: ../source/specifications/entry-points.rst:138
msgid ""
"For instance, the entry point ``mycmd = mymod:main`` would create a command "
"``mycmd`` launching a script like this::"
msgstr ""
"Например, точка входа ``mycmd = mymod:main`` создаст команду ``mycmd``, "
"запускающую скрипт следующего вида::"

#: ../source/specifications/entry-points.rst:145
msgid ""
"The difference between ``console_scripts`` and ``gui_scripts`` only affects "
"Windows systems. ``console_scripts`` are wrapped in a console executable, so "
"they are attached to a console and can use :py:data:`sys.stdin`, :py:data:"
"`sys.stdout` and :py:data:`sys.stderr` for input and output. ``gui_scripts`` "
"are wrapped in a GUI executable, so they can be started without a console, "
"but cannot use standard streams unless application code redirects them. "
"Other platforms do not have the same distinction."
msgstr ""
"Разница между ``консольные скрипты`` и ``gui_скрипты`` влияет только на "
"системы Windows. ``консольные_скрипты`` обернуты в консольный исполняемый "
"файл, поэтому они подключаются к консоли и могут использовать :py: данные:"
"`sys.stdin`, :py: данные:`sys.stdout` и :py: данные:`sys.stderr` для ввода и "
"вывода. ``gui_скрипты`` оборачиваются в исполняемый файл GUI, поэтому их "
"можно запускать без консоли, но они не могут использовать стандартные "
"потоки, если код приложения не перенаправит их. На других платформах такого "
"различия нет."

#: ../source/specifications/entry-points.rst:153
msgid ""
"Install tools are expected to set up wrappers for both ``console_scripts`` "
"and ``gui_scripts`` in the scripts directory of the install scheme. They are "
"not responsible for putting this directory in the ``PATH`` environment "
"variable which defines where command-line tools are found."
msgstr ""
"Утилиты установки должны устанавливать обертки для ``console_scripts`` и "
"``gui_scripts`` в каталог scripts схемы установки. Они не отвечают за "
"размещение этого каталога в переменной окружения ``PATH'', которая "
"определяет, где находятся инструменты командной строки."

#: ../source/specifications/entry-points.rst:158
msgid ""
"As files are created from the names, and some filesystems are case-"
"insensitive, packages should avoid using names in these groups which differ "
"only in case. The behaviour of install tools when names differ only in case "
"is undefined."
msgstr ""
"Поскольку файлы создаются на основе имен, а некоторые файловые системы не "
"чувствительны к регистру, пакеты должны избегать использования имен в этих "
"группах, отличающихся только регистром. Поведение инструментов установки, "
"когда имена отличаются только регистром, не определено."

#: ../source/specifications/entry-points.rst:166
msgid ""
"October 2017: This specification was written to formalize the existing entry "
"points feature of setuptools (discussion_)."
msgstr ""
"Октябрь 2017 г: Эта спецификация была написана для формализации существующей "
"функции точек входа в setuptools (discussion_)."

#: ../source/specifications/externally-managed-environments.rst:6
msgid "Externally Managed Environments"
msgstr "Внешне управляемые среды"

#: ../source/specifications/externally-managed-environments.rst:8
msgid ""
"While some Python installations are entirely managed by the user that "
"installed Python, others may be provided and managed by another means (such "
"as the operating system package manager in a Linux distribution, or as a "
"bundled Python environment in an application with a dedicated installer)."
msgstr ""
"В то время как некоторые установки Python полностью управляются "
"пользователем, установившим Python, другие могут предоставляться и "
"управляться другими средствами (например, менеджером пакетов операционной "
"системы в дистрибутиве Linux или окружением Python в приложении со "
"специальной программой установки)."

#: ../source/specifications/externally-managed-environments.rst:13
msgid ""
"Attempting to use conventional Python packaging tools to manipulate such "
"environments can be confusing at best and outright break the entire "
"underlying operating system at worst. Documentation and interoperability "
"guides only go so far in resolving such problems."
msgstr ""
"Попытка использовать обычные средства упаковки Python для работы с такими "
"средами может в лучшем случае привести к путанице, а в худшем - к поломке "
"всей базовой операционной системы. Документация и руководства по "
"совместимости помогают решить такие проблемы."

#: ../source/specifications/externally-managed-environments.rst:18
msgid ""
"This specification defines an ``EXTERNALLY-MANAGED`` marker file that allows "
"a Python installation to indicate to Python-specific tools such as ``pip`` "
"that they neither install nor remove packages into the interpreter’s default "
"installation environment, and should instead guide the end user towards "
"using :ref:`virtual-environments`."
msgstr ""
"Эта спецификация определяет файл-маркер ``EXTERNALLY-MANAGED``, который "
"позволяет установке Python указать таким специфичным для Python "
"инструментам, как ``pip``, что они не устанавливают и не удаляют пакеты в "
"среду установки интерпретатора по умолчанию, а вместо этого должны направить "
"конечного пользователя на использование :ref:`virtual-environments`."

#: ../source/specifications/externally-managed-environments.rst:24
msgid ""
"It also standardizes an interpretation of the ``sysconfig`` schemes so that, "
"if a Python-specific package manager is about to install a package in an "
"interpreter-wide context, it can do so in a manner that will avoid "
"conflicting with the external package manager and reduces the risk of "
"breaking software shipped by the external package manager."
msgstr ""
"Он также стандартизирует интерпретацию схем ``sysconfig``, чтобы, если "
"менеджер пакетов, специфичный для Python, собирается установить пакет в "
"контексте всего интерпретатора, он мог сделать это таким образом, чтобы "
"избежать конфликта с внешним менеджером пакетов и снизить риск поломки "
"программ, поставляемых внешним менеджером пакетов."

#: ../source/specifications/externally-managed-environments.rst:32
msgid "Terminology"
msgstr "Терминология"

#: ../source/specifications/externally-managed-environments.rst:34
msgid ""
"A few terms used in this specification have multiple meanings in the "
"contexts that it spans. For clarity, this specification uses the following "
"terms in specific ways:"
msgstr ""
"Некоторые термины, используемые в данной спецификации, имеют несколько "
"значений в контекстах, которые она охватывает. Для ясности в данной "
"спецификации следующие термины используются особым образом:"

#: ../source/specifications/externally-managed-environments.rst:61
msgid "distro"
msgstr "distro"

#: ../source/specifications/externally-managed-environments.rst:39
msgid ""
"Short for \"distribution,\" a collection of various sorts of software, "
"ideally designed to work properly together, including (in contexts relevant "
"to this document) the Python interpreter itself, software written in Python, "
"and software written in other languages. That is, this is the sense used in "
"phrases such as \"Linux distro\" or \"Berkeley Software Distribution.\""
msgstr ""
"Сокращение от \"дистрибутив\", собрание различных программ, в идеале "
"предназначенных для совместной работы, включая (в контексте, относящемся к "
"данному документу) сам интерпретатор Python, программы, написанные на "
"Python, и программы, написанные на других языках. Именно в этом смысле "
"используются такие фразы, как \"Дистрибутив Linux\" или \"Дистрибутив "
"программного обеспечения Berkeley.\""

#: ../source/specifications/externally-managed-environments.rst:46
msgid ""
"A distro can be an operating system (OS) of its own, such as Debian, Fedora, "
"or FreeBSD. It can also be an overlay distribution that installs on top of "
"an existing OS, such as Homebrew or MacPorts."
msgstr ""
"Дистрибутив может быть самостоятельной операционной системой (ОС), такой как "
"Debian, Fedora или FreeBSD. Он также может быть оверлейным дистрибутивом, "
"который устанавливается поверх существующей ОС, например Homebrew или "
"MacPorts."

#: ../source/specifications/externally-managed-environments.rst:51
msgid ""
"This document uses the short term \"distro,\" because the term "
"\"distribution\" has another meaning in Python packaging contexts: a source "
"or binary distribution package of a single piece of Python language "
"software, that is, in the sense of ``setuptools.dist.Distribution`` or "
"\"sdist\". To avoid confusion, this document does not use the plain term "
"\"distribution\" at all. In the Python packaging sense, it uses the full "
"phrase \"distribution package\" or just \"package\" (see below)."
msgstr ""
"В этом документе используется краткий термин \"дистрибутив\", потому что "
"термин \"дистрибутив\" имеет другое значение в контексте упаковки Python: "
"исходный или бинарный дистрибутив отдельной части программного обеспечения "
"языка Python, то есть в смысле ``setuptools.dist.Distribution`` или "
"\"sdist\". Чтобы избежать путаницы, в этом документе вообще не используется "
"обычный термин \"дистрибутив\". В смысле упаковки Python в нем используется "
"полная фраза \"дистрибутив\" или просто \"пакет\" (см. ниже)."

#: ../source/specifications/externally-managed-environments.rst:60
msgid ""
"The provider of a distro - the team or company that collects and publishes "
"the software and makes any needed modifications - is its **distributor**."
msgstr ""
"Поставщик дистрибутива - команда или компания, которая собирает и публикует "
"программное обеспечение и вносит в него необходимые изменения, - является "
"его **дистрибьютором**."

#: ../source/specifications/externally-managed-environments.rst:79
msgid "package"
msgstr "пакет"

#: ../source/specifications/externally-managed-environments.rst:64
msgid ""
"A unit of software that can be installed and used within Python. That is, "
"this refers to what Python-specific packaging tools tend to call a :term:"
"`distribution package` or simply a \"distribution\"; the colloquial "
"abbreviation \"package\" is used in the sense of the Python Package Index."
msgstr ""
"Единица программного обеспечения, которая может быть установлена и "
"использована в Python. То есть, это относится к тому, что специфические для "
"Python средства упаковки обычно называют :term:`distribution package` или "
"просто \"дистрибутив\"; разговорное сокращение \"пакет\" используется в "
"смысле индекса пакетов Python."

#: ../source/specifications/externally-managed-environments.rst:70
msgid ""
"This document does not use \"package\" in the sense of an importable name "
"that contains Python modules, though in many cases, a distribution package "
"consists of a single importable package of the same name."
msgstr ""
"В этом документе слово \"пакет\" не используется в смысле импортируемого "
"имени, содержащего модули Python, хотя во многих случаях дистрибутив состоит "
"из одного импортируемого пакета с тем же именем."

#: ../source/specifications/externally-managed-environments.rst:75
msgid ""
"This document generally does not use the term \"package\" to refer to units "
"of installation by a distro's package manager (such as ``.deb`` or ``.rpm`` "
"files). When needed, it uses phrasing such as \"a distro's package."
"\" (Again, in many cases, a Python package is shipped inside a distro's "
"package named something like ``python-`` plus the Python package name.)"
msgstr ""
"В этом документе обычно не используется термин \"пакет\" для обозначения "
"единиц установки менеджером пакетов дистрибутива (таких как файлы ``.deb`` "
"или ``.rpm``). При необходимости используется формулировка \"пакет "
"дистрибутива\". (Опять же, во многих случаях пакет Python поставляется "
"внутри пакета дистрибутива с именем типа ``python-`` плюс имя пакета Python.)"

#: ../source/specifications/externally-managed-environments.rst:102
msgid "Python-specific package manager"
msgstr "Python-специфический менеджер пакетов"

#: ../source/specifications/externally-managed-environments.rst:82
msgid ""
"A tool for installing, upgrading, and/or removing Python packages in a "
"manner that conforms to Python packaging standards. The most popular Python-"
"specific package manager is pip_; other examples include the old `Easy "
"Install command <easy-install_>`_ as well as direct usage of a ``setup.py`` "
"command."
msgstr ""
"Инструмент для установки, обновления и/или удаления пакетов Python в "
"соответствии со стандартами упаковки Python. Наиболее популярным менеджером "
"пакетов для Python является pip_; другие примеры включают старую команду "
"<easy-install_>`_, а также прямое использование команды ``setup.py``."

#: ../source/specifications/externally-managed-environments.rst:92
msgid ""
"(Note that the ``easy_install`` command was removed in setuptools version "
"52, released 23 January 2021.)"
msgstr ""
"(Обратите внимание, что команда ``easy_install`` была удалена в версии "
"setuptools 52, выпущенной 23 января 2021 года.)"

#: ../source/specifications/externally-managed-environments.rst:96
msgid ""
"(Conda_ is a bit of a special case, as the ``conda`` command can install "
"much more than just Python packages, making it more like a distro package "
"manager in some senses. Since the ``conda`` command generally only operates "
"on Conda-created environments, most of the concerns in this document do not "
"apply to ``conda`` when acting as a Python-specific package manager.)"
msgstr ""
"(Conda_ - это немного особый случай, поскольку команда ``conda`` может "
"устанавливать не только пакеты Python, что делает ее в некотором смысле "
"похожей на менеджер пакетов дистрибутива. Поскольку команда ``conda`` обычно "
"работает только с окружениями, созданными Conda, большинство проблем, "
"описанных в этом документе, не относятся к ``conda``, когда она выступает в "
"роли менеджера пакетов для Python.)"

#: ../source/specifications/externally-managed-environments.rst:118
msgid "distro package manager"
msgstr "менеджер пакетов дистрибутива"

#: ../source/specifications/externally-managed-environments.rst:105
msgid ""
"A tool for installing, upgrading, and/or removing a distro's packages in an "
"installed instance of that distro, which is capable of installing Python "
"packages as well as non-Python packages, and therefore generally has its own "
"database of installed software unrelated to the :ref:`database of installed "
"distributions <recording-installed-packages>`. Examples include ``apt``, "
"``dpkg``, ``dnf``, ``rpm``, ``pacman``, and ``brew``. The salient feature is "
"that if a package was installed by a distro package manager, removing or "
"upgrading it in a way that would satisfy a Python-specific package manager "
"will generally leave a distro package manager in an inconsistent state."
msgstr ""
"Инструмент для установки, обновления и/или удаления пакетов дистрибутива в "
"установленном экземпляре этого дистрибутива, который способен устанавливать "
"пакеты Python, а также пакеты, не относящиеся к Python, и поэтому обычно "
"имеет свою собственную базу данных установленного программного обеспечения, "
"не связанную с :ref:`базой данных установленных дистрибутивов <recording-"
"installed-packages>`. Примерами могут служить ``apt``, ``dpkg``, ``dnf``, "
"``rpm``, ``pacman`` и ``brew``. Основная особенность заключается в том, что "
"если пакет был установлен менеджером пакетов дистрибутива, то его удаление "
"или обновление таким образом, чтобы удовлетворить специфический менеджер "
"пакетов Python, обычно приводит к тому, что менеджер пакетов дистрибутива "
"оказывается в противоречивом состоянии."

#: ../source/specifications/externally-managed-environments.rst:117
msgid ""
"This document also uses phrases like \"external package manager\" or "
"\"system's package manager\" to refer to a distro package manager in certain "
"contexts."
msgstr ""
"В этом документе также используются такие фразы, как \"внешний менеджер "
"пакетов\" или \"менеджер пакетов системы\" для обозначения менеджера пакетов "
"дистрибутива в определенных контекстах."

#: ../source/specifications/externally-managed-environments.rst:127
msgid "shadow"
msgstr "тень"

#: ../source/specifications/externally-managed-environments.rst:121
msgid ""
"To shadow an installed Python package is to cause some other package to be "
"preferred for imports without removing any files from the shadowed package. "
"This requires multiple entries on ``sys.path``: if package A 2.0 installs "
"module ``a.py`` in one ``sys.path`` entry, and package A 1.0 installs module "
"``a.py`` in a later ``sys.path`` entry, then ``import a`` returns the module "
"from the former, and we say that A 2.0 shadows A 1.0."
msgstr ""
"Затенение установленного пакета Python заключается в том, чтобы заставить "
"другой пакет быть предпочтительным для импорта без удаления каких-либо "
"файлов из затененного пакета. Для этого требуется несколько записей в ``sys."
"path``: если пакет A 2.0 устанавливает модуль ``a.py`` в одной записи ``sys."
"path``, а пакет A 1.0 устанавливает модуль ``a.py`` в более поздней записи "
"``sys.path``, то ``import a`` возвращает модуль из первого, и мы говорим, "
"что A 2.0 затеняет A 1.0."

#: ../source/specifications/externally-managed-environments.rst:132
msgid "This specification is twofold."
msgstr "Эта спецификация имеет двоякое значение."

#: ../source/specifications/externally-managed-environments.rst:134
msgid ""
"First, it describes **a way for distributors of a Python interpreter to mark "
"that interpreter as having its packages managed by means external to "
"Python**, such that Python-specific tools like pip should not change the "
"installed packages in the interpreter's global ``sys.path`` in any way (add, "
"upgrade/downgrade, or remove) unless specifically overridden. It also "
"provides a means for the distributor to indicate how to use a virtual "
"environment as an alternative."
msgstr ""
"Во-первых, он описывает **способ для дистрибьюторов интерпретатора Python "
"пометить этот интерпретатор как имеющий пакеты, управляемые средствами, "
"внешними по отношению к Python**, так что специфичные для Python инструменты "
"вроде pip не должны изменять установленные пакеты в глобальном ``sys.path` "
"интерпретатора любым способом (добавлять, обновлять/понижать или удалять), "
"если это специально не запрещено. Он также предоставляет дистрибьютору "
"возможность указать, как использовать виртуальное окружение в качестве "
"альтернативы."

#: ../source/specifications/externally-managed-environments.rst:142
msgid ""
"This is an opt-in mechanism: by default, the Python interpreter compiled "
"from upstream sources will not be so marked, and so running ``pip install`` "
"with a self-compiled interpreter, or with a distro that has not explicitly "
"marked its interpreter, will work as it always has worked."
msgstr ""
"Это механизм выбора: по умолчанию интерпретатор Python, скомпилированный из "
"исходных текстов, не будет помечен таким образом, и поэтому запуск ``pip "
"install`` с самокомпилирующимся интерпретатором или с дистрибутивом, который "
"явно не пометил свой интерпретатор, будет работать так, как он всегда "
"работал."

#: ../source/specifications/externally-managed-environments.rst:148
msgid ""
"Second, it sets the rule that when installing packages to an interpreter's "
"global context (either to an unmarked interpreter, or if overriding the "
"marking), **Python-specific package managers should modify or delete files "
"only within the directories of the sysconfig scheme in which they would "
"create files**. This permits a distributor of a Python interpreter to set up "
"two directories, one for its own managed packages, and one for unmanaged "
"packages installed by the end user, and ensure that installing unmanaged "
"packages will not delete (or overwrite) files owned by the external package "
"manager."
msgstr ""
"Во-вторых, оно устанавливает правило, что при установке пакетов в глобальный "
"контекст интерпретатора (либо в немаркированный интерпретатор, либо при "
"переопределении маркировки), **специфичные для Python менеджеры пакетов "
"должны изменять или удалять файлы только в тех каталогах схемы sysconfig, в "
"которых они создавали бы файлы**. Это позволяет распространителю "
"интерпретатора Python создать два каталога, один для собственных управляемых "
"пакетов, другой для неуправляемых пакетов, устанавливаемых конечным "
"пользователем, и гарантировать, что установка неуправляемых пакетов не будет "
"удалять (или перезаписывать) файлы, принадлежащие внешнему менеджеру пакетов."

#: ../source/specifications/externally-managed-environments.rst:160
msgid "Marking an interpreter as using an external package manager"
msgstr "Пометка интерпретатора как использующего внешний менеджер пакетов"

#: ../source/specifications/externally-managed-environments.rst:162
msgid ""
"Before a Python-specific package installer (that is, a tool such as pip - "
"not an external tool such as apt) installs a package into a certain Python "
"context, it should make the following checks by default:"
msgstr ""
"Прежде чем программа установки пакетов, специфичная для Python (то есть "
"инструмент, такой как pip, а не внешний инструмент, такой как apt), "
"установит пакет в определенный контекст Python, она должна по умолчанию "
"выполнить следующие проверки:"

#: ../source/specifications/externally-managed-environments.rst:167
msgid ""
"Is it running outside of a virtual environment? It can determine this by "
"whether ``sys.prefix == sys.base_prefix``."
msgstr ""
"Работает ли он вне виртуальной среды? Это можно определить по тому, что "
"``sys.prefix == sys.base_prefix``."

#: ../source/specifications/externally-managed-environments.rst:170
msgid ""
"Is there an ``EXTERNALLY-MANAGED`` file in the directory identified by "
"``sysconfig.get_path(\"stdlib\", sysconfig.get_default_scheme())``?"
msgstr ""
"Есть ли файл ``EXTERNALLY-MANAGED`` в каталоге, определяемом ``sysconfig."
"get_path(\"stdlib\", sysconfig.get_default_scheme())``?"

#: ../source/specifications/externally-managed-environments.rst:173
msgid ""
"If both of these conditions are true, the installer should exit with an "
"error message indicating that package installation into this Python "
"interpreter's directory are disabled outside of a virtual environment."
msgstr ""
"Если оба эти условия верны, программа установки должна выйти с сообщением об "
"ошибке, указывающим на то, что установка пакетов в каталог этого "
"интерпретатора Python вне виртуальной среды запрещена."

#: ../source/specifications/externally-managed-environments.rst:177
msgid ""
"The installer should have a way for the user to override these rules, such "
"as a command-line flag ``--break-system-packages``. This option should not "
"be enabled by default and should carry some connotation that its use is "
"risky."
msgstr ""
"Программа установки должна иметь возможность отменить эти правила, например, "
"флаг командной строки ``--break-system-packages``. Эта опция не должна быть "
"включена по умолчанию и должна нести в себе некоторый подтекст, что ее "
"использование рискованно."

#: ../source/specifications/externally-managed-environments.rst:182
msgid ""
"The ``EXTERNALLY-MANAGED`` file is an INI-style metadata file intended to be "
"parsable by the standard library configparser_ module. If the file can be "
"parsed by ``configparser.ConfigParser(interpolation=None)`` using the UTF-8 "
"encoding, and it contains a section ``[externally-managed]``, then the "
"installer should look for an error message specified in the file and output "
"it as part of its error. If the first element of the tuple returned by "
"``locale.getlocale(locale.LC_MESSAGES)``, i.e., the language code, is not "
"``None``, it should look for the error message as the value of a key named "
"``Error-`` followed by the language code. If that key does not exist, and if "
"the language code contains underscore or hyphen, it should look for a key "
"named ``Error-`` followed by the portion of the language code before the "
"underscore or hyphen. If it cannot find either of those, or if the language "
"code is ``None``, it should look for a key simply named ``Error``."
msgstr ""
"Файл ``EXTERNALLY-MANAGED`` - это файл метаданных в стиле INI, "
"предназначенный для разбора модулем configparser_ стандартной библиотеки. "
"Если файл может быть разобран модулем ``configparser."
"ConfigParser(interpolation=None)`` с использованием кодировки UTF-8 и "
"содержит секцию ``[externally-managed]``, то программа установки должна "
"искать сообщение об ошибке, указанное в файле, и выводить его как часть "
"своей ошибки. Если первый элемент кортежа, возвращаемого функцией ``locale."
"getlocale(locale.LC_MESSAGES)``, т.е. код языка, не является ``None``, то "
"программа должна искать сообщение об ошибке как значение ключа с именем "
"``Error-``, за которым следует код языка. Если такого ключа не существует, а "
"код языка содержит подчеркивание или дефис, то следует искать ключ с именем "
"``Error-``, за которым следует часть кода языка перед подчеркиванием или "
"дефисом. Если ни один из них не найден, или если код языка - ``None``, "
"следует искать ключ с простым именем ``Error``."

#: ../source/specifications/externally-managed-environments.rst:200
msgid ""
"If the installer cannot find an error message in the file (either because "
"the file cannot be parsed or because no suitable error key exists), then the "
"installer should just use a pre-defined error message of its own, which "
"should suggest that the user create a virtual environment to install "
"packages."
msgstr ""
"Если программа установки не может найти сообщение об ошибке в файле (либо "
"потому, что файл не может быть разобран, либо потому, что не существует "
"подходящего ключа ошибки), то программа установки должна просто использовать "
"собственное предопределенное сообщение об ошибке, которое должно предложить "
"пользователю создать виртуальную среду для установки пакетов."

#: ../source/specifications/externally-managed-environments.rst:206
msgid ""
"Software distributors who have a non-Python-specific package manager that "
"manages libraries in the ``sys.path`` of their Python package should, in "
"general, ship an ``EXTERNALLY-MANAGED`` file in their standard library "
"directory. For instance, Debian may ship a file in ``/usr/lib/python3.9/"
"EXTERNALLY-MANAGED`` consisting of something like"
msgstr ""
"Распространители программного обеспечения, у которых есть неспецифичный для "
"Python менеджер пакетов, управляющий библиотеками в ``sys.path` их пакета "
"Python, должны, как правило, поставлять файл ``EXTERNALLY-MANAGED`` в их "
"стандартном каталоге библиотек. Например, Debian может поставлять файл в ``/"
"usr/lib/python3.9/EXTERNALLY-MANAGED``, состоящий из чего-то вроде"

#: ../source/specifications/externally-managed-environments.rst:230
msgid ""
"which provides useful and distro-relevant information to a user trying to "
"install a package. Optionally, translations can be provided in the same file:"
msgstr ""
"который предоставляет полезную и относящуюся к дистрибутиву информацию "
"пользователю, пытающемуся установить пакет. По желанию в том же файле можно "
"предоставить переводы:"

#: ../source/specifications/externally-managed-environments.rst:240
msgid ""
"In certain contexts, such as single-application container images that aren't "
"updated after creation, a distributor may choose not to ship an ``EXTERNALLY-"
"MANAGED`` file, so that users can install whatever they like (as they can "
"today) without having to manually override this rule."
msgstr ""
"В некоторых случаях, например, при использовании образов контейнеров с одним "
"приложением, которые не обновляются после создания, дистрибьютор может не "
"поставлять файл ``EXTERNALLY-MANAGED``, чтобы пользователи могли "
"устанавливать все, что им нравится (как и сейчас), без необходимости вручную "
"отменять это правило."

#: ../source/specifications/externally-managed-environments.rst:247
msgid "Writing to only the target ``sysconfig`` scheme"
msgstr "Запись только в целевую схему ``sysconfig``"

#: ../source/specifications/externally-managed-environments.rst:249
msgid ""
"Usually, a Python package installer installs to directories in a scheme "
"returned by the ``sysconfig`` standard library package. Ordinarily, this is "
"the scheme returned by ``sysconfig.get_default_scheme()``, but based on "
"configuration (e.g. ``pip install --user``), it may use a different scheme."
msgstr ""
"Обычно программа установки пакетов Python устанавливает их в каталоги по "
"схеме, возвращаемой пакетом стандартной библиотеки ``sysconfig`. Обычно это "
"схема, возвращаемая ``sysconfig.get_default_scheme()``, но в зависимости от "
"конфигурации (например, ``pip install --user``) она может использовать "
"другую схему."

#: ../source/specifications/externally-managed-environments.rst:255
msgid ""
"Whenever the installer is installing to a ``sysconfig`` scheme, this "
"specification declares that the installer should never modify or delete "
"files outside of that scheme. For instance, if it's upgrading a package, and "
"the package is already installed in a directory outside that scheme (perhaps "
"in a directory from another scheme), it should leave the existing files "
"alone."
msgstr ""
"Если программа установки выполняет установку в схему ``sysconfig``, эта "
"спецификация заявляет, что программа установки никогда не должна изменять "
"или удалять файлы за пределами этой схемы. Например, если он обновляет "
"пакет, а пакет уже установлен в каталог вне этой схемы (возможно, в каталог "
"из другой схемы), он должен оставить существующие файлы в покое."

#: ../source/specifications/externally-managed-environments.rst:262
msgid ""
"If the installer does end up shadowing an existing installation during an "
"upgrade, we recommend that it produces a warning at the end of its run."
msgstr ""
"Если во время обновления программа установки окажется в тени существующей "
"установки, мы рекомендуем выдать предупреждение в конце ее работы."

#: ../source/specifications/externally-managed-environments.rst:266
msgid ""
"If the installer is installing to a location outside of a ``sysconfig`` "
"scheme (e.g., ``pip install --target``), then this subsection does not apply."
msgstr ""
"Если программа установки выполняет установку в местоположение вне схемы "
"``sysconfig` (например, ``pip install --target``), то этот подраздел не "
"применяется."

#: ../source/specifications/externally-managed-environments.rst:271
msgid "Recommendations for distros"
msgstr "Рекомендации по дистрибутивам"

#: ../source/specifications/externally-managed-environments.rst:273
msgid ""
"This section is non-normative. It provides best practices we believe distros "
"should follow unless they have a specific reason otherwise."
msgstr ""
"Этот раздел не является нормативным. В нем представлены лучшие практики, "
"которым, по нашему мнению, должны следовать дистрибутивы, если у них нет "
"особых причин для обратного."

#: ../source/specifications/externally-managed-environments.rst:277
msgid "Mark the installation as externally managed"
msgstr "Пометьте установку как управляемую извне"

#: ../source/specifications/externally-managed-environments.rst:279
msgid ""
"Distros should create an ``EXTERNALLY-MANAGED`` file in their ``stdlib`` "
"directory."
msgstr ""
"Дистры должны создать файл ``EXTERNALLY-MANAGED`` в своем каталоге "
"``stdlib``."

#: ../source/specifications/externally-managed-environments.rst:283
msgid "Guide users towards virtual environments"
msgstr "Направляйте пользователей в виртуальную среду"

#: ../source/specifications/externally-managed-environments.rst:285
msgid ""
"The file should contain a useful and distro-relevant error message "
"indicating both how to install system-wide packages via the distro's package "
"manager and how to set up a virtual environment. If your distro is often "
"used by users in a state where the ``python3`` command is available (and "
"especially where ``pip`` or ``get-pip`` is available) but ``python3 -m "
"venv`` does not work, the message should indicate clearly how to make "
"``python3 -m venv`` work properly."
msgstr ""
"Файл должен содержать полезное и соответствующее дистрибутиву сообщение об "
"ошибке, указывающее как на установку общесистемных пакетов через менеджер "
"пакетов дистрибутива, так и на настройку виртуального окружения. Если ваш "
"дистрибутив часто используется пользователями в состоянии, когда команда "
"``python3`` доступна (и особенно когда доступны ``pip`` или ``get-pip``), но "
"``python3 -m venv`` не работает, в сообщении должно быть четко указано, как "
"заставить ``python3 -m venv`` работать правильно."

#: ../source/specifications/externally-managed-environments.rst:293
msgid ""
"Consider packaging pipx_, a tool for installing Python-language "
"applications, and suggesting it in the error. pipx automatically creates a "
"virtual environment for that application alone, which is a much better "
"default for end users who want to install some Python-language software "
"(which isn't available in the distro) but are not themselves Python users. "
"Packaging pipx in the distro avoids the irony of instructing users to ``pip "
"install --user --break-system-packages pipx`` to *avoid* breaking system "
"packages. Consider arranging things so your distro's package / environment "
"for Python for end users (e.g., ``python3`` on Fedora or ``python3-full`` on "
"Debian) depends on pipx."
msgstr ""
"Рассмотрим упаковку pipx_, инструмента для установки приложений на языке "
"Python, и предложение его в качестве ошибки. pipx автоматически создает "
"виртуальную среду только для этого приложения, что гораздо лучше по "
"умолчанию для конечных пользователей, которые хотят установить некоторое "
"программное обеспечение на языке Python (которого нет в дистрибутиве), но "
"сами не являются пользователями Python. Упаковка pipx в дистрибутив "
"позволяет избежать иронии, когда пользователям предлагается ``pip install --"
"user --break-system-packages pipx``, чтобы *избежать* нарушения системных "
"пакетов. Подумайте о том, чтобы пакет / окружение Python для конечных "
"пользователей вашего дистрибутива (например, ``python3`` на Fedora или "
"``python3-full`` на Debian) зависел от pipx."

#: ../source/specifications/externally-managed-environments.rst:308
msgid "Keep the marker file in container images"
msgstr "Храните файл маркера в образах контейнеров"

#: ../source/specifications/externally-managed-environments.rst:310
msgid ""
"Distros that produce official images for single-application containers (e."
"g., Docker container images) should keep the ``EXTERNALLY-MANAGED`` file, "
"preferably in a way that makes it not go away if a user of that image "
"installs package updates inside their image (think ``RUN apt-get dist-"
"upgrade``)."
msgstr ""
"Дистры, выпускающие официальные образы для контейнеров с одним приложением "
"(например, образы контейнеров Docker), должны хранить файл ``EXTERNALLY-"
"MANAGED``, желательно таким образом, чтобы он не исчезал, если пользователь "
"этого образа устанавливает обновления пакетов внутри образа (подумайте о "
"``RUN apt-get dist-upgrade``)."

#: ../source/specifications/externally-managed-environments.rst:317
msgid "Create separate distro and local directories"
msgstr "Создайте отдельные каталоги дистрибутива и локального каталога"

#: ../source/specifications/externally-managed-environments.rst:319
msgid ""
"Distros should place two separate paths on the system interpreter's ``sys."
"path``, one for distro-installed packages and one for packages installed by "
"the local system administrator, and configure ``sysconfig."
"get_default_scheme()`` to point at the latter path. This ensures that tools "
"like pip will not modify distro-installed packages. The path for the local "
"system administrator should come before the distro path on ``sys.path`` so "
"that local installs take preference over distro packages."
msgstr ""
"Дистры должны поместить два отдельных пути в ``sys.path`` системного "
"интерпретатора, один для пакетов, установленных в дистрибутиве, и один для "
"пакетов, установленных локальным системным администратором, и настроить "
"``sysconfig.get_default_scheme()`` так, чтобы он указывал на последний путь. "
"Это гарантирует, что такие инструменты, как pip, не будут изменять "
"установленные в дистрибутиве пакеты. Путь для локального системного "
"администратора должен находиться перед путем для дистрибутива в ``sys."
"path``, чтобы локальные установки имели предпочтение перед пакетами "
"дистрибутива."

#: ../source/specifications/externally-managed-environments.rst:328
msgid ""
"For example, Fedora and Debian (and their derivatives) both implement this "
"split by using ``/usr/local`` for locally-installed packages and ``/usr`` "
"for distro-installed packages. Fedora uses ``/usr/local/lib/python3.x/site-"
"packages`` vs. ``/usr/lib/python3.x/site-packages``. (Debian uses ``/usr/"
"local/lib/python3/dist-packages`` vs. ``/usr/lib/python3/dist-packages`` as "
"an additional layer of separation from a locally-compiled Python "
"interpreter: if you build and install upstream CPython in ``/usr/local/"
"bin``, it will look at ``/usr/local/lib/python3/site-packages``, and Debian "
"wishes to make sure that packages installed via the locally-built "
"interpreter don't show up on ``sys.path`` for the distro interpreter.)"
msgstr ""
"Например, Fedora и Debian (и их производные) реализуют это разделение, "
"используя ``/usr/local`` для локально установленных пакетов и ``/usr`` для "
"пакетов, установленных в дистрибутиве. Fedora использует ``/usr/local/lib/"
"python3.x/site-packages`` против ``/usr/lib/python3.x/site-packages``. "
"(Debian использует ``/usr/local/lib/python3/dist-packages`` против ``/usr/"
"local/lib/python3/dist-packages``. ``/usr/lib/python3/dist-packages`` как "
"дополнительный уровень отделения от локально скомпилированного "
"интерпретатора Python: если вы собираете и устанавливаете CPython в ``/usr/"
"local/bin``, он будет смотреть на ``/usr/local/lib/python3/site-packages``, "
"а Debian хочет быть уверен, что пакеты, установленные через локально "
"собранный интерпретатор, не появятся в ```sys.path`` для интерпретатора "
"дистрибутива.)"

#: ../source/specifications/externally-managed-environments.rst:341
msgid ""
"Note that the ``/usr/local`` vs. ``/usr`` split is analogous to how the "
"``PATH`` environment variable typically includes ``/usr/local/bin:/usr/bin`` "
"and non-distro software installs to ``/usr/local`` by default. This split is "
"`recommended by the Filesystem Hierarchy Standard`__."
msgstr ""
"Обратите внимание, что разделение ``/usr/local`` и ``/usr`` аналогично тому, "
"как переменная окружения ``PATH`` обычно включает ``/usr/local/bin:/usr/"
"bin``, а недистро-программы устанавливаются в ``/usr/local`` по умолчанию. "
"Такое разделение ``рекомендовано Стандартом иерархии файловых систем``."

#: ../source/specifications/externally-managed-environments.rst:349
msgid ""
"There are two ways you could do this. One is, if you are building and "
"packaging Python libraries directly (e.g., your packaging helpers unpack a "
"wheel or call ``setup.py install``), arrange for those tools to use a "
"directory that is not in a ``sysconfig`` scheme but is still on ``sys.path``."
msgstr ""
"Это можно сделать двумя способами. Первый - если вы собираете и упаковываете "
"библиотеки Python напрямую (например, ваши помощники по упаковке "
"распаковывают колесо или вызывают ``setup.py install``), организуйте для "
"этих инструментов использование каталога, который не входит в схему "
"``sysconfig``, но все еще находится в ``sys.path``."

#: ../source/specifications/externally-managed-environments.rst:355
msgid ""
"The other is to arrange for the default ``sysconfig`` scheme to change when "
"running inside a package build versus when running on an installed system. "
"The ``sysconfig`` customization hooks from bpo-43976_ should make this easy "
"(once accepted and implemented): make your packaging tool set an environment "
"variable or some other detectable configuration, and define a "
"``get_preferred_schemes`` function to return a different scheme when called "
"from inside a package build. Then you can use ``pip install`` as part of "
"your distro packaging."
msgstr ""
"Другой вариант - организовать изменение схемы ``sysconfig`` по умолчанию при "
"запуске внутри сборки пакета по сравнению с запуском на установленной "
"системе. Крючки настройки ``sysconfig`` из bpo-43976_ должны упростить эту "
"задачу (после принятия и реализации): сделайте так, чтобы ваш инструмент "
"упаковки устанавливал переменную окружения или какую-то другую определяемую "
"конфигурацию, и определите функцию ``get_preferred_schemes``, чтобы она "
"возвращала другую схему при вызове изнутри сборки пакета. Тогда вы сможете "
"использовать ``pip install`` как часть упаковки вашего дистрибутива."

#: ../source/specifications/externally-managed-environments.rst:367
msgid ""
"We propose adding a ``--scheme=...`` option to instruct pip to run against a "
"specific scheme. (See `Implementation Notes`_ below for how pip currently "
"determines schemes.) Once that's available, for local testing and possibly "
"for actual packaging, you would be able to run something like ``pip install "
"--scheme=posix_distro`` to explicitly install a package into your distro's "
"location (bypassing ``get_preferred_schemes``). One could also, if "
"absolutely needed, use ``pip uninstall --scheme=posix_distro`` to use pip to "
"remove packages from the system-managed directory."
msgstr ""
"Мы предлагаем добавить опцию ``--scheme=...`` для указания pip запускаться "
"по определенной схеме. (О том, как pip в настоящее время определяет схемы, "
"см. ниже в разделе ``Примечания к реализации``.) Когда это будет доступно, "
"для локального тестирования и, возможно, для реальной упаковки вы сможете "
"запускать что-то вроде ``pip install --scheme=posix_distro`` для явной "
"установки пакета в расположение вашего дистрибутива (в обход "
"``get_preferred_schemes``). Также, при крайней необходимости, можно "
"использовать ``pip uninstall --scheme=posix_distro``, чтобы с помощью pip "
"удалить пакеты из управляемого системой каталога."

#: ../source/specifications/externally-managed-environments.rst:377
msgid ""
"To install packages with pip, you would also need to either suppress the "
"``EXTERNALLY-MANAGED`` marker file to allow pip to run or to override it on "
"the command line. You may want to use the same means for suppressing the "
"marker file in build chroots as you do in container images."
msgstr ""
"Чтобы установить пакеты с помощью pip, вам также потребуется либо подавить "
"файл-маркер ``EXTERNALLY-MANAGED``, чтобы позволить pip запуститься, либо "
"переопределить его в командной строке. Вы можете использовать те же средства "
"для подавления маркерного файла в chroots сборки, что и в образах "
"контейнеров."

#: ../source/specifications/externally-managed-environments.rst:383
msgid ""
"The advantage of setting these up to be automatic (suppressing the marker "
"file in your build environment and having ``get_preferred_schemes`` "
"automatically return your distro's scheme) is that an unadorned ``pip "
"install`` will work inside a package build, which generally means that an "
"unmodified upstream build script that happens to internally call ``pip "
"install`` will do the right thing. You can, of course, just ensure that your "
"packaging process always calls ``pip install --scheme=posix_distro --break-"
"system-packages``, which would work too."
msgstr ""
"Преимущество автоматической настройки (подавление файла-маркера в среде "
"сборки и автоматическое возвращение ``get_preferred_schemes`` схемы вашего "
"дистрибутива) заключается в том, что не украшенная ``pip install`` будет "
"работать внутри сборки пакета, что в целом означает, что немодифицированный "
"сценарий сборки upstream, который случайно вызовет ``pip install``, сделает "
"все правильно. Конечно, вы можете просто убедиться, что ваш процесс упаковки "
"всегда вызывает ``pip install --scheme=posix_distro --break-system-"
"packages``, что тоже будет работать."

#: ../source/specifications/externally-managed-environments.rst:393
msgid ""
"The best approach here depends a lot on your distro's conventions and "
"mechanisms for packaging."
msgstr ""
"Лучший подход здесь во многом зависит от конвенций и механизмов упаковки в "
"вашем дистрибутиве."

#: ../source/specifications/externally-managed-environments.rst:396
msgid ""
"Similarly, the ``sysconfig`` paths that are not for importable Python code - "
"that is, ``include``, ``platinclude``, ``scripts``, and ``data`` - should "
"also have two variants, one for use by distro-packaged software and one for "
"use for locally-installed software, and the distro should be set up such "
"that both are usable. For instance, a typical FHS-compliant distro will use "
"``/usr/local/include`` for the default scheme's ``include`` and ``/usr/"
"include`` for distro-packaged headers and place both on the compiler's "
"search path, and it will use ``/usr/local/bin`` for the default scheme's "
"``scripts`` and ``/usr/bin`` for distro-packaged entry points and place both "
"on ``$PATH``."
msgstr ""
"Аналогично, пути ``sysconfig``, которые не предназначены для импортируемого "
"кода Python - то есть ``include``, ``platinclude``, ``cripts`` и ``data`` - "
"также должны иметь два варианта, один для использования в дистрибутиве, "
"другой для локально установленного программного обеспечения, и дистрибутив "
"должен быть настроен так, чтобы оба были пригодны для использования. "
"Например, типичный FHS-совместимый дистрибутив будет использовать ``/usr/"
"local/include`` для стандартной схемы ``include`` и ``/usr/include`` для "
"упакованных в дистрибутив заголовков и помещать оба в путь поиска "
"компилятора, а также будет использовать ``/usr/local/bin`` для стандартной "
"схемы ``cripts`` и ``/usr/bin`` для упакованных в дистрибутив точек входа и "
"помещать обе в ``$PATH``."

#: ../source/specifications/externally-managed-environments.rst:410
msgid "Implementation Notes"
msgstr "Примечания к реализации"

#: ../source/specifications/externally-managed-environments.rst:412
msgid ""
"This section is non-normative and contains notes relevant to both the "
"specification and potential implementations."
msgstr ""
"Этот раздел не является нормативным и содержит примечания, относящиеся как к "
"спецификации, так и к потенциальным реализациям."

#: ../source/specifications/externally-managed-environments.rst:415
msgid ""
"Currently (as of May 2021), pip does not directly expose a way to choose a "
"target ``sysconfig`` scheme, but it has three ways of looking up schemes "
"when installing:"
msgstr ""
"В настоящее время (по состоянию на май 2021 года) pip не предоставляет "
"возможности напрямую выбрать целевую схему ``sysconfig``, но у него есть три "
"способа поиска схем при установке:"

#: ../source/specifications/externally-managed-environments.rst:422
msgid "``pip install``"
msgstr "``pip install``"

#: ../source/specifications/externally-managed-environments.rst:420
msgid ""
"Calls ``sysconfig.get_default_scheme()``, which is usually (in upstream "
"CPython and most current distros) the same as "
"``get_preferred_scheme('prefix')``."
msgstr ""
"Вызывает ``sysconfig.get_default_scheme()``, который обычно (в upstream "
"CPython и большинстве современных дистрибутивов) совпадает с "
"``get_preferred_scheme('prefix')``."

#: ../source/specifications/externally-managed-environments.rst:425
msgid "``pip install --prefix=/some/path``"
msgstr "``pip install --prefix=/some/path``"

#: ../source/specifications/externally-managed-environments.rst:425
msgid "Calls ``sysconfig.get_preferred_scheme('prefix')``."
msgstr "Вызывает ``sysconfig.get_preferred_scheme('prefix')``."

#: ../source/specifications/externally-managed-environments.rst:428
msgid "``pip install --user``"
msgstr "``pip install --user``"

#: ../source/specifications/externally-managed-environments.rst:428
msgid "Calls ``sysconfig.get_preferred_scheme('user')``."
msgstr "Вызывает ``sysconfig.get_preferred_scheme('user')``."

#: ../source/specifications/externally-managed-environments.rst:430
msgid ""
"Finally, ``pip install --target=/some/path`` writes directly to ``/some/"
"path`` without looking up any schemes."
msgstr ""
"Наконец, ``pip install --target=/some/path`` записывает непосредственно в ``/"
"some/path`` без поиска каких-либо схем."

#: ../source/specifications/externally-managed-environments.rst:433
msgid ""
"Debian currently carries a `patch to change the default install location "
"inside a virtual environment`__, using a few heuristics (including checking "
"for the ``VIRTUAL_ENV`` environment variable), largely so that the directory "
"used in a virtual environment remains ``site-packages`` and not ``dist-"
"packages``. This does not particularly affect this proposal, because the "
"implementation of that patch does not actually change the default "
"``sysconfig`` scheme, and notably does not change the result of ``sysconfig."
"get_path(\"stdlib\")``."
msgstr ""
"В Debian в настоящее время существует `патч, изменяющий место установки по "
"умолчанию в виртуальном окружении`__, используя несколько эвристик (включая "
"проверку переменной окружения ``VIRTUAL_ENV``), в основном для того, чтобы "
"каталог, используемый в виртуальном окружении, оставался ``ite-packages``, а "
"не ``dist-packages``. Это не особенно влияет на данное предложение, "
"поскольку реализация этого патча фактически не изменяет схему ``sysconfig`` "
"по умолчанию, и, в частности, не изменяет результат ``sysconfig."
"get_path(\"stdlib\")``."

#: ../source/specifications/externally-managed-environments.rst:445
msgid ""
"Fedora currently carries a `patch to change the default install location "
"when not running inside rpmbuild`__, which they use to implement the two-"
"system-wide-directories approach. This is conceptually the sort of hook "
"envisioned by bpo-43976_, except implemented as a code patch to "
"``distutils`` instead of as a changed ``sysconfig`` scheme."
msgstr ""
"В настоящее время Fedora содержит `патч для изменения места установки по "
"умолчанию, если не запущен внутри rpmbuild`__, который используется для "
"реализации подхода с двумя системными каталогами. Концептуально это тот же "
"крючок, что и в bpo-43976_, только реализованный в виде исправления кода к "
"``distutils``, а не в виде изменения схемы ``sysconfig``."

#: ../source/specifications/externally-managed-environments.rst:454
msgid ""
"The implementation of ``is_virtual_environment`` above, as well as the logic "
"to load the ``EXTERNALLY-MANAGED`` file and find the error message from it, "
"may as well get added to the standard library (``sys`` and ``sysconfig``, "
"respectively), to centralize their implementations, but they don't need to "
"be added yet."
msgstr ""
"Реализация ``is_virtual_environment`` выше, а также логика загрузки файла "
"``EXTERNALLY-MANAGED`` и поиска сообщения об ошибке из него, могут быть "
"добавлены в стандартную библиотеку (``sys`` и ``sysconfig``, "
"соответственно), чтобы централизовать их реализацию, но пока в этом нет "
"необходимости."

#: ../source/specifications/externally-managed-environments.rst:464
msgid "Copyright"
msgstr "Авторские права"

#: ../source/specifications/externally-managed-environments.rst:466
msgid ""
"This document is placed in the public domain or under the CC0-1.0-Universal "
"license, whichever is more permissive."
msgstr ""
"Этот документ размещен в общественном достоянии или под лицензией CC0-1.0-"
"Universal, в зависимости от того, что является более разрешительным."

#: ../source/specifications/externally-managed-environments.rst:474
msgid "June 2022: This specification was approved through :pep:`668`."
msgstr "Июнь 2022: Эта спецификация была одобрена через :pep:`668`."

#: ../source/specifications/file-yanking.rst:5
msgid "File Yanking"
msgstr ""

#: ../source/specifications/file-yanking.rst:9
#, fuzzy
#| msgid "This specification was originally defined in :pep:`753`."
msgid "This specification was originally defined in :pep:`592`."
msgstr "Эта спецификация была первоначально определена в :pep:`753`."

#: ../source/specifications/file-yanking.rst:14
#, fuzzy
#| msgid ""
#| ":pep:`740` includes changes to the HTML and JSON index APIs. These "
#| "changes are documented in the :ref:`simple-repository-api` under :ref:"
#| "`simple-repository-api-base` and :ref:`json-serialization`."
msgid ""
":pep:`592` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`HTML - "
"Project Detail <simple-repository-html-project-detail>` and :ref:`JSON - "
"Project Detail <simple-repository-json-project-detail>`."
msgstr ""
":pep:`740` включает изменения в HTML и JSON API индексов. Эти изменения "
"документированы в разделах :ref:`Simple-repository-api` под :ref:`Simple-"
"repository-api-base` и :ref:`json-serialization`."

#: ../source/specifications/file-yanking.rst:22
msgid ""
"Links in the simple repository **MAY** have a ``data-yanked`` attribute "
"which may have no value, or may have an arbitrary string as a value. The "
"presence of a ``data-yanked`` attribute **SHOULD** be interpreted as "
"indicating that the file pointed to by this particular link has been "
"\"Yanked\", and should not generally be selected by an installer, except "
"under specific scenarios."
msgstr ""
"Ссылки в простом репозитории **МОГУТ** иметь атрибут ``данные-янки'', "
"который может не иметь значения, или иметь произвольную строку в качестве "
"значения. Наличие атрибута ``данные-янки'' **ДОЛЖНО** интерпретироваться как "
"указание на то, что файл, на который указывает данная конкретная ссылка, был "
"\"выдернут\", и не должен выбираться программой установки, за исключением "
"особых случаев."

#: ../source/specifications/file-yanking.rst:29
msgid ""
"The value of the ``data-yanked`` attribute, if present, is an arbitrary "
"string that represents the reason for why the file has been yanked. Tools "
"that process the simple repository API **MAY** surface this string to end "
"users."
msgstr ""
"Значение атрибута ``данные выдернуты``, если он присутствует, представляет "
"собой произвольную строку, которая отражает причину, по которой файл был "
"выдернут. Инструменты, обрабатывающие простой API репозитория, **МОГУТ** "
"отображать эту строку для конечных пользователей."

#: ../source/specifications/file-yanking.rst:34
msgid ""
"The yanked attribute is not immutable once set, and may be rescinded in the "
"future (and once rescinded, may be reset as well). Thus API users **MUST** "
"be able to cope with a yanked file being \"unyanked\" (and even yanked "
"again)."
msgstr ""
"Атрибут yanked не является неизменяемым после установки и может быть отменен "
"в будущем (а после отмены может быть также сброшен). Таким образом, "
"пользователи API **МОГУТ** быть в состоянии справиться с тем, что файл с "
"атрибутом yanked может быть \"отменен\" (и даже снова отменен)."

#: ../source/specifications/file-yanking.rst:40
msgid "Installers"
msgstr "Установщики"

#: ../source/specifications/file-yanking.rst:42
msgid ""
"The desirable experience for users is that once a file is yanked, when a "
"human being is currently trying to directly install a yanked file, that it "
"fails as if that file had been deleted. However, when a human did that "
"awhile ago, and now a computer is just continuing to mechanically follow the "
"original order to install the now yanked file, then it acts as if it had not "
"been yanked."
msgstr ""
"Для пользователей желательно, чтобы после удаления файла, когда человек в "
"данный момент пытается напрямую установить удаленный файл, это происходило "
"так, как будто файл был удален. Однако если человек сделал это некоторое "
"время назад, а теперь компьютер просто продолжает механически следовать "
"первоначальному приказу установить удаленный файл, то он ведет себя так, как "
"будто он не был удален."

#: ../source/specifications/file-yanking.rst:49
msgid ""
"An installer **MUST** ignore yanked releases, if the selection constraints "
"can be satisfied with a non-yanked version, and **MAY** refuse to use a "
"yanked release even if it means that the request cannot be satisfied at all. "
"An implementation **SHOULD** choose a policy that follows the spirit of the "
"intention above, and that prevents \"new\" dependencies on yanked releases/"
"files."
msgstr ""
"Программа установки **ДОЛЖНА** игнорировать выдернутые релизы, если "
"ограничения выбора могут быть удовлетворены с помощью не выдернутой версии, "
"и **МОЖЕТ** отказаться от использования выдернутого релиза, даже если это "
"означает, что запрос вообще не может быть удовлетворен. Реализация "
"**ДОЛЖНА** выбрать политику, которая следует духу вышеуказанного намерения и "
"предотвращает \"новые\" зависимости от выдернутых релизов/файлов."

#: ../source/specifications/file-yanking.rst:56
msgid ""
"What this means is left up to the specific installer, to decide how to best "
"fit into the overall usage of their installer. However, there are two "
"suggested approaches to take:"
msgstr ""
"Что это значит, решает конкретный инсталлятор, чтобы решить, как лучше всего "
"вписать это в общее использование своего инсталлятора. Однако можно "
"предложить два подхода:"

#: ../source/specifications/file-yanking.rst:60
msgid ""
"Yanked files are always ignored, unless they are the only file that matches "
"a version specifier that \"pins\" to an exact version using either ``==`` "
"(without any modifiers that make it a range, such as ``.*``) or ``===``. "
"Matching this version specifier should otherwise be done as per :ref:`the "
"version specifiers specification <version-specifiers>` for things like local "
"versions, zero padding, etc."
msgstr ""
"Выдернутые файлы всегда игнорируются, если только они не являются "
"единственным файлом, соответствующим спецификатору версии, который "
"\"привязывает\" к точной версии с помощью ``==`` (без каких-либо "
"модификаторов, которые делают его диапазоном, таких как ``.*``) или ``===``. "
"В остальном соответствие этому спецификатору версии должно выполняться "
"согласно : ссылка:`спецификации спецификаторов версии <версия-"
"спецификаторы>` для таких вещей, как локальные версии, нулевые подстановки и "
"т.д."

#: ../source/specifications/file-yanking.rst:67
msgid ""
"Yanked files are always ignored, unless they are the only file that matches "
"what a lock file (such as ``Pipfile.lock`` or ``poetry.lock``) specifies to "
"be installed. In this case, a yanked file **SHOULD** not be used when "
"creating or updating a lock file from some input file or command."
msgstr ""
"Выдернутые файлы всегда игнорируются, если только они не являются "
"единственным файлом, который соответствует тому, что указано в файле "
"блокировки (например, ``Pipfile.lock`` или ``poetry.lock``) для установки. В "
"этом случае выдернутый файл **ДОЛЖЕН** не использоваться при создании или "
"обновлении файла блокировки из какого-либо входного файла или команды."

#: ../source/specifications/file-yanking.rst:73
msgid ""
"Regardless of the specific strategy that an installer chooses for deciding "
"when to install yanked files, an installer **SHOULD** emit a warning when it "
"does decide to install a yanked file. That warning **MAY** utilize the value "
"of the ``data-yanked`` attribute (if it has a value) to provide more "
"specific feedback to the user about why that file had been yanked."
msgstr ""
"Независимо от конкретной стратегии, которую выбирает программа установки для "
"принятия решения об установке выдернутых файлов, программа установки "
"**ДОЛЖНА** выдавать предупреждение, когда она принимает решение об установке "
"выдернутого файла. Это предупреждение **МОЖЕТ** использовать значение "
"атрибута ``данные выдернуты'' (если он имеет значение), чтобы предоставить "
"пользователю более конкретную информацию о том, почему этот файл был "
"выдернут."

#: ../source/specifications/file-yanking.rst:81
msgid "Mirrors"
msgstr "Зеркала"

#: ../source/specifications/file-yanking.rst:83
msgid "Mirrors can generally treat yanked files one of two ways:"
msgstr "Как правило, зеркала можно обрабатывать одним из двух способов:"

#: ../source/specifications/file-yanking.rst:85
msgid ""
"They may choose to omit them from their simple repository API completely, "
"providing a view over the repository that shows only \"active\", unyanked "
"files."
msgstr ""
"Они могут полностью исключить их из своего простого API репозитория, "
"предоставляя представление репозитория, в котором отображаются только "
"\"активные\", незаанкетированные файлы."

#: ../source/specifications/file-yanking.rst:88
msgid ""
"They may choose to include yanked files, and additionally mirror the ``data-"
"yanked`` attribute as well."
msgstr ""
"Они могут выбрать включение выдернутых файлов и дополнительно отразить "
"атрибут ``данные выдернуты``."

#: ../source/specifications/file-yanking.rst:91
msgid ""
"Mirrors **MUST NOT** mirror a yanked file without also mirroring the ``data-"
"yanked`` attribute for it."
msgstr ""
"Зеркала **МОГУТ НЕ** зеркалировать выдернутый файл, не зеркалируя также "
"атрибут ``данные выдернуты`` для него."

#: ../source/specifications/glob-patterns.rst:3
msgid "``glob`` patterns"
msgstr ""

#: ../source/specifications/glob-patterns.rst:5
msgid ""
"Some PyPA specifications, e.g. :ref:`pyproject.toml's license-files "
"<pyproject-toml-license-files>`, accept certain types of *glob patterns* to "
"match a given string containing wildcards and character ranges against files "
"and directories. This specification defines which patterns are acceptable "
"and how they should be handled."
msgstr ""

#: ../source/specifications/glob-patterns.rst:13
msgid "Valid glob patterns"
msgstr ""

#: ../source/specifications/glob-patterns.rst:15
msgid ""
"For PyPA purposes, a *valid glob pattern* MUST be a string matched against "
"filesystem entries as specified below:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:18
msgid ""
"Alphanumeric characters, underscores (``_``), hyphens (``-``) and dots (``."
"``) MUST be matched verbatim."
msgstr ""
"Буквенно-цифровые символы, подчеркивания (``_``), дефисы (``-``) и точки (``."
"``) ДОЛЖНЫ совпадать дословно."

#: ../source/specifications/glob-patterns.rst:21
msgid ""
"Special glob characters: ``*``, ``?``, ``**`` and character ranges: ``[]`` "
"containing only the verbatim matched characters MUST be supported. Within "
"``[...]``, the hyphen indicates a locale-agnostic range (e.g. ``a-z``, order "
"based on Unicode code points). Hyphens at the start or end are matched "
"literally."
msgstr ""
"Специальные символы глобуса: ``*``, ``?``, ``**`` и диапазоны символов: "
"``[...]``, содержащие только дословные совпадающие символы, ДОЛЖНЫ "
"поддерживаться. Внутри ``[...]`` дефис указывает на диапазон, не зависящий "
"от локали (например, ``a-z``, порядок основан на кодовых точках Unicode). "
"Дефисы в начале или в конце совпадают буквально."

#: ../source/specifications/glob-patterns.rst:27
#, fuzzy
#| msgid "Path delimiters must be the forward slash character (``/``)."
msgid "Path delimiters MUST be the forward slash character (``/``)."
msgstr "Разделителями путей должны быть символы прямой косой черты (``/``)."

#: ../source/specifications/glob-patterns.rst:29
#, fuzzy
#| msgid ""
#| "Path delimiters MUST be the forward slash character (``/``). Patterns are "
#| "relative to the directory containing :file:`pyproject.toml`, therefore "
#| "the leading slash character MUST NOT be used."
msgid ""
"Patterns always refer to *relative paths*, e.g., when used in :file:"
"`pyproject.toml`, patterns should always be relative to the directory "
"containing that file. Therefore the leading slash character MUST NOT be used."
msgstr ""
"Разделителями путей ДОЛЖЕН быть символ прямой косой черты (``/``). Образцы "
"являются относительными к директории, содержащей :file:`pyproject.toml`, "
"поэтому символ прямой косой черты НЕ ДОЛЖЕН использоваться."

#: ../source/specifications/glob-patterns.rst:34
msgid "Parent directory indicators (``..``) MUST NOT be used."
msgstr "Индикаторы родительского каталога (``..``) НЕ ДОЛЖНЫ использоваться."

#: ../source/specifications/glob-patterns.rst:36
#, fuzzy
#| msgid ""
#| "Any characters or character sequences not covered by this specification "
#| "are invalid. Projects MUST NOT use such values. Tools consuming this "
#| "field SHOULD reject invalid values with an error."
msgid ""
"Any characters or character sequences not covered by this specification are "
"invalid. Projects MUST NOT use such values. Tools consuming glob patterns "
"SHOULD reject invalid values with an error."
msgstr ""
"Любые символы или последовательности символов, не предусмотренные данной "
"спецификацией, являются недействительными. Проекты НЕ ДОЛЖНЫ использовать "
"такие значения. Средства, использующие это поле, ДОЛЖНЫ отклонять "
"недопустимые значения с ошибкой."

#: ../source/specifications/glob-patterns.rst:40
msgid ""
"Literal paths (e.g. :file:`LICENSE`) are valid globs which means they can "
"also be defined."
msgstr ""
"Буквальные пути (например, :file:`LICENSE`) являются допустимыми глобусами, "
"что означает, что они также могут быть определены."

#: ../source/specifications/glob-patterns.rst:43
msgid "Tools consuming glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:45
msgid ""
"MUST treat each value as a glob pattern, and MUST raise an error if the "
"pattern contains invalid glob syntax."
msgstr ""
"ДОЛЖНО рассматривать каждое значение как шаблон glob, и ДОЛЖНО выдать "
"ошибку, если шаблон содержит неверный синтаксис glob."

#: ../source/specifications/glob-patterns.rst:47
msgid ""
"MUST raise an error if any individual user-specified pattern does not match "
"at least one file."
msgstr ""
"ДОЛЖНА вызывать ошибку, если любой отдельный шаблон, указанный "
"пользователем, не соответствует хотя бы одному файлу."

#: ../source/specifications/glob-patterns.rst:50
msgid "Examples of valid glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:61
msgid "Examples of invalid glob patterns:"
msgstr ""

#: ../source/specifications/glob-patterns.rst:74
#, fuzzy
#| msgid "Reference Implementation"
msgid "Reference implementation in Python"
msgstr "Справочное осуществление"

#: ../source/specifications/glob-patterns.rst:76
msgid ""
"It is possible to defer the majority of the pattern matching against the "
"file system to the :mod:`glob` module in Python's standard library. It is "
"necessary however to perform additional validations."
msgstr ""

#: ../source/specifications/glob-patterns.rst:80
msgid "The code below is as a simple reference implementation:"
msgstr ""

#: ../source/specifications/index.rst:4
msgid "PyPA specifications"
msgstr "Спецификации PyPA"

#: ../source/specifications/index.rst:6
msgid ""
"This is a list of currently active interoperability specifications "
"maintained by the Python Packaging Authority. The process for updating these "
"standards, and for proposing new ones, is documented on `pypa.io <https://"
"www.pypa.io/en/latest/specifications/>`__."
msgstr ""
"Это список активных на данный момент спецификаций совместимости, "
"поддерживаемых Python Packaging Authority. Процесс обновления этих "
"стандартов и предложения новых задокументирован на сайте `pypa.io <https://"
"www.pypa.io/en/latest/specifications/>`__."

#: ../source/specifications/index-hosted-attestations.rst:6
msgid "Index hosted attestations"
msgstr "Аттестаты, размещенные в индексе"

#: ../source/specifications/index-hosted-attestations.rst:8
msgid "This specification was originally defined in :pep:`740`."
msgstr "Эта спецификация была первоначально определена в :pep:`740`."

#: ../source/specifications/index-hosted-attestations.rst:12
msgid ""
":pep:`740` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`simple-"
"repository-api-base` and :ref:`json-serialization`."
msgstr ""
":pep:`740` включает изменения в HTML и JSON API индексов. Эти изменения "
"документированы в разделах :ref:`Simple-repository-api` под :ref:`Simple-"
"repository-api-base` и :ref:`json-serialization`."

#: ../source/specifications/index-hosted-attestations.rst:22
msgid "Upload endpoint changes"
msgstr "Загрузка изменений конечной точки"

#: ../source/specifications/index-hosted-attestations.rst:26
msgid ""
"The \"legacy\" upload API is not standardized. See `PyPI's Upload API "
"documentation <https://docs.pypi.org/api/upload/>`_ for how attestations are "
"uploaded."
msgstr ""
"«Устаревший» API выгрузки не стандартизирован. О том, как загружаются "
"аттестаты, см. документацию по API выгрузки `PyPI <https://docs.pypi.org/api/"
"upload/>`_."

#: ../source/specifications/index-hosted-attestations.rst:33
msgid "Attestation objects"
msgstr "Объекты аттестации"

#: ../source/specifications/index-hosted-attestations.rst:35
msgid ""
"An attestation object is a JSON object with several required keys; "
"applications or signers may include additional keys so long as all "
"explicitly listed keys are provided. The required layout of an attestation "
"object is provided as pseudocode below."
msgstr ""
"Объект аттестации - это объект JSON с несколькими обязательными ключами; "
"приложения или подписывающие лица могут включать дополнительные ключи при "
"условии, что все явно перечисленные ключи будут предоставлены. Требуемый "
"макет объекта аттестации представлен в виде псевдокода ниже."

#: ../source/specifications/index-hosted-attestations.rst:88
msgid ""
"A full data model for each object in ``transparency_entries`` is provided "
"in :ref:`appendix`. Attestation objects **SHOULD** include one or more "
"transparency log entries, and **MAY** include additional keys for other "
"sources of signed time (such as an :rfc:`3161` Time Stamping Authority or a "
"`Roughtime <https://blog.cloudflare.com/roughtime>`__ server)."
msgstr ""
"Полная модель данных для каждого объекта в ``transparency_entries`` "
"приведена в :ref:``appendix``. Объекты аттестации **ДОЛЖНЫ** включать одну "
"или несколько записей журнала прозрачности, и **МОГУТ** включать "
"дополнительные ключи для других источников подписанного времени (таких как :"
"rfc:`3161` Time Stamping Authority или `Roughtime <https://blog.cloudflare."
"com/roughtime>`__ сервер)."

#: ../source/specifications/index-hosted-attestations.rst:94
msgid ""
"Attestation objects are versioned; this PEP specifies version 1. Each "
"version is tied to a single cryptographic suite to minimize unnecessary "
"cryptographic agility. In version 1, the suite is as follows:"
msgstr ""
"Объекты аттестации имеют версии; данный PEP определяет версию 1. Каждая "
"версия привязана к одному криптографическому набору, чтобы минимизировать "
"ненужную криптографическую маневренность. В версии 1 этот набор выглядит "
"следующим образом:"

#: ../source/specifications/index-hosted-attestations.rst:98
msgid ""
"Certificates are specified as X.509 certificates, and comply with the "
"profile in :rfc:`5280`."
msgstr ""
"Сертификаты указываются как сертификаты X.509 и соответствуют профилю в :rfc:"
"`5280`."

#: ../source/specifications/index-hosted-attestations.rst:100
msgid ""
"The message signature algorithm is ECDSA, with the P-256 curve for public "
"keys and SHA-256 as the cryptographic digest function."
msgstr ""
"Алгоритм подписи сообщений - ECDSA, с кривой P-256 для открытых ключей и "
"SHA-256 в качестве функции криптографического дайджеста."

#: ../source/specifications/index-hosted-attestations.rst:103
msgid ""
"Future PEPs may change this suite (and the overall shape of the attestation "
"object) by selecting a new version number."
msgstr ""
"Будущие PEP могут изменить этот набор (и общую форму объекта аттестации), "
"выбрав новый номер версии."

#: ../source/specifications/index-hosted-attestations.rst:109
msgid "Attestation statement and signature generation"
msgstr "Создание аттестационного листа и подписи"

#: ../source/specifications/index-hosted-attestations.rst:111
msgid ""
"The *attestation statement* is the actual claim that is cryptographically "
"signed over within the attestation object (i.e., the ``envelope.statement``)."
msgstr ""
"Заявление об аттестации* - это фактическое утверждение, которое "
"криптографически подписывается внутри объекта аттестации (т.е. ``конверт."
"заявление``)."

#: ../source/specifications/index-hosted-attestations.rst:114
msgid ""
"The attestation statement is encoded as a `v1 in-toto Statement object "
"<https://github.com/in-toto/attestation/blob/v1.0/spec/v1.0/statement."
"md>`__, in JSON form. When serialized the statement is treated as an opaque "
"binary blob, avoiding the need for canonicalization."
msgstr ""
"Заявление об аттестации кодируется как объект `v1 in-toto Statement <https://"
"github.com/in-toto/attestation/blob/v1.0/spec/v1.0/statement.md>`__, в форме "
"JSON. При сериализации заявление рассматривается как непрозрачный двоичный "
"блок, что позволяет избежать необходимости канонизации."

#: ../source/specifications/index-hosted-attestations.rst:119
msgid ""
"In addition to being a v1 in-toto Statement, the attestation statement is "
"constrained in the following ways:"
msgstr ""
"Помимо того, что аттестационное заявление является v1 in-toto Statement, оно "
"ограничено следующим образом:"

#: ../source/specifications/index-hosted-attestations.rst:122
msgid "The in-toto ``subject`` **MUST** contain only a single subject."
msgstr "In-toto ``субъект`` **ДОЛЖЕН** содержать только один субъект."

#: ../source/specifications/index-hosted-attestations.rst:123
msgid ""
"``subject[0].name`` is the distribution's filename, which **MUST** be a "
"valid :ref:`source distribution <source-distribution-format>` or :ref:`wheel "
"distribution <binary-distribution-format>` filename."
msgstr ""
"``subject[0].name`` - это имя файла дистрибутива, которое **МОЖЕТ** быть "
"действительным именем файла :ref:`source distribution <source-distribution-"
"format>` или :ref:`wheel distribution <binary-distribution-format>`."

#: ../source/specifications/index-hosted-attestations.rst:126
msgid ""
"``subject[0].digest`` **MUST** contain a SHA-256 digest. Other digests "
"**MAY** be present. The digests **MUST** be represented as hexadecimal "
"strings."
msgstr ""
"``subject[0].digest`` **МОЖНО** содержать дайджест SHA-256. Другие дайджесты "
"**МОГУТ** присутствовать. Дайджесты **МОГУТ** быть представлены в виде "
"шестнадцатеричных строк."

#: ../source/specifications/index-hosted-attestations.rst:128
msgid "The following ``predicateType`` values are supported:"
msgstr "Поддерживаются следующие значения ``predicateType``:"

#: ../source/specifications/index-hosted-attestations.rst:130
#, fuzzy
msgid ""
"`SLSA Provenance <https://slsa.dev/provenance/v1>`__: ``https://slsa.dev/"
"provenance/v1``"
msgstr ""
"`SLSA Provenance <https://slsa.dev/provenance/v1>`__: ``https://slsa.dev/"
"provenance/v1``"

#: ../source/specifications/index-hosted-attestations.rst:131
msgid ""
"`PyPI Publish Attestation <https://docs.pypi.org/attestations/publish/"
"v1>`__: ``https://docs.pypi.org/attestations/publish/v1``"
msgstr ""
"`PyPI Публикация аттестации <https://docs.pypi.org/attestations/publish/"
"v1>`__: `https://docs.pypi.org/attestations/publish/v1``"

#: ../source/specifications/index-hosted-attestations.rst:133
msgid ""
"The signature over this statement is constructed using the `v1 DSSE "
"signature protocol <https://github.com/secure-systems-lab/dsse/blob/v1.0.0/"
"protocol.md>`__, with a ``PAYLOAD_TYPE`` of ``application/vnd.in-toto+json`` "
"and a ``PAYLOAD_BODY`` of the JSON-encoded statement above. No other "
"``PAYLOAD_TYPE`` is permitted."
msgstr ""
"Подпись под этим утверждением построена с использованием протокола подписи "
"DSSE <https://github.com/secure-systems-lab/dsse/blob/v1.0.0/protocol."
"md>`__, с ``PAYLOAD_TYPE`` из ``application/vnd.in-toto+json`` и "
"``PAYLOAD_BODY`` из JSON-кодированного утверждения выше. Никакой другой "
"``PAYLOAD_TYPE`` не допускается."

#: ../source/specifications/index-hosted-attestations.rst:141
msgid "Provenance objects"
msgstr "Объекты, имеющие происхождение"

#: ../source/specifications/index-hosted-attestations.rst:143
msgid ""
"The index will serve uploaded attestations along with metadata that can "
"assist in verifying them in the form of JSON serialized objects."
msgstr ""
"Индекс будет обслуживать загруженные аттестации вместе с метаданными, "
"которые могут помочь в их проверке, в виде сериализованных объектов JSON."

#: ../source/specifications/index-hosted-attestations.rst:146
msgid ""
"These *provenance objects* will be available via both the Simple Index and "
"JSON-based Simple API as described above, and will have the following layout:"
msgstr ""
"Эти объекты *provenance* будут доступны как через Simple Index, так и через "
"JSON-based Simple API, как описано выше, и будут иметь следующий вид:"

#: ../source/specifications/index-hosted-attestations.rst:169
msgid "or, as pseudocode:"
msgstr "или, как псевдокод:"

#: ../source/specifications/index-hosted-attestations.rst:217
msgid ""
"``version`` is ``1``. Like attestation objects, provenance objects are "
"versioned, and this PEP only defines version ``1``."
msgstr ""
"``версия`` - ``1``. Как и объекты аттестации, объекты подтверждения имеют "
"версии, и в этом PEP определена только версия ``1``."

#: ../source/specifications/index-hosted-attestations.rst:219
msgid ""
"``attestation_bundles`` is a **required** JSON array, containing one or more "
"\"bundles\" of attestations. Each bundle corresponds to a signing identity "
"(such as a Trusted Publishing identity), and contains one or more "
"attestation objects."
msgstr ""
"``attestation_bundles`` - это **обязательный** массив JSON, содержащий один "
"или несколько \"пучков\" аттестаций. Каждый пакет соответствует "
"идентификатору подписи (например, идентификатору доверенной публикации) и "
"содержит один или несколько объектов аттестации."

#: ../source/specifications/index-hosted-attestations.rst:224
msgid ""
"As noted in the ``Publisher`` model, each ``AttestationBundle.publisher`` "
"object is specific to its Trusted Publisher but must include at minimum:"
msgstr ""
"Как отмечается в модели ``Издатель``, каждый объект ``AttestationBundle."
"publisher`` специфичен для своего Доверенного Издателя, но должен включать в "
"себя как минимум:"

#: ../source/specifications/index-hosted-attestations.rst:228
msgid ""
"A ``kind`` key, which **MUST** be a JSON string that uniquely identifies the "
"kind of Trusted Publisher."
msgstr ""
"Ключ ``kind``, который **МОЖЕТ** быть строкой JSON, уникально "
"идентифицирующей тип доверенного издателя."

#: ../source/specifications/index-hosted-attestations.rst:230
msgid ""
"A ``claims`` key, which **MUST** be a JSON object containing any context-"
"specific claims retained by the index during Trusted Publisher "
"authentication."
msgstr ""
"Ключ ``claims``, который **МОЖЕТ** быть JSON-объектом, содержащим любые "
"контекстно-специфические требования, сохраненные индексом во время "
"аутентификации Trusted Publisher."

#: ../source/specifications/index-hosted-attestations.rst:233
msgid "All other keys in the publisher object are publisher-specific."
msgstr ""
"Все остальные ключи в объекте publisher являются специфическими для издателя."

#: ../source/specifications/index-hosted-attestations.rst:235
msgid ""
"Each array of attestation objects is a superset of the ``attestations`` "
"array supplied by the uploaded through the ``attestations`` field at upload "
"time, as described in :ref:`upload-endpoint` and :ref:`changes-to-provenance-"
"objects`."
msgstr ""
"Каждый массив объектов аттестации является надмножеством массива "
"``аттестаций``, предоставленного загружаемым через поле ``аттестации`` во "
"время загрузки, как описано в :ref:`upload-endpoint` и :ref:`changes-to-"
"provenance-objects`."

#: ../source/specifications/index-hosted-attestations.rst:243
msgid "Changes to provenance objects"
msgstr "Изменить объекты подтверждения"

#: ../source/specifications/index-hosted-attestations.rst:245
msgid ""
"Provenance objects are *not* immutable, and may change over time. Reasons "
"for changes to the provenance object include but are not limited to:"
msgstr ""
"Объекты провенанса *не* неизменяемы и могут изменяться с течением времени. "
"Причины изменения объекта провенанса включают, но не ограничиваются ими:"

#: ../source/specifications/index-hosted-attestations.rst:248
msgid ""
"Addition of new attestations for a pre-existing signing identity: the index "
"**MAY** choose to allow additional attestations by pre-existing signing "
"identities, such as newer attestation versions for already uploaded files."
msgstr ""
"Добавление новых аттестаций для уже существующего идентификатора подписи: "
"индекс **МОЖЕТ** разрешить дополнительные аттестации для уже существующих "
"идентификаторов подписи, например, новые версии аттестаций для уже "
"загруженных файлов."

#: ../source/specifications/index-hosted-attestations.rst:253
msgid ""
"Addition of new signing identities and associated attestations: the index "
"**MAY** choose to support attestations from sources other than the file's "
"uploader, such as third-party auditors or the index itself. These "
"attestations may be performed asynchronously, requiring the index to insert "
"them into the provenance object *post facto*."
msgstr ""
"Добавление новых идентификаторов подписи и связанных с ними аттестаций: "
"индекс **МОЖЕТ** поддерживать аттестации из источников, отличных от "
"загрузчика файла, таких как сторонние аудиторы или сам индекс. Эти "
"аттестации могут выполняться асинхронно, требуя от индекса вставлять их в "
"объект провенанса *постфактум*."

#: ../source/specifications/index-hosted-attestations.rst:262
msgid "Attestation verification"
msgstr "Проверка аттестации"

#: ../source/specifications/index-hosted-attestations.rst:264
msgid ""
"Verifying an attestation object against a distribution file requires "
"verification of each of the following:"
msgstr ""
"Проверка объекта аттестации по файлу распространения требует проверки "
"каждого из следующих параметров:"

#: ../source/specifications/index-hosted-attestations.rst:267
msgid "``version`` is ``1``. The verifier **MUST** reject any other version."
msgstr ""
"``версия`` - ``1``. Верификатор **МОЖЕТ** отклонить любую другую версию."

#: ../source/specifications/index-hosted-attestations.rst:268
msgid ""
"``verification_material.certificate`` is a valid signing certificate, as "
"issued by an *a priori* trusted authority (such as a root of trust already "
"present within the verifying client)."
msgstr ""
"``verification_material.certificate`` - это действительный сертификат "
"подписи, выданный *априори* доверенным органом (например, корнем доверия, "
"который уже присутствует в проверяющем клиенте)."

#: ../source/specifications/index-hosted-attestations.rst:271
msgid ""
"``verification_material.certificate`` identifies an appropriate signing "
"subject, such as the machine identity of the Trusted Publisher that "
"published the package."
msgstr ""
"``verification_material.certificate`` идентифицирует соответствующий субъект "
"подписи, например, идентификатор машины доверенного издателя, "
"опубликовавшего пакет."

#: ../source/specifications/index-hosted-attestations.rst:274
msgid ""
"``envelope.statement`` is a valid in-toto v1 Statement, with a subject and "
"digest that **MUST** match the distribution's filename and contents. For the "
"distribution's filename, matching **MUST** be performed by parsing using the "
"appropriate source distribution or wheel filename format, as the statement's "
"subject may be equivalent but normalized."
msgstr ""
"``envelope.statement`` - это корректный in-toto v1 Statement, с темой и "
"дайджестом, которые **ДОЛЖНЫ** совпадать с именем и содержимым дистрибутива. "
"Для имени дистрибутива соответствие **ДОЛЖНО** быть выполнено путем разбора "
"с использованием соответствующего формата имени исходного дистрибутива или "
"колеса, так как тема заявления может быть эквивалентной, но нормализованной."

#: ../source/specifications/index-hosted-attestations.rst:279
msgid ""
"``envelope.signature`` is a valid signature for ``envelope.statement`` "
"corresponding to ``verification_material.certificate``, as reconstituted via "
"the `v1 DSSE signature protocol <https://github.com/secure-systems-lab/dsse/"
"blob/v1.0.0/protocol.md>`__."
msgstr ""
"``envelope.signature`` является действительной подписью для ``envelope."
"statement``, соответствующей ``verification_material.certificate``, как "
"восстановлено по протоколу подписи `v1 DSSE <https://github.com/secure-"
"systems-lab/dsse/blob/v1.0.0/protocol.md>`__."

#: ../source/specifications/index-hosted-attestations.rst:284
msgid ""
"In addition to the above required steps, a verifier **MAY** additionally "
"verify ``verification_material.transparency_entries`` on a policy basis, e."
"g. requiring at least one transparency log entry or a threshold of entries. "
"When verifying transparency entries, the verifier **MUST** confirm that the "
"inclusion time for each entry lies within the signing certificate's validity "
"period."
msgstr ""
"В дополнение к вышеперечисленным действиям верификатор **МОЖЕТ** "
"дополнительно проверять ``материал_верификации.записи_прозрачности`` на "
"основе политики, например, требуя по крайней мере одну запись журнала "
"прозрачности или пороговое количество записей. При проверке записей о "
"прозрачности верификатор **ДОЛЖЕН** подтвердить, что время включения каждой "
"записи находится в пределах срока действия сертификата подписи."

#: ../source/specifications/index-hosted-attestations.rst:293
msgid "Appendix: Data models for Transparency Log Entries"
msgstr "Приложение: Модели данных для записей журнала прозрачности"

#: ../source/specifications/index-hosted-attestations.rst:295
msgid ""
"This appendix contains pseudocoded data models for transparency log entries "
"in attestation objects. Each transparency log entry serves as a source of "
"signed inclusion time, and can be verified either online or offline."
msgstr ""
"Это приложение содержит псевдокодированные модели данных для записей журнала "
"прозрачности в объектах аттестации. Каждая запись журнала прозрачности "
"служит источником подписанного времени включения и может быть проверена как "
"онлайн, так и офлайн."

#: ../source/specifications/inline-script-metadata.rst:5
msgid "Inline script metadata"
msgstr "Встроенные метаданные сценария"

#: ../source/specifications/inline-script-metadata.rst:7
msgid ""
"This specification defines a metadata format that can be embedded in single-"
"file Python scripts to assist launchers, IDEs and other external tools which "
"may need to interact with such scripts."
msgstr ""
"Эта спецификация определяет формат метаданных, которые могут быть встроены в "
"однофайловые скрипты Python, чтобы помочь программам запуска, IDE и другим "
"внешним инструментам, которым может понадобиться взаимодействовать с такими "
"скриптами."

#: ../source/specifications/inline-script-metadata.rst:15
msgid ""
"This specification defines a metadata comment block format (loosely inspired "
"by `reStructuredText Directives`__)."
msgstr ""
"Эта спецификация определяет формат блока комментариев метаданных (в "
"значительной степени вдохновленный `reStructuredText Directives`__)."

#: ../source/specifications/inline-script-metadata.rst:20
msgid ""
"Any Python script may have top-level comment blocks that MUST start with the "
"line ``# /// TYPE`` where ``TYPE`` determines how to process the content. "
"That is: a single ``#``, followed by a single space, followed by three "
"forward slashes, followed by a single space, followed by the type of "
"metadata. Block MUST end with the line ``# ///``. That is: a single ``#``, "
"followed by a single space, followed by three forward slashes. The ``TYPE`` "
"MUST only consist of ASCII letters, numbers and hyphens."
msgstr ""
"Любой скрипт Python может иметь блоки комментариев верхнего уровня, которые "
"ДОЛЖНЫ начинаться со строки ``# /// TYPE``, где ``TYPE`` определяет, как "
"обрабатывать содержимое. То есть: один ``#``, затем один пробел, затем три "
"прямые косые черты, затем один пробел, затем тип метаданных. Блок ДОЛЖЕН "
"заканчиваться строкой ``# ///``. То есть: один ``#``, за которым следует "
"один пробел, а затем три прямые косые черты. ``TYPE`` ДОЛЖЕН состоять только "
"из букв ASCII, цифр и дефисов."

#: ../source/specifications/inline-script-metadata.rst:28
msgid ""
"Every line between these two lines (``# /// TYPE`` and ``# ///``) MUST be a "
"comment starting with ``#``. If there are characters after the ``#`` then "
"the first character MUST be a space. The embedded content is formed by "
"taking away the first two characters of each line if the second character is "
"a space, otherwise just the first character (which means the line consists "
"of only a single ``#``)."
msgstr ""
"Каждая строка между этими двумя строками (``# /// TYPE`` и ``# ///``) ДОЛЖНА "
"быть комментарием, начинающимся с ``#``. Если после ``#`` идут символы, то "
"первым символом должен быть пробел. Встроенное содержимое формируется путем "
"удаления первых двух символов каждой строки, если второй символ - пробел, в "
"противном случае - только первого символа (что означает, что строка состоит "
"только из одного ``#``)."

#: ../source/specifications/inline-script-metadata.rst:35
msgid ""
"Precedence for an ending line ``# ///`` is given when the next line is not a "
"valid embedded content line as described above. For example, the following "
"is a single fully valid block:"
msgstr ""
"Приоритет для завершающей строки ``# ///`` отдается в том случае, если "
"следующая строка не является допустимой строкой встроенного содержимого, как "
"описано выше. Например, ниже приведен один полностью допустимый блок:"

#: ../source/specifications/inline-script-metadata.rst:51
msgid ""
"A starting line MUST NOT be placed between another starting line and its "
"ending line. In such cases tools MAY produce an error. Unclosed blocks MUST "
"be ignored."
msgstr ""
"Начальная линия НЕ ДОЛЖНА располагаться между другой начальной и конечной "
"линиями. В таких случаях инструменты МОГУТ выдать ошибку. Незакрытые блоки "
"ДОЛЖНЫ игнорироваться."

#: ../source/specifications/inline-script-metadata.rst:54
msgid ""
"When there are multiple comment blocks of the same ``TYPE`` defined, tools "
"MUST produce an error."
msgstr ""
"Если определено несколько блоков комментариев одного и того же ``типа``, "
"инструменты ДОЛЖНЫ выдать ошибку."

#: ../source/specifications/inline-script-metadata.rst:57
msgid ""
"Tools reading embedded metadata MAY respect the standard Python encoding "
"declaration. If they choose not to do so, they MUST process the file as "
"UTF-8."
msgstr ""
"Средства чтения встроенных метаданных МОГУТ соблюдать стандартное объявление "
"кодировки Python. Если они этого не делают, они ДОЛЖНЫ обрабатывать файл в "
"кодировке UTF-8."

#: ../source/specifications/inline-script-metadata.rst:60
msgid ""
"This is the canonical regular expression that MAY be used to parse the "
"metadata:"
msgstr ""
"Это каноническое регулярное выражение, которое МОЖЕТ быть использовано для "
"разбора метаданных:"

#: ../source/specifications/inline-script-metadata.rst:67
msgid ""
"In circumstances where there is a discrepancy between the text specification "
"and the regular expression, the text specification takes precedence."
msgstr ""
"В случае расхождения между текстовой спецификацией и регулярным выражением "
"приоритет отдается текстовой спецификации."

#: ../source/specifications/inline-script-metadata.rst:70
msgid ""
"Tools MUST NOT read from metadata blocks with types that have not been "
"standardized by this specification."
msgstr ""
"Инструменты НЕ ДОЛЖНЫ читать из блоков метаданных с типами, которые не были "
"стандартизированы данной спецификацией."

#: ../source/specifications/inline-script-metadata.rst:74
msgid "script type"
msgstr "тип скрипта"

#: ../source/specifications/inline-script-metadata.rst:76
msgid ""
"The first type of metadata block is named ``script``, which contains script "
"metadata (dependency data and tool configuration)."
msgstr ""
"Первый тип блока метаданных называется ``script`, он содержит метаданные "
"сценария (данные о зависимостях и конфигурации инструментов)."

#: ../source/specifications/inline-script-metadata.rst:79
msgid ""
"This document MAY include the top-level fields ``dependencies`` and "
"``requires-python``, and MAY optionally include a ``[tool]`` table."
msgstr ""
"Этот документ МОЖЕТ включать поля верхнего уровня ``зависимости`` и "
"``требования-python``, и МОЖЕТ опционально включать таблицу ``[инструмент]``."

#: ../source/specifications/inline-script-metadata.rst:82
msgid ""
"The ``[tool]`` table MAY be used by any tool, script runner or otherwise, to "
"configure behavior. It has the same semantics as the :ref:`[tool] table in "
"pyproject.toml <pyproject-tool-table>`."
msgstr ""
"Таблица ``[tool]`` МОЖЕТ использоваться любым инструментом, исполнителем "
"скриптов или другим, для настройки поведения. Она имеет ту же семантику, что "
"и таблица :ref:`[tool] в pyproject.toml <pyproject-tool-table>`."

#: ../source/specifications/inline-script-metadata.rst:86
msgid "The top-level fields are:"
msgstr "К полям верхнего уровня относятся:"

#: ../source/specifications/inline-script-metadata.rst:88
msgid ""
"``dependencies``: A list of strings that specifies the runtime dependencies "
"of the script. Each entry MUST be a valid :ref:`dependency specifier "
"<dependency-specifiers>`."
msgstr ""
"``зависимости``: Список строк, определяющих зависимости скрипта от времени "
"выполнения. Каждая запись ДОЛЖНА быть действительным :ref:`спецификатором "
"зависимости <dependency-specifiers>`."

#: ../source/specifications/inline-script-metadata.rst:91
msgid ""
"``requires-python``: A string that specifies the Python version(s) with "
"which the script is compatible. The value of this field MUST be a valid :ref:"
"`version specifier <version-specifiers>`."
msgstr ""
"``requires-python``: Строка, указывающая версию(и) Python, с которой(ыми) "
"совместим(ы) скрипт. Значение этого поля ДОЛЖНО быть действительным :ref:"
"`спецификатором версии <version-specifiers>`."

#: ../source/specifications/inline-script-metadata.rst:95
msgid ""
"Script runners MUST error if the specified ``dependencies`` cannot be "
"provided. Script runners SHOULD error if no version of Python that satisfies "
"the specified ``requires-python`` can be provided."
msgstr ""
"Программы запуска сценариев ДОЛЖНЫ ошибаться, если указанные ``зависимости`` "
"не могут быть предоставлены. Программы запуска сценариев ДОЛЖНЫ ошибаться, "
"если не может быть предоставлена версия Python, удовлетворяющая указанному "
"``требованию-python``."

#: ../source/specifications/inline-script-metadata.rst:102
msgid "The following is an example of a script with embedded metadata:"
msgstr "Ниже приведен пример сценария со встроенными метаданными:"

#: ../source/specifications/inline-script-metadata.rst:125
msgid ""
"The following is an example of how to read the metadata on Python 3.11 or "
"higher."
msgstr ""
"Ниже приведен пример того, как читать метаданные на Python 3.11 и выше."

#: ../source/specifications/inline-script-metadata.rst:151
msgid ""
"Often tools will edit dependencies like package managers or dependency "
"update automation in CI. The following is a crude example of modifying the "
"content using the ``tomlkit`` library__."
msgstr ""
"Часто для редактирования зависимостей используются такие инструменты, как "
"менеджеры пакетов или автоматизация обновления зависимостей в CI. Ниже "
"приведен пример изменения содержимого с помощью библиотеки ``tomlkit``."

#: ../source/specifications/inline-script-metadata.rst:182
msgid ""
"Note that this example used a library that preserves TOML formatting. This "
"is not a requirement for editing by any means but rather is a \"nice to "
"have\" feature."
msgstr ""
"Обратите внимание, что в этом примере использовалась библиотека, сохраняющая "
"форматирование TOML. Это ни в коем случае не является обязательным условием "
"редактирования, а скорее \"приятная возможность\"."

#: ../source/specifications/inline-script-metadata.rst:186
msgid ""
"The following is an example of how to read a stream of arbitrary metadata "
"blocks."
msgstr "Ниже приведен пример чтения потока произвольных блоков метаданных."

#: ../source/specifications/inline-script-metadata.rst:205
#: ../source/specifications/simple-repository-api.rst:914
msgid "Recommendations"
msgstr "Рекомендации"

#: ../source/specifications/inline-script-metadata.rst:207
msgid ""
"Tools that support managing different versions of Python should attempt to "
"use the highest available version of Python that is compatible with the "
"script's ``requires-python`` metadata, if defined."
msgstr ""
"Инструменты, поддерживающие управление различными версиями Python, должны "
"пытаться использовать самую высокую доступную версию Python, совместимую с "
"метаданными скрипта ``requires-python``, если они определены."

#: ../source/specifications/inline-script-metadata.rst:215
msgid ""
"October 2023: This specification was conditionally approved through :pep:"
"`723`."
msgstr ""
"Октябрь 2023 года: Эта спецификация была условно утверждена через :pep:`723`."

#: ../source/specifications/inline-script-metadata.rst:216
msgid ""
"January 2024: Through amendments to :pep:`723`, the ``pyproject`` metadata "
"block type was renamed to ``script``, and the ``[run]`` table was dropped, "
"making the ``dependencies`` and ``requires-python`` keys top-level. "
"Additionally, the specification is no longer provisional."
msgstr ""
"Январь 2024 года: Благодаря поправкам к :pep:`723`, тип блока метаданных "
"``pyproject`` был переименован в ``скрипт``, а таблица ``[ запускать]`` была "
"удалена, сделав ключи ``зависимости`` и ``запросы-python`` ключами верхнего "
"уровня. Кроме того, спецификация больше не является предварительной."

#: ../source/specifications/license-expression.rst:5
msgid ""
":pep:`639` defined a new :ref:`pyproject.toml's license <pyproject-toml-"
"license>` value and added a corresponding :ref:`core metadata License-"
"Expression field <core-metadata-license-expression>`. This specification "
"defines which license expressions are acceptable."
msgstr ""

#: ../source/specifications/license-expression.rst:14
msgid ""
"License can be defined as a text string that is a valid SPDX :term:`license "
"expression <License Expression>`, as documented in the `SPDX specification "
"<spdxpression_>`__, either Version 2.2 or a later compatible version."
msgstr ""

#: ../source/specifications/license-expression.rst:19
msgid "A license expression can use the following license identifiers:"
msgstr ""

#: ../source/specifications/license-expression.rst:21
msgid ""
"Any SPDX-listed license short-form identifiers that are published in the "
"`SPDX License List <spdxlist_>`__, version 3.17 or any later compatible "
"version."
msgstr ""

#: ../source/specifications/license-expression.rst:25
msgid ""
"The custom ``LicenseRef-[idstring]`` string(s), where ``[idstring]`` is a "
"unique string containing letters, numbers, ``.`` and/or ``-``, to identify "
"licenses that are not included in the SPDX license list. The custom "
"identifiers must follow the SPDX specification, `clause 10.1 "
"<spdxcustom_>`__ of the given specification version."
msgstr ""

#: ../source/specifications/license-expression.rst:32
#, fuzzy
#| msgid "Some additional examples of valid ``License-Expression`` values:"
msgid "Examples of valid license expressions:"
msgstr ""
"Некоторые дополнительные примеры допустимых значений ``License-Expression``:"

#: ../source/specifications/license-expression.rst:45
#, fuzzy
#| msgid "Some additional examples of valid ``License-Expression`` values:"
msgid "Examples of invalid license expressions:"
msgstr ""
"Некоторые дополнительные примеры допустимых значений ``License-Expression``:"

#: ../source/specifications/name-normalization.rst:3
msgid "Names and normalization"
msgstr "Имена и нормализация"

#: ../source/specifications/name-normalization.rst:5
msgid ""
"This specification defines the format that names for packages and extras are "
"required to follow. It also describes how to normalize them, which should be "
"done before lookups and comparisons."
msgstr ""
"Эта спецификация определяет формат, которому должны соответствовать имена "
"пакетов и дополнений. Она также описывает, как их нормализовать, что следует "
"делать перед поиском и сравнением."

#: ../source/specifications/name-normalization.rst:13
msgid "Name format"
msgstr "Формат имени"

#: ../source/specifications/name-normalization.rst:15
msgid ""
"A valid name consists only of ASCII letters and numbers, period, underscore "
"and hyphen. It must start and end with a letter or number. This means that "
"valid project names are limited to those which match the following regex "
"(run with :py:data:`re.IGNORECASE`)::"
msgstr ""
"Правильное имя состоит только из букв и цифр ASCII, точки, подчеркивания и "
"дефиса. Оно должно начинаться и заканчиваться буквой или цифрой. Это "
"означает, что допустимые имена проектов ограничены теми, которые "
"соответствуют следующему regex (выполняется с :py:data:`re.IGNORECASE`)::"

#: ../source/specifications/name-normalization.rst:26
msgid "Name normalization"
msgstr "Нормализация имен"

#: ../source/specifications/name-normalization.rst:28
msgid ""
"The name should be lowercased with all runs of the characters ``.``, ``-``, "
"or ``_`` replaced with a single ``-`` character. This can be implemented in "
"Python with the re module:"
msgstr ""
"Имя должно быть написано в нижнем регистре с заменой всех пробелов символов "
"``.``, ``-`` или ``_`` на один символ ``-``. Это можно реализовать в Python "
"с помощью модуля re:"

#: ../source/specifications/name-normalization.rst:39
msgid "This means that the following names are all equivalent:"
msgstr "Это означает, что все следующие имена эквивалентны:"

#: ../source/specifications/name-normalization.rst:41
msgid "``friendly-bard`` (normalized form)"
msgstr "``friendly-bard`` (нормализованная форма)"

#: ../source/specifications/name-normalization.rst:42
msgid "``Friendly-Bard``"
msgstr "``Friendly-Bard``"

#: ../source/specifications/name-normalization.rst:43
msgid "``FRIENDLY-BARD``"
msgstr "``FRIENDLY-BARD``"

#: ../source/specifications/name-normalization.rst:44
msgid "``friendly.bard``"
msgstr "``friendly.bard``"

#: ../source/specifications/name-normalization.rst:45
msgid "``friendly_bard``"
msgstr "``friendly_bard``"

#: ../source/specifications/name-normalization.rst:46
msgid "``friendly--bard``"
msgstr "``friendly--bard``"

#: ../source/specifications/name-normalization.rst:47
msgid ""
"``FrIeNdLy-._.-bArD`` (a *terrible* way to write a name, but it is valid)"
msgstr ""
"``FrIeNdLy-._.-bArD`` (это *ужасный* способ написания имени, но он "
"действителен)"

#: ../source/specifications/name-normalization.rst:52
msgid ""
"September 2015: The specification of name normalized was approved through :"
"pep:`503 <503#normalized-names>`."
msgstr ""
"Сентябрь 2015 г: Спецификация имени нормализованные была одобрена через :pep:"
"`503 <503#нормализованные названия>`."

#: ../source/specifications/name-normalization.rst:54
msgid ""
"November 2015: The specification of valid names was approved through :pep:"
"`508 <508#names>`."
msgstr ""
"Ноябрь 2015 г: Спецификация допустимых имен была одобрена через :pep:`508 "
"<508#names>`."

#: ../source/specifications/platform-compatibility-tags.rst:6
msgid "Platform compatibility tags"
msgstr "Теги совместимости платформ"

#: ../source/specifications/platform-compatibility-tags.rst:8
msgid ""
"Platform compatibility tags allow build tools to mark distributions as being "
"compatible with specific platforms, and allows installers to understand "
"which distributions are compatible with the system they are running on."
msgstr ""
"Метки совместимости с платформами позволяют инструментам сборки помечать "
"дистрибутивы как совместимые с определенными платформами, а установщикам - "
"понимать, какие дистрибутивы совместимы с системой, на которой они работают."

#: ../source/specifications/platform-compatibility-tags.rst:16
msgid "The tag format is ``{python tag}-{abi tag}-{platform tag}``."
msgstr "Формат тегов - ``{python tag}-{abi tag}-{platform tag}``."

#: ../source/specifications/platform-compatibility-tags.rst:18
msgid "python tag"
msgstr "метка python"

#: ../source/specifications/platform-compatibility-tags.rst:19
msgid "'py27', 'cp33'"
msgstr "'py27', 'cp33'"

#: ../source/specifications/platform-compatibility-tags.rst:21
msgid "'cp32dmu', 'none'"
msgstr "'cp32dmu', 'none'"

#: ../source/specifications/platform-compatibility-tags.rst:23
msgid "'linux_x86_64', 'any'"
msgstr "'linux_x86_64', 'any'"

#: ../source/specifications/platform-compatibility-tags.rst:25
msgid ""
"For example, the tag ``py27-none-any`` indicates compatibility with Python "
"2.7 (any Python 2.7 implementation) with no abi requirement, on any platform."
msgstr ""
"Например, тег ``py27-none-any`` указывает на совместимость с Python 2.7 "
"(любой реализацией Python 2.7) без требования abi, на любой платформе."

#: ../source/specifications/platform-compatibility-tags.rst:28
msgid ""
"The ``wheel`` built package format includes these tags in its filenames, of "
"the form ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl``. Other package formats may have their own conventions."
msgstr ""
"Формат собранных пакетов ``wheel`` включает эти теги в имена файлов, имеющие "
"вид ``{distribution}-{version}(-{build tag})?-{python tag}-{abitag}-"
"{platform tag}.whl``. Другие форматы пакетов могут иметь свои собственные "
"соглашения."

#: ../source/specifications/platform-compatibility-tags.rst:33
msgid "Any potential spaces in any tag should be replaced with ``_``."
msgstr ""
"Любые потенциальные пробелы в любом теге должны быть заменены на ``_``."

#: ../source/specifications/platform-compatibility-tags.rst:37
msgid "Python Tag"
msgstr "Метка Python"

#: ../source/specifications/platform-compatibility-tags.rst:39
msgid ""
"The Python tag indicates the implementation and version required by a "
"distribution.  Major implementations have abbreviated codes, initially:"
msgstr ""
"Метка Python указывает на реализацию и версию, требуемую дистрибутивом.  "
"Основные реализации изначально имеют сокращенные коды:"

#: ../source/specifications/platform-compatibility-tags.rst:42
msgid "py: Generic Python (does not require implementation-specific features)"
msgstr "py: Generic Python (не требует специфических особенностей реализации)"

#: ../source/specifications/platform-compatibility-tags.rst:43
msgid "cp: CPython"
msgstr "cp: CPython"

#: ../source/specifications/platform-compatibility-tags.rst:44
msgid "ip: IronPython"
msgstr "ip: IronPython"

#: ../source/specifications/platform-compatibility-tags.rst:45
msgid "pp: PyPy"
msgstr "pp: PyPy"

#: ../source/specifications/platform-compatibility-tags.rst:46
msgid "jy: Jython"
msgstr "jy: Jython"

#: ../source/specifications/platform-compatibility-tags.rst:48
msgid ""
"Other Python implementations should use :py:data:`sys.implementation.name "
"<sys.implementation>`."
msgstr ""
"Другие реализации Python должны использовать :py: данные:`sys."
"implementation. название <sys.implementation>`."

#: ../source/specifications/platform-compatibility-tags.rst:50
msgid ""
"The version is ``py_version_nodot``.  CPython gets away with no dot, but if "
"one is needed the underscore ``_`` is used instead.  PyPy should probably "
"use its own versions here ``pp18``, ``pp19``."
msgstr ""
"Версия - это ``py_version_nodot``.  CPython обходится без точки, но если она "
"необходима, то вместо нее используется знак подчеркивания ``_``.  PyPy, "
"вероятно, должен использовать здесь свои собственные версии ``pp18``, "
"``pp19``."

#: ../source/specifications/platform-compatibility-tags.rst:54
msgid ""
"The version can be just the major version ``2`` or ``3`` ``py2``, ``py3`` "
"for many pure-Python distributions."
msgstr ""
"Версия может быть просто основной версией ``2`` или ``3`` ``py2``, ``py3`` "
"для многих дистрибутивов pure-Python."

#: ../source/specifications/platform-compatibility-tags.rst:57
msgid ""
"Importantly, major-version-only tags like ``py2`` and ``py3`` are not "
"shorthand for ``py20`` and ``py30``.  Instead, these tags mean the packager "
"intentionally released a cross-version-compatible distribution."
msgstr ""
"Важно отметить, что такие теги, как ``py2`` и ``py3``, относящиеся только к "
"мажорным версиям, не являются сокращением для ``py20`` и ``py30``.  "
"Напротив, эти метки означают, что упаковщик намеренно выпустил кросс-"
"версионный совместимый дистрибутив."

#: ../source/specifications/platform-compatibility-tags.rst:61
msgid ""
"A single-source Python 2/3 compatible distribution can use the compound tag "
"``py2.py3``.  See `Compressed Tag Sets`_, below."
msgstr ""
"Дистрибутив с одним источником, совместимый с Python 2/3, может использовать "
"составной тег ``py2.py3``.  См. раздел ``Сжатые наборы тегов``, ниже."

#: ../source/specifications/platform-compatibility-tags.rst:66
msgid "ABI Tag"
msgstr "Тег ABI"

#: ../source/specifications/platform-compatibility-tags.rst:68
msgid ""
"The ABI tag indicates which Python ABI is required by any included extension "
"modules.  For implementation-specific ABIs, the implementation is "
"abbreviated in the same way as the Python Tag, e.g. ``cp33d`` would be the "
"CPython 3.3 ABI with debugging."
msgstr ""
"Метка ABI указывает, какой ABI Python требуется для всех включенных модулей "
"расширения.  Для ABI, специфичных для конкретной реализации, реализация "
"сокращается так же, как и тег Python, например, ``cp33d`` будет означать "
"CPython 3.3 ABI с отладкой."

#: ../source/specifications/platform-compatibility-tags.rst:73
msgid "The CPython stable ABI is ``abi3`` as in the shared library suffix."
msgstr ""
"Стабильный ABI CPython - ``abi3``, как и суффикс разделяемой библиотеки."

#: ../source/specifications/platform-compatibility-tags.rst:75
msgid ""
"Implementations with a very unstable ABI may use the first 6 bytes (as 8 "
"base64-encoded characters) of the SHA-256 hash of their source code revision "
"and compiler flags, etc, but will probably not have a great need to "
"distribute binary distributions. Each implementation's community may decide "
"how to best use the ABI tag."
msgstr ""
"Реализации с очень нестабильным ABI могут использовать первые 6 байт (как 8 "
"символов в base64-кодировке) SHA-256 хэша ревизии исходного кода, флаги "
"компилятора и т. д., но, вероятно, не будут испытывать большой потребности в "
"распространении бинарных дистрибутивов. Сообщество каждой реализации может "
"решать, как лучше использовать метку ABI."

#: ../source/specifications/platform-compatibility-tags.rst:83
msgid "Platform Tag"
msgstr "Метка платформы"

#: ../source/specifications/platform-compatibility-tags.rst:86
msgid "Basic platform tags"
msgstr "Базовые теги платформы"

#: ../source/specifications/platform-compatibility-tags.rst:88
msgid ""
"In its simplest form, the platform tag is :py:func:`sysconfig."
"get_platform()` with all hyphens ``-`` and periods ``.`` replaced with "
"underscore ``_``. Until the removal of :ref:`distutils` in Python 3.12, this "
"was ``distutils.util.get_platform()``. For example:"
msgstr ""
"В своей простейшей форме тег платформы - это :py:func:`sysconfig."
"get_platform()`` со всеми дефисами ``-`` и периодами ``.``, замененными на "
"подчеркивание ``_``. До удаления :ref:`distutils` в Python 3.12, это было "
"``distutils.util.get_platform()``. Например:"

#: ../source/specifications/platform-compatibility-tags.rst:93
msgid "win32"
msgstr "win32"

#: ../source/specifications/platform-compatibility-tags.rst:94
msgid "linux_i386"
msgstr "linux_i386"

#: ../source/specifications/platform-compatibility-tags.rst:95
msgid "linux_x86_64"
msgstr "linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:101
msgid "``manylinux``"
msgstr "``manylinux``"

#: ../source/specifications/platform-compatibility-tags.rst:103
msgid ""
"The simple scheme above is insufficient for public distribution of wheel "
"files to Linux platforms, due to the large ecosystem of Linux platforms and "
"subtle differences between them."
msgstr ""
"Простая схема, описанная выше, недостаточна для публичного распространения "
"файлов wheel на платформах Linux из-за большой экосистемы платформ Linux и "
"тонких различий между ними."

#: ../source/specifications/platform-compatibility-tags.rst:107
msgid ""
"Instead, for those platforms, the ``manylinux`` standard represents a common "
"subset of Linux platforms, and allows building wheels tagged with the "
"``manylinux`` platform tag which can be used across most common Linux "
"distributions."
msgstr ""
"Вместо этого, для этих платформ стандарт ``manylinux`` представляет общее "
"подмножество платформ Linux и позволяет создавать колеса, помеченные тегом "
"платформы ``manylinux``, которые могут быть использованы в большинстве "
"распространенных дистрибутивов Linux."

#: ../source/specifications/platform-compatibility-tags.rst:112
msgid ""
"The current standard is the future-proof :file:`manylinux_{x}_{y}` standard. "
"It defines tags of the form :file:`manylinux_{x}_{y}_{arch}`, where ``x`` "
"and ``y`` are glibc major and minor versions supported (e.g. "
"``manylinux_2_24_xxx`` should work on any distro using glibc 2.24+), and "
"``arch`` is the architecture, matching the value of :py:func:`sysconfig."
"get_platform()` on the system as in the \"simple\" form above."
msgstr ""
"Текущий стандарт - это защищенный от будущего стандарт :file:`manylinux_{x}"
"_{y}`. Он определяет теги вида :file:`manylinux_{x}_{y}_{arch}`, где ``x`` и "
"``y`` - поддерживаемые версии glibc major и minor (например, "
"``manylinux_2_24_xxx`` должен работать на любом дистрибутиве, использующем "
"glibc 2.24+), а ``arch`` - архитектура, соответствующая значению :py:func:"
"`sysconfig.get_platform()` на системе, как в \"простой\" форме выше."

#: ../source/specifications/platform-compatibility-tags.rst:118
msgid ""
"The following older tags are still supported for backward compatibility:"
msgstr ""
"Следующие старые теги по-прежнему поддерживаются для обратной совместимости:"

#: ../source/specifications/platform-compatibility-tags.rst:120
msgid ""
"``manylinux1`` supports glibc 2.5 on ``x86_64`` and ``i686`` architectures."
msgstr ""
"``manylinux1`` поддерживает glibc 2.5 на архитектурах ``x86_64`` и ``i686``."

#: ../source/specifications/platform-compatibility-tags.rst:121
msgid "``manylinux2010`` supports glibc 2.12 on ``x86_64`` and ``i686``."
msgstr "``manylinux2010`` поддерживает glibc 2.12 на ``x86_64`` и ``i686``."

#: ../source/specifications/platform-compatibility-tags.rst:122
msgid ""
"``manylinux2014`` supports glibc 2.17 on ``x86_64``, ``i686``, ``aarch64``, "
"``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``."
msgstr ""
"``manylinux2014`` поддерживает glibc 2.17 на ``x86_64``, ``i686``, "
"``aarch64``, ``armv7l``, ``ppc64``, ``ppc64le``, и ``390x``."

#: ../source/specifications/platform-compatibility-tags.rst:125
msgid ""
"In general, distributions built for older versions of the specification are "
"forwards-compatible (meaning that ``manylinux1`` distributions should "
"continue to work on modern systems) but not backwards-compatible (meaning "
"that ``manylinux2010`` distributions are not expected to work on platforms "
"that existed before 2010)."
msgstr ""
"В целом, дистрибутивы, созданные для старых версий спецификации, являются "
"совместимыми вперед (то есть дистрибутивы ``manylinux1`` должны продолжать "
"работать на современных системах), но не совместимыми назад (то есть "
"дистрибутивы ``manylinux2010`` не должны работать на платформах, "
"существовавших до 2010 года)."

#: ../source/specifications/platform-compatibility-tags.rst:131
msgid ""
"Package maintainers should attempt to target the most compatible "
"specification possible, with the caveat that the provided build environment "
"for ``manylinux1`` and ``manylinux2010`` have reached end-of-life meaning "
"that these images will no longer receive security updates."
msgstr ""
"Сопровождающие пакеты должны стараться использовать максимально совместимую "
"спецификацию, с оговоркой, что предоставленная среда сборки для "
"``manylinux1`` и ``manylinux2010`` уже отжила свой век, а значит, эти образы "
"больше не будут получать обновления безопасности."

#: ../source/specifications/platform-compatibility-tags.rst:136
msgid ""
"The following table shows the minimum versions of relevant projects to "
"support the various ``manylinux`` standards:"
msgstr ""
"В следующей таблице приведены минимальные версии соответствующих проектов "
"для поддержки различных стандартов ``manylinux``:"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "Tool"
msgstr "Инструмент"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux1``"
msgstr "``manylinux1``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux2010``"
msgstr "``manylinux2010``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux2014``"
msgstr "``manylinux2014``"

#: ../source/specifications/platform-compatibility-tags.rst:140
msgid "``manylinux_x_y``"
msgstr "``manylinux_x_y``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=8.1.0``"
msgstr "``>=8.1.0``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=19.0``"
msgstr "``>=19.0``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=19.3``"
msgstr "``>=19.3``"

#: ../source/specifications/platform-compatibility-tags.rst:142
msgid "``>=20.3``"
msgstr "``>=20.3``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "auditwheel"
msgstr "auditwheel"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=1.0.0``"
msgstr "``>=1.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=2.0.0``"
msgstr "``>=2.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=3.0.0``"
msgstr "``>=3.0.0``"

#: ../source/specifications/platform-compatibility-tags.rst:143
msgid "``>=3.3.0`` [#]_"
msgstr "``>=3.3.0`` [#]_"

#: ../source/specifications/platform-compatibility-tags.rst:146
msgid "Only support for ``manylinux_2_24`` has been added in auditwheel 3.3.0"
msgstr "В auditwheel 3.3.0 добавлена только поддержка ``manylinux_2_24``"

#: ../source/specifications/platform-compatibility-tags.rst:150
msgid "``musllinux``"
msgstr "``musllinux``"

#: ../source/specifications/platform-compatibility-tags.rst:152
#, fuzzy
#| msgid ""
#| "The ``musllinux`` family of tags is similar to ``manylinux``, but for "
#| "Linux platforms that use the musl_ libc rather than glibc (a prime "
#| "example being Alpine Linux). The schema is :file:`musllinux_{x}_{y}_{arch}"
#| "``, supporting musl ``x.y`` and higher on the architecture ``arch``."
msgid ""
"The ``musllinux`` family of tags is similar to ``manylinux``, but for Linux "
"platforms that use the musl_ libc rather than glibc (a prime example being "
"Alpine Linux). The schema is :file:`musllinux_{x}_{y}_{arch}`, supporting "
"musl ``x.y`` and higher on the architecture ``arch``."
msgstr ""
"Семейство тегов ``musllinux`` аналогично ``manylinux``, но для Linux-"
"платформ, использующих не glibc, а musl_ libc (яркий пример - Alpine Linux). "
"Схема :file:`musllinux_{x}_{y}_{arch}``, поддерживающая musl ``x.y`` и выше "
"на архитектуре ``arch``."

#: ../source/specifications/platform-compatibility-tags.rst:157
msgid ""
"The musl version values can be obtained by executing the musl libc shared "
"library the Python interpreter is currently running on, and parsing the "
"output:"
msgstr ""
"Значения версий musl можно получить, выполнив команду musl libc shared "
"library, на которой в данный момент работает интерпретатор Python, и "
"разобрав полученный результат:"

#: ../source/specifications/platform-compatibility-tags.rst:188
msgid ""
"There are currently two possible ways to find the musl library’s location "
"that a Python interpreter is running on, either with the system ldd_ "
"command, or by parsing the ``PT_INTERP`` section’s value from the "
"executable’s ELF_ header."
msgstr ""
"В настоящее время существует два способа найти местоположение библиотеки "
"musl, на котором запущен интерпретатор Python: либо с помощью системной "
"команды ldd_, либо путем разбора значения секции ``PT_INTERP`` из заголовка "
"ELF_ исполняемого файла."

#: ../source/specifications/platform-compatibility-tags.rst:197
msgid ""
"macOS uses the ``macosx`` family of tags (the ``x`` suffix is a historical "
"artefact of Apple's official macOS naming scheme). The schema for "
"compatibility tags is :file:`macosx_{x}_{y}_{arch}`, indicating that the "
"wheel is compatible with macOS ``x.y`` or later on the architecture ``arch``."
msgstr ""
"В macOS используется семейство тегов ``macosx`` (суффикс ``x`` является "
"историческим артефактом официальной схемы именования macOS от Apple). Схема "
"тегов совместимости - :file:`macosx_{x}_{y}_{arch}`, указывающая на то, что "
"колесо совместимо с macOS ``x.y`` или более поздними версиями на архитектуре "
"``arch``."

#: ../source/specifications/platform-compatibility-tags.rst:202
msgid ""
"The values of ``x`` and ``y`` correspond to the major and minor version "
"number of the macOS release, respectively. They must both be positive "
"integers, with the ``x`` value being ``>= 10``. The version number always "
"includes a major *and* minor version, even if Apple's official version "
"numbering only refers to the major value. For example, ``macosx_11_0_arm64`` "
"indicates compatibility with macOS 11 or later."
msgstr ""
"Значения ``x`` и ``y`` соответствуют мажорному и минорному номеру версии "
"выпуска macOS, соответственно. Оба они должны быть положительными целыми "
"числами, причем значение ``x`` должно быть ``>= 10``. Номер версии всегда "
"включает в себя мажорную *и* минорную версии, даже если официальная "
"нумерация версий Apple ссылается только на мажорное значение. Например, "
"``macosx_11_0_arm64`` указывает на совместимость с macOS 11 или более "
"поздней версией."

#: ../source/specifications/platform-compatibility-tags.rst:209
msgid ""
"macOS binaries can be compiled for a single architecture, or can include "
"support for multiple architectures in the same binary (sometimes called "
"\"fat\" binaries). To indicate support for a single architecture, the value "
"of ``arch`` must match the value of :py:func:`platform.machine()` on the "
"system. To indicate support multiple architectures, the ``arch`` tag should "
"be an identifier from the following list that describes the set of supported "
"architectures:"
msgstr ""
"Двоичные файлы macOS могут быть скомпилированы для одной архитектуры, а "
"могут включать поддержку нескольких архитектур в одном двоичном файле "
"(иногда их называют \"толстыми\" двоичными файлами). Чтобы указать на "
"поддержку одной архитектуры, значение ``arch`` должно совпадать со "
"значением :py:func:`platform.machine()` в системе. Чтобы указать на "
"поддержку нескольких архитектур, тег ``arch`` должен быть идентификатором из "
"следующего списка, описывающего набор поддерживаемых архитектур:"

#: ../source/specifications/platform-compatibility-tags.rst:217
#, fuzzy
msgid "``arch``"
msgstr "``arch``"

#: ../source/specifications/platform-compatibility-tags.rst:217
msgid "Architectures supported"
msgstr "Поддержка архитектуры"

#: ../source/specifications/platform-compatibility-tags.rst:219
msgid "``universal2``"
msgstr "``универсальный2``"

#: ../source/specifications/platform-compatibility-tags.rst:219
#, fuzzy
#| msgid "``x86_64``"
msgid "``arm64``, ``x86_64``"
msgstr "``arm64``, ``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:220
msgid "``universal``"
msgstr "``универсальный``"

#: ../source/specifications/platform-compatibility-tags.rst:220
#, fuzzy
msgid "``i386``, ``ppc``, ``ppc64``, ``x86_64``"
msgstr "``i386``, ``ppc``, ``ppc64``, ``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:221
#, fuzzy
#| msgid "``install``"
msgid "``intel``"
msgstr "``intel``"

#: ../source/specifications/platform-compatibility-tags.rst:221
#, fuzzy
#| msgid "``x86_64``"
msgid "``i386``, ``x86_64``"
msgstr "``i386``, ``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:222
#, fuzzy
msgid "``fat``"
msgstr "``fat``"

#: ../source/specifications/platform-compatibility-tags.rst:222
#, fuzzy
#| msgid "``3.4``, ``2.7``"
msgid "``i386``, ``ppc``"
msgstr "``i386``, ``ppc``"

#: ../source/specifications/platform-compatibility-tags.rst:223
#, fuzzy
msgid "``fat3``"
msgstr "``fat3``"

#: ../source/specifications/platform-compatibility-tags.rst:223
#, fuzzy
msgid "``i386``, ``ppc``, ``x86_64``"
msgstr "``i386``, ``ppc``, ``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:224
#, fuzzy
#| msgid "``x86_64``"
msgid "``fat64``"
msgstr "``fat64``"

#: ../source/specifications/platform-compatibility-tags.rst:224
#, fuzzy
#| msgid "``x86_64``"
msgid "``ppc64``, ``x86_64``"
msgstr "``ppc64``, ``x86_64``"

#: ../source/specifications/platform-compatibility-tags.rst:227
msgid ""
"The minimum supported macOS version may also be constrained by architecture. "
"For example, macOS 11 (Big Sur) was the first release to support arm64. "
"These additional constraints are enforced transparently by the macOS "
"compilation toolchain when building binaries that support multiple "
"architectures."
msgstr ""
"Минимальная поддерживаемая версия macOS также может быть ограничена "
"архитектурой. Например, macOS 11 (Big Sur) была первой версией, "
"поддерживающей arm64. Эти дополнительные ограничения прозрачно применяются "
"инструментальной цепочкой компиляции macOS при сборке двоичных файлов, "
"поддерживающих несколько архитектур."

#: ../source/specifications/platform-compatibility-tags.rst:235
#, fuzzy
msgid "Android"
msgstr "Android"

#: ../source/specifications/platform-compatibility-tags.rst:237
msgid ""
"Android uses the schema :file:`android_{apilevel}_{abi}`, indicating "
"compatibility with the given Android API level or later, on the given ABI. "
"For example, ``android_27_arm64_v8a`` indicates support for API level 27 or "
"later, on ``arm64_v8a`` devices. Android makes no distinction between "
"physical devices and emulated devices."
msgstr ""
"Android использует схему :file:`android_{apilevel}_{abi}`, указывающую на "
"совместимость с данным уровнем API Android или более поздним, на данном ABI. "
"Например, ``android_27_arm64_v8a`` указывает на поддержку уровня API 27 или "
"более позднего, на устройствах ``arm64_v8a``. Android не делает различий "
"между физическими и эмулируемыми устройствами."

#: ../source/specifications/platform-compatibility-tags.rst:243
msgid ""
"The API level should be a positive integer. This is *not* the same thing as "
"the user-facing Android version. For example, the release known as Android "
"12 (code named \"Snow Cone\") uses API level 31 or 32, depending on the "
"specific Android version in use. Android's release documentation contains "
"the `full list of Android versions and their corresponding API levels "
"<https://developer.android.com/tools/releases/platforms>`__."
msgstr ""
"Уровень API должен быть целым положительным числом. Это *не* то же самое, "
"что версия Android для пользователя. Например, релиз, известный как Android "
"12 (кодовое название \"Snow Cone\"), использует уровень API 31 или 32, в "
"зависимости от конкретной используемой версии Android. Полный список версий "
"Android и соответствующих им уровней API содержится в документации по "
"релизам Android <https://developer.android.com/tools/releases/platforms>`__."

#: ../source/specifications/platform-compatibility-tags.rst:250
msgid ""
"There are 4 `supported ABIs <https://developer.android.com/ndk/guides/"
"abis>`__. Normalized according to the rules above, they are:"
msgstr ""
"Существует 4 поддерживаемых ABI <https://developer.android.com/ndk/guides/"
"abis>`__. Нормализованные в соответствии с правилами выше, они таковы:"

#: ../source/specifications/platform-compatibility-tags.rst:253
#, fuzzy
msgid "``armeabi_v7a``"
msgstr "``armeabi_v7a``"

#: ../source/specifications/platform-compatibility-tags.rst:254
#, fuzzy
msgid "``arm64_v8a``"
msgstr "``arm64_v8a``"

#: ../source/specifications/platform-compatibility-tags.rst:255
#, fuzzy
#| msgid "``x86_64``"
msgid "``x86``"
msgstr "``x86``"

#: ../source/specifications/platform-compatibility-tags.rst:258
msgid ""
"Virtually all current physical devices use one of the ARM architectures. "
"``x86`` and ``x86_64`` are supported for use in the emulator. ``x86`` has "
"not been supported as a development platform since 2020, and no new emulator "
"images have been released since then."
msgstr ""
"Практически все современные физические устройства используют одну из "
"архитектур ARM. Для использования в эмуляторе поддерживаются ``x86`` и "
"``x86_64``. ``x86`` не поддерживается в качестве платформы разработки с 2020 "
"года, и с тех пор не было выпущено ни одного нового образа эмулятора."

#: ../source/specifications/platform-compatibility-tags.rst:266
#, fuzzy
msgid "iOS"
msgstr "iOS"

#: ../source/specifications/platform-compatibility-tags.rst:268
msgid ""
"iOS uses the schema :file:`ios_{x}_{y}_{arch}_{sdk}`, indicating "
"compatibility with iOS ``x.y`` or later, on the ``arch`` architecture, using "
"the ``sdk`` SDK."
msgstr ""
"iOS использует схему :file:`ios_{x}_{y}_{arch}_{sdk}`, указывающую на "
"совместимость с iOS ``x.y`` или более поздней версии, на архитектуре "
"``arch``, с использованием ``sdk`` SDK."

#: ../source/specifications/platform-compatibility-tags.rst:271
msgid ""
"The value of ``x`` and ``y`` correspond to the major and minor version "
"number of the iOS release, respectively. They must both be positive "
"integers. The version number always includes a major *and* minor version, "
"even if Apple's official version numbering only refers to the major value. "
"For example, a ``ios_13_0_arm64_iphonesimulator`` indicates compatibility "
"with iOS 13 or later."
msgstr ""
"Значения ``x`` и ``y`` соответствуют номеру мажорной и минорной версии "
"релиза iOS, соответственно. Оба они должны быть положительными целыми "
"числами. Номер версии всегда включает в себя мажорную *и* минорную версии, "
"даже если официальная нумерация версий Apple ссылается только на мажорное "
"значение. Например, ``ios_13_0_arm64_iphonesimulator`` указывает на "
"совместимость с iOS 13 или более поздней версией."

#: ../source/specifications/platform-compatibility-tags.rst:277
msgid ""
"The value of ``arch`` must match the value of :py:func:`platform.machine()` "
"on the system."
msgstr ""
"Значение ``arch`` должно совпадать со значением :py:func:`platform."
"machine()` в системе."

#: ../source/specifications/platform-compatibility-tags.rst:280
msgid ""
"The value of ``sdk`` must be either ``iphoneos`` (for physical devices), or "
"``iphonesimulator`` (for device simulators). These SDKs have the same API "
"surface, but are incompatible at the binary level, even if they are running "
"on the same CPU architecture. Code compiled for an arm64 simulator will not "
"run on an arm64 device."
msgstr ""
"Значение ``sdk` должно быть либо ``iphoneos`` (для физических устройств), "
"либо ``iphonesimulator`` (для симуляторов устройств). Эти SDK имеют "
"одинаковую поверхность API, но несовместимы на бинарном уровне, даже если "
"они работают на одной архитектуре процессора. Код, скомпилированный для "
"симулятора arm64, не будет работать на устройстве arm64."

#: ../source/specifications/platform-compatibility-tags.rst:286
msgid ""
"The combination of :file:`{arch}_{sdk}` is referred to as the \"multiarch\". "
"There are three possible values for multiarch:"
msgstr ""
"Комбинация :file:`{arch}_{sdk}` называется \"multiarch\". Существует три "
"возможных значения для multiarch:"

#: ../source/specifications/platform-compatibility-tags.rst:289
msgid ""
"``arm64_iphoneos``, for physical iPhone/iPad devices. This includes every "
"iOS device manufactured since ~2015;"
msgstr ""
"``arm64_iphoneos``, для физических устройств iPhone/iPad. Сюда входят все "
"iOS-устройства, выпущенные с ~2015 года;"

#: ../source/specifications/platform-compatibility-tags.rst:291
msgid ""
"``arm64_iphonesimulator``, for simulators running on Apple Silicon macOS "
"hardware; and"
msgstr ""
"``arm64_iphonesimulator``, для симуляторов, работающих на оборудовании Apple "
"Silicon macOS; и"

#: ../source/specifications/platform-compatibility-tags.rst:293
msgid "``x86_64_iphonesimulator``, for simulators running on x86_64 hardware."
msgstr ""
"``x86_64_iphonesimulator``, для симуляторов, работающих на оборудовании "
"x86_64."

#: ../source/specifications/platform-compatibility-tags.rst:296
msgid "Use"
msgstr "Используйте"

#: ../source/specifications/platform-compatibility-tags.rst:298
msgid ""
"The tags are used by installers to decide which built distribution (if any) "
"to download from a list of potential built distributions. The installer "
"maintains a list of (pyver, abi, arch) tuples that it will support.  If the "
"built distribution's tag is ``in`` the list, then it can be installed."
msgstr ""
"Теги используются программами установки, чтобы решить, какой собранный "
"дистрибутив (если таковой имеется) загрузить из списка потенциальных "
"собранных дистрибутивов. Программа установки ведет список кортежей (pyver, "
"abi, arch), которые она будет поддерживать.  Если тег собранного "
"дистрибутива находится ``в`` этом списке, то он может быть установлен."

#: ../source/specifications/platform-compatibility-tags.rst:304
msgid ""
"It is recommended that installers try to choose the most feature complete "
"built distribution available (the one most specific to the installation "
"environment) by default before falling back to pure Python versions "
"published for older Python releases. Installers are also recommended to "
"provide a way to configure and re-order the list of allowed compatibility "
"tags; for example, a user might accept only the ``*-none-any`` tags to only "
"download built packages that advertise themselves as being pure Python."
msgstr ""
"Рекомендуется, чтобы программы установки старались выбирать наиболее "
"функционально полный собранный дистрибутив (наиболее подходящий для среды "
"установки) по умолчанию, прежде чем возвращаться к версиям чистого Python, "
"опубликованным для старых версий Python. Инсталляторам также рекомендуется "
"предоставлять возможность настраивать и изменять список разрешенных тегов "
"совместимости; например, пользователь может принимать только теги ``*-none-"
"any``, чтобы загружать только те собранные пакеты, которые рекламируют себя "
"как чистый Python."

#: ../source/specifications/platform-compatibility-tags.rst:312
msgid ""
"Another desirable installer feature might be to include \"re-compile from "
"source if possible\" as more preferable than some of the compatible but "
"legacy pre-built options."
msgstr ""
"Еще одной желательной функцией программы установки может быть включение "
"опции \"перекомпилировать из исходного кода, если это возможно\" как более "
"предпочтительной, чем некоторые совместимые, но устаревшие опции "
"предварительной сборки."

#: ../source/specifications/platform-compatibility-tags.rst:316
msgid ""
"This example list is for an installer running under CPython 3.3 on a "
"linux_x86_64 system. It is in order from most-preferred (a distribution with "
"a compiled extension module, built for the current version of Python) to "
"least-preferred (a pure-Python distribution built with an older version of "
"Python):"
msgstr ""
"Этот пример списка предназначен для программы установки, работающей под "
"управлением CPython 3.3 на системе linux_x86_64. Он расположен в порядке от "
"наиболее предпочтительного (дистрибутив с скомпилированным модулем "
"расширения, собранный для текущей версии Python) до наименее "
"предпочтительного (дистрибутив чистого Python, собранный для более старой "
"версии Python):"

#: ../source/specifications/platform-compatibility-tags.rst:322
msgid "cp33-cp33m-linux_x86_64"
msgstr "cp33-cp33m-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:323
msgid "cp33-abi3-linux_x86_64"
msgstr "cp33-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:324
msgid "cp3-abi3-linux_x86_64"
msgstr "cp3-abi3-linux_x86_64"

#: ../source/specifications/platform-compatibility-tags.rst:325
msgid "cp33-none-linux_x86_64*"
msgstr "cp33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:326
msgid "cp3-none-linux_x86_64*"
msgstr "cp3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:327
msgid "py33-none-linux_x86_64*"
msgstr "py33-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:328
msgid "py3-none-linux_x86_64*"
msgstr "py3-none-linux_x86_64*"

#: ../source/specifications/platform-compatibility-tags.rst:329
msgid "cp33-none-any"
msgstr "cp33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:330
msgid "cp3-none-any"
msgstr "cp3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:331
msgid "py33-none-any"
msgstr "py33-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:332
msgid "py3-none-any"
msgstr "py3-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:333
msgid "py32-none-any"
msgstr "py32-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:334
msgid "py31-none-any"
msgstr "py31-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:335
msgid "py30-none-any"
msgstr "py30-none-any"

#: ../source/specifications/platform-compatibility-tags.rst:337
msgid ""
"Built distributions may be platform specific for reasons other than C "
"extensions, such as by including a native executable invoked as a subprocess."
msgstr ""
"Собранные дистрибутивы могут быть специфичными для конкретной платформы по "
"причинам, не связанным с расширениями C, например, путем включения "
"собственного исполняемого файла, вызываемого в качестве подпроцесса."

#: ../source/specifications/platform-compatibility-tags.rst:341
msgid ""
"Sometimes there will be more than one supported built distribution for a "
"particular version of a package.  For example, a packager could release a "
"package tagged ``cp33-abi3-linux_x86_64`` that contains an optional C "
"extension and the same distribution tagged ``py3-none-any`` that does not. "
"The index of the tag in the supported tags list breaks the tie, and the "
"package with the C extension is installed in preference to the package "
"without because that tag appears first in the list."
msgstr ""
"Иногда для определенной версии пакета существует более одного "
"поддерживаемого собранного дистрибутива.  Например, упаковщик может "
"выпустить пакет с тегом ``cp33-abi3-linux_x86_64``, содержащий "
"необязательное расширение C, и такой же дистрибутив с тегом ``py3-none-"
"any``, не содержащий его. Индекс тега в списке поддерживаемых тегов "
"разрушает равенство, и пакет с расширением C устанавливается "
"предпочтительнее, чем пакет без него, поскольку этот тег появляется первым в "
"списке."

#: ../source/specifications/platform-compatibility-tags.rst:350
msgid "Compressed Tag Sets"
msgstr "Сжатые наборы тегов"

#: ../source/specifications/platform-compatibility-tags.rst:352
#, fuzzy
#| msgid ""
#| "To allow for compact filenames of bdists that work with more than one "
#| "compatibility tag triple, each tag in a filename can instead be a '.'-"
#| "separated, sorted, set of tags.  For example, pip, a pure-Python package "
#| "that is written to run under Python 2 and 3 with the same source code, "
#| "could distribute a bdist with the tag ``py2.py3-none-any``. The full list "
#| "of simple tags is::"
msgid ""
"To allow for compact filenames of bdists that work with more than one "
"compatibility tag triple, each tag in a filename can instead be a '.'-"
"separated, sorted, collection of tags.  For example, pip, a pure-Python "
"package that is written to run under Python 2 and 3 with the same source "
"code, could distribute a bdist with the tag ``py2.py3-none-any``. The full "
"list of simple tags is::"
msgstr ""
"Чтобы обеспечить компактные имена файлов bdist, которые работают с более чем "
"одной тройкой тегов совместимости, каждый тег в имени файла может быть '.'-"
"разделенным, отсортированным набором тегов.  Например, pip, чисто "
"питоновский пакет, написанный для работы под Python 2 и 3 с одинаковым "
"исходным кодом, может распространять bdist с тегом ``py2.py3-none-any``. "
"Полный список простых тегов выглядит так::"

#: ../source/specifications/platform-compatibility-tags.rst:364
msgid ""
"A bdist format that implements this scheme should include the expanded tags "
"in bdist-specific metadata.  This compression scheme can generate large "
"numbers of unsupported tags and \"impossible\" tags that are supported by no "
"Python implementation e.g. \"cp33-cp31u-win64\", so use it sparingly."
msgstr ""
"Формат bdist, реализующий эту схему, должен включать расширенные теги в "
"метаданные, специфичные для bdist.  Эта схема сжатия может генерировать "
"большое количество неподдерживаемых тегов и \"невозможных\" тегов, которые "
"не поддерживаются ни одной реализацией Python, например, \"cp33-cp31u-"
"win64\", поэтому используйте ее осторожно."

#: ../source/specifications/platform-compatibility-tags.rst:377
msgid "What tags are used by default?"
msgstr "Какие теги используются по умолчанию?"

#: ../source/specifications/platform-compatibility-tags.rst:373
msgid ""
"Tools should use the most-preferred architecture dependent tag e.g. ``cp33-"
"cp33m-win32`` or the most-preferred pure python tag e.g. ``py33-none-any`` "
"by default.  If the packager overrides the default it indicates that they "
"intended to provide cross-Python compatibility."
msgstr ""
"По умолчанию инструменты должны использовать наиболее предпочтительный тег, "
"зависящий от архитектуры, например, ``cp33-cp33m-win32`` или наиболее "
"предпочтительный тег чистого python, например, ``py33-none-any``.  Если "
"упаковщик переопределяет значение по умолчанию, это указывает на то, что он "
"намерен обеспечить кросс-Python совместимость."

#: ../source/specifications/platform-compatibility-tags.rst:387
msgid ""
"What tag do I use if my distribution uses a feature exclusive to the newest "
"version of Python?"
msgstr ""
"Какой тег мне использовать, если в моем дистрибутиве используется функция, "
"эксклюзивная для новейшей версии Python?"

#: ../source/specifications/platform-compatibility-tags.rst:380
msgid ""
"Compatibility tags aid installers in selecting the *most compatible* build "
"of a *single version* of a distribution. For example, when there is no "
"Python 3.3 compatible build of ``beaglevote-1.2.0`` (it uses a Python 3.4 "
"exclusive feature) it may still use the ``py3-none-any`` tag instead of the "
"``py34-none-any`` tag. A Python 3.3 user must combine other qualifiers, such "
"as a requirement for the older release ``beaglevote-1.1.0`` that does not "
"use the new feature, to get a compatible build."
msgstr ""
"Теги совместимости помогают установщикам выбрать *наиболее совместимую* "
"сборку *одной версии* дистрибутива. Например, когда не существует сборки "
"``beaglevote-1.2.0``, совместимой с Python 3.3 (она использует эксклюзивную "
"возможность Python 3.4), можно использовать тег ``py3-none-any`` вместо тега "
"``py34-none-any``. Пользователь Python 3.3 должен комбинировать другие "
"квалификаторы, например, требовать более старый выпуск ``beaglevote-1.1.0``, "
"который не использует новую возможность, чтобы получить совместимую сборку."

#: ../source/specifications/platform-compatibility-tags.rst:392
msgid "Why isn't there a ``.`` in the Python version number?"
msgstr "Почему в номере версии Python нет ``.``?"

#: ../source/specifications/platform-compatibility-tags.rst:390
msgid ""
"CPython has lasted 20+ years without a 3-digit major release. This should "
"continue for some time.  Other implementations may use _ as a delimiter, "
"since both - and . delimit the surrounding filename."
msgstr ""
"CPython продержался 20 с лишним лет без трехзначного мажорного релиза. Это "
"должно продолжаться еще некоторое время.  Другие реализации могут "
"использовать _ в качестве разделителя, поскольку и -, и . разграничивают "
"окружающее имя файла."

#: ../source/specifications/platform-compatibility-tags.rst:398
msgid ""
"Why normalise hyphens and other non-alphanumeric characters to underscores?"
msgstr ""
"Зачем приводить дефисы и другие неалфавитные символы в соответствие с "
"символами подчеркивания?"

#: ../source/specifications/platform-compatibility-tags.rst:395
msgid ""
"To avoid conflicting with the ``.`` and ``-`` characters that separate "
"components of the filename, and for better compatibility with the widest "
"range of filesystem limitations for filenames (including being usable in URL "
"paths without quoting)."
msgstr ""
"Чтобы избежать конфликта с символами ``.`` и ``-``, разделяющими компоненты "
"имени файла, а также для лучшей совместимости с широким спектром ограничений "
"файловой системы для имен файлов (включая возможность использования в URL-"
"путях без кавычек)."

#: ../source/specifications/platform-compatibility-tags.rst:407
msgid "Why not use special character <X> rather than ``.`` or ``-``?"
msgstr ""
"Почему бы не использовать специальный символ <X>, а не ``.`` или ``-``?"

#: ../source/specifications/platform-compatibility-tags.rst:401
msgid ""
"Either because that character is inconvenient or potentially confusing in "
"some contexts (for example, ``+`` must be quoted in URLs, ``~`` is used to "
"denote the user's home directory in POSIX), or because the advantages "
"weren't sufficiently compelling to justify changing the existing reference "
"implementation for the wheel format defined in :pep:`427` (for example, "
"using ``,`` rather than ``.`` to separate components in a compressed tag)."
msgstr ""
"Либо потому, что этот символ неудобен или потенциально запутан в некоторых "
"контекстах (например, ``+`` должен быть заключен в кавычки в URL, ``~`` "
"используется для обозначения домашнего каталога пользователя в POSIX), либо "
"потому, что преимущества не были достаточно убедительными, чтобы оправдать "
"изменение существующей реализации ссылки на формат колеса, определенный в :"
"pep:`427` (например, использование ``,`` вместо ``.`` для разделения "
"компонентов в сжатом теге)."

#: ../source/specifications/platform-compatibility-tags.rst:412
msgid "Who will maintain the registry of abbreviated implementations?"
msgstr "Кто будет вести реестр сокращенных реализаций?"

#: ../source/specifications/platform-compatibility-tags.rst:410
msgid ""
"New two-letter abbreviations can be requested on the python-dev mailing "
"list.  As a rule of thumb, abbreviations are reserved for the current 4 most "
"prominent implementations."
msgstr ""
"Новые двухбуквенные аббревиатуры можно запросить в списке рассылки python-"
"dev.  Как правило, аббревиатуры сохраняются для 4 наиболее известных "
"реализаций."

#: ../source/specifications/platform-compatibility-tags.rst:417
msgid "Does the compatibility tag go into METADATA or PKG-INFO?"
msgstr "Тег совместимости помещается в METADATA или PKG-INFO?"

#: ../source/specifications/platform-compatibility-tags.rst:415
msgid ""
"No.  The compatibility tag is part of the built distribution's metadata.  "
"METADATA / PKG-INFO should be valid for an entire distribution, not a single "
"build of that distribution."
msgstr ""
"Нет.  Метка совместимости является частью метаданных собранного "
"дистрибутива.  METADATA / PKG-INFO должны быть действительны для всего "
"дистрибутива, а не для одной его сборки."

#: ../source/specifications/platform-compatibility-tags.rst:423
msgid "Why didn't you mention my favorite Python implementation?"
msgstr "Почему вы не упомянули мою любимую реализацию Python?"

#: ../source/specifications/platform-compatibility-tags.rst:420
msgid ""
"The abbreviated tags facilitate sharing compiled Python code in a public "
"index.  Your Python implementation can use this specification too, but with "
"longer tags. Recall that all \"pure Python\" built distributions just use "
"``py``."
msgstr ""
"Сокращенные теги облегчают обмен скомпилированным кодом Python в публичном "
"индексе.  Ваша реализация Python тоже может использовать эту спецификацию, "
"но с более длинными тегами. Напомним, что все дистрибутивы, построенные на "
"\"чистом Python\", просто используют ``py``."

#: ../source/specifications/platform-compatibility-tags.rst:431
msgid ""
"Why is the ABI tag (the second tag) sometimes \"none\" in the reference "
"implementation?"
msgstr ""
"Почему в эталонной реализации тег ABI (второй тег) иногда имеет значение "
"\"none\"?"

#: ../source/specifications/platform-compatibility-tags.rst:426
msgid ""
"Since Python 2 does not have an easy way to get to the SOABI (the concept "
"comes from newer versions of Python 3) the reference implementation at the "
"time of writing guesses \"none\".  Ideally it would detect \"py27(d|m|u)\" "
"analogous to newer versions of Python, but in the meantime \"none\" is a "
"good enough way to say \"don't know\"."
msgstr ""
"Поскольку в Python 2 нет простого способа добраться до SOABI (эта концепция "
"пришла из более новых версий Python 3), эталонная реализация на момент "
"написания статьи выдает \"none\".  В идеале она должна определять \"py27(d|m|"
"u)\" по аналогии с новыми версиями Python, но пока что \"none\" - достаточно "
"хороший способ сказать \"не знаю\"."

#: ../source/specifications/platform-compatibility-tags.rst:436
msgid ""
"February 2013: The original version of this specification was approved "
"through :pep:`425`."
msgstr ""
"Февраль 2013 г: Первоначальная версия этой спецификации была одобрена через :"
"pep:`425`."

#: ../source/specifications/platform-compatibility-tags.rst:438
msgid "January 2016: The ``manylinux1`` tag was approved through :pep:`513`."
msgstr "Январь 2016 г: Метка ``manylinux1`` была одобрена через :pep:`513``."

#: ../source/specifications/platform-compatibility-tags.rst:439
msgid "April 2018: The ``manylinux2010`` tag was approved through :pep:`571`."
msgstr ""
"Апрель 2018 г: Метка ``manylinux2010`` была одобрена через :pep:`571``."

#: ../source/specifications/platform-compatibility-tags.rst:440
msgid "July 2019: The ``manylinux2014`` tag was approved through :pep:`599`."
msgstr "Июль 2019: Метка ``manylinux2014`` была одобрена через :pep:`599``."

#: ../source/specifications/platform-compatibility-tags.rst:441
msgid ""
"November 2019: The ``manylinux_x_y`` perennial tag was approved through :pep:"
"`600`."
msgstr ""
"Ноябрь 2019: Многолетний тег ``manylinux_x_y`` был одобрен через :pep:`600`."

#: ../source/specifications/platform-compatibility-tags.rst:443
msgid "April 2021: The ``musllinux_x_y`` tag was approved through :pep:`656`."
msgstr ""
"Апрель 2021 года: Метка ``musllinux_x_y`` была одобрена через :pep:`656``."

#: ../source/specifications/platform-compatibility-tags.rst:444
msgid "December 2023: The tags for iOS were approved through :pep:`730`."
msgstr "Декабрь 2023 года: Теги для iOS были одобрены через :pep:`730`."

#: ../source/specifications/platform-compatibility-tags.rst:445
msgid "March 2024: The tags for Android were approved through :pep:`738`."
msgstr "Март 2024 года: Теги для Android были одобрены через :pep:`738`."

#: ../source/specifications/project-status-markers.rst:5
#, fuzzy
#| msgid "Project Summaries"
msgid "Project Status Markers"
msgstr "Обзор проектов"

#: ../source/specifications/project-status-markers.rst:9
#, fuzzy
#| msgid "This specification was originally defined in :pep:`740`."
msgid "This specification was originally defined in :pep:`792`."
msgstr "Эта спецификация была первоначально определена в :pep:`740`."

#: ../source/specifications/project-status-markers.rst:14
#, fuzzy
#| msgid ""
#| ":pep:`740` includes changes to the HTML and JSON index APIs. These "
#| "changes are documented in the :ref:`simple-repository-api` under :ref:"
#| "`simple-repository-api-base` and :ref:`json-serialization`."
msgid ""
":pep:`792` includes changes to the HTML and JSON index APIs. These changes "
"are documented in the :ref:`simple-repository-api` under :ref:`HTML - "
"Project Detail <simple-repository-html-project-detail>` and :ref:`JSON - "
"Project Detail <simple-repository-json-project-detail>`."
msgstr ""
":pep:`740` включает изменения в HTML и JSON API индексов. Эти изменения "
"документированы в разделах :ref:`Simple-repository-api` под :ref:`Simple-"
"repository-api-base` и :ref:`json-serialization`."

#: ../source/specifications/project-status-markers.rst:22
msgid ""
"A project always has exactly one status. If no status is explicitly noted, "
"then the project is considered to be in the ``active`` state."
msgstr ""

#: ../source/specifications/project-status-markers.rst:25
msgid ""
"Indices **MAY** implement any subset of the status markers specified, as "
"applicable to their needs."
msgstr ""

#: ../source/specifications/project-status-markers.rst:28
msgid ""
"This standard does not prescribe *which* principals (i.e. project "
"maintainers, index administrators, etc.) are allowed to set and unset which "
"statuses."
msgstr ""

#: ../source/specifications/project-status-markers.rst:32
msgid "``active``"
msgstr ""

#: ../source/specifications/project-status-markers.rst:34
msgid ""
"Description: The project is active. This is the default status for a project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:36
#: ../source/specifications/project-status-markers.rst:49
#: ../source/specifications/project-status-markers.rst:65
#: ../source/specifications/project-status-markers.rst:83
msgid "Index semantics:"
msgstr ""

#: ../source/specifications/project-status-markers.rst:38
msgid ""
"The index hosting the project **MUST** allow uploads of new distributions to "
"the project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:40
#: ../source/specifications/project-status-markers.rst:53
msgid ""
"The index **MUST** offer existing distributions of the project for download."
msgstr ""

#: ../source/specifications/project-status-markers.rst:42
#, fuzzy
#| msgid "Installation"
msgid "Installer semantics: none."
msgstr "Установка"

#: ../source/specifications/project-status-markers.rst:45
#, fuzzy
msgid "``archived``"
msgstr "``arch``"

#: ../source/specifications/project-status-markers.rst:47
msgid "Description: The project does not expect to be updated in the future."
msgstr ""

#: ../source/specifications/project-status-markers.rst:51
#: ../source/specifications/project-status-markers.rst:67
msgid ""
"The index hosting the project **MUST NOT** allow uploads of new "
"distributions to the project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:55
#: ../source/specifications/project-status-markers.rst:71
#: ../source/specifications/project-status-markers.rst:87
#, fuzzy
#| msgid "Installers"
msgid "Installer semantics:"
msgstr "Установщики"

#: ../source/specifications/project-status-markers.rst:57
msgid "Installers **MAY** produce warnings about a project's archival."
msgstr ""

#: ../source/specifications/project-status-markers.rst:60
msgid "``quarantined``"
msgstr ""

#: ../source/specifications/project-status-markers.rst:62
msgid ""
"Description: The project is considered generally unsafe for use, e.g. due to "
"malware."
msgstr ""

#: ../source/specifications/project-status-markers.rst:69
msgid ""
"The index **MUST NOT** offer any distributions of the project for download."
msgstr ""

#: ../source/specifications/project-status-markers.rst:73
msgid ""
"Installers **MAY** produce warnings about a project's quarantine, although "
"doing so is effectively moot (as the index will not offer any distributions "
"for installation)."
msgstr ""

#: ../source/specifications/project-status-markers.rst:78
#, fuzzy
#| msgid "Deprecated"
msgid "``deprecated``"
msgstr "Устаревшее"

#: ../source/specifications/project-status-markers.rst:80
msgid ""
"Description: The project is considered obsolete, and may have been "
"superseded by another project."
msgstr ""

#: ../source/specifications/project-status-markers.rst:85
msgid "This status shares the same semantics as ``active``."
msgstr ""

#: ../source/specifications/project-status-markers.rst:89
msgid "Installers **MAY** produce warnings about a project's deprecation."
msgstr ""

#: ../source/specifications/pylock-toml.rst:6
#, fuzzy
#| msgid "``pyproject.toml`` specification"
msgid "``pylock.toml`` Specification"
msgstr "Спецификация ``pyproject.toml``"

#: ../source/specifications/pylock-toml.rst:8
msgid ""
"The ``pylock.toml`` file format is for specifying dependencies to enable "
"reproducible installation in a Python environment."
msgstr ""

#: ../source/specifications/pylock-toml.rst:11
#, fuzzy
#| msgid "This specification was originally defined in :pep:`753`."
msgid "This specification was originally defined in :pep:`751`."
msgstr "Эта спецификация была первоначально определена в :pep:`753`."

#: ../source/specifications/pylock-toml.rst:16
#, fuzzy
#| msgid "Name"
msgid "File Name"
msgstr "Имя"

#: ../source/specifications/pylock-toml.rst:18
msgid ""
"A lock file MUST be named :file:`pylock.toml` or match the regular "
"expression ``r\"^pylock\\.([^.]+)\\.toml$\"`` if a name for the lock file is "
"desired or if multiple lock files exist (i.e. the regular expression "
"``r\"^pylock\\.([^.]+\\.)?toml$\"`` for any file name). The prefix and "
"suffix of a named file MUST be lowercase when possible, for easy detection "
"and removal, e.g.:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:30
msgid ""
"The expectation is that services that automatically install from lock files "
"will search for:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:33
msgid "The lock file with the service's name and doing the default install"
msgstr ""

#: ../source/specifications/pylock-toml.rst:34
msgid ""
"A multi-use :file:`pylock.toml` with a dependency group with the name of the "
"service"
msgstr ""

#: ../source/specifications/pylock-toml.rst:35
msgid "The default install of :file:`pylock.toml`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:37
msgid ""
"E.g. a cloud host service named \"spam\" would first look for :file:`pylock."
"spam.toml` to install from, and if that file didn't exist then install from :"
"file:`pylock.toml` and look for a dependency group named \"spam\" to use if "
"present."
msgstr ""

#: ../source/specifications/pylock-toml.rst:42
msgid ""
"The lock file(s) SHOULD be located in the directory as appropriate for the "
"scope of the lock file. Locking against a single :file:`pyproject.toml`, for "
"instance, would place the :file:`pylock.toml` in the same directory. If the "
"lock file covered multiple projects in a monorepo, then the expectation is "
"the :file:`pylock.toml` file would be in the directory that held all the "
"projects being locked."
msgstr ""

#: ../source/specifications/pylock-toml.rst:53
msgid "The format of the file is TOML_."
msgstr ""

#: ../source/specifications/pylock-toml.rst:55
msgid ""
"Tools SHOULD write their lock files in a consistent way to minimize noise in "
"diff output. Keys in tables -- including the top-level table -- SHOULD be "
"recorded in a consistent order (if inspiration is desired, this "
"specification has tried to write down keys in a logical order). As well, "
"tools SHOULD sort arrays in consistent order. Usage of inline tables SHOULD "
"also be kept consistent."
msgstr ""

#: ../source/specifications/pylock-toml.rst:65
#, fuzzy
#| msgid "``platform_version``"
msgid "``lock-version``"
msgstr "``платформа_версия``"

#: ../source/specifications/pylock-toml.rst:67
msgid "**Type**: string; value of ``\"1.0\"``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:68
#: ../source/specifications/pylock-toml.rst:174
#: ../source/specifications/pylock-toml.rst:189
#: ../source/specifications/pylock-toml.rst:202
#: ../source/specifications/pylock-toml.rst:298
#: ../source/specifications/pylock-toml.rst:348
#: ../source/specifications/pylock-toml.rst:397
#: ../source/specifications/pylock-toml.rst:494
#: ../source/specifications/pylock-toml.rst:689
#, fuzzy
#| msgid "Requires"
msgid "**Required?**: yes"
msgstr "Требуется"

#: ../source/specifications/pylock-toml.rst:69
msgid "**Inspiration**: :ref:`core-metadata-metadata-version`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:70
msgid "Record the file format version that the file adheres to."
msgstr ""

#: ../source/specifications/pylock-toml.rst:71
msgid ""
"This PEP specifies the initial version -- and only valid value until future "
"updates to the standard change it -- as ``\"1.0\"``."
msgstr ""

#: ../source/specifications/pylock-toml.rst:73
msgid ""
"If a tool supports the major version but not the minor version, a tool "
"SHOULD warn when an unknown key is seen."
msgstr ""

#: ../source/specifications/pylock-toml.rst:75
msgid "If a tool doesn't support a major version, it MUST raise an error."
msgstr ""

#: ../source/specifications/pylock-toml.rst:81
#, fuzzy
#| msgid "``entry-points``"
msgid "``environments``"
msgstr "``точки входа``"

#: ../source/specifications/pylock-toml.rst:83
#: ../source/specifications/pylock-toml.rst:110
#: ../source/specifications/pylock-toml.rst:132
#: ../source/specifications/pylock-toml.rst:154
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: Array of strings"
msgstr "Тип TOML_: массив строк"

#: ../source/specifications/pylock-toml.rst:84
#: ../source/specifications/pylock-toml.rst:98
#: ../source/specifications/pylock-toml.rst:213
#: ../source/specifications/pylock-toml.rst:230
#: ../source/specifications/pylock-toml.rst:243
#: ../source/specifications/pylock-toml.rst:255
#: ../source/specifications/pylock-toml.rst:334
#: ../source/specifications/pylock-toml.rst:362
#: ../source/specifications/pylock-toml.rst:435
#: ../source/specifications/pylock-toml.rst:469
#: ../source/specifications/pylock-toml.rst:482
#: ../source/specifications/pylock-toml.rst:519
#: ../source/specifications/pylock-toml.rst:674
#: ../source/specifications/pylock-toml.rst:700
#: ../source/specifications/pylock-toml.rst:715
msgid "**Required?**: no"
msgstr ""

#: ../source/specifications/pylock-toml.rst:85
#: ../source/specifications/pylock-toml.rst:520
#: ../source/specifications/pylock-toml.rst:538
msgid "**Inspiration**: uv_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:86
msgid ""
"A list of :ref:`dependency-specifiers-environment-markers` for which the "
"lock file is considered compatible with."
msgstr ""

#: ../source/specifications/pylock-toml.rst:88
msgid ""
"Tools SHOULD write exclusive/non-overlapping environment markers to ease in "
"understanding."
msgstr ""

#: ../source/specifications/pylock-toml.rst:97
#: ../source/specifications/pylock-toml.rst:173
#: ../source/specifications/pylock-toml.rst:201
#: ../source/specifications/pylock-toml.rst:212
#: ../source/specifications/pylock-toml.rst:229
#: ../source/specifications/pylock-toml.rst:242
#: ../source/specifications/pylock-toml.rst:308
#: ../source/specifications/pylock-toml.rst:319
#: ../source/specifications/pylock-toml.rst:333
#: ../source/specifications/pylock-toml.rst:347
#: ../source/specifications/pylock-toml.rst:361
#: ../source/specifications/pylock-toml.rst:396
#: ../source/specifications/pylock-toml.rst:518
#: ../source/specifications/pylock-toml.rst:551
#: ../source/specifications/pylock-toml.rst:620
#: ../source/specifications/pylock-toml.rst:688
#, fuzzy
#| msgid "TOML_ type: string"
msgid "**Type**: string"
msgstr "Тип TOML_: строка"

#: ../source/specifications/pylock-toml.rst:99
#: ../source/specifications/pylock-toml.rst:190
#: ../source/specifications/pylock-toml.rst:256
#: ../source/specifications/pylock-toml.rst:555
#: ../source/specifications/pylock-toml.rst:608
#: ../source/specifications/pylock-toml.rst:624
msgid "**Inspiration**: PDM_, Poetry_, uv_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:100
msgid ""
"Specifies the :ref:`core-metadata-requires-python` for the minimum Python "
"version compatible for any environment supported by the lock file (i.e. the "
"minimum viable Python version for the lock file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:111
#: ../source/specifications/pylock-toml.rst:133
#: ../source/specifications/pylock-toml.rst:155
msgid "**Required?**: no; defaults to ``[]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:112
msgid "**Inspiration**: :ref:`core-metadata-provides-extra`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:113
msgid ""
"The list of :ref:`extras <core-metadata-provides-extra>` supported by this "
"lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:115
#: ../source/specifications/pylock-toml.rst:138
msgid ""
"Lockers MAY choose to not support writing lock files that support extras and "
"dependency groups (i.e. tools may only support exporting a single-use lock "
"file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:118
msgid "Tools supporting extras MUST also support dependency groups."
msgstr ""

#: ../source/specifications/pylock-toml.rst:119
msgid ""
"Tools should explicitly set this key to an empty array to signal that the "
"inputs used to generate the lock file had no extras (e.g. a :ref:`pyproject."
"toml <pyproject-toml-spec>` file had no :ref:`[project.optional-"
"dependencies] <pyproject-toml-optional-dependencies>` table), signalling "
"that the lock file is, in effect, multi-use even if it only looks to be "
"single-use."
msgstr ""

#: ../source/specifications/pylock-toml.rst:130
#, fuzzy
#| msgid "The ``[dependency-groups]`` Table"
msgid "``dependency-groups``"
msgstr "Таблица ``[dependency-groups]``"

#: ../source/specifications/pylock-toml.rst:134
#: ../source/specifications/pylock-toml.rst:701
#: ../source/specifications/pylock-toml.rst:716
#, fuzzy
#| msgid ":ref:`pyproject-toml-spec`"
msgid "**Inspiration**: :ref:`pyproject-tool-table`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/specifications/pylock-toml.rst:135
msgid ""
"The list of :ref:`dependency-groups` publicly supported by this lock file (i."
"e. dependency groups users are expected to be able to specify via a tool's "
"UI)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:141
msgid "Tools supporting dependency groups MUST also support extras."
msgstr ""

#: ../source/specifications/pylock-toml.rst:142
msgid ""
"Tools SHOULD explicitly set this key to an empty array to signal that the "
"inputs used to generate the lock file had no dependency groups (e.g. a :ref:"
"`pyproject.toml <pyproject-toml-spec>` file had no :ref:`[dependency-groups] "
"<dependency-groups>` table), signalling that the lock file is, in effect, "
"multi-use even if it only looks to be single-use."
msgstr ""

#: ../source/specifications/pylock-toml.rst:152
msgid "``default-groups``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:156
msgid "**Inspiration**: Poetry_, PDM_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:157
msgid ""
"The name of synthetic dependency groups to represent what should be "
"installed by default (e.g. what :ref:`[project.dependencies] <pyproject-toml-"
"dependencies>` implicitly represents)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:161
msgid ""
"Meant to be used in situations where :ref:`pylock-packages-marker` "
"necessitates such a group to exist."
msgstr ""

#: ../source/specifications/pylock-toml.rst:163
msgid ""
"The groups listed by this key SHOULD NOT be listed in :ref:`pylock-"
"dependency-groups` as the groups are not meant to be directly exposed to "
"users by name but instead via an installer's UI."
msgstr ""

#: ../source/specifications/pylock-toml.rst:171
msgid "``created-by``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:175
msgid "**Inspiration**: Tools with their name in their lock file name"
msgstr ""

#: ../source/specifications/pylock-toml.rst:176
#, fuzzy
#| msgid ""
#| "``INSTALLER``: records the name of the tool used to install the project."
msgid "Records the name of the tool used to create the lock file."
msgstr ""
"``INSTALLER``: записывает имя инструмента, используемого для установки "
"проекта."

#: ../source/specifications/pylock-toml.rst:177
msgid ""
"Tools MAY use the :ref:`pylock-tool` table to record enough details that it "
"can be inferred what inputs were used to create the lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:179
msgid ""
"Tools SHOULD record the normalized name of the tool if it is available as a "
"Python package to facilitate finding the tool."
msgstr ""

#: ../source/specifications/pylock-toml.rst:186
#, fuzzy
#| msgid "``packages``"
msgid "``[[packages]]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:188
#: ../source/specifications/pylock-toml.rst:254
#: ../source/specifications/pylock-toml.rst:605
#: ../source/specifications/pylock-toml.rst:673
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: array of tables"
msgstr "Тип TOML_: массив строк"

#: ../source/specifications/pylock-toml.rst:191
msgid "An array containing all packages that *may* be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:192
msgid ""
"Packages MAY be listed multiple times with varying data, but all packages to "
"be installed MUST narrow down to a single entry at install time."
msgstr ""

#: ../source/specifications/pylock-toml.rst:199
#, fuzzy
#| msgid "``packages``"
msgid "``packages.name``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:203
msgid "**Inspiration**: :ref:`core-metadata-name`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:204
#, fuzzy
#| msgid ""
#| "For comparison purposes, the names should be :ref:`normalized <name-"
#| "normalization>` before comparing."
msgid "The name of the package :ref:`normalized <name-normalization>`."
msgstr ""
"Для сравнения имена должны быть :ref:`нормализованы <имя-нормализация>` "
"перед сравнением."

#: ../source/specifications/pylock-toml.rst:210
#, fuzzy
#| msgid "``packages``"
msgid "``packages.version``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:214
msgid "**Inspiration**: :ref:`core-metadata-version`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:215
#, fuzzy
#| msgid "Creating the package"
msgid "The version of the package."
msgstr "Создание пакета"

#: ../source/specifications/pylock-toml.rst:216
#, fuzzy
#| msgid ""
#| "``subject[0].name`` is the distribution's filename, which **MUST** be a "
#| "valid :ref:`source distribution <source-distribution-format>` or :ref:"
#| "`wheel distribution <binary-distribution-format>` filename."
msgid ""
"The version SHOULD be specified when the version is known to be stable (i.e. "
"when an :ref:`sdist <source-distribution-format>` or :ref:`wheels <binary-"
"distribution-format>` are specified)."
msgstr ""
"``subject[0].name`` - это имя файла дистрибутива, которое **МОЖЕТ** быть "
"действительным именем файла :ref:`source distribution <source-distribution-"
"format>` или :ref:`wheel distribution <binary-distribution-format>`."

#: ../source/specifications/pylock-toml.rst:219
msgid ""
"The version MUST NOT be included when it cannot be guaranteed to be "
"consistent with the code used (i.e. when a :ref:`source tree <source-"
"distribution-format-source-tree>` is used)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:227
#, fuzzy
#| msgid "``packages``"
msgid "``packages.marker``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:231
msgid "**Inspiration**: PDM_"
msgstr ""

#: ../source/specifications/pylock-toml.rst:232
msgid ""
"The :ref:`environment marker <dependency-specifiers-environment-markers>` "
"which specify when the package should be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:240
#, fuzzy
#| msgid "``requires-python``"
msgid "``packages.requires-python``"
msgstr "``требуется-python``"

#: ../source/specifications/pylock-toml.rst:244
msgid "**Inspiration**: :ref:`core-metadata-requires-python`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:245
msgid ""
"Holds the :ref:`version-specifiers` for Python version compatibility for the "
"package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:252
#, fuzzy
#| msgid "``dependencies``"
msgid "``[[packages.dependencies]]``"
msgstr "``зависимости``"

#: ../source/specifications/pylock-toml.rst:257
msgid ""
"Records the other entries in :ref:`pylock-packages` which are direct "
"dependencies of this package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:259
msgid ""
"Each entry is a table which contains the minimum information required to "
"tell which other package entry it corresponds to where doing a key-by-key "
"comparison would find the appropriate package with no ambiguity (e.g. if "
"there are two entries for the ``spam`` package, then you can include the "
"version number like ``{name = \"spam\", version = \"1.0.0\"}``, or by source "
"like ``{name = \"spam\", vcs = { url = \"...\"}``)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:265
msgid ""
"Tools MUST NOT use this information when doing installation; it is purely "
"informational for auditing purposes."
msgstr ""

#: ../source/specifications/pylock-toml.rst:272
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.vcs]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:274
#: ../source/specifications/pylock-toml.rst:376
#: ../source/specifications/pylock-toml.rst:434
#: ../source/specifications/pylock-toml.rst:535
#: ../source/specifications/pylock-toml.rst:699
#: ../source/specifications/pylock-toml.rst:714
#, fuzzy
#| msgid "TOML_ type: table"
msgid "**Type**: table"
msgstr "TOML_ тип: таблица"

#: ../source/specifications/pylock-toml.rst:275
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-"
"directory`, :ref:`pylock-packages-archive`, :ref:`pylock-packages-sdist`, "
"and :ref:`pylock-packages-wheels`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:278
msgid "**Inspiration**: :ref:`direct-url-data-structure`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:279
msgid ""
"Record the version control system details for the :ref:`source tree <source-"
"distribution-format-source-tree>` it contains."
msgstr ""

#: ../source/specifications/pylock-toml.rst:282
msgid ""
"Tools MAY choose to not support version control systems, both from a locking "
"and/or installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:284
msgid "Tools MAY choose to only support a subset of the available VCS types."
msgstr ""

#: ../source/specifications/pylock-toml.rst:285
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using version control "
"systems."
msgstr ""

#: ../source/specifications/pylock-toml.rst:287
msgid ""
"Installation from a version control system is considered originating from a :"
"ref:`direct URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:294
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.type``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:296
msgid ""
"**Type**: string; supported values specified in :ref:`direct-url-data-"
"structure-registered-vcs`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:299
#: ../source/specifications/pylock-toml.rst:310
#: ../source/specifications/pylock-toml.rst:321
#: ../source/specifications/pylock-toml.rst:335
#: ../source/specifications/pylock-toml.rst:349
msgid "**Inspiration**: :ref:`direct-url-data-structure-vcs`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:300
#, fuzzy
#| msgid "Install from version control systems"
msgid "The type of version control system used."
msgstr "Установка из систем контроля версий"

#: ../source/specifications/pylock-toml.rst:306
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.url``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:309
msgid "**Required?**: if :ref:`pylock-packages-vcs-path` is not specified"
msgstr ""

#: ../source/specifications/pylock-toml.rst:311
#, fuzzy
#| msgid "The source tree"
msgid "The URL_ to the source tree."
msgstr "Дерево исходного кода"

#: ../source/specifications/pylock-toml.rst:317
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.path``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:320
msgid "**Required?**: if :ref:`pylock-packages-vcs-url` is not specified"
msgstr ""

#: ../source/specifications/pylock-toml.rst:322
msgid "The path to the local directory of the source tree."
msgstr ""

#: ../source/specifications/pylock-toml.rst:323
msgid ""
"If a relative path is used it MUST be relative to the location of this file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:324
msgid ""
"If the path is relative it MAY use POSIX-style path separators explicitly "
"for portability."
msgstr ""

#: ../source/specifications/pylock-toml.rst:331
#, fuzzy
#| msgid "``requested_revision`` field"
msgid "``packages.vcs.requested-revision``"
msgstr "поле ``запрошенный_пересмотр``"

#: ../source/specifications/pylock-toml.rst:336
msgid "The branch/tag/ref/commit/revision/etc. that the user requested."
msgstr ""

#: ../source/specifications/pylock-toml.rst:337
msgid ""
"This is purely informational and to facilitate writing the :ref:`direct-url-"
"data-structure`; it MUST NOT be used to checkout the repository."
msgstr ""

#: ../source/specifications/pylock-toml.rst:345
#, fuzzy
#| msgid "``packages``"
msgid "``packages.vcs.commit-id``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:350
msgid "The exact commit/revision number that is to be installed."
msgstr ""

#: ../source/specifications/pylock-toml.rst:351
#, fuzzy
#| msgid ""
#| "A ``commit_id`` key (type ``string``) MUST be present, containing the "
#| "exact commit/revision number that was/is to be installed. If the VCS "
#| "supports commit-hash based revision identifiers, such commit-hash MUST be "
#| "used as ``commit_id`` in order to reference an immutable version of the "
#| "source code."
msgid ""
"If the VCS supports commit-hash based revision identifiers, such a commit-"
"hash, it MUST be used as the commit ID in order to reference an immutable "
"version of the source code."
msgstr ""
"Ключ ``commit_id`` (тип ``string``) ДОЛЖЕН присутствовать, содержащий точный "
"номер коммита/ревизии, которая была/есть установлена. Если VCS поддерживает "
"идентификаторы ревизий на основе commit-hash, то такой commit-hash ДОЛЖЕН "
"использоваться в качестве ``commit_id``, чтобы ссылаться на неизменяемую "
"версию исходного кода."

#: ../source/specifications/pylock-toml.rst:359
msgid "``packages.vcs.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:363
msgid "**Inspiration**: :ref:`direct-url-data-structure-subdirectories`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:364
msgid ""
"The subdirectory within the :ref:`source tree <source-distribution-format-"
"source-tree>` where the project root of the project is (e.g. the location of "
"the :ref:`pyproject.toml <pyproject-toml-spec>` file)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:368
msgid "The path MUST be relative to the root of the source tree structure."
msgstr ""

#: ../source/specifications/pylock-toml.rst:374
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.directory]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:377
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-vcs`, :ref:"
"`pylock-packages-archive`, :ref:`pylock-packages-sdist`, and :ref:`pylock-"
"packages-wheels`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:380
#: ../source/specifications/pylock-toml.rst:398
#: ../source/specifications/pylock-toml.rst:412
msgid "**Inspiration**: :ref:`direct-url-data-structure-local-directory`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:381
msgid ""
"Record the local directory details for the :ref:`source tree <source-"
"distribution-format-source-tree>` it contains."
msgstr ""

#: ../source/specifications/pylock-toml.rst:384
msgid ""
"Tools MAY choose to not support local directories, both from a locking and/"
"or installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:386
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using local "
"directories."
msgstr ""

#: ../source/specifications/pylock-toml.rst:387
msgid ""
"Installation from a directory is considered originating from a :ref:`direct "
"URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:394
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.directory.path``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:399
msgid "The local directory where the source tree is."
msgstr ""

#: ../source/specifications/pylock-toml.rst:400
msgid ""
"If the path is relative it MUST be relative to the location of the lock file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:401
msgid ""
"If the path is relative it MAY use POSIX-style path separators for "
"portability."
msgstr ""

#: ../source/specifications/pylock-toml.rst:408
msgid "``packages.directory.editable``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:410
msgid "**Type**: boolean"
msgstr ""

#: ../source/specifications/pylock-toml.rst:411
msgid "**Required?**: no; defaults to ``false``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:413
msgid ""
"A flag representing whether the source tree was an editable install at lock "
"time."
msgstr ""

#: ../source/specifications/pylock-toml.rst:415
msgid ""
"An installer MAY choose to ignore this flag if user actions or context would "
"make an editable install unnecessary or undesirable (e.g. a container image "
"that will not be mounted for development purposes but instead deployed to "
"production where it would be treated at read-only)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:424
msgid "``packages.directory.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:426
#: ../source/specifications/pylock-toml.rst:510
msgid "See :ref:`pylock-packages-vcs-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:432
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.archive]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:436
msgid "**Inspiration**: :ref:`direct-url-data-structure-archive`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:437
msgid ""
"A direct reference to an archive file to install from (this can include "
"wheels and sdists, as well as other archive formats containing a source "
"tree)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:440
msgid ""
"Tools MAY choose to not support archive files, both from a locking and/or "
"installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:442
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using archive files."
msgstr ""

#: ../source/specifications/pylock-toml.rst:443
msgid ""
"Installation from an archive file is considered originating from a :ref:"
"`direct URL reference <direct-url>`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:450
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.url``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:452
msgid "See :ref:`pylock-packages-vcs-url`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:458
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.path``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:460
msgid "See :ref:`pylock-packages-vcs-path`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:466
#, fuzzy
#| msgid "``packages``"
msgid "``packages.archive.size``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:468
msgid "**Type**: integer"
msgstr ""

#: ../source/specifications/pylock-toml.rst:470
msgid "**Inspiration**: uv_, :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:471
#, fuzzy
#| msgid "The name of the project."
msgid "The size of the archive file."
msgstr "Название проекта."

#: ../source/specifications/pylock-toml.rst:472
msgid ""
"Tools SHOULD provide the file size when reasonably possible (e.g. the file "
"size is available via the Content-Length_ header from a HEAD_ HTTP request)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:479
msgid "``packages.archive.upload-time``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:481
msgid "**Type**: datetime"
msgstr ""

#: ../source/specifications/pylock-toml.rst:483
msgid "**Inspiration**: :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:484
#, fuzzy
#| msgid "Where the guide is deployed"
msgid "The time the file was uploaded."
msgstr "Где развёрнуто руководство"

#: ../source/specifications/pylock-toml.rst:485
msgid "The date and time MUST be recorded in UTC."
msgstr ""

#: ../source/specifications/pylock-toml.rst:491
msgid "``[packages.archive.hashes]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:493
#, fuzzy
#| msgid "TOML_ type: array of strings"
msgid "**Type**: Table of strings"
msgstr "Тип TOML_: массив строк"

#: ../source/specifications/pylock-toml.rst:495
msgid "**Inspiration**: PDM_, Poetry_, uv_, :ref:`simple-repository-api`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:496
#, fuzzy
#| msgid ""
#| "A table of URLs where the key is the URL label and the value is the URL "
#| "itself."
msgid ""
"A table listing known hash values of the file where the key is the hash "
"algorithm and the value is the hash value."
msgstr ""
"Таблица URL-адресов, где ключом является метка URL, а значением - сам URL."

#: ../source/specifications/pylock-toml.rst:498
msgid "The table MUST contain at least one entry."
msgstr ""

#: ../source/specifications/pylock-toml.rst:499
msgid "Hash algorithm keys SHOULD be lowercase."
msgstr ""

#: ../source/specifications/pylock-toml.rst:500
msgid ""
"At least one secure algorithm from :py:data:`hashlib.algorithms_guaranteed` "
"SHOULD always be included (at time of writing, sha256 specifically is "
"recommended."
msgstr ""

#: ../source/specifications/pylock-toml.rst:508
msgid "``packages.archive.subdirectory``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:516
#, fuzzy
#| msgid "``packages``"
msgid "``packages.index``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:521
msgid ""
"The base URL for the package index from :ref:`simple-repository-api` where "
"the sdist and/or wheels were found (e.g. ``https://pypi.org/simple/``)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:523
msgid ""
"When possible, this SHOULD be specified to assist with generating `software "
"bill of materials`_ -- aka SBOMs -- and to assist in finding a file if a URL "
"ceases to be valid."
msgstr ""

#: ../source/specifications/pylock-toml.rst:526
msgid ""
"Tools MAY support installing from an index if the URL recorded for a "
"specific file is no longer valid (e.g. returns a 404 HTTP error code)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:533
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.sdist]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:536
#: ../source/specifications/pylock-toml.rst:606
msgid ""
"**Required?**: no; mutually-exclusive with :ref:`pylock-packages-vcs`, :ref:"
"`pylock-packages-directory`, and :ref:`pylock-packages-archive`"
msgstr ""

#: ../source/specifications/pylock-toml.rst:539
msgid "Details of a :ref:`source-distribution-format-sdist` for the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:541
msgid ""
"Tools MAY choose to not support sdist files, both from a locking and/or "
"installation perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:543
msgid ""
"Tools SHOULD provide a way for users to opt in/out of using sdist files."
msgstr ""

#: ../source/specifications/pylock-toml.rst:549
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.name``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:552
msgid ""
"**Required?**: no, not when the last component of :ref:`pylock-packages-"
"sdist-path`/ :ref:`pylock-packages-sdist-url` would be the same value"
msgstr ""

#: ../source/specifications/pylock-toml.rst:556
msgid "The file name of the :ref:`source-distribution-format-sdist` file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:562
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.upload-time``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:564
#: ../source/specifications/pylock-toml.rst:633
msgid "See :ref:`pylock-packages-archive-upload-time`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:570
#, fuzzy
#| msgid "``packages``"
msgid "``packages.sdist.url``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:572
#: ../source/specifications/pylock-toml.rst:641
msgid "See :ref:`pylock-packages-archive-url`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:578
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.path``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:580
#: ../source/specifications/pylock-toml.rst:649
msgid "See :ref:`pylock-packages-archive-path`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:586
#, fuzzy
#| msgid "``packages``"
msgid "``packages.sdist.size``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:588
#: ../source/specifications/pylock-toml.rst:657
msgid "See :ref:`pylock-packages-archive-size`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:594
#, fuzzy
#| msgid "``package_data``"
msgid "``packages.sdist.hashes``"
msgstr "``package_data``"

#: ../source/specifications/pylock-toml.rst:596
#: ../source/specifications/pylock-toml.rst:665
msgid "See :ref:`pylock-packages-archive-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:603
#, fuzzy
#| msgid "``packages``"
msgid "``[[packages.wheels]]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:609
msgid ""
"For recording the wheel files as specified by :ref:`binary-distribution-"
"format` for the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:611
msgid ""
"Tools MUST support wheel files, both from a locking and installation "
"perspective."
msgstr ""

#: ../source/specifications/pylock-toml.rst:618
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.name``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:621
msgid ""
"**Required?**: no, not when the last component of :ref:`pylock-packages-"
"wheels-path`/ :ref:`pylock-packages-wheels-url` would be the same value"
msgstr ""

#: ../source/specifications/pylock-toml.rst:625
msgid "The file name of the :ref:`binary-distribution-format` file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:631
msgid "``packages.wheels.upload-time``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:639
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.url``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:647
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.path``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:655
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.size``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:663
#, fuzzy
#| msgid "``packages``"
msgid "``packages.wheels.hashes``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:671
msgid "``[[packages.attestation-identities]]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:675
#: ../source/specifications/pylock-toml.rst:690
#, fuzzy
#| msgid ":ref:`pyproject-toml-spec`"
msgid "**Inspiration**: :ref:`provenance-object`"
msgstr ":ref:`pyproject-toml-spec`"

#: ../source/specifications/pylock-toml.rst:676
msgid ""
"A recording of the attestations for **any** file recorded for this package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:677
msgid "If available, tools SHOULD include the attestation identities found."
msgstr ""

#: ../source/specifications/pylock-toml.rst:678
msgid ""
"Publisher-specific keys are to be included in the table as-is (i.e. top-"
"level), following the spec at :ref:`index-hosted-attestations`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:686
msgid "``packages.attestation-identities.kind``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:691
msgid "The unique identity of the Trusted Publisher."
msgstr ""

#: ../source/specifications/pylock-toml.rst:697
#, fuzzy
#| msgid "``packages``"
msgid "``[packages.tool]``"
msgstr "``пакеты``"

#: ../source/specifications/pylock-toml.rst:702
msgid ""
"Similar usage as that of the :ref:`pylock-tool` table from the :ref:"
"`pyproject-toml-spec`, but at the package version level instead of at the "
"lock file level (which is also available via :ref:`pylock-tool`)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:705
msgid ""
"Data recorded in the table MUST be disposable (i.e. it MUST NOT affect "
"installation)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:712
msgid "``[tool]``"
msgstr ""

#: ../source/specifications/pylock-toml.rst:717
msgid "See :ref:`pylock-packages-tool`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:731
msgid ""
"The following outlines the steps to be taken to install from a lock file "
"(while the requirements are prescriptive, the general steps and order are a "
"suggestion):"
msgstr ""

#: ../source/specifications/pylock-toml.rst:735
msgid ""
"Gather the extras and dependency groups to install and set ``extras`` and "
"``dependency_groups`` for marker evaluation, respectively."
msgstr ""

#: ../source/specifications/pylock-toml.rst:738
msgid "``extras`` SHOULD be set to the empty set by default."
msgstr ""

#: ../source/specifications/pylock-toml.rst:739
msgid ""
"``dependency_groups`` SHOULD be the set created from :ref:`pylock-default-"
"groups` by default."
msgstr ""

#: ../source/specifications/pylock-toml.rst:742
msgid ""
"Check if the metadata version specified by :ref:`pylock-lock-version` is "
"supported; an error or warning MUST be raised as appropriate."
msgstr ""

#: ../source/specifications/pylock-toml.rst:744
msgid ""
"If :ref:`pylock-requires-python` is specified, check that the environment "
"being installed for meets the requirement; an error MUST be raised if it is "
"not met."
msgstr ""

#: ../source/specifications/pylock-toml.rst:747
msgid ""
"If :ref:`pylock-environments` is specified, check that at least one of the "
"environment marker expressions is satisfied; an error MUST be raised if no "
"expression is satisfied."
msgstr ""

#: ../source/specifications/pylock-toml.rst:750
msgid "For each package listed in :ref:`pylock-packages`:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:752
msgid ""
"If :ref:`pylock-packages-marker` is specified, check if it is satisfied; if "
"it isn't, skip to the next package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:754
msgid ""
"If :ref:`pylock-packages-requires-python` is specified, check if it is "
"satisfied; an error MUST be raised if it isn't."
msgstr ""

#: ../source/specifications/pylock-toml.rst:756
msgid ""
"Check that no other conflicting instance of the package has been slated to "
"be installed; an error about the ambiguity MUST be raised otherwise."
msgstr ""

#: ../source/specifications/pylock-toml.rst:758
msgid ""
"Check that the source of the package is specified appropriately (i.e. there "
"are no conflicting sources in the package entry); an error MUST be raised if "
"any issues are found."
msgstr ""

#: ../source/specifications/pylock-toml.rst:761
msgid "Add the package to the set of packages to install."
msgstr ""

#: ../source/specifications/pylock-toml.rst:763
msgid "For each package to be installed:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:765
msgid "If :ref:`pylock-packages-vcs` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:767
msgid ""
"Clone the repository to the commit ID specified in :ref:`pylock-packages-vcs-"
"commit-id`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:769
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-vcs-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:771
#: ../source/specifications/pylock-toml.rst:777
#: ../source/specifications/pylock-toml.rst:786
#: ../source/specifications/pylock-toml.rst:806
#: ../source/specifications/pylock-toml.rst:821
#, fuzzy
#| msgid "Binary distribution format"
msgid ":ref:`Install <binary-distribution-format>`."
msgstr "Формат распространения двоичных пакетов"

#: ../source/specifications/pylock-toml.rst:773
msgid "Else if :ref:`pylock-packages-directory` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:775
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-directory-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:779
msgid "Else if :ref:`pylock-packages-archive` is set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:781
#: ../source/specifications/pylock-toml.rst:811
msgid "Get the file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:782
msgid ""
"Validate using :ref:`pylock-packages-archive-size` and :ref:`pylock-packages-"
"archive-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:784
msgid ""
":ref:`Build <source-distribution-format-source-tree>` the package, "
"respecting :ref:`pylock-packages-archive-subdirectory`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:788
msgid "Else if there are entries for :ref:`pylock-packages-wheels`:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:790
msgid ""
"Look for the appropriate wheel file based on :ref:`pylock-packages-wheels-"
"name`; if one is not found then move on to :ref:`pylock-packages-sdist` or "
"an error MUST be raised about a lack of source for the project."
msgstr ""

#: ../source/specifications/pylock-toml.rst:794
msgid "Get the file:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:796
msgid "If :ref:`pylock-packages-wheels-path` is set, use it."
msgstr ""

#: ../source/specifications/pylock-toml.rst:797
msgid ""
"Else if :ref:`pylock-packages-wheels-url` is set, try to use it; optionally "
"tools MAY use :ref:`pylock-packages-index` or some tool-specific mechanism "
"to download the selected wheel file (tools MUST NOT try to change what wheel "
"file to download based on what's available; what file to install should be "
"determined in an offline fashion for reproducibility)."
msgstr ""

#: ../source/specifications/pylock-toml.rst:804
msgid ""
"Validate using :ref:`pylock-packages-wheels-size` and :ref:`pylock-packages-"
"wheels-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:808
msgid ""
"Else if no :ref:`pylock-packages-wheels` file is found or :ref:`pylock-"
"packages-sdist` is solely set:"
msgstr ""

#: ../source/specifications/pylock-toml.rst:813
msgid "If :ref:`pylock-packages-sdist-path` is set, use it."
msgstr ""

#: ../source/specifications/pylock-toml.rst:814
msgid ""
"Else if :ref:`pylock-packages-sdist-url` is set, try to use it; tools MAY "
"use :ref:`pylock-packages-index` or some tool-specific mechanism to download "
"the file."
msgstr ""

#: ../source/specifications/pylock-toml.rst:818
msgid ""
"Validate using :ref:`pylock-packages-sdist-size` and :ref:`pylock-packages-"
"sdist-hashes`."
msgstr ""

#: ../source/specifications/pylock-toml.rst:820
msgid ":ref:`Build <source-distribution-format-sdist>` the package."
msgstr ""

#: ../source/specifications/pylock-toml.rst:828
#, fuzzy
#| msgid ""
#| "API version 1.0: Initial version of the API, declared with :pep:`629`."
msgid "April 2025: Initial version, approved via :pep:`751`."
msgstr ""
"Версия API 1.0: Начальная версия API, объявленная с помощью :pep:`629`."

#: ../source/specifications/pypirc.rst:6
msgid "The :file:`.pypirc` file"
msgstr "Файл :file:`.pypirc`"

#: ../source/specifications/pypirc.rst:8
msgid ""
"A :file:`.pypirc` file allows you to define the configuration for :term:"
"`package indexes <Package Index>` (referred to here as \"repositories\"), so "
"that you don't have to enter the URL, username, or password whenever you "
"upload a package with :ref:`twine` or :ref:`flit`."
msgstr ""
"Файл :file:`.pypirc` позволяет определить конфигурацию для :term:`индексов "
"пакетов <Package Index>` (называемых здесь \"репозиториями\"), так что вам "
"не придется вводить URL, имя пользователя или пароль всякий раз, когда вы "
"загружаете пакет с помощью :ref:`twine` или :ref:`flit`."

#: ../source/specifications/pypirc.rst:13
msgid "The format (originally defined by the :ref:`distutils` package) is:"
msgstr "Формат (первоначально определенный пакетом :ref:`distutils`) таков:"

#: ../source/specifications/pypirc.rst:32
msgid ""
"The ``distutils`` section defines an ``index-servers`` field that lists the "
"name of all sections describing a repository."
msgstr ""
"Раздел ``distutils`` определяет поле ``index-servers``, в котором "
"перечислены имена всех разделов, описывающих репозиторий."

#: ../source/specifications/pypirc.rst:35
msgid "Each section describing a repository defines three fields:"
msgstr "В каждом разделе, описывающем хранилище, определены три поля:"

#: ../source/specifications/pypirc.rst:37
msgid "``repository``: The URL of the repository."
msgstr "``репозиторий``: URL-адрес репозитория."

#: ../source/specifications/pypirc.rst:38
msgid "``username``: The registered username on the repository."
msgstr ""
"``имя пользователя``: Зарегистрированное имя пользователя в репозитории."

#: ../source/specifications/pypirc.rst:39
msgid "``password``: The password that will used to authenticate the username."
msgstr ""
"``пароль``: Пароль, который будет использоваться для аутентификации имени "
"пользователя."

#: ../source/specifications/pypirc.rst:43
msgid ""
"Be aware that this stores your password in plain text. For better security, "
"consider an alternative like `keyring`_, setting environment variables, or "
"providing the password on the command line."
msgstr ""
"Имейте в виду, что при этом ваш пароль сохраняется в виде обычного текста. "
"Для большей безопасности воспользуйтесь альтернативой вроде `keyring`_, "
"установите переменные окружения или введите пароль в командной строке."

#: ../source/specifications/pypirc.rst:47
msgid ""
"Otherwise, set the permissions on :file:`.pypirc` so that only you can view "
"or modify it. For example, on Linux or macOS, run:"
msgstr ""
"В противном случае установите права на :file:`.pypirc`, чтобы только вы "
"могли просматривать или изменять его. Например, в Linux или macOS выполните "
"команду:"

#: ../source/specifications/pypirc.rst:57
msgid "Common configurations"
msgstr "Общие конфигурации"

#: ../source/specifications/pypirc.rst:61
msgid ""
"These examples apply to :ref:`twine`. Other projects (e.g. :ref:`flit`) also "
"use :file:`.pypirc`, but with different defaults. Please refer to each "
"project's documentation for more details and usage instructions."
msgstr ""
"Эти примеры относятся к :ref:`twine`. Другие проекты (например, :ref:`flit`) "
"также используют :file:`.pypirc`, но с другими значениями по умолчанию. За "
"более подробной информацией и инструкциями по использованию обращайтесь к "
"документации каждого проекта."

#: ../source/specifications/pypirc.rst:65
msgid ""
"Twine's default configuration mimics a :file:`.pypirc` with repository "
"sections for PyPI and TestPyPI:"
msgstr ""
"Конфигурация Twine по умолчанию имитирует файл :file:`.pypirc` с разделами "
"репозитория для PyPI и TestPyPI:"

#: ../source/specifications/pypirc.rst:81
msgid ""
"Twine will add additional configuration from :file:`$HOME/.pypirc`, the "
"command line, and environment variables to this default configuration."
msgstr ""
"Twine добавит к этой конфигурации по умолчанию дополнительные настройки из :"
"file:`$HOME/.pypirc`, командной строки и переменных окружения."

#: ../source/specifications/pypirc.rst:85
msgid "Using a PyPI token"
msgstr "Использование токена PyPI"

#: ../source/specifications/pypirc.rst:87
msgid ""
"To set your `API token`_ for PyPI, you can create a :file:`$HOME/.pypirc` "
"similar to:"
msgstr ""
"Чтобы установить свой `API-токен`_ для PyPI, вы можете создать :file:`$HOME/."
"pypirc`, подобный этому:"

#: ../source/specifications/pypirc.rst:96
msgid ""
"For :ref:`TestPyPI <using-test-pypi>`, add a ``[testpypi]`` section, using "
"the API token from your TestPyPI account."
msgstr ""
"Для :ref:`TestPyPI <using-test-pypi>`, добавьте секцию ``[testpypi]``, "
"используя API-токен от вашего аккаунта TestPyPI."

#: ../source/specifications/pypirc.rst:102
msgid "Using another package index"
msgstr "Использование индекса другого пакета"

#: ../source/specifications/pypirc.rst:104
msgid ""
"To configure an additional repository, you'll need to redefine the ``index-"
"servers`` field to include the repository name. Here is a complete example "
"of a :file:`$HOME/.pypirc` for PyPI, TestPyPI, and a private repository:"
msgstr ""
"Чтобы настроить дополнительный репозиторий, вам нужно переопределить поле "
"``index-servers``, включив в него имя репозитория. Вот полный пример :file:"
"`$HOME/.pypirc` для PyPI, TestPyPI и частного репозитория:"

#: ../source/specifications/pypirc.rst:131
msgid ""
"Instead of using the ``password`` field, consider saving your API tokens and "
"passwords securely using `keyring`_ (which is installed by Twine):"
msgstr ""
"Вместо того чтобы использовать поле ``пароль``, подумайте о безопасном "
"сохранении API-токенов и паролей с помощью `keyring`_ (которое "
"устанавливается в Twine):"

#: ../source/specifications/pyproject-toml.rst:6
msgid "``pyproject.toml`` specification"
msgstr "Спецификация ``pyproject.toml``"

#: ../source/specifications/pyproject-toml.rst:10
msgid ""
"This is a **technical, formal specification**. For a gentle, user-friendly "
"guide to ``pyproject.toml``, see :ref:`writing-pyproject-toml`."
msgstr ""
"Это **техническая, формальная спецификация**. Мягкое, удобное руководство по "
"``pyproject.toml`` см. в :ref:``writing-pyproject-toml``."

#: ../source/specifications/pyproject-toml.rst:14
msgid ""
"The ``pyproject.toml`` file acts as a configuration file for packaging-"
"related tools (as well as other tools)."
msgstr ""
"Файл ``pyproject.toml`` выступает в качестве файла конфигурации для "
"инструментов, связанных с упаковкой (а также других инструментов)."

#: ../source/specifications/pyproject-toml.rst:17
msgid "This specification was originally defined in :pep:`518` and :pep:`621`."
msgstr ""
"Эта спецификация была первоначально определена в :pep:`518` и :pep:`621`."

#: ../source/specifications/pyproject-toml.rst:19
msgid ""
"The ``pyproject.toml`` file is written in `TOML <https://toml.io>`_. Three "
"tables are currently specified, namely :ref:`[build-system] <pyproject-build-"
"system-table>`, :ref:`[project] <pyproject-project-table>` and :ref:`[tool] "
"<pyproject-tool-table>`. Other tables are reserved for future use (tool-"
"specific configuration should use the ``[tool]`` table)."
msgstr ""
"Файл ``pyproject.toml`` написан на языке ``TOML <https://toml.io>`_. В "
"настоящее время заданы три таблицы, а именно :ref:`[build-system] <pyproject-"
"build-system-table>`, :ref:`[project] <pyproject-project-table>` и :ref:"
"`[tool] <pyproject-tool-table>`. Остальные таблицы зарезервированы для "
"будущего использования (для конфигурации конкретных инструментов следует "
"использовать таблицу ``[tool]``)."

#: ../source/specifications/pyproject-toml.rst:29
msgid "Declaring build system dependencies: the ``[build-system]`` table"
msgstr "Объявление зависимостей от системы сборки: таблица ``[build-system]``"

#: ../source/specifications/pyproject-toml.rst:31
msgid ""
"The ``[build-system]`` table declares any Python level dependencies that "
"must be installed in order to run the project's build system successfully."
msgstr ""
"В таблице ``[build-system]`` объявляются все зависимости уровня Python, "
"которые должны быть установлены для успешного запуска системы сборки проекта."

#: ../source/specifications/pyproject-toml.rst:37
msgid ""
"The ``[build-system]`` table is used to store build-related data. Initially, "
"only one key of the table is valid and is mandatory for the table: "
"``requires``. This key must have a value of a list of strings representing "
"dependencies required to execute the build system. The strings in this list "
"follow the :ref:`version specifier specification <version-specifiers>`."
msgstr ""
"Таблица ``[build-system]`` используется для хранения данных, связанных со "
"сборкой. Изначально в таблице действует только один ключ, который является "
"обязательным для таблицы: ``requires``. Этот ключ должен иметь значение, "
"состоящее из списка строк, представляющих зависимости, необходимые для "
"выполнения системы сборки. Строки в этом списке соответствуют :ref:"
"`спецификации спецификатора версии <version-specifiers>`."

#: ../source/specifications/pyproject-toml.rst:44
msgid ""
"An example ``[build-system]`` table for a project built with ``setuptools`` "
"is:"
msgstr ""
"Пример таблицы ``[build-system]`` для проекта, собранного с помощью "
"``setuptools``:"

#: ../source/specifications/pyproject-toml.rst:53
msgid ""
"Build tools are expected to use the example configuration file above as "
"their default semantics when a ``pyproject.toml`` file is not present."
msgstr ""
"Предполагается, что инструменты сборки будут использовать приведенный выше "
"пример конфигурационного файла в качестве семантики по умолчанию, если файл "
"``pyproject.toml`` отсутствует."

#: ../source/specifications/pyproject-toml.rst:56
msgid ""
"Tools should not require the existence of the ``[build-system]`` table. A "
"``pyproject.toml`` file may be used to store configuration details other "
"than build-related data and thus lack a ``[build-system]`` table "
"legitimately. If the file exists but is lacking the ``[build-system]`` table "
"then the default values as specified above should be used. If the table is "
"specified but is missing required fields then the tool should consider it an "
"error."
msgstr ""
"Инструменты не должны требовать наличия таблицы ``[build-system]``. Файл "
"``pyproject.toml`` может использоваться для хранения конфигурационных "
"данных, отличных от данных, связанных со сборкой, и поэтому в нем может "
"отсутствовать таблица ``[build-system]``, что вполне законно. Если файл "
"существует, но в нем отсутствует таблица ``[build-system]``, то следует "
"использовать значения по умолчанию, как указано выше. Если таблица указана, "
"но в ней отсутствуют необходимые поля, то инструмент должен считать это "
"ошибкой."

#: ../source/specifications/pyproject-toml.rst:65
msgid ""
"To provide a type-specific representation of the resulting data from the "
"TOML file for illustrative purposes only, the following `JSON Schema "
"<https://json-schema.org>`_ would match the data format:"
msgstr ""
"Чтобы обеспечить специфическое представление результирующих данных из файла "
"TOML только для иллюстрации, следующая `JSON Schema <https://json-schema."
"org>`_ будет соответствовать формату данных:"

#: ../source/specifications/pyproject-toml.rst:103
msgid "Declaring project metadata: the ``[project]`` table"
msgstr "Объявление метаданных проекта: таблица ``[project]``"

#: ../source/specifications/pyproject-toml.rst:105
msgid ""
"The ``[project]`` table specifies the project's :ref:`core metadata <core-"
"metadata>`."
msgstr ""
"Таблица ``[project]`` определяет метаданные ядра проекта <core-metadata>`."

#: ../source/specifications/pyproject-toml.rst:107
msgid ""
"There are two kinds of metadata: *static* and *dynamic*. Static metadata is "
"specified in the ``pyproject.toml`` file directly and cannot be specified or "
"changed by a tool (this includes data *referred* to by the metadata, e.g. "
"the contents of files referenced by the metadata). Dynamic metadata is "
"listed via the ``dynamic`` key (defined later in this specification) and "
"represents metadata that a tool will later provide."
msgstr ""
"Существует два вида метаданных: *статические* и *динамические*. Статические "
"метаданные указываются непосредственно в файле ``pyproject.toml`` и не могут "
"быть указаны или изменены инструментом (сюда входят данные, на которые "
"ссылаются метаданные, например, содержимое файлов, на которые ссылаются "
"метаданные). Динамические метаданные перечисляются с помощью ключа "
"``dynamic`` (определяется позже в этой спецификации) и представляют собой "
"метаданные, которые инструмент предоставит позже."

#: ../source/specifications/pyproject-toml.rst:115
msgid ""
"The lack of a ``[project]`` table implicitly means the :term:`build backend "
"<Build Backend>` will dynamically provide all keys."
msgstr ""
"Отсутствие таблицы ``[project]`` неявно означает, что :term:`build backend "
"<Build Backend>` будет динамически предоставлять все ключи."

#: ../source/specifications/pyproject-toml.rst:118
msgid "The only keys required to be statically defined are:"
msgstr ""
"Единственными ключами, которые должны быть определены статически, являются:"

#: ../source/specifications/pyproject-toml.rst:122
msgid ""
"The keys which are required but may be specified *either* statically or "
"listed as dynamic are:"
msgstr ""
"Ключи, которые являются обязательными, но могут быть указаны либо "
"статически, либо как динамические, следующие:"

#: ../source/specifications/pyproject-toml.rst:127
msgid ""
"All other keys are considered optional and may be specified statically, "
"listed as dynamic, or left unspecified."
msgstr ""
"Все остальные ключи считаются необязательными и могут быть указаны "
"статически, перечислены как динамические или не указаны."

#: ../source/specifications/pyproject-toml.rst:130
msgid "The complete list of keys allowed in the ``[project]`` table are:"
msgstr "Полный список ключей, допустимых в таблице ``[project]``, таков:"

#: ../source/specifications/pyproject-toml.rst:132
msgid "``authors``"
msgstr "``авторы``"

#: ../source/specifications/pyproject-toml.rst:134
msgid "``dependencies``"
msgstr "``зависимости``"

#: ../source/specifications/pyproject-toml.rst:136
#: ../source/specifications/pyproject-toml.rst:572
msgid "``dynamic``"
msgstr "``динамический``"

#: ../source/specifications/pyproject-toml.rst:137
msgid "``entry-points``"
msgstr "``точки входа``"

#: ../source/specifications/pyproject-toml.rst:138
msgid "``gui-scripts``"
msgstr "``gui-скрипт``"

#: ../source/specifications/pyproject-toml.rst:139
#: ../source/specifications/pyproject-toml.rst:480
#, fuzzy
#| msgid "``name``"
msgid "``import-names``"
msgstr "``name``"

#: ../source/specifications/pyproject-toml.rst:140
#: ../source/specifications/pyproject-toml.rst:531
msgid "``import-namespaces``"
msgstr ""

#: ../source/specifications/pyproject-toml.rst:144
msgid "``maintainers``"
msgstr "``мастера``"

#: ../source/specifications/pyproject-toml.rst:146
msgid "``optional-dependencies``"
msgstr "``опциональные зависимости``"

#: ../source/specifications/pyproject-toml.rst:159
#: ../source/specifications/pyproject-toml.rst:174
#: ../source/specifications/pyproject-toml.rst:189
#: ../source/specifications/pyproject-toml.rst:243
#: ../source/specifications/pyproject-toml.rst:255
msgid "TOML_ type: string"
msgstr "Тип TOML_: строка"

#: ../source/specifications/pyproject-toml.rst:160
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name <core-"
"metadata-name>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Name <core-"
"metadata-name>`"

#: ../source/specifications/pyproject-toml.rst:163
msgid "The name of the project."
msgstr "Название проекта."

#: ../source/specifications/pyproject-toml.rst:165
msgid ""
"Tools SHOULD :ref:`normalize <name-normalization>` this name, as soon as it "
"is read for internal consistency."
msgstr ""
"Инструменты ДОЛЖНЫ :ref:`нормализовать <имя-нормализация>` это имя, как "
"только оно будет прочитано для внутренней согласованности."

#: ../source/specifications/pyproject-toml.rst:175
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Version "
"<core-metadata-version>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Version "
"<core-metadata-version>`"

#: ../source/specifications/pyproject-toml.rst:178
msgid ""
"The version of the project, as defined in the :ref:`Version specifier "
"specification <version-specifiers>`."
msgstr ""
"Версия проекта, как определено в спецификации спецификатора версии <version-"
"specifiers>`."

#: ../source/specifications/pyproject-toml.rst:181
msgid "Users SHOULD prefer to specify already-normalized versions."
msgstr "Пользователи ДОЛЖНЫ предпочитать указывать уже нормализованные версии."

#: ../source/specifications/pyproject-toml.rst:190
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Summary "
"<core-metadata-summary>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Summary "
"<core-metadata-summary>`"

#: ../source/specifications/pyproject-toml.rst:193
msgid ""
"The summary description of the project in one line. Tools MAY error if this "
"includes multiple lines."
msgstr ""
"Краткое описание проекта в одной строке. Инструменты MAY ошибаются, если оно "
"включает несколько строк."

#: ../source/specifications/pyproject-toml.rst:202
msgid "TOML_ type: string or table"
msgstr "Тип TOML_: строка или таблица"

#: ../source/specifications/pyproject-toml.rst:203
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Description "
"<core-metadata-description>` and :ref:`Description-Content-Type <core-"
"metadata-description-content-type>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Description "
"<core-metadata-description>` и :ref:`Description-Content-Type <core-metadata-"
"description-content-type>`"

#: ../source/specifications/pyproject-toml.rst:207
msgid "The full description of the project (i.e. the README)."
msgstr "Полное описание проекта (то есть README)."

#: ../source/specifications/pyproject-toml.rst:209
msgid ""
"The key accepts either a string or a table. If it is a string then it is a "
"path relative to ``pyproject.toml`` to a text file containing the full "
"description. Tools MUST assume the file's encoding is UTF-8. If the file "
"path ends in a case-insensitive ``.md`` suffix, then tools MUST assume the "
"content-type is ``text/markdown``. If the file path ends in a case-"
"insensitive ``.rst``, then tools MUST assume the content-type is ``text/x-"
"rst``. If a tool recognizes more extensions than this PEP, they MAY infer "
"the content-type for the user without specifying this key as ``dynamic``. "
"For all unrecognized suffixes when a content-type is not provided, tools "
"MUST raise an error."
msgstr ""
"Ключ принимает значение либо строки, либо таблицы. Если это строка, то это "
"путь относительно ``pyproject.toml`` к текстовому файлу, содержащему полное "
"описание. Инструменты ДОЛЖНЫ считать, что кодировка файла - UTF-8. Если путь "
"к файлу заканчивается суффиксом ``.md`` без учета регистра, то инструменты "
"ДОЛЖНЫ считать, что тип содержимого - ``text/markdown``. Если путь к файлу "
"заканчивается суффиксом ``.rst``, то инструменты ДОЛЖНЫ считать, что тип "
"содержимого - ``text/x-rst``. Если инструмент распознает больше расширений, "
"чем этот PEP, он МОЖЕТ определить тип содержимого для пользователя, не "
"указывая этот ключ как ``динамический``. Для всех нераспознанных суффиксов, "
"когда тип содержимого не указан, инструменты ДОЛЖНЫ выдавать ошибку."

#: ../source/specifications/pyproject-toml.rst:220
msgid ""
"The ``readme`` key may also take a table. The ``file`` key has a string "
"value representing a path relative to ``pyproject.toml`` to a file "
"containing the full description. The ``text`` key has a string value which "
"is the full description. These keys are mutually-exclusive, thus tools MUST "
"raise an error if the metadata specifies both keys."
msgstr ""
"Ключ ``readme`` также может принимать вид таблицы. Ключ ``file`` имеет "
"строковое значение, представляющее собой путь относительно ``pyproject."
"toml`` к файлу, содержащему полное описание. Ключ ``text`` имеет строковое "
"значение, которое является полным описанием. Эти ключи являются "
"взаимоисключающими, поэтому инструменты ДОЛЖНЫ выдавать ошибку, если в "
"метаданных указаны оба ключа."

#: ../source/specifications/pyproject-toml.rst:227
msgid ""
"A table specified in the ``readme`` key also has a ``content-type`` key "
"which takes a string specifying the content-type of the full description. A "
"tool MUST raise an error if the metadata does not specify this key in the "
"table. If the metadata does not specify the ``charset`` parameter, then it "
"is assumed to be UTF-8. Tools MAY support other encodings if they choose to. "
"Tools MAY support alternative content-types which they can transform to a "
"content-type as supported by the :ref:`core metadata <core-metadata>`. "
"Otherwise tools MUST raise an error for unsupported content-types."
msgstr ""
"Таблица, указанная в ключе ``readme'', также имеет ключ ``content-type'', "
"который принимает строку, определяющую тип содержимого полного описания. "
"Инструмент ДОЛЖЕН выдать ошибку, если метаданные не указывают этот ключ в "
"таблице. Если в метаданных не указан параметр ``charset'', то "
"предполагается, что это UTF-8. Инструменты МОГУТ поддерживать другие "
"кодировки по своему усмотрению. Инструменты МОГУТ поддерживать "
"альтернативные типы содержимого, которые они могут преобразовать в тип "
"содержимого, поддерживаемый :ref:`core metadata <core-metadata>`. В "
"противном случае инструменты ДОЛЖНЫ выдавать ошибку о неподдерживаемых типах "
"содержимого."

#: ../source/specifications/pyproject-toml.rst:244
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Python <core-metadata-requires-python>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Requires-"
"Python <core-metadata-requires-python>`"

#: ../source/specifications/pyproject-toml.rst:247
msgid "The Python version requirements of the project."
msgstr "Требования к версии Python для проекта."

#: ../source/specifications/pyproject-toml.rst:256
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License-"
"Expression <core-metadata-license-expression>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`License-"
"Expression <core-metadata-license-expression>`."

#: ../source/specifications/pyproject-toml.rst:259
#, fuzzy
#| msgid ""
#| "Text string that is a valid SPDX license expression as defined in :pep:"
#| "`639`. Tools SHOULD validate and perform case normalization of the "
#| "expression."
msgid ""
"Text string that is a valid SPDX :term:`license expression <License "
"Expression>`, as specified in :doc:`/specifications/license-expression`. "
"Tools SHOULD validate and perform case normalization of the expression."
msgstr ""
"Текстовая строка, которая является действительным выражением лицензии SPDX, "
"как определено в :pep:`639`. Инструменты ДОЛЖНЫ проверять и выполнять "
"нормализацию регистра выражения."

#: ../source/specifications/pyproject-toml.rst:264
msgid ""
"This key should **only** be specified if the license expression for any and "
"all distribution files created by a build backend using the :file:`pyproject."
"toml` is the same as the one specified. If the license expression will "
"differ then it should either be specified as dynamic or not set at all."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:271
#, fuzzy
#| msgid "PyPA specifications"
msgid "Legacy specification"
msgstr "Спецификации PyPA"

#: ../source/specifications/pyproject-toml.rst:273
msgid "TOML_ type: table"
msgstr "TOML_ тип: таблица"

#: ../source/specifications/pyproject-toml.rst:274
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License-"
#| "File <core-metadata-license-file>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License "
"<core-metadata-license>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`License-"
"File <core-metadata-license-file>`"

#: ../source/specifications/pyproject-toml.rst:277
#, fuzzy
#| msgid ""
#| "The table may have one of two keys. The ``file`` key has a string value "
#| "that is a file path relative to ``pyproject.toml`` to the file which "
#| "contains the license for the project. Tools MUST assume the file's "
#| "encoding is UTF-8. The ``text`` key has a string value which is the "
#| "license of the project.  These keys are mutually exclusive, so a tool "
#| "MUST raise an error if the metadata specifies both keys."
msgid ""
"The table may have one of two keys. The ``file`` key has a string value that "
"is a file path relative to :file:`pyproject.toml` to the file which contains "
"the license for the project. Tools MUST assume the file's encoding is UTF-8. "
"The ``text`` key has a string value which is the license of the project.  "
"These keys are mutually exclusive, so a tool MUST raise an error if the "
"metadata specifies both keys."
msgstr ""
"Таблица может иметь один из двух ключей. Ключ ``file`` имеет строковое "
"значение, которое представляет собой путь к файлу относительно ``pyproject."
"toml`` к файлу, содержащему лицензию на проект. Инструменты ДОЛЖНЫ считать, "
"что кодировка файла - UTF-8. Ключ ``text`` имеет строковое значение, которое "
"является лицензией проекта.  Эти ключи являются взаимоисключающими, поэтому "
"инструмент ДОЛЖЕН выдать ошибку, если в метаданных указаны оба ключа."

#: ../source/specifications/pyproject-toml.rst:284
msgid ""
"The table subkeys were deprecated by :pep:`639` in favor of the string value."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:291
#: ../source/specifications/pyproject-toml.rst:374
#: ../source/specifications/pyproject-toml.rst:386
#: ../source/specifications/pyproject-toml.rst:482
#: ../source/specifications/pyproject-toml.rst:533
msgid "TOML_ type: array of strings"
msgstr "Тип TOML_: массив строк"

#: ../source/specifications/pyproject-toml.rst:292
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License-File "
"<core-metadata-license-file>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`License-"
"File <core-metadata-license-file>`"

#: ../source/specifications/pyproject-toml.rst:295
msgid ""
"An array specifying paths in the project source tree relative to the project "
"root directory (i.e. directory containing :file:`pyproject.toml` or legacy "
"project configuration files, e.g. :file:`setup.py`, :file:`setup.cfg`, etc.) "
"to file(s) containing licenses and other legal notices to be distributed "
"with the package."
msgstr ""
"Массив, указывающий пути в дереве исходных текстов проекта относительно "
"корневого каталога проекта (т.е. каталога, содержащего :file:`pyproject."
"toml` или унаследованные файлы конфигурации проекта, например :file:`setup."
"py`, :file:`setup.cfg` и т.д.) к файлу(ам) с лицензиями и другими "
"юридическими уведомлениями, которые будут распространяться вместе с пакетом."

#: ../source/specifications/pyproject-toml.rst:301
#, fuzzy
#| msgid "The strings MUST contain valid glob patterns, as specified below:"
msgid ""
"The strings MUST contain valid glob patterns, as specified in :doc:`/"
"specifications/glob-patterns`."
msgstr "Строки ДОЛЖНЫ содержать правильные шаблоны glob, как указано ниже:"

#: ../source/specifications/pyproject-toml.rst:304
#, fuzzy
#| msgid ""
#| "Patterns are relative to the directory containing :file:`pyproject.toml`, "
#| "and thus may not start with a slash character."
msgid ""
"Patterns are relative to the directory containing :file:`pyproject.toml`,"
msgstr ""
"Шаблоны являются относительными к директории, содержащей :file:`pyproject."
"toml`, и поэтому не могут начинаться с символа слэша."

#: ../source/specifications/pyproject-toml.rst:306
msgid ""
"Tools MUST assume that license file content is valid UTF-8 encoded text, and "
"SHOULD validate this and raise an error if it is not."
msgstr ""
"Инструменты ДОЛЖНЫ предполагать, что содержимое файла лицензии является "
"правильным текстом в кодировке UTF-8, и ДОЛЖНЫ проверять его и выдавать "
"ошибку, если это не так."

#: ../source/specifications/pyproject-toml.rst:309
msgid "Build tools:"
msgstr "Сборка инструментов:"

#: ../source/specifications/pyproject-toml.rst:311
msgid ""
"MUST include all files matched by a listed pattern in all distribution "
"archives."
msgstr ""
"ОБЯЗАТЕЛЬНО включите все файлы, соответствующие перечисленному шаблону, во "
"все архивы дистрибутива."

#: ../source/specifications/pyproject-toml.rst:313
msgid ""
"MUST list each matched file path under a License-File field in the Core "
"Metadata."
msgstr ""
"ДОЛЖЕН перечислить каждый совпадающий путь к файлу в поле License-File в "
"основных метаданных."

#: ../source/specifications/pyproject-toml.rst:316
msgid ""
"If the ``license-files`` key is present and is set to a value of an empty "
"array, then tools MUST NOT include any license files and MUST NOT raise an "
"error. If the ``license-files`` key is not defined, tools can decide how to "
"handle license files. For example they can choose not to include any files "
"or use their own logic to discover the appropriate files in the distribution."
msgstr ""
"Если ключ ``license-files`` присутствует и имеет значение пустого массива, "
"то инструменты НЕ ДОЛЖНЫ включать никакие файлы лицензий и НЕ ДОЛЖНЫ "
"выдавать ошибку. Если ключ ``license-files`` не определен, инструменты могут "
"сами решать, как обращаться с файлами лицензий. Например, они могут не "
"включать никаких файлов или использовать собственную логику для обнаружения "
"соответствующих файлов в дистрибутиве."

#: ../source/specifications/pyproject-toml.rst:330
msgid "TOML_ type: Array of inline tables with string keys and values"
msgstr "TOML_ type: Массив строчных таблиц со строковыми ключами и значениями"

#: ../source/specifications/pyproject-toml.rst:331
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Author <core-"
"metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :ref:"
"`Maintainer <core-metadata-maintainer>`, and :ref:`Maintainer-email <core-"
"metadata-maintainer-email>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Author "
"<core-metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :"
"ref:`Maintainer <core-metadata-maintainer>`, и :ref:`Maintainer-email <core-"
"metadata-maintainer-email>`"

#: ../source/specifications/pyproject-toml.rst:337
msgid ""
"The people or organizations considered to be the \"authors\" of the project. "
"The exact meaning is open to interpretation — it may list the original or "
"primary authors, current maintainers, or owners of the package."
msgstr ""
"Люди или организации, считающиеся \"авторами\" проекта. Точное значение "
"открыто для интерпретации - это может быть список оригинальных или основных "
"авторов, текущих сопровождающих или владельцев пакета."

#: ../source/specifications/pyproject-toml.rst:342
msgid ""
"The \"maintainers\" key is similar to \"authors\" in that its exact meaning "
"is open to interpretation."
msgstr ""
"Ключ \"maintainers\" похож на \"authors\" тем, что его точное значение можно "
"интерпретировать."

#: ../source/specifications/pyproject-toml.rst:345
msgid ""
"These keys accept an array of tables with 2 keys: ``name`` and ``email``. "
"Both values must be strings. The ``name`` value MUST be a valid email name "
"(i.e. whatever can be put as a name, before an email, in :rfc:`822`) and not "
"contain commas. The ``email`` value MUST be a valid email address. Both keys "
"are optional, but at least one of the keys must be specified in the table."
msgstr ""
"Эти ключи принимают массив таблиц с 2 ключами: ``имя`` и ``email``. Оба "
"значения должны быть строками. Значение ``name`` ДОЛЖНО быть действительным "
"именем электронной почты (т.е. тем, что может быть указано в качестве имени "
"перед электронной почтой в :rfc:`822`) и не содержать запятых. Значение "
"``email`` ДОЛЖНО быть действительным адресом электронной почты. Оба ключа "
"необязательны, но хотя бы один из них должен быть указан в таблице."

#: ../source/specifications/pyproject-toml.rst:352
msgid ""
"Using the data to fill in :ref:`core metadata <core-metadata>` is as follows:"
msgstr ""
"Использование данных для заполнения :ref:`core metadata <core-metadata>` "
"осуществляется следующим образом:"

#: ../source/specifications/pyproject-toml.rst:355
msgid ""
"If only ``name`` is provided, the value goes in :ref:`Author <core-metadata-"
"author>` or :ref:`Maintainer <core-metadata-maintainer>` as appropriate."
msgstr ""
"Если указано только ``имя``, значение помещается в :ref:`Author <core-"
"metadata-author>` или :ref:`Maintainer <core-metadata-maintainer>` в "
"зависимости от ситуации."

#: ../source/specifications/pyproject-toml.rst:358
msgid ""
"If only ``email`` is provided, the value goes in :ref:`Author-email <core-"
"metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-"
"email>` as appropriate."
msgstr ""
"Если указан только ``email``, значение помещается в :ref:`Author-email <core-"
"metadata-author-email>` или :ref:`Maintainer-email <core-metadata-maintainer-"
"email>` в зависимости от ситуации."

#: ../source/specifications/pyproject-toml.rst:362
msgid ""
"If both ``email`` and ``name`` are provided, the value goes in :ref:`Author-"
"email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-"
"maintainer-email>` as appropriate, with the format ``{name} <{email}>``."
msgstr ""
"Если указаны и ``email``, и ``name``, значение помещается в :ref:`Author-"
"email <core-metadata-author-email>` или :ref:`Maintainer-email <core-"
"metadata-maintainer-email>` в зависимости от ситуации, с форматом ``{name} "
"<{email}>```."

#: ../source/specifications/pyproject-toml.rst:366
msgid "Multiple values should be separated by commas."
msgstr "Несколько значений должны быть разделены запятыми."

#: ../source/specifications/pyproject-toml.rst:375
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Keywords "
"<core-metadata-keywords>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Keywords "
"<core-metadata-keywords>`"

#: ../source/specifications/pyproject-toml.rst:378
msgid "The keywords for the project."
msgstr "Ключевые слова для проекта."

#: ../source/specifications/pyproject-toml.rst:387
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Classifier "
"<core-metadata-classifier>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Classifier "
"<core-metadata-classifier>`"

#: ../source/specifications/pyproject-toml.rst:390
msgid "Trove classifiers which apply to the project."
msgstr "Классификаторы Trove, применимые к проекту."

#: ../source/specifications/pyproject-toml.rst:392
msgid ""
"The use of ``License ::`` classifiers is deprecated and tools MAY issue a "
"warning informing users about that. Build tools MAY raise an error if both "
"the ``license`` string value (translating to ``License-Expression`` metadata "
"field) and the ``License ::`` classifiers are used."
msgstr ""
"Использование классификаторов ``License ::`` устарело, и инструменты МОГУТ "
"выдавать предупреждение, информирующее об этом пользователей. Инструменты "
"сборки МОГУТ выдать ошибку, если используется как строковое значение "
"``license`` (перевод в поле метаданных ``License-Expression``), так и "
"классификаторы ``License ::``."

#: ../source/specifications/pyproject-toml.rst:404
msgid "TOML_ type: table with keys and values of strings"
msgstr "Тип TOML_: таблица с ключами и значениями строк"

#: ../source/specifications/pyproject-toml.rst:405
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Project-URL "
"<core-metadata-project-url>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Project-URL "
"<core-metadata-project-url>`"

#: ../source/specifications/pyproject-toml.rst:408
msgid ""
"A table of URLs where the key is the URL label and the value is the URL "
"itself. See :ref:`well-known-project-urls` for normalization rules and well-"
"known rules when processing metadata for presentation."
msgstr ""
"Таблица URL-адресов, где ключом является метка URL, а значением - сам URL. "
"См. :ref:`well-known-project-urls` для правил нормализации и общеизвестных "
"правил при обработке метаданных для представления."

#: ../source/specifications/pyproject-toml.rst:418
msgid "Entry points"
msgstr "Точки входа"

#: ../source/specifications/pyproject-toml.rst:420
msgid ""
"TOML_ type: table (``[project.scripts]``, ``[project.gui-scripts]``, and "
"``[project.entry-points]``)"
msgstr ""
"Тип TOML_: таблица (``[project.scripts]``, ``[project.gui-scripts]``, и "
"``[project.entry-points]``)"

#: ../source/specifications/pyproject-toml.rst:422
msgid ":ref:`Entry points specification <entry-points>`"
msgstr ":ref:`Спецификация точек входа <entry-points>`"

#: ../source/specifications/pyproject-toml.rst:424
msgid ""
"There are three tables related to entry points. The ``[project.scripts]`` "
"table corresponds to the ``console_scripts`` group in the :ref:`entry points "
"specification <entry-points>`. The key of the table is the name of the entry "
"point and the value is the object reference."
msgstr ""
"Существует три таблицы, связанные с точками входа. Таблица ``[project."
"scripts]`` соответствует группе ``console_scripts`` в :ref:`спецификации "
"точек входа <entry-points>`. Ключом таблицы является имя точки входа, а "
"значением - ссылка на объект."

#: ../source/specifications/pyproject-toml.rst:430
msgid ""
"The ``[project.gui-scripts]`` table corresponds to the ``gui_scripts`` group "
"in the :ref:`entry points specification <entry-points>`. Its format is the "
"same as ``[project.scripts]``."
msgstr ""
"Таблица ``[project.gui-scripts]`` соответствует группе ``gui_scripts`` в "
"спецификации точек входа <entry-points>`. Ее формат такой же, как и у "
"``[project.scripts]``."

#: ../source/specifications/pyproject-toml.rst:434
msgid ""
"The ``[project.entry-points]`` table is a collection of tables. Each sub-"
"table's name is an entry point group. The key and value semantics are the "
"same as ``[project.scripts]``. Users MUST NOT create nested sub-tables but "
"instead keep the entry point groups to only one level deep."
msgstr ""
"Таблица ``[project.entry-points]`` представляет собой набор таблиц. Имя "
"каждой подтаблицы - это группа точек входа. Семантика ключей и значений "
"такая же, как и в таблице ``[project.scripts]``. Пользователи НЕ ДОЛЖНЫ "
"создавать вложенные подтаблицы, а должны ограничиваться группами точек входа "
"только одного уровня."

#: ../source/specifications/pyproject-toml.rst:440
msgid ""
"Build back-ends MUST raise an error if the metadata defines a ``[project."
"entry-points.console_scripts]`` or ``[project.entry-points.gui_scripts]`` "
"table, as they would be ambiguous in the face of ``[project.scripts]`` and "
"``[project.gui-scripts]``, respectively."
msgstr ""
"Внутренние компоненты сборки ДОЛЖНЫ выдавать ошибку, если метаданные "
"определяют таблицу ``[project.entry-points.console_scripts]`` или ``[project."
"entry-points.gui_scripts]``, поскольку они будут неоднозначными перед лицом "
"``[project.scripts]`` и ``[project.gui-scripts]``, соответственно."

#: ../source/specifications/pyproject-toml.rst:453
msgid ""
"TOML_ type: Array of :pep:`508` strings (``dependencies``), and a table with "
"values of arrays of :pep:`508` strings (``optional-dependencies``)"
msgstr ""
"Тип TOML_: Массив строк :pep:`508` (``зависимости``), и таблица со "
"значениями массивов строк :pep:`508` (``опциональные-зависимости``)"

#: ../source/specifications/pyproject-toml.rst:456
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-"
"Dist <core-metadata-requires-dist>` and :ref:`Provides-Extra <core-metadata-"
"provides-extra>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Requires-"
"Dist <core-metadata-requires-dist>` и :ref:`Provides-Extra <core-metadata-"
"provides-extra>`"

#: ../source/specifications/pyproject-toml.rst:460
msgid "The (optional) dependencies of the project."
msgstr "Зависимости проекта (необязательно)."

#: ../source/specifications/pyproject-toml.rst:462
msgid ""
"For ``dependencies``, it is a key whose value is an array of strings. Each "
"string represents a dependency of the project and MUST be formatted as a "
"valid :pep:`508` string. Each string maps directly to a :ref:`Requires-Dist "
"<core-metadata-requires-dist>` entry."
msgstr ""
"Для ``зависимостей`` это ключ, значением которого является массив строк. "
"Каждая строка представляет зависимость проекта и ДОЛЖНА быть отформатирована "
"как корректная строка :pep:`508`. Каждая строка сопоставляется "
"непосредственно с записью :ref:`Requires-Dist <core-metadata-requires-dist>`."

#: ../source/specifications/pyproject-toml.rst:467
msgid ""
"For ``optional-dependencies``, it is a table where each key specifies an "
"extra and whose value is an array of strings. The strings of the arrays must "
"be valid :pep:`508` strings. The keys MUST be valid values for :ref:"
"`Provides-Extra <core-metadata-provides-extra>`. Each value in the array "
"thus becomes a corresponding :ref:`Requires-Dist <core-metadata-requires-"
"dist>` entry for the matching :ref:`Provides-Extra <core-metadata-provides-"
"extra>` metadata."
msgstr ""
"Для ``optional-dependencies`` это таблица, в которой каждый ключ указывает "
"на дополнительное значение, а значение представляет собой массив строк. "
"Строки массивов должны быть действительными строками :pep:`508`. Ключи "
"ДОЛЖНЫ быть допустимыми значениями для :ref:`Provides-Extra <core-metadata-"
"provides-extra>`. Таким образом, каждое значение в массиве становится "
"соответствующей записью :ref:`Requires-Dist <core-metadata-requires-dist>` "
"для соответствующего метаданного :ref:`Provides-Extra <core-metadata-"
"provides-extra>`."

#: ../source/specifications/pyproject-toml.rst:483
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name "
#| "<core-metadata-name>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Import-Name "
"<core-metadata-import-name>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Name <core-"
"metadata-name>`"

#: ../source/specifications/pyproject-toml.rst:486
msgid ""
"An array of strings specifying the import names that the project exclusively "
"provides when installed. Each string MUST be a valid Python identifier or "
"can be empty. An import name MAY be followed by a semicolon and the term "
"\"private\" (e.g. ``\"; private\"``) with any amount of whitespace "
"surrounding the semicolon."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:491
msgid ""
"Projects SHOULD list all the shortest import names that are exclusively "
"provided by the project. If any of the shortest names are dotted names, all "
"intervening names from that name to the top-level name should also be listed "
"appropriately in ``import-names`` and/or ``import-namespaces``. For "
"instance, a project which is a single package named spam with multiple "
"submodules would only list ``project.import-names = [\"spam\"]``. A project "
"that lists ``spam.bacon.eggs`` would also need to account for ``spam`` and "
"``spam.bacon`` appropriately in ``import-names`` and ``import-namespaces``. "
"Listing all names acts as a check that the intent of the import names is as "
"expected. As well, projects SHOULD list all import names, public or private, "
"using the ``; private`` modifier as appropriate."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:503
#: ../source/specifications/pyproject-toml.rst:552
msgid ""
"If a project lists the same name in both ``import-names`` and ``import-"
"namespaces``, then tools MUST raise an error due to ambiguity."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:506
msgid ""
"Projects MAY set ``import-names`` to an empty array to represent a project "
"with no import names (i.e. there are no Python modules of any kind in the "
"distribution file)."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:510
#: ../source/specifications/pyproject-toml.rst:555
msgid ""
"Build back-ends MAY support dynamically calculating the value if the user "
"declares the key in ``project.dynamic``."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:513
msgid "Examples:"
msgstr "Примеры:"

#: ../source/specifications/pyproject-toml.rst:534
#, fuzzy
#| msgid ""
#| "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name "
#| "<core-metadata-name>`"
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Import-"
"Namespace <core-metadata-import-namespace>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Name <core-"
"metadata-name>`"

#: ../source/specifications/pyproject-toml.rst:537
msgid ""
"An array of strings specifying the import names that the project provides "
"when installed, but not exclusively. Each string MUST be a valid Python "
"identifier. An import name MAY be followed by a semicolon and the term "
"\"private\" (e.g. ``\"; private\"``) with any amount of whitespace "
"surrounding the semicolon. Note that unlike ``import-names``, ``import-"
"namespaces`` CANNOT be an empty array."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:543
msgid ""
"Projects SHOULD list all the shortest import names that are exclusively "
"provided by the project. If any of the shortest names are dotted names, all "
"intervening names from that name to the top-level name should also be listed "
"appropriately in ``import-names`` and/or ``import-namespaces``."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:548
msgid ""
"This field is used for namespace packages where multiple projects can "
"contribute to the same import namespace. Projects all listing the same "
"import name in ``import-namespaces`` can be installed together without "
"shadowing each other."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:558
#, fuzzy
#| msgid "Example::"
msgid "Example:"
msgstr "Пример::"

#: ../source/specifications/pyproject-toml.rst:574
msgid "TOML_ type: array of string"
msgstr "Тип TOML_: массив строк"

#: ../source/specifications/pyproject-toml.rst:575
msgid ""
"Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Dynamic "
"<core-metadata-dynamic>`"
msgstr ""
"Соответствующее поле :ref:`core metadata <core-metadata>`: :ref:`Dynamic "
"<core-metadata-dynamic>`"

#: ../source/specifications/pyproject-toml.rst:578
msgid ""
"Specifies which keys listed by this PEP were intentionally unspecified so "
"another tool can/will provide such metadata dynamically. This clearly "
"delineates which metadata is purposefully unspecified and expected to stay "
"unspecified compared to being provided via tooling later on."
msgstr ""
"Указывает, какие ключи, перечисленные в этом PEP, были намеренно не "
"определены, чтобы другой инструмент может/должен предоставить такие "
"метаданные динамически. Это четко определяет, какие метаданные намеренно не "
"определены и, как ожидается, останутся неопределенными по сравнению с тем, "
"что будет предоставлено с помощью инструментов позже."

#: ../source/specifications/pyproject-toml.rst:584
msgid ""
"A build back-end MUST honour statically-specified metadata (which means the "
"metadata did not list the key in ``dynamic``)."
msgstr ""
"Бэкэнд сборки ДОЛЖЕН почитать статически заданные метаданные (это означает, "
"что в метаданных не указан ключ в ``динамическом``)."

#: ../source/specifications/pyproject-toml.rst:586
msgid ""
"A build back-end MUST raise an error if the metadata specifies ``name`` in "
"``dynamic``."
msgstr ""
"Внутренний модуль сборки ДОЛЖЕН выдать ошибку, если в метаданных указано "
"``имя`` в ``dynamic``."

#: ../source/specifications/pyproject-toml.rst:588
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Required\", then the metadata MUST specify the key statically or list it "
"in ``dynamic`` (build back-ends MUST raise an error otherwise, i.e. it "
"should not be possible for a required key to not be listed somehow in the "
"``[project]`` table)."
msgstr ""
"Если в спецификации :ref:`core metadata <core-metadata>` указано поле как "
"\"Required\", то метаданные ДОЛЖНЫ указывать ключ статически или перечислять "
"его в ``dynamic`` (сборка бэкендов ДОЛЖНА выдавать ошибку в противном "
"случае, т.е. не должно быть возможности, чтобы требуемый ключ не был как-то "
"указан в таблице ``[project]``)."

#: ../source/specifications/pyproject-toml.rst:593
msgid ""
"If the :ref:`core metadata <core-metadata>` specification lists a field as "
"\"Optional\", the metadata MAY list it in ``dynamic`` if the expectation is "
"a build back-end will provide the data for the key later."
msgstr ""
"Если в спецификации :ref:`core metadata <core-metadata>` поле указано как "
"\"Optional\", метаданные МОГУТ указывать его в ``dynamic``, если "
"предполагается, что сборка бэкенда предоставит данные для ключа позже."

#: ../source/specifications/pyproject-toml.rst:597
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key "
"statically as well as being listed in ``dynamic``."
msgstr ""
"Внутренние компоненты сборки ДОЛЖНЫ выдать ошибку, если метаданные указывают "
"ключ статически, а также перечислены в ``динамических``."

#: ../source/specifications/pyproject-toml.rst:599
msgid ""
"If the metadata does not list a key in ``dynamic``, then a build back-end "
"CANNOT fill in the requisite metadata on behalf of the user (i.e. "
"``dynamic`` is the only way to allow a tool to fill in metadata and the user "
"must opt into the filling in)."
msgstr ""
"Если в метаданных не указан ключ в ``dynamic``, то бэкэнд сборки не сможет "
"заполнить необходимые метаданные от имени пользователя (т.е. ``dynamic`` - "
"это единственный способ позволить инструменту заполнить метаданные, и "
"пользователь должен согласиться на заполнение)."

#: ../source/specifications/pyproject-toml.rst:603
msgid ""
"Build back-ends MUST raise an error if the metadata specifies a key in "
"``dynamic`` but the build back-end was unable to determine the data for it "
"(omitting the data, if determined to be the accurate value, is acceptable)."
msgstr ""
"Бэкэнд сборки ДОЛЖЕН выдать ошибку, если в метаданных указан ключ в "
"``dynamic``, но бэкэнд сборки не смог определить данные для него (опускание "
"данных, если определено, что это точное значение, допустимо)."

#: ../source/specifications/pyproject-toml.rst:613
msgid "Arbitrary tool configuration: the ``[tool]`` table"
msgstr "Произвольная конфигурация инструментов: таблица ``[tool]``"

#: ../source/specifications/pyproject-toml.rst:615
msgid ""
"The ``[tool]`` table is where any tool related to your Python project, not "
"just build tools, can have users specify configuration data as long as they "
"use a sub-table within ``[tool]``, e.g. the `flit <https://pypi.python.org/"
"pypi/flit>`_ tool would store its configuration in ``[tool.flit]``."
msgstr ""
"Таблица ``[tool]`` - это место, где любой инструмент, связанный с вашим "
"Python-проектом, не только инструменты сборки, может иметь пользователей, "
"указывающих конфигурационные данные, если они используют подтаблицу в "
"``[tool]``, например, инструмент `flit <https://pypi.python.org/pypi/flit>`_ "
"будет хранить свою конфигурацию в ``[tool.flit]``."

#: ../source/specifications/pyproject-toml.rst:621
msgid ""
"A mechanism is needed to allocate names within the ``tool.*`` namespace, to "
"make sure that different projects do not attempt to use the same sub-table "
"and collide. Our rule is that a project can use the subtable ``tool.$NAME`` "
"if, and only if, they own the entry for ``$NAME`` in the Cheeseshop/PyPI."
msgstr ""
"Необходим механизм для распределения имен в пространстве имен ``tool.*``, "
"чтобы убедиться, что разные проекты не пытаются использовать одну и ту же "
"подтаблицу и не сталкиваются. Наше правило заключается в том, что проект "
"может использовать подтаблицу ``tool.$NAME`` тогда и только тогда, когда он "
"владеет записью для ``$NAME`` в Cheeseshop/PyPI."

#: ../source/specifications/pyproject-toml.rst:632
msgid ""
"May 2016: The initial specification of the ``pyproject.toml`` file, with "
"just a ``[build-system]`` containing a ``requires`` key and a ``[tool]`` "
"table, was approved through :pep:`518`."
msgstr ""
"Май 2016 г: Первоначальная спецификация файла ``pyproject.toml``, содержащая "
"только ``[build-system]``, содержащую ключ ``requires`` и таблицу "
"``[tool]``, была одобрена через :pep:`518``."

#: ../source/specifications/pyproject-toml.rst:636
msgid ""
"November 2020: The specification of the ``[project]`` table was approved "
"through :pep:`621`."
msgstr ""
"Ноябрь 2020 года: Спецификация таблицы ``[проект]`` была утверждена через :"
"pep:`621``."

#: ../source/specifications/pyproject-toml.rst:639
msgid ""
"December 2024: The ``license`` key was redefined, the ``license-files`` key "
"was added and ``License::`` classifiers were deprecated through :pep:`639`."
msgstr ""
"Декабрь 2024 года: Ключ ``license`` был переопределен, ключ ``license-"
"files`` был добавлен, а классификаторы ``License::`` были устаревшими через :"
"pep:`639`."

#: ../source/specifications/pyproject-toml.rst:642
msgid ""
"September 2025: Clarity that the ``license`` key applies to all distribution "
"files generated from the :file:`pyproject.toml` file."
msgstr ""

#: ../source/specifications/pyproject-toml.rst:645
msgid ""
"October 2025: The ``import-names`` and ``import-namespaces`` keys were added "
"through :pep:`794`."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:7
msgid "Recording installed projects"
msgstr "Запись установленных проектов"

#: ../source/specifications/recording-installed-packages.rst:9
msgid ""
"This document specifies a common format of recording information about "
"Python :term:`projects <Project>` installed in an environment. A common "
"metadata format allows tools to query, manage or uninstall projects, "
"regardless of how they were installed."
msgstr ""
"Этот документ определяет общий формат записи информации о Python :term:"
"`проектах <Project>`, установленных в среде. Общий формат метаданных "
"позволяет инструментам запрашивать, управлять или удалять проекты, "
"независимо от того, как они были установлены."

#: ../source/specifications/recording-installed-packages.rst:14
msgid ""
"Almost all information is optional. This allows tools outside the Python "
"ecosystem, such as Linux package managers, to integrate with Python tooling "
"as much as possible. For example, even if an installer cannot easily provide "
"a list of installed files in a format specific to Python tooling, it should "
"still record the name and version of the installed project."
msgstr ""
"Почти вся информация является необязательной. Это позволяет инструментам вне "
"экосистемы Python, таким как менеджеры пакетов Linux, интегрироваться с "
"инструментарием Python настолько, насколько это возможно. Например, даже "
"если программа установки не может легко предоставить список установленных "
"файлов в формате, характерном для инструментария Python, она все равно "
"должна записывать имя и версию установленного проекта."

#: ../source/specifications/recording-installed-packages.rst:25
msgid ""
"Each project installed from a distribution must, in addition to files, "
"install a \"``.dist-info``\" directory located alongside importable modules "
"and packages (commonly, the ``site-packages`` directory)."
msgstr ""
"Каждый проект, устанавливаемый из дистрибутива, помимо файлов, должен "
"устанавливать каталог \"``.dist-info``\", расположенный рядом с "
"импортируемыми модулями и пакетами (обычно это каталог ``ite-packages``)."

#: ../source/specifications/recording-installed-packages.rst:29
msgid ""
"This directory is named as ``{name}-{version}.dist-info``, with ``name`` and "
"``version`` fields corresponding to :ref:`core-metadata`. Both fields must "
"be normalized (see the :ref:`name normalization specification <name-"
"normalization>` and the :ref:`version normalization specification <version-"
"specifiers-normalization>`), and replace dash (``-``) characters with "
"underscore (``_``) characters, so the ``.dist-info`` directory always has "
"exactly one dash (``-``) character in its stem, separating the ``name`` and "
"``version`` fields."
msgstr ""
"Этот каталог называется ``{имя}-{версия}.dist-info``, а поля ``имя`` и "
"``версия`` соответствуют :ref:`core-metadata``. Оба поля должны быть "
"нормализованы (см. спецификации :ref:`name normalization specification <name-"
"normalization>` и :ref:`version normalization specification <version-"
"specifiers-normalization>`) и заменять символы тире (``-``) на символы "
"подчеркивания (``_``), поэтому каталог ``.dist-info`` всегда имеет ровно "
"один символ тире (``-``) в своей строке, разделяющий поля ``name`` и "
"``version``."

#: ../source/specifications/recording-installed-packages.rst:37
msgid ""
"Historically, tools have failed to replace dot characters or normalize case "
"in the ``name`` field, or not perform normalization in the ``version`` "
"field. Tools consuming ``.dist-info`` directories should expect those fields "
"to be unnormalized, and treat them as equivalent to their normalized "
"counterparts. New tools that write ``.dist-info`` directories MUST normalize "
"both ``name`` and ``version`` fields using the rules described above, and "
"existing tools are encouraged to start normalizing those fields."
msgstr ""
"Исторически сложилось так, что инструменты не заменяют символы точки или не "
"нормализуют регистр в поле ``имя``, или не выполняют нормализацию в поле "
"``версия``. Утилиты, использующие каталоги ``.dist-info``, должны ожидать, "
"что эти поля будут ненормализованными, и рассматривать их как эквивалентные "
"нормализованным аналогам. Новые инструменты, записывающие каталоги ``.dist-"
"info``, ДОЛЖНЫ нормализовать поля ``name`` и ``version``, используя правила, "
"описанные выше, а существующим инструментам рекомендуется начать "
"нормализацию этих полей."

#: ../source/specifications/recording-installed-packages.rst:47
msgid ""
"The ``.dist-info`` directory's name is formatted to unambiguously represent "
"a distribution as a filesystem path. Tools presenting a distribution name to "
"a user should avoid using the normalized name, and instead present the "
"specified name (when needed prior to resolution to an installed package), or "
"read the respective fields in Core Metadata, since values listed there are "
"unescaped and accurately reflect the distribution. Libraries should provide "
"API for such tools to consume, so tools can have access to the unnormalized "
"name when displaying distribution information."
msgstr ""
"Имя каталога ``.dist-info`` форматируется для однозначного представления "
"дистрибутива в виде пути к файловой системе. Утилиты, представляющие "
"пользователю имя дистрибутива, должны избегать использования "
"нормализованного имени, а вместо этого представлять указанное имя (если это "
"необходимо до разрешения установленного пакета) или читать соответствующие "
"поля в Core Metadata, поскольку значения, перечисленные там, не имеют "
"кодировки и точно отражают дистрибутив. Библиотеки должны предоставлять API "
"для таких инструментов, чтобы инструменты могли иметь доступ к "
"ненормализованному имени при отображении информации о дистрибутиве."

#: ../source/specifications/recording-installed-packages.rst:56
msgid ""
"This ``.dist-info`` directory may contain the following files, described in "
"detail below:"
msgstr ""
"Этот каталог ``.dist-info`` может содержать следующие файлы, подробно "
"описанные ниже:"

#: ../source/specifications/recording-installed-packages.rst:59
msgid "``METADATA``: contains project metadata"
msgstr "``METADATA``: содержит метаданные проекта"

#: ../source/specifications/recording-installed-packages.rst:60
msgid "``RECORD``: records the list of installed files."
msgstr "``RECORD``: записывает список установленных файлов."

#: ../source/specifications/recording-installed-packages.rst:61
msgid ""
"``INSTALLER``: records the name of the tool used to install the project."
msgstr ""
"``INSTALLER``: записывает имя инструмента, используемого для установки "
"проекта."

#: ../source/specifications/recording-installed-packages.rst:62
msgid "``entry_points.txt``: see :ref:`entry-points` for details"
msgstr "``entry_points.txt``: подробности см. в :ref:`entry-points``"

#: ../source/specifications/recording-installed-packages.rst:63
msgid "``direct_url.json``: see :ref:`direct-url` for details"
msgstr "``direct_url.json``: подробности см. в :ref:`direct-url``"

#: ../source/specifications/recording-installed-packages.rst:65
msgid ""
"The ``METADATA`` file is mandatory. All other files may be omitted at the "
"installing tool's discretion. Additional installer-specific files may be "
"present."
msgstr ""
"Файл ``METADATA`` является обязательным. Все остальные файлы могут быть "
"опущены по усмотрению программы установки. Могут присутствовать "
"дополнительные файлы, специфичные для программы установки."

#: ../source/specifications/recording-installed-packages.rst:69
#, fuzzy
#| msgid ""
#| "This :file:`.dist-info/` directory may contain the following directory, "
#| "described in detail below:"
msgid ""
"This :file:`.dist-info/` directory may contain the following directories, "
"described in detail below:"
msgstr ""
"Этот каталог :file:`.dist-info/` может содержать следующие каталоги, "
"подробно описанные ниже:"

#: ../source/specifications/recording-installed-packages.rst:72
msgid ":file:`licenses/`: contains license files."
msgstr ":file:`licenses/`: содержит файлы лицензий."

#: ../source/specifications/recording-installed-packages.rst:73
msgid ":file:`sboms/`: contains Software Bill-of-Materials files (SBOMs)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:77
msgid ""
"The :ref:`binary-distribution-format` specification describes additional "
"files that may appear in the ``.dist-info`` directory of a :term:`Wheel`. "
"Such files may be copied to the ``.dist-info`` directory of an installed "
"project."
msgstr ""
"Спецификация :ref:`binary-distribution-format` описывает дополнительные "
"файлы, которые могут появиться в директории ``.dist-info`` для :term:"
"`Wheel`. Такие файлы могут быть скопированы в каталог ``.dist-info`` "
"установленного проекта."

#: ../source/specifications/recording-installed-packages.rst:82
msgid ""
"The previous versions of this specification also specified a ``REQUESTED`` "
"file. This file is now considered a tool-specific extension, but may be "
"standardized again in the future. See `PEP 376 <https://www.python.org/dev/"
"peps/pep-0376/#requested>`_ for its original meaning."
msgstr ""
"В предыдущих версиях этой спецификации также указывался файл ``REQUESTED`` "
"Сейчас этот файл считается расширением, специфичным для конкретного "
"инструмента, но в будущем он может быть стандартизирован. Его первоначальное "
"значение см. в `PEP 376 <https://www.python.org/dev/peps/pep-0376/"
"#requested>`_."

#: ../source/specifications/recording-installed-packages.rst:89
msgid "The METADATA file"
msgstr "Файл METADATA"

#: ../source/specifications/recording-installed-packages.rst:91
msgid ""
"The ``METADATA`` file contains metadata as described in the :ref:`core-"
"metadata` specification, version 1.1 or greater."
msgstr ""
"Файл ``METADATA`` содержит метаданные, описанные в спецификации :ref:`core-"
"metadata``, версии 1.1 или выше."

#: ../source/specifications/recording-installed-packages.rst:94
msgid ""
"The ``METADATA`` file is mandatory. If it cannot be created, or if required "
"core metadata is not available, installers must report an error and fail to "
"install the project."
msgstr ""
"Файл ``METADATA`` является обязательным. Если он не может быть создан или "
"если необходимые метаданные ядра отсутствуют, программа установки должна "
"сообщить об ошибке и не установить проект."

#: ../source/specifications/recording-installed-packages.rst:100
msgid "The RECORD file"
msgstr "Файл RECORD"

#: ../source/specifications/recording-installed-packages.rst:102
msgid ""
"The ``RECORD`` file holds the list of installed files. It is a CSV file "
"containing one record (line) per installed file."
msgstr ""
"Файл ``RECORD`` содержит список установленных файлов. Это CSV-файл, "
"содержащий по одной записи (строке) на каждый установленный файл."

#: ../source/specifications/recording-installed-packages.rst:105
msgid ""
"The CSV dialect must be readable with the default ``reader`` of Python's "
"``csv`` module:"
msgstr ""
"Диалект CSV должен быть доступен для чтения с помощью стандартного "
"``reader`` модуля Python ``csv``:"

#: ../source/specifications/recording-installed-packages.rst:108
msgid "field delimiter: ``,`` (comma),"
msgstr "разделитель полей: ``,`` (запятая),"

#: ../source/specifications/recording-installed-packages.rst:109
msgid "quoting char: ``\"`` (straight double quote),"
msgstr "Кавычки: ``''`` (прямая двойная кавычка),"

#: ../source/specifications/recording-installed-packages.rst:110
msgid "line terminator: either ``\\r\\n`` or ``\\n``."
msgstr "терминатор строки: либо ``\\r\\n``, либо ``\\n``."

#: ../source/specifications/recording-installed-packages.rst:112
msgid ""
"Each record is composed of three elements: the file's **path**, the **hash** "
"of the contents, and its **size**."
msgstr ""
"Каждая запись состоит из трех элементов: **путь** файла, **хэш** его "
"содержимого и **размер**."

#: ../source/specifications/recording-installed-packages.rst:115
msgid ""
"The *path* may be either absolute, or relative to the directory containing "
"the ``.dist-info`` directory (commonly, the ``site-packages`` directory). On "
"Windows, directories may be separated either by forward- or backslashes (``/"
"`` or ``\\``)."
msgstr ""
"Путь *path* может быть как абсолютным, так и относительным к каталогу, "
"содержащему каталог ``.dist-info`` (обычно это каталог ``ite-packages``). В "
"Windows каталоги могут быть разделены прямыми или обратными слешами (``/`` "
"или ``\\``)."

#: ../source/specifications/recording-installed-packages.rst:120
msgid ""
"The *hash* is either an empty string or the name of a hash algorithm from :"
"py:data:`hashlib.algorithms_guaranteed`, followed by the equals character "
"``=`` and the digest of the file's contents, encoded with the urlsafe-base64-"
"nopad encoding (:py:func:`base64.urlsafe_b64encode(digest) <base64."
"urlsafe_b64encode()>` with trailing ``=`` removed)."
msgstr ""
"В качестве *hash* используется либо пустая строка, либо имя хэш-алгоритма "
"из :py:data:`hashlib. алгоритмы_гарантированы`, за которым следует символ "
"равенства ``=`` и дайджест содержимого файла, закодированный с помощью "
"кодировки urlsafe-base64-nopad (:py:func:`base64.urlsafe_b64encode(digest) "
"<base64.urlsafe_b64encode()>` с удаленным ``=`` в конце)."

#: ../source/specifications/recording-installed-packages.rst:125
msgid ""
"The *size* is either the empty string, or file's size in bytes, as a base 10 "
"integer."
msgstr ""
"Параметр *size* - это либо пустая строка, либо размер файла в байтах, как "
"целое число по основанию 10."

#: ../source/specifications/recording-installed-packages.rst:128
msgid ""
"For any file, either or both of the *hash* and *size* fields may be left "
"empty. Commonly, entries for ``.pyc`` files and the ``RECORD`` file itself "
"have empty *hash* and *size*. For other files, leaving the information out "
"is discouraged, as it prevents verifying the integrity of the installed "
"project."
msgstr ""
"Для любого файла любое из полей *hash* и *size* или оба могут быть пустыми. "
"Обычно записи для файлов ``.pyc`` и самого файла ``RECORD`` имеют пустые "
"*hash* и *size*. Для других файлов оставлять эту информацию не "
"рекомендуется, так как это мешает проверке целостности установленного "
"проекта."

#: ../source/specifications/recording-installed-packages.rst:134
msgid ""
"If the ``RECORD`` file is present, it must list all installed files of the "
"project, except ``.pyc`` files corresponding to ``.py`` files listed in "
"``RECORD``, which are optional. Notably, the contents of the ``.dist-info`` "
"directory (including the ``RECORD`` file itself) must be listed. Directories "
"should not be listed."
msgstr ""
"Если файл ``RECORD`` присутствует, в нем должны быть перечислены все "
"установленные файлы проекта, за исключением файлов ``.pyc``, соответствующих "
"файлам ``.py``, перечисленным в ``RECORD``, которые являются "
"необязательными. В частности, должно быть перечислено содержимое каталога ``."
"dist-info`` (включая сам файл ``RECORD``). Каталоги перечислять не следует."

#: ../source/specifications/recording-installed-packages.rst:141
msgid ""
"To completely uninstall a package, a tool needs to remove all files listed "
"in ``RECORD``, all ``.pyc`` files (of all optimization levels) corresponding "
"to removed ``.py`` files, and any directories emptied by the uninstallation."
msgstr ""
"Чтобы полностью удалить пакет, инструмент должен удалить все файлы, "
"перечисленные в ``RECORD``, все файлы ``.pyc`` (всех уровней оптимизации), "
"соответствующие удаленным файлам ``.py``, и все каталоги, опустошенные в "
"результате деинсталляции."

#: ../source/specifications/recording-installed-packages.rst:146
msgid "Here is an example snippet of a possible ``RECORD`` file::"
msgstr "Вот пример фрагмента возможного файла ``RECORD``::"

#: ../source/specifications/recording-installed-packages.rst:165
msgid ""
"If the ``RECORD`` file is missing, tools that rely on ``.dist-info`` must "
"not attempt to uninstall or upgrade the package. (This restriction does not "
"apply to tools that rely on other sources of information, such as system "
"package managers in Linux distros.)"
msgstr ""
"Если файл ``RECORD`` отсутствует, инструменты, полагающиеся на ``.dist-"
"info``, не должны пытаться удалить или обновить пакет. (Это ограничение не "
"распространяется на инструменты, которые полагаются на другие источники "
"информации, такие как системные менеджеры пакетов в дистрибутивах Linux.)"

#: ../source/specifications/recording-installed-packages.rst:172
msgid ""
"It is *strongly discouraged* for an installed package to modify itself (e."
"g., store cache files under its namespace in ``site-packages``). Changes "
"inside ``site-packages`` should be left to specialized installer tools such "
"as pip. If a package is nevertheless modified in this way, then the "
"``RECORD`` must be updated, otherwise uninstalling the package will leave "
"unlisted files in place (possibly resulting in a zombie namespace package)."
msgstr ""
"Устанавливаемому пакету *сильно не рекомендуется* изменять себя (например, "
"хранить файлы кэша в своем пространстве имен в ``ite-packages``). Изменения "
"внутри ``site-packages` следует оставить специализированным инструментам "
"установки, таким как pip. Если пакет все же был изменен таким образом, то "
"необходимо обновить ``RECORD``, иначе при деинсталляции пакета на месте "
"останутся незарегистрированные файлы (возможно, это приведет к появлению "
"пакета-зомби в пространстве имен)."

#: ../source/specifications/recording-installed-packages.rst:181
msgid "The INSTALLER file"
msgstr "Файл INSTALLER"

#: ../source/specifications/recording-installed-packages.rst:183
msgid ""
"If present, ``INSTALLER`` is a single-line text file naming the tool used to "
"install the project. If the installer is executable from the command line, "
"``INSTALLER`` should contain the command name. Otherwise, it should contain "
"a printable ASCII string."
msgstr ""
"Если присутствует, ``INSTALLER`` - это однострочный текстовый файл с "
"названием инструмента, используемого для установки проекта. Если программа "
"установки исполняется из командной строки, ``INSTALLER`` должен содержать "
"имя команды. В противном случае в нем должна содержаться печатаемая ASCII-"
"строка."

#: ../source/specifications/recording-installed-packages.rst:189
msgid "The file can be terminated by zero or more ASCII whitespace characters."
msgstr ""
"Файл может быть завершен нулем или несколькими пробельными символами ASCII."

#: ../source/specifications/recording-installed-packages.rst:191
msgid "Here are examples of two possible ``INSTALLER`` files::"
msgstr "Вот примеры двух возможных файлов ``INSTALLER``::"

#: ../source/specifications/recording-installed-packages.rst:199
msgid ""
"This value should be used for informational purposes only. For example, if a "
"tool is asked to uninstall a project but finds no ``RECORD`` file, it may "
"suggest that the tool named in ``INSTALLER`` may be able to do the "
"uninstallation."
msgstr ""
"Это значение следует использовать только в информационных целях. Например, "
"если инструменту предлагается удалить проект, но он не находит файла "
"``RECORD``, он может предположить, что инструмент, названный в "
"``INSTALLER``, может выполнить удаление."

#: ../source/specifications/recording-installed-packages.rst:206
msgid "The entry_points.txt file"
msgstr "Файл entry_points.txt"

#: ../source/specifications/recording-installed-packages.rst:208
msgid ""
"This file MAY be created by installers to indicate when packages contain "
"components intended for discovery and use by other code, including console "
"scripts and other applications that the installer has made available for "
"execution."
msgstr ""
"Этот файл МОЖЕТ быть создан программой установки, чтобы указать, когда "
"пакеты содержат компоненты, предназначенные для обнаружения и использования "
"другим кодом, включая консольные сценарии и другие приложения, которые "
"программа установки сделала доступными для выполнения."

#: ../source/specifications/recording-installed-packages.rst:213
msgid "Its detailed specification is at :ref:`entry-points`."
msgstr "Его подробная спецификация находится по адресу :ref:`entry-points`."

#: ../source/specifications/recording-installed-packages.rst:217
msgid "The direct_url.json file"
msgstr "Файл direct_url.json"

#: ../source/specifications/recording-installed-packages.rst:219
msgid ""
"This file MUST be created by installers when installing a distribution from "
"a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""
"Этот файл ДОЛЖЕН создаваться программой установки при установке дистрибутива "
"из требования, указывающего прямую URL-ссылку (включая VCS URL)."

#: ../source/specifications/recording-installed-packages.rst:225
msgid "Its detailed specification is at :ref:`direct-url`."
msgstr "Его подробная спецификация находится по адресу :ref:`direct-url`."

#: ../source/specifications/recording-installed-packages.rst:229
msgid "The :file:`licenses/` subdirectory"
msgstr "Подкаталог :file:`licenses/`"

#: ../source/specifications/recording-installed-packages.rst:231
msgid ""
"If the metadata version is 2.4 or greater and one or more ``License-File`` "
"fields is specified, the :file:`.dist-info/` directory MUST contain a :file:"
"`licenses/` subdirectory which MUST contain the files listed in the "
"``License-File`` fields in the :file:`METADATA` file at their respective "
"paths relative to the :file:`licenses/` directory. Any files in this "
"directory MUST be copied from wheels by the install tools."
msgstr ""
"Если версия метаданных 2.4 или выше и указано одно или несколько полей "
"``License-File``, каталог :file:`.dist-info/` ДОЛЖЕН содержать подкаталог :"
"file:`licenses/`, который ДОЛЖЕН содержать файлы, перечисленные в полях "
"``License-File`` в файле :file:`METADATA`` по их соответствующим путям "
"относительно каталога :file:`licenses/`. Любые файлы в этом каталоге ДОЛЖНЫ "
"быть скопированы с колеса средствами установки."

#: ../source/specifications/recording-installed-packages.rst:240
#, fuzzy
#| msgid "The :file:`licenses/` subdirectory"
msgid "The :file:`sboms/` subdirectory"
msgstr "Подкаталог :file:`licenses/`"

#: ../source/specifications/recording-installed-packages.rst:242
msgid ""
"All files contained within the :file:`.dist-info/sboms/` directory MUST be "
"Software Bill-of-Materials (SBOM) files that describe software contained "
"within the installed package. Any files in this directory MUST be copied "
"from wheels by the install tools."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:249
msgid "Intentionally preventing changes to installed packages"
msgstr "Намеренное предотвращение изменений в установленных пакетах"

#: ../source/specifications/recording-installed-packages.rst:251
msgid ""
"In some cases (such as when needing to manage external dependencies in "
"addition to Python ecosystem dependencies), it is desirable for a tool that "
"installs packages into a Python environment to ensure that other tools are "
"not used to uninstall or otherwise modify that installed package, as doing "
"so may cause compatibility problems with the wider environment."
msgstr ""
"В некоторых случаях (например, при необходимости управлять внешними "
"зависимостями в дополнение к зависимостям экосистемы Python) желательно, "
"чтобы инструмент, устанавливающий пакеты в среду Python, не использовал "
"другие инструменты для удаления или иного изменения установленного пакета, "
"поскольку это может привести к проблемам совместимости с более широкой "
"средой."

#: ../source/specifications/recording-installed-packages.rst:257
msgid "To achieve this, affected tools should take the following steps:"
msgstr ""
"Чтобы добиться этого, пострадавшие инструменты должны предпринять следующие "
"шаги:"

#: ../source/specifications/recording-installed-packages.rst:259
msgid ""
"Rename or remove the ``RECORD`` file to prevent changes via other tools (e."
"g. appending a suffix to create a non-standard ``RECORD.tool`` file if the "
"tool itself needs the information, or omitting the file entirely if the "
"package contents are tracked and managed via other means)"
msgstr ""
"Переименуйте или удалите файл ``RECORD``, чтобы предотвратить изменения с "
"помощью других инструментов (например, добавьте суффикс для создания "
"нестандартного файла ``RECORD.tool``, если информация нужна самому "
"инструменту, или полностью удалите файл, если содержимое пакета "
"отслеживается и управляется другими средствами)"

#: ../source/specifications/recording-installed-packages.rst:263
msgid ""
"Write an ``INSTALLER`` file indicating the name of the tool that should be "
"used to manage the package (this allows ``RECORD``-aware tools to provide "
"better error notices when asked to modify affected packages)"
msgstr ""
"Запишите файл ``INSTALLER``, указывающий имя инструмента, который должен "
"использоваться для управления пакетом (это позволяет инструментам, знающим "
"``RECORD``, выдавать более точные уведомления об ошибках при запросе на "
"модификацию затронутых пакетов)"

#: ../source/specifications/recording-installed-packages.rst:267
msgid ""
"Python runtime providers may also prevent inadvertent modification of "
"platform provided packages by modifying the default Python package "
"installation scheme to use a location other than that used by platform "
"provided packages (while also ensuring both locations appear on the default "
"Python import path)."
msgstr ""
"Провайдеры среды выполнения Python также могут предотвратить "
"непреднамеренную модификацию пакетов, предоставляемых платформой, изменив "
"схему установки пакетов Python по умолчанию, чтобы использовать "
"местоположение, отличное от того, которое используется пакетами, "
"предоставляемыми платформой (при этом оба места должны быть указаны в пути "
"импорта Python по умолчанию)."

#: ../source/specifications/recording-installed-packages.rst:272
msgid ""
"In some circumstances, it may be desirable to block even installation of "
"additional packages via Python-specific tools. For these cases refer to :ref:"
"`externally-managed-environments`"
msgstr ""
"В некоторых обстоятельствах может быть желательно заблокировать даже "
"установку дополнительных пакетов с помощью инструментов, специфичных для "
"Python. Для таких случаев обратитесь к :ref:`externally-managed-environments`"

#: ../source/specifications/recording-installed-packages.rst:280
msgid ""
"June 2009: The original version of this specification was approved through :"
"pep:`376`.  At the time, it was known as the *Database of Installed Python "
"Distributions*."
msgstr ""
"Июнь 2009 г: Первоначальная версия этой спецификации была одобрена через :"
"pep:`376`.  В то время она была известна как *База данных установленных "
"дистрибутивов Python*."

#: ../source/specifications/recording-installed-packages.rst:283
msgid ""
"March 2020: The specification of the ``direct_url.json`` file was approved "
"through :pep:`610`. It is only mentioned on this page; see :ref:`direct-url` "
"for the full definition."
msgstr ""
"Март 2020 г: Спецификация файла ``direct_url.json`` была одобрена через :pep:"
"`610``. Он только упоминается на этой странице; полное определение см. в :"
"ref:`direct-url`."

#: ../source/specifications/recording-installed-packages.rst:286
msgid ""
"September 2020: Various amendments and clarifications were approved through :"
"pep:`627`."
msgstr ""
"Сентябрь 2020 года: Различные поправки и уточнения были одобрены через :pep:"
"`627`."

#: ../source/specifications/schemas/index.rst:4
#, fuzzy
#| msgid "Data schema"
msgid "PyPA schemas"
msgstr "Схема данных"

#: ../source/specifications/schemas/index.rst:6
#, fuzzy
#| msgid "``direct_url.json``: see :ref:`direct-url` for details"
msgid "`direct_url.json <direct-url.schema.json>`_"
msgstr "``direct_url.json``: подробности см. в :ref:`direct-url``"

#: ../source/specifications/schemas/index.rst:7
msgid "`build-details.json <build-details-v1.0.schema.json>`_"
msgstr ""

#: ../source/specifications/schemas/index.rst:8
msgid "`pylock.toml <pylock.schema.json>`_"
msgstr ""

#: ../source/specifications/section-distribution-formats.rst:3
msgid "Package Distribution File Formats"
msgstr "Форматы файлов распространения пакетов"

#: ../source/specifications/section-distribution-metadata.rst:3
msgid "Package Distribution Metadata"
msgstr "Метаданные распространения пакетов"

#: ../source/specifications/section-installation-metadata.rst:3
msgid "Package Installation Metadata"
msgstr "Метаданные установки пакета"

#: ../source/specifications/section-package-indices.rst:3
msgid "Package Index Interfaces"
msgstr "Индекс пакета Интерфейсы"

#: ../source/specifications/section-python-description-formats.rst:3
#, fuzzy
#| msgid "Python versions over time"
msgid "Python Description Formats"
msgstr "Python версии с течением времени"

#: ../source/specifications/section-reproducible-environments.rst:3
#, fuzzy
#| msgid "Virtual Environment"
msgid "Reproducible Environments"
msgstr "Виртуальная среда"

#: ../source/specifications/simple-repository-api.rst:6
msgid "Simple repository API"
msgstr "Простой API репозитория"

#: ../source/specifications/simple-repository-api.rst:8
msgid ""
"The keywords \"**MUST**\", \"**MUST NOT**\", \"**REQUIRED**\", "
"\"**SHALL**\", \"**SHALL NOT**\", \"**SHOULD**\", \"**SHOULD NOT**\", "
"\"**RECOMMENDED**\", \"**MAY**\", and \"**OPTIONAL**\"\" in this document "
"are to be interpreted as described in :rfc:`2119`."
msgstr ""
"Ключевые слова \"**MUST**\", \"**MUST NOT**\", \"**REQUIRED**\", "
"\"**SHALL**\", \"**SHALL NOT**\", \"**SHOULD**\", \"**SHOULD NOT**\", "
"\"**RECOMMENDED**\", \"**MAY**\" и \"**OPTIONAL**\" в этом документе должны "
"интерпретироваться, как описано в :rfc:`2119`."

#: ../source/specifications/simple-repository-api.rst:13
#, fuzzy
#| msgid ""
#| "The interface for querying available package versions and retrieving "
#| "packages from an index server comes in two forms: HTML and JSON."
msgid ""
"The interface for querying available package versions and retrieving "
"packages from an index server comes in two forms: :ref:`HTML <simple-"
"repository-html-serialization>` and :ref:`JSON <json-serialization>`."
msgstr ""
"Интерфейс для запроса доступных версий пакетов и получения пакетов с "
"индексного сервера представлен в двух формах: HTML и JSON."

#: ../source/specifications/simple-repository-api.rst:21
#, fuzzy
#| msgid "Base HTML API"
msgid "Base API"
msgstr "Базовый HTML API"

#: ../source/specifications/simple-repository-api.rst:23
#, fuzzy
#| msgid ""
#| "A repository that implements the simple API is defined by its base URL, "
#| "this is the top level URL that all additional URLs are below. The API is "
#| "named the \"simple\" repository due to the fact that PyPI's base URL is "
#| "``https://pypi.org/simple/``."
msgid ""
"A repository that implements the simple API is defined by its base URL. This "
"is the top level URL that all additional URLs are below. The API is named "
"the \"simple\" repository due to the fact that PyPI's base URL is ``https://"
"pypi.org/simple/``."
msgstr ""
"Репозиторий, реализующий простой API, определяется его базовым URL, это URL "
"верхнего уровня, под которым располагаются все дополнительные URL. API "
"назван \"простым\" репозиторием из-за того, что базовый URL PyPI - ``https://"
"pypi.org/simple/``."

#: ../source/specifications/simple-repository-api.rst:28
msgid ""
"All subsequent URLs in this document will be relative to this base URL (so "
"given PyPI's URL, a URL of ``/foo/`` would be ``https://pypi.org/simple/foo/"
"``."
msgstr ""
"Все последующие URL в этом документе будут относительными к этому базовому "
"URL (поэтому, учитывая URL PyPI, URL ``/foo/`` будет ``https://pypi.org/"
"simple/foo/``."

#: ../source/specifications/simple-repository-api.rst:33
msgid "Normalized Names"
msgstr "Нормализованные названия"

#: ../source/specifications/simple-repository-api.rst:35
msgid ""
"This spec references the concept of a \"normalized\" project name. As per :"
"ref:`the name normalization specification <name-normalization>` the only "
"valid characters in a name are the ASCII alphabet, ASCII numbers, ``.``, ``-"
"``, and ``_``. The name should be lowercased with all runs of the characters "
"``.``, ``-``, or ``_`` replaced with a single ``-`` character. This can be "
"implemented in Python with the ``re`` module::"
msgstr ""
"Эта спецификация ссылается на концепцию \"нормализованного\" имени проекта. "
"Согласно : ссылка:спецификации нормализации имен <название - нормализация>` "
"единственными допустимыми символами в имени являются алфавит ASCII, числа "
"ASCII, ``.``, ``-`` и ``_``. Имя должно быть строчным, при этом все пробелы "
"символов ``.``, ``-`` или ``_`` должны быть заменены одним символом ``-``. "
"Это можно реализовать на языке Python с помощью модуля ``re``::"

#: ../source/specifications/simple-repository-api.rst:50
msgid "Versioning PyPI's Simple API"
msgstr "Версионирование простого API PyPI"

#: ../source/specifications/simple-repository-api.rst:52
msgid ""
"This spec proposes the inclusion of a meta tag on the responses of every "
"successful request to a simple API page, which contains a name attribute of "
"``pypi:repository-version``, and a content that is a :ref:`version "
"specifiers specification <version-specifiers>` compatible version number, "
"which is further constrained to ONLY be Major.Minor, and none of the "
"additional features supported by :ref:`the version specifiers specification "
"<version-specifiers>`."
msgstr ""
"Эта спецификация предлагает включение мета-тега в ответы на каждый успешный "
"запрос к простой странице API, который содержит атрибут имени ``pypi:"
"repository-version`` и содержимое, которое является совместимым с :ref:"
"``спецификацией версий <version-specifiers>` номером версии, который далее "
"ограничивается тем, что он может быть только Major.Minor, и ни одной из "
"дополнительных возможностей, поддерживаемых :ref:``спецификацией версий "
"<version-specifiers>`."

#: ../source/specifications/simple-repository-api.rst:60
msgid "This would end up looking like:"
msgstr "В итоге это будет выглядеть так:"

#: ../source/specifications/simple-repository-api.rst:66
msgid "When interpreting the repository version:"
msgstr "При интерпретации версии репозитория:"

#: ../source/specifications/simple-repository-api.rst:68
msgid ""
"Incrementing the major version is used to signal a backwards incompatible "
"change such that existing clients would no longer be expected to be able to "
"meaningfully use the API."
msgstr ""
"Увеличение основной версии используется для сигнализации об изменении, "
"несовместимом с обратной стороной, когда существующие клиенты уже не смогут "
"полноценно использовать API."

#: ../source/specifications/simple-repository-api.rst:71
msgid ""
"Incrementing the minor version is used to signal a backwards compatible "
"change such that existing clients would still be expected to be able to "
"meaningfully use the API."
msgstr ""
"Увеличение минорной версии используется для того, чтобы сигнализировать об "
"изменении обратной совместимости, так что ожидается, что существующие "
"клиенты все еще смогут полноценно использовать API."

#: ../source/specifications/simple-repository-api.rst:75
msgid ""
"It is left up to the discretion of any future specs as to what specifically "
"constitutes a backwards incompatible vs compatible change beyond the broad "
"suggestion that existing clients will be able to \"meaningfully\" continue "
"to use the API, and can include adding, modifying, or removing existing "
"features."
msgstr ""
"На усмотрение любых будущих спецификаций остается вопрос о том, что именно "
"считать обратно несовместимым и совместимым изменением, помимо широкого "
"предложения о том, что существующие клиенты смогут \"осмысленно\" продолжать "
"использовать API, и это может включать добавление, модификацию или удаление "
"существующих функций."

#: ../source/specifications/simple-repository-api.rst:81
msgid ""
"It is expectation of this spec that the major version will never be "
"incremented, and any future major API evolutions would utilize a different "
"mechanism for API evolution. However the major version is included to "
"disambiguate with future versions (e.g. a hypothetical simple api v2 that "
"lived at /v2/, but which would be confusing if the repository-version was "
"set to a version >= 2)."
msgstr ""
"Предполагается, что основная версия никогда не будет увеличиваться, и любые "
"будущие основные эволюции API будут использовать другой механизм для "
"эволюции API. Тем не менее, основная версия включена для того, чтобы не было "
"разночтений с будущими версиями (например, гипотетический простой api v2, "
"который жил по адресу /v2/, но который был бы запутан, если бы в репозитории-"
"версия была установлена версия >= 2)."

#: ../source/specifications/simple-repository-api.rst:89
msgid "API Version History"
msgstr "История версий API"

#: ../source/specifications/simple-repository-api.rst:91
msgid ""
"This section contains only an abbreviated history of changes, as marked by "
"the API version number. For a full history of changes including changes made "
"before API versioning, see :ref:`History <simple-repository-history>`."
msgstr ""
"Этот раздел содержит только сокращенную историю изменений, отмеченную "
"номером версии API. Полную историю изменений, включая изменения, сделанные "
"до появления версий API, смотрите в :ref:`History <simple-repository-"
"history>`."

#: ../source/specifications/simple-repository-api.rst:95
msgid "API version 1.0: Initial version of the API, declared with :pep:`629`."
msgstr ""
"Версия API 1.0: Начальная версия API, объявленная с помощью :pep:`629`."

#: ../source/specifications/simple-repository-api.rst:96
msgid ""
"API version 1.1: Added ``versions``, ``files[].size``, and ``files[].upload-"
"time`` metadata to the JSON serialization, declared with :pep:`700`."
msgstr ""
"API версии 1.1: Добавлены метаданные ``версии``, ``файлы[].размер`` и "
"``файлы[].время загрузки`` в сериализацию JSON, объявленную с помощью :pep:"
"`700``."

#: ../source/specifications/simple-repository-api.rst:98
msgid ""
"API version 1.2: Added repository \"tracks\" metadata, declared with :pep:"
"`708`."
msgstr ""
"API версии 1.2: Добавлены метаданные репозитория \"треки\", объявленные с "
"помощью :pep:`708`."

#: ../source/specifications/simple-repository-api.rst:99
msgid "API version 1.3: Added provenance metadata, declared with :pep:`740`."
msgstr ""
"API версии 1.3: Добавлены метаданные о происхождении, объявленные с помощью :"
"pep:`740`."

#: ../source/specifications/simple-repository-api.rst:100
#, fuzzy
#| msgid ""
#| "API version 1.3: Added provenance metadata, declared with :pep:`740`."
msgid "API version 1.4: Added status markers, declared with :pep:`792`."
msgstr ""
"API версии 1.3: Добавлены метаданные о происхождении, объявленные с помощью :"
"pep:`740`."

#: ../source/specifications/simple-repository-api.rst:103
msgid "Clients"
msgstr "Клиенты"

#: ../source/specifications/simple-repository-api.rst:105
msgid ""
"Clients interacting with the simple API **SHOULD** introspect each response "
"for the repository version, and if that data does not exist **MUST** assume "
"that it is version 1.0."
msgstr ""
"Клиенты, взаимодействующие с простым API, **ОБЯЗАНЫ** проверять каждый ответ "
"на версию хранилища, и если эти данные отсутствуют, **ОБЯЗАНЫ** считать, что "
"это версия 1.0."

#: ../source/specifications/simple-repository-api.rst:109
msgid ""
"When encountering a major version greater than expected, clients **MUST** "
"hard fail with an appropriate error message for the user."
msgstr ""
"При столкновении с основной версией, превышающей ожидаемую, клиенты "
"**ДОЛЖНЫ** жестко отказывать с соответствующим сообщением об ошибке для "
"пользователя."

#: ../source/specifications/simple-repository-api.rst:112
msgid ""
"When encountering a minor version greater than expected, clients **SHOULD** "
"warn users with an appropriate message."
msgstr ""
"При столкновении с минорной версией, превышающей ожидаемую, клиенты "
"**ДОЛЖНЫ** предупреждать пользователей соответствующим сообщением."

#: ../source/specifications/simple-repository-api.rst:115
msgid ""
"Clients **MAY** still continue to use feature detection in order to "
"determine what features a repository uses."
msgstr ""
"Клиенты **МОГУТ** продолжать использовать обнаружение функций, чтобы "
"определить, какие функции использует хранилище."

#: ../source/specifications/simple-repository-api.rst:121
#, fuzzy
#| msgid "JSON Serialization"
msgid "HTML Serialization"
msgstr "Сериализация JSON"

#: ../source/specifications/simple-repository-api.rst:125
#, fuzzy
#| msgid ""
#| "The following constraints apply to all JSON serialized responses "
#| "described in this spec:"
msgid ""
"The following constraints apply to all HTML serialized responses described "
"in this spec:"
msgstr ""
"Следующие ограничения применяются ко всем сериализованным ответам JSON, "
"описанным в данной спецификации:"

#: ../source/specifications/simple-repository-api.rst:128
msgid "All HTML responses **MUST** be a valid HTML5 document."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:129
msgid ""
"HTML responses **MAY** contain one or more ``meta`` tags in the ``<head>`` "
"section. The semantics of these tags are defined below."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:133
#: ../source/specifications/simple-repository-api.rst:428
msgid "Project List"
msgstr "Список проектов"

#: ../source/specifications/simple-repository-api.rst:135
#, fuzzy
#| msgid ""
#| "Within a repository, the root URL (``/`` for this spec which represents "
#| "the base URL) **MUST** be a valid HTML5 page with a single anchor element "
#| "per project in the repository. The text of the anchor tag **MUST** be the "
#| "name of the project and the href attribute **MUST** link to the URL for "
#| "that particular project. As an example:"
msgid ""
"Within a repository, the root URL (``/`` for this spec which represents the "
"base URL) **MUST** be a valid HTML5 page with a single anchor element per "
"project in the repository."
msgstr ""
"Внутри репозитория корневой URL (``/`` в данной спецификации представляет "
"собой базовый URL) **ДОЛЖЕН** быть корректной HTML5-страницей с одним "
"якорным элементом для каждого проекта в репозитории. Текст тега якоря "
"**ДОЛЖЕН** быть названием проекта, а атрибут href ** ДОЛЖЕН** ссылаться на "
"URL для этого конкретного проекта. В качестве примера:"

#: ../source/specifications/simple-repository-api.rst:139
#, fuzzy
#| msgid ""
#| "Within a repository, the root URL (``/`` for this spec which represents "
#| "the base URL) **MUST** be a valid HTML5 page with a single anchor element "
#| "per project in the repository. The text of the anchor tag **MUST** be the "
#| "name of the project and the href attribute **MUST** link to the URL for "
#| "that particular project. As an example:"
msgid ""
"The text of each anchor tag **MUST** be the name of the project and the "
"``href`` attribute **MUST** link to the URL for that particular project. As "
"an example:"
msgstr ""
"Внутри репозитория корневой URL (``/`` в данной спецификации представляет "
"собой базовый URL) **ДОЛЖЕН** быть корректной HTML5-страницей с одним "
"якорным элементом для каждого проекта в репозитории. Текст тега якоря "
"**ДОЛЖЕН** быть названием проекта, а атрибут href ** ДОЛЖЕН** ссылаться на "
"URL для этого конкретного проекта. В качестве примера:"

#: ../source/specifications/simple-repository-api.rst:156
#: ../source/specifications/simple-repository-api.rst:473
msgid "Project Detail"
msgstr "Деталь проекта"

#: ../source/specifications/simple-repository-api.rst:158
msgid ""
"Below the root URL is another URL for each individual project contained "
"within a repository. The format of this URL is ``/<project>/``, where the "
"``<project>`` is replaced by the normalized name for that project."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:164
msgid ""
"For example, a project named \"HolyGrail\" would have a URL like ``/"
"holygrail/``."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:167
msgid ""
"The project detail URL must respond with a valid HTML5 page with a single "
"anchor element per file for the project. The ``href`` attribute **MUST** be "
"a URL that links to the location of the file for download, and the text of "
"the anchor tag **MUST** match the final path component (the filename) of the "
"URL."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:172
#, fuzzy
#| msgid ""
#| "The repository **SHOULD** provide the hash of the Core Metadata file as "
#| "the ``data-core-metadata`` attribute's value using the syntax "
#| "``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name "
#| "of the hash function used, and ``<hashvalue>`` is the hex encoded digest. "
#| "The repository **MAY** use ``true`` as the attribute's value if a hash is "
#| "unavailable."
msgid ""
"Each file URL **SHOULD** include a hash in the form of a URL fragment with "
"the following syntax: ``#<hashname>=<hashvalue>``, where ``<hashname>`` is "
"the lowercase name of the hash function (such as ``sha256``) and "
"``<hashvalue>`` is the hex encoded digest."
msgstr ""
"Хранилище **ДОЛЖНО** предоставить хэш файла основных метаданных в качестве "
"значения атрибута ``data-core-metadata``, используя синтаксис "
"``<hashname>=<hashvalue>``, где ``<hashname>`` - это имя используемой хэш-"
"функции, а ``<hashvalue>`` - шестнадцатеричный дайджест. Хранилище **МОЖЕТ** "
"использовать ``true`` в качестве значения атрибута, если хэш недоступен."

#: ../source/specifications/simple-repository-api.rst:177
msgid ""
"In addition to the above, the following constraints are placed on the API:"
msgstr ""
"В дополнение к вышесказанному, на API накладываются следующие ограничения:"

#: ../source/specifications/simple-repository-api.rst:179
msgid ""
"All URLs which respond with an HTML5 page **MUST** end with a ``/`` and the "
"repository **SHOULD** redirect the URLs without a ``/`` to add a ``/`` to "
"the end."
msgstr ""
"Все URL-адреса, которые отвечают HTML5-страницей, **ДОЛЖНЫ** заканчиваться "
"``/``, а хранилище **ДОЛЖНО** перенаправлять URL-адреса без ``/``, чтобы "
"добавить ``/`` в конец."

#: ../source/specifications/simple-repository-api.rst:183
msgid ""
"URLs may be either absolute or relative as long as they point to the correct "
"location."
msgstr ""
"URL-адреса могут быть как абсолютными, так и относительными, если они "
"указывают на правильное местоположение."

#: ../source/specifications/simple-repository-api.rst:186
msgid ""
"There are no constraints on where the files must be hosted relative to the "
"repository."
msgstr ""
"Нет никаких ограничений на то, где должны быть размещены файлы относительно "
"хранилища."

#: ../source/specifications/simple-repository-api.rst:189
msgid ""
"There may be any other HTML elements on the API pages as long as the "
"required anchor elements exist."
msgstr ""
"На страницах API могут быть любые другие HTML-элементы при условии наличия "
"необходимых элементов якоря."

#: ../source/specifications/simple-repository-api.rst:192
msgid ""
"Repositories **MAY** redirect unnormalized URLs to the canonical normalized "
"URL (e.g. ``/Foobar/`` may redirect to ``/foobar/``), however clients **MUST "
"NOT** rely on this redirection and **MUST** request the normalized URL."
msgstr ""
"Репозитории **МОГУТ** перенаправлять ненормализованные URL на канонический "
"нормализованный URL (например, ``/Foobar/`` может перенаправлять на ``/"
"foobar/``), однако клиенты **НЕ ДОЛЖНЫ** полагаться на это перенаправление и "
"**МОГУТ** запрашивать нормализованный URL."

#: ../source/specifications/simple-repository-api.rst:197
msgid ""
"Repositories **SHOULD** choose a hash function from one of the ones "
"guaranteed to be available via the :py:mod:`hashlib` module in the Python "
"standard library (currently ``md5``, ``sha1``, ``sha224``, ``sha256``, "
"``sha384``, ``sha512``). The current recommendation is to use ``sha256``."
msgstr ""
"Репозитории **ДОЛЖНЫ** выбирать хэш-функцию из числа тех, которые "
"гарантированно доступны через модуль :py:mod:`hashlib` в стандартной "
"библиотеке Python (в настоящее время это ``md5``, ```sha1``, ```sha224``, "
"```sha256``, ```sha384``, ```sha512``). В настоящее время рекомендуется "
"использовать ``sha256``."

#: ../source/specifications/simple-repository-api.rst:202
msgid ""
"If there is a GPG signature for a particular distribution file it **MUST** "
"live alongside that file with the same name with a ``.asc`` appended to it. "
"So if the file ``/packages/HolyGrail-1.0.tar.gz`` existed and had an "
"associated signature, the signature would be located at ``/packages/"
"HolyGrail-1.0.tar.gz.asc``."
msgstr ""
"Если существует GPG-подпись для определенного файла дистрибутива, она "
"**МОЖЕТ** находиться рядом с одноименным файлом с приставкой ``.asc``. Таким "
"образом, если файл ``/пакеты/HolyGrail-1.0.tar.gz`` существует и имеет "
"соответствующую подпись, подпись будет находиться по адресу ``/пакеты/"
"HolyGrail-1.0.tar.gz.asc``."

#: ../source/specifications/simple-repository-api.rst:208
msgid ""
"A repository **MAY** include a ``data-core-metadata`` attribute on a file "
"link."
msgstr ""
"Хранилище **МОЖЕТ** включать атрибут ``data-core-metadata`` в ссылку на файл."

#: ../source/specifications/simple-repository-api.rst:211
msgid ""
"The repository **SHOULD** provide the hash of the Core Metadata file as the "
"``data-core-metadata`` attribute's value using the syntax "
"``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name of "
"the hash function used, and ``<hashvalue>`` is the hex encoded digest. The "
"repository **MAY** use ``true`` as the attribute's value if a hash is "
"unavailable."
msgstr ""
"Хранилище **ДОЛЖНО** предоставить хэш файла основных метаданных в качестве "
"значения атрибута ``data-core-metadata``, используя синтаксис "
"``<hashname>=<hashvalue>``, где ``<hashname>`` - это имя используемой хэш-"
"функции, а ``<hashvalue>`` - шестнадцатеричный дайджест. Хранилище **МОЖЕТ** "
"использовать ``true`` в качестве значения атрибута, если хэш недоступен."

#: ../source/specifications/simple-repository-api.rst:217
msgid ""
"A repository **MAY** include a ``data-dist-info-metadata`` attribute on a "
"file link."
msgstr ""
"Хранилище **МОЖЕТ** включать атрибут ``data-dist-info-metadata`` в ссылку на "
"файл."

#: ../source/specifications/simple-repository-api.rst:220
msgid ""
"Index clients **MAY** consume this key if present, as a legacy fallback for "
"``data-core-metadata``."
msgstr ""
"Индексные клиенты **МОГУТ** использовать этот ключ, если он присутствует, в "
"качестве традиционного запасного варианта для ``data-core-metadata``."

#: ../source/specifications/simple-repository-api.rst:225
msgid ""
"``data-dist-info-metadata`` was standardized with :pep:`658` and renamed to "
"``data-core-metadata`` with :pep:`714`."
msgstr ""
"``data-dist-info-metadata`` была стандартизирована в :pep:`658` и "
"переименована в ``data-core-metadata`` в :pep:`714`."

#: ../source/specifications/simple-repository-api.rst:228
msgid ""
"A repository **MAY** include a ``data-gpg-sig`` attribute on a file link "
"with a value of either ``true`` or ``false`` to indicate whether or not "
"there is a GPG signature. Repositories that do this **SHOULD** include it on "
"every link."
msgstr ""
"Хранилище **МОЖЕТ** включать атрибут ``data-gpg-sig`` в ссылку на файл со "
"значением ``true`` или ``false`` для указания наличия или отсутствия GPG-"
"подписи. Репозитории, которые делают это, **ДОЛЖНЫ** включать его в каждую "
"ссылку."

#: ../source/specifications/simple-repository-api.rst:232
msgid ""
"A repository **MAY** include a ``data-requires-python`` attribute on a file "
"link. This exposes the :ref:`core-metadata-requires-python` metadata field "
"for the corresponding release. Where this is present, installer tools "
"**SHOULD** ignore the download when installing to a Python version that "
"doesn't satisfy the requirement. For example:"
msgstr ""
"Репозиторий **МОЖЕТ** включать атрибут ``data-requires-python`` в ссылку на "
"файл. Он раскрывает поле метаданных :ref:`core-metadata-requires-python` для "
"соответствующего релиза. При наличии этого атрибута инструменты установки "
"**ДОЛЖНЫ** игнорировать загрузку при установке на версию Python, которая не "
"удовлетворяет этому требованию. Например:"

#: ../source/specifications/simple-repository-api.rst:242
msgid ""
"In the attribute value, < and > have to be HTML encoded as ``&lt;`` and "
"``&gt;``, respectively."
msgstr ""
"В значении атрибута < и > должны быть закодированы в HTML как ``&lt;`` и "
"``&gt;``, соответственно."

#: ../source/specifications/simple-repository-api.rst:245
#, fuzzy
#| msgid ""
#| "A repository **MAY** include a ``data-core-metadata`` attribute on a file "
#| "link."
msgid ""
"A repository **MAY** include a ``data-yanked`` attribute on a file link."
msgstr ""
"Хранилище **МОЖЕТ** включать атрибут ``data-core-metadata`` в ссылку на файл."

#: ../source/specifications/simple-repository-api.rst:247
#, fuzzy
#| msgid ""
#| "Links in the simple repository **MAY** have a ``data-yanked`` attribute "
#| "which may have no value, or may have an arbitrary string as a value. The "
#| "presence of a ``data-yanked`` attribute **SHOULD** be interpreted as "
#| "indicating that the file pointed to by this particular link has been "
#| "\"Yanked\", and should not generally be selected by an installer, except "
#| "under specific scenarios."
msgid ""
"The ``data-yanked`` attribute may have no value, or may have an arbitrary "
"string as a value. The presence of a ``data-yanked`` attribute **SHOULD** be "
"interpreted as indicating that the file pointed to by this particular link "
"has been \"Yanked\", and should not generally be selected by an installer, "
"except under specific scenarios."
msgstr ""
"Ссылки в простом репозитории **МОГУТ** иметь атрибут ``данные-янки'', "
"который может не иметь значения, или иметь произвольную строку в качестве "
"значения. Наличие атрибута ``данные-янки'' **ДОЛЖНО** интерпретироваться как "
"указание на то, что файл, на который указывает данная конкретная ссылка, был "
"\"выдернут\", и не должен выбираться программой установки, за исключением "
"особых случаев."

#: ../source/specifications/simple-repository-api.rst:253
#, fuzzy
#| msgid ""
#| "The value of the ``data-yanked`` attribute, if present, is an arbitrary "
#| "string that represents the reason for why the file has been yanked. Tools "
#| "that process the simple repository API **MAY** surface this string to end "
#| "users."
msgid ""
"The value of the ``data-yanked`` attribute, if present, is an arbitrary "
"string that represents the reason for why the file has been yanked."
msgstr ""
"Значение атрибута ``данные выдернуты``, если он присутствует, представляет "
"собой произвольную строку, которая отражает причину, по которой файл был "
"выдернут. Инструменты, обрабатывающие простой API репозитория, **МОГУТ** "
"отображать эту строку для конечных пользователей."

#: ../source/specifications/simple-repository-api.rst:258
#: ../source/specifications/simple-repository-api.rst:601
msgid ""
"The semantics of how tools should handle yanked files is described in :ref:"
"`file-yanking`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:261
msgid ""
"A repository **MAY** include a ``data-provenance`` attribute on a file link. "
"The value of this attribute **MUST** be a fully qualified URL, signaling "
"that the file's provenance can be found at that URL. This URL **MUST** "
"represent a `secure origin <https://www.chromium.org/Home/chromium-security/"
"prefer-secure-origins-for-powerful-new-features/>`_."
msgstr ""
"Хранилище **МОЖЕТ** включать атрибут ``data-provenance`` в ссылку на файл. "
"Значение этого атрибута **ДОЛЖНО** представлять собой полностью определенный "
"URL, сигнализирующий о том, что информацию о происхождении файла можно найти "
"по этому URL. Этот URL **ДОЛЖЕН** представлять собой `secure origin <https://"
"www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-"
"new-features/>`_."

#: ../source/specifications/simple-repository-api.rst:268
msgid "The ``data-provenance`` attribute was added with API version 1.3."
msgstr "Атрибут ``data-provenance`` был добавлен в API версии 1.3."

#: ../source/specifications/simple-repository-api.rst:272
msgid ""
"The format of the linked provenance is defined in :ref:`index-hosted-"
"attestations`."
msgstr ""
"Формат связанного провенанса определен в :ref:`index-hosted-attestations`."

#: ../source/specifications/simple-repository-api.rst:274
msgid ""
"A repository **MAY** include ``pypi:project-status`` and ``pypi:project-"
"status-reason`` meta tags on the response itself."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:277
msgid ""
"The value of ``pypi:project-status`` **MUST** be a valid project status "
"marker, while the value of ``pypi:project-status-reason`` **MUST** be an "
"arbitrary string if present."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:283
#: ../source/specifications/simple-repository-api.rst:493
msgid ""
"The set of valid project status markers and their semantics is described in :"
"ref:`project-status-markers`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:288
msgid ""
"The ``pypi:project-status`` and ``pypi:project-status-reason`` meta tags "
"were added with API version 1.4."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:294
msgid "Serve Distribution Metadata in the Simple Repository API"
msgstr "Предоставление метаданных распространения в API простого репозитория"

#: ../source/specifications/simple-repository-api.rst:296
msgid ""
"In a simple repository's project page, each anchor tag pointing to a "
"distribution **MAY** have a ``data-dist-info-metadata`` attribute. The "
"presence of the attribute indicates the distribution represented by the "
"anchor tag **MUST** contain a Core Metadata file that will not be modified "
"when the distribution is processed and/or installed."
msgstr ""
"На странице проекта простого хранилища каждый якорный тег, указывающий на "
"дистрибутив, **МОЖЕТ** содержать атрибут ``данные-дистрибутива-инфо-"
"метаданные``. Наличие этого атрибута указывает на то, что дистрибутив, "
"представленный тегом якоря, **МОЖЕТ** содержать файл метаданных Core, "
"который не будет изменен при обработке и/или установке дистрибутива."

#: ../source/specifications/simple-repository-api.rst:302
msgid ""
"If a ``data-dist-info-metadata`` attribute is present, the repository "
"**MUST** serve the distribution's Core Metadata file alongside the "
"distribution with a ``.metadata`` appended to the distribution's file name. "
"For example, the Core Metadata of a distribution served at ``/files/"
"distribution-1.0-py3.none.any.whl`` would be located at ``/files/"
"distribution-1.0-py3.none.any.whl.metadata``. This is similar to how :ref:"
"`the base HTML API specification <simple-repository-api-base>` specifies the "
"GPG signature file's location."
msgstr ""
"Если атрибут ``данные-дистрибутива-инфо-метаданные`` присутствует, "
"репозиторий **ДОЛЖЕН** предоставлять файл основных метаданных дистрибутива "
"вместе с дистрибутивом с добавлением ``. метаданные`` к имени файла "
"дистрибутива. Например, Core Metadata дистрибутива, обслуживаемого по адресу "
"``/файлы/дистрибутив-1.0-py3.none.any.whl``, будет находиться по адресу ``/"
"файлы/дистрибутив-1.0-py3.none.any.whl. метаданные``. Это похоже на то, как :"
"ref:`в базовой спецификации HTML API <простой репозиторий-апи-база>` "
"указывается местоположение файла подписи GPG."

#: ../source/specifications/simple-repository-api.rst:311
msgid ""
"The repository **SHOULD** provide the hash of the Core Metadata file as the "
"``data-dist-info-metadata`` attribute's value using the syntax "
"``<hashname>=<hashvalue>``, where ``<hashname>`` is the lower cased name of "
"the hash function used, and ``<hashvalue>`` is the hex encoded digest. The "
"repository **MAY** use ``true`` as the attribute's value if a hash is "
"unavailable."
msgstr ""
"Хранилище **ДОЛЖНО** предоставить хэш файла основных метаданных в качестве "
"значения атрибута ``данные-дист-инфо-метаданные``, используя синтаксис "
"``<hashname>=<hashvalue>``, где ``<hashname>`` - это имя используемой хэш-"
"функции, а ``<hashvalue>`` - дайджест в шестнадцатеричном коде. Хранилище "
"**МОЖЕТ** использовать ``true`` в качестве значения атрибута, если хэш "
"недоступен."

#: ../source/specifications/simple-repository-api.rst:319
msgid "Backwards Compatibility"
msgstr "Обратная совместимость"

#: ../source/specifications/simple-repository-api.rst:321
msgid ""
"If an anchor tag lacks the ``data-dist-info-metadata`` attribute, tools are "
"expected to revert to their current behaviour of downloading the "
"distribution to inspect the metadata."
msgstr ""
"Если в теге якоря отсутствует атрибут ``данные-дистрибутива-инфо-"
"метаданные``, ожидается, что инструменты вернутся к своему текущему "
"поведению загрузки дистрибутива для проверки метаданных."

#: ../source/specifications/simple-repository-api.rst:325
msgid ""
"Older tools not supporting the new ``data-dist-info-metadata`` attribute are "
"expected to ignore the attribute and maintain their current behaviour of "
"downloading the distribution to inspect the metadata. This is similar to how "
"prior ``data-`` attribute additions expect existing tools to operate."
msgstr ""
"Предполагается, что старые инструменты, не поддерживающие новый атрибут "
"``данные-дистрибутив-инфо-метаданные``, будут игнорировать этот атрибут и "
"сохранят свое текущее поведение, загружая дистрибутив для проверки "
"метаданных. Это похоже на то, как предыдущие добавления атрибута ``данные-`` "
"предполагают работу существующих инструментов."

#: ../source/specifications/simple-repository-api.rst:334
msgid "JSON-based Simple API for Python Package Indexes"
msgstr "Простой API на основе JSON для индексов пакетов Python"

#: ../source/specifications/simple-repository-api.rst:336
msgid ""
"To enable response parsing with only the standard library, this spec "
"specifies that all responses (besides the files themselves, and the HTML "
"responses from :ref:`the base HTML API specification <simple-repository-api-"
"base>`) should be serialized using `JSON <https://www.json.org/>`_."
msgstr ""
"Чтобы обеспечить возможность разбора ответов с помощью только стандартной "
"библиотеки, в этом документе указано, что все ответы (кроме самих файлов и "
"HTML-ответов из : ссылка:`базовой спецификации HTML API <простая репозитория-"
"api-базовая>`) должны быть сериализованы с помощью `JSON <https://www.json."
"org/>`_."

#: ../source/specifications/simple-repository-api.rst:341
msgid ""
"To enable zero configuration discovery and to minimize the amount of "
"additional HTTP requests, this spec extends :ref:`the base HTML API "
"specification <simple-repository-api-base>` such that all of the API "
"endpoints (other than the files themselves) will utilize HTTP content "
"negotiation to allow client and server to select the correct serialization "
"format to serve, i.e. either HTML or JSON."
msgstr ""
"Чтобы обеспечить нулевое обнаружение конфигурации и минимизировать "
"количество дополнительных HTTP-запросов, эта спецификация расширяет : ссылка:"
"`базовую спецификацию HTML API <симпл-репозиторий-апи-база>` таким образом, "
"что все конечные точки API (кроме самих файлов) будут использовать HTTP "
"согласование содержимого, чтобы позволить клиенту и серверу выбрать "
"правильный формат сериализации для обслуживания, т.е. либо HTML, либо JSON."

#: ../source/specifications/simple-repository-api.rst:351
msgid ""
"Versioning will adhere to :ref:`the API versioning specification <simple-"
"repository-api-versioning>` format (``Major.Minor``), which has defined the "
"existing HTML responses to be ``1.0``. Since this spec does not introduce "
"new features into the API, rather it describes a different serialization "
"format for the existing features, this spec does not change the existing "
"``1.0`` version, and instead just describes how to serialize that into JSON."
msgstr ""
"Версионирование будет соответствовать : ссылка:`спецификации версий API "
"<симпл-репозиторий-апи-версионирование>` формата (``Major.Minor``), которая "
"определила существующие HTML-ответы как ``1.0``. Поскольку эта спецификация "
"не вводит новых возможностей в API, а описывает другой формат сериализации "
"для существующих возможностей, эта спецификация не изменяет существующую "
"версию ``1.0``, а вместо этого просто описывает, как сериализовать ее в JSON."

#: ../source/specifications/simple-repository-api.rst:358
msgid ""
"Similar to :ref:`the API versioning specification <simple-repository-api-"
"versioning>`, the major version number **MUST** be incremented if any "
"changes to the new format would result in no longer being able to expect "
"existing clients to meaningfully understand the format."
msgstr ""
"Подобно : ссылка:спецификация версионности API <симпл-репозиторий-апи-"
"версионность>`, номер основной версии **МОЖНО** увеличивать, если любые "
"изменения в новом формате приведут к тому, что существующие клиенты больше "
"не смогут понять этот формат."

#: ../source/specifications/simple-repository-api.rst:364
msgid ""
"Likewise, the minor version **MUST** be incremented if features are added or "
"removed from the format, but existing clients would be expected to continue "
"to meaningfully understand the format."
msgstr ""
"Аналогично, минорная версия **МОЖЕТ** быть увеличена, если в формат "
"добавляются или удаляются функции, но ожидается, что существующие клиенты "
"будут продолжать понимать формат."

#: ../source/specifications/simple-repository-api.rst:368
msgid ""
"Changes that would not result in existing clients being unable to "
"meaningfully understand the format and which do not represent features being "
"added or removed may occur without changing the version number."
msgstr ""
"Изменения, которые не приведут к тому, что существующие клиенты не смогут "
"понять формат, и которые не представляют собой добавления или удаления "
"функций, могут происходить без изменения номера версии."

#: ../source/specifications/simple-repository-api.rst:372
msgid ""
"This is intentionally vague, as this spec believes it is best left up to "
"future specs that make any changes to the API to investigate and decide "
"whether or not that change should increment the major or minor version."
msgstr ""
"Это намеренно расплывчатая формулировка, так как в данной спецификации "
"считается, что лучше оставить это на усмотрение будущих спецификаций, "
"вносящих какие-либо изменения в API, чтобы исследовать и решить, должно ли "
"это изменение увеличивать мажорную или минорную версию."

#: ../source/specifications/simple-repository-api.rst:376
msgid ""
"Future versions of the API may add things that can only be represented in a "
"subset of the available serializations of that version. All serializations "
"version numbers, within a major version, **SHOULD** be kept in sync, but the "
"specifics of how a feature serializes into each format may differ, including "
"whether or not that feature is present at all."
msgstr ""
"В будущих версиях API могут быть добавлены функции, которые могут быть "
"представлены только в подмножестве доступных сериализаций данной версии. "
"Номера версий всех сериализаций в рамках одной основной версии **ДОЛЖНЫ** "
"быть синхронизированы, но специфика того, как функция сериализуется в каждом "
"формате, может отличаться, включая то, присутствует ли эта функция вообще."

#: ../source/specifications/simple-repository-api.rst:382
msgid ""
"It is the intent of this spec that the API should be thought of as URL "
"endpoints that return data, whose interpretation is defined by the version "
"of that data, and then serialized into the target serialization format."
msgstr ""
"Согласно этой спецификации, API следует рассматривать как конечные точки "
"URL, которые возвращают данные, интерпретация которых определяется версией "
"этих данных, а затем сериализуются в целевой формат сериализации."

#: ../source/specifications/simple-repository-api.rst:390
msgid "JSON Serialization"
msgstr "Сериализация JSON"

#: ../source/specifications/simple-repository-api.rst:392
#, fuzzy
#| msgid ""
#| "The URL structure from :ref:`the base HTML API specification <simple-"
#| "repository-api-base>` still applies, as this spec only adds an additional "
#| "serialization format for the already existing API."
msgid ""
"The URL structure from :ref:`the base HTML API specification <simple-"
"repository-html-serialization>` still applies, as this spec only adds an "
"additional serialization format for the already existing API."
msgstr ""
"Структура URL из : ссылка:`базовой спецификации HTML API <симпл-репозиторий-"
"апи-база>` по-прежнему применима, так как эта спецификация лишь добавляет "
"дополнительный формат сериализации для уже существующего API."

#: ../source/specifications/simple-repository-api.rst:396
msgid ""
"The following constraints apply to all JSON serialized responses described "
"in this spec:"
msgstr ""
"Следующие ограничения применяются ко всем сериализованным ответам JSON, "
"описанным в данной спецификации:"

#: ../source/specifications/simple-repository-api.rst:399
msgid ""
"All JSON responses will *always* be a JSON object rather than an array or "
"other type."
msgstr ""
"Все ответы JSON *всегда* будут представлять собой объект JSON, а не массив "
"или другой тип."

#: ../source/specifications/simple-repository-api.rst:402
msgid ""
"While JSON doesn't natively support a URL type, any value that represents an "
"URL in this API may be either absolute or relative as long as they point to "
"the correct location. If relative, they are relative to the current URL as "
"if it were HTML."
msgstr ""
"Хотя JSON не поддерживает тип URL, любое значение, представляющее URL в этом "
"API, может быть как абсолютным, так и относительным, если оно указывает на "
"правильное местоположение. Если они относительные, то они относятся к "
"текущему URL, как если бы это был HTML."

#: ../source/specifications/simple-repository-api.rst:407
msgid ""
"Additional keys may be added to any dictionary objects in the API responses "
"and clients **MUST** ignore keys that they don't understand."
msgstr ""
"Дополнительные ключи могут быть добавлены к любым объектам словаря в ответах "
"API, и клиенты **МОГУТ** игнорировать ключи, которые они не понимают."

#: ../source/specifications/simple-repository-api.rst:410
msgid ""
"All JSON responses will have a ``meta`` key, which contains information "
"related to the response itself, rather than the content of the response."
msgstr ""
"Все JSON-ответы имеют ключ ``meta``, который содержит информацию, "
"относящуюся к самому ответу, а не к его содержимому."

#: ../source/specifications/simple-repository-api.rst:413
msgid ""
"All JSON responses will have a ``meta.api-version`` key, which will be a "
"string that contains the :ref:`API versioning specification <simple-"
"repository-api-versioning>` ``Major.Minor`` version number, with the same "
"fail/warn semantics as defined in :ref:`the API versioning specification "
"<simple-repository-api-versioning>`."
msgstr ""
"Все JSON-ответы будут содержать ключ ``meta.api-версия``, который будет "
"представлять собой строку, содержащую номер версии : ссылка:спецификация "
"версионности API <простой репозиторий-апи-версия>` ``Major.Minor``, с той же "
"семантикой fail/warn, которая определена в :ссылка:спецификация версионности "
"API <простой репозиторий-апи-версия>`."

#: ../source/specifications/simple-repository-api.rst:419
msgid ""
"All requirements of :ref:`the base HTML API specification <simple-repository-"
"api-base>` that are not HTML specific still apply."
msgstr ""
"Все требования : ссылка:`базовой спецификации HTML API <простой репозиторий-"
"апи-база>`, не относящиеся к HTML, остаются в силе."

#: ../source/specifications/simple-repository-api.rst:422
msgid ""
"Keys (at any level) with a leading underscore are reserved as private for "
"index server use. No future standard will assign a meaning to any such key."
msgstr ""
"Ключи (любого уровня) с ведущим символом подчеркивания зарезервированы как "
"частные для использования индексным сервером. Ни один будущий стандарт не "
"будет присваивать значение такому ключу."

#: ../source/specifications/simple-repository-api.rst:430
msgid ""
"The root URL ``/`` for this spec (which represents the base URL) will be a "
"JSON encoded dictionary which has a two keys:"
msgstr ""
"Корневой URL ``/`` для этой спецификации (который представляет собой базовый "
"URL) будет представлять собой словарь в кодировке JSON, имеющий два ключа:"

#: ../source/specifications/simple-repository-api.rst:433
msgid ""
"``projects``: An array where each entry is a dictionary with a single key, "
"``name``, which represents string of the project name."
msgstr ""
"``проекты``: Массив, каждая запись которого представляет собой словарь с "
"одним ключом, ``название``, который представляет собой строку с названием "
"проекта."

#: ../source/specifications/simple-repository-api.rst:434
#: ../source/specifications/simple-repository-api.rst:484
msgid ""
"``meta``: The general response metadata as `described earlier <json-"
"serialization_>`__."
msgstr ""
"``meta``: Общие метаданные ответа, как `описано ранее <Json-"
"сериализация_>`__."

#: ../source/specifications/simple-repository-api.rst:436
#: ../source/specifications/simple-repository-api.rst:632
msgid "As an example:"
msgstr "В качестве примера:"

#: ../source/specifications/simple-repository-api.rst:453
msgid ""
"The ``name`` field is the same as the one from :ref:`the base HTML API "
"specification <simple-repository-api-base>`, which does not specify whether "
"it is the non-normalized display name or the normalized name. In practice "
"different implementations of these specs are choosing differently here, so "
"relying on it being either non-normalized or normalized is relying on an "
"implementation detail of the repository in question."
msgstr ""
"Поле ``имя`` совпадает с полем из : ссылка:``базовая спецификация HTML API "
"<простой репозиторий-апи-база>``, в которой не указано, является ли оно "
"ненормализованным отображаемым именем или нормализованным. На практике "
"разные реализации этих спецификаций выбирают по-разному, так что полагаться "
"на то, что это ненормализованное или нормализованное имя, - это полагаться "
"на детали реализации данного репозитория."

#: ../source/specifications/simple-repository-api.rst:463
msgid ""
"While the ``projects`` key is an array, and thus is required to be in some "
"kind of an order, neither :ref:`the base HTML API specification <simple-"
"repository-api-base>` nor this spec requires any specific ordering nor that "
"the ordering is consistent from one request to the next. Mentally this is "
"best thought of as a set, but both JSON and HTML lack the functionality to "
"have sets."
msgstr ""
"Хотя ключ ``проекты`` является массивом и, следовательно, должен быть "
"расположен в определенном порядке, ни : ссылка:``базовая спецификация HTML "
"API <простой репозиторий-апи-база>``, ни эта спецификация не требуют какого-"
"либо определенного порядка, ни того, чтобы порядок был последовательным от "
"одного запроса к другому. Мысленно это лучше всего воспринимать как набор, "
"но и JSON, и HTML не имеют функциональности для создания наборов."

#: ../source/specifications/simple-repository-api.rst:475
msgid ""
"The format of this URL is ``/<project>/`` where the ``<project>`` is "
"replaced by the :ref:`the base HTML API specification <simple-repository-api-"
"base>` normalized name for that project, so a project named \"Silly_Walk\" "
"would have a URL like ``/silly-walk/``."
msgstr ""
"Формат этого URL - ``/<проект>/``, где ``<проект>`` заменяется на : ссылка:"
"``базовая спецификация HTML API <простой-репозиторий-апи-база>`` "
"нормализованное имя этого проекта, так что проект с именем \" Глупый_ход\" "
"будет иметь URL типа ``/глупый_ход/``."

#: ../source/specifications/simple-repository-api.rst:480
msgid ""
"This URL must respond with a JSON encoded dictionary that has four keys:"
msgstr ""
"В ответ на этот URL должен прийти словарь в кодировке JSON, состоящий из "
"четырех ключей:"

#: ../source/specifications/simple-repository-api.rst:482
msgid "``name``: The normalized name of the project."
msgstr "``название``: Нормализованное имя проекта."

#: ../source/specifications/simple-repository-api.rst:483
msgid ""
"``files``: A list of dictionaries, each one representing an individual file."
msgstr ""
"``файлы``: Список словарей, каждый из которых представляет отдельный файл."

#: ../source/specifications/simple-repository-api.rst:486
msgid ""
"In addition to the general response metadata, the project detail ``meta`` "
"dictionary **MAY** also include the following:"
msgstr ""

#: ../source/specifications/simple-repository-api.rst:489
msgid ""
"``project-status``: If present, this **MUST** be a valid project status "
"marker."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:498
#, fuzzy
#| msgid "The ``versions`` key was added with API version 1.1."
msgid "The ``project-status`` key was added with API version 1.4."
msgstr "Ключ ``версии`` был добавлен в API версии 1.1."

#: ../source/specifications/simple-repository-api.rst:500
msgid ""
"``project-status-reason``: If present, this **MUST** be an arbitrary string "
"description of the project status."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:505
#, fuzzy
#| msgid "The ``versions`` key was added with API version 1.1."
msgid "The ``project-status-reason`` key was added with API version 1.4."
msgstr "Ключ ``версии`` был добавлен в API версии 1.1."

#: ../source/specifications/simple-repository-api.rst:507
msgid ""
"``versions``: A list of version strings specifying all of the project "
"versions uploaded for this project. The value of ``versions`` is logically a "
"set, and as such may not contain duplicates, and the order of the versions "
"is not significant."
msgstr ""
"``версии``: Список строк версий, определяющих все версии проекта, "
"загруженные для этого проекта. Значение ``версий`` логически является "
"множеством, и поэтому не может содержать дубликатов, а порядок версий не "
"имеет значения."

#: ../source/specifications/simple-repository-api.rst:514
msgid ""
"All of the files listed in the ``files`` key MUST be associated with one of "
"the versions in the ``versions`` key. The ``versions`` key MAY contain "
"versions with no associated files (to represent versions with no files "
"uploaded, if the server has such a concept)."
msgstr ""
"Все файлы, перечисленные в ключе ``файлы``, ДОЛЖНЫ быть связаны с одной из "
"версий в ключе ``версии``. Ключ ``версии`` МОЖЕТ содержать версии без "
"ассоциированных файлов (для представления версий без загруженных файлов, "
"если сервер имеет такую концепцию)."

#: ../source/specifications/simple-repository-api.rst:521
msgid ""
"Because servers may hold \"legacy\" data from before the adoption of :ref:"
"`the version specifiers specification (VSS) <version-specifiers>`, version "
"strings currently cannot be required to be valid VSS versions, and therefore "
"cannot be assumed to be orderable using the VSS rules. However, servers "
"**SHOULD** use normalized VSS versions where possible."
msgstr ""
"Поскольку серверы могут содержать \"устаревшие\" данные, полученные до "
"принятия :ref:`the version specifiers specification (VSS) <version-"
"specifiers>`, в настоящее время нельзя требовать, чтобы строки версий были "
"действительными версиями VSS, и поэтому нельзя считать, что они могут быть "
"упорядочены с использованием правил VSS. Тем не менее, серверы **ДОЛЖНЫ** "
"использовать нормализованные версии VSS, где это возможно."

#: ../source/specifications/simple-repository-api.rst:529
msgid "The ``versions`` key was added with API version 1.1."
msgstr "Ключ ``версии`` был добавлен в API версии 1.1."

#: ../source/specifications/simple-repository-api.rst:531
msgid "Each individual file dictionary has the following keys:"
msgstr "Каждый отдельный словарь файлов имеет следующие ключи:"

#: ../source/specifications/simple-repository-api.rst:533
msgid "``filename``: The filename that is being represented."
msgstr "``имя файла``: Имя представляемого файла."

#: ../source/specifications/simple-repository-api.rst:534
msgid "``url``: The URL that the file can be fetched from."
msgstr "``url``: URL, с которого может быть получен файл."

#: ../source/specifications/simple-repository-api.rst:535
msgid ""
"``hashes``: A dictionary mapping a hash name to a hex encoded digest of the "
"file. Multiple hashes can be included, and it is up to the client to decide "
"what to do with multiple hashes (it may validate all of them or a subset of "
"them, or nothing at all). These hash names **SHOULD** always be normalized "
"to be lowercase."
msgstr ""
"``хэши``: Словарь, отображающий имя хэша на шестнадцатеричный дайджест "
"файла. Можно включить несколько хэшей, и клиент сам решает, что делать с "
"несколькими хэшами (он может подтвердить все из них или их подмножество, или "
"вообще ничего). Имена хэшей **ОБЯЗАТЕЛЬНО** всегда должны быть приведены к "
"нижнему регистру."

#: ../source/specifications/simple-repository-api.rst:540
msgid ""
"The ``hashes`` dictionary **MUST** be present, even if no hashes are "
"available for the file, however it is **HIGHLY** recommended that at least "
"one secure, guaranteed-to-be-available hash is always included."
msgstr ""
"Словарь ``хэши`` **ДОЛЖЕН** присутствовать, даже если для файла нет хэшей, "
"однако **НАСТОЯТЕЛЬНО** рекомендуется всегда включать хотя бы один "
"безопасный, гарантированно доступный хэш."

#: ../source/specifications/simple-repository-api.rst:544
msgid ""
"By default, any hash algorithm available via :py:mod:`hashlib` (specifically "
"any that can be passed to :py:func:`hashlib.new()` and do not require "
"additional parameters) can be used as a key for the hashes dictionary. At "
"least one secure algorithm from :py:data:`hashlib.algorithms_guaranteed` "
"**SHOULD** always be included. At the time of this spec, ``sha256`` "
"specifically is recommended."
msgstr ""
"По умолчанию в качестве ключа для словаря хэшей может использоваться любой "
"алгоритм, доступный через :py:mod:`hashlib` (в частности, все, которые могут "
"быть переданы в :py:func:`hashlib.new()` и не требуют дополнительных "
"параметров). По крайней мере один безопасный алгоритм из :py: данные:"
"`hashlib. алгоритмы_гарантированные` **ОБЯЗАТЕЛЬНО** всегда должен быть "
"включен. На момент создания данной спецификации рекомендуется использовать "
"``sha256``."

#: ../source/specifications/simple-repository-api.rst:549
msgid ""
"``requires-python``: An **optional** key that exposes the :ref:`core-"
"metadata-requires-python` metadata field. Where this is present, installer "
"tools **SHOULD** ignore the download when installing to a Python version "
"that doesn't satisfy the requirement."
msgstr ""
"``requires-python``: **опциональный** ключ, который раскрывает поле "
"метаданных : ссылка:`core-metadata-requires-python`. При наличии этого поля "
"инструменты установки **ДОЛЖНЫ** игнорировать загрузку при установке на "
"версию Python, которая не удовлетворяет этому требованию."

#: ../source/specifications/simple-repository-api.rst:555
msgid ""
"Unlike ``data-requires-python`` in :ref:`the base HTML API specification "
"<simple-repository-api-base>`, the ``requires-python`` key does not require "
"any special escaping other than anything JSON does naturally."
msgstr ""
"В отличие от ``данные-запросы-python`` в : ссылка:``базовая спецификация "
"HTML API <simple-repository-api-base>``, ключ ``запросы-python`` не требует "
"никакого специального экранирования, кроме того, что JSON делает естественно."

#: ../source/specifications/simple-repository-api.rst:558
msgid ""
"``core-metadata``: An **optional** key that indicates that metadata for this "
"file is available, via the same location as specified in :ref:`the API "
"metadata file specification <simple-repository-api-metadata-file>` "
"(``{file_url}.metadata``). Where this is present, it **MUST** be either a "
"boolean to indicate if the file has an associated metadata file, or a "
"dictionary mapping hash names to a hex encoded digest of the metadata's hash."
msgstr ""
"``core-metadata``: **опциональный** ключ, указывающий, что метаданные для "
"этого файла доступны в том же месте, которое указано в :ref:спецификации "
"файла метаданных API <simple-repository-api-metadata-file>` (``{file_url}."
"metadata``). Там, где он присутствует, он **МОЖЕТ** быть либо булевым "
"значением, указывающим, есть ли у файла связанный файл метаданных, либо "
"словарем, отображающим имена хэшей на шестнадцатеричный дайджест хэша "
"метаданных."

#: ../source/specifications/simple-repository-api.rst:566
msgid ""
"When this is a dictionary of hashes instead of a boolean, then all the same "
"requirements and recommendations as the ``hashes`` key hold true for this "
"key as well."
msgstr ""
"Если это словарь хэшей, а не булевых значений, то все те же требования и "
"рекомендации, что и для ключа ``хэши``, справедливы и для этого ключа."

#: ../source/specifications/simple-repository-api.rst:570
msgid ""
"If this key is missing then the metadata file may or may not exist. If the "
"key value is truthy, then the metadata file is present, and if it is falsey "
"then it is not."
msgstr ""
"Если этот ключ отсутствует, то файл метаданных может существовать, а может и "
"не существовать. Если значение ключа истинно, то файл метаданных "
"присутствует, а если ложно, то нет."

#: ../source/specifications/simple-repository-api.rst:574
msgid ""
"It is recommended that servers make the hashes of the metadata file "
"available if possible."
msgstr ""
"Рекомендуется, чтобы серверы по возможности предоставляли хэши файлов "
"метаданных."

#: ../source/specifications/simple-repository-api.rst:577
msgid ""
"``dist-info-metadata``: An **optional**, deprecated alias for ``core-"
"metadata``."
msgstr ""
"``dist-info-metadata``: **опциональный**, устаревший псевдоним для ``core-"
"metadata``."

#: ../source/specifications/simple-repository-api.rst:579
msgid ""
"Index clients **MAY** consume this key if present, as a legacy fallback for "
"``core-metadata``."
msgstr ""
"Индексные клиенты **МОГУТ** использовать этот ключ, если он присутствует, в "
"качестве традиционного запасного варианта для ``ядра-метаданных``."

#: ../source/specifications/simple-repository-api.rst:584
msgid ""
"``dist-info-metadata`` was standardized with :pep:`658` and renamed to "
"``core-metadata`` with :pep:`714`."
msgstr ""
"``dist-info-metadata`` был стандартизирован в :pep:`658` и переименован в "
"``core-metadata`` в :pep:`714`."

#: ../source/specifications/simple-repository-api.rst:587
msgid ""
"``gpg-sig``: An **optional** key that acts a boolean to indicate if the file "
"has an associated GPG signature or not. The URL for the signature file "
"follows what is specified in :ref:`the base HTML API specification <simple-"
"repository-api-base>` (``{file_url}.asc``). If this key does not exist, then "
"the signature may or may not exist."
msgstr ""
"``gpg-sig``: **опциональный** ключ, который представляет собой булево "
"значение, указывающее, есть ли у файла связанная с ним подпись GPG или нет. "
"URL для файла подписи соответствует тому, что указано в : ссылка:``базовой "
"спецификации HTML API <простой репозиторий-апи-база>`` (``{файл_url}.asc``). "
"Если этот ключ не существует, то подпись может существовать, а может и не "
"существовать."

#: ../source/specifications/simple-repository-api.rst:593
#, fuzzy
#| msgid ""
#| "``yanked``: An **optional** key which may be either a boolean to indicate "
#| "if the file has been yanked, or a non empty, but otherwise arbitrary, "
#| "string to indicate that a file has been yanked with a specific reason. If "
#| "the ``yanked`` key is present and is a truthy value, then it **SHOULD** "
#| "be interpreted as indicating that the file pointed to by the ``url`` "
#| "field has been \"Yanked\" as per :ref:`the API yank specification <simple-"
#| "repository-api-yank>`."
msgid ""
"``yanked``: An **optional** key which may be either a boolean to indicate if "
"the file has been yanked, or a non empty, but otherwise arbitrary, string to "
"indicate that a file has been yanked with a specific reason. If the "
"``yanked`` key is present and is a truthy value, then it **SHOULD** be "
"interpreted as indicating that the file pointed to by the ``url`` field has "
"been \"Yanked\"."
msgstr ""
"``yanked``: **опциональный** ключ, который может быть либо булевым "
"значением, указывающим, был ли файл выдернут, либо непустой, но произвольной "
"строкой, указывающей, что файл был выдернут по определенной причине. Если "
"ключ ``yanked`` присутствует и является истинным значением, то он **ДОЛЖЕН** "
"интерпретироваться как указание на то, что файл, на который указывает поле "
"``url``, был \"Yanked\" согласно : ссылка:спецификации API yank <простой "
"репозиторий-апи-yank>`."

#: ../source/specifications/simple-repository-api.rst:604
msgid ""
"``size``: A **mandatory** key. It **MUST** contain an integer which is the "
"file size in bytes."
msgstr ""
"``размер``: **обязательный** ключ. Он **ДОЛЖЕН** содержать целое число, "
"которое представляет собой размер файла в байтах."

#: ../source/specifications/simple-repository-api.rst:608
msgid "The ``size`` key was added with API version 1.1."
msgstr "Ключ ``размер`` был добавлен в API версии 1.1."

#: ../source/specifications/simple-repository-api.rst:610
msgid ""
"``upload-time``: An **optional** key that, if present, **MUST** contain a "
"valid ISO 8601 date/time string in the format ``yyyy-mm-ddThh:mm:ss."
"ffffffZ`` which represents the time the file was uploaded to the index."
msgstr ""
"``время загрузки``: **опциональный** ключ, который, если присутствует, "
"**ДОЛЖЕН** содержать действительную строку даты/времени ISO 8601 в формате "
"``yyyy-mm-ddThh:mm:ss.ffffffZ``, которая представляет время, когда файл был "
"загружен в индекс."

#: ../source/specifications/simple-repository-api.rst:614
msgid ""
"As indicated by the ``Z`` suffix, the upload time **MUST** use the UTC "
"timezone. The fractional seconds part of the timestamp (the ``.ffffff`` "
"part) is optional, and if present may contain up to 6 digits of precision. "
"If a server does not record upload time information for a file, it **MAY** "
"omit the ``upload-time`` key."
msgstr ""
"Как указывает суффикс ``Z'', время загрузки **МОЖНО** использовать часовой "
"пояс UTC. Дробная секундная часть временной метки (часть ``.ffffff``) "
"необязательна, и если она присутствует, то может содержать до 6 цифр "
"точности. Если сервер не записывает информацию о времени загрузки файла, он "
"**МОЖЕТ** опустить ключ ``upload-time``."

#: ../source/specifications/simple-repository-api.rst:621
msgid "The ``upload-time`` key was added with API version 1.1."
msgstr "Ключ ``время загрузки`` был добавлен в API версии 1.1."

#: ../source/specifications/simple-repository-api.rst:623
msgid ""
"``provenance``: An **optional** key which, if present **MUST** be either a "
"JSON string or ``null``. If not ``null``, it **MUST** be a URL to the file's "
"associated provenance, with the same rules as ``data-provenance`` in the :"
"ref:`base HTML API specification <simple-repository-api-base>`."
msgstr ""
"``provenance``: **опциональный** ключ, который, если присутствует, "
"**ДОЛЖЕН** быть либо строкой JSON, либо ``null``. Если не ``null``, то "
"**ДОЛЖЕН** быть URL-адресом связанного с файлом провенанса, по тем же "
"правилам, что и ``data-provenance`` в спецификации HTML API <simple-"
"repository-api-base>` в :ref:`base HTML API`."

#: ../source/specifications/simple-repository-api.rst:630
msgid "The ``provenance`` field was added with API version 1.3."
msgstr "Поле ``provenance`` было добавлено в API версии 1.3."

#: ../source/specifications/simple-repository-api.rst:668
msgid ""
"While the ``files`` key is an array, and thus is required to be in some kind "
"of an order, neither :ref:`the base HTML API specification <simple-"
"repository-api-base>` nor this spec requires any specific ordering nor that "
"the ordering is consistent from one request to the next. Mentally this is "
"best thought of as a set, but both JSON and HTML lack the functionality to "
"have sets."
msgstr ""
"Хотя ключ ``файлы`` является массивом и, следовательно, должен быть "
"расположен в определенном порядке, ни : ссылка:``базовая спецификация HTML "
"API <простой репозиторий-апи-база>``, ни эта спецификация не требуют какого-"
"либо определенного порядка, а также того, чтобы порядок был последовательным "
"от одного запроса к другому. Мысленно это лучше всего воспринимать как "
"набор, но и JSON, и HTML не имеют функциональности для создания наборов."

#: ../source/specifications/simple-repository-api.rst:677
msgid "Content-Types"
msgstr "Контент-Типы"

#: ../source/specifications/simple-repository-api.rst:679
msgid ""
"This spec proposes that all responses from the Simple API will have a "
"standard content type that describes what the response is (a Simple API "
"response), what version of the API it represents, and what serialization "
"format has been used."
msgstr ""
"В этой спецификации предлагается, чтобы все ответы от простого API имели "
"стандартный тип содержимого, который описывает, что представляет собой ответ "
"(ответ простого API), какую версию API он представляет и какой формат "
"сериализации был использован."

#: ../source/specifications/simple-repository-api.rst:683
msgid "The structure of this content type will be:"
msgstr "Структура этого типа содержимого будет следующей:"

#: ../source/specifications/simple-repository-api.rst:689
msgid ""
"Since only major versions should be disruptive to clients attempting to "
"understand one of these API responses, only the major version will be "
"included in the content type, and will be prefixed with a ``v`` to clarify "
"that it is a version number."
msgstr ""
"Поскольку только основные версии должны быть опасны для клиентов, пытающихся "
"понять один из этих ответов API, только основная версия будет включена в тип "
"содержимого и будет снабжена префиксом ``v``, чтобы пояснить, что это номер "
"версии."

#: ../source/specifications/simple-repository-api.rst:694
msgid "Which means that for the existing 1.0 API, the content types would be:"
msgstr ""
"Это означает, что для существующего API 1.0 типы содержимого будут такими:"

#: ../source/specifications/simple-repository-api.rst:696
msgid "**JSON:** ``application/vnd.pypi.simple.v1+json``"
msgstr "**JSON:** ``приложение/vnd.pypi. простой.v1+json``"

#: ../source/specifications/simple-repository-api.rst:697
msgid "**HTML:** ``application/vnd.pypi.simple.v1+html``"
msgstr "**HTML:** ``приложение/vnd.pypi. простой.v1+html``"

#: ../source/specifications/simple-repository-api.rst:699
msgid ""
"In addition to the above, a special \"meta\" version is supported named "
"``latest``, whose purpose is to allow clients to request the absolute latest "
"version, without having to know ahead of time what that version is. It is "
"recommended however, that clients be explicit about what versions they "
"support."
msgstr ""
"В дополнение к вышесказанному поддерживается специальная \"мета\" версия под "
"названием ``последний``, цель которой - позволить клиентам запрашивать "
"абсолютно последнюю версию, без необходимости заранее знать, что это за "
"версия. Рекомендуется, однако, чтобы клиенты четко указывали, какие версии "
"они поддерживают."

#: ../source/specifications/simple-repository-api.rst:704
msgid ""
"To support existing clients which expect the existing :ref:`the base HTML "
"API specification <simple-repository-api-base>` API responses to use the "
"``text/html`` content type, this spec further defines ``text/html`` as an "
"alias for the ``application/vnd.pypi.simple.v1+html`` content type."
msgstr ""
"Для поддержки существующих клиентов, которые ожидают, что существующие : "
"ссылка:`базовая спецификация HTML API <простой репозиторий-апи-база>` ответы "
"API будут использовать тип содержимого ``текст/html``, эта спецификация "
"далее определяет ``текст/html`` как псевдоним для типа содержимого "
"``приложение/vnd.pypi. простой.v1+html``."

#: ../source/specifications/simple-repository-api.rst:711
msgid "Version + Format Selection"
msgstr "Выбор версии + формата"

#: ../source/specifications/simple-repository-api.rst:713
msgid ""
"Now that there is multiple possible serializations, we need a mechanism to "
"allow clients to indicate what serialization formats they're able to "
"understand. In addition, it would be beneficial if any possible new major "
"version to the API can be added without disrupting existing clients "
"expecting the previous API version."
msgstr ""
"Теперь, когда существует множество возможных сериализаций, нам нужен "
"механизм, позволяющий клиентам указывать, какие форматы сериализации они "
"способны понимать. Кроме того, было бы полезно, если бы любая возможная "
"новая основная версия API могла быть добавлена без нарушения работы "
"существующих клиентов, ожидающих предыдущую версию API."

#: ../source/specifications/simple-repository-api.rst:718
msgid ""
"To enable this, this spec standardizes on the use of HTTP's `Server-Driven "
"Content Negotiation <https://developer.mozilla.org/en-US/docs/Web/HTTP/"
"Content_negotiation>`_."
msgstr ""
"Чтобы сделать это, данная спецификация стандартизирует использование HTTP "
"`Серверного согласования содержимого` (Server-Driven Content Negotiation) "
"<https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation>`_."

#: ../source/specifications/simple-repository-api.rst:721
msgid ""
"While this spec won't fully describe the entirety of server-driven content "
"negotiation, the flow is roughly:"
msgstr ""
"Хотя эта спецификация не может полностью описать всю процедуру согласования "
"содержимого на сервере, ее суть примерно такова:"

#: ../source/specifications/simple-repository-api.rst:724
msgid ""
"The client makes an HTTP request containing an ``Accept`` header listing all "
"of the version+format content types that they are able to understand."
msgstr ""
"Клиент отправляет HTTP-запрос, содержащий заголовок ``Принять``, в котором "
"перечислены все типы содержимого версии+формата, которые он способен понять."

#: ../source/specifications/simple-repository-api.rst:726
msgid ""
"The server inspects that header, selects one of the listed content types, "
"then returns a response using that content type (treating the absence of an "
"``Accept`` header as ``Accept: */*``)."
msgstr ""
"Сервер проверяет этот заголовок, выбирает один из перечисленных типов "
"содержимого, затем возвращает ответ, используя этот тип содержимого "
"(рассматривая отсутствие заголовка ``принять`` как ``принять: */*``)."

#: ../source/specifications/simple-repository-api.rst:729
msgid ""
"If the server does not support any of the content types in the ``Accept`` "
"header then they are able to choose between 3 different options for how to "
"respond:"
msgstr ""
"Если сервер не поддерживает ни один из типов содержимого в заголовке "
"``принять``, он может выбрать один из 3 вариантов ответа:"

#: ../source/specifications/simple-repository-api.rst:733
msgid ""
"Select a default content type other than what the client has requested and "
"return a response with that."
msgstr ""
"Выберите тип содержимого по умолчанию, отличный от того, что запросил "
"клиент, и верните ответ с этим типом."

#: ../source/specifications/simple-repository-api.rst:735
msgid ""
"Return a HTTP ``406 Not Acceptable`` response to indicate that none of the "
"requested content types were available, and the server was unable or "
"unwilling to select a default content type to respond with."
msgstr ""
"Возвращает ответ HTTP ``406 Неприемлемо``, указывающий на то, что ни один из "
"запрошенных типов содержимого не был доступен, и сервер не смог или не "
"захотел выбрать тип содержимого по умолчанию для ответа."

#: ../source/specifications/simple-repository-api.rst:738
msgid ""
"Return a HTTP ``300 Multiple Choices`` response that contains a list of all "
"of the possible responses that could have been chosen."
msgstr ""
"Возвращает ответ HTTP ``300 Множество вариантов``, содержащий список всех "
"возможных ответов, которые могли быть выбраны."

#: ../source/specifications/simple-repository-api.rst:740
msgid ""
"The client interprets the response, handling the different types of "
"responses that the server may have responded with."
msgstr ""
"Клиент интерпретирует ответ, обрабатывая различные типы ответов, которые мог "
"дать сервер."

#: ../source/specifications/simple-repository-api.rst:743
msgid ""
"This spec does not specify which choices the server makes in regards to "
"handling a content type that it isn't able to return, and clients **SHOULD** "
"be prepared to handle all of the possible responses in whatever way makes "
"the most sense for that client."
msgstr ""
"В данной спецификации не указывается, какой выбор делает сервер в отношении "
"обработки типа содержимого, который он не может вернуть, и клиенты "
"**ДОЛЖНЫ** быть готовы обрабатывать все возможные ответы тем способом, "
"который наиболее удобен для них."

#: ../source/specifications/simple-repository-api.rst:748
msgid ""
"However, as there is no standard format for how a ``300 Multiple Choices`` "
"response can be interpreted, this spec highly discourages servers from "
"utilizing that option, as clients will have no way to understand and select "
"a different content-type to request. In addition, it's unlikely that the "
"client *could* understand a different content type anyways, so at best this "
"response would likely just be treated the same as a ``406 Not Acceptable`` "
"error."
msgstr ""
"Однако, поскольку не существует стандартного формата для интерпретации "
"ответа ``300 Много вариантов``, данная спецификация настоятельно не "
"рекомендует серверам использовать эту опцию, поскольку у клиентов не будет "
"возможности понять и выбрать другой тип содержимого для запроса. Кроме того, "
"маловероятно, что клиент *может* понять другой тип содержимого в любом "
"случае, так что в лучшем случае этот ответ будет рассматриваться так же, как "
"и ошибка ``406 не принято``."

#: ../source/specifications/simple-repository-api.rst:755
msgid ""
"This spec **does** require that if the meta version ``latest`` is being "
"used, the server **MUST** respond with the content type for the actual "
"version that is contained in the response (i.e. an ``Accept: application/vnd."
"pypi.simple.latest+json`` request that returns a ``v1.x`` response should "
"have a ``Content-Type`` of ``application/vnd.pypi.simple.v1+json``)."
msgstr ""
"Эта спецификация **дополняет** требование, что если используется мета-версия "
"``latest``, сервер **ДОЛЖЕН** отвечать типом содержимого для фактической "
"версии, которая содержится в ответе (т.е. запрос ``Accept: application/vnd."
"pypi.simple.latest+json``, который возвращает ответ ``v1.x'', должен иметь "
"``Content-Type`` из ``application/vnd.pypi.simple.v1+json``)."

#: ../source/specifications/simple-repository-api.rst:762
msgid ""
"The ``Accept`` header is a comma separated list of content types that the "
"client understands and is able to process. It supports three different "
"formats for each content type that is being requested:"
msgstr ""
"Заголовок ``Принять`` представляет собой разделенный запятыми список типов "
"содержимого, которые клиент понимает и может обрабатывать. Он поддерживает "
"три различных формата для каждого запрашиваемого типа содержимого:"

#: ../source/specifications/simple-repository-api.rst:766
msgid "``$type/$subtype``"
msgstr "``$тип/$подтип``"

#: ../source/specifications/simple-repository-api.rst:767
msgid "``$type/*``"
msgstr "``$тип/*``"

#: ../source/specifications/simple-repository-api.rst:768
msgid "``*/*``"
msgstr "``*/*``"

#: ../source/specifications/simple-repository-api.rst:770
msgid ""
"For the use of selecting a version+format, the most useful of these is "
"``$type/$subtype``, as that is the only way to actually specify the version "
"and format you want."
msgstr ""
"Для выбора версии+формата наиболее полезным из них является ``$тип/"
"$подтип``, поскольку это единственный способ действительно указать нужную "
"версию и формат."

#: ../source/specifications/simple-repository-api.rst:774
msgid ""
"The order of the content types listed in the ``Accept`` header does not have "
"any specific meaning, and the server **SHOULD** consider all of them to be "
"equally valid to respond with. If a client wishes to specify that they "
"prefer a specific content type over another, they may use the ``Accept`` "
"header's `quality value <https://developer.mozilla.org/en-US/docs/Glossary/"
"Quality_values>`_ syntax."
msgstr ""
"Порядок следования типов содержимого, перечисленных в заголовке ``принять``, "
"не имеет конкретного значения, и сервер **ДОЛЖЕН** считать, что все они "
"одинаково подходят для ответа. Если клиент хочет указать, что он "
"предпочитает определенный тип содержимого другому, он может использовать "
"синтаксис ``принять`` в заголовке ``значение качества <https://developer."
"mozilla.org/en-US/docs/Glossary/Quality_values>`_."

#: ../source/specifications/simple-repository-api.rst:781
msgid ""
"This allows a client to specify a priority for a specific entry in their "
"``Accept`` header, by appending a ``;q=`` followed by a value between ``0`` "
"and ``1`` inclusive, with up to 3 decimal digits. When interpreting this "
"value, an entry with a higher quality has priority over an entry with a "
"lower quality, and any entry without a quality present will default to a "
"quality of ``1``."
msgstr ""
"Это позволяет клиенту указать приоритет для конкретной записи в заголовке "
"``Принять``, добавив ``;q=``, за которым следует значение от ``0`` до ``1`` "
"включительно, содержащее до 3 десятичных цифр. При интерпретации этого "
"значения запись с более высоким качеством имеет приоритет перед записью с "
"более низким качеством, и любая запись без присутствующего качества будет по "
"умолчанию иметь качество ``1``."

#: ../source/specifications/simple-repository-api.rst:787
msgid ""
"However, clients should keep in mind that a server is free to select **any** "
"of the content types they've asked for, regardless of their requested "
"priority, and it may even return a content type that they did **not** ask "
"for."
msgstr ""
"Однако клиентам следует помнить, что сервер может выбрать **любой** из "
"запрошенных ими типов содержимого, независимо от их приоритета, и даже может "
"вернуть тип содержимого, который они **не* запрашивали."

#: ../source/specifications/simple-repository-api.rst:791
msgid ""
"To aid clients in determining the content type of the response that they "
"have received from an API request, this spec requires that servers always "
"include a ``Content-Type`` header indicating the content type of the "
"response. This is technically a backwards incompatible change, however in "
"practice `pip has been enforcing this requirement <https://github.com/pypa/"
"pip/blob/cf3696a81b341925f82f20cb527e656176987565/src/pip/_internal/index/"
"collector.py#L123-L150>`_ so the risks for actual breakages is low."
msgstr ""
"Чтобы помочь клиентам определить тип содержимого ответа, который они "
"получили в результате запроса API, данная спецификация требует, чтобы "
"серверы всегда включали заголовок ``Содержание-Тип``, указывающий на тип "
"содержимого ответа. Технически это изменение несовместимо с обратными "
"требованиями, однако на практике `pip соблюдает это требование <https://"
"github.com/pypa/pip/blob/cf3696a81b341925f82f20cb527e656176987565/src/pip/"
"_internal/index/collector.py#L123-L150>`_, так что риск реальных поломок "
"невелик."

#: ../source/specifications/simple-repository-api.rst:798
msgid "An example of how a client can operate would look like:"
msgstr "Пример работы клиента может выглядеть следующим образом:"

#: ../source/specifications/simple-repository-api.rst:849
msgid ""
"If a client wishes to only support HTML or only support JSON, then they "
"would just remove the content types that they do not want from the "
"``Accept`` header, and turn receiving them into an error."
msgstr ""
"Если клиент хочет поддерживать только HTML или только JSON, то он просто "
"удалит типы контента, которые ему не нужны, из заголовка ``принять``, и "
"превратит их получение в ошибку."

#: ../source/specifications/simple-repository-api.rst:855
msgid "Alternative Negotiation Mechanisms"
msgstr "Альтернативные механизмы переговоров"

#: ../source/specifications/simple-repository-api.rst:857
msgid ""
"While using HTTP's Content negotiation is considered the standard way for a "
"client and server to coordinate to ensure that the client is getting an HTTP "
"response that it is able to understand, there are situations where that "
"mechanism may not be sufficient. For those cases this spec has alternative "
"negotiation mechanisms that may *optionally* be used instead."
msgstr ""
"Хотя использование согласования содержимого HTTP считается стандартным "
"способом координации действий клиента и сервера для обеспечения того, чтобы "
"клиент получал понятный ему HTTP-ответ, бывают ситуации, когда этого "
"механизма может быть недостаточно. Для таких случаев в данной спецификации "
"предусмотрены альтернативные механизмы согласования, которые могут "
"*факультативно* использоваться вместо него."

#: ../source/specifications/simple-repository-api.rst:865
msgid "URL Parameter"
msgstr "Параметр URL"

#: ../source/specifications/simple-repository-api.rst:867
msgid ""
"Servers that implement the Simple API may choose to support a URL parameter "
"named ``format`` to allow the clients to request a specific version of the "
"URL."
msgstr ""
"Серверы, реализующие Simple API, могут поддерживать параметр URL с именем "
"``формат``, чтобы позволить клиентам запрашивать определенную версию URL."

#: ../source/specifications/simple-repository-api.rst:870
msgid ""
"The value of the ``format`` parameter should be **one** of the valid content "
"types. Passing multiple content types, wild cards, quality values, etc... is "
"**not** supported."
msgstr ""
"Значение параметра ``формат'' должно быть **одним** из допустимых типов "
"содержимого. Передача нескольких типов содержимого, подстановочных карт, "
"качественных значений и т. д. **не поддерживается."

#: ../source/specifications/simple-repository-api.rst:874
msgid ""
"Supporting this parameter is optional, and clients **SHOULD NOT** rely on it "
"for interacting with the API. This negotiation mechanism is intended to "
"allow for easier human based exploration of the API within a browser, or to "
"allow documentation or notes to link to a specific version+format."
msgstr ""
"Поддержка этого параметра необязательна, и клиенты **НЕ ДОЛЖНЫ** полагаться "
"на него при взаимодействии с API. Этот механизм согласования предназначен "
"для того, чтобы облегчить изучение API в браузере, а также для того, чтобы в "
"документации или примечаниях можно было ссылаться на конкретную "
"версию+формат."

#: ../source/specifications/simple-repository-api.rst:879
msgid ""
"Servers that do not support this parameter may choose to return an error "
"when it is present, or they may simple ignore its presence."
msgstr ""
"Серверы, не поддерживающие этот параметр, могут возвращать ошибку при его "
"наличии или просто игнорировать его присутствие."

#: ../source/specifications/simple-repository-api.rst:882
msgid ""
"When a server does implement this parameter, it **SHOULD** take precedence "
"over any values in the client's ``Accept`` header, and if the server does "
"not support the requested format, it may choose to fall back to the "
"``Accept`` header, or choose any of the error conditions that standard "
"server-driven content negotiation typically has (e.g. ``406 Not Available``, "
"``303 Multiple Choices``, or selecting a default type to return)."
msgstr ""
"Когда сервер реализует этот параметр, он **ДОЛЖЕН** иметь приоритет над "
"любыми значениями в заголовке ``Принять`` клиента, и если сервер не "
"поддерживает запрашиваемый формат, он может вернуться к заголовку "
"``Принять`` или выбрать любое из условий ошибки, которые обычно имеет "
"стандартное согласование содержимого, управляемое сервером (например, ``406 "
"Недоступен``, ``303 Несколько вариантов`` или выбор типа по умолчанию для "
"возврата)."

#: ../source/specifications/simple-repository-api.rst:891
msgid "Endpoint Configuration"
msgstr "Конфигурация конечной точки"

#: ../source/specifications/simple-repository-api.rst:893
msgid ""
"This option technically is not a special option at all, it is just a natural "
"consequence of using content negotiation and allowing servers to select "
"which of the available content types is their default."
msgstr ""
"Эта опция технически не является специальной опцией вообще, это просто "
"естественное следствие использования согласования содержимого и разрешения "
"серверам выбирать, какой из доступных типов содержимого является их типом по "
"умолчанию."

#: ../source/specifications/simple-repository-api.rst:897
msgid ""
"If a server is unwilling or unable to implement the server-driven content "
"negotiation, and would instead rather require users to explicitly configure "
"their client to select the version they want, then that is a supported "
"configuration."
msgstr ""
"Если сервер не хочет или не может реализовать согласование содержимого, "
"управляемое сервером, и предпочитает, чтобы пользователи явно настраивали "
"свой клиент для выбора нужной им версии, то такая конфигурация "
"поддерживается."

#: ../source/specifications/simple-repository-api.rst:901
msgid ""
"To enable this, a server should make multiple endpoints (for instance, ``/"
"simple/v1+html/`` and/or ``/simple/v1+json/``) for each version+format that "
"they wish to support. Under that endpoint, they can host a copy of their "
"repository that only supports one (or a subset) of the content-types. When a "
"client makes a request using the ``Accept`` header, the server can ignore it "
"and return the content type that corresponds to that endpoint."
msgstr ""
"Для этого сервер должен создать несколько конечных точек (например, ``/"
"простой/v1+html/`` и/или ``/простой/v1+json/``) для каждой версии+формата, "
"которые он хочет поддерживать. Под этой конечной точкой они могут разместить "
"копию своего хранилища, которая поддерживает только один (или подмножество) "
"из типов содержимого. Когда клиент делает запрос с использованием заголовка "
"``Принять``, сервер может проигнорировать его и вернуть тип содержимого, "
"соответствующий данной конечной точке."

#: ../source/specifications/simple-repository-api.rst:908
msgid ""
"For clients that wish to require specific configuration, they can keep track "
"of which version+format a specific repository URL was configured for, and "
"when making a request to that server, emit an ``Accept`` header that *only* "
"includes the correct content type."
msgstr ""
"Для клиентов, которые хотят требовать определенной конфигурации, они могут "
"отслеживать, для какой версии+формата был сконфигурирован конкретный URL "
"репозитория, и при запросе к этому серверу выдавать заголовок ``Принять``, "
"который *только* включает правильный тип содержимого."

#: ../source/specifications/simple-repository-api.rst:916
msgid ""
"This section is non-normative, and represents what the spec authors believe "
"to be the best default implementation decisions for something implementing "
"this spec, but it does **not** represent any sort of requirement to match "
"these decisions."
msgstr ""
"Этот раздел не является нормативным и представляет собой то, что, по мнению "
"авторов спецификации, является наилучшими решениями по умолчанию для "
"реализации этой спецификации, но он **не** представляет собой никаких "
"требований по соответствию этим решениям."

#: ../source/specifications/simple-repository-api.rst:920
msgid ""
"These decisions have been chosen to maximize the number of requests that can "
"be moved onto the newest version of an API, while maintaining the greatest "
"amount of compatibility. In addition, they've also tried to make using the "
"API provide guardrails that attempt to push clients into making the best "
"choices it can."
msgstr ""
"Эти решения были выбраны для того, чтобы максимизировать количество "
"запросов, которые можно перенести на новейшую версию API, сохранив при этом "
"максимальную совместимость. Кроме того, они постарались сделать так, чтобы "
"использование API обеспечивало защитные ограждения, которые пытаются "
"подтолкнуть клиента к наилучшему выбору."

#: ../source/specifications/simple-repository-api.rst:925
msgid "It is recommended that servers:"
msgstr "Рекомендуется использовать серверы:"

#: ../source/specifications/simple-repository-api.rst:927
msgid ""
"Support all 3 content types described in this spec, using server-driven "
"content negotiation, for as long as they reasonably can, or at least as long "
"as they're receiving non trivial traffic that uses the HTML responses."
msgstr ""
"Поддерживать все 3 типа контента, описанные в данной спецификации, используя "
"согласование контента с сервером, до тех пор, пока это возможно, или, по "
"крайней мере, пока они получают нетривиальный трафик, использующий ответы "
"HTML."

#: ../source/specifications/simple-repository-api.rst:931
msgid ""
"When encountering an ``Accept`` header that does not contain any content "
"types that it knows how to work with, the server should not ever return a "
"``300 Multiple Choice`` response, and instead return a ``406 Not "
"Acceptable`` response."
msgstr ""
"При встрече с заголовком ``Принять``, который не содержит типов содержимого, "
"с которыми сервер умеет работать, сервер не должен возвращать ответ ``300 "
"Множественный выбор``, а вместо этого возвращает ответ ``406 Неприемлемо``."

#: ../source/specifications/simple-repository-api.rst:936
msgid ""
"However, if choosing to use the endpoint configuration, you should prefer to "
"return a ``200 OK`` response in the expected content type for that endpoint."
msgstr ""
"Однако, если вы решили использовать конфигурацию конечной точки, вы должны "
"предпочесть возвращать ответ ``200 OK`` в ожидаемом типе содержимого для "
"данной конечной точки."

#: ../source/specifications/simple-repository-api.rst:939
msgid ""
"When selecting an acceptable version, the server should choose the highest "
"version that the client supports, with the most expressive/featureful "
"serialization format, taking into account the specificity of the client "
"requests as well as any quality priority values they have expressed, and it "
"should only use the ``text/html`` content type as a last resort."
msgstr ""
"При выборе приемлемой версии сервер должен выбрать самую высокую версию, "
"которую поддерживает клиент, с наиболее выразительным/функциональным "
"форматом сериализации, принимая во внимание специфику запросов клиента, а "
"также любые значения приоритета качества, которые он выразил, и должен "
"использовать тип содержимого ``текст/html`` только в качестве последнего "
"средства."

#: ../source/specifications/simple-repository-api.rst:945
msgid "It is recommended that clients:"
msgstr "Рекомендуется, чтобы клиенты:"

#: ../source/specifications/simple-repository-api.rst:947
msgid ""
"Support all 3 content types described in this spec, using server-driven "
"content negotiation, for as long as they reasonably can."
msgstr ""
"Поддерживать все 3 типа контента, описанные в данной спецификации, используя "
"согласование контента с сервером, до тех пор, пока это возможно."

#: ../source/specifications/simple-repository-api.rst:950
msgid ""
"When constructing an ``Accept`` header, include all of the content types "
"that you support."
msgstr ""
"При составлении заголовка ``Принять`` включите в него все типы содержимого, "
"которые вы поддерживаете."

#: ../source/specifications/simple-repository-api.rst:953
msgid ""
"You should generally *not* include a quality priority value for your content "
"types, unless you have implementation specific reasons that you want the "
"server to take into account (for example, if you're using the standard "
"library HTML parser and you're worried that there may be some kinds of HTML "
"responses that you're unable to parse in some edge cases)."
msgstr ""
"Обычно не следует *не* включать значение приоритета качества для типов "
"содержимого, если только у вас нет конкретных причин, которые вы хотите, "
"чтобы сервер принял во внимание (например, если вы используете HTML-парсер "
"стандартной библиотеки и беспокоитесь о том, что некоторые типы HTML-ответов "
"могут быть не в состоянии разобрать в некоторых крайних случаях)."

#: ../source/specifications/simple-repository-api.rst:959
msgid ""
"The one exception to this recommendation is that it is recommended that you "
"*should* include a ``;q=0.01`` value on the legacy ``text/html`` content "
"type, unless it is the only content type that you are requesting."
msgstr ""
"Единственным исключением из этой рекомендации является то, что рекомендуется "
"*включать значение ``;q=0.01`` для унаследованного типа содержимого ``текст/"
"html``, если только это не единственный тип содержимого, который вы "
"запрашиваете."

#: ../source/specifications/simple-repository-api.rst:963
msgid ""
"Explicitly select what versions they are looking for, rather than using the "
"``latest`` meta version during normal operation."
msgstr ""
"Явно выбирайте версии, которые они ищут, вместо того чтобы использовать "
"``последнюю`` мета-версию во время обычной работы."

#: ../source/specifications/simple-repository-api.rst:966
msgid ""
"Check the ``Content-Type`` of the response and ensure it matches something "
"that you were expecting."
msgstr ""
"Проверьте ``Контент-Тип`` в ответе и убедитесь, что он соответствует тому, "
"что вы ожидали."

#: ../source/specifications/simple-repository-api.rst:974
msgid "September 2015: initial form of the HTML format, in :pep:`503`"
msgstr "Сентябрь 2015 года: начальная форма формата HTML, в :pep:`503`"

#: ../source/specifications/simple-repository-api.rst:975
msgid "July 2016: Requires-Python metadata, in an update to :pep:`503`"
msgstr "Июль 2016 г: Метаданные Требуется-Python, в обновлении :pep:`503`"

#: ../source/specifications/simple-repository-api.rst:976
msgid "May 2019: \"yank\" support, in :pep:`592`"
msgstr "Май 2019: поддержка \"янки\", в :pep:`592`"

#: ../source/specifications/simple-repository-api.rst:977
msgid ""
"July 2020: API versioning convention and metadata, and declaring the HTML "
"format as API v1, in :pep:`629`"
msgstr ""
"Июль 2020 года: Соглашение о версиях API и метаданные, а также объявление "
"формата HTML как API v1, в :pep:`629`"

#: ../source/specifications/simple-repository-api.rst:979
msgid ""
"May 2021: providing package metadata independently from a package, in :pep:"
"`658`"
msgstr ""
"Май 2021: предоставление метаданных пакета независимо от пакета, в :pep:`658`"

#: ../source/specifications/simple-repository-api.rst:981
msgid ""
"May 2022: initial form of the JSON format, with a mechanism for clients to "
"choose between them, and declaring both formats as API v1, in :pep:`691`"
msgstr ""
"Май 2022: начальная форма формата JSON, с механизмом выбора между ними для "
"клиентов, и объявление обоих форматов как API v1, в :pep:`691`"

#: ../source/specifications/simple-repository-api.rst:983
msgid ""
"October 2022: project versions and file size and upload-time in the JSON "
"format, in :pep:`700`"
msgstr ""
"Октябрь 2022: версии проектов, размер файлов и время загрузки в формате "
"JSON, в :pep:`700`"

#: ../source/specifications/simple-repository-api.rst:985
msgid ""
"June 2023: renaming the field which provides package metadata independently "
"from a package, in :pep:`714`"
msgstr ""
"Июнь 2023: переименование поля, предоставляющего метаданные пакета "
"независимо от пакета, в :pep:`714`"

#: ../source/specifications/simple-repository-api.rst:987
msgid ""
"November 2024: provenance metadata in the HTML and JSON formats, in :pep:"
"`740`"
msgstr ""
"Ноябрь 2024: метаданные о проверке в форматах HTML и JSON, в :pep:`740`"

#: ../source/specifications/simple-repository-api.rst:988
#, fuzzy
#| msgid ""
#| "November 2024: provenance metadata in the HTML and JSON formats, in :pep:"
#| "`740`"
msgid ""
"July 2025: project status markers in the HTML and JSON formats, in :pep:`792`"
msgstr ""
"Ноябрь 2024: метаданные о проверке в форматах HTML и JSON, в :pep:`740`"

#: ../source/specifications/simple-repository-api.rst:989
msgid ""
"July 2025: layout changes (dedicated page for file yanking, introduce "
"concepts before API details)"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:6
msgid "Source distribution format"
msgstr "Формат распространения в исходных кодах"

#: ../source/specifications/source-distribution-format.rst:8
#, fuzzy
#| msgid ""
#| "The current standard format of source distribution format is identified "
#| "by the presence of a :file:`pyproject.toml` file in the distribution "
#| "archive.  The layout of such a distribution was originally specified in :"
#| "pep:`517` and is formally documented here."
msgid ""
"The current standard source distribution format is identified by the "
"presence of a :file:`pyproject.toml` file in the distribution archive.  The "
"layout of such a distribution was originally specified in :pep:`517` and is "
"formally documented here."
msgstr ""
"Текущий стандартный формат дистрибутива исходников определяется наличием в "
"архиве дистрибутива файла :file:`pyproject.toml`.  Макет такого дистрибутива "
"был первоначально указан в :pep:`517` и формально документирован здесь."

#: ../source/specifications/source-distribution-format.rst:13
msgid ""
"There is also the legacy source distribution format, implicitly defined by "
"the behaviour of ``distutils`` module in the standard library, when "
"executing :command:`setup.py sdist`. This document does not attempt to "
"standardise this format, except to note that if a legacy source distribution "
"contains a ``PKG-INFO`` file using metadata version 2.2 or later, then it "
"MUST follow the rules applicable to source distributions defined in the "
"metadata specification."
msgstr ""
"Существует также формат дистрибутива унаследованных исходных текстов, неявно "
"определяемый поведением модуля ``distutils`` в стандартной библиотеке при "
"выполнении :command:``setup.py sdist``. Этот документ не пытается "
"стандартизировать этот формат, за исключением того, что если дистрибутив "
"унаследованного исходного кода содержит файл ``PKG-INFO``, использующий "
"метаданные версии 2.2 или более поздней, то он ДОЛЖЕН следовать правилам, "
"применимым к дистрибутивам исходного кода, определенным в спецификации "
"метаданных."

#: ../source/specifications/source-distribution-format.rst:21
msgid "Source distributions are also known as *sdists* for short."
msgstr "Дистрибутивы с исходными текстами также известны как *sdists*."

#: ../source/specifications/source-distribution-format.rst:26
msgid "Source trees"
msgstr "Деревья источников"

#: ../source/specifications/source-distribution-format.rst:28
#, fuzzy
#| msgid ""
#| "A *source tree* is a collection of files and directories -- like a "
#| "version control system checkout -- which contains a :file:`pyproject."
#| "toml` file that can be use to build a source distribution from the "
#| "contained files and directories. :pep:`517` and :pep:`518` specify what "
#| "is required to meet the definition of what :file:`pyproject.toml` must "
#| "contain for something to be deemed a source tree."
msgid ""
"A *source tree* is a collection of files and directories -- like a version "
"control system checkout -- which contains a :file:`pyproject.toml` file that "
"can be used to build a source distribution from the contained files and "
"directories. :pep:`517` and :pep:`518` specify what is required to meet the "
"definition of what :file:`pyproject.toml` must contain for something to be "
"deemed a source tree."
msgstr ""
"Дерево исходных текстов - это коллекция файлов и каталогов, подобно контролю "
"системы управления версиями, содержащая файл :file:`pyproject.toml`, который "
"может быть использован для сборки дистрибутива исходных текстов из "
"содержащихся файлов и каталогов. :pep:`517` и :pep:`518` определяют, что "
"должно соответствовать определению того, что должен содержать :file:"
"`pyproject.toml`, чтобы что-то считалось деревом исходных текстов."

#: ../source/specifications/source-distribution-format.rst:38
msgid "Source distribution file name"
msgstr "Имя файла исходного дистрибутива"

#: ../source/specifications/source-distribution-format.rst:40
msgid ""
"The file name of a sdist was standardised in :pep:`625`. The file name must "
"be in the form ``{name}-{version}.tar.gz``, where ``{name}`` is normalised "
"according to the same rules as for binary distributions (see :ref:`binary-"
"distribution-format`), and ``{version}`` is the canonicalized form of the "
"project version (see :ref:`version-specifiers`)."
msgstr ""
"Имя файла sdist было стандартизировано в :pep:`625`. Имя файла должно иметь "
"вид ``{имя}-{версия}.tar.gz``, где ``{имя}`` нормализовано по тем же "
"правилам, что и для бинарных дистрибутивов (см. :ref:`binary-distribution-"
"format`), а ``{версия}`` - это канонизированная форма версии проекта (см. :"
"ref:`version-specifiers`)."

#: ../source/specifications/source-distribution-format.rst:46
msgid ""
"The name and version components of the filename MUST match the values stored "
"in the metadata contained in the file."
msgstr ""
"Компоненты имени и версии в имени файла ДОЛЖНЫ соответствовать значениям, "
"хранящимся в метаданных, содержащихся в файле."

#: ../source/specifications/source-distribution-format.rst:49
msgid ""
"Code that produces a source distribution file MUST give the file a name that "
"matches this specification. This includes the ``build_sdist`` hook of a :"
"term:`build backend <Build Backend>`."
msgstr ""
"Код, создающий дистрибутивный файл с исходным кодом, ДОЛЖЕН дать файлу имя, "
"соответствующее этой спецификации. Это включает в себя крючок "
"``build_sdist`` в :term:`build backend <Build Backend>`."

#: ../source/specifications/source-distribution-format.rst:53
msgid ""
"Code that processes source distribution files MAY recognise source "
"distribution files by the ``.tar.gz`` suffix and the presence of precisely "
"*one* hyphen in the filename. Code that does this may then use the "
"distribution name and version from the filename without further verification."
msgstr ""
"Код, обрабатывающий файлы исходных дистрибутивов, МОЖЕТ распознать файлы "
"исходных дистрибутивов по суффиксу ``.tar.gz`` и наличию *одного* дефиса в "
"имени файла. Код, который это делает, может использовать имя дистрибутива и "
"версию из имени файла без дополнительной проверки."

#: ../source/specifications/source-distribution-format.rst:59
msgid "Source distribution file format"
msgstr "Формат файла исходного дистрибутива"

#: ../source/specifications/source-distribution-format.rst:61
msgid ""
"A ``.tar.gz`` source distribution (sdist) contains a single top-level "
"directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the "
"source files of the package. The name and version MUST match the metadata "
"stored in the file. This directory must also contain a :file:`pyproject."
"toml` in the format defined in :ref:`pyproject-toml-spec`, and a :file:`PKG-"
"INFO` file containing metadata in the format described in the :ref:`core-"
"metadata` specification. The metadata MUST conform to at least version 2.2 "
"of the metadata specification."
msgstr ""
"Дистрибутив с исходным кодом ``.tar.gz`` (sdist) содержит один каталог "
"верхнего уровня с именем ``{имя}-{версия}`` (например, ``foo-1.0``), "
"содержащий исходные файлы пакета. Имя и версия ДОЛЖНЫ совпадать с "
"метаданными, хранящимися в файле. Этот каталог также должен содержать :file:"
"`pyproject.toml` в формате, определенном в :ref:`pyproject-toml-spec`, и :"
"file:`PKG-INFO` файл, содержащий метаданные в формате, описанном в "
"спецификации :ref:`core-metadata`. Метаданные ДОЛЖНЫ соответствовать, по "
"крайней мере, версии 2.2 спецификации метаданных."

#: ../source/specifications/source-distribution-format.rst:69
msgid ""
"If the metadata version is 2.4 or greater, the source distribution MUST "
"contain any license files specified by the ``License-File`` field in the :"
"file:`PKG-INFO` at their respective paths relative to the root directory of "
"the sdist (containing the :file:`pyproject.toml` and the :file:`PKG-INFO` "
"metadata)."
msgstr ""
"Если версия метаданных 2.4 или выше, исходный дистрибутив ДОЛЖЕН содержать "
"все файлы лицензий, указанные в поле ``License-File`` в :file:`PKG-INFO`` по "
"соответствующим путям относительно корневого каталога sdist (содержащего :"
"file:`pyproject.toml`` и метаданные :file:`PKG-INFO``)."

#: ../source/specifications/source-distribution-format.rst:74
msgid ""
"No other content of a sdist is required or defined. Build systems can store "
"whatever information they need in the sdist to build the project."
msgstr ""
"Никакое другое содержимое sdist не требуется и не определено. Системы сборки "
"могут хранить в sdist любую информацию, необходимую им для сборки проекта."

#: ../source/specifications/source-distribution-format.rst:77
msgid ""
"The tarball should use the modern POSIX.1-2001 pax tar format, which "
"specifies UTF-8 based file names. In particular, source distribution files "
"must be readable using the standard library tarfile module with the open "
"flag 'r:gz'."
msgstr ""
"В Таровом шарике должен использоваться современный формат POSIX.1-2001 pax "
"tar, который определяет имена файлов в формате UTF-8. В частности, файлы "
"исходных дистрибутивов должны быть читаемы с помощью модуля tarfile "
"стандартной библиотеки с флагом open 'r:gz'."

#: ../source/specifications/source-distribution-format.rst:85
msgid "Source distribution archive features"
msgstr "Возможности архива распространения исходных текстов"

#: ../source/specifications/source-distribution-format.rst:87
msgid ""
"Because extracting tar files as-is is dangerous, and the results are "
"platform-specific, archive features of source distributions are limited."
msgstr ""
"Поскольку извлекать tar-файлы как таковые опасно, а результаты зависят от "
"платформы, возможности архивирования в исходных дистрибутивах ограничены."

#: ../source/specifications/source-distribution-format.rst:91
msgid "Unpacking with the data filter"
msgstr "Распаковка с помощью фильтра данных"

#: ../source/specifications/source-distribution-format.rst:93
msgid ""
"When extracting a source distribution, tools MUST either use :py:func:"
"`tarfile.data_filter` (e.g. :py:meth:`TarFile.extractall(..., filter='data') "
"<tarfile.TarFile.extractall>`), OR follow the *Unpacking without the data "
"filter* section below."
msgstr ""
"При извлечении исходного дистрибутива инструменты ДОЛЖНЫ либо использовать :"
"py:func:`tarfile.data_filter` (например, :py:meth:`TarFile.extractall(..., "
"filter='data') <tarfile.TarFile.extractall>`), либо следовать разделу "
"*Распаковка без фильтра данных* ниже."

#: ../source/specifications/source-distribution-format.rst:97
msgid ""
"As an exception, on Python interpreters without :py:func:`hasattr(tarfile, "
"'data_filter') <tarfile.data_filter>` (:pep:`706`), tools that normally use "
"that filter (directly on indirectly) MAY warn the user and ignore this "
"specification. The trade-off between usability (e.g. fully trusting the "
"archive) and security (e.g. refusing to unpack) is left up to the tool in "
"this case."
msgstr ""
"В качестве исключения, в интерпретаторах Python без :py:func:"
"`hasattr(tarfile, 'data_filter') <tarfile.data_filter>` (:pep:`706`), "
"инструменты, которые обычно используют этот фильтр (прямо или косвенно), "
"МОГУТ предупредить пользователя и проигнорировать эту спецификацию. "
"Компромисс между удобством использования (например, полное доверие к архиву) "
"и безопасностью (например, отказ от распаковки) в этом случае остается на "
"усмотрение инструмента."

#: ../source/specifications/source-distribution-format.rst:105
msgid "Unpacking without the data filter"
msgstr "Распаковка без фильтра данных"

#: ../source/specifications/source-distribution-format.rst:107
msgid ""
"Tools that do not use the ``data`` filter directly (e.g. for backwards "
"compatibility, allowing additional features, or not using Python) MUST "
"follow this section. (At the time of this writing, the ``data`` filter also "
"follows this section, but it may get out of sync in the future.)"
msgstr ""
"Инструменты, которые не используют фильтр ``data`` напрямую (например, для "
"обратной совместимости, предоставления дополнительных возможностей или не "
"использующие Python), ДОЛЖНЫ следовать этому разделу. (На момент написания "
"этой статьи фильтр ``data`` также следует этому разделу, но в будущем они "
"могут рассинхронизироваться)"

#: ../source/specifications/source-distribution-format.rst:113
msgid ""
"The following files are invalid in an *sdist* archive. Upon encountering "
"such an entry, tools SHOULD notify the user, MUST NOT unpack the entry, and "
"MAY abort with a failure:"
msgstr ""
"Следующие файлы недействительны в архиве *sdist*. При обнаружении такой "
"записи инструменты ДОЛЖНЫ уведомить пользователя, НЕ ДОЛЖНЫ распаковывать "
"запись и МОГУТ прервать работу с ошибкой:"

#: ../source/specifications/source-distribution-format.rst:117
msgid "Files that would be placed outside the destination directory."
msgstr "Файлы, которые будут размещены за пределами каталога назначения."

#: ../source/specifications/source-distribution-format.rst:118
msgid "Links (symbolic or hard) pointing outside the destination directory."
msgstr ""
"Ссылки (символические или жесткие), указывающие за пределы целевого каталога."

#: ../source/specifications/source-distribution-format.rst:119
msgid "Device files (including pipes)."
msgstr "Файлы устройств (включая pipes)."

#: ../source/specifications/source-distribution-format.rst:121
msgid ""
"The following are also invalid. Tools MAY treat them as above, but are NOT "
"REQUIRED to do so:"
msgstr ""
"Следующие также недействительны. Инструменты МОГУТ обрабатывать их, как "
"указано выше, но НЕ ОБЯЗАНЫ это делать:"

#: ../source/specifications/source-distribution-format.rst:124
msgid "Files with a ``..`` component in the filename or link target."
msgstr "Файлы с компонентом ``...`` в имени файла или цели ссылки."

#: ../source/specifications/source-distribution-format.rst:125
msgid "Links pointing to a file that is not part of the archive."
msgstr "Ссылки, указывающие на файл, который не является частью архива."

#: ../source/specifications/source-distribution-format.rst:127
msgid ""
"Tools MAY unpack links (symbolic or hard) as regular files, using content "
"from the archive."
msgstr ""
"Инструменты MAY распаковывают ссылки (символические или жесткие) как обычные "
"файлы, используя содержимое архива."

#: ../source/specifications/source-distribution-format.rst:130
msgid "When extracting *sdist* archives:"
msgstr "При извлечении архивов *sdist*:"

#: ../source/specifications/source-distribution-format.rst:132
msgid ""
"Leading slashes in file names MUST be dropped. (This is nowadays standard "
"behaviour for ``tar`` unpacking.)"
msgstr ""
"Ведущие косые черты в именах файлов ДОЛЖНЫ быть опущены. (В настоящее время "
"это стандартное поведение для распаковки ``tar``)"

#: ../source/specifications/source-distribution-format.rst:134
msgid "For each ``mode`` (Unix permission) bit, tools MUST either:"
msgstr "Для каждого бита ``мода`` (разрешения Unix) инструменты ДОЛЖНЫ либо:"

#: ../source/specifications/source-distribution-format.rst:136
msgid "use the platform's default for a new file/directory (respectively),"
msgstr ""
"использовать значение платформы по умолчанию для нового файла/каталога "
"(соответственно),"

#: ../source/specifications/source-distribution-format.rst:137
msgid "set the bit according to the archive, or"
msgstr "установить бит в соответствии с архивом, или"

#: ../source/specifications/source-distribution-format.rst:138
msgid ""
"use the bit from ``rw-r--r--`` (``0o644``) for non-executable files or "
"``rwxr-xr-x`` (``0o755``) for executable files and directories."
msgstr ""
"используйте бит из ``rw-r--r--`` (``0o644``) для неисполняемых файлов или "
"``rwxr-xr-x`` (``0o755``) для исполняемых файлов и каталогов."

#: ../source/specifications/source-distribution-format.rst:141
msgid "High ``mode`` bits (setuid, setgid, sticky) MUST be cleared."
msgstr "Старшие биты ``режима'' (setuid, setgid, sticky) ДОЛЖНЫ быть очищены."

#: ../source/specifications/source-distribution-format.rst:142
msgid "It is RECOMMENDED to preserve the user *executable* bit."
msgstr "РЕКОМЕНДУЕТСЯ сохранять пользовательский *исполняемый* бит."

#: ../source/specifications/source-distribution-format.rst:146
msgid "Further hints"
msgstr "Дополнительные подсказки"

#: ../source/specifications/source-distribution-format.rst:148
msgid ""
"Tool authors are encouraged to consider how *hints for further verification* "
"in ``tarfile`` documentation apply to their tool."
msgstr ""
"Авторам инструментов рекомендуется рассмотреть, насколько *подсказки для "
"дальнейшей проверки* в документации к ``tarfile`` применимы к их инструменту."

#: ../source/specifications/source-distribution-format.rst:155
msgid ""
"November 2020: The original version of this specification was approved "
"through :pep:`643`."
msgstr ""
"Ноябрь 2020 года: Первоначальная версия этой спецификации была одобрена "
"через :pep:`643`."

#: ../source/specifications/source-distribution-format.rst:157
msgid "July 2021: Defined what a source tree is."
msgstr "Июль 2021 года: Определено, что такое дерево источников."

#: ../source/specifications/source-distribution-format.rst:158
msgid ""
"September 2022: The filename of a source distribution was standardized "
"through :pep:`625`."
msgstr ""
"Сентябрь 2022: Имя файла исходного дистрибутива было стандартизировано "
"через :pep:`625`."

#: ../source/specifications/source-distribution-format.rst:160
msgid ""
"August 2023: Source distribution archive features were standardized through :"
"pep:`721`."
msgstr ""
"Август 2023 года: Функции архива дистрибутива исходных текстов были "
"стандартизированы с помощью :pep:`721`."

#: ../source/specifications/source-distribution-format.rst:162
msgid ""
"December 2024: License files inclusion into source distribution was "
"standardized through :pep:`639`."
msgstr ""
"Декабрь 2024 года: Включение файлов лицензий в дистрибутив исходных текстов "
"было стандартизировано с помощью :pep:`639`."

#: ../source/specifications/version-specifiers.rst:7
#: ../source/specifications/version-specifiers.rst:785
msgid "Version specifiers"
msgstr "Спецификаторы версии"

#: ../source/specifications/version-specifiers.rst:10
msgid ""
"This specification describes a scheme for identifying versions of Python "
"software distributions, and declaring dependencies on particular versions."
msgstr ""
"Эта спецификация описывает схему идентификации версий программных "
"дистрибутивов Python и объявления зависимостей от конкретных версий."

#: ../source/specifications/version-specifiers.rst:15
msgid "Definitions"
msgstr "Определение"

#: ../source/specifications/version-specifiers.rst:17
msgid ""
"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL "
"NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and "
"\"OPTIONAL\" in this document are to be interpreted as described in :rfc:"
"`2119`."
msgstr ""
"Ключевые слова \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL "
"NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\" и \"OPTIONAL\" в "
"этом документе должны интерпретироваться так, как описано в :rfc:`2119`."

#: ../source/specifications/version-specifiers.rst:21
msgid ""
"\"Build tools\" are automated tools intended to run on development systems, "
"producing source and binary distribution archives. Build tools may also be "
"invoked by integration tools in order to build software distributed as "
"sdists rather than prebuilt binary archives."
msgstr ""
"\"Инструменты сборки\" - это автоматизированные инструменты, предназначенные "
"для работы в системах разработки и создающие архивы исходных текстов и "
"бинарных дистрибутивов. Инструменты сборки также могут вызываться средствами "
"интеграции для сборки программного обеспечения, распространяемого в виде "
"sdists, а не предварительно собранных бинарных архивов."

#: ../source/specifications/version-specifiers.rst:26
msgid ""
"\"Index servers\" are active distribution registries which publish version "
"and dependency metadata and place constraints on the permitted metadata."
msgstr ""
"\"Индексные серверы\" - это активные реестры распространения, которые "
"публикуют метаданные о версиях и зависимостях и накладывают ограничения на "
"разрешенные метаданные."

#: ../source/specifications/version-specifiers.rst:29
msgid ""
"\"Publication tools\" are automated tools intended to run on development "
"systems and upload source and binary distribution archives to index servers."
msgstr ""
"\"Инструменты публикации\" - это автоматизированные инструменты, "
"предназначенные для запуска на системах разработки и загрузки архивов "
"исходных и бинарных дистрибутивов на индексные серверы."

#: ../source/specifications/version-specifiers.rst:32
msgid ""
"\"Installation tools\" are integration tools specifically intended to run on "
"deployment targets, consuming source and binary distribution archives from "
"an index server or other designated location and deploying them to the "
"target system."
msgstr ""
"\"Инструменты установки\" - это инструменты интеграции, специально "
"предназначенные для запуска на объектах развертывания, потребляющие исходные "
"и двоичные архивы дистрибутивов с индексного сервера или другого указанного "
"места и развертывающие их на целевой системе."

#: ../source/specifications/version-specifiers.rst:37
msgid ""
"\"Automated tools\" is a collective term covering build tools, index "
"servers, publication tools, integration tools and any other software that "
"produces or consumes distribution version and dependency metadata."
msgstr ""
"\"Автоматизированные инструменты\" - это собирательный термин, охватывающий "
"инструменты сборки, индексные серверы, инструменты публикации, инструменты "
"интеграции и любое другое программное обеспечение, которое производит или "
"потребляет метаданные о версиях и зависимостях дистрибутива."

#: ../source/specifications/version-specifiers.rst:43
msgid "Version scheme"
msgstr "Схема версии"

#: ../source/specifications/version-specifiers.rst:45
msgid ""
"Distributions are identified by a public version identifier which supports "
"all defined version comparison operations"
msgstr ""
"Дистрибутивы идентифицируются общедоступным идентификатором версии, который "
"поддерживает все определенные операции сравнения версий"

#: ../source/specifications/version-specifiers.rst:48
msgid ""
"The version scheme is used both to describe the distribution version "
"provided by a particular distribution archive, as well as to place "
"constraints on the version of dependencies needed in order to build or run "
"the software."
msgstr ""
"Схема версий используется как для описания версии дистрибутива, "
"предоставляемого конкретным архивом дистрибутива, так и для наложения "
"ограничений на версии зависимостей, необходимых для сборки или запуска "
"программного обеспечения."

#: ../source/specifications/version-specifiers.rst:57
msgid "Public version identifiers"
msgstr "Идентификаторы общедоступных версий"

#: ../source/specifications/version-specifiers.rst:59
msgid ""
"The canonical public version identifiers MUST comply with the following "
"scheme::"
msgstr ""
"Канонические идентификаторы публичных версий ДОЛЖНЫ соответствовать "
"следующей схеме::"

#: ../source/specifications/version-specifiers.rst:64
msgid ""
"Public version identifiers MUST NOT include leading or trailing whitespace."
msgstr ""
"Идентификаторы общедоступных версий НЕ ДОЛЖНЫ содержать ведущие или "
"завершающие пробельные символы."

#: ../source/specifications/version-specifiers.rst:66
msgid "Public version identifiers MUST be unique within a given distribution."
msgstr ""
"Идентификаторы публичных версий ДОЛЖНЫ быть уникальными в пределах одного "
"дистрибутива."

#: ../source/specifications/version-specifiers.rst:68
msgid ""
"Installation tools SHOULD ignore any public versions which do not comply "
"with this scheme but MUST also include the normalizations specified below. "
"Installation tools MAY warn the user when non-compliant or ambiguous "
"versions are detected."
msgstr ""
"Средства установки ДОЛЖНЫ игнорировать любые публичные версии, которые не "
"соответствуют этой схеме, но также ДОЛЖНЫ включать нормализации, указанные "
"ниже. Средства установки МОГУТ предупреждать пользователя при обнаружении "
"несоответствующих или неоднозначных версий."

#: ../source/specifications/version-specifiers.rst:73
msgid ""
"See also :ref:`version-specifiers-regex` which provides a regular expression "
"to check strict conformance with the canonical format, as well as a more "
"permissive regular expression accepting inputs that may require subsequent "
"normalization."
msgstr ""
"См. также :ref:`version-specifiers-regex`, который предоставляет регулярное "
"выражение для проверки строгого соответствия каноническому формату, а также "
"более свободное регулярное выражение, принимающее входные данные, которые "
"могут потребовать последующей нормализации."

#: ../source/specifications/version-specifiers.rst:78
msgid "Public version identifiers are separated into up to five segments:"
msgstr "Идентификаторы публичных версий разделяются на пять сегментов:"

#: ../source/specifications/version-specifiers.rst:80
msgid "Epoch segment: ``N!``"
msgstr "Эпохальный сегмент: ``N!``"

#: ../source/specifications/version-specifiers.rst:81
msgid "Release segment: ``N(.N)*``"
msgstr "Сегмент выпуска: ``N(.N)*``"

#: ../source/specifications/version-specifiers.rst:82
msgid "Pre-release segment: ``{a|b|rc}N``"
msgstr "Предрелизный сегмент: ``{a|b|rc}N``"

#: ../source/specifications/version-specifiers.rst:83
msgid "Post-release segment: ``.postN``"
msgstr "Пост-релизный сегмент: ``.postN``"

#: ../source/specifications/version-specifiers.rst:84
msgid "Development release segment: ``.devN``"
msgstr "Сегмент релиза разработки: ``.devN``"

#: ../source/specifications/version-specifiers.rst:86
msgid ""
"Any given release will be a \"final release\", \"pre-release\", \"post-"
"release\" or \"developmental release\" as defined in the following sections."
msgstr ""
"Любой конкретный релиз может быть \"финальным релизом\", \"предварительным "
"релизом\", \"пост-релизом\" или \"девелоперским релизом\", как определено в "
"следующих разделах."

#: ../source/specifications/version-specifiers.rst:89
msgid ""
"All numeric components MUST be non-negative integers represented as "
"sequences of ASCII digits."
msgstr ""
"Все числовые компоненты ДОЛЖНЫ быть неотрицательными целыми числами, "
"представленными в виде последовательностей цифр ASCII."

#: ../source/specifications/version-specifiers.rst:92
msgid ""
"All numeric components MUST be interpreted and ordered according to their "
"numeric value, not as text strings."
msgstr ""
"Все числовые компоненты ДОЛЖНЫ интерпретироваться и упорядочиваться в "
"соответствии с их числовым значением, а не как текстовые строки."

#: ../source/specifications/version-specifiers.rst:95
msgid ""
"All numeric components MAY be zero. Except as described below for the "
"release segment, a numeric component of zero has no special significance "
"aside from always being the lowest possible value in the version ordering."
msgstr ""
"Все числовые компоненты МОГУТ быть нулевыми. За исключением случаев, "
"описанных ниже для сегмента выпуска, числовой компонент, равный нулю, не "
"имеет особого значения, кроме того, что всегда является наименьшим возможным "
"значением при упорядочивании версий."

#: ../source/specifications/version-specifiers.rst:101
msgid ""
"Some hard to read version identifiers are permitted by this scheme in order "
"to better accommodate the wide range of versioning practices across existing "
"public and private Python projects."
msgstr ""
"Эта схема допускает использование некоторых трудночитаемых идентификаторов "
"версий, чтобы лучше приспособиться к широкому спектру практик "
"версионирования в существующих общественных и частных проектах Python."

#: ../source/specifications/version-specifiers.rst:105
msgid ""
"Accordingly, some of the versioning practices which are technically "
"permitted by the specification are strongly discouraged for new projects. "
"Where this is the case, the relevant details are noted in the following "
"sections."
msgstr ""
"Соответственно, некоторые методы версионирования, которые технически "
"разрешены спецификацией, настоятельно не рекомендуются для новых проектов. "
"Если это так, то соответствующие детали указаны в следующих разделах."

#: ../source/specifications/version-specifiers.rst:116
msgid "Local version identifiers MUST comply with the following scheme::"
msgstr ""
"Локальные идентификаторы версий ДОЛЖНЫ соответствовать следующей схеме::"

#: ../source/specifications/version-specifiers.rst:120
msgid ""
"They consist of a normal public version identifier (as defined in the "
"previous section), along with an arbitrary \"local version label\", "
"separated from the public version identifier by a plus. Local version labels "
"have no specific semantics assigned, but some syntactic restrictions are "
"imposed."
msgstr ""
"Они состоят из обычного идентификатора публичной версии (как определено в "
"предыдущем разделе), а также произвольной \"метки локальной версии\", "
"отделенной от идентификатора публичной версии плюсом. Локальные метки версий "
"не имеют специфической семантики, но на них накладываются некоторые "
"синтаксические ограничения."

#: ../source/specifications/version-specifiers.rst:125
msgid ""
"Local version identifiers are used to denote fully API (and, if applicable, "
"ABI) compatible patched versions of upstream projects. For example, these "
"may be created by application developers and system integrators by applying "
"specific backported bug fixes when upgrading to a new upstream release would "
"be too disruptive to the application or other integrated system (such as a "
"Linux distribution)."
msgstr ""
"Идентификаторы локальных версий используются для обозначения полностью "
"совместимых с API (и, если применимо, ABI) исправленных версий проектов "
"upstream. Например, они могут быть созданы разработчиками приложений и "
"системными интеграторами путем применения специфических исправлений, когда "
"обновление до нового релиза upstream будет слишком разрушительным для "
"приложения или другой интегрированной системы (например, дистрибутива Linux)."

#: ../source/specifications/version-specifiers.rst:132
msgid ""
"The inclusion of the local version label makes it possible to differentiate "
"upstream releases from potentially altered rebuilds by downstream "
"integrators. The use of a local version identifier does not affect the kind "
"of a release but, when applied to a source distribution, does indicate that "
"it may not contain the exact same code as the corresponding upstream release."
msgstr ""
"Включение метки локальной версии позволяет отличить релизы восходящего "
"потока от потенциально измененных перестроек, сделанных интеграторами "
"нисходящего потока. Использование идентификатора локальной версии не влияет "
"на вид релиза, но при применении к дистрибутиву исходного кода указывает на "
"то, что он может содержать не совсем тот же код, что и соответствующий релиз "
"восходящего потока."

#: ../source/specifications/version-specifiers.rst:138
msgid ""
"To ensure local version identifiers can be readily incorporated as part of "
"filenames and URLs, and to avoid formatting inconsistencies in hexadecimal "
"hash representations, local version labels MUST be limited to the following "
"set of permitted characters:"
msgstr ""
"Чтобы идентификаторы локальных версий могли быть легко включены в имена "
"файлов и URL-адреса, а также чтобы избежать несоответствий в форматировании "
"шестнадцатеричных хэш-представлений, метки локальных версий ДОЛЖНЫ быть "
"ограничены следующим набором разрешенных символов:"

#: ../source/specifications/version-specifiers.rst:143
msgid "ASCII letters (``[a-zA-Z]``)"
msgstr "Буквы ASCII (``[a-zA-Z]``)"

#: ../source/specifications/version-specifiers.rst:144
msgid "ASCII digits (``[0-9]``)"
msgstr "Цифры ASCII (``[0-9]``)"

#: ../source/specifications/version-specifiers.rst:145
msgid "periods (``.``)"
msgstr "периоды (``.``)"

#: ../source/specifications/version-specifiers.rst:147
msgid "Local version labels MUST start and end with an ASCII letter or digit."
msgstr ""
"Метки локальных версий ДОЛЖНЫ начинаться и заканчиваться буквой или цифрой "
"ASCII."

#: ../source/specifications/version-specifiers.rst:149
msgid ""
"Comparison and ordering of local versions considers each segment of the "
"local version (divided by a ``.``) separately. If a segment consists "
"entirely of ASCII digits then that section should be considered an integer "
"for comparison purposes and if a segment contains any ASCII letters then "
"that segment is compared lexicographically with case insensitivity. When "
"comparing a numeric and lexicographic segment, the numeric section always "
"compares as greater than the lexicographic segment. Additionally a local "
"version with a great number of segments will always compare as greater than "
"a local version with fewer segments, as long as the shorter local version's "
"segments match the beginning of the longer local version's segments exactly."
msgstr ""
"При сравнении и упорядочивании локальных версий каждый сегмент локальной "
"версии (разделенный символом ``.``) рассматривается отдельно. Если сегмент "
"полностью состоит из ASCII-цифр, то для целей сравнения этот сегмент следует "
"считать целым числом, а если сегмент содержит какие-либо ASCII-буквы, то "
"этот сегмент сравнивается лексикографически с нечувствительностью к "
"регистру. При сравнении числового и лексикографического сегментов числовой "
"сегмент всегда сравнивается как больший, чем лексикографический. Кроме того, "
"локальная версия с большим количеством сегментов всегда будет сравниваться "
"как большая, чем локальная версия с меньшим количеством сегментов, при "
"условии, что более короткие сегменты локальной версии точно совпадают с "
"началом более длинных сегментов локальной версии."

#: ../source/specifications/version-specifiers.rst:160
msgid ""
"An \"upstream project\" is a project that defines its own public versions. A "
"\"downstream project\" is one which tracks and redistributes an upstream "
"project, potentially backporting security and bug fixes from later versions "
"of the upstream project."
msgstr ""
"Восходящий проект\" - это проект, который определяет свои собственные "
"публичные версии. Проект \"downstream\" - это проект, который отслеживает и "
"распространяет проект \"upstream\", потенциально перенося исправления "
"безопасности и ошибок из более поздних версий проекта \"upstream\"."

#: ../source/specifications/version-specifiers.rst:165
msgid ""
"Local version identifiers SHOULD NOT be used when publishing upstream "
"projects to a public index server, but MAY be used to identify private "
"builds created directly from the project source. Local version identifiers "
"SHOULD be used by downstream projects when releasing a version that is API "
"compatible with the version of the upstream project identified by the public "
"version identifier, but contains additional changes (such as bug fixes). As "
"the Python Package Index is intended solely for indexing and hosting "
"upstream projects, it MUST NOT allow the use of local version identifiers."
msgstr ""
"Локальные идентификаторы версий НЕ ДОЛЖНЫ использоваться при публикации "
"восходящих проектов на публичном индексном сервере, но МОГУТ использоваться "
"для идентификации частных сборок, созданных непосредственно из источника "
"проекта. Идентификаторы локальных версий ДОЛЖНЫ использоваться нижестоящими "
"проектами при выпуске версии, которая совместима по API с версией "
"вышестоящего проекта, идентифицируемой идентификатором публичной версии, но "
"содержит дополнительные изменения (например, исправления ошибок). Поскольку "
"Python Package Index предназначен исключительно для индексирования и "
"размещения upstream-проектов, он НЕ ДОЛЖЕН разрешать использование локальных "
"идентификаторов версий."

#: ../source/specifications/version-specifiers.rst:175
msgid ""
"Source distributions using a local version identifier SHOULD provide the "
"``python.integrator`` extension metadata (as defined in :pep:`459`)."
msgstr ""
"Исходные дистрибутивы, использующие локальный идентификатор версии, ДОЛЖНЫ "
"предоставлять метаданные расширения ``python.integrator`` (как определено в :"
"pep:`459`)."

#: ../source/specifications/version-specifiers.rst:180
msgid "Final releases"
msgstr "Финальные релизы"

#: ../source/specifications/version-specifiers.rst:182
msgid ""
"A version identifier that consists solely of a release segment and "
"optionally an epoch identifier is termed a \"final release\"."
msgstr ""
"Идентификатор версии, состоящий только из сегмента выпуска и, опционально, "
"идентификатора эпохи, называется \"финальным выпуском\"."

#: ../source/specifications/version-specifiers.rst:185
msgid ""
"The release segment consists of one or more non-negative integer values, "
"separated by dots::"
msgstr ""
"Сегмент освобождения состоит из одного или нескольких неотрицательных целых "
"значений, разделенных точками::"

#: ../source/specifications/version-specifiers.rst:190
msgid ""
"Final releases within a project MUST be numbered in a consistently "
"increasing fashion, otherwise automated tools will not be able to upgrade "
"them correctly."
msgstr ""
"Финальные релизы в рамках проекта ДОЛЖНЫ иметь последовательно возрастающую "
"нумерацию, иначе автоматизированные инструменты не смогут правильно их "
"обновить."

#: ../source/specifications/version-specifiers.rst:194
msgid ""
"Comparison and ordering of release segments considers the numeric value of "
"each component of the release segment in turn. When comparing release "
"segments with different numbers of components, the shorter segment is padded "
"out with additional zeros as necessary."
msgstr ""
"При сравнении и упорядочивании сегментов релиза учитывается числовое "
"значение каждого компонента сегмента релиза по очереди. При сравнении "
"сегментов выпуска с разным количеством компонентов более короткий сегмент "
"при необходимости дополняется нулями."

#: ../source/specifications/version-specifiers.rst:199
msgid ""
"While any number of additional components after the first are permitted "
"under this scheme, the most common variants are to use two components "
"(\"major.minor\") or three components (\"major.minor.micro\")."
msgstr ""
"Хотя по этой схеме допускается любое количество дополнительных компонентов "
"после первого, наиболее распространенными вариантами являются использование "
"двух компонентов (\"major.minor\") или трех компонентов (\"major.minor."
"micro\")."

#: ../source/specifications/version-specifiers.rst:203
msgid "For example::"
msgstr "Например::"

#: ../source/specifications/version-specifiers.rst:218
msgid ""
"A release series is any set of final release numbers that start with a "
"common prefix. For example, ``3.3.1``, ``3.3.5`` and ``3.3.9.45`` are all "
"part of the ``3.3`` release series."
msgstr ""
"Серия релизов - это любой набор номеров финальных релизов, которые "
"начинаются с общего префикса. Например, ``3.3.1``, ``3.3.5`` и ``3.3.9.45`` "
"являются частью серии релизов ``3.3``."

#: ../source/specifications/version-specifiers.rst:224
msgid ""
"``X.Y`` and ``X.Y.0`` are not considered distinct release numbers, as the "
"release segment comparison rules implicit expand the two component form to "
"``X.Y.0`` when comparing it to any release segment that includes three "
"components."
msgstr ""
"``X.Y`` и ``X.Y.0`` не считаются отдельными номерами релизов, поскольку "
"правила сравнения сегментов релизов неявно расширяют двухкомпонентную форму "
"до ``X.Y.0``, когда сравнивают ее с любым сегментом релиза, включающим три "
"компонента."

#: ../source/specifications/version-specifiers.rst:229
#, fuzzy
#| msgid ""
#| "Date based release segments are also permitted. An example of a date "
#| "based release scheme using the year and month of the release::"
msgid ""
"Date-based release segments are also permitted. An example of a date-based "
"release scheme using the year and month of the release::"
msgstr ""
"Также допускаются сегменты релизов, основанные на дате. Пример схемы релиза "
"на основе даты с использованием года и месяца релиза::"

#: ../source/specifications/version-specifiers.rst:243
msgid "Pre-releases"
msgstr "Предварительные выпуски"

#: ../source/specifications/version-specifiers.rst:245
msgid ""
"Some projects use an \"alpha, beta, release candidate\" pre-release cycle to "
"support testing by their users prior to a final release."
msgstr ""
"Некоторые проекты используют цикл \"альфа-версия, бета-версия, релиз-"
"кандидат\" для поддержки тестирования пользователями перед выпуском "
"финального релиза."

#: ../source/specifications/version-specifiers.rst:248
msgid ""
"If used as part of a project's development cycle, these pre-releases are "
"indicated by including a pre-release segment in the version identifier::"
msgstr ""
"Если эти предварительные версии используются как часть цикла разработки "
"проекта, они обозначаются включением сегмента pre-release в идентификатор "
"версии::"

#: ../source/specifications/version-specifiers.rst:256
msgid ""
"A version identifier that consists solely of a release segment and a pre-"
"release segment is termed a \"pre-release\"."
msgstr ""
"Идентификатор версии, состоящий только из сегмента релиза и сегмента "
"предрелиза, называется \"предрелизом\"."

#: ../source/specifications/version-specifiers.rst:259
msgid ""
"The pre-release segment consists of an alphabetical identifier for the pre-"
"release phase, along with a non-negative integer value. Pre-releases for a "
"given release are ordered first by phase (alpha, beta, release candidate) "
"and then by the numerical component within that phase."
msgstr ""
"Сегмент предрелиза состоит из алфавитного идентификатора фазы предрелиза и "
"неотрицательного целочисленного значения. Предварительные выпуски для "
"данного выпуска упорядочиваются сначала по фазе (альфа, бета, кандидат на "
"выпуск), а затем по числовому компоненту в рамках этой фазы."

#: ../source/specifications/version-specifiers.rst:264
msgid ""
"Installation tools MAY accept both ``c`` and ``rc`` releases for a common "
"release segment in order to handle some existing legacy distributions."
msgstr ""
"Утилиты установки МОГУТ принимать выпуски ``c`` и ``rc`` для общего сегмента "
"выпуска, чтобы работать с некоторыми существующими устаревшими "
"дистрибутивами."

#: ../source/specifications/version-specifiers.rst:267
msgid ""
"Installation tools SHOULD interpret ``c`` versions as being equivalent to "
"``rc`` versions (that is, ``c1`` indicates the same version as ``rc1``)."
msgstr ""
"Утилиты установки ДОЛЖНЫ интерпретировать версии ``c`` как эквивалентные "
"версиям ``rc`` (то есть, ``c1`` означает ту же версию, что и ``rc1``)."

#: ../source/specifications/version-specifiers.rst:270
msgid ""
"Build tools, publication tools and index servers SHOULD disallow the "
"creation of both ``rc`` and ``c`` releases for a common release segment."
msgstr ""
"Средства сборки, средства публикации и индексные серверы ДОЛЖНЫ запрещать "
"создание релизов ``rc`` и ``c`` для общего сегмента релиза."

#: ../source/specifications/version-specifiers.rst:275
msgid "Post-releases"
msgstr "Пост-релизы"

#: ../source/specifications/version-specifiers.rst:277
msgid ""
"Some projects use post-releases to address minor errors in a final release "
"that do not affect the distributed software (for example, correcting an "
"error in the release notes)."
msgstr ""
"Некоторые проекты используют пост-релизы для устранения мелких ошибок в "
"финальном релизе, которые не влияют на распространяемое ПО (например, "
"исправление ошибки в примечаниях к релизу)."

#: ../source/specifications/version-specifiers.rst:281
msgid ""
"If used as part of a project's development cycle, these post-releases are "
"indicated by including a post-release segment in the version identifier::"
msgstr ""
"Если эти пост-релизы используются в рамках цикла разработки проекта, они "
"обозначаются включением сегмента post-release в идентификатор версии::"

#: ../source/specifications/version-specifiers.rst:286
msgid ""
"A version identifier that includes a post-release segment without a "
"developmental release segment is termed a \"post-release\"."
msgstr ""
"Идентификатор версии, включающий сегмент пост-релиза без сегмента релиза "
"разработки, называется \"пост-релизом\"."

#: ../source/specifications/version-specifiers.rst:289
msgid ""
"The post-release segment consists of the string ``.post``, followed by a non-"
"negative integer value. Post-releases are ordered by their numerical "
"component, immediately following the corresponding release, and ahead of any "
"subsequent release."
msgstr ""
"Сегмент пост-релиза состоит из строки ``.post``, за которой следует целое "
"неотрицательное значение. Пост-релизы упорядочиваются по их числовой "
"составляющей, сразу после соответствующего релиза и перед любым последующим "
"релизом."

#: ../source/specifications/version-specifiers.rst:296
msgid ""
"The use of post-releases to publish maintenance releases containing actual "
"bug fixes is strongly discouraged. In general, it is better to use a longer "
"release number and increment the final component for each maintenance "
"release."
msgstr ""
"Настоятельно не рекомендуется использовать пост-релизы для публикации "
"релизов сопровождения, содержащих фактические исправления ошибок. В целом, "
"лучше использовать более длинный номер релиза и увеличивать последний "
"компонент для каждого выпуска обслуживания."

#: ../source/specifications/version-specifiers.rst:301
msgid "Post-releases are also permitted for pre-releases::"
msgstr "Пост-релизы также разрешены для пре-релизов::"

#: ../source/specifications/version-specifiers.rst:309
msgid ""
"Creating post-releases of pre-releases is strongly discouraged, as it makes "
"the version identifier difficult to parse for human readers. In general, it "
"is substantially clearer to simply create a new pre-release by incrementing "
"the numeric component."
msgstr ""
"Настоятельно не рекомендуется создавать пост-релизы из пре-релизов, так как "
"это затрудняет разбор идентификатора версии для человека. В целом, гораздо "
"понятнее просто создать новый пререлиз, увеличив числовой компонент."

#: ../source/specifications/version-specifiers.rst:316
msgid "Developmental releases"
msgstr "Развивающие релизы"

#: ../source/specifications/version-specifiers.rst:318
msgid ""
"Some projects make regular developmental releases, and system packagers "
"(especially for Linux distributions) may wish to create early releases "
"directly from source control which do not conflict with later project "
"releases."
msgstr ""
"Некоторые проекты регулярно выпускают новые релизы, и разработчики системных "
"пакетов (особенно для дистрибутивов Linux) могут захотеть создавать ранние "
"релизы непосредственно из системы контроля исходных кодов, которые не будут "
"конфликтовать с более поздними релизами проекта."

#: ../source/specifications/version-specifiers.rst:323
msgid ""
"If used as part of a project's development cycle, these developmental "
"releases are indicated by including a developmental release segment in the "
"version identifier::"
msgstr ""
"Если они используются как часть цикла разработки проекта, то эти релизы "
"указываются путем включения сегмента developmental release в идентификатор "
"версии::"

#: ../source/specifications/version-specifiers.rst:329
msgid ""
"A version identifier that includes a developmental release segment is termed "
"a \"developmental release\"."
msgstr ""
"Идентификатор версии, включающий сегмент выпуска разработки, называется "
"\"выпуском разработки\"."

#: ../source/specifications/version-specifiers.rst:332
msgid ""
"The developmental release segment consists of the string ``.dev``, followed "
"by a non-negative integer value. Developmental releases are ordered by their "
"numerical component, immediately before the corresponding release (and "
"before any pre-releases with the same release segment), and following any "
"previous release (including any post-releases)."
msgstr ""
"Сегмент релиза разработки состоит из строки ``.dev``, за которой следует "
"целое неотрицательное значение. Релизы разработки упорядочиваются по их "
"числовой составляющей, непосредственно перед соответствующим релизом (и "
"перед любыми предшествующими релизами с тем же сегментом релиза) и после "
"любого предыдущего релиза (включая любые пост-релизы)."

#: ../source/specifications/version-specifiers.rst:338
msgid ""
"Developmental releases are also permitted for pre-releases and post-"
"releases::"
msgstr ""
"Релизы разработки также разрешены для предварительных и последующих релизов::"

#: ../source/specifications/version-specifiers.rst:346
#, fuzzy
#| msgid ""
#| "Developmental releases are also permitted for pre-releases and post-"
#| "releases::"
msgid ""
"Do note that development releases are considered a type of pre-release when "
"handling them."
msgstr ""
"Релизы разработки также разрешены для предварительных и последующих релизов::"

#: ../source/specifications/version-specifiers.rst:351
msgid ""
"While they may be useful for continuous integration purposes, publishing "
"developmental releases of pre-releases to general purpose public index "
"servers is strongly discouraged, as it makes the version identifier "
"difficult to parse for human readers. If such a release needs to be "
"published, it is substantially clearer to instead create a new pre-release "
"by incrementing the numeric component."
msgstr ""
"Хотя они могут быть полезны для целей непрерывной интеграции, публикация "
"предварительных релизов разработки на общедоступных индексных серверах "
"крайне не рекомендуется, так как это затрудняет разбор идентификатора версии "
"для человека. Если такой релиз необходимо опубликовать, гораздо понятнее "
"вместо этого создать новый предварительный релиз, увеличив числовой "
"компонент."

#: ../source/specifications/version-specifiers.rst:358
msgid ""
"Developmental releases of post-releases are also strongly discouraged, but "
"they may be appropriate for projects which use the post-release notation for "
"full maintenance releases which may include code changes."
msgstr ""
"Также настоятельно не рекомендуется использовать пост-релизы для разработки, "
"но они могут быть уместны в проектах, которые используют нотацию post-"
"release для полных релизов сопровождения, которые могут включать изменения "
"кода."

#: ../source/specifications/version-specifiers.rst:364
msgid "Version epochs"
msgstr "Эпохи версий"

#: ../source/specifications/version-specifiers.rst:366
msgid ""
"If included in a version identifier, the epoch appears before all other "
"components, separated from the release segment by an exclamation mark::"
msgstr ""
"Если он включен в идентификатор версии, то эпоха появляется перед всеми "
"остальными компонентами и отделяется от сегмента релиза восклицательным "
"знаком::"

#: ../source/specifications/version-specifiers.rst:371
msgid "If no explicit epoch is given, the implicit epoch is ``0``."
msgstr "Если явная эпоха не указана, то неявной эпохой будет ``0``."

#: ../source/specifications/version-specifiers.rst:373
msgid ""
"Most version identifiers will not include an epoch, as an explicit epoch is "
"only needed if a project *changes* the way it handles version numbering in a "
"way that means the normal version ordering rules will give the wrong answer. "
"For example, if a project is using date based versions like ``2014.04`` and "
"would like to switch to semantic versions like ``1.0``, then the new "
"releases would be identified as *older* than the date based releases when "
"using the normal sorting scheme::"
msgstr ""
"Большинство идентификаторов версий не будут включать эпоху, поскольку явная "
"эпоха нужна только в том случае, если проект *изменяет* способ обработки "
"нумерации версий таким образом, что обычные правила упорядочивания версий "
"дают неверный ответ. Например, если проект использует версии, основанные на "
"дате, такие как ``2014.04``, и хочет перейти на семантические версии, такие "
"как ``1.0``, то новые релизы будут идентифицироваться как *более старые*, "
"чем версии, основанные на дате, при использовании обычной схемы сортировки::"

#: ../source/specifications/version-specifiers.rst:387
msgid ""
"However, by specifying an explicit epoch, the sort order can be changed "
"appropriately, as all versions from a later epoch are sorted after versions "
"from an earlier epoch::"
msgstr ""
"Однако, указав явную эпоху, можно соответствующим образом изменить порядок "
"сортировки: все версии, относящиеся к более поздней эпохе, будут "
"отсортированы после версий, относящихся к более ранней эпохе::"

#: ../source/specifications/version-specifiers.rst:401
msgid "Normalization"
msgstr "Нормализация"

#: ../source/specifications/version-specifiers.rst:403
msgid ""
"In order to maintain better compatibility with existing versions there are a "
"number of \"alternative\" syntaxes that MUST be taken into account when "
"parsing versions. These syntaxes MUST be considered when parsing a version, "
"however they should be \"normalized\" to the standard syntax defined above."
msgstr ""
"Для обеспечения лучшей совместимости с существующими версиями существует ряд "
"\"альтернативных\" синтаксисов, которые ДОЛЖНЫ быть учтены при разборе "
"версий. Эти синтаксисы ДОЛЖНЫ учитываться при разборе версии, однако они "
"должны быть \"нормализованы\" к стандартному синтаксису, определенному выше."

#: ../source/specifications/version-specifiers.rst:410
msgid "Case sensitivity"
msgstr "Чувствительность случая"

#: ../source/specifications/version-specifiers.rst:412
msgid ""
"All ascii letters should be interpreted case insensitively within a version "
"and the normal form is lowercase. This allows versions such as ``1.1RC1`` "
"which would be normalized to ``1.1rc1``."
msgstr ""
"Все буквы ascii должны интерпретироваться без учета регистра в пределах "
"версии, и нормальной формой является строчный регистр. Это позволяет "
"использовать такие версии, как ``1.1RC1``, которые будут нормализованы до "
"``1.1rc1``."

#: ../source/specifications/version-specifiers.rst:418
msgid "Integer Normalization"
msgstr "Нормализация целого числа"

#: ../source/specifications/version-specifiers.rst:420
msgid ""
"All integers are interpreted via the ``int()`` built in and normalize to the "
"string form of the output. This means that an integer version of ``00`` "
"would normalize to ``0`` while ``09000`` would normalize to ``9000``. This "
"does not hold true for integers inside of an alphanumeric segment of a local "
"version such as ``1.0+foo0100`` which is already in its normalized form."
msgstr ""
"Все целые числа интерпретируются с помощью встроенной функции ``int()`` и "
"нормализуются к строковой форме вывода. Это означает, что целочисленная "
"версия ``00`` будет нормализована до ``0``, а ``09000`` - до ``9000``. Это "
"не относится к целым числам внутри буквенно-цифрового сегмента локальной "
"версии, например ``1.0+foo0100``, которая уже находится в нормализованной "
"форме."

#: ../source/specifications/version-specifiers.rst:428
msgid "Pre-release separators"
msgstr "Сепараторы перед выпуском"

#: ../source/specifications/version-specifiers.rst:430
msgid ""
"Pre-releases should allow a ``.``, ``-``, or ``_`` separator between the "
"release segment and the pre-release segment. The normal form for this is "
"without a separator. This allows versions such as ``1.1.a1`` or ``1.1-a1`` "
"which would be normalized to ``1.1a1``. It should also allow a separator to "
"be used between the pre-release signifier and the numeral. This allows "
"versions such as ``1.0a.1`` which would be normalized to ``1.0a1``."
msgstr ""
"Предварительные выпуски должны допускать разделитель ``.``, ``-`` или ``_`` "
"между сегментом выпуска и сегментом предварительных выпусков. Нормальная "
"форма для этого - без разделителя. Это позволяет использовать такие версии, "
"как ``1.1.a1`` или ``1.1-a1``, которые будут нормализованы до ``1.1a1``. "
"Также следует разрешить использовать разделитель между обозначением pre-"
"release и цифрой. Это позволяет использовать такие версии, как ``1.0a.1``, "
"которые будут нормализованы до ``1.0a1``."

#: ../source/specifications/version-specifiers.rst:439
msgid "Pre-release spelling"
msgstr "Предварительное написание"

#: ../source/specifications/version-specifiers.rst:441
msgid ""
"Pre-releases allow the additional spellings of ``alpha``, ``beta``, ``c``, "
"``pre``, and ``preview`` for ``a``, ``b``, ``rc``, ``rc``, and ``rc`` "
"respectively. This allows versions such as ``1.1alpha1``, ``1.1beta2``, or "
"``1.1c3`` which normalize to ``1.1a1``, ``1.1b2``, and ``1.1rc3``. In every "
"case the additional spelling should be considered equivalent to their normal "
"forms."
msgstr ""
"В предварительных версиях допускаются дополнительные написания ``alpha``, "
"``beta``, ``c``, ``pre`` и ``preview`` для ``a``, ``b``, ``rc``, ``rc`` и "
"``rc`` соответственно. Это позволяет использовать такие версии, как "
"``1.1alpha1``, ``1.1beta2`` или ``1.1c3``, которые нормализуются до "
"``1.1a1``, ``1.1b2`` и ``1.1rc3``. В каждом случае дополнительные написания "
"следует считать эквивалентными их нормальным формам."

#: ../source/specifications/version-specifiers.rst:450
msgid "Implicit pre-release number"
msgstr "Неявный номер предварительного выпуска"

#: ../source/specifications/version-specifiers.rst:452
msgid ""
"Pre releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2a`` which is normalized to "
"``1.2a0``."
msgstr ""
"В предыдущих версиях допускается опускать цифру, в этом случае она неявно "
"принимается за ``0``. Нормальной формой для этого является явное указание "
"``0``. Это позволяет использовать такие версии, как ``1.2a``, которые "
"нормализуются до ``1.2a0``."

#: ../source/specifications/version-specifiers.rst:458
msgid "Post release separators"
msgstr "Сепараторы после выпуска"

#: ../source/specifications/version-specifiers.rst:460
msgid ""
"Post releases allow a ``.``, ``-``, or ``_`` separator as well as omitting "
"the separator all together. The normal form of this is with the ``.`` "
"separator. This allows versions such as ``1.2-post2`` or ``1.2post2`` which "
"normalize to ``1.2.post2``. Like the pre-release separator this also allows "
"an optional separator between the post release signifier and the numeral. "
"This allows versions like ``1.2.post-2`` which would normalize to ``1.2."
"post2``."
msgstr ""
"В релизах Post допускается использование разделителя ``.``, ``-`` или ``_``, "
"а также полное отсутствие разделителя. Обычная форма - с разделителем ``.``. "
"Это позволяет использовать такие версии, как ``1.2-post2`` или ``1.2post2``, "
"которые нормализуются до ``1.2.post2``. Как и в случае с предрелизным "
"разделителем, здесь также допускается необязательный разделитель между "
"обозначением пострелиза и цифрой. Это позволяет использовать версии типа "
"``1.2.post-2``, которые нормализуются до ``1.2.post2``."

#: ../source/specifications/version-specifiers.rst:469
msgid "Post release spelling"
msgstr "Написание после выпуска"

#: ../source/specifications/version-specifiers.rst:471
msgid ""
"Post-releases allow the additional spellings of ``rev`` and ``r``. This "
"allows versions such as ``1.0-r4`` which normalizes to ``1.0.post4``. As "
"with the pre-releases the additional spellings should be considered "
"equivalent to their normal forms."
msgstr ""
"Пост-релизы допускают дополнительные написания ``rev`` и ``r``. Это "
"позволяет использовать такие версии, как ``1.0-r4``, которые нормализуются "
"до ``1.0.post4``. Как и в предыдущих версиях, дополнительные написания "
"следует считать эквивалентными их нормальным формам."

#: ../source/specifications/version-specifiers.rst:478
msgid "Implicit post release number"
msgstr "Неявный номер после выпуска"

#: ../source/specifications/version-specifiers.rst:480
msgid ""
"Post releases allow omitting the numeral in which case it is implicitly "
"assumed to be ``0``. The normal form for this is to include the ``0`` "
"explicitly. This allows versions such as ``1.2.post`` which is normalized to "
"``1.2.post0``."
msgstr ""
"Пост-релизы позволяют опускать цифру, в этом случае она неявно принимается "
"за ``0``. Нормальной формой для этого является явное указание ``0``. Это "
"позволяет использовать такие версии, как ``1.2.post``, которые нормализуются "
"до ``1.2.post0``."

#: ../source/specifications/version-specifiers.rst:486
msgid "Implicit post releases"
msgstr "Неявные пост-релизы"

#: ../source/specifications/version-specifiers.rst:488
msgid ""
"Post releases allow omitting the ``post`` signifier all together. When using "
"this form the separator MUST be ``-`` and no other form is allowed. This "
"allows versions such as ``1.0-1`` to be normalized to ``1.0.post1``. This "
"particular normalization MUST NOT be used in conjunction with the implicit "
"post release number rule. In other words, ``1.0-`` is *not* a valid version "
"and it does *not* normalize to ``1.0.post0``."
msgstr ""
"Релизы Post позволяют полностью отказаться от обозначения ``post``. При "
"использовании этой формы разделитель ДОЛЖЕН быть ``-`` и никакая другая "
"форма не допускается. Это позволяет нормализовать такие версии, как "
"``1.0-1``, до ``1.0.post1``. Эта конкретная нормализация НЕ ДОЛЖНА "
"использоваться в сочетании с правилом неявного номера релиза. Другими "
"словами, ``1.0-`` - это *не* допустимая версия, и она *не* нормализуется до "
"``1.0.post0``."

#: ../source/specifications/version-specifiers.rst:497
msgid "Development release separators"
msgstr "Сепараторы для выпуска продукции"

#: ../source/specifications/version-specifiers.rst:499
msgid ""
"Development releases allow a ``.``, ``-``, or a ``_`` separator as well as "
"omitting the separator all together. The normal form of this is with the ``."
"`` separator. This allows versions such as ``1.2-dev2`` or ``1.2dev2`` which "
"normalize to ``1.2.dev2``."
msgstr ""
"В релизах разработки допускается использование разделителя ``.``, ``-`` или "
"``_``, а также полное отсутствие разделителя. Обычная форма - с разделителем "
"``.``. Это позволяет использовать такие версии, как ``1.2-dev2`` или "
"``1.2dev2``, которые нормализуются до ``1.2.dev2``."

#: ../source/specifications/version-specifiers.rst:506
msgid "Implicit development release number"
msgstr "Номер выпуска неявной разработки"

#: ../source/specifications/version-specifiers.rst:508
msgid ""
"Development releases allow omitting the numeral in which case it is "
"implicitly assumed to be ``0``. The normal form for this is to include the "
"``0`` explicitly. This allows versions such as ``1.2.dev`` which is "
"normalized to ``1.2.dev0``."
msgstr ""
"В релизах разработки допускается опускать цифру, в этом случае она неявно "
"принимается за ``0``. Нормальной формой для этого является явное указание "
"``0``. Это позволяет использовать такие версии, как ``1.2.dev``, которые "
"нормализуются до ``1.2.dev0``."

#: ../source/specifications/version-specifiers.rst:515
msgid "Local version segments"
msgstr "Сегменты локальной версии"

#: ../source/specifications/version-specifiers.rst:517
msgid ""
"With a local version, in addition to the use of ``.`` as a separator of "
"segments, the use of ``-`` and ``_`` is also acceptable. The normal form is "
"using the ``.`` character. This allows versions such as ``1.0+ubuntu-1`` to "
"be normalized to ``1.0+ubuntu.1``."
msgstr ""
"В локальной версии, помимо использования ``.`` в качестве разделителя "
"сегментов, допустимо также использование ``-`` и ``_``. Нормальной формой "
"является использование символа ``.``. Это позволяет нормализовать такие "
"версии, как ``1.0+ubuntu-1``, до ``1.0+ubuntu.1``."

#: ../source/specifications/version-specifiers.rst:524
msgid "Preceding v character"
msgstr "Предшествующий символ v"

#: ../source/specifications/version-specifiers.rst:526
msgid ""
"In order to support the common version notation of ``v1.0`` versions may be "
"preceded by a single literal ``v`` character. This character MUST be ignored "
"for all purposes and should be omitted from all normalized forms of the "
"version. The same version with and without the ``v`` is considered "
"equivalent."
msgstr ""
"Для поддержки общепринятой нотации версий ``v1.0`` версии могут предваряться "
"одним литеральным символом ``v``. Этот символ ДОЛЖЕН игнорироваться для всех "
"целей и должен быть опущен во всех нормализованных формах версии. Одна и та "
"же версия с ``v`` и без него считается эквивалентной."

#: ../source/specifications/version-specifiers.rst:533
msgid "Leading and Trailing Whitespace"
msgstr "Ведущие и отслеживающие Белое пространство"

#: ../source/specifications/version-specifiers.rst:535
msgid ""
"Leading and trailing whitespace must be silently ignored and removed from "
"all normalized forms of a version. This includes ``\" \"``, ``\\t``, "
"``\\n``, ``\\r``, ``\\f``, and ``\\v``. This allows accidental whitespace to "
"be handled sensibly, such as a version like ``1.0\\n`` which normalizes to "
"``1.0``."
msgstr ""
"Ведущие и завершающие пробельные символы должны молча игнорироваться и "
"удаляться из всех нормализованных форм версии. Это включает в себя ``\"\"``, "
"``\\t``, ``\\n``, ``\\r``, ``\\f`` и ``\\v``. Это позволяет разумно "
"обрабатывать случайные пробелы, например, версия ``1.0\\n`` нормализуется до "
"``1.0``."

#: ../source/specifications/version-specifiers.rst:542
msgid "Examples of compliant version schemes"
msgstr "Примеры совместимых схем версий"

#: ../source/specifications/version-specifiers.rst:544
msgid ""
"The standard version scheme is designed to encompass a wide range of "
"identification practices across public and private Python projects. In "
"practice, a single project attempting to use the full flexibility offered by "
"the scheme would create a situation where human users had difficulty "
"figuring out the relative order of versions, even though the rules above "
"ensure all compliant tools will order them consistently."
msgstr ""
"Стандартная схема версий разработана таким образом, чтобы охватить широкий "
"спектр методов идентификации в государственных и частных проектах Python. На "
"практике один проект, пытающийся использовать всю гибкость, предлагаемую "
"схемой, создаст ситуацию, когда пользователям будет трудно определить "
"относительный порядок версий, хотя приведенные выше правила гарантируют, что "
"все совместимые инструменты будут упорядочивать их последовательно."

#: ../source/specifications/version-specifiers.rst:551
msgid ""
"The following examples illustrate a small selection of the different "
"approaches projects may choose to identify their releases, while still "
"ensuring that the \"latest release\" and the \"latest stable release\" can "
"be easily determined, both by human users and automated tools."
msgstr ""
"Следующие примеры иллюстрируют небольшую подборку различных подходов, "
"которые проекты могут выбрать для идентификации своих релизов, при этом "
"гарантируя, что \"последний релиз\" и \"последний стабильный релиз\" могут "
"быть легко определены как людьми, так и автоматизированными инструментами."

#: ../source/specifications/version-specifiers.rst:556
msgid "Simple \"major.minor\" versioning::"
msgstr "Простая версификация \"major.minor\" ::"

#: ../source/specifications/version-specifiers.rst:565
msgid "Simple \"major.minor.micro\" versioning::"
msgstr "Простая версия \"major.minor.micro\" ::"

#: ../source/specifications/version-specifiers.rst:573
msgid ""
"\"major.minor\" versioning with alpha, beta and candidate pre-releases::"
msgstr ""
"Версии \"major.minor\" с предварительными выпусками альфа-версий, бета-"
"версий и кандидатов::"

#: ../source/specifications/version-specifiers.rst:585
msgid ""
"\"major.minor\" versioning with developmental releases, release candidates "
"and post-releases for minor corrections::"
msgstr ""
"«major.minor»-версия с релизами, кандидатами на выпуск и пост-релизами для "
"незначительных исправлений ::"

#: ../source/specifications/version-specifiers.rst:600
msgid ""
"Date based releases, using an incrementing serial within each year, skipping "
"zero::"
msgstr ""
"Релизы, основанные на дате, с использованием возрастающей серии в пределах "
"каждого года, пропуская нулевой::"

#: ../source/specifications/version-specifiers.rst:614
msgid "Summary of permitted suffixes and relative ordering"
msgstr "Краткое описание разрешенных суффиксов и относительного порядка"

#: ../source/specifications/version-specifiers.rst:618
msgid ""
"This section is intended primarily for authors of tools that automatically "
"process distribution metadata, rather than developers of Python "
"distributions deciding on a versioning scheme."
msgstr ""
"Этот раздел предназначен в первую очередь для авторов инструментов, "
"автоматически обрабатывающих метаданные дистрибутива, а не для разработчиков "
"дистрибутивов Python, принимающих решение о выборе схемы версионирования."

#: ../source/specifications/version-specifiers.rst:622
msgid ""
"The epoch segment of version identifiers MUST be sorted according to the "
"numeric value of the given epoch. If no epoch segment is present, the "
"implicit numeric value is ``0``."
msgstr ""
"Сегмент эпохи в идентификаторах версий ДОЛЖЕН быть отсортирован в "
"соответствии с числовым значением данной эпохи. Если сегмент эпохи "
"отсутствует, неявное числовое значение равно ``0``."

#: ../source/specifications/version-specifiers.rst:626
msgid ""
"The release segment of version identifiers MUST be sorted in the same order "
"as Python's tuple sorting when the normalized release segment is parsed as "
"follows::"
msgstr ""
"Сегмент выпуска идентификаторов версий ДОЛЖЕН быть отсортирован в том же "
"порядке, что и сортировка кортежей в Python, когда нормализованный сегмент "
"выпуска разбирается следующим образом::"

#: ../source/specifications/version-specifiers.rst:632
msgid ""
"All release segments involved in the comparison MUST be converted to a "
"consistent length by padding shorter segments with zeros as needed."
msgstr ""
"Все сегменты релиза, участвующие в сравнении, ДОЛЖНЫ быть приведены к единой "
"длине путем заполнения более коротких сегментов нулями по мере необходимости."

#: ../source/specifications/version-specifiers.rst:635
msgid ""
"Within a numeric release (``1.0``, ``2.7.3``), the following suffixes are "
"permitted and MUST be ordered as shown::"
msgstr ""
"В числовом выпуске (``1.0``, ``2.7.3``) разрешены следующие суффиксы, "
"которые ДОЛЖНЫ быть упорядочены, как показано на рисунке::"

#: ../source/specifications/version-specifiers.rst:640
msgid ""
"Note that ``c`` is considered to be semantically equivalent to ``rc`` and "
"must be sorted as if it were ``rc``. Tools MAY reject the case of having the "
"same ``N`` for both a ``c`` and a ``rc`` in the same release segment as "
"ambiguous and remain in compliance with the specification."
msgstr ""
"Обратите внимание, что ``c`` считается семантически эквивалентным ``rc`` и "
"должен быть отсортирован так же, как если бы он был ``rc``. Инструментальные "
"средства МОГУТ отклонить случай наличия одинакового ``N`` для ``c`` и ``rc`` "
"в одном сегменте выпуска как неоднозначный и остаться в соответствии со "
"спецификацией."

#: ../source/specifications/version-specifiers.rst:645
msgid ""
"Within an alpha (``1.0a1``), beta (``1.0b1``), or release candidate "
"(``1.0rc1``, ``1.0c1``), the following suffixes are permitted and MUST be "
"ordered as shown::"
msgstr ""
"Внутри альфа-версии (``1.0a1``), бета-версии (``1.0b1``) или релиз-кандидата "
"(``1.0rc1``, ``1.0c1``) разрешены следующие суффиксы, которые ДОЛЖНЫ быть "
"упорядочены, как показано::"

#: ../source/specifications/version-specifiers.rst:651
msgid ""
"Within a post-release (``1.0.post1``), the following suffixes are permitted "
"and MUST be ordered as shown::"
msgstr ""
"Внутри пост-релиза (``1.0.post1``) разрешены следующие суффиксы, которые "
"ДОЛЖНЫ быть упорядочены, как показано::"

#: ../source/specifications/version-specifiers.rst:656
msgid ""
"Note that ``devN`` and ``postN`` MUST always be preceded by a dot, even when "
"used immediately following a numeric version (e.g. ``1.0.dev456``, ``1.0."
"post1``)."
msgstr ""
"Обратите внимание, что перед ``devN`` и ``postN`` ДОЛЖНА всегда стоять "
"точка, даже если они используются сразу после числовой версии (например, "
"``1.0.dev456``, ``1.0.post1``)."

#: ../source/specifications/version-specifiers.rst:660
msgid ""
"Within a pre-release, post-release or development release segment with a "
"shared prefix, ordering MUST be by the value of the numeric component."
msgstr ""
"Внутри сегмента предрелиза, пострелиза или релиза разработки с общим "
"префиксом упорядочивание ДОЛЖНО осуществляться по значению числового "
"компонента."

#: ../source/specifications/version-specifiers.rst:663
msgid "The following example covers many of the possible combinations::"
msgstr "Следующий пример охватывает многие из возможных комбинаций::"

#: ../source/specifications/version-specifiers.rst:688
msgid "Version ordering across different metadata versions"
msgstr "Упорядочивание версий в различных версиях метаданных"

#: ../source/specifications/version-specifiers.rst:690
msgid ""
"Metadata v1.0 (:pep:`241`) and metadata v1.1 (:pep:`314`) do not specify a "
"standard version identification or ordering scheme. However metadata v1.2 (:"
"pep:`345`) does specify a scheme which is defined in :pep:`386`."
msgstr ""
"Метаданные v1.0 (:pep:`241`) и метаданные v1.1 (:pep:`314`) не определяют "
"стандартную схему идентификации или упорядочивания версий. Однако в "
"метаданных v1.2 (:pep:`345`) указана схема, которая определена в :pep:`386`."

#: ../source/specifications/version-specifiers.rst:694
msgid ""
"Due to the nature of the simple installer API it is not possible for an "
"installer to be aware of which metadata version a particular distribution "
"was using. Additionally installers required the ability to create a "
"reasonably prioritized list that includes all, or as many as possible, "
"versions of a project to determine which versions it should install. These "
"requirements necessitate a standardization across one parsing mechanism to "
"be used for all versions of a project."
msgstr ""
"Из-за природы простого API инсталлятора он не может знать, какую версию "
"метаданных использует тот или иной дистрибутив. Кроме того, инсталляторам "
"требовалась возможность создать разумно приоритетный список, включающий все "
"или как можно больше версий проекта, чтобы определить, какие версии следует "
"установить. Эти требования обуславливают необходимость стандартизации одного "
"механизма разбора, который будет использоваться для всех версий проекта."

#: ../source/specifications/version-specifiers.rst:702
msgid ""
"Due to the above, this specification MUST be used for all versions of "
"metadata and supersedes :pep:`386` even for metadata v1.2. Tools SHOULD "
"ignore any versions which cannot be parsed by the rules in this "
"specification, but MAY fall back to implementation defined version parsing "
"and ordering schemes if no versions complying with this specification are "
"available."
msgstr ""
"В связи с вышесказанным, эта спецификация ДОЛЖНА использоваться для всех "
"версий метаданных и заменяет :pep:`386` даже для метаданных v1.2. "
"Инструменты ДОЛЖНЫ игнорировать любые версии, которые не могут быть "
"разобраны по правилам этой спецификации, но МОГУТ вернуться к схемам разбора "
"и упорядочивания версий, определенным реализацией, если версии, "
"соответствующие этой спецификации, недоступны."

#: ../source/specifications/version-specifiers.rst:708
msgid ""
"Distribution users may wish to explicitly remove non-compliant versions from "
"any private package indexes they control."
msgstr ""
"Пользователи дистрибутива могут захотеть явно удалить несоответствующие "
"версии из всех частных индексов пакетов, которые они контролируют."

#: ../source/specifications/version-specifiers.rst:713
msgid "Compatibility with other version schemes"
msgstr "Совместимость с другими схемами версий"

#: ../source/specifications/version-specifiers.rst:715
msgid ""
"Some projects may choose to use a version scheme which requires translation "
"in order to comply with the public version scheme defined in this "
"specification. In such cases, the project specific version can be stored in "
"the metadata while the translated public version is published in the version "
"field."
msgstr ""
"Некоторые проекты могут использовать схему версий, которая требует перевода, "
"чтобы соответствовать схеме публичных версий, определенной в данной "
"спецификации. В таких случаях версия для конкретного проекта может храниться "
"в метаданных, а переведенная публичная версия публикуется в поле версии."

#: ../source/specifications/version-specifiers.rst:720
msgid ""
"This allows automated distribution tools to provide consistently correct "
"ordering of published releases, while still allowing developers to use the "
"internal versioning scheme they prefer for their projects."
msgstr ""
"Это позволяет автоматизированным средствам распространения обеспечивать "
"стабильно корректное упорядочивание публикуемых релизов, в то же время "
"позволяя разработчикам использовать внутреннюю схему версионирования, "
"которую они предпочитают для своих проектов."

#: ../source/specifications/version-specifiers.rst:728
msgid ""
"`Semantic versioning`_ is a popular version identification scheme that is "
"more prescriptive than this specification regarding the significance of "
"different elements of a release number. Even if a project chooses not to "
"abide by the details of semantic versioning, the scheme is worth "
"understanding as it covers many of the issues that can arise when depending "
"on other distributions, and when publishing a distribution that others rely "
"on."
msgstr ""
"`Semantic versioning`_ - это популярная схема идентификации версий, которая "
"более предписательна, чем эта спецификация, в отношении значимости различных "
"элементов номера релиза. Даже если проект решает не придерживаться деталей "
"семантического версионирования, схему стоит понять, поскольку она охватывает "
"многие вопросы, которые могут возникнуть при зависимости от других "
"дистрибутивов, а также при публикации дистрибутива, на который полагаются "
"другие."

#: ../source/specifications/version-specifiers.rst:735
msgid ""
"The \"Major.Minor.Patch\" (described in this specification as \"major.minor."
"micro\") aspects of semantic versioning (clauses 1-8 in the 2.0.0 "
"specification) are fully compatible with the version scheme defined in this "
"specification, and abiding by these aspects is encouraged."
msgstr ""
"Аспекты \"Major.Minor.Patch\" (описанные в данной спецификации как \"major."
"minor.micro\") семантической версионности (пункты 1-8 в спецификации 2.0.0) "
"полностью совместимы со схемой версий, определенной в данной спецификации, и "
"соблюдение этих аспектов приветствуется."

#: ../source/specifications/version-specifiers.rst:740
msgid ""
"Semantic versions containing a hyphen (pre-releases - clause 10) or a plus "
"sign (builds - clause 11) are *not* compatible with this specification and "
"are not permitted in the public version field."
msgstr ""
"Семантические версии, содержащие дефис (предвыпуск - пункт 10) или знак плюс "
"(бабочки - пункт 11), не совместимы с этой спецификацией и не разрешены в "
"поле публичной версии."

#: ../source/specifications/version-specifiers.rst:744
msgid ""
"One possible mechanism to translate such semantic versioning based source "
"labels to compatible public versions is to use the ``.devN`` suffix to "
"specify the appropriate version order."
msgstr ""
"Одним из возможных механизмов перевода таких семантических версий, "
"основанных на метках источника, в совместимые публичные версии является "
"использование суффикса ``.devN`` для указания соответствующего порядка "
"версий."

#: ../source/specifications/version-specifiers.rst:748
msgid ""
"Specific build information may also be included in local version labels."
msgstr ""
"Информация о конкретной сборке также может быть включена в локальные метки "
"версий."

#: ../source/specifications/version-specifiers.rst:754
msgid "DVCS based version labels"
msgstr "Метки версий на базе DVCS"

#: ../source/specifications/version-specifiers.rst:756
msgid ""
"Many build tools integrate with distributed version control systems like Git "
"and Mercurial in order to add an identifying hash to the version identifier. "
"As hashes cannot be ordered reliably such versions are not permitted in the "
"public version field."
msgstr ""
"Многие инструменты сборки интегрируются с распределенными системами контроля "
"версий, такими как Git и Mercurial, чтобы добавить идентифицирующий хэш к "
"идентификатору версии. Поскольку хэши не могут быть надежно упорядочены, "
"такие версии не допускаются в поле публичной версии."

#: ../source/specifications/version-specifiers.rst:761
msgid ""
"As with semantic versioning, the public ``.devN`` suffix may be used to "
"uniquely identify such releases for publication, while the original DVCS "
"based label can be stored in the project metadata."
msgstr ""
"Как и в случае с семантическим версионированием, общедоступный суффикс ``."
"devN`` может использоваться для уникальной идентификации таких релизов для "
"публикации, а оригинальная метка, основанная на DVCS, может храниться в "
"метаданных проекта."

#: ../source/specifications/version-specifiers.rst:765
msgid ""
"Identifying hash information may also be included in local version labels."
msgstr ""
"Идентифицирующая хэш-информация также может быть включена в метки локальных "
"версий."

#: ../source/specifications/version-specifiers.rst:769
msgid "Olson database versioning"
msgstr "Версия базы данных Олсона"

#: ../source/specifications/version-specifiers.rst:771
msgid ""
"The ``pytz`` project inherits its versioning scheme from the corresponding "
"Olson timezone database versioning scheme: the year followed by a lowercase "
"character indicating the version of the database within that year."
msgstr ""
"Проект ``pytz`` наследует свою схему версий от соответствующей схемы версий "
"базы данных часового пояса Olson: год, за которым следует строчный символ, "
"указывающий на версию базы данных в пределах этого года."

#: ../source/specifications/version-specifiers.rst:775
msgid ""
"This can be translated to a compliant public version identifier as ``<year>."
"<serial>``, where the serial starts at zero or one (for the '<year>a' "
"release) and is incremented with each subsequent database update within the "
"year."
msgstr ""
"Это можно перевести в соответствующий идентификатор публичной версии как "
"``<год>.<серия>``, где серия начинается с нуля или единицы (для релиза "
"'<год>a') и увеличивается с каждым последующим обновлением базы данных в "
"течение года."

#: ../source/specifications/version-specifiers.rst:780
msgid ""
"As with other translated version identifiers, the corresponding Olson "
"database version could be recorded in the project metadata."
msgstr ""
"Как и в случае с другими идентификаторами переведенных версий, "
"соответствующая версия базы данных Olson может быть записана в метаданных "
"проекта."

#: ../source/specifications/version-specifiers.rst:787
msgid ""
"A version specifier consists of a series of version clauses, separated by "
"commas. For example::"
msgstr ""
"Спецификатор версии состоит из ряда пунктов версии, разделенных запятыми. "
"Например::"

#: ../source/specifications/version-specifiers.rst:792
msgid "The comparison operator determines the kind of version clause:"
msgstr "Оператор сравнения определяет тип положения версии:"

#: ../source/specifications/version-specifiers.rst:794
msgid "``~=``: `Compatible release`_ clause"
msgstr "``~=``: `Совместимый релиз`_ пункт"

#: ../source/specifications/version-specifiers.rst:795
msgid "``==``: `Version matching`_ clause"
msgstr "``==``: `Версия соответствует`_ пункту"

#: ../source/specifications/version-specifiers.rst:796
msgid "``!=``: `Version exclusion`_ clause"
msgstr "``!=``: `исключение версии`_ пункт"

#: ../source/specifications/version-specifiers.rst:797
msgid "``<=``, ``>=``: `Inclusive ordered comparison`_ clause"
msgstr "``<=``, ``>=``: предложение ``включенного упорядоченного сравнения`_"

#: ../source/specifications/version-specifiers.rst:798
msgid "``<``, ``>``: `Exclusive ordered comparison`_ clause"
msgstr "``<``, ``>``: предложение ``исключительного упорядоченного сравнения``"

#: ../source/specifications/version-specifiers.rst:799
msgid "``===``: `Arbitrary equality`_ clause."
msgstr "``===``: предложение `произвольного равенства`."

#: ../source/specifications/version-specifiers.rst:801
msgid ""
"The comma (\",\") is equivalent to a logical **and** operator: a candidate "
"version must match all given version clauses in order to match the specifier "
"as a whole."
msgstr ""
"Запятая (\",\") эквивалентна логическому оператору **и**: версия-кандидат "
"должна соответствовать всем заданным пунктам версии, чтобы соответствовать "
"спецификатору в целом."

#: ../source/specifications/version-specifiers.rst:805
msgid ""
"Whitespace between a conditional operator and the following version "
"identifier is optional, as is the whitespace around the commas."
msgstr ""
"Пробелы между условным оператором и следующим идентификатором версии "
"необязательны, как и пробелы вокруг запятых."

#: ../source/specifications/version-specifiers.rst:808
msgid ""
"When multiple candidate versions match a version specifier, the preferred "
"version SHOULD be the latest version as determined by the consistent "
"ordering defined by the standard `Version scheme`_. Whether or not pre-"
"releases are considered as candidate versions SHOULD be handled as described "
"in `Handling of pre-releases`_."
msgstr ""
"Когда несколько версий-кандидатов соответствуют спецификатору версии, "
"предпочтительной версией ДОЛЖНА быть последняя версия, как определено "
"последовательным упорядочиванием, определенным стандартной `Схемой версий`_. "
"Вопрос о том, рассматриваются ли предварительные выпуски в качестве версий-"
"кандидатов, ДОЛЖЕН решаться в соответствии с описанием в `Обработке "
"предварительных выпусков`_."

#: ../source/specifications/version-specifiers.rst:814
msgid ""
"Except where specifically noted below, local version identifiers MUST NOT be "
"permitted in version specifiers, and local version labels MUST be ignored "
"entirely when checking if candidate versions match a given version specifier."
msgstr ""
"За исключением случаев, оговоренных ниже, локальные идентификаторы версий НЕ "
"ДОЛЖНЫ быть разрешены в спецификаторах версий, а локальные метки версий "
"ДОЛЖНЫ полностью игнорироваться при проверке соответствия версий-кандидатов "
"заданному спецификатору версий."

#: ../source/specifications/version-specifiers.rst:823
msgid "Compatible release"
msgstr "Совместимый выпуск"

#: ../source/specifications/version-specifiers.rst:825
msgid ""
"A compatible release clause consists of the compatible release operator "
"``~=`` and a version identifier. It matches any candidate version that is "
"expected to be compatible with the specified version."
msgstr ""
"Условие совместимого выпуска состоит из оператора совместимого выпуска "
"``~=`` и идентификатора версии. Он соответствует любой версии-кандидату, "
"которая, как ожидается, будет совместима с указанной версией."

#: ../source/specifications/version-specifiers.rst:829
msgid ""
"The specified version identifier must be in the standard format described in "
"`Version scheme`_. Local version identifiers are NOT permitted in this "
"version specifier."
msgstr ""
"Указанный идентификатор версии должен быть в стандартном формате, описанном "
"в `Схема версии`_. Локальные идентификаторы версий в этом спецификаторе "
"версий НЕ допускаются."

#: ../source/specifications/version-specifiers.rst:833
msgid ""
"For a given release identifier ``V.N``, the compatible release clause is "
"approximately equivalent to the pair of comparison clauses::"
msgstr ""
"Для данного идентификатора выпуска ``V.N`` совместимое положение о выпуске "
"приблизительно эквивалентно паре положений сравнения::"

#: ../source/specifications/version-specifiers.rst:838
msgid ""
"This operator MUST NOT be used with a single segment version number such as "
"``~=1``."
msgstr ""
"Этот оператор НЕ ДОЛЖЕН использоваться с номером версии одного сегмента, "
"таким как ``~=1``."

#: ../source/specifications/version-specifiers.rst:841
msgid "For example, the following groups of version clauses are equivalent::"
msgstr "Например, следующие группы положений о версии эквивалентны::"

#: ../source/specifications/version-specifiers.rst:849
msgid ""
"If a pre-release, post-release or developmental release is named in a "
"compatible release clause as ``V.N.suffix``, then the suffix is ignored when "
"determining the required prefix match::"
msgstr ""
"Если предрелиз, пострелиз или релиз разработки назван в положении о "
"совместимом релизе как ``V.N.suffix``, то суффикс игнорируется при "
"определении требуемого соответствия префикса::"

#: ../source/specifications/version-specifiers.rst:859
msgid ""
"The padding rules for release segment comparisons means that the assumed "
"degree of forward compatibility in a compatible release clause can be "
"controlled by appending additional zeros to the version specifier::"
msgstr ""
"Правила вставки для сравнения сегментов выпуска означают, что предполагаемая "
"степень прямой совместимости в положении о совместимом выпуске может "
"контролироваться путем добавления дополнительных нулей к спецификатору "
"версии::"

#: ../source/specifications/version-specifiers.rst:871
msgid "Version matching"
msgstr "Соответствие версий"

#: ../source/specifications/version-specifiers.rst:873
msgid ""
"A version matching clause includes the version matching operator ``==`` and "
"a version identifier."
msgstr ""
"Условие сопоставления версий включает оператор сопоставления версий ``==`` и "
"идентификатор версии."

#: ../source/specifications/version-specifiers.rst:876
msgid ""
"The specified version identifier must be in the standard format described in "
"`Version scheme`_, but a trailing ``.*`` is permitted on public version "
"identifiers as described below."
msgstr ""
"Указанный идентификатор версии должен быть в стандартном формате, описанном "
"в `Version scheme`_, но в идентификаторах публичных версий допускается "
"наличие конца ``.*``, как описано ниже."

#: ../source/specifications/version-specifiers.rst:880
msgid ""
"By default, the version matching operator is based on a strict equality "
"comparison: the specified version must be exactly the same as the requested "
"version. The *only* substitution performed is the zero padding of the "
"release segment to ensure the release segments are compared with the same "
"length."
msgstr ""
"По умолчанию оператор сопоставления версий основан на строгом сравнении "
"равенства: указанная версия должна быть точно такой же, как и запрашиваемая. "
"Единственная выполняемая замена - это нулевое заполнение сегмента выпуска, "
"чтобы гарантировать, что сегменты выпуска сравниваются с одинаковой длиной."

#: ../source/specifications/version-specifiers.rst:886
msgid ""
"Whether or not strict version matching is appropriate depends on the "
"specific use case for the version specifier. Automated tools SHOULD at least "
"issue warnings and MAY reject them entirely when strict version matches are "
"used inappropriately."
msgstr ""
"Уместно ли строгое соответствие версии или нет, зависит от конкретного "
"случая использования спецификатора версии. Автоматизированные инструменты "
"ДОЛЖНЫ как минимум выдавать предупреждения, а могут и полностью отклонять "
"их, если строгое соответствие версий используется неуместно."

#: ../source/specifications/version-specifiers.rst:891
msgid ""
"Prefix matching may be requested instead of strict comparison, by appending "
"a trailing ``.*`` to the version identifier in the version matching clause. "
"This means that additional trailing segments will be ignored when "
"determining whether or not a version identifier matches the clause. If the "
"specified version includes only a release segment, then trailing components "
"(or the lack thereof) in the release segment are also ignored."
msgstr ""
"Вместо строгого сравнения можно запросить префиксное сопоставление, добавив "
"к идентификатору версии в предложении о сопоставлении версий сдерживающий "
"сегмент ``.*``. Это означает, что при определении соответствия "
"идентификатора версии условию дополнительные сегменты в конце фразы будут "
"игнорироваться. Если указанная версия включает в себя только сегмент релиза, "
"то сдерживающие компоненты (или их отсутствие) в сегменте релиза также "
"игнорируются."

#: ../source/specifications/version-specifiers.rst:898
#: ../source/specifications/version-specifiers.rst:959
msgid ""
"For example, given the version ``1.1.post1``, the following clauses would "
"match or not as shown::"
msgstr ""
"Например, для версии ``1.1.post1`` следующие пункты будут совпадать или не "
"совпадать, как показано на рисунке::"

#: ../source/specifications/version-specifiers.rst:905
msgid ""
"For purposes of prefix matching, the pre-release segment is considered to "
"have an implied preceding ``.``, so given the version ``1.1a1``, the "
"following clauses would match or not as shown::"
msgstr ""
"Для целей сопоставления префиксов сегмент pre-release считается имеющим "
"подразумеваемый предшествующий ``.``, поэтому, учитывая версию ``1.1a1``, "
"следующие фразы будут соответствовать или не соответствовать, как показано::"

#: ../source/specifications/version-specifiers.rst:913
msgid ""
"An exact match is also considered a prefix match (this interpretation is "
"implied by the usual zero padding rules for the release segment of version "
"identifiers). Given the version ``1.1``, the following clauses would match "
"or not as shown::"
msgstr ""
"Точное совпадение также считается совпадением с префиксом (такая "
"интерпретация подразумевается обычными правилами нулевого заполнения для "
"сегмента release в идентификаторах версий). Для версии ``1.1`` следующие "
"пункты будут совпадать или не совпадать, как показано на рисунке::"

#: ../source/specifications/version-specifiers.rst:925
msgid ""
"It is invalid to have a prefix match containing a development or local "
"release such as ``1.0.dev1.*`` or ``1.0+foo1.*``. If present, the "
"development release segment is always the final segment in the public "
"version, and the local version is ignored for comparison purposes, so using "
"either in a prefix match wouldn't make any sense."
msgstr ""
"Недопустимо использовать префиксное соответствие, содержащее релиз "
"разработки или локальный релиз, например ``1.0.dev1.*`` или ``1.0+foo1.*``. "
"Если они присутствуют, сегмент релиза разработки всегда является последним "
"сегментом публичной версии, а локальная версия игнорируется для целей "
"сравнения, поэтому использование любого из них в префиксном совпадении не "
"имеет смысла."

#: ../source/specifications/version-specifiers.rst:931
msgid ""
"The use of ``==`` (without at least the wildcard suffix) when defining "
"dependencies for published distributions is strongly discouraged as it "
"greatly complicates the deployment of security fixes. The strict version "
"comparison operator is intended primarily for use when defining dependencies "
"for repeatable *deployments of applications* while using a shared "
"distribution index."
msgstr ""
"Использование ``==`` (без суффикса подстановки) при определении зависимостей "
"для опубликованных дистрибутивов категорически не рекомендуется, так как это "
"значительно усложняет развертывание исправлений безопасности. Строгий "
"оператор сравнения версий предназначен в первую очередь для использования "
"при определении зависимостей для повторяющихся *развертываний приложений* "
"при использовании общего индекса дистрибутива."

#: ../source/specifications/version-specifiers.rst:938
msgid ""
"If the specified version identifier is a public version identifier (no local "
"version label), then the local version label of any candidate versions MUST "
"be ignored when matching versions."
msgstr ""
"Если указанный идентификатор версии является общедоступным идентификатором "
"версии (без метки локальной версии), то метка локальной версии любых версий-"
"кандидатов ДОЛЖНА игнорироваться при сопоставлении версий."

#: ../source/specifications/version-specifiers.rst:942
msgid ""
"If the specified version identifier is a local version identifier, then the "
"local version labels of candidate versions MUST be considered when matching "
"versions, with the public version identifier being matched as described "
"above, and the local version label being checked for equivalence using a "
"strict string equality comparison."
msgstr ""
"Если указанный идентификатор версии является локальным идентификатором "
"версии, то локальные метки версий-кандидатов ДОЛЖНЫ учитываться при "
"сопоставлении версий, при этом публичный идентификатор версии "
"сопоставляется, как описано выше, а метка локальной версии проверяется на "
"эквивалентность с помощью строгого сравнения равенства строк."

#: ../source/specifications/version-specifiers.rst:950
msgid "Version exclusion"
msgstr "Исключение версии"

#: ../source/specifications/version-specifiers.rst:952
msgid ""
"A version exclusion clause includes the version exclusion operator ``!=`` "
"and a version identifier."
msgstr ""
"Предложение об исключении версии включает оператор исключения версии ``!=`` "
"и идентификатор версии."

#: ../source/specifications/version-specifiers.rst:955
msgid ""
"The allowed version identifiers and comparison semantics are the same as "
"those of the `Version matching`_ operator, except that the sense of any "
"match is inverted."
msgstr ""
"Допустимые идентификаторы версий и семантика сравнения те же, что и у "
"оператора `Version matching`_, за исключением того, что смысл любого "
"совпадения инвертируется."

#: ../source/specifications/version-specifiers.rst:968
msgid "Inclusive ordered comparison"
msgstr "Всеобъемлющее упорядоченное сравнение"

#: ../source/specifications/version-specifiers.rst:970
msgid ""
"An inclusive ordered comparison clause includes a comparison operator and a "
"version identifier, and will match any version where the comparison is "
"correct based on the relative position of the candidate version and the "
"specified version given the consistent ordering defined by the standard "
"`Version scheme`_."
msgstr ""
"Предложение инклюзивного упорядоченного сравнения включает оператор "
"сравнения и идентификатор версии, и будет соответствовать любой версии, где "
"сравнение корректно на основе относительного положения версии-кандидата и "
"указанной версии с учетом последовательного упорядочивания, определенного "
"стандартной `Version scheme`_."

#: ../source/specifications/version-specifiers.rst:976
msgid "The inclusive ordered comparison operators are ``<=`` and ``>=``."
msgstr "Инклюзивные операторы упорядоченного сравнения - ``<=`` и ``>=``."

#: ../source/specifications/version-specifiers.rst:978
#: ../source/specifications/version-specifiers.rst:1008
msgid ""
"As with version matching, the release segment is zero padded as necessary to "
"ensure the release segments are compared with the same length."
msgstr ""
"Как и при сопоставлении версий, сегмент выпуска обнуляется по мере "
"необходимости, чтобы сегменты выпуска сравнивались с одинаковой длиной."

#: ../source/specifications/version-specifiers.rst:981
#: ../source/specifications/version-specifiers.rst:1011
msgid "Local version identifiers are NOT permitted in this version specifier."
msgstr ""
"Локальные идентификаторы версий в этом спецификаторе версий НЕ допускаются."

#: ../source/specifications/version-specifiers.rst:985
msgid "Exclusive ordered comparison"
msgstr "Исключительное упорядоченное сравнение"

#: ../source/specifications/version-specifiers.rst:987
msgid ""
"The exclusive ordered comparisons ``>`` and ``<`` are similar to the "
"inclusive ordered comparisons in that they rely on the relative position of "
"the candidate version and the specified version given the consistent "
"ordering defined by the standard `Version scheme`_. However, they "
"specifically exclude pre-releases, post-releases, and local versions of the "
"specified version."
msgstr ""
"Исключительные упорядоченные сравнения ``>`` и ``<``` похожи на инклюзивные "
"упорядоченные сравнения в том, что они полагаются на относительное положение "
"версии-кандидата и указанной версии с учетом последовательного "
"упорядочивания, определенного стандартной `Version scheme`_. Однако они "
"специально исключают пре-релизы, пост-релизы и локальные версии указанной "
"версии."

#: ../source/specifications/version-specifiers.rst:993
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** allow a post-release of "
"the given version unless ``V`` itself is a post release. You may mandate "
"that releases are later than a particular post release, including additional "
"post releases, by using ``>V.postN``. For example, ``>1.7`` will allow "
"``1.7.1`` but not ``1.7.0.post1`` and ``>1.7.post2`` will allow ``1.7.1`` "
"and ``1.7.0.post3`` but not ``1.7.0``."
msgstr ""
"Исключительное упорядоченное сравнение ``>V`` **НЕ ДОЛЖНО** допускать пост-"
"релиз данной версии, если только ``V`` сам не является пост-релизом. Вы "
"можете запретить релизы более поздние, чем определенный пост-релиз, включая "
"дополнительные пост-релизы, используя ``>V.postN``. Например, ``>1.7`` "
"разрешит ``1.7.1``, но не ``1.7.0.post1``, а ``>1.7.post2`` разрешит "
"``1.7.1`` и ``1.7.0.post3``, но не ``1.7.0``."

#: ../source/specifications/version-specifiers.rst:1000
msgid ""
"The exclusive ordered comparison ``>V`` **MUST NOT** match a local version "
"of the specified version."
msgstr ""
"Исключительное упорядоченное сравнение ``>V`` **НЕ ДОЛЖНО** соответствовать "
"локальной версии указанной версии."

#: ../source/specifications/version-specifiers.rst:1003
msgid ""
"The exclusive ordered comparison ``<V`` **MUST NOT** allow a pre-release of "
"the specified version unless the specified version is itself a pre-release. "
"Allowing pre-releases that are earlier than, but not equal to a specific pre-"
"release may be accomplished by using ``<V.rc1`` or similar."
msgstr ""
"Исключительное упорядоченное сравнение ``<V`` **НЕ ДОЛЖНО** разрешать "
"предварительный выпуск указанной версии, если только указанная версия сама "
"не является предварительным выпуском. Разрешение предварительных версий, "
"которые являются более ранними, но не равными определенной предварительной "
"версии, может быть достигнуто с помощью ``<V.rc1`` или аналогичных."

#: ../source/specifications/version-specifiers.rst:1015
msgid "Arbitrary equality"
msgstr "Произвольное равенство"

#: ../source/specifications/version-specifiers.rst:1017
msgid ""
"Arbitrary equality comparisons are simple string equality operations which "
"do not take into account any of the semantic information such as zero "
"padding or local versions. This operator also does not support prefix "
"matching as the ``==`` operator does."
msgstr ""
"Произвольные сравнения равенства - это простые операции равенства строк, "
"которые не учитывают никакой семантической информации, такой как нулевая "
"подстановка или локальные версии. Этот оператор также не поддерживает "
"сопоставление префиксов, как это делает оператор ``==``."

#: ../source/specifications/version-specifiers.rst:1022
msgid ""
"The primary use case for arbitrary equality is to allow for specifying a "
"version which cannot otherwise be represented by this specification. This "
"operator is special and acts as an escape hatch to allow someone using a "
"tool which implements this specification to still install a legacy version "
"which is otherwise incompatible with this specification."
msgstr ""
"Основное использование произвольного равенства - это возможность указать "
"версию, которая иначе не может быть представлена в данной спецификации. Этот "
"оператор является специальным и действует как аварийный люк, позволяющий "
"человеку, использующему инструмент, реализующий эту спецификацию, установить "
"устаревшую версию, которая иначе несовместима с этой спецификацией."

#: ../source/specifications/version-specifiers.rst:1028
msgid ""
"An example would be ``===foobar`` which would match a version of ``foobar``."
msgstr ""
"Примером может служить ``===foobar``, который будет соответствовать версии "
"``foobar``."

#: ../source/specifications/version-specifiers.rst:1030
msgid ""
"This operator may also be used to explicitly require an unpatched version of "
"a project such as ``===1.0`` which would not match for a version "
"``1.0+downstream1``."
msgstr ""
"Этот оператор также может быть использован для явного требования "
"непропатченной версии проекта, например, ``===1.0``, которая не будет "
"соответствовать версии ``1.0+downstream1``."

#: ../source/specifications/version-specifiers.rst:1034
msgid ""
"Use of this operator is heavily discouraged and tooling MAY display a "
"warning when it is used."
msgstr ""
"Использовать этот оператор крайне не рекомендуется, и оснастка ДОЛЖНА "
"содержать предупреждение о его использовании."

#: ../source/specifications/version-specifiers.rst:1039
msgid "Handling of pre-releases"
msgstr "Работа с предварительными выпусками"

#: ../source/specifications/version-specifiers.rst:1041
msgid ""
"Pre-releases of any kind, including developmental releases, are implicitly "
"excluded from all version specifiers, *unless* they are already present on "
"the system, explicitly requested by the user, or if the only available "
"version that satisfies the version specifier is a pre-release."
msgstr ""
"Предварительные версии любого рода, включая версии разработки, неявно "
"исключаются из всех спецификаторов версий, *если* они уже присутствуют в "
"системе, явно запрошены пользователем, или если единственная доступная "
"версия, удовлетворяющая спецификатору версии, является предварительной "
"версией."

#: ../source/specifications/version-specifiers.rst:1046
msgid "By default, dependency resolution tools SHOULD:"
msgstr "По умолчанию инструменты разрешения зависимостей ДОЛЖНЫ:"

#: ../source/specifications/version-specifiers.rst:1048
msgid "accept already installed pre-releases for all version specifiers"
msgstr ""
"принимать уже установленные предварительные версии для всех спецификаторов "
"версии"

#: ../source/specifications/version-specifiers.rst:1049
msgid ""
"accept remotely available pre-releases for version specifiers where there is "
"no final or post release that satisfies the version specifier"
msgstr ""
"принимать удаленно доступные предварительные выпуски для спецификаторов "
"версий, если не существует финального или пост-выпуска, удовлетворяющего "
"спецификатору версии"

#: ../source/specifications/version-specifiers.rst:1051
msgid "exclude all other pre-releases from consideration"
msgstr "исключить из рассмотрения все прочие предварительные продажи"

#: ../source/specifications/version-specifiers.rst:1053
msgid ""
"Dependency resolution tools MAY issue a warning if a pre-release is needed "
"to satisfy a version specifier."
msgstr ""
"Средства разрешения зависимостей МОГУТ выдавать предупреждение, если для "
"удовлетворения спецификатора версии требуется предварительный выпуск."

#: ../source/specifications/version-specifiers.rst:1056
msgid ""
"Dependency resolution tools SHOULD also allow users to request the following "
"alternative behaviours:"
msgstr ""
"Средства разрешения зависимостей ДОЛЖНЫ также позволять пользователям "
"запрашивать следующие альтернативные варианты поведения:"

#: ../source/specifications/version-specifiers.rst:1059
msgid "accepting pre-releases for all version specifiers"
msgstr "прием предварительных версий для всех спецификаторов версий"

#: ../source/specifications/version-specifiers.rst:1060
msgid ""
"excluding pre-releases for all version specifiers (reporting an error or "
"warning if a pre-release is already installed locally, or if a pre-release "
"is the only way to satisfy a particular specifier)"
msgstr ""
"исключение предварительных версий для всех спецификаторов версии (сообщение "
"об ошибке или предупреждение, если предварительная версия уже установлена "
"локально, или если предварительная версия является единственным способом "
"удовлетворить определенный спецификатор)"

#: ../source/specifications/version-specifiers.rst:1064
msgid ""
"Dependency resolution tools MAY also allow the above behaviour to be "
"controlled on a per-distribution basis."
msgstr ""
"Средства разрешения зависимостей MAY также позволяют управлять вышеуказанным "
"поведением на основе каждого дистрибутива."

#: ../source/specifications/version-specifiers.rst:1067
msgid ""
"Post-releases and final releases receive no special treatment in version "
"specifiers - they are always included unless explicitly excluded."
msgstr ""
"Пост-релизы и финальные релизы не получают особого обращения в "
"спецификаторах версий - они всегда включаются, если только не исключены "
"явным образом."

#: ../source/specifications/version-specifiers.rst:1074
msgid "``~=3.1``: version 3.1 or later, but not version 4.0 or later."
msgstr ""
"``~=3.1``: версия 3.1 или более поздняя, но не версия 4.0 или более поздняя."

#: ../source/specifications/version-specifiers.rst:1075
msgid "``~=3.1.2``: version 3.1.2 or later, but not version 3.2.0 or later."
msgstr ""
"``~=3.1.2``: версия 3.1.2 или более поздняя, но не версия 3.2.0 или более "
"поздняя."

#: ../source/specifications/version-specifiers.rst:1076
msgid "``~=3.1a1``: version 3.1a1 or later, but not version 4.0 or later."
msgstr ""
"``~=3.1a1``: версия 3.1a1 или более поздняя, но не версия 4.0 или более "
"поздняя."

#: ../source/specifications/version-specifiers.rst:1077
msgid ""
"``== 3.1``: specifically version 3.1 (or 3.1.0), excludes all pre-releases, "
"post releases, developmental releases and any 3.1.x maintenance releases."
msgstr ""
"``== 3.1``: конкретно версия 3.1 (или 3.1.0), исключает все пре-релизы, пост-"
"релизы, релизы разработки и любые поддерживающие релизы 3.1.x."

#: ../source/specifications/version-specifiers.rst:1079
msgid ""
"``== 3.1.*``: any version that starts with 3.1. Equivalent to the "
"``~=3.1.0`` compatible release clause."
msgstr ""
"``== 3.1.*``: любая версия, начинающаяся с 3.1. Эквивалентно положению о "
"совместимом выпуске ``~=3.1.0``."

#: ../source/specifications/version-specifiers.rst:1081
msgid ""
"``~=3.1.0, != 3.1.3``: version 3.1.0 or later, but not version 3.1.3 and not "
"version 3.2.0 or later."
msgstr ""
"``~=3.1.0, != 3.1.3``: версия 3.1.0 или более поздняя, но не версия 3.1.3 и "
"не версия 3.2.0 или более поздняя."

#: ../source/specifications/version-specifiers.rst:1086
msgid "Direct references"
msgstr "Прямые ссылки"

#: ../source/specifications/version-specifiers.rst:1088
msgid ""
"Some automated tools may permit the use of a direct reference as an "
"alternative to a normal version specifier. A direct reference consists of "
"the specifier ``@`` and an explicit URL."
msgstr ""
"Некоторые автоматизированные инструменты могут разрешить использование "
"прямой ссылки в качестве альтернативы обычному спецификатору версии. Прямая "
"ссылка состоит из спецификатора ``@`` и явного URL."

#: ../source/specifications/version-specifiers.rst:1092
msgid ""
"Whether or not direct references are appropriate depends on the specific use "
"case for the version specifier. Automated tools SHOULD at least issue "
"warnings and MAY reject them entirely when direct references are used "
"inappropriately."
msgstr ""
"Уместны ли прямые ссылки или нет, зависит от конкретного случая "
"использования спецификатора версии. Автоматизированные инструменты ДОЛЖНЫ "
"как минимум выдавать предупреждения, а могут и полностью отклонять их, если "
"прямые ссылки используются неуместно."

#: ../source/specifications/version-specifiers.rst:1097
msgid ""
"Public index servers SHOULD NOT allow the use of direct references in "
"uploaded distributions. Direct references are intended as a tool for "
"software integrators rather than publishers."
msgstr ""
"Публичные индексные серверы НЕ ДОЛЖНЫ разрешать использование прямых ссылок "
"в загружаемых дистрибутивах. Прямые ссылки предназначены для интеграторов "
"программного обеспечения, а не для издателей."

#: ../source/specifications/version-specifiers.rst:1101
msgid ""
"Depending on the use case, some appropriate targets for a direct URL "
"reference may be an sdist or a wheel binary archive. The exact URLs and "
"targets supported will be tool dependent."
msgstr ""
"В зависимости от случая использования, некоторыми подходящими целями для "
"прямой URL-ссылки могут быть sdist или бинарный архив wheel. Точные URL-"
"адреса и поддерживаемые цели зависят от инструмента."

#: ../source/specifications/version-specifiers.rst:1105
msgid "For example, a local source archive may be referenced directly::"
msgstr "Например, на локальный исходный архив можно ссылаться напрямую::"

#: ../source/specifications/version-specifiers.rst:1109
msgid "Alternatively, a prebuilt archive may also be referenced::"
msgstr ""
"В качестве альтернативы можно сослаться на предварительно собранный архив::"

#: ../source/specifications/version-specifiers.rst:1113
msgid ""
"All direct references that do not refer to a local file URL SHOULD specify a "
"secure transport mechanism (such as ``https``) AND include an expected hash "
"value in the URL for verification purposes. If a direct reference is "
"specified without any hash information, with hash information that the tool "
"doesn't understand, or with a selected hash algorithm that the tool "
"considers too weak to trust, automated tools SHOULD at least emit a warning "
"and MAY refuse to rely on the URL. If such a direct reference also uses an "
"insecure transport, automated tools SHOULD NOT rely on the URL."
msgstr ""
"Все прямые ссылки, не относящиеся к URL локального файла, ДОЛЖНЫ указывать "
"безопасный транспортный механизм (например, ``https``) И включать ожидаемое "
"хэш-значение в URL для целей проверки. Если прямая ссылка указана без какой-"
"либо информации о хэше, с информацией о хэше, которую инструмент не "
"понимает, или с выбранным алгоритмом хэша, который инструмент считает "
"слишком слабым, чтобы доверять ему, автоматизированные инструменты ДОЛЖНЫ, "
"по крайней мере, выдать предупреждение и МОГУТ отказаться использовать URL. "
"Если такая прямая ссылка также использует небезопасный транспорт, "
"автоматизированные инструменты НЕ ДОЛЖНЫ полагаться на URL."

#: ../source/specifications/version-specifiers.rst:1122
msgid ""
"It is RECOMMENDED that only hashes which are unconditionally provided by the "
"latest version of the standard library's :py:mod:`hashlib` module be used "
"for source archive hashes. At time of writing, that list consists of "
"``'md5'``, ``'sha1'``, ``'sha224'``, ``'sha256'``, ``'sha384'``, and "
"``'sha512'``."
msgstr ""
"РЕКОМЕНДУЕТСЯ использовать для хэшей исходных архивов только те хэши, "
"которые безоговорочно предоставляются последней версией модуля :py:mod:"
"`hashlib` стандартной библиотеки. На момент написания статьи в этот список "
"входят ``md5``, ``sha1``, ``sha224``, ``sha256``, ``sha384`` и ``sha512``."

#: ../source/specifications/version-specifiers.rst:1128
msgid ""
"For source archive and wheel references, an expected hash value may be "
"specified by including a ``<hash-algorithm>=<expected-hash>`` entry as part "
"of the URL fragment."
msgstr ""
"Для ссылок на исходный архив и колесо ожидаемое хэш-значение может быть "
"указано путем включения записи ``<hash-algorithm>=<expected-hash>`` в "
"качестве части фрагмента URL."

#: ../source/specifications/version-specifiers.rst:1132
msgid ""
"For version control references, the ``VCS+protocol`` scheme SHOULD be used "
"to identify both the version control system and the secure transport, and a "
"version control system with hash based commit identifiers SHOULD be used. "
"Automated tools MAY omit warnings about missing hashes for version control "
"systems that do not provide hash based commit identifiers."
msgstr ""
"Для ссылок на систему контроля версий схема ``VCS+protocol`` ДОЛЖНА "
"использоваться для идентификации как системы контроля версий, так и "
"безопасного транспорта, и ДОЛЖНА использоваться система контроля версий с "
"идентификаторами фиксаций на основе хэшей. Автоматизированные инструменты "
"МОГУТ не выдавать предупреждения об отсутствии хэшей для систем контроля "
"версий, которые не предоставляют идентификаторы фиксации на основе хэшей."

#: ../source/specifications/version-specifiers.rst:1138
msgid ""
"To handle version control systems that do not support including commit or "
"tag references directly in the URL, that information may be appended to the "
"end of the URL using the ``@<commit-hash>`` or the ``@<tag>#<commit-hash>`` "
"notation."
msgstr ""
"Для работы с системами контроля версий, которые не поддерживают включение "
"ссылок на коммит или тег непосредственно в URL, эта информация может быть "
"добавлена в конец URL с помощью нотации ``@<commit-hash>`` или "
"``@<tag>#<commit-hash>``."

#: ../source/specifications/version-specifiers.rst:1145
msgid ""
"This isn't *quite* the same as the existing VCS reference notation supported "
"by pip. Firstly, the distribution name is moved in front rather than "
"embedded as part of the URL. Secondly, the commit hash is included even when "
"retrieving based on a tag, in order to meet the requirement above that "
"*every* link should include a hash to make things harder to forge (creating "
"a malicious repo with a particular tag is easy, creating one with a specific "
"*hash*, less so)."
msgstr ""
"Это не совсем то же самое, что существующая нотация ссылок на VCS, "
"поддерживаемая pip. Во-первых, имя дистрибутива переносится вперёд, а не "
"вставляется в URL. Во-вторых, хэш коммита включается даже при поиске по "
"тегу, чтобы выполнить требование выше, что *каждая* ссылка должна включать "
"хэш, чтобы затруднить подделку (создать вредоносное репо с определённым "
"тегом легко, а создать репо с определённым *хэшем* - менее)."

#: ../source/specifications/version-specifiers.rst:1153
msgid "Remote URL examples::"
msgstr "Примеры удаленных URL::"

#: ../source/specifications/version-specifiers.rst:1161
msgid "File URLs"
msgstr "URL-адреса файлов"

#: ../source/specifications/version-specifiers.rst:1163
msgid ""
"File URLs take the form of ``file://<host>/<path>``. If the ``<host>`` is "
"omitted it is assumed to be ``localhost`` and even if the ``<host>`` is "
"omitted the third slash MUST still exist. The ``<path>`` defines what the "
"file path on the filesystem that is to be accessed."
msgstr ""
"URL-адреса файлов имеют вид ``file://<host>/<path>``. Если ``<host>`` "
"опущен, предполагается, что это ``localhost``, и даже если ``<host>`` "
"опущен, третья косая черта ДОЛЖНА существовать. Параметр ``<path>`` "
"определяет путь к файлу в файловой системе, к которому необходимо получить "
"доступ."

#: ../source/specifications/version-specifiers.rst:1168
msgid ""
"On the various \\*nix operating systems the only allowed values for "
"``<host>`` is for it to be omitted, ``localhost``, or another FQDN that the "
"current machine believes matches its own host. In other words, on \\*nix the "
"``file://`` scheme can only be used to access paths on the local machine."
msgstr ""
"В различных операционных системах \\*nix единственным допустимым значением "
"для ``<host>`` является опущение, ``localhost`` или другое FQDN, которое, по "
"мнению текущей машины, соответствует ее собственному хосту. Другими словами, "
"в \\*nix схема ``file://`` может использоваться только для доступа к путям "
"на локальной машине."

#: ../source/specifications/version-specifiers.rst:1173
msgid ""
"On Windows the file format should include the drive letter if applicable as "
"part of the ``<path>`` (e.g. ``file:///c:/path/to/a/file``). Unlike \\*nix "
"on Windows the ``<host>`` parameter may be used to specify a file residing "
"on a network share. In other words, in order to translate ``\\"
"\\machine\\volume\\file`` to a ``file://`` url, it would end up as ``file://"
"machine/volume/file``. For more information on ``file://`` URLs on Windows "
"see `MSDN <https://web.archive.org/web/20130321051043/http://blogs.msdn.com/"
"b/ie/archive/2006/12/06/file-uris-in-windows.aspx>`_."
msgstr ""
"В Windows формат файла должен включать букву диска, если это применимо, как "
"часть ``<пути>`` (например, ``file:///c:/path/to/a/file``). В отличие от "
"\\*nix в Windows параметр ``<host>`` может использоваться для указания "
"файла, находящегося на сетевом ресурсе. Другими словами, если перевести ``\\"
"\\\\machine\\volume\\file`` в урл ``file://``, то в итоге получится ``file://"
"machine/volume/file``. Дополнительную информацию об URL-адресах ``file://`` "
"в Windows можно найти в `MSDN <https://web.archive.org/web/20130321051043/"
"http://blogs.msdn.com/b/ie/archive/2006/12/06/file-uris-in-windows.aspx>`_."

#: ../source/specifications/version-specifiers.rst:1184
msgid "Summary of differences from pkg_resources.parse_version"
msgstr "Краткое описание отличий от pkg_resources.parse_version"

#: ../source/specifications/version-specifiers.rst:1186
msgid ""
"Note: this comparison is to ``pkg_resources.parse_version`` as it existed at "
"the time :pep:`440` was written. After the PEP was accepted, setuptools 6.0 "
"and later versions adopted the behaviour described here."
msgstr ""
"Примечание: это сравнение с ``pkg_resources.parse_version`` в том виде, в "
"котором он существовал на момент написания :pep:`440`. После того, как PEP "
"был принят, setuptools 6.0 и более поздние версии приняли описанное здесь "
"поведение."

#: ../source/specifications/version-specifiers.rst:1190
msgid ""
"Local versions sort differently, this specification requires that they sort "
"as greater than the same version without a local version, whereas "
"``pkg_resources.parse_version`` considers it a pre-release marker."
msgstr ""
"Локальные версии сортируются по-разному, эта спецификация требует, чтобы они "
"сортировались как большие, чем та же версия без локальной версии, в то время "
"как ``pkg_resources.parse_version`` считает это маркером предрелизности."

#: ../source/specifications/version-specifiers.rst:1194
msgid ""
"This specification purposely restricts the syntax which constitutes a valid "
"version while ``pkg_resources.parse_version`` attempts to provide some "
"meaning from *any* arbitrary string."
msgstr ""
"Эта спецификация намеренно ограничивает синтаксис, который представляет "
"собой правильную версию, в то время как ``pkg_resources.parse_version`` "
"пытается получить некоторое значение из *любой* произвольной строки."

#: ../source/specifications/version-specifiers.rst:1198
msgid ""
"``pkg_resources.parse_version`` allows arbitrarily deeply nested version "
"signifiers like ``1.0.dev1.post1.dev5``. This specification however allows "
"only a single use of each type and they must exist in a certain order."
msgstr ""
"``pkg_resources.parse_version`` позволяет произвольно глубоко вложенные "
"указатели версий, такие как ``1.0.dev1.post1.dev5``. Однако эта спецификация "
"допускает только одно использование каждого типа, и они должны существовать "
"в определенном порядке."

#: ../source/specifications/version-specifiers.rst:1207
msgid "Appendix: Parsing version strings with regular expressions"
msgstr "Приложение: Разбор строк версий с помощью регулярных выражений"

#: ../source/specifications/version-specifiers.rst:1209
msgid ""
"As noted earlier in the :ref:`public-version-identifiers` section, published "
"version identifiers SHOULD use the canonical format. This section provides "
"regular expressions that can be used to test whether a version is already in "
"that form, and if it's not, extract the various components for subsequent "
"normalization."
msgstr ""
"Как отмечалось ранее в разделе :ref:`public-version-identifiers`, "
"идентификаторы опубликованных версий ДОЛЖНЫ использовать канонический "
"формат. В этом разделе приведены регулярные выражения, которые можно "
"использовать для проверки того, имеет ли версия уже такую форму, и, если "
"нет, извлечь различные компоненты для последующей нормализации."

#: ../source/specifications/version-specifiers.rst:1215
msgid ""
"To test whether a version identifier is in the canonical format, you can use "
"the following function:"
msgstr ""
"Чтобы проверить, соответствует ли идентификатор версии каноническому "
"формату, можно воспользоваться следующей функцией:"

#: ../source/specifications/version-specifiers.rst:1224
msgid ""
"To extract the components of a version identifier, use the following regular "
"expression (as defined by the `packaging <https://github.com/pypa/"
"packaging>`_ project):"
msgstr ""
"Чтобы извлечь компоненты идентификатора версии, используйте следующее "
"регулярное выражение (как определено в проекте `packaging <https://github."
"com/pypa/packaging>`_):"

#: ../source/specifications/version-specifiers.rst:1271
msgid "August 2014: This specification was approved through :pep:`440`."
msgstr "Август 2014 г: Эта спецификация была одобрена через :pep:`440`."

#: ../source/specifications/version-specifiers.rst:1272
msgid ""
"May 2025: Clarify that development releases are a form of pre-release when "
"they are handled."
msgstr ""

#: ../source/specifications/virtual-environments.rst:6
msgid "Python Virtual Environments"
msgstr "Виртуальные среды Python"

#: ../source/specifications/virtual-environments.rst:8
msgid ""
"For Python 3.3 and later versions, :pep:`405` introduced interpreter level "
"support for the concept of \"Python Virtual Environments\". Each virtual "
"environment has its own Python binary (allowing creation of environments "
"with various Python versions) and can have its own independent set of "
"installed Python packages in its site directories, but shares the standard "
"library with the base installed Python. While the concept of virtual "
"environments existed prior to this update, there was no previously "
"standardised mechanism for declaring or discovering them."
msgstr ""
"Для Python 3.3 и более поздних версий в :pep:`405` появилась поддержка "
"концепции \"виртуальных окружений Python\" на уровне интерпретатора. Каждая "
"виртуальная среда имеет свой собственный двоичный файл Python (что позволяет "
"создавать среды с различными версиями Python) и может иметь свой собственный "
"независимый набор установленных пакетов Python в каталогах сайта, но "
"разделяет стандартную библиотеку с базовым установленным Python. Хотя "
"концепция виртуальных сред существовала и до этого обновления, ранее не было "
"стандартизированного механизма для их объявления или обнаружения."

#: ../source/specifications/virtual-environments.rst:18
msgid "Runtime detection of virtual environments"
msgstr "Обнаружение виртуальных сред во время выполнения"

#: ../source/specifications/virtual-environments.rst:20
msgid ""
"At runtime, virtual environments can be identified by virtue of :py:data:"
"`sys.prefix` (the filesystem location of the running interpreter) having a "
"different value from :py:data:`sys.base_prefix` (the default filesystem "
"location of the standard library directories)."
msgstr ""
"Во время выполнения виртуальные среды можно определить по тому, что "
"значение :py:data:`sys.prefix` (расположение файловой системы запущенного "
"интерпретатора) отличается от значения :py:data:`sys.base_prefix` "
"(расположение файловой системы по умолчанию для каталогов стандартной "
"библиотеки)."

#: ../source/specifications/virtual-environments.rst:25
msgid ""
":ref:`venv-explanation` in the Python standard library documentation for "
"the :py:mod:`venv` module covers this along with the concept of "
"\"activating\" a virtual environment in an interactive operating system "
"shell (this activation step is optional and hence the changes it makes can't "
"be reliably used to detect whether a Python program is running in a virtual "
"environment or not)."
msgstr ""
":ref:`venv-explanation` в документации по стандартной библиотеке Python для "
"модуля :py:mod:`venv` рассказывает об этом, а также о концепции "
"\"активации\" виртуальной среды в интерактивной оболочке операционной "
"системы (этот шаг активации необязателен, и поэтому изменения, которые он "
"вносит, не могут быть надежно использованы для определения того, запущена ли "
"программа Python в виртуальной среде или нет)."

#: ../source/specifications/virtual-environments.rst:33
msgid "Declaring installation environments as Python virtual environments"
msgstr "Объявление сред установки виртуальными средами Python"

#: ../source/specifications/virtual-environments.rst:35
msgid ""
"As described in :pep:`405`, a Python virtual environment in its simplest "
"form consists of nothing more than a copy or symlink of the Python binary "
"accompanied by a ``site-packages`` directory and a ``pyvenv.cfg`` file with "
"a ``home`` key that indicates where to find the Python standard library "
"modules."
msgstr ""
"Как описано в :pep:`405`, виртуальная среда Python в своей простейшей форме "
"состоит не более чем из копии или симлинка двоичного файла Python, "
"сопровождаемого каталогом ``ite-packages`` и файлом ``pyvenv.cfg`` с ключом "
"``home``, указывающим, где найти модули стандартной библиотеки Python."

#: ../source/specifications/virtual-environments.rst:40
msgid ""
"While designed to meet the needs of the standard :py:mod:`venv` module, this "
"split installation and ``pyvenv.cfg`` file approach can be used by *any* "
"Python installation provider that desires Python-specific tools to be aware "
"that they are already operating in a virtual environment and no further "
"environment nesting is required or desired."
msgstr ""
"Хотя он разработан для удовлетворения потребностей стандартного модуля :py:"
"mod:`venv`, этот подход с раздельной установкой и файлом ``pyvenv.cfg`` "
"может быть использован *любым* поставщиком установки Python, который хочет, "
"чтобы инструменты, специфичные для Python, знали, что они уже работают в "
"виртуальной среде, и дальнейшее вложение среды не требуется или нежелательно."

#: ../source/specifications/virtual-environments.rst:46
msgid ""
"Even in the absence of a ``pyvenv.cfg`` file, any approach (e.g. "
"``sitecustomize.py``, patching the installed Python runtime) that results "
"in :py:data:`sys.prefix` and :py:data:`sys.base_prefix` having different "
"values, while still providing a matching default package installation scheme "
"in :py:mod:`sysconfig`, will be detected and behave as a Python virtual "
"environment."
msgstr ""
"Даже при отсутствии файла ``pyvenv.cfg``, любой подход (например, "
"``ситэкастомайзер.py``, исправление установленной среды исполнения Python), "
"который приводит к тому, что :py: данные:`sys. префикс` и :py: данные:`sys."
"базовый_префикс`` имеют разные значения, но при этом обеспечивает совпадение "
"схемы установки пакетов по умолчанию в :py:mod:`sysconfig``, будет обнаружен "
"и будет вести себя как виртуальная среда Python."

#: ../source/specifications/virtual-environments.rst:56
msgid "May 2012: This specification was approved through :pep:`405`."
msgstr "Май 2012 г: Эта спецификация была одобрена через :pep:`405`."

#: ../source/specifications/well-known-project-urls.rst:5
msgid "Well-known Project URLs in Metadata"
msgstr "Известные URL-адреса проектов в метаданных"

#: ../source/specifications/well-known-project-urls.rst:9
msgid ""
"This document is primarily of interest to metadata *consumers*, who should "
"use the normalization rules and well-known list below to make their "
"presentation of project URLs consistent across the Python ecosystem."
msgstr ""
"Этот документ представляет интерес в первую очередь для *потребителей* "
"метаданных, которые должны использовать правила нормализации и известный "
"список ниже, чтобы сделать представление URL-адресов проектов согласованным "
"во всей экосистеме Python."

#: ../source/specifications/well-known-project-urls.rst:14
msgid ""
"Metadata *producers* (such as build tools and individual package "
"maintainers) may continue to use any labels they please, within the overall "
"``Project-URL`` length restrictions. However, when possible, users are "
"*encouraged* to pick meaningful labels that normalize to well-known labels."
msgstr ""
"Производители *метаданных* (такие как инструменты сборки и отдельные "
"сопровождающие пакетов) могут продолжать использовать любые метки по своему "
"усмотрению, в рамках общих ограничений длины ``Project-URL``. Однако, когда "
"это возможно, пользователям *приветствуется* выбирать значимые метки, "
"которые нормализуются к известным меткам."

#: ../source/specifications/well-known-project-urls.rst:22
msgid ""
"See :ref:`Writing your pyproject.toml - urls <writing-pyproject-toml-urls>` "
"for user-oriented guidance on choosing project URL labels in your package's "
"metadata."
msgstr ""
"Смотрите :ref:`Writing your pyproject.toml - urls <writing-pyproject-toml-"
"urls>` для ориентированного на пользователя руководства по выбору меток URL "
"проекта в метаданных вашего пакета."

#: ../source/specifications/well-known-project-urls.rst:26
msgid "This specification was originally defined in :pep:`753`."
msgstr "Эта спецификация была первоначально определена в :pep:`753`."

#: ../source/specifications/well-known-project-urls.rst:28
msgid ""
":pep:`753` deprecates the :ref:`core-metadata-home-page` and :ref:`core-"
"metadata-download-url` metadata fields in favor of :ref:`core-metadata-"
"project-url`, and defines a normalization and lookup procedure for "
"determining whether a ``Project-URL`` is \"well-known,\" i.e. has the "
"semantics assigned to ``Home-page``, ``Download-URL``, or other common "
"project URLs."
msgstr ""
":pep:`753` упраздняет поля метаданных :ref:`core-metadata-home-page` и :ref:"
"`core-metadata-download-url` в пользу :ref:`core-metadata-project-url`, и "
"определяет процедуру нормализации и поиска для определения того, является ли "
"``Project-URL`` \"хорошо известным\", т.е. имеет семантику, присущую ``Home-"
"page``, ``Download-URL``, или другим распространенным URL проекта."

#: ../source/specifications/well-known-project-urls.rst:35
msgid ""
"This allows indices (such as the Python Package Index) and other downstream "
"metadata consumers to present project URLs in a consistent manner."
msgstr ""
"Это позволяет индексам (таким как Python Package Index) и другим "
"потребителям метаданных представлять URL-адреса проектов в согласованном "
"виде."

#: ../source/specifications/well-known-project-urls.rst:42
msgid "Label normalization"
msgstr "Нормализация меток"

#: ../source/specifications/well-known-project-urls.rst:46
msgid ""
"Label normalization is performed by metadata *consumers*, not metadata "
"producers."
msgstr ""
"Нормализация меток выполняется *потребителями* метаданных, а не "
"производителями метаданных."

#: ../source/specifications/well-known-project-urls.rst:49
msgid ""
"To determine whether a ``Project-URL`` label is \"well-known,\" metadata "
"consumers should normalize the label before comparing it to the :ref:`list "
"of well-known labels <well-known-labels>`."
msgstr ""
"Чтобы определить, является ли метка ``Project-URL`` \"хорошо известной\", "
"потребители метаданных должны нормализовать ее перед сравнением со :ref:"
"`списком хорошо известных меток <well-known-labels>`."

#: ../source/specifications/well-known-project-urls.rst:53
msgid ""
"The normalization procedure for ``Project-URL`` labels is defined by the "
"following Python function:"
msgstr ""
"Процедура нормализации меток ``Project-URL`` определяется следующей функцией "
"Python:"

#: ../source/specifications/well-known-project-urls.rst:65
msgid ""
"In plain language: a label is *normalized* by deleting all ASCII punctuation "
"and whitespace, and then converting the result to lowercase."
msgstr ""
"Простым языком: метка *нормализуется* путем удаления всех знаков препинания "
"и пробельных символов ASCII, а затем преобразуется в строчные буквы."

#: ../source/specifications/well-known-project-urls.rst:68
msgid ""
"The following table shows examples of labels before (raw) and after "
"normalization:"
msgstr ""
"В следующей таблице приведены примеры меток до (сырой) и после нормализации:"

#: ../source/specifications/well-known-project-urls.rst:74
msgid "Raw"
msgstr "Необработанный"

#: ../source/specifications/well-known-project-urls.rst:75
msgid "Normalized"
msgstr "Нормализованный"

#: ../source/specifications/well-known-project-urls.rst:76
msgid "``Homepage``"
msgstr "``Homepage``"

#: ../source/specifications/well-known-project-urls.rst:77
#: ../source/specifications/well-known-project-urls.rst:79
#: ../source/specifications/well-known-project-urls.rst:81
msgid "``homepage``"
msgstr "``homepage``"

#: ../source/specifications/well-known-project-urls.rst:78
msgid "``Home-page``"
msgstr "``Home-page``"

#: ../source/specifications/well-known-project-urls.rst:80
msgid "``Home page``"
msgstr "``Home page``"

#: ../source/specifications/well-known-project-urls.rst:82
msgid "``Change_Log``"
msgstr "``Change_Log``"

#: ../source/specifications/well-known-project-urls.rst:83
msgid "``changelog``"
msgstr "``changelog``"

#: ../source/specifications/well-known-project-urls.rst:84
msgid "``What's New?``"
msgstr "``What's New?``"

#: ../source/specifications/well-known-project-urls.rst:85
msgid "``whatsnew``"
msgstr "``whatsnew``"

#: ../source/specifications/well-known-project-urls.rst:86
#: ../source/specifications/well-known-project-urls.rst:87
msgid "``github``"
msgstr "``github``"

#: ../source/specifications/well-known-project-urls.rst:92
msgid "Well-known labels"
msgstr "Известные лейблы"

#: ../source/specifications/well-known-project-urls.rst:96
msgid ""
"The list of well-known labels is a living standard, maintained as part of "
"this document."
msgstr ""
"Список известных лейблов - это живой стандарт, поддерживаемый в рамках "
"данного документа."

#: ../source/specifications/well-known-project-urls.rst:99
msgid ""
"The following table lists labels that are well-known for the purpose of "
"specializing the presentation of ``Project-URL`` metadata:"
msgstr ""
"В следующей таблице перечислены метки, которые хорошо известны для целей "
"специализации представления метаданных ``Project-URL``:"

#: ../source/specifications/well-known-project-urls.rst:105
msgid "Label (Human-readable equivalent)"
msgstr "Этикетка (человекочитаемый эквивалент)"

#: ../source/specifications/well-known-project-urls.rst:107
msgid "Aliases"
msgstr "Псевдонимы"

#: ../source/specifications/well-known-project-urls.rst:108
msgid "``homepage`` (Homepage)"
msgstr "``Домашняя страница`` (Домашняя страница)"

#: ../source/specifications/well-known-project-urls.rst:109
msgid "The project's home page"
msgstr "Домашняя страница проекта"

#: ../source/specifications/well-known-project-urls.rst:110
#: ../source/specifications/well-known-project-urls.rst:116
#: ../source/specifications/well-known-project-urls.rst:122
msgid "*(none)*"
msgstr "*(никто)*"

#: ../source/specifications/well-known-project-urls.rst:111
msgid "``source`` (Source Code)"
msgstr "``Источник`` (Исходный код)"

#: ../source/specifications/well-known-project-urls.rst:112
msgid "The project's hosted source code or repository"
msgstr "Размещенный исходный код проекта или репозиторий"

#: ../source/specifications/well-known-project-urls.rst:113
msgid "``repository``, ``sourcecode``, ``github``"
msgstr "``repository``, ``sourcecode``, ``github``"

#: ../source/specifications/well-known-project-urls.rst:114
msgid "``download`` (Download)"
msgstr "``Загрузить`` (Загрузка)"

#: ../source/specifications/well-known-project-urls.rst:115
msgid ""
"A download URL for the current distribution, equivalent to ``Download-URL``"
msgstr ""
"URL-адрес загрузки текущего дистрибутива, эквивалентный ``Скачать-URL``"

#: ../source/specifications/well-known-project-urls.rst:117
msgid "``changelog`` (Changelog)"
msgstr "``changelog`` (журнал изменений)"

#: ../source/specifications/well-known-project-urls.rst:118
msgid "The project's comprehensive changelog"
msgstr "Полный журнал изменений проекта"

#: ../source/specifications/well-known-project-urls.rst:119
msgid "``changes``, ``whatsnew``, ``history``"
msgstr "``changes``, ``whatsnew``, ``history``"

#: ../source/specifications/well-known-project-urls.rst:120
msgid "``releasenotes`` (Release Notes)"
msgstr "``releasenotes`` (Заметки о выпуске)"

#: ../source/specifications/well-known-project-urls.rst:121
msgid "The project's curated release notes"
msgstr "Примечания к выпуску проекта"

#: ../source/specifications/well-known-project-urls.rst:123
msgid "``documentation`` (Documentation)"
msgstr "``документация`` (Документация)"

#: ../source/specifications/well-known-project-urls.rst:124
msgid "The project's online documentation"
msgstr "Онлайн-документация проекта"

#: ../source/specifications/well-known-project-urls.rst:125
msgid "``docs``"
msgstr "``docs``"

#: ../source/specifications/well-known-project-urls.rst:126
msgid "``issues`` (Issue Tracker)"
msgstr "``issues`` (Трекер проблем)"

#: ../source/specifications/well-known-project-urls.rst:127
msgid "The project's bug tracker"
msgstr "Трекер ошибок проекта"

#: ../source/specifications/well-known-project-urls.rst:128
msgid "``bugs``, ``issue``, ``tracker``, ``issuetracker``, ``bugtracker``"
msgstr "``bugs``, ``issue``, ``tracker``, ``issuetracker``, ``bugtracker``"

#: ../source/specifications/well-known-project-urls.rst:129
msgid "``funding`` (Funding)"
msgstr "``финансирование`` (Финансирование)"

#: ../source/specifications/well-known-project-urls.rst:130
msgid "Funding Information"
msgstr "Информация о финансировании"

#: ../source/specifications/well-known-project-urls.rst:131
msgid "``sponsor``, ``donate``, ``donation``"
msgstr "``спонсор``, ``пожертвовать``, ``пожертвование``"

#: ../source/specifications/well-known-project-urls.rst:133
msgid ""
"Package metadata consumers may choose to render aliased labels the same as "
"their \"parent\" well known label, or further specialize them."
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:137
#, fuzzy
msgid "Example behavior"
msgstr "Пример"

#: ../source/specifications/well-known-project-urls.rst:139
msgid ""
"The following shows the flow of project URL metadata from ``pyproject.toml`` "
"to core metadata to a potential index presentation:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:142
msgid "Example project URLs in standard configuration"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:151
#, fuzzy
msgid "Core metadata representation"
msgstr "Спецификации основных метаданных"

#: ../source/specifications/well-known-project-urls.rst:159
msgid "Potential rendering"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:167
msgid ""
"Observe that the core metadata appears in the form provided by the user "
"(since metadata *producers* do not perform normalization), but the metadata "
"*consumer* normalizes and identifies appropriate human-readable equivalents "
"based on the normalized form:"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:172
msgid "``Home page`` becomes ``homepage``, which is rendered as ``Homepage``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:173
msgid ""
"``DOCUMENTATION`` becomes ``documentation``, which is rendered as "
"``Documentation``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:174
msgid ""
"``Repository`` becomes ``repository``, which is rendered as ``Source Code``"
msgstr ""

#: ../source/specifications/well-known-project-urls.rst:175
msgid ""
"``GitHub`` becomes ``github``, which is rendered as ``Source Code (GitHub)`` "
"(as a specialization of ``Source Code``)"
msgstr ""

#: ../source/support.rst:3
msgid "How to Get Support"
msgstr "Как получить поддержку"

#: ../source/support.rst:5
msgid ""
"For support related to a specific project, see the links on the :doc:"
"`Projects <key_projects>` page."
msgstr ""
"Для получения поддержки, связанной с конкретным проектом, смотрите ссылки на "
"странице :doc:`Projects <key_projects>`."

#: ../source/support.rst:8
msgid ""
"For something more general, or when you're just not sure, please `open an "
"issue <https://github.com/pypa/packaging-problems/issues/new?"
"template=general_issue.yml>`_ on the `packaging-problems <https://github.com/"
"pypa/packaging-problems>`_ repository on GitHub."
msgstr ""
"Для чего-то более общего, или если вы просто не уверены, пожалуйста, "
"`откройте проблему <https://github.com/pypa/packaging-problems/issues/new?"
"template=general_issue.yml>`_ в репозитории `packaging-problems <https://"
"github.com/pypa/packaging-problems>`_ на GitHub."

#: ../source/tutorials/creating-documentation.rst:4
msgid "Creating documentation"
msgstr "Создание документации"

#: ../source/tutorials/creating-documentation.rst:6
msgid ""
"This tutorial has been removed since it is not related to packaging and was "
"unmaintained. Please see the `Sphinx tutorial <https://www.sphinx-doc.org/en/"
"master/tutorial>`_ instead."
msgstr ""
"Это руководство было удалено, поскольку оно не имеет отношения к упаковке и "
"не поддерживается. Пожалуйста, обратитесь к учебнику `Sphinx <https://www."
"sphinx-doc.org/en/master/tutorial>`_ вместо этого."

#: ../source/tutorials/index.rst:4
msgid ""
"**Tutorials** are opinionated step-by-step guides to help you get familiar "
"with packaging concepts. For more detailed information on specific packaging "
"topics, see :doc:`/guides/index`."
msgstr ""
"**Учебники** - это пошаговые руководства, которые помогут вам ознакомиться с "
"концепциями упаковки. Более подробную информацию по конкретным темам "
"упаковки можно найти в :doc:`/guides/index`."

#: ../source/tutorials/installing-packages.rst:5
msgid "Installing Packages"
msgstr "Установка Пакетов"

#: ../source/tutorials/installing-packages.rst:7
msgid ""
"This section covers the basics of how to install Python :term:`packages "
"<Distribution Package>`."
msgstr ""
"В этом разделе рассматриваются основы установки Python :term:`packages "
"<Distribution Package>`."

#: ../source/tutorials/installing-packages.rst:10
msgid ""
"It's important to note that the term \"package\" in this context is being "
"used to describe a bundle of software to be installed (i.e. as a synonym for "
"a :term:`distribution <Distribution Package>`). It does not refer to the "
"kind of :term:`package <Import Package>` that you import in your Python "
"source code (i.e. a container of modules). It is common in the Python "
"community to refer to a :term:`distribution <Distribution Package>` using "
"the term \"package\".  Using the term \"distribution\" is often not "
"preferred, because it can easily be confused with a Linux distribution, or "
"another larger software distribution like Python itself."
msgstr ""
"Важно отметить, что термин \"пакет\" в данном контексте используется для "
"описания пакета программного обеспечения, подлежащего установке (т.е. как "
"синоним :term:`distribution <Distribution Package>`). Он не относится к "
"типу :term:`package <Import Package>`, который вы импортируете в исходный "
"код Python (т.е. контейнер модулей). В сообществе Python принято ссылаться "
"на :term:`distribution <Distribution Package>`, используя термин \"пакет\".  "
"Использование термина \"дистрибутив\" часто не является предпочтительным, "
"поскольку его легко спутать с дистрибутивом Linux или другим большим "
"дистрибутивом программного обеспечения, таким как сам Python."

#: ../source/tutorials/installing-packages.rst:24
msgid "Requirements for Installing Packages"
msgstr "Требования к установке пакетов"

#: ../source/tutorials/installing-packages.rst:26
msgid ""
"This section describes the steps to follow before installing other Python "
"packages."
msgstr ""
"В этом разделе описаны шаги, которые необходимо выполнить перед установкой "
"других пакетов Python."

#: ../source/tutorials/installing-packages.rst:31
msgid "Ensure you can run Python from the command line"
msgstr "Убедитесь, что вы можете запускать Python из командной строки"

#: ../source/tutorials/installing-packages.rst:33
msgid ""
"Before you go any further, make sure you have Python and that the expected "
"version is available from your command line. You can check this by running:"
msgstr ""
"Прежде чем продолжить, убедитесь, что у вас есть Python и что ожидаемая "
"версия доступна в командной строке. Вы можете проверить это, выполнив "
"команду:"

#: ../source/tutorials/installing-packages.rst:49
msgid ""
"You should get some output like ``Python 3.6.3``. If you do not have Python, "
"please install the latest 3.x version from `python.org`_ or refer to the :"
"ref:`Installing Python <python-guide:installation>` section of the "
"Hitchhiker's Guide to Python."
msgstr ""
"Вы должны получить результат вроде ``Python 3.6.3``. Если у вас нет Python, "
"пожалуйста, установите последнюю версию 3.x с сайта `python.org`_ или "
"обратитесь к разделу :ref:`Установка Python <python-guide:installation>` "
"руководства \"Путеводитель автостопщика по Питону\"."

#: ../source/tutorials/installing-packages.rst:53
msgid "If you're a newcomer and you get an error like this:"
msgstr "Если вы новичок и получаете ошибку, подобную этой:"

#: ../source/tutorials/installing-packages.rst:62
msgid ""
"It's because this command and other suggested commands in this tutorial are "
"intended to be run in a *shell* (also called a *terminal* or *console*). See "
"the Python for Beginners `getting started tutorial`_ for an introduction to "
"using your operating system's shell and interacting with Python."
msgstr ""
"Это связано с тем, что данная команда и другие команды, предложенные в этом "
"руководстве, предназначены для запуска в *оболочке* (также называемой "
"*терминалом* или *консолью*). О том, как использовать оболочку операционной "
"системы и взаимодействовать с Python, читайте в учебнике Python для "
"начинающих `Начало работы`_."

#: ../source/tutorials/installing-packages.rst:68
msgid ""
"If you're using an enhanced shell like IPython or the Jupyter notebook, you "
"can run system commands like those in this tutorial by prefacing them with a "
"``!`` character:"
msgstr ""
"Если вы используете расширенную оболочку, такую как IPython или блокнот "
"Jupyter, вы можете запускать системные команды, подобные тем, что приведены "
"в этом руководстве, предваряя их символом ``!``:"

#: ../source/tutorials/installing-packages.rst:78
msgid ""
"It's recommended to write ``{sys.executable}`` rather than plain ``python`` "
"in order to ensure that commands are run in the Python installation matching "
"the currently running notebook (which may not be the same Python "
"installation that the ``python`` command refers to)."
msgstr ""
"Рекомендуется писать ``{sys.executable}``, а не просто ``python``, чтобы "
"обеспечить выполнение команд в установке Python, соответствующей текущему "
"запущенному блокноту (которая может быть не той установкой Python, на "
"которую ссылается команда ``python``)."

#: ../source/tutorials/installing-packages.rst:83
msgid ""
"Due to the way most Linux distributions are handling the Python 3 migration, "
"Linux users using the system Python without creating a virtual environment "
"first should replace the ``python`` command in this tutorial with "
"``python3`` and the ``python -m pip`` command with ``python3 -m pip --"
"user``. Do *not* run any of the commands in this tutorial with ``sudo``: if "
"you get a permissions error, come back to the section on creating virtual "
"environments, set one up, and then continue with the tutorial as written."
msgstr ""
"В связи с тем, что большинство дистрибутивов Linux работают с миграцией "
"Python 3, пользователям Linux, использующим системный Python без создания "
"виртуальной среды, следует заменить команду ``python`` в этом руководстве на "
"``python3``, а команду ``python -m pip`` на ``python3 -m pip --user``. Не "
"запускайте ни одну из команд в этом руководстве с ``sudo`: если вы получите "
"ошибку разрешения, вернитесь к разделу о создании виртуальных сред, "
"настройте их, а затем продолжите руководство, как написано."

#: ../source/tutorials/installing-packages.rst:95
msgid "Ensure you can run pip from the command line"
msgstr "Убедитесь, что вы можете запустить pip из командной строки"

#: ../source/tutorials/installing-packages.rst:97
msgid ""
"Additionally, you'll need to make sure you have :ref:`pip` available. You "
"can check this by running:"
msgstr ""
"Кроме того, вам нужно убедиться, что у вас доступен :ref:`pip`. Вы можете "
"проверить это, выполнив команду:"

#: ../source/tutorials/installing-packages.rst:112
msgid ""
"If you installed Python from source, with an installer from `python.org`_, "
"or via `Homebrew`_ you should already have pip. If you're on Linux and "
"installed using your OS package manager, you may have to install pip "
"separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""
"Если вы установили Python из исходников, с помощью инсталлятора с сайта "
"`python.org`_ или через `Homebrew`_, у вас уже должен быть pip. Если вы "
"работаете в Linux и устанавливали с помощью менеджера пакетов вашей ОС, вам, "
"возможно, придется установить pip отдельно, см. :doc:`/guides/installing-"
"using-linux-tools`."

#: ../source/tutorials/installing-packages.rst:119
msgid ""
"If ``pip`` isn't already installed, then first try to bootstrap it from the "
"standard library:"
msgstr ""
"Если ``pip`` еще не установлен, то сначала попробуйте загрузить его из "
"стандартной библиотеки:"

#: ../source/tutorials/installing-packages.rst:134
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr "Если это все еще не позволяет, запустите ``python -m pip``:"

#: ../source/tutorials/installing-packages.rst:136
msgid ""
"Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""
"Безопасная загрузка `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"

#: ../source/tutorials/installing-packages.rst:139
msgid ""
"Run ``python get-pip.py``. [2]_  This will install or upgrade pip. "
"Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're "
"not installed already."
msgstr ""
"Запустите ``python get-pip.py``. [2]_ Это приведет к установке или "
"обновлению pip. Кроме того, будут установлены :ref:`setuptools` и :ref:"
"`wheel`, если они еще не установлены."

#: ../source/tutorials/installing-packages.rst:145
msgid ""
"Be cautious if you're using a Python install that's managed by your "
"operating system or another package manager. get-pip.py does not coordinate "
"with those tools, and may leave your system in an inconsistent state. You "
"can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/"
"local`` which is designed for locally-installed software."
msgstr ""
"Будьте осторожны, если вы используете установку Python, управляемую "
"операционной системой или другим менеджером пакетов. get-pip.py не "
"координируется с этими инструментами и может оставить вашу систему в "
"несовместимом состоянии. Вы можете использовать ``python get-pip.py --"
"prefix=/usr/local/`` для установки в ``/usr/local``, который предназначен "
"для локально установленного программного обеспечения."

#: ../source/tutorials/installing-packages.rst:154
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr ""
"Убедитесь, что pip, setuptools и wheel находятся в актуальном состоянии"

#: ../source/tutorials/installing-packages.rst:156
msgid ""
"While ``pip`` alone is sufficient to install from pre-built binary archives, "
"up to date copies of the ``setuptools`` and ``wheel`` projects are useful to "
"ensure you can also install from source archives:"
msgstr ""
"Хотя одного ``pip`` достаточно для установки из предварительно собранных "
"бинарных архивов, актуальные копии проектов ``setuptools`` и ``wheel`` "
"полезны для обеспечения возможности установки из исходных архивов:"

#: ../source/tutorials/installing-packages.rst:173
msgid "Optionally, create a virtual environment"
msgstr "По желанию создайте виртуальную среду"

#: ../source/tutorials/installing-packages.rst:175
msgid ""
"See :ref:`section below <Creating and using Virtual Environments>` for "
"details, but here's the basic :doc:`venv <python:library/venv>` [3]_ command "
"to use on a typical Linux system:"
msgstr ""
"Подробности см. в :ref:`разделе ниже <Создание и использование виртуальных "
"сред>`, а вот основная :doc:`venv <python:library/venv>` [3]_ команда для "
"использования в типичной системе Linux:"

#: ../source/tutorials/installing-packages.rst:192
msgid ""
"This will create a new virtual environment in the ``tutorial_env`` "
"subdirectory, and configure the current shell to use it as the default "
"``python`` environment."
msgstr ""
"Это создаст новое виртуальное окружение в подкаталоге ``tutorial_env`` и "
"настроит текущую оболочку на использование его в качестве окружения по "
"умолчанию ``python``."

#: ../source/tutorials/installing-packages.rst:199
msgid "Creating Virtual Environments"
msgstr "Создание виртуальных окружений"

#: ../source/tutorials/installing-packages.rst:201
msgid ""
"Python \"Virtual Environments\" allow Python :term:`packages <Distribution "
"Package>` to be installed in an isolated location for a particular "
"application, rather than being installed globally. If you are looking to "
"safely install global command line tools, see :doc:`/guides/installing-stand-"
"alone-command-line-tools`."
msgstr ""
"Виртуальные среды Python позволяют устанавливать Python :term:`packages "
"<Distribution Package>` в изолированное место для конкретного приложения, а "
"не устанавливать глобально. Если вы хотите безопасно установить глобальные "
"инструменты командной строки, смотрите :doc:`/guides/installing-stand-alone-"
"command-line-tools`."

#: ../source/tutorials/installing-packages.rst:207
msgid ""
"Imagine you have an application that needs version 1 of LibFoo, but another "
"application requires version 2. How can you use both these applications? If "
"you install everything into /usr/lib/python3.6/site-packages (or whatever "
"your platform’s standard location is), it’s easy to end up in a situation "
"where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""
"Представьте, что у вас есть приложение, которому нужна версия 1 LibFoo, а "
"другому приложению требуется версия 2. Как вы можете использовать оба этих "
"приложения? Если вы установите все в /usr/lib/python3.6/site-packages (или в "
"любое другое стандартное место вашей платформы), легко попасть в ситуацию, "
"когда вы непреднамеренно обновите приложение, которое не должно быть "
"обновлено."

#: ../source/tutorials/installing-packages.rst:213
msgid ""
"Or more generally, what if you want to install an application and leave it "
"be? If an application works, any change in its libraries or the versions of "
"those libraries can break the application."
msgstr ""
"А если вы хотите установить приложение и не трогать его? Если приложение "
"работает, любое изменение в его библиотеках или их версиях может привести к "
"поломке приложения."

#: ../source/tutorials/installing-packages.rst:217
msgid ""
"Also, what if you can’t install :term:`packages <Distribution Package>` into "
"the global site-packages directory? For instance, on a shared host."
msgstr ""
"Кроме того, что делать, если вы не можете установить :term:`packages "
"<Distribution Package>` в глобальный каталог site-packages? Например, на "
"общем хосте."

#: ../source/tutorials/installing-packages.rst:220
msgid ""
"In all these cases, virtual environments can help you. They have their own "
"installation directories and they don’t share libraries with other virtual "
"environments."
msgstr ""
"Во всех этих случаях вам могут помочь виртуальные среды. У них есть "
"собственные каталоги установки, и они не обмениваются библиотеками с другими "
"виртуальными средами."

#: ../source/tutorials/installing-packages.rst:224
msgid ""
"Currently, there are two common tools for creating Python virtual "
"environments:"
msgstr ""
"В настоящее время существует два распространенных инструмента для создания "
"виртуальных сред Python:"

#: ../source/tutorials/installing-packages.rst:226
msgid ""
":doc:`venv <python:library/venv>` is available by default in Python 3.3 and "
"later, and installs :ref:`pip` into created virtual environments in Python "
"3.4 and later (Python versions prior to 3.12 also installed :ref:"
"`setuptools`)."
msgstr ""
": док:`venv <python: библиотека/venv>` доступен по умолчанию в Python 3.3 и "
"выше, и устанавливает : ссылка:`pip` в созданные виртуальные среды в Python "
"3.4 и выше (версии Python до 3.12 также устанавливали :ссылка:`setuptools`)."

#: ../source/tutorials/installing-packages.rst:229
#, fuzzy
#| msgid ""
#| ":ref:`virtualenv` needs to be installed separately, but supports Python "
#| "2.7+ and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` "
#| "are always installed into created virtual environments by default "
#| "(regardless of Python version)."
msgid ""
":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ "
"and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are "
"installed into created virtual environments by default. Note that "
"``setuptools`` is no longer included by default starting with Python 3.12 "
"(and ``virtualenv`` follows this behavior)."
msgstr ""
":ref:`virtualenv` нужно устанавливать отдельно, но он поддерживает Python "
"2.7+ и Python 3.3+, а :ref:`pip`, :ref:`setuptools` и :ref:`wheel` всегда "
"устанавливаются в созданные виртуальные среды по умолчанию (независимо от "
"версии Python)."

#: ../source/tutorials/installing-packages.rst:234
msgid "The basic usage is like so:"
msgstr "Основное использование выглядит следующим образом:"

#: ../source/tutorials/installing-packages.rst:236
msgid "Using :doc:`venv <python:library/venv>`:"
msgstr "Использование :doc:`venv <python:library/venv>`:"

#: ../source/tutorials/installing-packages.rst:252
msgid "Using :ref:`virtualenv`:"
msgstr "Использование :ref:`virtualenv`:"

#: ../source/tutorials/installing-packages.rst:268
msgid ""
"For more information, see the :doc:`venv <python:library/venv>` docs or the :"
"doc:`virtualenv <virtualenv:index>` docs."
msgstr ""
"Дополнительную информацию можно найти в документах :doc:`venv <python:"
"library/venv>` или :doc:`virtualenv <virtualenv:index>`."

#: ../source/tutorials/installing-packages.rst:271
msgid ""
"The use of :command:`source` under Unix shells ensures that the virtual "
"environment's variables are set within the current shell, and not in a "
"subprocess (which then disappears, having no useful effect)."
msgstr ""
"Использование :command:`source` в оболочках Unix гарантирует, что переменные "
"виртуального окружения будут установлены в текущей оболочке, а не в "
"подпроцессе (который затем исчезает, не оказывая никакого полезного "
"воздействия)."

#: ../source/tutorials/installing-packages.rst:276
msgid ""
"In both of the above cases, Windows users should *not* use the :command:"
"`source` command, but should rather run the :command:`activate` script "
"directly from the command shell like so:"
msgstr ""
"В обоих случаях пользователям Windows не следует использовать команду :"
"command:`source`, а лучше запустить скрипт :command:`activate` "
"непосредственно из командной оболочки, как показано выше:"

#: ../source/tutorials/installing-packages.rst:286
msgid ""
"Managing multiple virtual environments directly can become tedious, so the :"
"ref:`dependency management tutorial <managing-dependencies>` introduces a "
"higher level tool, :ref:`Pipenv`, that automatically manages a separate "
"virtual environment for each project and application that you work on."
msgstr ""
"Непосредственное управление несколькими виртуальными средами может стать "
"утомительным, поэтому в учебнике по управлению зависимостями <managing-"
"dependencies>` представлен инструмент более высокого уровня, :ref:`Pipenv`, "
"который автоматически управляет отдельной виртуальной средой для каждого "
"проекта и приложения, над которым вы работаете."

#: ../source/tutorials/installing-packages.rst:293
msgid "Use pip for Installing"
msgstr "Используйте pip для установки"

#: ../source/tutorials/installing-packages.rst:295
msgid ""
":ref:`pip` is the recommended installer.  Below, we'll cover the most common "
"usage scenarios. For more detail, see the :doc:`pip docs <pip:index>`, which "
"includes a complete :doc:`Reference Guide <pip:cli/index>`."
msgstr ""
":ref:`pip` - это рекомендуемая программа установки.  Ниже мы рассмотрим "
"наиболее распространенные сценарии использования. Более подробную информацию "
"можно найти в :doc:`pip docs <pip:index>`, который включает в себя полное :"
"doc:`Reference Guide <pip:cli/index>`."

#: ../source/tutorials/installing-packages.rst:301
msgid "Installing from PyPI"
msgstr "Установка из PyPI"

#: ../source/tutorials/installing-packages.rst:303
msgid ""
"The most common usage of :ref:`pip` is to install from the :term:`Python "
"Package Index <Python Package Index (PyPI)>` using a :term:`requirement "
"specifier <Requirement Specifier>`. Generally speaking, a requirement "
"specifier is composed of a project name followed by an optional :term:"
"`version specifier <Version Specifier>`.  A full description of the "
"supported specifiers can be found in the :ref:`Version specifier "
"specification <version-specifiers>`. Below are some examples."
msgstr ""
"Чаще всего :ref:`pip` используется для установки из индекса пакетов :term:"
"`Python <Python Package Index (PyPI)>` с помощью спецификатора требований :"
"term:`Requirement Specifier <Requirement Specifier>`. Вообще говоря, "
"спецификатор требований состоит из имени проекта, за которым следует "
"необязательный :term:`спецификатор версии <Version Specifier>`.  Полное "
"описание поддерживаемых спецификаторов можно найти в спецификации :ref:"
"`Version specifier <version-specifiers>`. Ниже приведены некоторые примеры."

#: ../source/tutorials/installing-packages.rst:311
msgid "To install the latest version of \"SomeProject\":"
msgstr "Чтобы установить последнюю версию \"SomeProject\":"

#: ../source/tutorials/installing-packages.rst:325
msgid "To install a specific version:"
msgstr "Для установки определенной версии:"

#: ../source/tutorials/installing-packages.rst:339
msgid "To install greater than or equal to one version and less than another:"
msgstr "Чтобы установить версию больше или равную одной и меньше другой:"

#: ../source/tutorials/installing-packages.rst:354
msgid ""
"To install a version that's :ref:`compatible <version-specifiers-compatible-"
"release>` with a certain version: [4]_"
msgstr ""
"Чтобы установить версию, которая :ref:`совместима <version-specifiers-"
"compatible-release>` с определенной версией: [4]_"

#: ../source/tutorials/installing-packages.rst:369
msgid ""
"In this case, this means to install any version \"==1.4.*\" version that's "
"also \">=1.4.2\"."
msgstr ""
"В данном случае это означает установку любой версии \"==1.4.*\", которая "
"также \">=1.4.2\"."

#: ../source/tutorials/installing-packages.rst:374
msgid "Source Distributions vs Wheels"
msgstr "Дистрибутивы источников против колес"

#: ../source/tutorials/installing-packages.rst:376
msgid ""
":ref:`pip` can install from either :term:`Source Distributions (sdist) "
"<Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both "
"are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You "
"can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:"
"install_--no-binary>` option."
msgstr ""
":ref:`pip` может устанавливать как из :term:`Source Distributions (sdist) "
"<Источниковый дистрибутив (или \"sdist\")>`, так и из :term:`Wheels "
"<Wheel>`, но если оба присутствуют на PyPI, pip предпочтет совместимый :term:"
"`wheel <Wheel>`. Вы можете переопределить поведение pip по умолчанию, "
"например, используя его опцию :ref:`--no-binary <pip:install_--no-binary>`."

#: ../source/tutorials/installing-packages.rst:382
msgid ""
":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution "
"Package>` format that provides faster installation compared to :term:`Source "
"Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when "
"a project contains compiled extensions."
msgstr ""
":term:`Колеса <Wheel>` - это предварительно собранный :term:`дистрибутив "
"<Distribution Package>` формата, который обеспечивает более быструю "
"установку по сравнению с :term:`Source Distributions (sdist) <Source "
"Distribution (или \"sdist\")>`, особенно когда проект содержит "
"скомпилированные расширения."

#: ../source/tutorials/installing-packages.rst:387
msgid ""
"If :ref:`pip` does not find a wheel to install, it will locally build a "
"wheel and cache it for future installs, instead of rebuilding the source "
"distribution in the future."
msgstr ""
"Если :ref:`pip` не находит колеса для установки, он локально собирает колесо "
"и кэширует его для будущих установок, вместо того, чтобы пересобирать "
"исходный дистрибутив в будущем."

#: ../source/tutorials/installing-packages.rst:395
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""
"Обновление уже установленного ``SomeProject`` до последней версии из PyPI."

#: ../source/tutorials/installing-packages.rst:412
msgid "Installing to the User Site"
msgstr "Установка в пользовательский каталог :file:`site`"

#: ../source/tutorials/installing-packages.rst:414
msgid ""
"To install :term:`packages <Distribution Package>` that are isolated to the "
"current user, use the ``--user`` flag:"
msgstr ""
"Чтобы установить :term:`пакеты <Distribution Package>`, которые изолированы "
"от текущего пользователя, используйте флаг ``--user``:"

#: ../source/tutorials/installing-packages.rst:429
msgid ""
"For more information see the `User Installs <https://pip.pypa.io/en/latest/"
"user_guide/#user-installs>`_ section from the pip docs."
msgstr ""
"Для получения дополнительной информации смотрите раздел `User Installs "
"<https://pip.pypa.io/en/latest/user_guide/#user-installs>`_ из документации "
"pip."

#: ../source/tutorials/installing-packages.rst:433
msgid ""
"Note that the ``--user`` flag has no effect when inside a virtual "
"environment - all installation commands will affect the virtual environment."
msgstr ""
"Обратите внимание, что флаг ``--user`` не влияет на виртуальную среду - все "
"команды установки будут влиять на виртуальную среду."

#: ../source/tutorials/installing-packages.rst:436
msgid ""
"If ``SomeProject`` defines any command-line scripts or console entry points, "
"``--user`` will cause them to be installed inside the `user base`_'s binary "
"directory, which may or may not already be present in your shell's :envvar:"
"`PATH`.  (Starting in version 10, pip displays a warning when installing any "
"scripts to a directory outside :envvar:`PATH`.)  If the scripts are not "
"available in your shell after installation, you'll need to add the directory "
"to your :envvar:`PATH`:"
msgstr ""
"Если ``SomeProject`` определяет какие-либо скрипты командной строки или "
"консольные точки входа, ``--user`` заставит их быть установленными в "
"бинарную директорию ``user base`_, которая может присутствовать или не "
"присутствовать в :envvar:`PATH`` вашей оболочки.  (Начиная с версии 10, pip "
"выводит предупреждение при установке любых скриптов в каталог вне :envvar:"
"`PATH`).  Если скрипты недоступны в вашей оболочке после установки, вам "
"нужно добавить каталог в :envvar:`PATH`:"

#: ../source/tutorials/installing-packages.rst:444
msgid ""
"On Linux and macOS you can find the user base binary directory by running "
"``python -m site --user-base`` and adding ``bin`` to the end. For example, "
"this will typically print ``~/.local`` (with ``~`` expanded to the absolute "
"path to your home directory) so you'll need to add ``~/.local/bin`` to your "
"``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""
"В Linux и macOS вы можете найти бинарный каталог пользовательской базы, "
"выполнив команду ``python -m site --user-base`` и добавив ``bin`` в конце. "
"Например, обычно выводится ``~/.local`` (при этом ``~`` расширяется до "
"абсолютного пути к вашей домашней директории), поэтому вам нужно будет "
"добавить ``~/.local/bin`` в ваш ``PATH``.  Вы можете установить свой "
"``PATH`` постоянно, ``изменив ~/.profile``."

#: ../source/tutorials/installing-packages.rst:450
msgid ""
"On Windows you can find the user base binary directory by running ``py -m "
"site --user-site`` and replacing ``site-packages`` with ``Scripts``. For "
"example, this could return ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would "
"need to set your ``PATH`` to include ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your "
"user ``PATH`` permanently in the `Control Panel`_. You may need to log out "
"for the ``PATH`` changes to take effect."
msgstr ""
"В Windows вы можете найти двоичный каталог пользовательской базы, выполнив "
"команду ``py -m site --user-site`` и заменив ``Site-packages`` на "
"``Scripts``. Например, это может вернуть ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages``, так что вам "
"нужно будет установить ваш ``PATH``, чтобы включить ``C:"
"\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. Вы можете "
"установить пользовательский ``PATH'' постоянно в ``Панели управления''. "
"Чтобы изменения ``PATH'' вступили в силу, вам может потребоваться выйти из "
"системы."

#: ../source/tutorials/installing-packages.rst:466
msgid ""
"Install a list of requirements specified in a :ref:`Requirements File <pip:"
"Requirements Files>`."
msgstr ""
"Установка списка требований, указанных в :ref:`Requirements File <pip:"
"Requirements Files>`."

#: ../source/tutorials/installing-packages.rst:482
msgid "Installing from VCS"
msgstr "Установка из СКВ"

#: ../source/tutorials/installing-packages.rst:484
msgid ""
"Install a project from VCS in \"editable\" mode.  For a full breakdown of "
"the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""
"Установка проекта из VCS в \"редактируемом\" режиме.  Полное описание "
"синтаксиса см. в разделе pip по :ref:`VCS Support <pip:VCS Support>`."

#: ../source/tutorials/installing-packages.rst:506
msgid "Installing from other Indexes"
msgstr "Установка из других индексов"

#: ../source/tutorials/installing-packages.rst:508
msgid "Install from an alternate index"
msgstr "Установка из альтернативного индекса"

#: ../source/tutorials/installing-packages.rst:522
msgid ""
"Search an additional index during install, in addition to :term:`PyPI "
"<Python Package Index (PyPI)>`"
msgstr ""
"Поиск дополнительного индекса во время установки, в дополнение к :term:`PyPI "
"<Python Package Index (PyPI)>`"

#: ../source/tutorials/installing-packages.rst:538
msgid "Installing from a local src tree"
msgstr "Установка из локального дерева исходных кодов"

#: ../source/tutorials/installing-packages.rst:541
msgid ""
"Installing from local src in :doc:`Development Mode <setuptools:userguide/"
"development_mode>`, i.e. in such a way that the project appears to be "
"installed, but yet is still editable from the src tree."
msgstr ""
"Установка из локального src в :doc:`Режиме разработки <setuptools:userguide/"
"development_mode>`, т.е. таким образом, что проект кажется установленным, но "
"при этом его можно редактировать из дерева src."

#: ../source/tutorials/installing-packages.rst:558
msgid "You can also install normally from src"
msgstr "Вы также можете установить обычную установку из src"

#: ../source/tutorials/installing-packages.rst:573
msgid "Installing from local archives"
msgstr "Установка из локальных архивов"

#: ../source/tutorials/installing-packages.rst:575
msgid "Install a particular source archive file."
msgstr "Установка определенного файла исходного архива."

#: ../source/tutorials/installing-packages.rst:589
msgid ""
"Install from a local directory containing archives (and don't check :term:"
"`PyPI <Python Package Index (PyPI)>`)"
msgstr ""
"Установите из локальной директории, содержащей архивы (и не проверяйте :term:"
"`PyPI <Python Package Index (PyPI)>`)"

#: ../source/tutorials/installing-packages.rst:609
msgid "Installing from other sources"
msgstr "Установка из других источников"

#: ../source/tutorials/installing-packages.rst:611
msgid ""
"To install from other data sources (for example Amazon S3 storage) you can "
"create a helper application that presents the data in a format compliant "
"with the :ref:`simple repository API <simple-repository-api>`:, and use the "
"``--extra-index-url`` flag to direct pip to use that index."
msgstr ""
"Для установки из других источников данных (например, из хранилища Amazon S3) "
"вы можете создать вспомогательное приложение, представляющее данные в "
"формате, совместимом с :ref:`simple repository API <simple-repository-api>:, "
"и использовать флаг ``--extra-index-url``, чтобы направить pip на "
"использование этого индекса."

#: ../source/tutorials/installing-packages.rst:623
msgid "Installing Prereleases"
msgstr "Установка предварительных выпусков"

#: ../source/tutorials/installing-packages.rst:625
msgid ""
"Find pre-release and development versions, in addition to stable versions.  "
"By default, pip only finds stable versions."
msgstr ""
"Найдите предварительные версии и версии для разработки в дополнение к "
"стабильным версиям.  По умолчанию pip находит только стабильные версии."

#: ../source/tutorials/installing-packages.rst:641
msgid "Installing \"Extras\""
msgstr "Установка \"Дополнений\""

#: ../source/tutorials/installing-packages.rst:643
msgid ""
"Extras are optional \"variants\" of a package, which may include additional "
"dependencies, and thereby enable additional functionality from the package.  "
"If you wish to install an extra for a package which you know publishes one, "
"you can include it in the pip installation command:"
msgstr ""
"Дополнения - это необязательные \"варианты\" пакета, которые могут включать "
"дополнительные зависимости и тем самым обеспечивать дополнительную "
"функциональность пакета.  Если вы хотите установить дополнительное "
"расширение для пакета, который, как вы знаете, его публикует, вы можете "
"включить его в команду установки pip:"

#: ../source/tutorials/installing-packages.rst:666
msgid ""
"\"Secure\" in this context means using a modern browser or a tool like :"
"command:`curl` that verifies SSL certificates when downloading from https "
"URLs."
msgstr ""
"\"Безопасный\" в данном контексте означает использование современного "
"браузера или такого инструмента, как :command:`curl`, который проверяет SSL-"
"сертификаты при загрузке с https-адресов."

#: ../source/tutorials/installing-packages.rst:675
msgid ""
"Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:"
"`virtualenv`) will create virtualenv environments with ``pip`` pre-"
"installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""
"Начиная с Python 3.4, ``venv`` (stdlib-альтернатива :ref:`virtualenv`) будет "
"создавать виртуальные среды virtualenv с предустановленным ``pip``, что "
"делает его равноправной альтернативой :ref:`virtualenv``."

#: ../source/tutorials/installing-packages.rst:680
msgid ""
"The compatible release specifier was accepted in :pep:`440` and support was "
"released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""
"Спецификатор совместимого выпуска был принят в :pep:`440` и поддержка была "
"выпущена в :ref:`setuptools` v8.0 и :ref:`pip` v6.0"

#: ../source/tutorials/managing-dependencies.rst:4
msgid "Managing Application Dependencies"
msgstr "Управление зависимостями приложений"

#: ../source/tutorials/managing-dependencies.rst:6
msgid ""
"The :ref:`package installation tutorial <installing-packages>` covered the "
"basics of getting set up to install and update Python packages."
msgstr ""
"В :ref:`учебнике по установке пакетов <installing-packages>` рассматривались "
"основы настройки установки и обновления пакетов Python."

#: ../source/tutorials/managing-dependencies.rst:9
msgid ""
"However, running these commands interactively can get tedious even for your "
"own personal projects, and things get even more difficult when trying to set "
"up development environments automatically for projects with multiple "
"contributors."
msgstr ""
"Однако интерактивное выполнение этих команд может быть утомительным даже для "
"ваших личных проектов, и все становится еще сложнее, когда вы пытаетесь "
"автоматически настроить среду разработки для проектов с несколькими "
"соавторами."

#: ../source/tutorials/managing-dependencies.rst:13
msgid ""
"This tutorial walks you through the use of :ref:`Pipenv` to manage "
"dependencies for an application. It will show you how to install and use the "
"necessary tools and make strong recommendations on best practices."
msgstr ""
"В этом руководстве вы узнаете, как использовать :ref:`Pipenv` для управления "
"зависимостями в приложении. Оно покажет вам, как установить и использовать "
"необходимые инструменты, а также даст рекомендации по использованию лучших "
"практик."

#: ../source/tutorials/managing-dependencies.rst:17
msgid ""
"Keep in mind that Python is used for a great many different purposes, and "
"precisely how you want to manage your dependencies may change based on how "
"you decide to publish your software. The guidance presented here is most "
"directly applicable to the development and deployment of network services "
"(including web applications), but is also very well suited to managing "
"development and testing environments for any kind of project."
msgstr ""
"Не забывайте, что Python используется для множества различных целей, и то, "
"как именно вы хотите управлять зависимостями, может измениться в зависимости "
"от того, как вы решите опубликовать свое программное обеспечение. "
"Представленное здесь руководство наиболее непосредственно применимо к "
"разработке и развертыванию сетевых сервисов (включая веб-приложения), но оно "
"также очень хорошо подходит для управления средами разработки и тестирования "
"для любого проекта."

#: ../source/tutorials/managing-dependencies.rst:24
msgid ""
"For alternatives, see `Other Tools for Application Dependency Management`_."
msgstr ""
"Альтернативные варианты см. в разделе `Другие инструменты для управления "
"зависимостями приложений`_."

#: ../source/tutorials/managing-dependencies.rst:27
msgid "Installing Pipenv"
msgstr "Установка Pipenv"

#: ../source/tutorials/managing-dependencies.rst:29
msgid ""
":ref:`Pipenv` is a dependency manager for Python projects. If you're "
"familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit "
"to those tools. While :ref:`pip` alone is often sufficient for personal use, "
"Pipenv is recommended for collaborative projects as it's a higher-level tool "
"that simplifies dependency management for common use cases."
msgstr ""
":ref:`Pipenv` - это менеджер зависимостей для Python-проектов. Если вы "
"знакомы с `npm`_ в Node.js или `bundler`_ в Ruby, то он схож по духу с этими "
"инструментами. Хотя для личного использования часто достаточно одного :ref:"
"`pip`, Pipenv рекомендуется для совместных проектов, так как это инструмент "
"более высокого уровня, который упрощает управление зависимостями для общих "
"случаев использования."

#: ../source/tutorials/managing-dependencies.rst:35
msgid "Use ``pip`` to install Pipenv:"
msgstr "Используйте ``pip`` для установки Pipenv:"

#: ../source/tutorials/managing-dependencies.rst:51
msgid ""
"This does a `user installation`_ to prevent breaking any system-wide "
"packages. If ``pipenv`` isn't available in your shell after installation, "
"you'll need to add the :py:data:`user base <python:site.USER_BASE>`'s binary "
"directory to your ``PATH``. See :ref:`Installing to the User Site` for more "
"information."
msgstr ""
"При этом выполняется ``пользовательская установка``, чтобы не нарушить "
"общесистемные пакеты. Если ``pipenv`` недоступен в вашей оболочке после "
"установки, вам нужно добавить бинарную директорию :py:data:`user base "
"<python:site.USER_BASE>` в ваш ``PATH``. Дополнительную информацию см. в "
"разделе :ref:`Установка на сайт пользователя`."

#: ../source/tutorials/managing-dependencies.rst:62
msgid "Installing packages for your project"
msgstr "Установка пакетов для вашего проекта"

#: ../source/tutorials/managing-dependencies.rst:64
msgid ""
"Pipenv manages dependencies on a per-project basis. To install packages, "
"change into your project's directory (or just an empty directory for this "
"tutorial) and run:"
msgstr ""
"Pipenv управляет зависимостями на основе каждого проекта. Чтобы установить "
"пакеты, перейдите в каталог вашего проекта (или просто в пустой каталог для "
"этого руководства) и выполните команду:"

#: ../source/tutorials/managing-dependencies.rst:73
msgid ""
"Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you "
"in your project's directory. The :ref:`Pipfile` is used to track which "
"dependencies your project needs in case you need to re-install them, such as "
"when you share your project with others. You should get output similar to "
"this (although the exact paths shown will vary):"
msgstr ""
"Pipenv установит библиотеку `Requests`_ и создаст для вас ``Pipfile`` в "
"каталоге вашего проекта. Этот :ref:`Pipfile` используется для отслеживания "
"зависимостей, необходимых вашему проекту, на случай, если вам понадобится их "
"переустановить, например, когда вы делитесь своим проектом с другими. Вы "
"должны получить результат, похожий на этот (хотя точные пути могут "
"отличаться):"

#: ../source/tutorials/managing-dependencies.rst:109
msgid "Using installed packages"
msgstr "Использование установленных пакетов"

#: ../source/tutorials/managing-dependencies.rst:111
msgid ""
"Now that Requests is installed you can create a simple :file:`main.py` file "
"to use it:"
msgstr ""
"Теперь, когда Requests установлен, вы можете создать простой файл :file:"
"`main.py` для его использования:"

#: ../source/tutorials/managing-dependencies.rst:122
msgid "Then you can run this script using ``pipenv run``:"
msgstr "Затем вы можете запустить этот скрипт с помощью ``pipenv run``:"

#: ../source/tutorials/managing-dependencies.rst:128
msgid "You should get output similar to this:"
msgstr "Вы должны получить результат, похожий на этот:"

#: ../source/tutorials/managing-dependencies.rst:134
msgid ""
"Using ``pipenv run`` ensures that your installed packages are available to "
"your script. It's also possible to spawn a new shell that ensures all "
"commands have access to your installed packages with ``pipenv shell``."
msgstr ""
"Использование ``pipenv run`` гарантирует, что установленные пакеты будут "
"доступны вашему скрипту. Также можно породить новую оболочку, которая "
"обеспечит доступ всех команд к установленным пакетам с помощью ``pipenv "
"shell``."

#: ../source/tutorials/managing-dependencies.rst:140
#: ../source/tutorials/packaging-projects.rst:484
msgid "Next steps"
msgstr "Следующие шаги"

#: ../source/tutorials/managing-dependencies.rst:142
msgid ""
"Congratulations, you now know how to effectively manage dependencies and "
"development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""
"Поздравляем, теперь вы знаете, как эффективно управлять зависимостями и "
"средами разработки в совместном проекте на Python! ✨ 🍰 ✨"

#: ../source/tutorials/managing-dependencies.rst:145
msgid ""
"If you're interested in creating and distributing your own Python packages, "
"see the :ref:`tutorial on packaging and distributing packages <distributing-"
"packages>`."
msgstr ""
"Если вы заинтересованы в создании и распространении собственных пакетов "
"Python, смотрите :ref:`учебник по упаковке и распространению пакетов "
"<distributing-packages>`."

#: ../source/tutorials/managing-dependencies.rst:148
msgid ""
"Note that when your application includes definitions of Python source "
"packages, they (and their dependencies) can be added to your ``pipenv`` "
"environment with ``pipenv install -e <relative-path-to-source-directory>`` "
"(e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""
"Обратите внимание, что если ваше приложение включает определения пакетов с "
"исходным кодом Python, они (и их зависимости) могут быть добавлены в ваше "
"окружение ``pipenv`` с помощью ``pipenv install -e <относительный-патч-к-"
"директории-источника>`` (например, ``pipenv install -e .`` или ``pipenv "
"install -e src``)."

#: ../source/tutorials/managing-dependencies.rst:157
msgid "Other Tools for Application Dependency Management"
msgstr "Другие инструменты для управления зависимостями приложений"

#: ../source/tutorials/managing-dependencies.rst:159
msgid ""
"If you find this particular approach to managing application dependencies "
"isn't working well for you or your use case, you may want to explore these "
"other tools and techniques, listed in alphabetical order, to see if one of "
"them is a better fit:"
msgstr ""
"Если вы обнаружите, что этот конкретный подход к управлению зависимостями "
"приложений не подходит вам или вашему сценарию использования, вы можете "
"изучить другие инструменты и методы, перечисленные в алфавитном порядке, "
"чтобы понять, не подходит ли вам один из них:"

#: ../source/tutorials/managing-dependencies.rst:163
msgid ""
"`hatch <https://github.com/pypa/hatch>`_ for opinionated coverage of even "
"more steps in the project management workflow, such as incrementing versions "
"and creating new skeleton projects from project templates."
msgstr ""
"`hatch <https://github.com/pypa/hatch>`_ для подробного освещения еще "
"большего количества шагов в рабочем процессе управления проектами, таких как "
"инкремент версий и создание новых скелетных проектов из шаблонов проектов."

#: ../source/tutorials/managing-dependencies.rst:166
msgid ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ for a "
"lightweight wrapper around pip that supports ``requirements.txt``, Pipenv "
"and Poetry lock files, or converting them to pip-tools compatible output. "
"Designed for containerized Python applications, but not limited to them."
msgstr ""
"`micropipenv <https://github.com/thoth-station/micropipenv>`_ для "
"легковесной обертки вокруг pip, поддерживающей файлы ``requirements.txt``, "
"Pipenv и Poetry lock, или конвертирующей их в совместимый с pip-tools вывод. "
"Предназначена для контейнерных Python-приложений, но не ограничивается ими."

#: ../source/tutorials/managing-dependencies.rst:170
msgid ""
"`PDM <https://github.com/pdm-project/pdm>`_ for a modern Python package "
"management relying on standards such as :pep:`517` and :pep:`621`."
msgstr ""
"`PDM <https://github.com/pdm-project/pdm>`_ для современного управления "
"пакетами Python, опирающегося на такие стандарты, как :pep:`517` и :pep:"
"`621`."

#: ../source/tutorials/managing-dependencies.rst:172
msgid ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ for creating a lock "
"file of all dependencies from a list of packages directly used in a project, "
"and ensuring that only those dependencies are installed."
msgstr ""
"`pip-tools <https://github.com/jazzband/pip-tools>`_ для создания файла "
"блокировки всех зависимостей из списка пакетов, непосредственно используемых "
"в проекте, и обеспечения установки только этих зависимостей."

#: ../source/tutorials/managing-dependencies.rst:175
msgid ""
"`Poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable "
"in scope to Pipenv that focuses more directly on use cases where the project "
"being managed is structured as a distributable Python package with a valid "
"``pyproject.toml`` file. By contrast, Pipenv explicitly avoids making the "
"assumption that the application being worked on will support distribution as "
"a ``pip``-installable Python package."
msgstr ""
"`Poetry <https://github.com/python-poetry/poetry>`__ для инструмента, "
"сопоставимого с Pipenv по масштабу, который в большей степени ориентирован "
"на случаи использования, когда управляемый проект структурирован как "
"распространяемый пакет Python с действительным файлом ``pyproject.toml``. В "
"отличие от этого, Pipenv явно избегает предположений о том, что приложение, "
"над которым ведется работа, будет поддерживать распространение в виде "
"``pip``-инсталлируемого Python-пакета."

#: ../source/tutorials/managing-dependencies.rst:180
msgid ""
"`uv <https://docs.astral.sh/uv/>`__ for a single tool that covers the entire "
"project management workflow, including dependency management, packaging, and "
"publishing."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:2
msgid "Packaging Python Projects"
msgstr "Упаковка Python'ьих проектов"

#: ../source/tutorials/packaging-projects.rst:4
msgid ""
"This tutorial walks you through how to package a simple Python project. It "
"will show you how to add the necessary files and structure to create the "
"package, how to build the package, and how to upload it to the Python "
"Package Index (PyPI)."
msgstr ""
"В этом уроке рассказывается о том, как упаковать простой проект на Python. В "
"нем вы узнаете, как добавить необходимые файлы и структуру для создания "
"пакета, как собрать пакет и как загрузить его в Python Package Index (PyPI)."

#: ../source/tutorials/packaging-projects.rst:10
msgid ""
"If you have trouble running the commands in this tutorial, please copy the "
"command and its output, then `open an issue`_ on the `packaging-problems`_ "
"repository on GitHub. We'll do our best to help you!"
msgstr ""
"Если у вас возникли проблемы с выполнением команд в этом руководстве, "
"скопируйте команду и ее вывод, а затем `откройте проблему`_ в репозитории "
"`packaging-problems`_ на GitHub. Мы сделаем все возможное, чтобы помочь вам!"

#: ../source/tutorials/packaging-projects.rst:18
msgid ""
"Some of the commands require a newer version of :ref:`pip`, so start by "
"making sure you have the latest version installed:"
msgstr ""
"Некоторые из команд требуют более новой версии :ref:`pip`, поэтому для "
"начала убедитесь, что у вас установлена последняя версия:"

#: ../source/tutorials/packaging-projects.rst:35
msgid "A simple project"
msgstr "Простой проект"

#: ../source/tutorials/packaging-projects.rst:37
msgid ""
"This tutorial uses a simple project named "
"``example_package_YOUR_USERNAME_HERE``. If your username is ``me``, then the "
"package would be ``example_package_me``; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial. We recommend following this tutorial as-is using "
"this project, before packaging your own project."
msgstr ""
"В этом руководстве используется простой проект с именем "
"``example_package_YOUR_USERNAME_HERE``. Если ваше имя пользователя ``me``, "
"то пакет будет ``example_package_me``; это гарантирует, что у вас будет "
"уникальное имя пакета, которое не будет конфликтовать с пакетами, "
"загруженными другими людьми, следующими этому руководству. Мы рекомендуем "
"следовать этому руководству как есть, используя этот проект, прежде чем "
"упаковывать свой собственный проект."

#: ../source/tutorials/packaging-projects.rst:44
msgid "Create the following file structure locally:"
msgstr "Создайте локально следующую структуру файлов:"

#: ../source/tutorials/packaging-projects.rst:54
msgid ""
"The directory containing the Python files should match the project name. "
"This simplifies the configuration and is more obvious to users who install "
"the package."
msgstr ""
"Каталог, содержащий файлы Python, должен совпадать с именем проекта. Это "
"упрощает настройку и более очевидно для пользователей, устанавливающих пакет."

#: ../source/tutorials/packaging-projects.rst:57
msgid ""
"Creating the file :file:`__init__.py` is recommended because the existence "
"of an :file:`__init__.py` file allows users to import the directory as a "
"regular package, even if (as is the case in this tutorial) :file:`__init__."
"py` is empty. [#namespace-packages]_"
msgstr ""
"Создание файла : файл:`__init__.py` рекомендуется, потому что наличие файла :"
"файл:`__init__.py` позволяет пользователям импортировать каталог как обычный "
"пакет, даже если (как в этом руководстве) :файл:`__init__.py` пуст. "
"[#пространство имен-пакетов]_"

#: ../source/tutorials/packaging-projects.rst:62
msgid ""
":file:`example.py` is an example of a module within the package that could "
"contain the logic (functions, classes, constants, etc.) of your package. "
"Open that file and enter the following content:"
msgstr ""
"Файл:`example.py` - это пример модуля внутри пакета, который может содержать "
"логику (функции, классы, константы и т.д.) вашего пакета. Откройте этот файл "
"и введите следующее содержимое:"

#: ../source/tutorials/packaging-projects.rst:71
msgid ""
"If you are unfamiliar with Python's :term:`modules <Module>` and :term:"
"`import packages <Import Package>`, take a few minutes to read over the "
"`Python documentation for packages and modules`_."
msgstr ""
"Если вы не знакомы с :term:`модулями <Module>` и :term:`импортными пакетами "
"<Import Package>`, потратьте несколько минут на чтение `документации Python "
"по пакетам и модулям`_."

#: ../source/tutorials/packaging-projects.rst:75
msgid ""
"Once you create this structure, you'll want to run all of the commands in "
"this tutorial within the ``packaging_tutorial`` directory."
msgstr ""
"Как только вы создадите эту структуру, вам нужно будет запустить все команды "
"этого руководства в директории ``packaging_tutorial``."

#: ../source/tutorials/packaging-projects.rst:83
msgid "Creating the package files"
msgstr "Создание файлов пакета"

#: ../source/tutorials/packaging-projects.rst:85
msgid ""
"You will now add files that are used to prepare the project for "
"distribution. When you're done, the project structure will look like this:"
msgstr ""
"Теперь вы будете добавлять файлы, которые используются для подготовки "
"проекта к распространению. Когда вы закончите, структура проекта будет "
"выглядеть следующим образом:"

#: ../source/tutorials/packaging-projects.rst:103
msgid "Creating a test directory"
msgstr "Создание тестового каталога"

#: ../source/tutorials/packaging-projects.rst:105
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""
":file:`tests/` - это заполнитель для тестовых файлов. Оставьте его пока "
"пустым."

#: ../source/tutorials/packaging-projects.rst:111
msgid "Choosing a build backend"
msgstr "Выбор бэкенда для сборки"

#: ../source/tutorials/packaging-projects.rst:113
msgid ""
"Tools like :ref:`pip` and :ref:`build` do not actually convert your sources "
"into a :term:`distribution package <Distribution Package>` (like a wheel); "
"that job is performed by a :term:`build backend <Build Backend>`. The build "
"backend determines how your project will specify its configuration, "
"including metadata (information about the project, for example, the name and "
"tags that are displayed on PyPI) and input files. Build backends have "
"different levels of functionality, such as whether they support building :"
"term:`extension modules <Extension Module>`, and you should choose one that "
"suits your needs and preferences."
msgstr ""
"Такие инструменты, как :ref:`pip` и :ref:`build`, на самом деле не "
"преобразуют ваши исходники в :term:`дистрибутивный пакет <Distribution "
"Package>` (как колесо); эту работу выполняет :term:`build backend <Build "
"Backend>`. Бэкенд сборки определяет, как ваш проект будет задавать свою "
"конфигурацию, включая метаданные (информацию о проекте, например, название и "
"теги, которые отображаются на PyPI) и входные файлы. Бэкенды сборки имеют "
"различные уровни функциональности, например, поддерживают ли они сборку :"
"term:`модулей расширения <Extension Module>`, и вы должны выбрать тот, "
"который соответствует вашим потребностям и предпочтениям."

#: ../source/tutorials/packaging-projects.rst:122
msgid ""
"You can choose from a number of backends; this tutorial uses :ref:`Hatchling "
"<hatch>` by default, but it will work identically with :ref:`setuptools`, :"
"ref:`Flit <flit>`, :ref:`PDM <pdm>`, and others that support the "
"``[project]`` table for :ref:`metadata <configuring metadata>`."
msgstr ""
"Вы можете выбрать один из нескольких бэкендов; в этом руководстве по "
"умолчанию используется :ref:`Hatchling <hatch>`, но он будет работать "
"идентично с :ref:`setuptools`, :ref:`Flit <flit>`, :ref:`PDM <pdm>` и "
"другими, которые поддерживают таблицу ``[project]`` для :ref:`metadata "
"<configuring metadata>`."

#: ../source/tutorials/packaging-projects.rst:129
msgid ""
"Some build backends are part of larger tools that provide a command-line "
"interface with additional features like project initialization and version "
"management, as well as building, uploading, and installing packages. This "
"tutorial uses single-purpose tools that work independently."
msgstr ""
"Некоторые средства сборки являются частью более крупных инструментов, "
"предоставляющих интерфейс командной строки с дополнительными возможностями, "
"такими как инициализация проекта и управление версиями, а также сборка, "
"загрузка и установка пакетов. В этом учебнике используются универсальные "
"инструменты, работающие независимо друг от друга."

#: ../source/tutorials/packaging-projects.rst:134
msgid ""
"The :file:`pyproject.toml` tells :term:`build frontend <Build Frontend>` "
"tools like :ref:`pip` and :ref:`build` which backend to use for your "
"project. Below are some examples for common build backends, but check your "
"backend's own documentation for more details."
msgstr ""
"В :file:`pyproject.toml` указывается :term:`build frontend <Build Frontend>` "
"инструментам, таким как :ref:`pip` и :ref:`build`, какой бэкенд использовать "
"для вашего проекта. Ниже приведены примеры для распространенных бэкендов "
"сборки, но для получения более подробной информации обратитесь к "
"документации по вашему бэкенду."

#: ../source/tutorials/packaging-projects.rst:141
#, fuzzy
#| msgid ""
#| "The ``requires`` key is a list of packages that are needed to build your "
#| "package. The :term:`frontend <Build Frontend>` should install them "
#| "automatically when building your package. Frontends usually run builds in "
#| "isolated environments, so omitting dependencies here may cause build-time "
#| "errors. This should always include your backend's package, and might have "
#| "other build-time dependencies."
msgid ""
"The ``requires`` key is a list of packages that are needed to build your "
"package. The :term:`frontend <Build Frontend>` should install them "
"automatically when building your package. Frontends usually run builds in "
"isolated environments, so omitting dependencies here may cause build-time "
"errors. This should always include your backend's package, and might have "
"other build-time dependencies. The minimum version specified in the above "
"code block is the one that introduced support for :ref:`the new license "
"metadata <license-and-license-files>`."
msgstr ""
"Ключ ``requires`` - это список пакетов, которые необходимы для сборки вашего "
"пакета. Функция :term:`frontend <Build Frontend>` должна установить их "
"автоматически при сборке вашего пакета. Фронтенды обычно выполняют сборку в "
"изолированном окружении, поэтому отсутствие зависимостей здесь может "
"привести к ошибкам во время сборки. Это всегда должно включать пакет вашего "
"бэкенда и может иметь другие зависимости во время сборки."

#: ../source/tutorials/packaging-projects.rst:150
msgid ""
"The ``build-backend`` key is the name of the Python object that frontends "
"will use to perform the build."
msgstr ""
"Ключ ``build-backend`` - это имя объекта Python, который фронтенды будут "
"использовать для выполнения сборки."

#: ../source/tutorials/packaging-projects.rst:153
msgid ""
"Both of these values will be provided by the documentation for your build "
"backend, or generated by its command line interface. There should be no need "
"for you to customize these settings."
msgstr ""
"Оба эти значения можно найти в документации к вашему бэкенду сборки или "
"получить из его интерфейса командной строки. Вам не придется настраивать эти "
"параметры."

#: ../source/tutorials/packaging-projects.rst:157
msgid ""
"Additional configuration of the build tool will either be in a ``tool`` "
"section of the ``pyproject.toml``, or in a special file defined by the build "
"tool. For example, when using ``setuptools`` as your build backend, "
"additional configuration may be added to a ``setup.py`` or ``setup.cfg`` "
"file, and specifying ``setuptools.build_meta`` in your build allows the "
"tools to locate and use these automatically."
msgstr ""
"Дополнительная конфигурация инструмента сборки будет находиться либо в "
"секции ``tool`` в файле ``pyproject.toml``, либо в специальном файле, "
"определяемом инструментом сборки. Например, при использовании ``setuptools`` "
"в качестве бэкенда сборки, дополнительные настройки могут быть добавлены в "
"файл ``setup.py`` или ``setup.cfg``, а указание ``setuptools.build_meta`` в "
"вашей сборке позволяет инструментам автоматически находить и использовать их."

#: ../source/tutorials/packaging-projects.rst:167
msgid "Configuring metadata"
msgstr "Конфигурирование метаданных"

#: ../source/tutorials/packaging-projects.rst:169
msgid ""
"Open :file:`pyproject.toml` and enter the following content. Change the "
"``name`` to include your username; this ensures that you have a unique "
"package name that doesn't conflict with packages uploaded by other people "
"following this tutorial."
msgstr ""
"Откройте :file:`pyproject.toml` и введите следующее содержимое. Измените "
"``имя``, чтобы оно включало ваше имя пользователя; это гарантирует, что у "
"вас будет уникальное имя пакета, которое не будет конфликтовать с пакетами, "
"загруженными другими людьми, следующими этому руководству."

#: ../source/tutorials/packaging-projects.rst:196
msgid ""
"``name`` is the *distribution name* of your package. This can be any name as "
"long as it only contains letters, numbers, ``.``, ``_`` , and ``-``. It also "
"must not already be taken on PyPI. **Be sure to update this with your "
"username** for this tutorial, as this ensures you won't try to upload a "
"package with the same name as one which already exists."
msgstr ""
"``имя`` - это *имя дистрибутива* вашего пакета. Это может быть любое имя, "
"если оно содержит только буквы, цифры, ``.``, ``_`` и ``-``. Оно также не "
"должно быть уже занято на PyPI. **Убедитесь, что вы указали в нем свое имя "
"пользователя** для этого руководства, так как это гарантирует, что вы не "
"попытаетесь загрузить пакет с тем же именем, что и уже существующий."

#: ../source/tutorials/packaging-projects.rst:201
msgid ""
"``version`` is the package version. (Some build backends allow it to be "
"specified another way, such as from a file or Git tag.)"
msgstr ""
"``version`` - это версия пакета. (Некоторые сборки позволяют указывать ее "
"другим способом, например, из файла или Git-тега)"

#: ../source/tutorials/packaging-projects.rst:203
msgid ""
"``authors`` is used to identify the author of the package; you specify a "
"name and an email for each author. You can also list ``maintainers`` in the "
"same format."
msgstr ""
"``authors`` используется для идентификации автора пакета; вы указываете имя "
"и email для каждого автора. В таком же формате можно перечислить "
"``maintainers``."

#: ../source/tutorials/packaging-projects.rst:206
msgid "``description`` is a short, one-sentence summary of the package."
msgstr "``description`` - это краткое, в одно предложение, описание пакета."

#: ../source/tutorials/packaging-projects.rst:207
msgid ""
"``readme`` is a path to a file containing a detailed description of the "
"package. This is shown on the package detail page on PyPI. In this case, the "
"description is loaded from :file:`README.md` (which is a common pattern). "
"There also is a more advanced table form described in the :ref:`pyproject."
"toml guide <writing-pyproject-toml>`."
msgstr ""
"``readme`` - это путь к файлу, содержащему подробное описание пакета. Он "
"отображается на странице подробного описания пакета на PyPI. В данном случае "
"описание загружается из :file:`README.md` (это общий шаблон). Существует "
"также более продвинутая форма таблицы, описанная в руководстве :ref:"
"`pyproject.toml <writing-pyproject-toml>`."

#: ../source/tutorials/packaging-projects.rst:212
msgid ""
"``requires-python`` gives the versions of Python supported by your project. "
"An installer like :ref:`pip` will look back through older versions of "
"packages until it finds one that has a matching Python version."
msgstr ""
"``requires-python`` указывает версии Python, поддерживаемые вашим проектом. "
"Программа установки, такая как :ref:`pip`, будет просматривать старые версии "
"пакетов, пока не найдет ту, которая имеет соответствующую версию Python."

#: ../source/tutorials/packaging-projects.rst:215
#, fuzzy
#| msgid ""
#| "``classifiers`` gives the index and :ref:`pip` some additional metadata "
#| "about your package. In this case, the package is only compatible with "
#| "Python 3, is licensed under the MIT license, and is OS-independent. You "
#| "should always include at least which version(s) of Python your package "
#| "works on, which license your package is available under, and which "
#| "operating systems your package will work on. For a complete list of "
#| "classifiers, see https://pypi.org/classifiers/."
msgid ""
"``classifiers`` gives the index and :ref:`pip` some additional metadata "
"about your package. In this case, the package is only compatible with Python "
"3 and is OS-independent. You should always include at least which version(s) "
"of Python your package works on and which operating systems your package "
"will work on. For a complete list of classifiers, see https://pypi.org/"
"classifiers/."
msgstr ""
"``классификаторы`` дают индексу и :ref:`pip`` некоторые дополнительные "
"метаданные о вашем пакете. В данном случае пакет совместим только с Python "
"3, лицензируется по лицензии MIT и не зависит от ОС. Вы всегда должны "
"указывать, по крайней мере, на какой версии (версиях) Python работает ваш "
"пакет, под какой лицензией он доступен, и на каких операционных системах он "
"будет работать. Полный список классификаторов можно найти на сайте https://"
"pypi.org/classifiers/."

#: ../source/tutorials/packaging-projects.rst:222
msgid ""
"``license`` is the :term:`SPDX license expression <License Expression>` of "
"your package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:224
#, fuzzy
#| msgid ""
#| "Now run this command from the same directory where :file:`pyproject.toml` "
#| "is located:"
msgid ""
"``license-files`` is the list of glob paths to the license files, relative "
"to the directory where :file:`pyproject.toml` is located."
msgstr ""
"Теперь запустите эту команду из той же директории, где находится :file:"
"`pyproject.toml`:"

#: ../source/tutorials/packaging-projects.rst:226
msgid ""
"``urls`` lets you list any number of extra links to show on PyPI. Generally "
"this could be to the source, documentation, issue trackers, etc."
msgstr ""
"``urls`` позволяет вам перечислить любое количество дополнительных ссылок, "
"которые нужно показать на PyPI. Обычно это могут быть ссылки на исходный "
"текст, документацию, трекеры проблем и т.д."

#: ../source/tutorials/packaging-projects.rst:229
msgid ""
"See the :ref:`pyproject.toml guide <writing-pyproject-toml>` for details on "
"these and other fields that can be defined in the ``[project]`` table. Other "
"common fields are ``keywords`` to improve discoverability and the "
"``dependencies`` that are required to install your package."
msgstr ""
"Подробности об этих и других полях, которые могут быть определены в таблице "
"``[проект]``, см. в руководстве <writing-pyproject-toml>`. Другими "
"распространенными полями являются ``ключевые слова'' для повышения удобства "
"поиска и ``зависимости'', необходимые для установки вашего пакета."

#: ../source/tutorials/packaging-projects.rst:236
msgid "Creating README.md"
msgstr "Создание файла :file:`README.md`"

#: ../source/tutorials/packaging-projects.rst:238
msgid ""
"Open :file:`README.md` and enter the following content. You can customize "
"this if you'd like."
msgstr ""
"Откройте :file:`README.md` и введите следующее содержимое. Вы можете "
"настроить его по своему усмотрению."

#: ../source/tutorials/packaging-projects.rst:251
msgid "Creating a LICENSE"
msgstr "Создание файла :file:`LICENSE`"

#: ../source/tutorials/packaging-projects.rst:253
msgid ""
"It's important for every package uploaded to the Python Package Index to "
"include a license. This tells users who install your package the terms under "
"which they can use your package. For help picking a license, see https://"
"choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` "
"and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""
"Важно, чтобы каждый пакет, загруженный в Python Package Index, содержал "
"лицензию. Это указывает пользователям, устанавливающим ваш пакет, на каких "
"условиях они могут его использовать. О том, как выбрать лицензию, читайте на "
"сайте https://choosealicense.com/. Выбрав лицензию, откройте :file:`LICENSE` "
"и введите текст лицензии. Например, если вы выбрали лицензию MIT:"

#: ../source/tutorials/packaging-projects.rst:282
msgid ""
"Most build backends automatically include license files in packages. See "
"your backend's documentation for more details. If you include the path to "
"license in the ``license-files`` key of :file:`pyproject.toml`, and your "
"build backend supports :pep:`639`, the file will be automatically included "
"in the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:290
msgid "Including other files"
msgstr "Включение других файлов"

#: ../source/tutorials/packaging-projects.rst:292
msgid ""
"The files listed above will be included automatically in your :term:`source "
"distribution <Source Distribution (or \"sdist\")>`. If you want to include "
"additional files, see the documentation for your build backend."
msgstr ""
"Перечисленные выше файлы будут автоматически включены в ваш :term:`source "
"дистрибутив <Source Distribution (или \"sdist\")>`. Если вы хотите включить "
"дополнительные файлы, обратитесь к документации по вашему бэкенду сборки."

#: ../source/tutorials/packaging-projects.rst:299
msgid "Generating distribution archives"
msgstr "Создание архивов дистрибутивов"

#: ../source/tutorials/packaging-projects.rst:301
msgid ""
"The next step is to generate :term:`distribution packages <Distribution "
"Package>` for the package. These are archives that are uploaded to the "
"Python Package Index and can be installed by :ref:`pip`."
msgstr ""
"Следующим шагом будет создание :term:`distribution packages <Distribution "
"Package>` для пакета. Это архивы, которые загружаются в индекс пакетов "
"Python и могут быть установлены с помощью :ref:`pip`."

#: ../source/tutorials/packaging-projects.rst:305
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr "Убедитесь, что у вас установлена последняя версия PyPA :ref:`build`:"

#: ../source/tutorials/packaging-projects.rst:319
msgid ""
"If you have trouble installing these, see the :doc:`installing-packages` "
"tutorial."
msgstr ""
"Если у вас возникли проблемы с их установкой, обратитесь к руководству :doc:"
"`installing-packages`."

#: ../source/tutorials/packaging-projects.rst:322
msgid ""
"Now run this command from the same directory where :file:`pyproject.toml` is "
"located:"
msgstr ""
"Теперь запустите эту команду из той же директории, где находится :file:"
"`pyproject.toml`:"

#: ../source/tutorials/packaging-projects.rst:336
msgid ""
"This command should output a lot of text and once completed should generate "
"two files in the :file:`dist` directory:"
msgstr ""
"Эта команда должна вывести много текста и по завершении создать два файла в "
"каталоге :file:`dist`:"

#: ../source/tutorials/packaging-projects.rst:346
msgid ""
"The ``tar.gz`` file is a :term:`source distribution <Source Distribution (or "
"\"sdist\")>` whereas the ``.whl`` file is a :term:`built distribution <Built "
"Distribution>`. Newer :ref:`pip` versions preferentially install built "
"distributions, but will fall back to source distributions if needed. You "
"should always upload a source distribution and provide built distributions "
"for the platforms your project is compatible with. In this case, our example "
"package is compatible with Python on any platform so only one built "
"distribution is needed."
msgstr ""
"Файл ``tar.gz`` представляет собой :term:``исходный дистрибутив <Source "
"Distribution (или \"sdist\")>``, а файл ``.whl`` представляет собой :term:"
"``сборный дистрибутив <Built Distribution>`. Более новые версии :ref:`pip` "
"предпочитают устанавливать собранные дистрибутивы, но при необходимости "
"возвращаются к исходным дистрибутивам. Вы всегда должны загружать исходный "
"дистрибутив и предоставлять собранные дистрибутивы для платформ, с которыми "
"совместим ваш проект. В данном случае наш пример пакета совместим с Python "
"на любой платформе, поэтому требуется только один собранный дистрибутив."

#: ../source/tutorials/packaging-projects.rst:355
msgid "Uploading the distribution archives"
msgstr "Загрузка архивов дистрибутива"

#: ../source/tutorials/packaging-projects.rst:357
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr "Наконец, пришло время загрузить ваш пакет в Python Package Index!"

#: ../source/tutorials/packaging-projects.rst:359
msgid ""
"The first thing you'll need to do is register an account on TestPyPI, which "
"is a separate instance of the package index intended for testing and "
"experimentation. It's great for things like this tutorial where we don't "
"necessarily want to upload to the real index. To register an account, go to "
"https://test.pypi.org/account/register/ and complete the steps on that page. "
"You will also need to verify your email address before you're able to upload "
"any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""
"Первое, что вам нужно сделать, это зарегистрировать аккаунт на TestPyPI, "
"который представляет собой отдельный экземпляр индекса пакетов, "
"предназначенный для тестирования и экспериментов. Он отлично подходит для "
"таких вещей, как этот учебник, где мы не обязательно хотим загружать в "
"настоящий индекс. Чтобы зарегистрировать учетную запись, перейдите по адресу "
"https://test.pypi.org/account/register/ и выполните все шаги на этой "
"странице. Вам также потребуется подтвердить свой адрес электронной почты, "
"прежде чем вы сможете загружать пакеты.  Более подробную информацию можно "
"найти в :doc:`/guides/using-testpypi`."

#: ../source/tutorials/packaging-projects.rst:367
msgid ""
"To securely upload your project, you'll need a PyPI `API token`_. Create one "
"at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" "
"to \"Entire account\". **Don't close the page until you have copied and "
"saved the token — you won't see that token again.**"
msgstr ""
"Чтобы безопасно загрузить свой проект, вам понадобится токен PyPI `API "
"token`_. Создайте его на сайте https://test.pypi.org/manage/account/#api-"
"tokens, установив для параметра \"Область действия\" значение \"Весь "
"аккаунт\". **Не закрывайте страницу, пока не скопируете и не сохраните токен "
"- больше вы его не увидите**"

#: ../source/tutorials/packaging-projects.rst:374
msgid ""
"Now that you are registered, you can use :ref:`twine` to upload the "
"distribution packages. You'll need to install Twine:"
msgstr ""
"Теперь, когда вы зарегистрированы, вы можете использовать :ref:`twine` для "
"загрузки дистрибутива. Вам нужно будет установить Twine:"

#: ../source/tutorials/packaging-projects.rst:389
msgid ""
"Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""
"После установки запустите Twine, чтобы загрузить все архивы в папку :file:"
"`dist`:"

#: ../source/tutorials/packaging-projects.rst:403
msgid ""
"You will be prompted for an API token. Use the token value, including the "
"``pypi-`` prefix. Note that the input will be hidden, so be sure to paste "
"correctly."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:406
msgid "After the command completes, you should see output similar to this:"
msgstr "После выполнения команды вы должны увидеть вывод, похожий на этот:"

#: ../source/tutorials/packaging-projects.rst:417
msgid ""
"Once uploaded, your package should be viewable on TestPyPI; for example: "
"``https://test.pypi.org/project/example_package_YOUR_USERNAME_HERE``."
msgstr ""
"После загрузки ваш пакет должен быть доступен для просмотра на TestPyPI; "
"например: ``https://test.pypi.org/project/"
"example_package_YOUR_USERNAME_HERE``."

#: ../source/tutorials/packaging-projects.rst:422
msgid "Installing your newly uploaded package"
msgstr "Установка нового загруженного пакета"

#: ../source/tutorials/packaging-projects.rst:424
msgid ""
"You can use :ref:`pip` to install your package and verify that it works. "
"Create a :ref:`virtual environment <Creating and using Virtual "
"Environments>` and install your package from TestPyPI:"
msgstr ""
"Вы можете использовать :ref:`pip` для установки вашего пакета и проверки его "
"работоспособности. Создайте :ref:`виртуальную среду <Создание и "
"использование виртуальных сред>` и установите свой пакет из TestPyPI:"

#: ../source/tutorials/packaging-projects.rst:440
msgid "Make sure to specify your username in the package name!"
msgstr "Обязательно укажите свое имя пользователя в названии пакета!"

#: ../source/tutorials/packaging-projects.rst:442
msgid ""
"pip should install the package from TestPyPI and the output should look "
"something like this:"
msgstr ""
"pip должен установить пакет из TestPyPI, и результат должен выглядеть "
"примерно так:"

#: ../source/tutorials/packaging-projects.rst:452
msgid ""
"This example uses ``--index-url`` flag to specify TestPyPI instead of live "
"PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have "
"the same packages as the live PyPI, it's possible that attempting to install "
"dependencies may fail or install something unexpected. While our example "
"package doesn't have any dependencies, it's a good practice to avoid "
"installing dependencies when using TestPyPI."
msgstr ""
"В этом примере используется флаг ``--index-url``, чтобы указать TestPyPI "
"вместо живого PyPI. Кроме того, в нем указано ``no-deps``. Так как TestPyPI "
"не содержит тех же пакетов, что и живой PyPI, возможно, что попытка "
"установить зависимости может закончиться неудачей или установить что-то "
"неожиданное. Хотя наш пример не имеет зависимостей, рекомендуется избегать "
"установки зависимостей при использовании TestPyPI."

#: ../source/tutorials/packaging-projects.rst:459
msgid ""
"You can test that it was installed correctly by importing the package. Make "
"sure you're still in your virtual environment, then run Python:"
msgstr ""
"Вы можете проверить, что он был установлен правильно, импортировав пакет. "
"Убедитесь, что вы все еще находитесь в виртуальной среде, а затем запустите "
"Python:"

#: ../source/tutorials/packaging-projects.rst:474
msgid "and import the package:"
msgstr "и импортировать пакет:"

#: ../source/tutorials/packaging-projects.rst:486
msgid ""
"**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 "
"✨"
msgstr ""
"**Поздравляем, вы упаковали и распространили проект на Python!** ✨ 🍰 ✨"

#: ../source/tutorials/packaging-projects.rst:489
msgid ""
"Keep in mind that this tutorial showed you how to upload your package to "
"Test PyPI, which isn't a permanent storage. The Test system occasionally "
"deletes packages and accounts. It is best to use TestPyPI for testing and "
"experiments like this tutorial."
msgstr ""
"Помните, что в этом руководстве показано, как загрузить ваш пакет на Test "
"PyPI, который не является постоянным хранилищем. Система Test время от "
"времени удаляет пакеты и аккаунты. Лучше всего использовать TestPyPI для "
"тестирования и экспериментов, подобных этому руководству."

#: ../source/tutorials/packaging-projects.rst:494
msgid ""
"When you are ready to upload a real package to the Python Package Index you "
"can do much the same as you did in this tutorial, but with these important "
"differences:"
msgstr ""
"Когда вы будете готовы загрузить реальный пакет в Python Package Index, вы "
"можете сделать все то же самое, что и в этом уроке, но с важными отличиями:"

#: ../source/tutorials/packaging-projects.rst:498
msgid ""
"Choose a memorable and unique name for your package. You don't have to "
"append your username as you did in the tutorial, but you can't use an "
"existing name."
msgstr ""
"Выберите запоминающееся и уникальное имя для своего пакета. Не обязательно "
"добавлять имя пользователя, как это было в учебнике, но нельзя использовать "
"существующее имя."

#: ../source/tutorials/packaging-projects.rst:500
msgid ""
"Register an account on https://pypi.org - note that these are two separate "
"servers and the login details from the test server are not shared with the "
"main server."
msgstr ""
"Зарегистрируйте учетную запись на https://pypi.org - обратите внимание, что "
"это два отдельных сервера и данные для входа с тестового сервера не "
"передаются на основной сервер."

#: ../source/tutorials/packaging-projects.rst:503
msgid ""
"Use ``twine upload dist/*`` to upload your package and enter your "
"credentials for the account you registered on the real PyPI.  Now that "
"you're uploading the package in production, you don't need to specify ``--"
"repository``; the package will upload to https://pypi.org/ by default."
msgstr ""
"Используйте ``twine upload dist/*`` для загрузки пакета и введите свои "
"учетные данные для аккаунта, который вы зарегистрировали на настоящем PyPI.  "
"Теперь, когда вы загружаете пакет в production, вам не нужно указывать ``--"
"репозиторий``; пакет будет загружен на https://pypi.org/ по умолчанию."

#: ../source/tutorials/packaging-projects.rst:507
msgid ""
"Install your package from the real PyPI using ``python3 -m pip install [your-"
"package]``."
msgstr ""
"Установите свой пакет из настоящего PyPI с помощью ``python3 -m pip install "
"[your-package]``."

#: ../source/tutorials/packaging-projects.rst:509
msgid ""
"At this point if you want to read more on packaging Python libraries here "
"are some things you can do:"
msgstr ""
"На этом этапе, если вы хотите прочитать больше об упаковке библиотек Python, "
"вот некоторые вещи, которые вы можете сделать:"

#: ../source/tutorials/packaging-projects.rst:512
msgid ""
"Read about advanced configuration for your chosen build backend: `Hatchling "
"<hatchling-config_>`_, :doc:`setuptools <setuptools:userguide/"
"pyproject_config>`, :doc:`Flit <flit:pyproject_toml>`, `PDM <pdm-config_>`_."
msgstr ""
"Прочитайте о расширенной конфигурации для выбранного вами бэкенда сборки: "
"`Hatchling <hatchling-config_>`_, :doc:`setuptools <setuptools:userguide/"
"pyproject_config>`, :doc:`Flit <flit:pyproject_toml>`, `PDM <pdm-config_>`_."

#: ../source/tutorials/packaging-projects.rst:516
msgid ""
"Look at the :doc:`guides </guides/index>` on this site for more advanced "
"practical information, or the :doc:`discussions </discussions/index>` for "
"explanations and background on specific topics."
msgstr ""
"Более подробную практическую информацию можно найти в :doc:`guides </guides/"
"index>` на этом сайте или в :doc:`discussions </discussions/index>` для "
"объяснений и справочной информации по конкретным темам."

#: ../source/tutorials/packaging-projects.rst:519
msgid ""
"Consider packaging tools that provide a single command-line interface for "
"project management and packaging, such as :ref:`hatch`, :ref:`flit`, :ref:"
"`pdm`, and :ref:`poetry`."
msgstr ""
"Рассмотрите инструменты для упаковки, которые предоставляют единый интерфейс "
"командной строки для управления проектом и упаковки, такие как :ref:"
"`hatch`, :ref:`flit`, :ref:`pdm` и :ref:`poetry`."

#: ../source/tutorials/packaging-projects.rst:527
msgid "Notes"
msgstr "Примечания"

#: ../source/tutorials/packaging-projects.rst:529
msgid ""
"Technically, you can also create Python packages without an ``__init__.py`` "
"file, but those are called :doc:`namespace packages </guides/packaging-"
"namespace-packages>` and considered an **advanced topic** (not covered in "
"this tutorial). If you are only getting started with Python packaging, it is "
"recommended to stick with *regular packages* and ``__init__.py`` (even if "
"the file is empty)."
msgstr ""
"Технически вы также можете создать Python пакеты без файла ``__init__.py``, "
"но они называются :doc:`namespace Package </guides/packaging-namespace-"
"packages>` и считаются **продвинутой темой** (не охваченной этим учебником). "
"Если вы только начинаете с Python упаковки, рекомендуется придерживаться "
"*регулярных пакетов* и ``__init__.py`` (даже если файл пуст)."

#~ msgid "TUF Support - PEP 458"
#~ msgstr "Поддержка TUF - PEP 458"

#~ msgid ""
#~ ":pep:`458` requires that all API responses are hashable and that they can "
#~ "be uniquely identified by a path relative to the repository root. For a "
#~ "Simple API repository, the target path is the Root of our API (e.g. ``/"
#~ "simple/`` on PyPI). This creates challenges when accessing the API using "
#~ "a TUF client instead of directly using a standard HTTP client, as the TUF "
#~ "client cannot handle the fact that a target could have multiple different "
#~ "representations that all hash differently."
#~ msgstr ""
#~ ":pep:`458` требует, чтобы все ответы API были хэшируемыми и чтобы их "
#~ "можно было однозначно идентифицировать по пути относительно корня "
#~ "репозитория. Для репозитория Simple API целевым путем является корень "
#~ "нашего API (например, ``/простой/`` на PyPI). Это создает проблемы при "
#~ "доступе к API с помощью клиента TUF, а не напрямую с помощью стандартного "
#~ "HTTP-клиента, поскольку клиент TUF не может справиться с тем, что цель "
#~ "может иметь несколько различных представлений, которые хэшируются по-"
#~ "разному."

#~ msgid ""
#~ ":pep:`458` does not specify what the target path should be for the Simple "
#~ "API, but TUF requires that the target paths be \"file-like\", in other "
#~ "words, a path like ``simple/PROJECT/`` is not acceptable, because it "
#~ "technically points to a directory."
#~ msgstr ""
#~ ":pep:`458` не указывает, каким должен быть целевой путь для простой API, "
#~ "но TUF требует, чтобы целевые пути были \"файлоподобными\", другими "
#~ "словами, путь типа ``простой/ПРОЕКТ/`` неприемлем, потому что технически "
#~ "он указывает на каталог."

#~ msgid ""
#~ "The saving grace is that the target path does not *have* to actually "
#~ "match the URL being fetched from the Simple API, and it can just be a "
#~ "sigil that the fetching code knows how to transform into the actual URL "
#~ "that needs to be fetched. This same thing can hold true for other aspects "
#~ "of the actual HTTP request, such as the ``Accept`` header."
#~ msgstr ""
#~ "Спасением является то, что целевой путь не *обязательно* должен "
#~ "соответствовать URL, получаемому из Простой API, и он может быть просто "
#~ "символом, который код получения знает, как преобразовать в реальный URL, "
#~ "который нужно получить. То же самое можно сказать и о других аспектах "
#~ "фактического HTTP-запроса, таких как заголовок ``принять``."

#~ msgid ""
#~ "Ultimately figuring out how to map a directory to a filename is out of "
#~ "scope for this spec (but it would be in scope for :pep:`458`), and this "
#~ "spec defers making a decision about how exactly to represent this inside "
#~ "of :pep:`458` metadata."
#~ msgstr ""
#~ "В конечном счете, выяснение того, как сопоставить каталог с именем файла, "
#~ "выходит за рамки данной спецификации (но это было бы в рамках :pep:"
#~ "`458`), и данная спецификация откладывает принятие решения о том, как "
#~ "именно представлять это в метаданных :pep:`458`."

#~ msgid ""
#~ "However, it appears that the current WIP branch against pip that attempts "
#~ "to implement :pep:`458` is using a target path like ``simple/PROJECT/"
#~ "index.html``. This could be modified to include the API version and "
#~ "serialization format using something like ``simple/PROJECT/vnd.pypi."
#~ "simple.vN.FORMAT``. So the v1 HTML format would be ``simple/PROJECT/vnd."
#~ "pypi.simple.v1.html`` and the v1 JSON format would be ``simple/PROJECT/"
#~ "vnd.pypi.simple.v1.json``."
#~ msgstr ""
#~ "Однако, похоже, что текущая ветка WIP в pip, которая пытается "
#~ "реализовать :pep:`458`, использует целевой путь типа ``простой/ПРОЕКТ/"
#~ "индекс.html``. Это можно изменить, чтобы включить версию API и формат "
#~ "сериализации, используя что-то вроде ``простой/ПРОЕКТ/vnd.pypi. простой."
#~ "vN. ФОРМАТ``. Таким образом, формат v1 HTML будет ``простой/ПРОЕКТ/vnd."
#~ "pypi. простой.v1.html``, а формат v1 JSON будет ``простой/ПРОЕКТ/vnd.pypi."
#~ "простой.v1.json``."

#~ msgid ""
#~ "In this case, since ``text/html`` is an alias to ``application/vnd.pypi."
#~ "simple.v1+html`` when interacting through TUF, it likely will make the "
#~ "most sense to normalize to the more explicit name."
#~ msgstr ""
#~ "В данном случае, поскольку ``текст/html`` является псевдонимом для "
#~ "``приложения/vnd.pypi. простой.v1+html`` при взаимодействии через TUF, "
#~ "скорее всего, будет разумнее нормализовать к более явному имени."

#~ msgid ""
#~ "Likewise the ``latest`` metaversion should not be included in the "
#~ "targets, only explicitly declared versions should be supported."
#~ msgstr ""
#~ "Аналогично, метаверсия ``последней`` не должна включаться в цели, должны "
#~ "поддерживаться только явно объявленные версии."

#~ msgid "`Vagrant <https://www.vagrantup.com/>`_"
#~ msgstr "`Vagrant <https://www.vagrantup.com/>`_"

#, fuzzy
#~| msgid ":ref:`pyproject-toml-spec`"
#~ msgid "**Inspiration**: :ref:`  pyproject-tool-table`"
#~ msgstr ":ref:`pyproject-toml-spec`"

#~ msgid ""
#~ "Below the root URL is another URL for each individual project contained "
#~ "within a repository. The format of this URL is ``/<project>/`` where the "
#~ "``<project>`` is replaced by the normalized name for that project, so a "
#~ "project named \"HolyGrail\" would have a URL like ``/holygrail/``. This "
#~ "URL must respond with a valid HTML5 page with a single anchor element per "
#~ "file for the project. The href attribute **MUST** be a URL that links to "
#~ "the location of the file for download, and the text of the anchor tag "
#~ "**MUST** match the final path component (the filename) of the URL. The "
#~ "URL **SHOULD** include a hash in the form of a URL fragment with the "
#~ "following syntax: ``#<hashname>=<hashvalue>``, where ``<hashname>`` is "
#~ "the lowercase name of the hash function (such as ``sha256``) and "
#~ "``<hashvalue>`` is the hex encoded digest."
#~ msgstr ""
#~ "Ниже корневого URL находится еще один URL для каждого отдельного проекта, "
#~ "содержащегося в репозитории. Формат этого URL - ``/<проект>/``, где "
#~ "``<проект>`` заменяется нормализованным именем проекта, поэтому проект с "
#~ "именем \"HolyGrail\" будет иметь URL вида ``/holygrail/``. В ответ на "
#~ "этот URL должна появиться корректная HTML5-страница с одним элементом "
#~ "якоря для каждого файла проекта. Атрибут href **ДОЛЖЕН** быть URL, "
#~ "который ссылается на местоположение файла для загрузки, а текст тега "
#~ "якоря **ДОЛЖЕН** совпадать с конечным компонентом пути (именем файла) в "
#~ "URL. URL **ДОЛЖЕН** включать хэш в виде фрагмента URL со следующим "
#~ "синтаксисом: ``#<хэш-имя>=<хэш-значение>``, где ``<хэш-имя>`` - строчное "
#~ "имя хэш-функции (например, ``sha256``), а ``<хэш-значение>`` - "
#~ "шестнадцатеричное кодирование дайджеста."

#~ msgid "Adding \"Yank\" Support to the Simple API"
#~ msgstr "Добавление поддержки \"Янк\" в простой API"

#~ msgid "Signing the distribution packages"
#~ msgstr "Подписание пакетов распространения"

#~ msgid ""
#~ "The following job signs the distribution packages with `Sigstore`_, the "
#~ "same artifact signing system `used to sign CPython <https://www.python."
#~ "org/download/sigstore/>`_."
#~ msgstr ""
#~ "Следующее задание подписывает пакеты дистрибутива с помощью `Sigstore`_, "
#~ "той же системы подписи артефактов, которая `использовалась для подписи "
#~ "CPython <https://www.python.org/download/sigstore/>`_."

#~ msgid ""
#~ "Firstly, it uses the `sigstore/gh-action-sigstore-python GitHub Action`_ "
#~ "to sign the distribution packages. In the next step, an empty GitHub "
#~ "Release from the current tag is created using the ``gh`` CLI. Note this "
#~ "step can be further customised. See the `gh release documentation "
#~ "<https://cli.github.com/manual/gh_release>`_ as a reference."
#~ msgstr ""
#~ "Сначала используется GitHub Action `sigstore/gh-action-sigstore-python`_ "
#~ "для подписи дистрибутивных пакетов. На следующем этапе с помощью ``gh`` "
#~ "CLI создается пустой GitHub Release из текущего тега. Обратите внимание, "
#~ "что этот шаг может быть дополнительно настроен. См. документацию `gh "
#~ "release <https://cli.github.com/manual/gh_release>`_ в качестве ссылки."

#~ msgid ""
#~ "You may need to manage your ``GITHUB_TOKEN`` permissions to enable "
#~ "creating the GitHub Release. See the `GitHub documentation <https://docs."
#~ "github.com/repositories/managing-your-repositorys-settings-and-features/"
#~ "enabling-features-for-your-repository/managing-github-actions-settings-"
#~ "for-a-repository#configuring-the-default-github_token-permissions>`_ for "
#~ "instructions. Specifically, the token needs the ``contents: write`` "
#~ "permission."
#~ msgstr ""
#~ "Вам может потребоваться изменить права ``GITHUB_TOKEN``, чтобы разрешить "
#~ "создание релиза GitHub. Инструкции см. в документации по GitHub <https://"
#~ "docs.github.com/repositories/managing-your-repositorys-settings-and-"
#~ "features/enabling-features-for-your-repository/managing-github-actions-"
#~ "settings-for-a-repository#configuring-the-default-github_token-"
#~ "permissions>`_. В частности, токену необходимо разрешение ``содержимое: "
#~ "запись``."

#~ msgid ""
#~ "Finally, the signed distributions are uploaded to the GitHub Release."
#~ msgstr "Наконец, подписанные дистрибутивы загружаются на GitHub Release."

#~ msgid ""
#~ "This is a replacement for GPG signatures, for which support has been "
#~ "`removed from PyPI <https://blog.pypi.org/posts/2023-05-23-removing-pgp/"
#~ ">`_. However, this job is not mandatory for uploading to PyPI and can be "
#~ "omitted."
#~ msgstr ""
#~ "Это замена для подписей GPG, поддержка которых была `удалена из PyPI "
#~ "<https://blog.pypi.org/posts/2023-05-23-removing-pgp/>`_. Тем не менее, "
#~ "это задание не является обязательным для загрузки в PyPI и может быть "
#~ "пропущено."

#~ msgid ""
#~ ":pep:`639` (accepted in August 2024) has changed the way the ``license`` "
#~ "field is declared. Make sure your preferred build backend supports :pep:"
#~ "`639` before trying to apply the newer guidelines. As of February 2025, :"
#~ "doc:`setuptools <setuptools:userguide/pyproject_config>` and :ref:`flit "
#~ "<flit:pyproject_toml_project>` don't support :pep:`639` yet."
#~ msgstr ""
#~ ":pep:`639` (принят в августе 2024 года) изменил способ объявления поля "
#~ "``лицензия``. Убедитесь, что предпочитаемый вами бэкенд сборки "
#~ "поддерживает :pep:`639`, прежде чем пытаться применить новые "
#~ "рекомендации. По состоянию на февраль 2025 года, :doc:`setuptools "
#~ "<setuptools:userguide/pyproject_config>` и :ref:`flit <flit:"
#~ "pyproject_toml_project>` пока не поддерживают :pep:`639`."

#~ msgid ":pep:`639` license declaration"
#~ msgstr ":pep:`639` Лицензионная декларация"

#~ msgid "Legacy license declaration"
#~ msgstr "Декларация унаследованной лицензии"

#~ msgid ""
#~ "This can take two forms. You can put your license in a file, typically :"
#~ "file:`LICENSE` or :file:`LICENSE.txt`, and link that file here:"
#~ msgstr ""
#~ "Это может быть сделано в двух формах. Вы можете поместить лицензию в "
#~ "файл, обычно :file:`LICENSE` или :file:`LICENSE.txt`, и сослаться на этот "
#~ "файл здесь:"

#~ msgid "or you can write the name of the license:"
#~ msgstr "или вы можете написать название лицензии:"

#~ msgid ""
#~ "If you are using a standard, well-known license, it is not necessary to "
#~ "use this field. Instead, you should use one of the :ref:`classifiers` "
#~ "starting with ``License ::``. (As a general rule, it is a good idea to "
#~ "use a standard, well-known license, both to avoid confusion and because "
#~ "some organizations avoid software whose license is unapproved.)"
#~ msgstr ""
#~ "Если вы используете стандартную, хорошо известную лицензию, нет "
#~ "необходимости использовать это поле. Вместо этого следует использовать "
#~ "один из :ref:`classifiers`, начинающийся с ``License ::``. (Как правило, "
#~ "рекомендуется использовать стандартную, хорошо известную лицензию, как "
#~ "для того, чтобы избежать путаницы, так и потому, что некоторые "
#~ "организации избегают программ, лицензия которых не утверждена)."

#~ msgid ""
#~ ":pep:`639` (accepted in August 2024) has introduced the ``license-files`` "
#~ "field. Make sure your preferred build backend supports :pep:`639` before "
#~ "declaring the field. As of February 2025, :doc:`setuptools <setuptools:"
#~ "userguide/pyproject_config>` and :ref:`flit <flit:"
#~ "pyproject_toml_project>` don't support :pep:`639` yet."
#~ msgstr ""
#~ "В :pep:`639` (принят в августе 2024 года) появилось поле ``license-"
#~ "files``. Убедитесь, что ваш бэкенд сборки поддерживает :pep:`639`, прежде "
#~ "чем объявлять это поле. По состоянию на февраль 2025 года, :doc:"
#~ "`setuptools <setuptools:userguide/pyproject_config>` и :ref:`flit <flit:"
#~ "pyproject_toml_project>` пока не поддерживают :pep:`639`."

#~ msgid ""
#~ "Text string that is a valid SPDX `license expression <https://peps.python."
#~ "org/pep-0639/#term-license-expression>`__ as `defined in PEP 639 <https://"
#~ "peps.python.org/pep-0639/#spdx>`__."
#~ msgstr ""
#~ "Текстовая строка, являющаяся действительным выражением SPDX-лицензии "
#~ "<https://peps.python.org/pep-0639/#term-license-expression>`__, как "
#~ "определено в PEP 639 <https://peps.python.org/pep-0639/#spdx>`__."

#~ msgid "The table subkeys of the ``license`` key are deprecated."
#~ msgstr "Табличные подключи ключа ``license`` устарели."

#~ msgid "Rename dist-info-metadata in the Simple API"
#~ msgstr "Переименование dist- инфо-метаданных в простом API"

#~ msgid "Servers"
#~ msgstr "Серверы"

#~ msgid ""
#~ "The :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata, when used in the HTML representation of the "
#~ "Simple API, **MUST** be emitted using the attribute name ``data-core-"
#~ "metadata``, with the supported values remaining the same."
#~ msgstr ""
#~ "Метаданные : ссылка:спецификация файла метаданных API <simple-repository-"
#~ "api-metadata-file>`, используемые в HTML-представлении простого API, "
#~ "**ОБЯЗАТЕЛЬНО** передаются с помощью атрибута ``данные-ядро-метаданные``, "
#~ "при этом поддерживаемые значения остаются прежними."

#~ msgid ""
#~ "The :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata, when used in the :ref:`the JSON API "
#~ "specification <simple-repository-api-base>` JSON representation of the "
#~ "Simple API, **MUST** be emitted using the key ``core-metadata``, with the "
#~ "supported values remaining the same."
#~ msgstr ""
#~ "Метаданные из файла метаданных API <simple-repository-api-metadata-file>, "
#~ "используемые в JSON-представлении простого API <simple-repository-api-"
#~ "base>, **МОЖНО** передавать с помощью ключа ``ядро-метаданные``, при этом "
#~ "поддерживаемые значения остаются неизменными."

#~ msgid ""
#~ "To support clients that used the previous key names, the HTML "
#~ "representation **MAY** also be emitted using the ``data-dist-info-"
#~ "metadata``, and if it does so it **MUST** match the value of ``data-core-"
#~ "metadata``."
#~ msgstr ""
#~ "Для поддержки клиентов, использующих предыдущие имена ключей, HTML-"
#~ "представление **МОЖЕТ** также выдаваться с использованием ``данные-дист-"
#~ "инфо-метаданные``, и если оно это делает, то **ДОЛЖНО** соответствовать "
#~ "значению ``данные-ядро-метаданные``."

#~ msgid ""
#~ "Clients consuming any of the HTML representations of the Simple API "
#~ "**MUST** read the :ref:`the API metadata file specification <simple-"
#~ "repository-api-metadata-file>` metadata from the key ``data-core-"
#~ "metadata`` if it is present. They **MAY** optionally use the legacy "
#~ "``data-dist-info-metadata`` if it is present but ``data-core-metadata`` "
#~ "is not."
#~ msgstr ""
#~ "Клиенты, использующие любое из HTML-представлений Простого API, "
#~ "**ОБЯЗАНЫ** считывать :ref:`спецификацию файла метаданных API <simple-"
#~ "repository-api-metadata-file>` метаданные из ключа ``данные-ядро-"
#~ "метаданные``, если он присутствует. Они **МОГУТ** опционально "
#~ "использовать унаследованные ``данные-дист-инфо-метаданные``, если они "
#~ "присутствуют, но ``данные-ядро-метаданные`` отсутствуют."

#~ msgid ""
#~ "Clients consuming the JSON representation of the Simple API **MUST** read "
#~ "the :ref:`the API metadata file specification <simple-repository-api-"
#~ "metadata-file>` metadata from the key ``core-metadata`` if it is present. "
#~ "They **MAY** optionally use the legacy ``dist-info-metadata`` key if it "
#~ "is present but ``core-metadata`` is not."
#~ msgstr ""
#~ "Клиенты, потребляющие JSON-представление простого API, **ОБЯЗАНЫ** "
#~ "читать : ссылка:спецификация файла метаданных API <simple-repository-api-"
#~ "metadata-file>` метаданные из ключа ``ядро-метаданные``, если он "
#~ "присутствует. Они **МОГУТ** опционально использовать унаследованный ключ "
#~ "``дист-инфо-метаданные``, если он присутствует, а ``ядро-метаданные`` - "
#~ "нет."

#~ msgid ""
#~ "This spec sets the current API version to \"1.0\", and expects that "
#~ "future specs that further evolve the simple API will increment the minor "
#~ "version number."
#~ msgstr ""
#~ "Эта спецификация устанавливает текущую версию API на \"1.0\" и ожидает, "
#~ "что будущие спецификации, которые будут развивать простой API, будут "
#~ "увеличивать номер минорной версии."

#~ msgid "Additional Fields for the Simple API for Package Indexes"
#~ msgstr "Дополнительные поля для простого API для индексов пакетов"

#~ msgid ""
#~ "This specification defines version 1.1 of the simple repository API. For "
#~ "the HTML version of the API, there is no change from version 1.0. For the "
#~ "JSON version of the API, the following changes are made:"
#~ msgstr ""
#~ "Эта спецификация определяет версию 1.1 простого API репозитория. Для HTML-"
#~ "версии API нет никаких изменений по сравнению с версией 1.0. Для JSON-"
#~ "версии API сделаны следующие изменения:"

#~ msgid "The ``api-version`` must specify version 1.1 or later."
#~ msgstr "В ``api-версия`` должна быть указана версия 1.1 или более поздняя."

#~ msgid ""
#~ "Two new \"file information\" keys, ``size`` and ``upload-time``, are "
#~ "added to the ``files`` data."
#~ msgstr ""
#~ "В данные ``файлы`` добавлены два новых ключа \"информации о файле\", "
#~ "``размер`` и ``время загрузки``."

#~ msgid ""
#~ "The ``versions`` and ``size`` keys are mandatory. The ``upload-time`` key "
#~ "is optional."
#~ msgstr ""
#~ "Ключи ``версии`` и ``размер`` являются обязательными. Ключ ``время "
#~ "загрузки`` является необязательным."

#~ msgid "Additional file information"
#~ msgstr "Дополнительная информация о файле"

#~ msgid "Two new keys are added to the ``files`` key."
#~ msgstr "К ключу ``файлы`` добавляются два новых ключа."

#~ msgid ""
#~ "Most build backends automatically include license files in packages. See "
#~ "your backend's documentation for more details."
#~ msgstr ""
#~ "Большинство бэкендов сборки автоматически включают файлы лицензий в "
#~ "пакеты. Более подробную информацию можно найти в документации к вашему "
#~ "бэкенду."

#~ msgid ""
#~ "In this example, after installing your project, a ``spam-cli`` command "
#~ "will be available. Executing this command will do the equivalent of "
#~ "``from spam import main_cli; main_cli()``."
#~ msgstr ""
#~ "В этом примере после установки вашего проекта будет доступна команда "
#~ "``spam-cli''. Выполнение этой команды будет эквивалентно выполнению "
#~ "команды ``from spam import main_cli; main_cli()``."

#~ msgid ""
#~ "conda is the package management tool for `Anaconda <https://docs.anaconda."
#~ "com/anaconda/>`__ Python installations. Anaconda Python is a distribution "
#~ "from `Anaconda, Inc <https://www.anaconda.com/products/individual>`__ "
#~ "specifically aimed at the scientific community, and in particular on "
#~ "Windows where the installation of binary extensions is often difficult."
#~ msgstr ""
#~ "conda - это инструмент управления пакетами для установки `Anaconda "
#~ "<https://docs.anaconda.com/anaconda/>`__ Python. Anaconda Python - это "
#~ "дистрибутив от `Anaconda, Inc <https://www.anaconda.com/products/"
#~ "individual>`__, ориентированный на научное сообщество, в частности, на "
#~ "Windows, где установка бинарных расширений часто бывает затруднена."

#~ msgid ""
#~ "You will be prompted for a username and password. For the username, use "
#~ "``__token__``. For the password, use the token value, including the "
#~ "``pypi-`` prefix."
#~ msgstr ""
#~ "Вам будет предложено ввести имя пользователя и пароль. Для имени "
#~ "пользователя используйте ``__token__``. Для пароля используйте значение "
#~ "токена, включая префикс ``pypi-``."

#~ msgid "Update this page for build backends other than setuptools."
#~ msgstr "Обновите эту страницу для бэкендов сборки, отличных от setuptools."

#~ msgid ""
#~ "Read the file in :file:`setup.py` and get the version. Example (from `pip "
#~ "setup.py <https://github.com/pypa/pip/blob/003c7ac/setup.py>`_)::"
#~ msgstr ""
#~ "Прочитайте файл в : файл:`setup.py` и получите версию. Пример (из `pip "
#~ "setup.py <https://github.com/pypa/pip/blob/003c7ac/setup.py>`_)::"

#~ msgid ""
#~ "As of the release of setuptools 46.4.0, one can accomplish the same thing "
#~ "by instead placing the following in the project's :file:`setup.cfg` file "
#~ "(replacing \"package\" with the import name of the package):"
#~ msgstr ""
#~ "Начиная с версии setuptools 46.4.0, можно сделать то же самое, поместив в "
#~ "файл проекта :file:`setup.cfg` следующее (заменив \"package\" на "
#~ "импортное имя пакета):"

#~ msgid ""
#~ "As of the release of setuptools 61.0.0, one can specify the version "
#~ "dynamically in the project's :file:`pyproject.toml` file."
#~ msgstr ""
#~ "Начиная с версии setuptools 61.0.0, можно динамически указывать версию в "
#~ "файле проекта :file:`pyproject.toml`."

#~ msgid ""
#~ "Please be aware that declarative config indicators, including the ``attr:"
#~ "`` directive, are not supported in parameters to :file:`setup.py`."
#~ msgstr ""
#~ "Обратите внимание, что декларативные показатели конфигурации, включая "
#~ "директиву ``attr:``, не поддерживаются в параметрах к :file:`setup.py``."

#~ msgid ""
#~ "Use an external build tool that either manages updating both locations, "
#~ "or offers an API that both locations can use."
#~ msgstr ""
#~ "Используйте внешний инструмент сборки, который либо управляет обновлением "
#~ "в обоих местах, либо предлагает API, который могут использовать оба места."

#~ msgid ""
#~ "Few tools you could use, in no particular order, and not necessarily "
#~ "complete: `bump2version <https://pypi.org/project/bump2version>`_, "
#~ "`changes <https://pypi.org/project/changes>`_, `commitizen <https://pypi."
#~ "org/project/commitizen>`_, `zest.releaser <https://pypi.org/project/zest."
#~ "releaser>`_."
#~ msgstr ""
#~ "Несколько инструментов, которые могут вам пригодиться, без особого "
#~ "порядка и не обязательно полные: `bump2version <https://pypi.org/project/"
#~ "bump2version>`_, `changes <https://pypi.org/project/changes>`_, "
#~ "`commitizen <https://pypi.org/project/commitizen>`_, `zest.releaser "
#~ "<https://pypi.org/project/zest.releaser>`_."

#~ msgid ""
#~ "Set the value to a ``__version__`` global variable in a dedicated module "
#~ "in your project (e.g. :file:`version.py`), then have :file:`setup.py` "
#~ "read and ``exec`` the value into a variable."
#~ msgstr ""
#~ "Задайте значение глобальной переменной ``__version__`` в специальном "
#~ "модуле вашего проекта (например, :file:`version.py`), а затем пусть :file:"
#~ "`setup.py` прочитает и ``исполнит`` значение в переменной."

#~ msgid ""
#~ "Example using this technique: `warehouse <https://github.com/pypa/"
#~ "warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/"
#~ "__about__.py>`_."
#~ msgstr ""
#~ "Пример использования этой техники: `warehouse <https://github.com/pypa/"
#~ "warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/"
#~ "__about__.py>`_."

#~ msgid ""
#~ "Place the value in a simple ``VERSION`` text file and have both :file:"
#~ "`setup.py` and the project code read it."
#~ msgstr ""
#~ "Поместите это значение в простой текстовый файл ``VERSION`` и пусть его "
#~ "читают как :file:`setup.py``, так и код проекта."

#~ msgid ""
#~ "An advantage with this technique is that it's not specific to Python.  "
#~ "Any tool can read the version."
#~ msgstr ""
#~ "Преимущество этой техники в том, что она не привязана к Python.  Любой "
#~ "инструмент может прочитать версию."

#~ msgid ""
#~ "With this approach you must make sure that the ``VERSION`` file is "
#~ "included in all your source and binary distributions (e.g. add ``include "
#~ "VERSION`` to your :file:`MANIFEST.in`)."
#~ msgstr ""
#~ "При таком подходе вы должны убедиться, что файл ``VERSION`` включен во "
#~ "все ваши исходные и бинарные дистрибутивы (например, добавьте ``include "
#~ "VERSION`` в ваш :file:`MANIFEST.in``)."

#~ msgid ""
#~ "Set the value in :file:`setup.py`, and have the project code use the "
#~ "``importlib.metadata`` API to fetch the value at runtime. (``importlib."
#~ "metadata`` was introduced in Python 3.8 and is available to older "
#~ "versions as the ``importlib-metadata`` project.)  An installed project's "
#~ "version can be fetched with the API as follows::"
#~ msgstr ""
#~ "Задайте значение в :file:`setup.py`, а код проекта пусть использует API "
#~ "``importlib.metadata`` для получения значения во время выполнения. "
#~ "(``importlib.metadata`` был представлен в Python 3.8 и доступен для более "
#~ "старых версий в виде проекта ``importlib-metadata``).  Версия "
#~ "установленного проекта может быть получена с помощью API следующим "
#~ "образом::"

#~ msgid ""
#~ "Be aware that the ``importlib.metadata`` API only knows about what's in "
#~ "the installation metadata, which is not necessarily the code that's "
#~ "currently imported."
#~ msgstr ""
#~ "Имейте в виду, что API ``importlib.metadata`` знает только о том, что "
#~ "находится в метаданных установки, а это не обязательно код, который "
#~ "импортируется в данный момент."

#~ msgid ""
#~ "If a project uses this method to fetch its version at runtime, then its "
#~ "``install_requires`` value needs to be edited to install ``importlib-"
#~ "metadata`` on pre-3.8 versions of Python like so::"
#~ msgstr ""
#~ "Если проект использует этот метод для получения своей версии во время "
#~ "выполнения, то его значение ``install_requires`` должно быть "
#~ "отредактировано для установки ``importlib-metadata`` на версии Python до "
#~ "3.8 следующим образом::"

#~ msgid ""
#~ "An older (and less efficient) alternative to ``importlib.metadata`` is "
#~ "the ``pkg_resources`` API provided by ``setuptools``::"
#~ msgstr ""
#~ "Более старой (и менее эффективной) альтернативой ``importlib.metadata`` "
#~ "является API ``pkg_resources``, предоставляемый ``setuptools``::"

#~ msgid ""
#~ "If a project uses ``pkg_resources`` to fetch its own version at runtime, "
#~ "then ``setuptools`` must be added to the project's ``install_requires`` "
#~ "list."
#~ msgstr ""
#~ "Если проект использует ``pkg_resources`` для получения собственной версии "
#~ "во время выполнения, то ``setuptools`` должен быть добавлен в список "
#~ "``install_requires`` проекта."

#~ msgid ""
#~ "Example using this technique: `setuptools <https://github.com/pypa/"
#~ "setuptools/blob/main/setuptools/version.py>`_."
#~ msgstr ""
#~ "Пример использования этой техники: `setuptools <https://github.com/pypa/"
#~ "setuptools/blob/main/setuptools/version.py>`_."

#~ msgid ""
#~ "Set the value to ``__version__`` in ``sample/__init__.py`` and import "
#~ "``sample`` in :file:`setup.py`."
#~ msgstr ""
#~ "Установите значение ``__version__`` в файле ``sample/__init__.py`` и "
#~ "импортируйте ``sample`` в :file:`setup.py``."

#~ msgid ""
#~ "Although this technique is common, beware that it will fail if ``sample/"
#~ "__init__.py`` imports packages from ``install_requires`` dependencies, "
#~ "which will very likely not be installed yet when :file:`setup.py` is run."
#~ msgstr ""
#~ "Хотя эта техника широко распространена, помните, что она не сработает, "
#~ "если ``sample/__init__.py`` импортирует пакеты из зависимостей "
#~ "``install_requires``, которые, скорее всего, еще не будут установлены на "
#~ "момент запуска :file:`setup.py``."

#~ msgid ""
#~ "Keep the version number in the tags of a version control system (Git, "
#~ "Mercurial, etc) instead of in the code, and automatically extract it from "
#~ "there using `setuptools_scm <https://pypi.org/project/setuptools-scm/>`_."
#~ msgstr ""
#~ "Храните номер версии в тегах системы контроля версий (Git, Mercurial и т."
#~ "д.), а не в коде, и автоматически извлекайте его оттуда с помощью "
#~ "`setuptools_scm <https://pypi.org/project/setuptools-scm/>`_."

#~ msgid ""
#~ "There is a significant difference between the ``[build-system]`` and "
#~ "``[project]`` tables. The former should always be present, regardless of "
#~ "which build backend you use (since it *defines* the tool you use). The "
#~ "latter is understood by *most* build backends, but some build backends "
#~ "use a different format."
#~ msgstr ""
#~ "Существует существенная разница между таблицами ``[build-system]`` и "
#~ "``[project]``. Первая должна присутствовать всегда, независимо от того, "
#~ "какой бэкенд сборки вы используете (поскольку она *определяет* "
#~ "инструмент, который вы используете). Вторая понимается *большинством* "
#~ "бэкендов сборки, но некоторые бэкенды используют другой формат."

#~ msgid ""
#~ "This guide is specifically for users of :ref:`setuptools`, other "
#~ "packaging tools such as ``flit`` may offer similar functionality but "
#~ "users will need to consult relevant documentation."
#~ msgstr ""
#~ "Это руководство предназначено специально для пользователей :ref:"
#~ "`setuptools`, другие инструменты упаковки, такие как ``flit``, могут "
#~ "предлагать аналогичную функциональность, но пользователям необходимо "
#~ "обратиться к соответствующей документации."

#~ msgid "This workflow requires that:"
#~ msgstr "Этот рабочий процесс требует, чтобы:"

#~ msgid "The publisher is using the latest version of :ref:`setuptools`,"
#~ msgstr "Издатель использовал последнюю версию :ref:`setuptools`,"

#~ msgid "The latest version of :ref:`twine` is used to upload the package,"
#~ msgstr "Для загрузки пакета использовалась последняя версия :ref:`twine`,"

#~ msgid ""
#~ "Since it is possible to override the :file:`setup.cfg` settings via CLI "
#~ "flags, make sure that your scripts don't have ``--universal`` in your "
#~ "package creation scripts."
#~ msgstr ""
#~ "Поскольку настройки :file:`setup.cfg` можно переопределить с помощью "
#~ "флагов CLI, убедитесь, что в ваших скриптах создания пакетов нет ``--"
#~ "universal``."

#~ msgid "1. Download the newest version of Setuptools"
#~ msgstr "1. Скачайте новейшую версию Setuptools"

#~ msgid ""
#~ "Ensure that before you generate source distributions or binary "
#~ "distributions, you update Setuptools and install twine."
#~ msgstr ""
#~ "Убедитесь, что перед созданием дистрибутивов исходных кодов или двоичных "
#~ "дистрибутивов вы обновили Setuptools и установили twine."

#~ msgid "Steps:"
#~ msgstr "Шаги:"

#~ msgid "``setuptools`` version should be above 24.0.0."
#~ msgstr "``setuptools`` версия должна быть выше 24.0.0."

#~ msgid ""
#~ "The way to set those values is within the call to ``setup`` within your :"
#~ "file:`setup.py` script. This will insert the ``Requires-Python`` metadata "
#~ "values based on the argument you provide in ``python_requires``."
#~ msgstr ""
#~ "Установить эти значения можно с помощью вызова ``setup`` в вашем скрипте :"
#~ "file:`setup.py``. Он вставит значения метаданных ``Requires-Python`` на "
#~ "основе аргумента, указанного в ``python_requires``."

#~ msgid "4. Using Twine to publish"
#~ msgstr "4. Используйте Twine для публикации"

#~ msgid ""
#~ "Twine has a number of advantages, apart from being faster it is now the "
#~ "supported method for publishing packages."
#~ msgstr ""
#~ "Twine имеет ряд преимуществ, кроме того, что он быстрее, теперь это "
#~ "поддерживаемый метод для публикации пакетов."

#~ msgid "Make sure you are using the newest version of Twine, at least 1.9."
#~ msgstr ""
#~ "Убедитесь, что вы используете новейшую версию Twine, по крайней мере, 1,9."

#~ msgid ""
#~ "Once you have published a package with the Requires-Python metadata, you "
#~ "can then make a further update removing that Python runtime from support."
#~ msgstr ""
#~ "После того, как вы опубликовали пакет с метаданными Needs-Python, вы "
#~ "можете сделать еще одно обновление, удалив время выполнения Python из "
#~ "поддержки."

#~ msgid "It must be done in this order for the automated fallback to work."
#~ msgstr ""
#~ "Чтобы автоматический откат сработал, его нужно выполнить именно в таком "
#~ "порядке."

#~ msgid ""
#~ "For example, you published the Requires-Python: \">=2.7\" as version "
#~ "1.0.0 of your package."
#~ msgstr ""
#~ "Например, вы опубликовали Needs-Python: «>=2.7» в качестве версии 1.0.0 "
#~ "вашего пакета."

#~ msgid ""
#~ "If you were then to update the version string to \">=3.5\", and publish a "
#~ "new version 2.0.0 of your package, any users running Pip 9.0+ from "
#~ "version 2.7 will have version 1.0.0 of the package installed, and any "
#~ ">=3.5 users will receive version 2.0.0."
#~ msgstr ""
#~ "Если вы обновите строку версии до \">=3.5\" и опубликуете новую версию "
#~ "2.0.0 вашего пакета, у всех пользователей, работающих с Pip 9.0+ с версии "
#~ "2.7, будет установлена версия 1.0.0 пакета, а все пользователи >=3.5 "
#~ "получат версию 2.0.0."

#~ msgid "The summary description of the project."
#~ msgstr "Краткое описание проекта."

#~ msgid "Wheel vs Egg"
#~ msgstr "Колеса против яиц"

#~ msgid ""
#~ ":term:`Wheel` and :term:`Egg` are both packaging formats that aim to "
#~ "support the use case of needing an install artifact that doesn't require "
#~ "building or compilation, which can be costly in testing and production "
#~ "workflows."
#~ msgstr ""
#~ ":термин: `Wheel' и :term:`Egg' - это оба формата упаковки, которые "
#~ "направлены на поддержку случая использования объекта установки, который "
#~ "не требует строительства или компиляции, что может быть дорогостоящим в "
#~ "тестировании и производстве рабочих процессов."

#~ msgid ""
#~ ":term:`Wheel` is currently considered the standard for :term:`built "
#~ "<Built Distribution>` and :term:`binary <Binary Distribution>` packaging "
#~ "for Python."
#~ msgstr ""
#~ ":term:`Wheel` в настоящее время считается стандартом для :term:`built "
#~ "<Built Distribution>` и :term:`binary <Binary Distribution>` упаковки для "
#~ "Python."

#~ msgid ""
#~ ":term:`Egg` uploads have been disabled for upload to PyPI, per :pep:"
#~ "`715`. Read the `deprecation notice <https://blog.pypi.org/"
#~ "posts/2023-06-26-deprecate-egg-uploads/>`_ for more information."
#~ msgstr ""
#~ "Загрузки :term:`Egg` были отключены для загрузки в PyPI, согласно :pep:"
#~ "`715`. Для получения дополнительной информации читайте уведомление о "
#~ "депривации <https://blog.pypi.org/posts/2023-06-26-deprecate-egg-uploads/"
#~ ">`_."

#~ msgid ""
#~ "A :term:`Built Distribution` format introduced by an official :doc:"
#~ "`standard specification </specifications/binary-distribution-format/>`, "
#~ "which is intended to replace the :term:`Egg` format.  Wheel is currently "
#~ "supported by :ref:`pip`."
#~ msgstr ""
#~ "Формат :term:`Built Distribution`, введенный официальной спецификацией :"
#~ "doc:`standard specification </specifications/binary-distribution-format/"
#~ ">`, который призван заменить формат :term:`Egg`.  В настоящее время Wheel "
#~ "поддерживается :ref:`pip`."

#~ msgid ""
#~ "If you're familiar with Python packaging and installation, and just want "
#~ "to know what tools are currently recommended, then here it is."
#~ msgstr ""
#~ "Если вы знакомы с упаковкой и установкой Python и просто хотите узнать, "
#~ "какие инструменты сейчас рекомендуются, то вам сюда."

#~ msgid "Application dependency management"
#~ msgstr "Управление зависимостями приложения"

#~ msgid ""
#~ "Use :ref:`pip` in a `secure manner`_ to install a Python application and "
#~ "its dependencies during deployment."
#~ msgstr ""
#~ "Используйте :ref:`pip` `безопасным способом`_ для установки приложения "
#~ "Python и его зависимостей во время развертывания."

#~ msgid ""
#~ "Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
#~ "application-specific dependencies from a shared Python installation. [4]_"
#~ msgstr ""
#~ "Используйте :ref:`virtualenv` или :doc:`venv <python:library/venv>` для "
#~ "изоляции специфических для приложения зависимостей от общей установки "
#~ "Python. [4]_"

#~ msgid ""
#~ "Use `pip-tools`_, :ref:`pipenv`, or `poetry`_ to generate the fully-"
#~ "specified application-specific dependencies, when developing Python "
#~ "applications."
#~ msgstr ""
#~ "Используйте `pip-tools`_, :ref:`pipenv` или `poetry`_ для генерации "
#~ "полностью определенных зависимостей, специфичных для приложения, при "
#~ "разработке приложений на Python."

#~ msgid "Installation tool recommendations"
#~ msgstr "Рекомендации по инструментам установки"

#~ msgid ""
#~ "Use :ref:`pip` to install Python :term:`packages <Distribution Package>` "
#~ "from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on "
#~ "how :ref:`pip` is installed, you may need to also install :ref:`wheel` to "
#~ "get the benefit of wheel caching. [3]_"
#~ msgstr ""
#~ "Используйте :ref:`pip` для установки Python :term:`packages "
#~ "<Дистрибутивный пакет>` из :term:`PyPI <Индекс пакетов Python (PyPI)>`. "
#~ "[1]_ [2]_ В зависимости от того, как установлен :ref:`pip`, вам может "
#~ "потребоваться также установить :ref:`wheel`, чтобы получить преимущества "
#~ "кэширования колес. [3]_"

#~ msgid ""
#~ "Use :ref:`virtualenv` or :doc:`venv <python:library/venv>` to isolate "
#~ "project-specific dependencies from a shared Python installation. [4]_"
#~ msgstr ""
#~ "Используйте :ref:`virtualenv` или :doc:`venv <python:library/venv>`, "
#~ "чтобы изолировать специфические для проекта зависимости от общей "
#~ "установки Python. [4]_"

#~ msgid ""
#~ "If you're looking for management of fully integrated cross-platform "
#~ "software stacks, consider:"
#~ msgstr ""
#~ "Если вам требуется управление полностью интегрированными "
#~ "кроссплатформенными программными стеками, рассмотрите этот вариант:"

#~ msgid ":ref:`buildout`: primarily focused on the web development community"
#~ msgstr ""
#~ ":ref:`buildout`: в первую очередь ориентирован на сообщество веб-"
#~ "разработчиков"

#~ msgid ""
#~ ":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the "
#~ "scientific community."
#~ msgstr ""
#~ ":ref:`spack`, :ref:`hashdist` или :ref:`conda`: в первую очередь "
#~ "ориентированы на научное сообщество."

#~ msgid "Packaging tool recommendations"
#~ msgstr "Рекомендации по инструментам упаковки"

#~ msgid "Use :ref:`setuptools` to define projects. [5]_ [6]_"
#~ msgstr "Используйте :ref:`setuptools` для определения проектов. [5]_ [6]_"

#~ msgid ""
#~ "Use :ref:`build` to create :term:`Source Distributions <Source "
#~ "Distribution (or \"sdist\")>` and :term:`wheels <Wheel>`."
#~ msgstr ""
#~ "Используйте :ref:`build` для создания :term:`Source Distributions <Source "
#~ "Distribution (или \"sdist\")>` и :term:`wheels <Wheel>`."

#~ msgid ""
#~ "Use `twine <https://pypi.org/project/twine>`_ for uploading distributions "
#~ "to :term:`PyPI <Python Package Index (PyPI)>`."
#~ msgstr ""
#~ "Используйте `twine <https://pypi.org/project/twine>`_ для загрузки "
#~ "дистрибутивов в :term:`PyPI <Python Package Index (PyPI)>`."

#~ msgid "Publishing platform migration"
#~ msgstr "Миграция издательской платформы"

#~ msgid ""
#~ "The original Python Package Index implementation (previously hosted at "
#~ "`pypi.python.org <https://pypi.python.org>`_) has been phased out in "
#~ "favour of an updated implementation hosted at `pypi.org <https://pypi."
#~ "org>`_."
#~ msgstr ""
#~ "Оригинальная реализация Python Package Index (ранее размещавшаяся по "
#~ "адресу `pypi.python.org <https://pypi.python.org>`_) была постепенно "
#~ "отменена в пользу обновленной реализации, размещенной по адресу `pypi.org "
#~ "<https://pypi.org>`_."

#~ msgid ""
#~ "See :ref:`Migrating to PyPI.org` for more information on the status of "
#~ "the migration, and what settings to change in your clients."
#~ msgstr ""
#~ "Смотрите :ref:`Миграция на PyPI.org` для получения дополнительной "
#~ "информации о статусе миграции и о том, какие настройки следует изменить в "
#~ "ваших клиентах."

#~ msgid ""
#~ "There are some cases where you might choose to use ``easy_install`` "
#~ "(from :ref:`setuptools`), e.g. if you need to install from :term:`Eggs "
#~ "<Egg>` (which pip doesn't support).  For a detailed breakdown, see :ref:"
#~ "`pip vs easy_install`."
#~ msgstr ""
#~ "В некоторых случаях вы можете использовать ``easy_install`` (из :ref:"
#~ "`setuptools``), например, если вам нужно установить из :term:`Eggs <Egg>` "
#~ "(что pip не поддерживает).  Подробное описание смотрите в :ref:`pip vs "
#~ "easy_install`."

#~ msgid ""
#~ "The acceptance of :pep:`453` means that :ref:`pip` will be available by "
#~ "default in most installations of Python 3.4 or later.  See the :pep:"
#~ "`rationale section <453#rationale>` from :pep:`453` as for why pip was "
#~ "chosen."
#~ msgstr ""
#~ "Принятие :pep:`453` означает, что :ref:`pip` будет доступен по умолчанию "
#~ "в большинстве установок Python 3.4 или более поздних версий.  О том, "
#~ "почему был выбран pip, читайте в разделе <453#rationale> из :pep:`453`."

#~ msgid ""
#~ "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and :ref:"
#~ "`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:"
#~ "`venv <venv>` do not currently.  Also, the common \"python-pip\" package "
#~ "that's found in various linux distros, does not depend on \"python-"
#~ "wheel\" currently."
#~ msgstr ""
#~ "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ и :ref:"
#~ "`virtualenv` устанавливают :ref:`wheel`, тогда как :ref:`ensurepip` и :"
#~ "ref:`venv <venv>` в настоящее время не устанавливают.  Кроме того, "
#~ "распространенный пакет \"python-pip\", который можно найти в различных "
#~ "дистрибутивах linux, в настоящее время не зависит от \"python-wheel\"."

#~ msgid ""
#~ "Beginning with Python 3.4, ``venv`` will create virtualenv environments "
#~ "with ``pip`` installed, thereby making it an equal alternative to :ref:"
#~ "`virtualenv`. However, using :ref:`virtualenv` will still be recommended "
#~ "for users that need cross-version consistency."
#~ msgstr ""
#~ "Начиная с Python 3.4, ``venv`` будет создавать среды virtualenv с "
#~ "установленным ``pip``, тем самым делая его равноправной альтернативой :"
#~ "ref:`virtualenv``. Тем не менее, использование :ref:`virtualenv` по-"
#~ "прежнему рекомендуется для пользователей, которым необходима кросс-"
#~ "версионная согласованность."

#~ msgid ""
#~ "Although you can use pure :ref:`distutils` for many projects, it does not "
#~ "support defining dependencies on other projects and is missing several "
#~ "convenience utilities for automatically populating distribution metadata "
#~ "correctly that are provided by ``setuptools``. Being outside the standard "
#~ "library, ``setuptools`` also offers a more consistent feature set across "
#~ "different versions of Python, and (unlike ``distutils``), recent versions "
#~ "of ``setuptools`` support all of the modern metadata fields described in :"
#~ "ref:`core-metadata`."
#~ msgstr ""
#~ "Хотя вы можете использовать чистый :ref:`distutils` для многих проектов, "
#~ "он не поддерживает определение зависимостей от других проектов и лишен "
#~ "нескольких удобных утилит для автоматического заполнения метаданных "
#~ "дистрибутива, которые предоставляются ``setuptools``. Находясь вне "
#~ "стандартной библиотеки, ``setuptools`` также предлагает более "
#~ "согласованный набор функций в разных версиях Python, и (в отличие от "
#~ "``distutils``) последние версии ``setuptools`` поддерживают все "
#~ "современные поля метаданных, описанные в :ref:`core-metadata``."

#~ msgid ""
#~ "Even for projects that do choose to use ``distutils``, when :ref:`pip` "
#~ "installs such projects directly from source (rather than installing from "
#~ "a prebuilt :term:`wheel <Wheel>` file), it will actually build your "
#~ "project using :ref:`setuptools` instead."
#~ msgstr ""
#~ "Даже для проектов, которые решили использовать ``distutils``, когда :ref:"
#~ "`pip` устанавливает такие проекты непосредственно из исходного кода (а не "
#~ "устанавливает из предварительно собранного файла :term:`wheel <Wheel>`), "
#~ "он фактически соберет ваш проект, используя вместо этого :ref:"
#~ "`setuptools``."

#~ msgid ""
#~ "`distribute`_ (a fork of setuptools) was merged back into :ref:"
#~ "`setuptools` in June 2013, thereby making setuptools the default choice "
#~ "for packaging."
#~ msgstr ""
#~ "`distribute`_ (форк setuptools) был объединен обратно в :ref:`setuptools` "
#~ "в июне 2013 года, тем самым сделав setuptools выбором по умолчанию для "
#~ "упаковки."

#~ msgid "Standards compliance for interoperability"
#~ msgstr "Соответствие стандартам совместимости"

#~ msgid "Here are some examples of compliant version numbers::"
#~ msgstr "Вот несколько примеров совместимых номеров версий::"

#~ msgid ""
#~ "To further accommodate historical variations in approaches to version "
#~ "numbering, :pep:`440` also defines a comprehensive technique for :pep:"
#~ "`version normalisation <440#normalization>` that maps variant spellings "
#~ "of different version numbers to a standardised canonical form."
#~ msgstr ""
#~ "Для дальнейшего учета исторических вариаций в подходах к нумерации "
#~ "версий, :pep:`440` также определяет комплексную технику нормализации :pep:"
#~ "`версий <440#normalization>`, которая отображает варианты написания "
#~ "различных номеров версий в стандартизированную каноническую форму."

#~ msgid "Scheme choices"
#~ msgstr "Выбор схемы"

#~ msgid ""
#~ "For new projects, the recommended versioning scheme is based on `Semantic "
#~ "Versioning <https://semver.org/>`_, but adopts a different approach to "
#~ "handling pre-releases and build metadata."
#~ msgstr ""
#~ "Для новых проектов рекомендуемая схема версионирования основана на "
#~ "`Semantic Versioning <https://semver.org/>`_, но использует другой подход "
#~ "к работе с пре-релизами и метаданными сборки."

#~ msgid ""
#~ "Adopting this approach as a project author allows users to make use of :"
#~ "pep:`\"compatible release\" <440#compatible-release>` specifiers, where "
#~ "``name ~= X.Y`` requires at least release X.Y, but also allows any later "
#~ "release with a matching MAJOR version."
#~ msgstr ""
#~ "Принятие такого подхода автором проекта позволяет пользователям "
#~ "использовать спецификаторы :pep:`\"compatible release\" <440#compatible-"
#~ "release>`, где ``name ~= X.Y`` требует как минимум релиза X.Y, но также "
#~ "позволяет использовать любой более поздний релиз с соответствующей MAJOR-"
#~ "версией."

#~ msgid "Date based versioning"
#~ msgstr "Версионирование на основе дат"

#~ msgid ""
#~ "Version numbers for date based projects typically take the form of YEAR."
#~ "MONTH (for example, ``12.04``, ``15.10``)."
#~ msgstr ""
#~ "Номера версий для проектов, основанных на дате, обычно имеют вид YEAR."
#~ "MONTH (например, ``12.04``, ``15.10``)."

#~ msgid ""
#~ "This is the simplest possible versioning scheme, and consists of a single "
#~ "number which is incremented every release."
#~ msgstr ""
#~ "Это простейшая схема версионирования, состоящая из одного числа, которое "
#~ "увеличивается при каждом выпуске."

#~ msgid "Pre-release versioning"
#~ msgstr "Версионирование предварительных выпусков"

#~ msgid ""
#~ "Regardless of the base versioning scheme, pre-releases for a given final "
#~ "release may be published as:"
#~ msgstr ""
#~ "Независимо от базовой схемы версий, предварительные выпуски для данного "
#~ "финального выпуска могут быть опубликованы как:"

#~ msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
#~ msgstr "ноль или более выпусков dev (обозначаются суффиксом \".devN\")"

#~ msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
#~ msgstr "ноль или более альфа-релизов (обозначаются суффиксом \".aN\")"

#~ msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
#~ msgstr "ноль или более бета-версий (обозначаются суффиксом \".bN\")"

#~ msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
#~ msgstr ""
#~ "ноль или более кандидатов на выпуск (обозначаются суффиксом \".rcN\")"

#~ msgid ""
#~ "``pip`` and other modern Python package installers ignore pre-releases by "
#~ "default when deciding which versions of dependencies to install."
#~ msgstr ""
#~ "``pip`` и другие современные программы установки пакетов Python по "
#~ "умолчанию игнорируют предварительные выпуски, когда решают, какие версии "
#~ "зависимостей устанавливать."

#~ msgid ""
#~ "A local version identifier takes the form ``<public version "
#~ "identifier>+<local version label>``. For example::"
#~ msgstr ""
#~ "Идентификатор локальной версии имеет вид ``<идентификатор публичной "
#~ "версии>+<метка локальной версии>``. Например::"

#~ msgid "Three options are available in this area:"
#~ msgstr "В этой области доступны три варианта:"

#~ msgid "pip provides local caching options,"
#~ msgstr "pip предоставляет возможности локального кэширования,"

#~ msgid ""
#~ "devpi provides higher-level caching option, potentially shared amongst "
#~ "many users or machines, and"
#~ msgstr ""
#~ "devpi предоставляет возможность кэширования более высокого уровня, "
#~ "потенциально разделяемого между многими пользователями или машинами, и"

#~ msgid ""
#~ "bandersnatch provides a local complete mirror of all PyPI :term:`packages "
#~ "<Distribution Package>`."
#~ msgstr ""
#~ "bandersnatch предоставляет локальное полное зеркало всех PyPI :term:"
#~ "`packages <Distribution Package>`."

#~ msgid "Caching with devpi"
#~ msgstr "Кэширование с помощью devpi"

#~ msgid ""
#~ "devpi is a caching proxy server which you run on your laptop, or some "
#~ "other machine you know will always be available to you. See the `devpi "
#~ "documentation for getting started`__."
#~ msgstr ""
#~ "devpi - это кэширующий прокси-сервер, который вы запускаете на своем "
#~ "ноутбуке или другой машине, которая, как вы знаете, всегда будет доступна "
#~ "для вас. Для начала работы смотрите документацию `devpi`."

#~ msgid "Complete mirror with bandersnatch"
#~ msgstr "Зеркало в комплекте с бандерснатчем"

#~ msgid ""
#~ "bandersnatch will set up a complete local mirror of all PyPI :term:"
#~ "`packages <Distribution Package>` (externally-hosted packages are not "
#~ "mirrored). See the `bandersnatch documentation for getting that going`__."
#~ msgstr ""
#~ "bandersnatch создаст полное локальное зеркало всех пакетов PyPI :term:"
#~ "`packages <Distribution Package>` (пакеты, размещенные на внешних "
#~ "хостингах, не зеркалируются). См. документацию `bandersnatch о том, как "
#~ "это сделать`__."

#~ msgid ""
#~ "A benefit of devpi is that it will create a mirror which includes :term:"
#~ "`packages <Distribution Package>` that are external to PyPI, unlike "
#~ "bandersnatch which will only cache :term:`packages <Distribution "
#~ "Package>` hosted on PyPI."
#~ msgstr ""
#~ "Преимущество devpi в том, что он создаст зеркало, включающее :term:"
#~ "`пакеты <Distribution Package>`, которые являются внешними по отношению к "
#~ "PyPI, в отличие от bandersnatch, который будет кэшировать только :term:"
#~ "`пакеты <Distribution Package>`, размещенные на PyPI."

#, fuzzy
#~ msgid ""
#~ "By default, any hash algorithm available via `hashlib <https://docs."
#~ "python.org/3/library/hashlib.html>`_ (specifically any that can be passed "
#~ "to ``hashlib.new()`` and do not require additional parameters) can be "
#~ "used as a key for the hashes dictionary. At least one secure algorithm "
#~ "from ``hashlib.algorithms_guaranteed`` **SHOULD** always be included. At "
#~ "the time of this spec, ``sha256`` specifically is recommended."
#~ msgstr ""
#~ "В качестве ключа для словаря хэшей можно использовать любой алгоритм, "
#~ "доступный через ``hashlib`` (в частности, все те, которые можно передать "
#~ "в ``hashlib.new()`` и которые не требуют дополнительных параметров). По "
#~ "крайней мере, один безопасный алгоритм из ``hashlib."
#~ "algorithms_guaranteed`` ДОЛЖЕН быть всегда включен. На момент написания "
#~ "статьи рекомендуется использовать ``sha256``."

#~ msgid ""
#~ "This specification has been **provisionally accepted**. It is subject to "
#~ "being changed or abandoned. See the `PEP 723 conditional acceptance "
#~ "thread <pep723-thread_>`_ for details."
#~ msgstr ""
#~ "Эта спецификация была **временно принята**. Она может быть изменена или "
#~ "отменена. Подробности см. в ветке `PEP 723 условное принятие <pep723-"
#~ "thread_>`_."

#~ msgid "This document MAY include the ``[run]`` and ``[tool]`` tables."
#~ msgstr "Этот документ МОЖЕТ включать таблицы ``[run]`` и ``[tool]``."

#~ msgid ""
#~ "The :ref:`tool table <pyproject-tool-table>` MAY be used by any tool, "
#~ "script runner or otherwise, to configure behavior."
#~ msgstr ""
#~ "Таблица инструментов <pyproject-tool-table>` МОЖЕТ быть использована "
#~ "любым инструментом, программой запуска скриптов или иным способом, для "
#~ "настройки поведения."

#~ msgid "The ``[run]`` table MAY include the following optional fields:"
#~ msgstr "Таблица ``[run]`` МОЖЕТ включать следующие необязательные поля:"

#~ msgid ""
#~ "Any future specifications that define additional fields for the ``[run]`` "
#~ "table when used in a ``pyproject.toml`` file MUST include the "
#~ "aforementioned fields exactly as specified. The fields defined by this "
#~ "specification are equally as applicable to full-fledged projects as they "
#~ "are to single-file scripts."
#~ msgstr ""
#~ "Любые будущие спецификации, определяющие дополнительные поля для таблицы "
#~ "``[run]`` при использовании в файле ``pyproject.toml``, ДОЛЖНЫ включать "
#~ "вышеупомянутые поля именно в том виде, в котором они указаны. Поля, "
#~ "определенные этой спецификацией, одинаково применимы как к полноценным "
#~ "проектам, так и к однофайловым скриптам."

#~ msgid ""
#~ "The following is an example of a proposed syntax for single-file Rust "
#~ "projects that embeds their equivalent of ``pyproject.toml``, which is "
#~ "called ``Cargo.toml``:"
#~ msgstr ""
#~ "Ниже приведен пример предлагаемого синтаксиса для однофайловых проектов "
#~ "Rust, в которые встраивается эквивалент ``pyproject.toml``, который "
#~ "называется ``Cargo.toml``:"

#~ msgid ""
#~ "pex is both a library and tool for generating :file:`.pex` (Python "
#~ "EXecutable) files, standalone Python environments in the spirit of :ref:"
#~ "`virtualenv`. :file:`.pex` files are just carefully constructed zip files "
#~ "with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are "
#~ "designed to make deployment of Python applications as simple as ``cp``."
#~ msgstr ""
#~ "pex - это библиотека и инструмент для создания :file:`.pex` (Python "
#~ "EXecutable) файлов, автономных окружений Python в духе :ref:"
#~ "`virtualenv`. :file:`.pex` файлы - это просто тщательно сконструированные "
#~ "zip файлы с ``#!/usr/bin/env python`` и специальным :file:`__main__.py``, "
#~ "и предназначены для того, чтобы сделать развертывание Python приложений "
#~ "таким же простым, как ``cp``."

#~ msgid ""
#~ "The HTML format is defined in :pep:`503`, with the addition of \"yank\" "
#~ "support (allowing a kind of file deletion) in :pep:`592`, specifying the "
#~ "interface version provided by an index server in :pep:`629`, and "
#~ "providing package metadata independently from a package in :pep:`658` and "
#~ "revised in :pep:`714`."
#~ msgstr ""
#~ "Формат HTML определен в :pep:`503`, с добавлением поддержки "
#~ "\"yank\" (позволяющей удалять файлы) в :pep:`592`, указанием версии "
#~ "интерфейса, предоставляемого индексным сервером в :pep:`629`, "
#~ "предоставлением метаданных пакета независимо от пакета в :pep:`658` и "
#~ "пересмотром в :pep:`714`."

#~ msgid ""
#~ "If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like "
#~ "Heroku or Google App Engine, you are going to want to follow their "
#~ "respective packaging guides."
#~ msgstr ""
#~ "Если вы разрабатываете для \"платформы как сервиса\" или PaaS, например, "
#~ "Heroku или Google App Engine, вам нужно следовать их соответствующим "
#~ "руководствам по упаковке."

#~ msgid ""
#~ "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-"
#~ "python>`_"
#~ msgstr ""
#~ "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-"
#~ "python>`_"

#~ msgid ""
#~ "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
#~ msgstr ""
#~ "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"

#~ msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
#~ msgstr "`PythonAnywhere <https://www.pythonanywhere.com/>`_"

#~ msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
#~ msgstr "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"

#~ msgid "\"Serverless\" frameworks like :gh:`Zappa <zappa/Zappa>`"
#~ msgstr "\"Бессерверные\" фреймворки, такие как :gh:`Zappa <zappa/Zappa>`"

#~ msgid ""
#~ "The name of the distribution. The name field is the primary identifier "
#~ "for a distribution. A valid name consists only of ASCII letters and "
#~ "numbers, period, underscore and hyphen. It must start and end with a "
#~ "letter or number. Distribution names are limited to those which match the "
#~ "following regex (run with ``re.IGNORECASE``)::"
#~ msgstr ""
#~ "Имя дистрибутива. Поле имени является основным идентификатором "
#~ "дистрибутива. Правильное имя состоит только из букв и цифр ASCII, точки, "
#~ "подчеркивания и дефиса. Оно должно начинаться и заканчиваться буквой или "
#~ "цифрой. Имена дистрибутивов ограничены теми, которые соответствуют "
#~ "следующему regex (выполняется с ``re.IGNORECASE``)::"

#, fuzzy
#~ msgid "``author``"
#~ msgstr "Автор"

#, fuzzy
#~ msgid "``python_requires``"
#~ msgstr "python_requires"

#~ msgid "And so on."
#~ msgstr "И так далее."

#~ msgid "``entry_points``"
#~ msgstr "``entry_points``"

#, fuzzy
#~ msgid "``console_scripts``"
#~ msgstr "console_scripts"

#~ msgid "Rationale"
#~ msgstr "Обоснование"

#~ msgid "``python -m twine check``"
#~ msgstr "``python -m twine check``"

#~ msgid "``python -m twine register``"
#~ msgstr "``python -m twine register``"

#~ msgid "``python -m twine upload``"
#~ msgstr "``python -m twine upload``"

#~ msgid "``python -m setuptools-scm``"
#~ msgstr "``python -m setuptools-scm``"

#, fuzzy
#~ msgid ":ref:`declaring-build-dependencies`"
#~ msgstr "Объявление зависимостей системы сборки"

#, fuzzy
#~ msgid "Current recommendation"
#~ msgstr "Рекомендации по инструментам"

#, fuzzy
#~ msgid "You can make sure that pip is up-to-date by running:"
#~ msgstr ""
#~ "Установщики Python для Windows включают pip. Вы можете убедиться, что pip "
#~ "обновлён до последней версии, запустив:"

#~ msgid "Installing pip"
#~ msgstr "Установка pip"

#~ msgid "Installing virtualenv"
#~ msgstr "Установка virtualenv"

#, fuzzy
#~ msgid "mention the implications of the GIL for extension modules"
#~ msgstr "Введение в модули расширения на C/C++"

#~ msgid ""
#~ "Essential tools and concepts for working within the Python development "
#~ "ecosystem are covered in our :doc:`tutorials/index` section:"
#~ msgstr ""
#~ "Основные инструменты и концепции для работы в экосистеме разработки "
#~ "Python описаны в нашем разделе :doc:`tutorials/index`:"

#~ msgid "Learn more"
#~ msgstr "Подробнее"

#~ msgid ""
#~ "Beyond our :doc:`tutorials/index`, this guide has several other resources:"
#~ msgstr ""
#~ "Помимо наших :doc:`учебников <tutorials/index>` это руководство содержит "
#~ "несколько других ресурсов:"

#, fuzzy
#~ msgid ""
#~ "`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues "
#~ "<https://bugs.python.org/>`__"
#~ msgstr ""
#~ "`Документация <https://docs.python.org/3/library/ensurepip.html>`__ | "
#~ "`Замечания <http://bugs.python.org>`__"

#~ msgid "Debian/Ubuntu"
#~ msgstr "Debian/Ubuntu"

#~ msgid "2014-11-11"
#~ msgstr "2014-11-11"

#~ msgid "2015-09-17"
#~ msgstr "2015-09-17"

#~ msgid "Fedora 21:"
#~ msgstr "Fedora 21:"

#~ msgid "Python 3: ``sudo yum install python3 python3-wheel``"
#~ msgstr "Python 3: ``sudo yum install python3 python3-wheel``"

#~ msgid "Fedora 22:"
#~ msgstr "Fedora 22:"

#~ msgid "Python 3: ``sudo dnf install python3 python3-wheel``"
#~ msgstr "Python 3: ``sudo dnf install python3 python3-wheel``"

#~ msgid "Python 3::"
#~ msgstr "Python 3::"

#~ msgid "For Python 2.7"
#~ msgstr "Для Python 2.7"

#~ msgid "Done."
#~ msgstr "Готово."

#~ msgid "For Python 3.4"
#~ msgstr "Для Python 3.4"

#~ msgid "Set DISTUTILS_USE_SDK=1"
#~ msgstr "Установите DISTUTILS_USE_SDK=1"

#~ msgid "For Python 3.5"
#~ msgstr "Для Python 3.5"

#~ msgid "bento"
#~ msgstr "bento"

#~ msgid "`Docs <http://conda.pydata.org/docs/>`__"
#~ msgstr "`Документация <http://conda.pydata.org/docs/>`__"

#~ msgid "`Enthought Canopy <https://www.enthought.com/product/canopy/>`_"
#~ msgstr "`Enthought Canopy <https://www.enthought.com/product/canopy/>`_"

#~ msgid ""
#~ "`bbFreeze <https://pypi.org/project/bbfreeze>`_ - Windows, Linux, Python "
#~ "2 only"
#~ msgstr ""
#~ "`bbFreeze <https://pypi.org/project/bbfreeze>`_ --- Windows, Linux, "
#~ "только Python 2;"

#~ msgid ""
#~ "RFC 822 Long Header Fields: http://www.freesoft.org/CIE/RFC/822/7.htm"
#~ msgstr ""
#~ "RFC 822 Длинные поля заголовков: http://www.freesoft.org/CIE/RFC/822/7.htm"

#~ msgid "Using `venv`_:"
#~ msgstr "Использование `venv`_:"
