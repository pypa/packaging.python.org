# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 15:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorials/packaging-projects.rst:2
#: 8166f322890d4d8dbbeed15e5bc42e9d
msgid "Packaging Python Projects"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:4
#: d673aa2161584b528cda5e82c2e4bed3
msgid "This tutorial walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to upload it to the Python Package Index."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:10
#: b2f6e95a644b49fabc5cfcb0b0e0516c
msgid "If you have trouble running the commands in this tutoral, please copy the command and its output, then `open an issue`_ on the `packaging-problems`_ repository on GitHub. We'll do our best to help you!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:18
#: ea9f259310e64c9a8fa9917491de8117
msgid "Some of the commands require a newer version of :ref:`pip`, so start by making sure you have the latest version installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:35
#: c92cd4cda41d420da7ea1e3beb7c2246
msgid "A simple project"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:37
#: 58b3f1110707447ca32296d47dcde3d4
msgid "This tutorial uses a simple project named ``example_package``.  We recommend following this tutorial as-is using this project, before packaging your own project."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:41
#: cec9931e7da643649b758b3f67e0ea86
msgid "Create the following file structure locally:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:51
#: fdb3ebab73d742b9bbb53b1375ba40ba
msgid ":file:`__init__.py` is required to import the directory as a package, and should be empty."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:54
#: 591553d126254fefa4b4b5f17cb55220
msgid ":file:`example.py` is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. Open that file and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:63
#: 3f6b78e031354f3abe6ed52ea70b925f
msgid "If you are unfamiliar with Python's :term:`modules <Module>` and :term:`import packages <Import Package>`, take a few minutes to read over the `Python documentation for packages and modules`_."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:67
#: b4b721b3ca5b462091c85c5aaf9c85bd
msgid "Once you create this structure, you'll want to run all of the commands in this tutorial within the ``packaging_tutorial`` directory."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:75
#: 57ce57d587514e28a5738df51d5b75ee
msgid "Creating the package files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:77
#: 36142d9212564556b8428fb10df21a41
msgid "You will now add files that are used to prepare the project for distribution. When you're done, the project structure will look like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:95
#: b66dba743bc04e9c8f1b0ed2a9c223f7
msgid "Creating a test directory"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:97
#: ca44dc6262f84fc795f1a5ee9df4268a
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:101
#: cdff4e52e44a45068df8e8cacf091d35
msgid "Creating pyproject.toml"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:103
#: 1617962fb3c64be6bc57eeaa6e54f0c2
msgid ":file:`pyproject.toml` tells build tools (like :ref:`pip` and :ref:`build`) what is required to build your project. This tutorial uses :ref:`setuptools`, so open :file:`pyproject.toml` and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:117
#: 4446f5e26eef4b0c913ccd70bc088b9a
msgid "``build-system.requires`` gives a list of packages that are needed to build your package. Listing something here will *only* make it available during the build, not after it is installed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:121
#: 3a98f9530b2640ae814f606c7b073139
msgid "``build-system.build-backend`` is the name of Python object that will be used to perform the build. If you were to use a different build system, such as :ref:`flit` or :ref:`poetry`, those would go here, and the configuration details would be completely different than the :ref:`setuptools` configuration described below."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:127
#: ad3cd9fcdddd41b38e8a11f40fef00d3
msgid "See :pep:`517` and :pep:`518` for background and details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:131
#: 9b546f36680b4048955742c41246ee8e
msgid "Configuring metadata"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:133
#: 0fcdca9c2b44403f8da425f2ca2df325
msgid "There are two types of metadata: static and dynamic."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:135
#: 34296f9c9d79441ab4aaf1ecba034879
msgid "Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is simpler, easier to read, and avoids many common errors, like encoding errors."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:137
#: a5faba1087fa4af2ab3ce43787e18bb1
msgid "Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are dynamic or determined at install-time, as well as extension modules or extensions to setuptools, need to go into :file:`setup.py`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:141
#: 8047e42c7be14ba39f3f64b229a3865e
msgid "Static metadata (:file:`setup.cfg`) should be preferred. Dynamic metadata (:file:`setup.py`) should be used only as an escape hatch when absolutely necessary. :file:`setup.py` used to be required, but can be omitted with newer versions of setuptools and pip."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:148
#: bc1ff394dee74a929237b19f5a829e6c
msgid ":file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include. Eventually much of this configuration may be able to move to :file:`pyproject.toml`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:153
#: 561416866afd41089ae3e39d9ea15810
msgid "Open :file:`setup.cfg` and enter the following content. Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:185
#: 06cac1c39b344bfd81956847338fe406
msgid "There are a `variety of metadata and options <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_ supported here. This is in :doc:`configparser <python:library/configparser>` format; do not place quotes around values. This example package uses a relatively minimal set of ``metadata``:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:191
#: ../source/tutorials/packaging-projects.rst:286
#: 8a13fba695ab42c8a8d5d11578c23b02
#: 5048162d7cc943e48946da7da452d44a
msgid "``name`` is the *distribution name* of your package. This can be any name as long as it only contains letters, numbers, ``_`` , and ``-``. It also must not already be taken on pypi.org. **Be sure to update this with your username,** as this ensures you won't try to upload a package with the same name as one which already exists."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:196
#: 2502584d1b0b47ad932af778e4fbac2f
msgid "``version`` is the package version. See :pep:`440` for more details on versions. You can use ``file:`` or ``attr:`` directives to read from a file or package attribute."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:199
#: ../source/tutorials/packaging-projects.rst:293
#: ecc672af30bf4d95a984bcce42fe9676
#: d31e45e8297442fd88dea136e99a7bcd
msgid "``author`` and ``author_email`` are used to identify the author of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:201
#: ../source/tutorials/packaging-projects.rst:295
#: 90178bba9f3140ed9efe52487eb96305
#: b10fdf2d2c834f75b1153eae659106ce
msgid "``description`` is a short, one-sentence summary of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:202
#: bbdb41a121b844c9b3dbf6439348ba86
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md` (which is a common pattern) using the ``file:`` directive."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:206
#: ../source/tutorials/packaging-projects.rst:300
#: 3057061cf7f44c6b9f144fddbec2cc17
#: 8e91326e6452494186079657af730a21
msgid "``long_description_content_type`` tells the index what type of markup is used for the long description. In this case, it's Markdown."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:208
#: ../source/tutorials/packaging-projects.rst:302
#: cc806affb1f841deb17abb65771a2760
#: 02f43d978367495e9c2acc7ad5d4b5c1
msgid "``url`` is the URL for the homepage of the project. For many projects, this will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting service."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:211
#: ../source/tutorials/packaging-projects.rst:305
#: ff8f12987e58455c9f06bb3fb0f49fbd
#: a22b5a55f6fc4fdc97e863e96a3d174f
msgid "``project_urls`` lets you list any number of extra links to show on PyPI. Generally this could be to documentation, issue trackers, etc."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:213
#: ../source/tutorials/packaging-projects.rst:307
#: 5f43096b8bd94b519f2a50fa11465b4d
#: fc33b80a576049ccbd53923fafdbc0b5
msgid "``classifiers`` gives the index and :ref:`pip` some additional metadata about your package. In this case, the package is only compatible with Python 3, is licensed under the MIT license, and is OS-independent. You should always include at least which version(s) of Python your package works on, which license your package is available under, and which operating systems your package will work on. For a complete list of classifiers, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:221
#: 862bc12e8a5541af9fd749534d6cab41
msgid "In the ``options`` category, we have controls for setuptools itself:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:223
#: afa56af9520a4c3b9b1c1b96f541add4
msgid "``package_dir`` is a mapping of package names and directories. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:227
#: f114edf562bc4a92811960c1c5223eda
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use the ``find:`` directive to automatically discover all packages and subpackages and ``options.packages.find`` to specify the ``package_dir`` to use. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:234
#: d1de15d168cb451284fe86f36d3fefdf
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back through older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:238
#: ../source/tutorials/packaging-projects.rst:329
#: 6caa073d5d4e463181973eea4fd3a99b
#: 98a52def5a64408e9e8faa9bc5d4305c
msgid "There are many more than the ones mentioned here. See :doc:`/guides/distributing-packages-using-setuptools` for more details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:244
#: ced187e69a4f48a383f66f84e4256d17
msgid ":file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:248
#: e1a97461bd3345b781ef371f25cb7bb4
msgid "Open :file:`setup.py` and enter the following content.  Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:283
#: 576bdecf60d0425990230aaa125b10ad
msgid ":func:`setup` takes several arguments. This example package uses a relatively minimal set:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:291
#: d197323f534d40c1add8b33e811011a9
msgid "``version`` is the package version. See :pep:`440` for more details on versions."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:296
#: 2bd8799d9d43474fb3842ebd817ac192
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md`, which is a common pattern."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:314
#: ea6c45cd3af94342b109d940c0fcd32d
msgid "``package_dir`` is a dictionary with package names for keys and directories for values. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:319
#: b3473a19422e48b1933724d3e11f1834
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use :func:`find_packages` to automatically discover all packages and subpackages under ``package_dir``. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:325
#: 0c821a35f8dc487891ef315d15db4360
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back though older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:333
#: 0577e8c63aba47e5b76ffa123f3cca83
msgid "Creating README.md"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:335
#: b890ed25e1ba4572ac4c2ee32405efbb
msgid "Open :file:`README.md` and enter the following content. You can customize this if you'd like."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:347
#: 0440803476a647c6bd92e84b5a182784
msgid "Because our configuration loads :file:`README.md` to provide a ``long_description``, :file:`README.md` must be included along with your code when you :ref:`generate a source distribution <generating archives>`. Newer versions of :ref:`setuptools` will do this automatically."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:354
#: c03ba726dbb949fd86e213bf641ffd98
msgid "Creating a LICENSE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:356
#: 9633b4f42b7d41d6961cf72317d1fce9
msgid "It's important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see https://choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:387
#: fc264228494d493e81404e0ddcb37976
msgid "Including other files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:389
#: 5bc03bcdeb3d42968d7fb50da41095f5
msgid "The files listed above will be included automatically in your :term:`source distribution <Source Distribution (or \"sdist\")>`. If you want to control what goes in this explicitly, see :ref:`Using MANIFEST.in`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:393
#: 104ab75bc9a440afbbad0529adfb1ce0
msgid "The final :term:`built distribution <Built Distribution>` will have the Python files in the discovered or listed Python packages. If you want to control what goes here, such as to add data files, see :doc:`Including Data Files <setuptools:userguide/datafiles>` from the :doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:402
#: 73e06ce651314c48b20caf5b3c33cbb7
msgid "Generating distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:404
#: 3ba3ad11fcba4f68a74c49b448fe8b76
msgid "The next step is to generate :term:`distribution packages <Distribution Package>` for the package. These are archives that are uploaded to the Python Package Index and can be installed by :ref:`pip`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:408
#: 31b72289c00e414aa5580bbd7a0bb2c5
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:422
#: 590b687b6b9f4e1591c619d28f240e13
msgid "If you have trouble installing these, see the :doc:`installing-packages` tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:425
#: 0d35248f6196424c9edd8c283d3db07a
msgid "Now run this command from the same directory where :file:`pyproject.toml` is located:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:439
#: 960da2418eef4e5ba50455ee6443ba38
msgid "This command should output a lot of text and once completed should generate two files in the :file:`dist` directory:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:449
#: 40c59413bc474ba7ae66e2162d17373e
msgid "The ``tar.gz`` file is a :term:`source archive <Source Archive>` whereas the ``.whl`` file is a :term:`built distribution <Built Distribution>`. Newer :ref:`pip` versions preferentially install built distributions, but will fall back to source archives if needed. You should always upload a source archive and provide built archives for the platforms your project is compatible with. In this case, our example package is compatible with Python on any platform so only one built distribution is needed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:458
#: 29f9d48d36114b32a3d5a3eaff870583
msgid "Uploading the distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:460
#: e4b2cd067df942068bd9976d63a83bbd
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:462
#: a5b2beb9fdc3491cadf871eb4776dd99
msgid "The first thing you'll need to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. It's great for things like this tutorial where we don't necessarily want to upload to the real index. To register an account, go to https://test.pypi.org/account/register/ and complete the steps on that page. You will also need to verify your email address before you're able to upload any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:470
#: c39bfb868fba47d58573cab04a27ab54
msgid "To securely upload your project, you'll need a PyPI `API token`_. Create one at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" to \"Entire account\". **Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:477
#: 502867c221ae4a74a1e297006027a4c1
msgid "Now that you are registered, you can use :ref:`twine` to upload the distribution packages. You'll need to install Twine:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:492
#: d103ccec58da446794fe4f3447f6e793
msgid "Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:506
#: 8d0137c1b72f40e08aee4ec3b2a4b7ee
msgid "You will be prompted for a username and password. For the username, use ``__token__``. For the password, use the token value, including the ``pypi-`` prefix."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:510
#: 913d701dceb94224a2c8219d9bc50a07
msgid "After the command completes, you should see output similar to this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:523
#: ad170668ff884244b62571b7a1137ec8
msgid "Once uploaded your package should be viewable on TestPyPI, for example, https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:528
#: c59fabf4c9b848dcb23965f70e99b44a
msgid "Installing your newly uploaded package"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:530
#: 0eec95771c3646fb99ffbb65071188c3
msgid "You can use :ref:`pip` to install your package and verify that it works. Create a :ref:`virtual environment <Creating and using Virtual Environments>` and install your package from TestPyPI:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:546
#: 9a0b0641f1e6495aa1abaa7f3907209f
msgid "Make sure to specify your username in the package name!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:548
#: 14da5ec74dcb4060b876faef04f0cb3a
msgid "pip should install the package from TestPyPI and the output should look something like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:558
#: 670d209fce82450d922cef47ec8dae12
msgid "This example uses ``--index-url`` flag to specify TestPyPI instead of live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have the same packages as the live PyPI, it's possible that attempting to install dependencies may fail or install something unexpected. While our example package doesn't have any dependencies, it's a good practice to avoid installing dependencies when using TestPyPI."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:565
#: 463aa9da63ba4e50a399b73d493895a1
msgid "You can test that it was installed correctly by importing the package. Make sure you're still in your virtual environment, then run Python:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:580
#: 89f7b314dacb4f6eb8b1201224f59c78
msgid "and import the package:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:588
#: cf67607572544ab4a648d99020e42bb5
msgid "Note that the :term:`import package <Import Package>` is ``example_package`` regardless of what ``name`` you gave your :term:`distribution package <Distribution Package>` in :file:`setup.cfg` or :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``)."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:594
#: eb8602abe2d340e5aaaa681413c71437
msgid "Next steps"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:596
#: 63fa89ad4db84c1782baafcb973dd0e9
msgid "**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 ✨"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:599
#: ece49c62a4884fd3ab97f41656b5393b
msgid "Keep in mind that this tutorial showed you how to upload your package to Test PyPI, which isn't a permanent storage. The Test system occasionally deletes packages and accounts. It is best to use TestPyPI for testing and experiments like this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:604
#: a649659f3ece46bbbad5ff1035773e08
msgid "When you are ready to upload a real package to the Python Package Index you can do much the same as you did in this tutorial, but with these important differences:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:608
#: 44d946fe278e467e9038a8db45d85554
msgid "Choose a memorable and unique name for your package. You don't have to append your username as you did in the tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:610
#: 1eb7219ff413436f91047ec55701f0cb
msgid "Register an account on https://pypi.org - note that these are two separate servers and the login details from the test server are not shared with the main server."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:613
#: 65c8befe4f764192a1411b5cc504ee68
msgid "Use ``twine upload dist/*`` to upload your package and enter your credentials for the account you registered on the real PyPI.  Now that you're uploading the package in production, you don't need to specify ``--repository``; the package will upload to https://pypi.org/ by default."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:617
#: 978d816fd3a94fbfbd5b67c767d7fc39
msgid "Install your package from the real PyPI using ``python3 -m pip install [your-package]``."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:619
#: 3f3c4cf48d25456e85943d8030f7d6cb
msgid "At this point if you want to read more on packaging Python libraries here are some things you can do:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:622
#: 2237c45abee140d6830d36632ab876d6
msgid "Read more about using :ref:`setuptools` to package libraries in :doc:`/guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:624
#: ca905d30b1994b19a88e6a7bb0b34d2e
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:625
#: a636cef9c6df412aaedb3a4098b93b76
msgid "Consider alternatives to :ref:`setuptools` such as :ref:`flit`, :ref:`hatch`, and :ref:`poetry`."
msgstr ""
