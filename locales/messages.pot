# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013–2020, PyPA
# This file is distributed under the same license as the Python Packaging User Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Packaging User Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 19:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/contribute.rst:5
#: c1b476137fd242cfb03e104c0a496dea
msgid "Contribute to this guide"
msgstr ""

#: ../source/contribute.rst:7
#: ab3fc60739944f61abeec16f8fd4bc69
msgid "The |PyPUG| welcomes contributors! There are lots of ways to help out, including:"
msgstr ""

#: ../source/contribute.rst:10
#: c45df9f2ef074fc0abe75b084d56362a
msgid "Reading the guide and giving feedback"
msgstr ""

#: ../source/contribute.rst:11
#: 133e8c00b48a4b5188c29b71bd3391fe
msgid "Reviewing new contributions"
msgstr ""

#: ../source/contribute.rst:12
#: 3c6f9996ad624c7cbf0bb83ec75fb5f4
msgid "Revising existing content"
msgstr ""

#: ../source/contribute.rst:13
#: 325bb2206d544aea973a56cf2eb79738
msgid "Writing new content"
msgstr ""

#: ../source/contribute.rst:15
#: 47332f29785a47ddbda2043a49fc0550
msgid "Most of the work on the |PyPUG| takes place on the `project's GitHub repository`__. To get started, check out the list of `open issues`__ and `pull requests`__. If you're planning to write or edit the guide, please read the :ref:`style guide <contributing_style_guide>`."
msgstr ""

#: ../source/contribute.rst:24
#: 787a8b0660ce4ddfbb5918ab38f6cfce
msgid "By contributing to the |PyPUG|, you're expected to follow the PSF's `Code of Conduct`__."
msgstr ""

#: ../source/contribute.rst:31
#: e2978b6b10a64b6f82fa9dea99d46cf9
msgid "Documentation types"
msgstr ""

#: ../source/contribute.rst:33
#: d90e32fcc3cc4917a68d5380ebea1115
msgid "This project consists of four distinct documentation types with specific purposes. When proposing new additions to the project please pick the appropriate documentation type."
msgstr ""

#: ../source/contribute.rst:38
#: ../source/tutorials/index.rst:2
#: 1c9b145e745d4590be816e42112b9dd3
#: 887a5cee0bfa47d8a4728d1be0f9bf52
msgid "Tutorials"
msgstr ""

#: ../source/contribute.rst:40
#: 99f301dd8bd446309e52721965298d5d
msgid "Tutorials are focused on teaching the reader new concepts by accomplishing a goal. They are opinionated step-by-step guides. They do not include extraneous warnings or information. `example tutorial-style document`_."
msgstr ""

#: ../source/contribute.rst:47
#: ../source/guides/index.rst:2
#: dde9dc0f9c414580ba89e29824aae618
#: eb7aea10394b44f796c0f0b818b06fd3
msgid "Guides"
msgstr ""

#: ../source/contribute.rst:49
#: 9c92546227fd4eb48571bda26bffd1ac
msgid "Guides are focused on accomplishing a specific task and can assume some level of pre-requisite knowledge. These are similar to tutorials, but have a narrow and clear focus and can provide lots of caveats and additional information as needed. They may also discuss multiple approaches to accomplishing the task. :doc:`example guide-style document <guides/packaging-namespace-packages>`."
msgstr ""

#: ../source/contribute.rst:56
#: ../source/discussions/index.rst:2
#: 0d424b4b60104cdab89a06c6cb1ec669
#: 348c10bd244e4b11a2a380e4e5eafb5e
msgid "Discussions"
msgstr ""

#: ../source/contribute.rst:58
#: 267094c8d14742beb21977bb89b5f47e
msgid "Discussions are focused on understanding and information. These explore a specific topic without a specific goal in mind. :doc:`example discussion-style document <discussions/install-requires-vs-requirements>`."
msgstr ""

#: ../source/contribute.rst:63
#: 20936a9edc124f819290c1742b59b3b1
msgid "Specifications"
msgstr ""

#: ../source/contribute.rst:65
#: 8c5904a48a3d4930b648d054304ba2a7
msgid "Specifications are reference documention focused on comprehensively documenting an agreed-upon interface for interoperability between packaging tools. :doc:`example specification-style document <specifications/core-metadata>`."
msgstr ""

#: ../source/contribute.rst:73
#: a3645eae1b0e49c2aab43ac0ebe0ef9a
msgid "Building the guide locally"
msgstr ""

#: ../source/contribute.rst:75
#: aa167049cb294e59ac93fb2fd302b755
msgid "Though not required to contribute, it may be useful to build this guide locally in order to test your changes. In order to build this guide locally, you'll need:"
msgstr ""

#: ../source/contribute.rst:79
#: 8ade822c53d148f5bb96e35bb9b82825
msgid "`Nox <https://nox.readthedocs.io/en/latest/>`_. You can install or upgrade nox using ``pip``::"
msgstr ""

#: ../source/contribute.rst:84
#: 6c2f3641e3fd453db059078cd1ab579e
msgid "Python 3.6. Our build scripts are designed to work with Python 3.6 only. See the `Hitchhiker's Guide to Python installation instructions`_ to install Python 3.6 on your operating system."
msgstr ""

#: ../source/contribute.rst:91
#: 0550d60d5c6e474f9f3610b56ec3b778
msgid "To build the guide, run the following bash command in the source folder::"
msgstr ""

#: ../source/contribute.rst:95
#: eae597152b45446c93329620b1cdfdc8
msgid "After the process has completed you can find the HTML output in the ``./build/html`` directory. You can open the ``index.html`` file to view the guide in web browser, but it's recommended to serve the guide using an HTTP server."
msgstr ""

#: ../source/contribute.rst:100
#: ea91d3e03d6e49cd866c10f27be49c99
msgid "You can build the guide and serve it via an HTTP server using the following command::"
msgstr ""

#: ../source/contribute.rst:105
#: 2031f0251dff46ff8881ba9d20e145f5
msgid "The guide will be browsable via http://localhost:8000."
msgstr ""

#: ../source/contribute.rst:109
#: 0e0a77a0d4784ad0bbdeee27ef712e4e
msgid "Where the guide is deployed"
msgstr ""

#: ../source/contribute.rst:111
#: 9b4c9ad365db432bb0e3143c559685e0
msgid "The guide is deployed via ReadTheDocs and the configuration lives at https://readthedocs.org/projects/python-packaging-user-guide/. It's served from a custom domain and fronted by Fast.ly."
msgstr ""

#: ../source/contribute.rst:117
#: 2f978405bc0349508b0e991e7e4b85e6
msgid "Style guide"
msgstr ""

#: ../source/contribute.rst:119
#: a0a515bb8d8c4e40b55cc2eb25543d77
msgid "This style guide has recommendations for how you should write the |PyPUG|. Before you start writing, please review it. By following the style guide, your contributions will help add to a cohesive whole and make it easier for your contributions to be accepted into the project."
msgstr ""

#: ../source/contribute.rst:126
#: 0db2f18b9fdf4fe49ea91d0ba5888afa
msgid "Purpose"
msgstr ""

#: ../source/contribute.rst:128
#: f007c1f77e674ad3b9d2a257ae92c982
msgid "The purpose of the |PyPUG| is to be the authoritative resource on how to package, publish, and install Python projects using current tools."
msgstr ""

#: ../source/contribute.rst:133
#: 08537686168242bc976107903c6baaf0
msgid "Scope"
msgstr ""

#: ../source/contribute.rst:135
#: 234b04fe003b4d04a569b50cb68bfb24
msgid "The guide is meant to answer questions and solve problems with accurate and focused recommendations."
msgstr ""

#: ../source/contribute.rst:138
#: 0c9b26f7459b443b8d8df4860f183d0e
msgid "The guide isn't meant to be comprehensive and it's not meant to replace individual projects' documentation. For example, pip has dozens of commands, options, and settings. The pip documentation describes each of them in detail, while this guide describes only the parts of pip that are needed to complete the specific tasks described in this guide."
msgstr ""

#: ../source/contribute.rst:146
#: b3be6e28e41b4a339b8ade5817ffde7a
msgid "Audience"
msgstr ""

#: ../source/contribute.rst:148
#: 9171ad0355e64f37b9eebd82a2016fa6
msgid "The audience of this guide is anyone who uses Python with packages."
msgstr ""

#: ../source/contribute.rst:150
#: b92ef58046f14762b3e117cce46a8c04
msgid "Don't forget that the Python community is big and welcoming. Readers may not share your age, gender, education, culture, and more, but they deserve to learn about packaging just as much as you do."
msgstr ""

#: ../source/contribute.rst:154
#: 8f4e3feb63554997b0406667c4d70801
msgid "In particular, keep in mind that not all people who use Python see themselves as programmers. The audience of this guide includes astronomers or painters or students as well as professional software developers."
msgstr ""

#: ../source/contribute.rst:160
#: 0c8c9c2e412846158dc8c9157ee0b727
msgid "Voice and tone"
msgstr ""

#: ../source/contribute.rst:162
#: 3b118c748b084d1ebb5319c32e4a747b
msgid "When writing this guide, strive to write with a voice that's approachable and humble, even if you have all the answers."
msgstr ""

#: ../source/contribute.rst:165
#: 1fa479d611654b73a1e46a055cadd049
msgid "Imagine you're working on a Python project with someone you know to be smart and skilled. You like working with them and they like working with you. That person has asked you a question and you know the answer. How do you respond? *That* is how you should write this guide."
msgstr ""

#: ../source/contribute.rst:170
#: 03fcb42be7d64219970f14d3b2797b39
msgid "Here's a quick check: try reading aloud to get a sense for your writing's voice and tone. Does it sound like something you would say or does it sound like you're acting out a part or giving a speech? Feel free to use contractions and don't worry about sticking to fussy grammar rules. You are hereby granted permission to end a sentence in a preposition, if that's what you want to end it with."
msgstr ""

#: ../source/contribute.rst:177
#: e51b132f085c49189098f30b0824422a
msgid "When writing the guide, adjust your tone for the seriousness and difficulty of the topic. If you're writing an introductory tutorial, it's OK to make a joke, but if you're covering a sensitive security recommendation, you might want to avoid jokes altogether."
msgstr ""

#: ../source/contribute.rst:184
#: 26f3ea34b19e4240a1bf8d8f76c4ba65
msgid "Conventions and mechanics"
msgstr ""

#: ../source/contribute.rst:192
#: e65ef73d817c4dea941cee0d106b2693
msgid "**Write to the reader**"
msgstr ""

#: ../source/contribute.rst:187
#: ff3ae117f5cb489a9a203b365ddaa6c8
msgid "When giving recommendations or steps to take, address the reader as *you* or use the imperative mood."
msgstr ""

#: ../source/contribute.rst:0
#: acc5eace362b4408bf98221d9aad4b79
msgid "Wrong: To install it, the user runs…"
msgstr ""

#: ../source/contribute.rst:0
#: 23f21b0ff74f47bdbb5b8b678c37bca4
msgid "Right: You can install it by running…"
msgstr ""

#: ../source/contribute.rst:0
#: 00c9157f5e2e47d5809675b8f3eef7dc
msgid "Right: To install it, run…"
msgstr ""

#: ../source/contribute.rst:198
#: 4cc3f06e8b1a46e4ae5bafbe12959626
msgid "**State assumptions**"
msgstr ""

#: ../source/contribute.rst:195
#: d0304e1fd903416aaf5a8a5f4a62e807
msgid "Avoid making unstated assumptions. Reading on the web means that any page of the guide may be the first page of the guide that the reader ever sees. If you're going to make assumptions, then say what assumptions that you're going to make."
msgstr ""

#: ../source/contribute.rst:203
#: 1cb73481ba78459d9bdb65f31add16ac
msgid "**Cross-reference generously**"
msgstr ""

#: ../source/contribute.rst:201
#: f382e67315f8432980a0830ff4214ba9
msgid "The first time you mention a tool or practice, link to the part of the guide that covers it, or link to a relevant document elsewhere. Save the reader a search."
msgstr ""

#: ../source/contribute.rst:213
#: d3e074c2a94b45488c04424feaea0fce
msgid "**Respect naming practices**"
msgstr ""

#: ../source/contribute.rst:206
#: 7556a891a71741ae910b233e54753eb2
msgid "When naming tools, sites, people, and other proper nouns, use their preferred capitalization."
msgstr ""

#: ../source/contribute.rst:0
#: 0261192ff0814bc2ab26a2ad21a955b1
msgid "Wrong: Pip uses…"
msgstr ""

#: ../source/contribute.rst:0
#: 023b9c71ae354ba489ef95f91ec24665
msgid "Right: pip uses…"
msgstr ""

#: ../source/contribute.rst:0
#: 67555bfedee5439b9d131c9d2ebea785
msgid "Wrong: …hosted on github."
msgstr ""

#: ../source/contribute.rst:0
#: 2cbf969d0a2d4b90a819a54e4b310490
msgid "Right: …hosted on GitHub."
msgstr ""

#: ../source/contribute.rst:222
#: ba44a8d842804a00bd1151baaad3a363
msgid "**Use a gender-neutral style**"
msgstr ""

#: ../source/contribute.rst:216
#: e4b8b340dd7048808185c6f91013e8d1
msgid "Often, you'll address the reader directly with *you*, *your* and *yours*. Otherwise, use gender-neutral pronouns *they*, *their*, and *theirs* or avoid pronouns entirely."
msgstr ""

#: ../source/contribute.rst:0
#: f3de8761f57f4e88a125001f4630a5f9
msgid "Wrong: A maintainer uploads the file. Then he…"
msgstr ""

#: ../source/contribute.rst:0
#: e431da29a7f64b48b7ed62115125d683
msgid "Right: A maintainer uploads the file. Then they…"
msgstr ""

#: ../source/contribute.rst:0
#: 64a98cfd0ca7438f8cb477c47c8cc7bf
msgid "Right: A maintainer uploads the file. Then the maintainer…"
msgstr ""

#: ../source/contribute.rst:234
#: 45f0b867c48444f38fe76dbab0f1e2e5
msgid "**Headings**"
msgstr ""

#: ../source/contribute.rst:225
#: 4dced7c69bc845b4b44111d4a37bed68
msgid "Write headings that use words the reader is searching for. A good way to do this is to have your heading complete an implied question. For example, a reader might want to know *How do I install MyLibrary?* so a good heading might be *Install MyLibrary*."
msgstr ""

#: ../source/contribute.rst:230
#: 9973872bde1a4e74aa765f48722c17f2
msgid "In section headings, use sentence case. In other words, write headings as you would write a typical sentence."
msgstr ""

#: ../source/contribute.rst:0
#: 7e7c3449b13d48aeac83d73971971107
msgid "Wrong: Things You Should Know About Python"
msgstr ""

#: ../source/contribute.rst:0
#: 129e918d20b24fd3a7938d31701b04f7
msgid "Right: Things you should know about Python"
msgstr ""

#: ../source/contribute.rst:237
#: 48fa00ac920c48f4ae7230276104ac9f
msgid "**Numbers**"
msgstr ""

#: ../source/contribute.rst:237
#: 1e20b87688fe4ab18daa84079a7c8010
msgid "In body text, write numbers one through nine as words. For other numbers or numbers in tables, use numerals."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:4
#: b4e3d7fd838f44b2a7c2c953d2edc88f
msgid "Deploying Python applications"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
#: 5cca0cfd5b0046b7b86a329a86f80c2a
#: bf0b6cff341c4c27947aaaf24aa30274
#: dc1c5084325045e9875f6703b7bdbff2
#: a6ca2977944846488590914f32eb009c
#: 65866c0eea80404588cabf3236928e8b
#: fefcd8c25acf45fd8c602ebd041c75c2
msgid "Page Status"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:6
#: ../source/guides/index-mirrors-and-caches.rst:7
#: ../source/guides/installing-using-linux-tools.rst:7
#: ../source/guides/packaging-binary-extensions.rst:7
#: ../source/guides/supporting-multiple-python-versions.rst:7
#: ../source/guides/supporting-windows-using-appveyor.rst:5
#: 05cc32f99c9d4b2f9d28bcb02f056dff
#: 17e85275a2f64328803f27bcc60200f1
#: 2716e5bec54e406396fba070051bdfbd
#: 389f4581af554e87a8260fc46a47dcec
#: 719af340c32b4d80b11db9fd578d6dcf
#: 867aa27ffb264997ad1f9b7e5397f430
msgid "Incomplete"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:0
#: ../source/guides/index-mirrors-and-caches.rst:0
#: ../source/guides/installing-using-linux-tools.rst:0
#: ../source/guides/packaging-binary-extensions.rst:0
#: ../source/guides/supporting-multiple-python-versions.rst:0
#: ../source/guides/supporting-windows-using-appveyor.rst:0
#: 4e97ce378857488ea7157309fee4ec09
#: 6e81e44788684407a977e73314a75c3b
#: f7eb1efcfa924c1eb69b44c5ce1cc32a
#: b0f9464afe88437fa55f51e8ed6e2dfc
#: 78cdc98448ca47a9984270e08f676c8e
#: 03fa9c320f834438a78dc2d92c76b9cd
msgid "Last Reviewed"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:7
#: b4249d69858a46958cf32cb99704cd1c
msgid "2014-11-11"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:11
#: ../source/discussions/install-requires-vs-requirements.rst:9
#: ../source/guides/analyzing-pypi-package-downloads.rst:12
#: ../source/guides/distributing-packages-using-setuptools.rst:22
#: ../source/guides/index-mirrors-and-caches.rst:12
#: ../source/guides/installing-scientific-packages.rst:9
#: ../source/guides/packaging-binary-extensions.rst:17
#: ../source/guides/supporting-multiple-python-versions.rst:12
#: ../source/guides/supporting-windows-using-appveyor.rst:15
#: ../source/overview.rst:23
#: ../source/specifications/core-metadata.rst:38
#: ../source/specifications/direct-url.rst:14
#: ../source/tutorials/installing-packages.rst:23
#: c8ee8fa3bf844ced901ac96294593a27
#: f9a8cb8ad7514900bf8e6baa731ad3bc
#: 2abf79a26c0e4c419c407eed3ac93af3
#: e23ab86d222e448f991030c1d710b196
#: cfa20aad05e742988f8f72daf7c210a2
#: 1968ea2093354c37abfaf9ca50daa384
#: 71cdaf3954374a458f45602dbdf874cf
#: d03a704de1ce482a9929315326bdac72
#: 06e192c4e5db4f2ba961a1289c3e5382
#: 7c78d2380ba5453db3d4f78b65224879
#: 501fc79038a0490db6d0fee7cb428e29
#: aa65e7fb79e8449892e556750497fb3e
#: b20f0d995e1843fc90e65fb8602e2ec3
msgid "Contents"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:14
#: 075d8e4a62f243cfb51180a9be1ff74c
msgid "Overview"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:18
#: bfcd2158cfd1434ab536ce6ebd1eb09e
msgid "Supporting multiple hardware platforms"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:40
#: 5468d44965524d84bc4708d74be90972
msgid "OS packaging & installers"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:52
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:23
#: 7b5e7b2dd10245dd82b3067423488527
#: 819ddcc103494e759ab1ae121e52aa98
msgid "Windows"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:61
#: 2c9c2b7cc15548c78a941358ff6a0fd6
msgid "Pynsist"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:63
#: 5cf0e962976248cc9da4309a7e3b7f84
msgid "`Pynsist <https://pypi.org/project/pynsist>`__ is a tool that bundles Python programs together with the Python-interpreter into a single installer based on NSIS. In most cases, packaging only requires the user to choose a version of the Python-interpreter and declare the dependencies of the program. The tool downloads the specified Python-interpreter for Windows and packages it with all the dependencies in a single Windows-executable installer."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:70
#: 933642c8b4c34f5fa2d0137d548c4973
msgid "The installed program can be started from a shortcut that the installer adds to the start-menu. It uses a Python interpreter installed within its application directory, independent of any other Python installation on the computer."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:74
#: 4f171b3fd0274cc9a1ad733c4d302076
msgid "A big advantage of Pynsist is that the Windows packages can be built on Linux. There are several examples for different kinds of programs (console, GUI) in the `documentation <https://pynsist.readthedocs.io>`__. The tool is released under the MIT-licence."
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:80
#: f7051721360f427297c3eee949cc1ae0
msgid "Application bundles"
msgstr ""

#: ../source/discussions/deploying-python-applications.rst:91
#: 52e36f9d4b9b4b9a98ebe6081eb1f750
msgid "Configuration management"
msgstr ""

#: ../source/discussions/index.rst:4
#: 4bd6f9c169f742c690e6f3806fba63c8
msgid "**Discussions** are focused on providing comprehensive information about a specific topic. If you're just trying to get stuff done, see :doc:`/guides/index`."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:5
#: 39e785c929174c7da7c9480b4c191db4
msgid "install_requires vs requirements files"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:12
#: ../source/guides/distributing-packages-using-setuptools.rst:382
#: a76e1a0d684741d3bdb8c6d72bca293c
#: 29cc14398ac14101acbc67968d2b17c7
msgid "install_requires"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:14
#: a18b8dd3b20e42f697f2456d15ce21d8
msgid "``install_requires`` is a :ref:`setuptools` :file:`setup.py` keyword that should be used to specify what a project **minimally** needs to run correctly. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:19
#: c7cc25543f184e4c8b4e98bb19c6cf9a
msgid "For example, if the project requires A and B, your ``install_requires`` would be like so:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:29
#: ca7347e05f95452a94b674c7ee933efa
msgid "Additionally, it's best practice to indicate any known lower or upper bounds."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:31
#: 8ff7aae6c4144fd1965344c85ac1ed77
msgid "For example, it may be known, that your project requires at least v1 of 'A', and v2 of 'B', so it would be like so:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:41
#: ac110a342a25412ca40bb5d9829aaf55
msgid "It may also be known that project A follows semantic versioning, and that v2 of 'A' will indicate a break in compatibility, so it makes sense to not allow v2:"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:51
#: 34994c3313cd43f4a9e0147e6a22dc3a
msgid "It is not considered best practice to use ``install_requires`` to pin dependencies to specific versions, or to specify sub-dependencies (i.e. dependencies of your dependencies).  This is overly-restrictive, and prevents the user from gaining the benefit of dependency upgrades."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:56
#: c2fadf77b205443aacfb4aab208c2957
msgid "Lastly, it's important to understand that ``install_requires`` is a listing of \"Abstract\" requirements, i.e just names and version restrictions that don't determine where the dependencies will be fulfilled from (i.e. from what index or source).  The where (i.e. how they are to be made \"Concrete\") is to be determined at install time using :ref:`pip` options. [1]_"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:64
#: ../source/tutorials/installing-packages.rst:460
#: 76aef69aa76843189f1b019efd22db6f
#: 2208b41631ae49c6be3b3ce52a71ce73
msgid "Requirements files"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:66
#: e7a872d2ece84e8bbe3e5aa9ea1fa690
msgid ":ref:`Requirements Files <pip:Requirements Files>` described most simply, are just a list of :ref:`pip:pip install` arguments placed into a file."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:69
#: 7683c2b4cbf44bdfb5603b1c2fcf6e52
msgid "Whereas ``install_requires`` defines the dependencies for a single project, :ref:`Requirements Files <pip:Requirements Files>` are often used to define the requirements for a complete Python environment."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:73
#: 3d41b4bd1e084dd8bfca0a8ffea30c01
msgid "Whereas ``install_requires`` requirements are minimal, requirements files often contain an exhaustive listing of pinned versions for the purpose of achieving :ref:`repeatable installations <pip:Repeatability>` of a complete environment."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:78
#: f1f9915df9cd4f0990a2c7dffb2a4e1a
msgid "Whereas ``install_requires`` requirements are \"Abstract\", i.e. not associated with any particular index, requirements files often contain pip options like ``--index-url`` or ``--find-links`` to make requirements \"Concrete\", i.e. associated with a particular index or directory of packages. [1]_"
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:84
#: 91f54e12bed04487b57cb51429ac2650
msgid "Whereas ``install_requires`` metadata is automatically analyzed by pip during an install, requirements files are not, and only are used when a user specifically installs them using ``python -m pip install -r``."
msgstr ""

#: ../source/discussions/install-requires-vs-requirements.rst:90
#: bced27aaeaea4405afdc92a68da6313a
msgid "For more on \"Abstract\" vs \"Concrete\" requirements, see https://caremad.io/2013/07/setup-vs-requirement/."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:6
#: 24cd08ce25ee4bf7bd831ff5a5964293
msgid "pip vs easy_install"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:9
#: 298cda9b21bc49c388f1b6afb68dba6b
msgid ":ref:`easy_install <easy_install>`, now `deprecated`_, was released in 2004 as part of :ref:`setuptools`. It was notable at the time for installing :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>` using requirement specifiers, and automatically installing dependencies."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:14
#: accd9fcbadcc456cbab35b1e6714a44e
msgid ":ref:`pip` came later in 2008, as alternative to :ref:`easy_install <easy_install>`, although still largely built on top of :ref:`setuptools` components.  It was notable at the time for *not* installing packages as :term:`Eggs <Egg>` or from :term:`Eggs <Egg>` (but rather simply as 'flat' packages from :term:`sdists <Source Distribution (or \"sdist\")>`), and introducing the idea of :ref:`Requirements Files <pip:Requirements Files>`, which gave users the power to easily replicate environments."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:22
#: c6e1f56f6cf74123b6f45bf51387af0d
msgid "Here's a breakdown of the important differences between pip and the deprecated easy_install:"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
#: 7ea589337ad04625a5bf4261309b491e
msgid "**pip**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:25
#: d962ea51546a4bea9fd526fe2b2964c5
msgid "**easy_install**"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: 93e607f1128a4d6ab3e8b3ca93f79499
msgid "Installs from :term:`Wheels <Wheel>`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
#: 3ba4f36010dd4545ad8ebe4cc862197e
#: 25ffad9817344aba9dbacfb9d63a5982
#: d43d4635fa1a4405bb9706f7139bfcc1
#: 81f6f180c19d467cbcece329a8f08c21
#: 79956f6ac8e041b98b3695524432d459
#: 9b1e5a5abeb54542801dacbf568056d7
msgid "Yes"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:27
#: ../source/discussions/pip-vs-easy-install.rst:30
#: ../source/discussions/pip-vs-easy-install.rst:32
#: ../source/discussions/pip-vs-easy-install.rst:35
#: ../source/discussions/pip-vs-easy-install.rst:38
#: ../source/discussions/pip-vs-easy-install.rst:44
#: ../source/discussions/pip-vs-easy-install.rst:48
#: ../source/discussions/pip-vs-easy-install.rst:51
#: ../source/discussions/pip-vs-easy-install.rst:54
#: ../source/discussions/pip-vs-easy-install.rst:57
#: b68ed93da1cb43de885676bf58935e5e
#: d18bbaab15ca4409b8ea23555957aee1
#: fd12422b982c42dd9f480e5222284d4c
#: 0ba10b71c1fa48fb83116564000df594
#: 0b19ee29c52e4b0297a2e4d87002be3a
#: 9b5a7cb9acdf4d40ac1794852d94604f
#: 45d6d52b09ab40058ecdce1d380f1685
#: dbfdb5be169e4895953c14fd4be3de19
#: 5405d5ec8ed4465cb60e7158fa68db40
#: 51ba6b306180442783ed9594e49f7e5c
msgid "No"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:30
#: 73d82bef6d89473bb79b1af8b97c743a
msgid "Uninstall Packages"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:30
#: 7accfd5538f94310a4689622e6b19918
msgid "Yes (``python -m pip uninstall``)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:32
#: f31ad4d86d8e494eb151c280f39e861b
msgid "Dependency Overrides"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:32
#: 8fd3c6330db845f48cac441717414c3c
msgid "Yes (:ref:`Requirements Files <pip:Requirements Files>`)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:35
#: 21dd7733438c400ea0786eb8f2588c13
msgid "List Installed Packages"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:35
#: 41f8fabd08d148bfb2f2b509ff359db1
msgid "Yes (``python -m pip list`` and ``python -m pip freeze``)"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:38
#: e9756fe2e5424942a5260197feec71ad
msgid ":pep:`438` Support"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: da56cd222c7d48e4a9c72b40c36bb3a1
msgid "Installation format"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: 330f828bff73496fa81bb5425c07f57e
msgid "'Flat' packages with :file:`egg-info` metadata."
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:41
#: 8e8d92b399ef49309c5b0879a9ec24fc
msgid "Encapsulated Egg format"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:44
#: d68651e5664547e9b343a679b6de079b
msgid "sys.path modification"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:48
#: 75fe79bf8627467196bdc3566047ae1c
msgid "Installs from :term:`Eggs <Egg>`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:51
#: 6996beaac698430ea02ddd789cc147fe
msgid "`pylauncher support`_"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:51
#: f73626996c6f44f9a2678463c76cd0c1
msgid "Yes [1]_"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:54
#: ca297f20290a4bc3838aac378212fcb3
msgid ":ref:`Multi-version Installs`"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:57
#: fe2006a53650423e904fc9c3ba4d6eda
msgid "Exclude scripts during install"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: 5ac2e092c8c44924acd12b7addee10cc
msgid "per project index"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: 5236a2a205a5427a94cd30f7beb602fd
msgid "Only in virtualenv"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:60
#: bbaa8dbd8de946bca670bd5623ab5bfb
msgid "Yes, via setup.cfg"
msgstr ""

#: ../source/discussions/pip-vs-easy-install.rst:68
#: dde9715c5882482f8216de95cd48353a
msgid "https://setuptools.readthedocs.io/en/latest/easy_install.html#natural-script-launcher"
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:5
#: c6744480a2dc4408893d76a7b2963e16
msgid "Wheel vs Egg"
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:7
#: f1aca35e996f423eb787d497c9b5f651
msgid ":term:`Wheel` and :term:`Egg` are both packaging formats that aim to support the use case of needing an install artifact that doesn't require building or compilation, which can be costly in testing and production workflows."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:11
#: 6297b535864c4e269b22851f14cd562a
msgid "The :term:`Egg` format was introduced by :ref:`setuptools` in 2004, whereas the :term:`Wheel` format was introduced by :pep:`427` in 2012."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:14
#: e901c4f3f4904156b0d600412c44600b
msgid ":term:`Wheel` is currently considered the standard for :term:`built <Built Distribution>` and :term:`binary <Binary Distribution>` packaging for Python."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:17
#: 378e797c0ebd47838e03e58bf8ca7151
msgid "Here's a breakdown of the important differences between :term:`Wheel` and :term:`Egg`."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:20
#: 035dbf43cb3141d0a130212fc51dc430
msgid ":term:`Wheel` has an :pep:`official PEP <427>`. :term:`Egg` did not."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:22
#: 5605f37789ec4c03a56ea5f7142ded9f
msgid ":term:`Wheel` is a :term:`distribution <Distribution Package>` format, i.e a packaging format. [1]_ :term:`Egg` was both a distribution format and a runtime installation format (if left zipped), and was designed to be importable."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:26
#: b57e4e81be064a11836c2b33428636f4
msgid ":term:`Wheel` archives do not include .pyc files. Therefore, when the distribution only contains Python files (i.e. no compiled extensions), and is compatible with Python 2 and 3, it's possible for a wheel to be \"universal\", similar to an :term:`sdist <Source Distribution (or \"sdist\")>`."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:31
#: ff93101ec143404581f47066545969da
msgid ":term:`Wheel` uses :pep:`PEP376-compliant <376>` ``.dist-info`` directories. Egg used ``.egg-info``."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:34
#: e9c43d3435544cd7963804cb6f8fe07d
msgid ":term:`Wheel` has a :pep:`richer file naming convention <425>`. A single wheel archive can indicate its compatibility with a number of Python language versions and implementations, ABIs, and system architectures."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:38
#: ce8e2281560d4b72a839707f503a39a5
msgid ":term:`Wheel` is versioned. Every wheel file contains the version of the wheel specification and the implementation that packaged it."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:41
#: ee61c1f24ac44e64869cf518c1fbb65a
msgid ":term:`Wheel` is internally organized by `sysconfig path type <http://docs.python.org/2/library/sysconfig.html#installation-paths>`_, therefore making it easier to convert to other formats."
msgstr ""

#: ../source/discussions/wheel-vs-egg.rst:47
#: bc73fe518ec64d50ac8bd70d7ce7e53d
msgid "Circumstantially, in some cases, wheels can be used as an importable runtime format, although :pep:`this is not officially supported at this time <427#is-it-possible-to-import-python-code-directly-from-a-wheel-file>`."
msgstr ""

#: ../source/glossary.rst:3
#: 8066cbdeb48d4db1a5f8724532f5c90c
msgid "Glossary"
msgstr ""

#: ../source/glossary.rst:8
#: 84415d09b2c4481eb80e5baf384616f8
msgid "Binary Distribution"
msgstr ""

#: ../source/glossary.rst:11
#: 9195f95c1c4f4b80a80571d0b5fa8d5b
msgid "A specific kind of :term:`Built Distribution` that contains compiled extensions."
msgstr ""

#: ../source/glossary.rst:14
#: b083c634d27a4aef90148af525ffbc51
msgid "Built Distribution"
msgstr ""

#: ../source/glossary.rst:17
#: 48040ebede8744ad95c663ffe2376119
msgid "A :term:`Distribution <Distribution Package>` format containing files and metadata that only need to be moved to the correct location on the target system, to be installed. :term:`Wheel` is such a format, whereas distutil's :term:`Source Distribution <Source Distribution (or \"sdist\")>` is not, in that it requires a build step before it can be installed.  This format does not imply that Python files have to be precompiled (:term:`Wheel` intentionally does not include compiled Python files)."
msgstr ""

#: ../source/glossary.rst:26
#: e5a7e8cad69b4050b71b952824cc8f7b
msgid "Distribution Package"
msgstr ""

#: ../source/glossary.rst:29
#: 84f091f12ed843ed852459142d08596a
msgid "A versioned archive file that contains Python :term:`packages <Import Package>`, :term:`modules <Module>`, and other resource files that are used to distribute a :term:`Release`. The archive file is what an end-user will download from the internet and install."
msgstr ""

#: ../source/glossary.rst:34
#: 3140c9429a46413a85278249b5ade0fb
msgid "A distribution package is more commonly referred to with the single words \"package\" or \"distribution\", but this guide may use the expanded term when more clarity is needed to prevent confusion with an :term:`Import Package` (which is also commonly called a \"package\") or another kind of distribution (e.g. a Linux distribution or the Python language distribution), which are often referred to with the single term \"distribution\"."
msgstr ""

#: ../source/glossary.rst:41
#: f2c33c83f1dc442492d46a3096c5aa22
msgid "Egg"
msgstr ""

#: ../source/glossary.rst:44
#: 0ced94550efe42f8886c0c95a56180d0
msgid "A :term:`Built Distribution` format introduced by :ref:`setuptools`, which is being replaced by :term:`Wheel`.  For details, see `The Internal Structure of Python Eggs <https://setuptools.readthedocs.io/en/latest/deprecated/python_eggs.html>`_ and `Python Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../source/glossary.rst:49
#: d06f7139376843f8b206d643bb1c4883
msgid "Extension Module"
msgstr ""

#: ../source/glossary.rst:52
#: 2b9ecc74bee04fd5903de67a84b40513
msgid "A :term:`Module` written in the low-level language of the Python implementation: C/C++ for Python, Java for Jython. Typically contained in a single dynamically loadable pre-compiled file, e.g.  a shared object (.so) file for Python extensions on Unix, a DLL (given the .pyd extension) for Python extensions on Windows, or a Java class file for Jython extensions."
msgstr ""

#: ../source/glossary.rst:59
#: 9ea2055638cf43918e73d08c73ada3ce
msgid "Known Good Set (KGS)"
msgstr ""

#: ../source/glossary.rst:62
#: 2b56b7f1d38f48d7a56ce4ceccc3f92f
msgid "A set of distributions at specified versions which are compatible with each other. Typically a test suite will be run which passes all tests before a specific set of packages is declared a known good set. This term is commonly used by frameworks and toolkits which are comprised of multiple individual distributions."
msgstr ""

#: ../source/glossary.rst:68
#: 72a823464e764a0885397944babef14e
msgid "Import Package"
msgstr ""

#: ../source/glossary.rst:71
#: e168e5814941419ab643ab44b186fc49
msgid "A Python module which can contain other modules or recursively, other packages."
msgstr ""

#: ../source/glossary.rst:74
#: 01ff8fda7fea480ba318bbc82d7f501f
msgid "An import package is more commonly referred to with the single word \"package\", but this guide will use the expanded term when more clarity is needed to prevent confusion with a :term:`Distribution Package` which is also commonly called a \"package\"."
msgstr ""

#: ../source/glossary.rst:78
#: fb8f984858ba42dbaf5b307f432c945b
msgid "Module"
msgstr ""

#: ../source/glossary.rst:81
#: 60eeb62c75064a5aa21d7146f5f01b6e
msgid "The basic unit of code reusability in Python, existing in one of two types: :term:`Pure Module`, or :term:`Extension Module`."
msgstr ""

#: ../source/glossary.rst:84
#: 2ca32dca776f410189b0c70ac4c15dd2
msgid "Package Index"
msgstr ""

#: ../source/glossary.rst:87
#: 3062e548a0e845dc9e524b2af53f68b1
msgid "A repository of distributions with a web interface to automate :term:`package <Distribution Package>` discovery and consumption."
msgstr ""

#: ../source/glossary.rst:90
#: 26ddb30d996b4664a3c8f503c2ffa0d8
msgid "Per Project Index"
msgstr ""

#: ../source/glossary.rst:93
#: 0176e4336f7348ac8485089bc08f8c87
msgid "A private or other non-canonical :term:`Package Index` indicated by a specific :term:`Project` as the index preferred or required to resolve dependencies of that project."
msgstr ""

#: ../source/glossary.rst:97
#: 3f97c5ff1c414980aeb8f05cf067c60b
msgid "Project"
msgstr ""

#: ../source/glossary.rst:100
#: 9f5ca80b659042928d7c288bedf1ae39
msgid "A library, framework, script, plugin, application, or collection of data or other resources, or some combination thereof that is intended to be packaged into a :term:`Distribution <Distribution Package>`."
msgstr ""

#: ../source/glossary.rst:104
#: f5462a89b04d49749727c7daf3fa5a4e
msgid "Since most projects create :term:`Distributions <Distribution Package>` using either :pep:`518` ``build-system``, :ref:`distutils` or :ref:`setuptools`, another practical way to define projects currently is something that contains a :term:`pyproject.toml`, :term:`setup.py`, or :term:`setup.cfg` file at the root of the project source directory."
msgstr ""

#: ../source/glossary.rst:110
#: 0793187fba364289a988561c68396531
msgid "Python projects must have unique names, which are registered on :term:`PyPI <Python Package Index (PyPI)>`. Each project will then contain one or more :term:`Releases <Release>`, and each release may comprise one or more :term:`distributions <Distribution Package>`."
msgstr ""

#: ../source/glossary.rst:115
#: a90bf6de5d18488485944c7e21d9dee9
msgid "Note that there is a strong convention to name a project after the name of the package that is imported to run that project. However, this doesn't have to hold true. It's possible to install a distribution from the project 'foo' and have it provide a package importable only as 'bar'."
msgstr ""

#: ../source/glossary.rst:121
#: c70cd0ce659f458eae5af0b8968f35b3
msgid "Pure Module"
msgstr ""

#: ../source/glossary.rst:124
#: 0dd7068e8de642f7942643e7dc1a8a43
msgid "A :term:`Module` written in Python and contained in a single ``.py`` file (and possibly associated ``.pyc`` and/or ``.pyo`` files)."
msgstr ""

#: ../source/glossary.rst:127
#: 0df833bb60ba451cb6931949af04e6e5
msgid "Python Packaging Authority (PyPA)"
msgstr ""

#: ../source/glossary.rst:130
#: b934391bed754030917cf68f4039129a
msgid "PyPA is a working group that maintains many of the relevant projects in Python packaging. They maintain a site at https://www.pypa.io, host projects on `GitHub <https://github.com/pypa>`_ and `Bitbucket <https://bitbucket.org/pypa>`_, and discuss issues on the `distutils-sig mailing list <https://mail.python.org/mailman3/lists/distutils-sig.python.org/>`_ and `the Python Discourse forum <https://discuss.python.org/c/packaging>`__."
msgstr ""

#: ../source/glossary.rst:139
#: b41afcaaaf31489b8f5173f7d083f1d6
msgid "Python Package Index (PyPI)"
msgstr ""

#: ../source/glossary.rst:142
#: c3d1c34b73014121aef7d649d036f3f2
msgid "`PyPI <https://pypi.org>`_ is the default :term:`Package Index` for the Python community. It is open to all Python developers to consume and distribute their distributions."
msgstr ""

#: ../source/glossary.rst:145
#: 40c0e5a8eb9a4ee7a995c0c788a7da8a
msgid "pypi.org"
msgstr ""

#: ../source/glossary.rst:148
#: 500a6d0a5b3a45c2a2be43d2d09257df
msgid "`pypi.org <https://pypi.org>`_ is the domain name for the :term:`Python Package Index (PyPI)`. It replaced the legacy index domain name, ``pypi.python.org``, in 2017. It is powered by :ref:`warehouse`."
msgstr ""

#: ../source/glossary.rst:152
#: 7d1ef48e83a4415a9ce770ce4ad18b5e
msgid "pyproject.toml"
msgstr ""

#: ../source/glossary.rst:155
#: 890daa37d6fe4725a80e2807695ce9fd
msgid "The tool-agnostic :term:`Project` specification file. Defined in :pep:`518`."
msgstr ""

#: ../source/glossary.rst:157
#: 741a646f97664ee9890e30e807d8553d
msgid "Release"
msgstr ""

#: ../source/glossary.rst:160
#: 595394f6d2344f93a1171ce84c7e93d3
msgid "A snapshot of a :term:`Project` at a particular point in time, denoted by a version identifier."
msgstr ""

#: ../source/glossary.rst:163
#: b1a9bfd75c5c43bd8023bb1f3d9024b7
msgid "Making a release may entail the publishing of multiple :term:`Distributions <Distribution Package>`.  For example, if version 1.0 of a project was released, it could be available in both a source distribution format and a Windows installer distribution format."
msgstr ""

#: ../source/glossary.rst:168
#: 83884b19842d474eae12a70deb897f41
msgid "Requirement"
msgstr ""

#: ../source/glossary.rst:171
#: ed6fbc04effb45b5997061d09ea5f713
msgid "A specification for a :term:`package <Distribution Package>` to be installed.  :ref:`pip`, the :term:`PYPA <Python Packaging Authority (PyPA)>` recommended installer, allows various forms of specification that can all be considered a \"requirement\". For more information, see the :ref:`pip:pip install` reference."
msgstr ""

#: ../source/glossary.rst:177
#: 6c607c070dfd440baa9d530fe75471e3
msgid "Requirement Specifier"
msgstr ""

#: ../source/glossary.rst:180
#: 9baf2c66df0346239aea64b5d4c21c03
msgid "A format used by :ref:`pip` to install packages from a :term:`Package Index`. For an EBNF diagram of the format, see the `pkg_resources.Requirement <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#requirement-objects>`_ entry in the :ref:`setuptools` docs. For example, \"foo>=1.3\" is a requirement specifier, where \"foo\" is the project name, and the \">=1.3\" portion is the :term:`Version Specifier`"
msgstr ""

#: ../source/glossary.rst:187
#: 84c061914fa84bbaabfd056b66327d7c
msgid "Requirements File"
msgstr ""

#: ../source/glossary.rst:190
#: 69495560636b4821ba982d7ed7ded028
msgid "A file containing a list of :term:`Requirements <Requirement>` that can be installed using :ref:`pip`. For more information, see the :ref:`pip` docs on :ref:`pip:Requirements Files`."
msgstr ""

#: ../source/glossary.rst:194
#: ../source/guides/distributing-packages-using-setuptools.rst:56
#: a4374bb81fc64c6eb60b9dd0d5e8e7ae
#: 8cfeac4fb34f45a58d0988b3afcd183b
msgid "setup.py"
msgstr ""

#: ../source/glossary.rst:195
#: ../source/guides/distributing-packages-using-setuptools.rst:77
#: 177b00829d47409183f461977542f06a
#: 44544dcbc5f24848b8f7b4fa523e6b13
msgid "setup.cfg"
msgstr ""

#: ../source/glossary.rst:198
#: 7dbec5f581b94ab5bdc94f88ee7794c7
msgid "The project specification files for :ref:`distutils` and :ref:`setuptools`. See also :term:`pyproject.toml`."
msgstr ""

#: ../source/glossary.rst:201
#: 15695160c77742f8bef1019d0cd6fecc
msgid "Source Archive"
msgstr ""

#: ../source/glossary.rst:204
#: 93adb950c9944e99b0ee4e1f76f671a6
msgid "An archive containing the raw source code for a :term:`Release`, prior to creation of a :term:`Source Distribution <Source Distribution (or \"sdist\")>` or :term:`Built Distribution`."
msgstr ""

#: ../source/glossary.rst:208
#: 3e15914042a74808b23e4ce92c2fd9ca
msgid "Source Distribution (or \"sdist\")"
msgstr ""

#: ../source/glossary.rst:211
#: 704dd96180af4dab86cf676123a77bf5
msgid "A :term:`distribution <Distribution Package>` format (usually generated using ``python setup.py sdist``) that provides metadata and the essential source files needed for installing by a tool like :ref:`pip`, or for generating a :term:`Built Distribution`."
msgstr ""

#: ../source/glossary.rst:216
#: 6230bd45e2cb4269ae93584f5bb7afc6
msgid "System Package"
msgstr ""

#: ../source/glossary.rst:219
#: 7f0236fd72894ff4bf2cc964bfe73755
msgid "A package provided in a format native to the operating system, e.g. an rpm or dpkg file."
msgstr ""

#: ../source/glossary.rst:222
#: ac80509ec9274950ba40efeb6eccea71
msgid "Version Specifier"
msgstr ""

#: ../source/glossary.rst:225
#: e400bc53f19347a5b7126c91a7c739a9
msgid "The version component of a :term:`Requirement Specifier`. For example, the \">=1.3\" portion of \"foo>=1.3\".  :pep:`440` contains a :pep:`full specification <440#version-specifiers>` of the specifiers that Python packaging currently supports.  Support for PEP440 was implemented in :ref:`setuptools` v8.0 and :ref:`pip` v6.0."
msgstr ""

#: ../source/glossary.rst:231
#: dba34870fc534d1eb95ba884c6f64020
msgid "Virtual Environment"
msgstr ""

#: ../source/glossary.rst:234
#: adb6a1abdf97410a9e2369b199150443
msgid "An isolated Python environment that allows packages to be installed for use by a particular application, rather than being installed system wide. For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/glossary.rst:238
#: 0ff7cbef76b64e1abad788c764bd795a
msgid "Wheel"
msgstr ""

#: ../source/glossary.rst:241
#: c38a07d3a8a74349b61ee6491c3826ed
msgid "A :term:`Built Distribution` format introduced by :pep:`427`, which is intended to replace the :term:`Egg` format.  Wheel is currently supported by :ref:`pip`."
msgstr ""

#: ../source/glossary.rst:244
#: ad5e2147bfc24e9eb7b9e985a63d7ae9
msgid "Working Set"
msgstr ""

#: ../source/glossary.rst:247
#: b59994521ecb40a1a353eaf6fddff36d
msgid "A collection of :term:`distributions <Distribution Package>` available for importing. These are the distributions that are on the `sys.path` variable. At most, one :term:`Distribution <Distribution Package>` for a project is possible in a working set."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:3
#: d79bc70ee89940048fa3a40055719296
msgid "Analyzing PyPI package downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:5
#: 903b028324dc45d0b1b155de9517ec23
msgid "This section covers how to use the public PyPI download statistics dataset to learn more about downloads of a package (or packages) hosted on PyPI. For example, you can use it to discover the distribution of Python versions used to download a package."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:15
#: ../source/guides/supporting-windows-using-appveyor.rst:18
#: df62d52953b84250ba51b23d33addc26
#: af452b3017c74cccb96b3664683715c0
msgid "Background"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:17
#: 4fc8467e783d4c2ca4d174106330be19
msgid "PyPI does not display download statistics for a number of reasons: [#]_"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:19
#: ae30f835d90a48e281d84408e7cad970
msgid "**Inefficient to make work with a Content Distribution Network (CDN):** Download statistics change constantly. Including them in project pages, which are heavily cached, would require invalidating the cache more often, and reduce the overall effectiveness of the cache."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:24
#: 245af5ec1e1a4813b2447da7deeca57e
msgid "**Highly inaccurate:** A number of things prevent the download counts from being accurate, some of which include:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:27
#: 8f6c8c3d494f4883a164524ef3f1b4c1
msgid "``pip``'s download cache (lowers download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:28
#: 63c8dc71a35d47e78d72a9f1f0e3389f
msgid "Internal or unofficial mirrors (can both raise or lower download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:29
#: 6e507d7096e74dc9a96e4b63306e8d9e
msgid "Packages not hosted on PyPI (for comparisons sake)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:30
#: 3252a232f69b4c7cacfceef6733e8706
msgid "Unofficial scripts or attempts at download count inflation (raises download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:32
#: 5ba587e8dd174afc9819c79475e19d0f
msgid "Known historical data quality issues (lowers download counts)"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:34
#: f68bce5dcc0d4c4bafa292ac44770bdc
msgid "**Not particularly useful:** Just because a project has been downloaded a lot doesn't mean it's good; Similarly just because a project hasn't been downloaded a lot doesn't mean it's bad!"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:38
#: 70411a23ff894cbfa4e90398b892f967
msgid "In short, because it's value is low for various reasons, and the tradeoffs required to make it work are high, it has been not an effective use of limited resources."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:43
#: b145cfd3459f44d7b080b50e86598295
msgid "Public dataset"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:45
#: c19ab16f91584a698bd5d5269e1c5f47
msgid "As an alternative, the `Linehaul project <https://github.com/pypa/linehaul>`__ streams download logs from PyPI to `Google BigQuery`_ [#]_, where they are stored as a public dataset."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:50
#: a035fd6f43d441ab8dc134633fc1e68e
msgid "Getting set up"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:52
#: 823b6135fbfb4b828c163c3454867b36
msgid "In order to use `Google BigQuery`_ to query the `public PyPI download statistics dataset`_, you'll need a Google account and to enable the BigQuery API on a Google Cloud Platform project. You can run the up to 1TB of queries per month `using the BigQuery free tier without a credit card <https://cloud.google.com/blog/big-data/2017/01/how-to-run-a-terabyte-of-google-bigquery-queries-each-month-without-a-credit-card>`__"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:58
#: 1d22db854b044d61b2806e71486b6190
msgid "Navigate to the `BigQuery web UI`_."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:59
#: b5c7e378d7c246118a284b550d8f4b84
msgid "Create a new project."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:60
#: 2177cbcd8e464edca7c66db9b834ab3d
msgid "Enable the `BigQuery API <https://console.developers.google.com/apis/library/bigquery-json.googleapis.com>`__."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:63
#: c10287564d4f474e9cec2ffa75775fe1
msgid "For more detailed instructions on how to get started with BigQuery, check out the `BigQuery quickstart guide <https://cloud.google.com/bigquery/docs/quickstarts/quickstart-web-ui>`__."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:69
#: 1a03f4b488c444a9b92771f60e52b908
msgid "Data schema"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:71
#: 1597b10500c94ba0832eaf49af729161
msgid "Linehaul writes an entry in a ``bigquery-public-data.pypi.file_downloads`` table for each download. The table contains information about what file was downloaded and how it was downloaded. Some useful columns from the `table schema <https://console.cloud.google.com/bigquery?pli=1&p=bigquery-public-data&d=pypi&t=file_downloads&page=table>`__ include:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: 51e8025c4ff6405e9db98dce9ea9d3e1
msgid "Column"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/guides/using-manifest-in.rst:67
#: ../source/specifications/core-metadata.rst:185
#: 54a0b152256148f981321662be67903d
#: 78f6a4e332c14cbc96a34fe520368be2
#: ed088349664a4aa882347d7890313819
msgid "Description"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:78
#: ../source/specifications/direct-url.rst:226
#: adec61776b814eaabee72a62b272d673
#: 141f0e8a6fca46f797409242eb56d280
msgid "Examples"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: 30d87be21cd6493da37272dd66e83551
msgid "timestamp"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: 22de2524eea54e52a3eca7e1a61acb49
msgid "Date and time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:80
#: 3cca3d8ece884d7b8c9ac81f13973997
msgid "``2020-03-09 00:33:03 UTC``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: cd53b5e58cab4b73b34dcc3b87e38c1b
msgid "file.project"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: d97460b040e041f1bfa45d8c90311e2f
msgid "Project name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:82
#: 74f5d7b8b5b94973be2cb6a1a3515edd
msgid "``pipenv``, ``nose``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: badb2bbe3b50464d9d0195f938f9dda0
msgid "file.version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: 0ac260418d834ab5a9fa38c3f2d75d11
msgid "Package version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:84
#: 40a7659b568c473b9c038ab7c25bf894
msgid "``0.1.6``, ``1.4.2``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: 8a4d483b6c35403499920894290e1e8e
msgid "details.installer.name"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: 3a7bf8d29b5244f882cef2f517990f6a
msgid "Installer"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:86
#: e4929a30f0e3452d82896a6711795cba
msgid "pip, `bandersnatch`_"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: a99eb0bcde214f12892c04e0741fdf69
msgid "details.python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: 680879f1db0649b7a9d0f302fe4b477d
msgid "Python version"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:88
#: f4a4b01dc094426fad993886e51d92d5
msgid "``2.7.12``, ``3.6.4``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:93
#: f14446a4ab754c4c9b3355bda6249fd4
msgid "Useful queries"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:95
#: 381c31329e5f47c8b07f6599446eb36f
msgid "Run queries in the `BigQuery web UI`_ by clicking the \"Compose query\" button."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:97
#: 7beb846efbf84213a2d0e51f37ba8b4f
msgid "Note that the rows are stored in a partitioned, which helps limit the cost of queries. These example queries analyze downloads from recent history by filtering on the ``timestamp`` column."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:102
#: 2a97fd3bdd6240fc863c0e95ca237d4b
msgid "Counting package downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:104
#: 8ddf5fd9add941798f09e0b11f5c0f85
msgid "The following query counts the total number of downloads for the project \"pytest\"."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:119
#: ../source/guides/analyzing-pypi-package-downloads.rst:140
#: ../source/guides/analyzing-pypi-package-downloads.rst:168
#: ../source/guides/analyzing-pypi-package-downloads.rst:205
#: 6049de678464444494659a3c5ba54f2a
#: 450132bc822849c59d1894e9e129d840
#: 1fa8662043f74915aaf6adec94b93513
#: e9e3784bc3034953a5f787f6e70bc9bf
msgid "num_downloads"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:121
#: fef6363a00384597aba9d85f9d4dd4c6
msgid "26190085"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:124
#: 32bb5a8cd5d64f3c8cbdb7df308e7bf7
msgid "To only count downloads from pip, filter on the ``details.installer.name`` column."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:142
#: d90da96b8cb447c1b40b31ddb09fcbae
msgid "24334215"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:146
#: 2017d6a9a2dc458b918c7019911a9dc9
msgid "Package downloads over time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:148
#: c2a06928e957425790bbe8aebef99976
msgid "To group by monthly downloads, use the ``TIMESTAMP_TRUNC`` function. Also filtering by this column reduces corresponding costs."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:168
#: 9b0cd17b53dd44b883398ce0483fd113
msgid "month"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
#: 27262c11fff04c0ca9ab2df0dcb61fd6
msgid "1956741"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:170
#: 1210fe71b0754ed9abb5b4c7f21f9c09
msgid "2018-01-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
#: 6ae6c7fe2e6f45d6a3e1a9986eaa8048
msgid "2344692"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:172
#: f153ef37d8db4f2f9535bca70ad2dd93
msgid "2017-12-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
#: f01c6ac9ede04094aeddbef4ab83364f
msgid "1730398"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:174
#: 522c4ed3f7a94ed4abc047b0da181511
msgid "2017-11-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
#: 0ad40983f06746c988b6ce46af946b41
msgid "2047310"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:176
#: 7cd62a22e89044aa849874e82a04bed8
msgid "2017-10-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
#: c30f71f577d741bcb0f363bf59dd527e
msgid "1744443"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:178
#: 1d4eb831e28a45839b6841edbd1e578c
msgid "2017-09-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
#: e459fa6543a24d1d923cd9da628eff0a
msgid "1916952"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:180
#: 04321f34086646bd8feb78e8f03320d5
msgid "2017-08-01"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:184
#: f50c8b7f0ee14e13b447bd12c6d05f99
msgid "Python versions over time"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:186
#: 7cf963540b4d40da94d360135d5e8d02
msgid "Extract the Python version from the ``details.python`` column. Warning: This query processes over 500 GB of data."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:205
#: a3f9f78c634f4ff6a0374e6ddf97b36f
msgid "python"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
#: 11f39baee9864456bd20ce5d89f78641
msgid "3.7"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:207
#: dc87e0212f9d40c4aa355cc3b71a7c46
msgid "18051328726"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
#: 66acd13e626c497aacd6d5d8a0aabb2b
msgid "3.6"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:209
#: 9b136ee1e4b241b6a3e955abd38dacaa
msgid "9635067203"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
#: 44a129f257f245e3a0b26723ab5327b7
msgid "3.8"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:211
#: 58771b30c81246749cf5afbe89bcb706
msgid "7781904681"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
#: 96a629eda50f4437aaf6aa2b8e86d8f8
msgid "2.7"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:213
#: 23ff435a8ac8441da98a0491cae926ae
msgid "6381252241"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
#: e620af87a4874fa2b16243ed30e9f28c
msgid "null"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:215
#: 3bf94ea809f143ef902baff5d2b7bebe
msgid "2026630299"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
#: 4b3c6856a979433bb939e14036b0d950
msgid "3.5"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:217
#: a12cf25d5dcb4422b42b3e527e3dbe7a
msgid "1894153540"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:221
#: ba9aefdd0fa9445c9eca07c4f3101c34
msgid "Caveats"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:223
#: 94b75910f37f401597b89b300ad7b193
msgid "In addition to the caveats listed in the background above, Linehaul suffered from a bug which caused it to significantly under-report download statistics prior to July 26, 2018. Downloads before this date are proportionally accurate (e.g. the percentage of Python 2 vs. Python 3 downloads) but total numbers are lower than actual by an order of magnitude."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:231
#: 1dd995e69df24babafcdc849a33e84bc
msgid "Additional tools"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:233
#: 2d7c2a20225941aebc1d90cd334ec33b
msgid "Besides using the BigQuery console, there are some additional tools which may be useful when analyzing download statistics."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:237
#: f7ecbb31119e4147862b5e07417e77fe
msgid "``google-cloud-bigquery``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:239
#: 41f79337392d42559834276c8022d81f
msgid "You can also access the public PyPI download statistics dataset programmatically via the BigQuery API and the `google-cloud-bigquery`_ project, the official Python client library for BigQuery."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:267
#: 9c7d9224d7694bafa269b11712d030bf
msgid "``pypinfo``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:269
#: c98abf22dc9544bb89295daa5ba3b46e
msgid "`pypinfo`_ is a command-line tool which provides access to the dataset and can generate several useful queries. For example, you can query the total number of download for a package with the command ``pypinfo package_name``."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:273
#: f8ac54a8b87c45c6bb640ba4037da7d6
msgid "Install `pypinfo`_ using pip."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:279
#: b36bb3d0d18e448983f540ac55aecfff
msgid "Usage:"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:295
#: 5c4988d0acaa4161bde271df70925ddd
msgid "``pandas-gbq``"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:297
#: ae260d9ec382434582209d91c6d240c4
msgid "The `pandas-gbq`_ project allows for accessing query results via `Pandas`_."
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:301
#: ../source/specifications/binary-distribution-format.rst:459
#: d5754a9f3e284854a5c843710e84a1d4
#: 334ac3628b2c460191bfc5012683aa58
msgid "References"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:303
#: d973d52a003e41739dea2f2584214c42
msgid "`PyPI Download Counts deprecation email <https://mail.python.org/pipermail/distutils-sig/2013-May/020855.html>`__"
msgstr ""

#: ../source/guides/analyzing-pypi-package-downloads.rst:304
#: b916ad399ed34c3ab55678b9fcbf580e
msgid "`PyPI BigQuery dataset announcement email <https://mail.python.org/pipermail/distutils-sig/2016-May/028986.html>`__"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:3
#: 5b7b3eb9ff7b475e887394731904b06d
msgid "Creating and discovering plugins"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:5
#: e54114a0451344f69bf2a3805b3e6585
msgid "Often when creating a Python application or library you'll want the ability to provide customizations or extra features via **plugins**. Because Python packages can be separately distributed, your application or library may want to automatically **discover** all of the plugins available."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:10
#: 7cb24b962d1840cf96fcc58f7167d5b2
msgid "There are three major approaches to doing automatic plugin discovery:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:12
#: 93b49869f2d5464e840a0909f325c976
msgid "`Using naming convention`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:13
#: 446be48311c449a3b673d0afbe63c8f1
msgid "`Using namespace packages`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:14
#: 3ba23f3bb8634d8aa5d3c3d1cb29861d
msgid "`Using package metadata`_."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:18
#: 662f0deb9f4c4f06b9a72e28f3b2e3ce
msgid "Using naming convention"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:20
#: 97f33b7f1d2647ac873652397f841ea7
msgid "If all of the plugins for your application follow the same naming convention, you can use :func:`pkgutil.iter_modules` to discover all of the top-level modules that match the naming convention. For example, `Flask`_ uses the naming convention ``flask_{plugin_name}``. If you wanted to automatically discover all of the Flask plugins installed:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:38
#: 13964a2df6a942c294aea6040a05a85d
msgid "If you had both the `Flask-SQLAlchemy`_ and `Flask-Talisman`_ plugins installed then ``discovered_plugins`` would be:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:48
#: 1588d3f750e1490fa78aeff3863e6c71
msgid "Using naming convention for plugins also allows you to query the Python Package Index's `simple API`_ for all packages that conform to your naming convention."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:59
#: 0152b117281446b580f3f3a2bf581dbc
msgid "Using namespace packages"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:61
#: 4587d507336b49fb87ac842123ae1e6c
msgid ":doc:`Namespace packages <packaging-namespace-packages>` can be used to provide a convention for where to place plugins and also provides a way to perform discovery. For example, if you make the sub-package ``myapp.plugins`` a namespace package then other :term:`distributions <Distribution Package>` can provide modules and packages to that namespace. Once installed, you can use :func:`pkgutil.iter_modules` to discover all modules and packages installed under that namespace:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:89
#: 54ba49643108407797d84bff4db1fa19
msgid "Specifying ``myapp.plugins.__path__`` to :func:`~pkgutil.iter_modules` causes it to only look for the modules directly under that namespace. For example, if you have installed distributions that provide the modules ``myapp.plugins.a`` and ``myapp.plugins.b`` then ``discovered_plugins`` in this case would be:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:101
#: 7fc9c0b031f8442ca472867f8cf32f29
msgid "This sample uses a sub-package as the namespace package (``myapp.plugins``), but it's also possible to use a top-level package for this purpose (such as ``myapp_plugins``). How to pick the namespace to use is a matter of preference, but it's not recommended to make your project's main top-level package (``myapp`` in this case) a namespace package for the purpose of plugins, as one bad plugin could cause the entire namespace to break which would in turn make your project unimportable. For the \"namespace sub-package\" approach to work, the plugin packages must omit the :file:`__init__.py` for your top-level package directory (``myapp`` in this case) and include the namespace-package style :file:`__init__.py` in the namespace sub-package directory (``myapp/plugins``).  This also means that plugins will need to explicitly pass a list of packages to :func:`setup`'s ``packages`` argument instead of using :func:`setuptools.find_packages`."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:115
#: e7bffbee773a4b249899f27283445419
msgid "Namespace packages are a complex feature and there are several different ways to create them. It's highly recommended to read the :doc:`packaging-namespace-packages` documentation and clearly document which approach is preferred for plugins to your project."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:121
#: e1796d1293384dd1a1fcb11560f4a2c7
msgid "Using package metadata"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:123
#: 43496dd1477d45c5bfbb7a79ab8402ba
msgid "`Setuptools`_ provides :doc:`special support <setuptools:userguide/entry_point>` for plugins. By providing the ``entry_points`` argument to :func:`setup` in :file:`setup.py` plugins can register themselves for discovery."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:128
#: 3667c880cf314472a2fc1d0c27439fb7
msgid "For example if you have a package named ``myapp-plugin-a`` and it includes in its :file:`setup.py`:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:139
#: 1148fe39e3524d27b78f2debf9a0c85f
msgid "Then you can discover and load all of the registered entry points by using :func:`importlib.metadata.entry_points` (or the `backport`_ ``importlib_metadata >= 3.6`` for Python 3.6-3.9):"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:154
#: 0ce7e813852b4b118348ac3b23689574
msgid "In this example, ``discovered_plugins`` would be a collection of type :class:`importlib.metadata.EntryPoint`:"
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:163
#: 3fb116bc1d0f4f6891aceaef6716b640
msgid "Now the module of your choice can be imported by executing ``discovered_plugins['a'].load()``."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:166
#: 70d749cc065e45429dec50dd8150bd4e
msgid "The ``entry_point`` specification in :file:`setup.py` is fairly flexible and has a lot of options. It's recommended to read over the entire section on :doc:`entry points <setuptools:userguide/entry_point>` ."
msgstr ""

#: ../source/guides/creating-and-discovering-plugins.rst:170
#: 8bb8256382c14e2ba90260e90d50dd07
msgid "Since this specification is part of the :doc:`standard library <python:library/importlib.metadata>`, most packaging tools other than setuptools provide support for defining entry points."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:5
#: 16e52955e84a4bb39bfa910bd171c1e5
msgid "Packaging and distributing projects"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:7
#: de13ab499dfa469d9b7f619cad912357
msgid "This section covers the basics of how to configure, package and distribute your own Python projects.  It assumes that you are already familiar with the contents of the :doc:`/tutorials/installing-packages` page."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:11
#: 61130ad893eb4947935c2f150f09bca1
msgid "The section does *not* aim to cover best practices for Python project development as a whole.  For example, it does not provide guidance or tool recommendations for version control, documentation, or testing."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:15
#: 2df7437533f34cc99dffc04c83ec5ae4
msgid "For more reference material, see :std:doc:`Building and Distributing Packages <userguide/index>` in the :ref:`setuptools` docs, but note that some advisory content there may be outdated. In the event of conflicts, prefer the advice in the Python Packaging User Guide."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:25
#: 2021a4e1ceb142dfa9f1e89c3b2dd3e9
msgid "Requirements for packaging and distributing"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:26
#: 8a7a60a0a45848daac166961219e056c
msgid "First, make sure you have already fulfilled the :ref:`requirements for installing packages <installing_requirements>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:29
#: f9cabef7284a44948a3d0fe02da7c85d
msgid "Install \"twine\" [1]_:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:43
#: cd05d971d0d94247bbbb74b289e100ce
msgid "You'll need this to upload your project :term:`distributions <Distribution Package>` to :term:`PyPI <Python Package Index (PyPI)>` (see :ref:`below <Uploading your Project to PyPI>`)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:49
#: 313ea0d6478141aa924d86eadcb9b6aa
msgid "Configuring your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:53
#: 4889e2982d2046ce8b2a644c33c2fef0
msgid "Initial files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:58
#: 74c9004bbf4d4d4d8e82fe973183845e
msgid "The most important file is :file:`setup.py` which exists at the root of your project directory. For an example, see the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:63
#: e1a1da0a4ff34e83be6e1d09d0da9385
msgid ":file:`setup.py` serves two primary functions:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:65
#: b7d768da5a22413baf9b8a8bc6d828c0
msgid "It's the file where various aspects of your project are configured. The primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined.  The most relevant arguments are explained in :ref:`the section below <setup() args>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:71
#: fcb73807283146a49ba8eadbef084b72
msgid "It's the command line interface for running various commands that relate to packaging tasks. To get a listing of available commands, run ``python setup.py --help-commands``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:79
#: d12276a20a714873a975b6fa21ff889e
msgid ":file:`setup.cfg` is an ini file that contains option defaults for :file:`setup.py` commands.  For an example, see the `setup.cfg <https://github.com/pypa/sampleproject/blob/master/setup.cfg>`_ in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:86
#: cef70debbcb34a8fa94efad92ce51f2d
msgid "README.rst / README.md"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:88
#: 4199c6ad2294410d80ed4968a4cc70bf
msgid "All projects should contain a readme file that covers the goal of the project. The most common format is `reStructuredText <http://docutils.sourceforge.net/rst.html>`_ with an \"rst\" extension, although this is not a requirement; multiple variants of `Markdown <https://daringfireball.net/projects/markdown/>`_ are supported as well (look at ``setup()``'s :ref:`long_description_content_type <description>` argument)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:95
#: 70a7c8410b2c4757aa2ee2ee1468e0c0
msgid "For an example, see `README.md <https://github.com/pypa/sampleproject/blob/master/README.md>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:99
#: 593a09e26d054d1c9a21807b4aff0d3d
msgid "Projects using :ref:`setuptools` 0.6.27+ have standard readme files (:file:`README.rst`, :file:`README.txt`, or :file:`README`) included in source distributions by default. The built-in :ref:`distutils` library adopts this behavior beginning in Python 3.7. Additionally, :ref:`setuptools` 36.4.0+ will include a :file:`README.md` if found. If you are using setuptools, you don't need to list your readme file in :file:`MANIFEST.in`. Otherwise, include it to be explicit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:108
#: 581f142a17ee4007af533a482df7173a
msgid "MANIFEST.in"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:110
#: 0132eeb4df6e464bab1b3fbf582d6520
msgid "A :file:`MANIFEST.in` is needed when you need to package additional files that are not automatically included in a source distribution.  For details on writing a :file:`MANIFEST.in` file, including a list of what's included by default, see \":ref:`Using MANIFEST.in`\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:115
#: 82c630a41ed04655bff7f4ede0ee68a7
msgid "For an example, see the `MANIFEST.in <https://github.com/pypa/sampleproject/blob/master/MANIFEST.in>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:119
#: 1e3fa74f90a24aab967bca909b058294
msgid ":file:`MANIFEST.in` does not affect binary distributions such as wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:122
#: 872029c6fd1b463b836c68e19c1d0311
msgid "LICENSE.txt"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:124
#: 75ede077bbcb4828bdd9f299ce00c1d2
msgid "Every package should include a license file detailing the terms of distribution. In many jurisdictions, packages without an explicit license can not be legally used or distributed by anyone other than the copyright holder. If you're unsure which license to choose, you can use resources such as `GitHub's Choose a License <https://choosealicense.com/>`_ or consult a lawyer."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:130
#: 336e7cb053744b3082b0e8cbbb532827
msgid "For an example, see the `LICENSE.txt <https://github.com/pypa/sampleproject/blob/master/LICENSE.txt>`_ from the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:135
#: 63e2e31346d149d7ae5206fa54e38dbb
msgid "<your package>"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:137
#: 38df187752a14c9f9c3d1a4b7a0dc393
msgid "Although it's not required, the most common practice is to include your Python modules and packages under a single top-level package that has the same :ref:`name <setup() name>` as your project, or something very close."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:141
#: ae53ffff5a9d4315af98a3c3f65b474b
msgid "For an example, see the `sample <https://github.com/pypa/sampleproject/tree/master/src/sample>`_ package that's included in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:149
#: 0b88a03576554dd8aaf387e29393ca08
msgid "setup() args"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:151
#: ae6accc3ab2a46cc8079efefa2766ea7
msgid "As mentioned above, the primary feature of :file:`setup.py` is that it contains a global ``setup()`` function.  The keyword arguments to this function are how specific details of your project are defined."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:155
#: 7279eb3cc1194da99d8bd18fd78b1d03
msgid "The most relevant arguments are explained below. Most of the snippets given are taken from the `setup.py <https://github.com/pypa/sampleproject/blob/master/setup.py>`_ contained in the `PyPA sample project <https://github.com/pypa/sampleproject>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:164
#: 4c273e6d96364cd0bad41c765b2f0db7
msgid "name"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:170
#: 1b692ee69b4142d08082da22e07b4ad5
msgid "This is the name of your project, determining how your project is listed on :term:`PyPI <Python Package Index (PyPI)>`.  Per :pep:`508`, valid project names must:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:174
#: 2e59707c4a0a4fbba641d881475e176f
msgid "Consist only of ASCII letters, digits, underscores (``_``), hyphens (``-``), and/or periods (``.``), and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:176
#: a6c5e6c239fb44d19cdfe11edd79cc96
msgid "Start & end with an ASCII letter or digit."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:178
#: 3e60b4acd50b4812ab0c6fb57eb1285a
msgid "Comparison of project names is case insensitive and treats arbitrarily-long runs of underscores, hyphens, and/or periods as equal.  For example, if you register a project named ``cool-stuff``, users will be able to download it or declare a dependency on it using any of the following spellings::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:190
#: ../source/specifications/binary-distribution-format.rst:127
#: 41e9aa86a6b5434c99e25de048966b90
#: b2b8ed7ad4aa435e91cf1282589c9ede
msgid "version"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:196
#: 5d525d7f5fb841c583331166455fcde2
msgid "This is the current version of your project, allowing your users to determine whether or not they have the latest version, and to indicate which specific versions they've tested their own software against."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:200
#: 83f2dc478f5b49b2b3373ebfafc4b07f
msgid "Versions are displayed on :term:`PyPI <Python Package Index (PyPI)>` for each release if you publish your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:203
#: 1b1017159d3345e6841294e516c85711
msgid "See :ref:`Choosing a versioning scheme` for more information on ways to use versions to convey compatibility information to your users."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:206
#: b88be345aa074108b923a2dd05220eef
msgid "If the project code itself needs run-time access to the version, the simplest way is to keep the version in both :file:`setup.py` and your code. If you'd rather not duplicate the value, there are a few ways to manage this. See the \":ref:`Single sourcing the version`\" Advanced Topics section."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:214
#: 79f5801d10674abcac8e6ffc56a2a65e
msgid "description"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:222
#: f3419c3c57af4b6d91025f80263ee4d8
msgid "Give a short and long description for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:224
#: b78d5e3107324e7a916bde8c06ce5f5b
msgid "These values will be displayed on :term:`PyPI <Python Package Index (PyPI)>` if you publish your project. On ``pypi.org``, the user interface displays ``description`` in the grey banner and ``long_description`` in the section named \"Project Description\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:229
#: feb421ae75214e47a771fc32888f5fd5
msgid "``description`` is also displayed in lists of projects. For example, it's visible in the search results pages such as https://pypi.org/search/?q=jupyter, the front-page lists of trending projects and new releases, and the list of projects you maintain within your account profile (such as https://pypi.org/user/jaraco/)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:235
#: b366dbfb5fdb4c13a8e623ee7e8e477b
msgid "A `content type <https://packaging.python.org/specifications/core-metadata/#description-content-type-optional>`_ can be specified with the ``long_description_content_type`` argument, which can be one of ``text/plain``, ``text/x-rst``, or ``text/markdown``, corresponding to no formatting, `reStructuredText (reST) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#reference-names>`_, and the Github-flavored Markdown dialect of `Markdown <https://daringfireball.net/projects/markdown/>`_ respectively."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:245
#: 8d1ae6ea55254ffeb58aaf9b97553e08
msgid "url"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:252
#: 19313c6ec1e548e4a8c2d57ddd3cc8f3
msgid "Give a homepage URL for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:256
#: 4c73a18f7b754bcfac8c551f4ae3de59
msgid "author"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:263
#: 22985d37500e4604a397171c05779e73
msgid "Provide details about the author."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:267
#: 1d1dfa586cdd4ccd8d75ab85f1709c84
msgid "license"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:273
#: 9d1a7b65ef334269b2652c8beeb46901
msgid "The ``license`` argument doesn't have to indicate the license under which your package is being released, although you may optionally do so if you want.  If you're using a standard, well-known license, then your main indication can and should be via the ``classifiers`` argument. Classifiers exist for all major open-source licenses."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:279
#: 3b9f235506c440f5a29f1a7a0231d7a8
msgid "The \"license\" argument is more typically used to indicate differences from well-known licenses, or to include your own, unique license. As a general rule, it's a good idea to use a standard, well-known license, both to avoid confusion and because some organizations avoid software whose license is unapproved."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:287
#: bfd5b0658cbb4867a2ead328f778f5a3
msgid "classifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:316
#: 8c81615e1977434f9a4ef544f0b6d5f5
msgid "Provide a list of classifiers that categorize your project. For a full listing, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:319
#: 5eb1406974a04f13b9e10c948b9c9b9e
msgid "Although the list of classifiers is often used to declare what Python versions a project supports, this information is only used for searching & browsing projects on PyPI, not for installing projects.  To actually restrict what Python versions a project can be installed on, use the :ref:`python_requires` argument."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:327
#: 71d932e4812d4f9b8df3766d079a912d
msgid "keywords"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:333
#: 9902e00d1ba44594b0385ad8f678359a
msgid "List keywords that describe your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:337
#: c2d2ea5bc18c4c47acbc6110a363fdd4
msgid "project_urls"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:349
#: b76c972a083e4c9da0f0a0c390372256
msgid "List additional relevant URLs about your project. This is the place to link to bug trackers, source repositories, or where to support package development. The string of the key is the exact text that will be displayed on PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:355
#: ea61cb99bb4541bd89c225a64b2fa23e
msgid "packages"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:361
#: 5bf5de2b77384085a64700cf8500ec71
msgid "Set ``packages`` to a list of all :term:`packages <Import Package>` in your project, including their subpackages, sub-subpackages, etc.  Although the packages can be listed manually, ``setuptools.find_packages()`` finds them automatically.  Use the ``include`` keyword argument to find only the given packages.  Use the ``exclude`` keyword argument to omit packages that are not intended to be released and installed."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:370
#: f423b0d28bc34d988f366b938e13b112
msgid "py_modules"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:376
#: 5c014ab7efeb47a182b09913b896f891
msgid "If your project contains any single-file Python modules that aren't part of a package, set ``py_modules`` to a list of the names of the modules (minus the ``.py`` extension) in order to make :ref:`setuptools` aware of them."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:388
#: cd7f58507f174ab8afe7d5e74a799e12
msgid "\"install_requires\" should be used to specify what dependencies a project minimally needs to run. When the project is installed by :ref:`pip`, this is the specification that is used to install its dependencies."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:392
#: 78cdc5642c144eb2b6d6744257bab725
msgid "For more on using \"install_requires\" see :ref:`install_requires vs Requirements files`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:398
#: 79de7d1f76a6492289fe4c7b3763ca16
msgid "python_requires"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:400
#: 58ed4923a69e4a2e917867a07cd9b9dd
msgid "If your project only runs on certain Python versions, setting the ``python_requires`` argument to the appropriate :pep:`440` version specifier string will prevent :ref:`pip` from installing the project on other Python versions.  For example, if your package is for Python 3+ only, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:407
#: d888c3b417104769a00b7ebf1c14a52f
msgid "If your package is for Python 2.6, 2.7, and all versions of Python 3 starting with 3.3, write::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:412
#: abb1c00f6e29483f88bf01918cdd3aee
msgid "And so on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:416
#: f1edf49618c74aab9a545d04276297ed
msgid "Support for this feature is relatively recent.  Your project's source distributions and wheels (see :ref:`Packaging Your Project`) must be built using at least version 24.2.0 of :ref:`setuptools` in order for the ``python_requires`` argument to be recognized and the appropriate metadata generated."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:422
#: 9b9280a926144433b9e9036bccb23f42
msgid "In addition, only versions 9.0.0 and higher of :ref:`pip` recognize the ``python_requires`` metadata.  Users with earlier versions of pip will be able to download & install projects on any Python version regardless of the projects' ``python_requires`` values."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:431
#: 42d1b8e5bc6a407faa0a2f90df7ca69d
msgid "package_data"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:440
#: a4d7b2825b964240a468d2a3a139616b
msgid "Often, additional files need to be installed into a :term:`package <Import Package>`. These files are often data that’s closely related to the package’s implementation, or text files containing documentation that might be of interest to programmers using the package. These files are called \"package data\"."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:445
#: 094550928b5547318761c869ad56d1c1
msgid "The value must be a mapping from package name to a list of relative path names that should be copied into the package. The paths are interpreted as relative to the directory containing the package."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:449
#: 7fd2bafb12d646898693b233b40b36e2
msgid "For more information, see :std:doc:`Including Data Files <setuptools:userguide/datafiles>` from the :std:doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:457
#: 7acec270d2b4400aa8fc22cce6b6c806
msgid "data_files"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:463
#: 61b3d063eeab448689ac81eb3fb1371b
msgid "Although configuring :ref:`Package Data` is sufficient for most needs, in some cases you may need to place data files *outside* of your :term:`packages <Import Package>`.  The ``data_files`` directive allows you to do that. It is mostly useful if you need to install files which are used by other programs, which may be unaware of Python packages."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:469
#: 9e94acb3572f4ea08bd861b2aaea418a
msgid "Each ``(directory, files)`` pair in the sequence specifies the installation directory and the files to install there. The ``directory`` must be a relative path (although this may change in the future, see `wheel Issue #92 <https://github.com/pypa/wheel/issues/92>`_). and it is interpreted relative to the installation prefix (Python’s ``sys.prefix`` for a default installation; ``site.USER_BASE`` for a user installation). Each file name in ``files`` is interpreted relative to the :file:`setup.py` script at the top of the project source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:479
#: 48e9a62653484dc19635547556b6a36b
msgid "For more information see the distutils section on `Installing Additional Files <http://docs.python.org/3/distutils/setupscript.html#installing-additional-files>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:484
#: 0892a7b26ab0490aa3893be473423cc9
msgid "When installing packages as egg, ``data_files`` is not supported. So, if your project uses :ref:`setuptools`, you must use ``pip`` to install it. Alternatively, if you must use ``python setup.py``, then you need to pass the ``--old-and-unmanageable`` option."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:491
#: e6363e3108ab4f1791af02d6e490e88b
msgid "scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:493
#: 9d33fabf0a1f4c92b7e0ebb215ec47b5
msgid "Although ``setup()`` supports a `scripts <http://docs.python.org/3/distutils/setupscript.html#installing-scripts>`_ keyword for pointing to pre-made scripts to install, the recommended approach to achieve cross-platform compatibility is to use :ref:`console_scripts` entry points (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:500
#: 49f982340e4f4bac90f1fb355fcadce5
msgid "entry_points"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:509
#: 9635f573309d4cab8313a832c7e4801a
msgid "Use this keyword to specify any plugins that your project provides for any named entry points that may be defined by your project or others that you depend on."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:512
#: 2169b026bbea40068c982c9a5a9716c3
msgid "For more information, see the section on `Advertising Behavior <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html#dynamic-discovery-of-services-and-plugins>`_ from the :ref:`setuptools` docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:516
#: 28ada1e46b2449e0a33a42c08e533d11
msgid "The most commonly used entry point is \"console_scripts\" (see below)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:521
#: e09b49d33faf402b965bd35223015a5e
msgid "console_scripts"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:531
#: 606d276bf3ab4ba686d9f050aa53c256
msgid "Use \"console_script\" `entry points <https://setuptools.readthedocs.io/en/latest/setuptools.html#dynamic-discovery-of-services-and-plugins>`_ to register your script interfaces. You can then let the toolchain handle the work of turning these interfaces into actual scripts [2]_.  The scripts will be generated during the install of your :term:`distribution <Distribution Package>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:538
#: ec6d3a8c6567475fb91074d121335f66
msgid "For more information, see `Automatic Script Creation <https://setuptools.readthedocs.io/en/latest/setuptools.html#automatic-script-creation>`_ from the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:545
#: b3befdb8783b47c4a48f85a6457cb0a1
msgid "Choosing a versioning scheme"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:548
#: daa516e5e2054d0a90f65592e6a0af69
msgid "Standards compliance for interoperability"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:550
#: 649f525d8b074cb3b8b5387bcb89a350
msgid "Different Python projects may use different versioning schemes based on the needs of that particular project, but all of them are required to comply with the flexible :pep:`public version scheme <440#public-version-identifiers>` specified in :pep:`440` in order to be supported in tools and libraries like ``pip`` and ``setuptools``."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:556
#: 295c8a548d854ab4b3b398f2edcce02a
msgid "Here are some examples of compliant version numbers::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:567
#: a8ce40b7185c490c8fd9af9a6022553e
msgid "To further accommodate historical variations in approaches to version numbering, :pep:`440` also defines a comprehensive technique for :pep:`version normalisation <440#normalization>` that maps variant spellings of different version numbers to a standardised canonical form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:573
#: 5b1ae40433084254a67ae87100c7ce63
msgid "Scheme choices"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:576
#: 978dadfc514747c38efcc453200b563e
msgid "Semantic versioning (preferred)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:578
#: 23c0b3abbdf34eaf9f6a5dd6eb13c324
msgid "For new projects, the recommended versioning scheme is based on `Semantic Versioning <http://semver.org>`_, but adopts a different approach to handling pre-releases and build metadata."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:582
#: 73b58e16d27244f3ba16b90f380ecf00
msgid "The essence of semantic versioning is a 3-part MAJOR.MINOR.MAINTENANCE numbering scheme, where the project author increments:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:585
#: 80067f291d0a4508a13069d35772bc38
msgid "MAJOR version when they make incompatible API changes,"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:586
#: dc6ccdcddbf6463b876fb9a1b01403a6
msgid "MINOR version when they add functionality in a backwards-compatible manner, and"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:587
#: 94278263d4834fb08d35ef02d117104b
msgid "MAINTENANCE version when they make backwards-compatible bug fixes."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:589
#: bc574ddc7734420ba09f67c7e984da5e
msgid "Adopting this approach as a project author allows users to make use of :pep:`\"compatible release\" <440#compatible-release>` specifiers, where ``name ~= X.Y`` requires at least release X.Y, but also allows any later release with a matching MAJOR version."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:594
#: e71dd9f512bd46f6a6f8e1c7e5b26f0e
msgid "Python projects adopting semantic versioning should abide by clauses 1-8 of the `Semantic Versioning 2.0.0 specification <http://semver.org>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:598
#: 1e6db7c6d88842deadec9d8538367268
msgid "Date based versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:600
#: 91643b8006a44a91b1cf96fbf07f9ba1
msgid "Semantic versioning is not a suitable choice for all projects, such as those with a regular time based release cadence and a deprecation process that provides warnings for a number of releases prior to removal of a feature."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:604
#: 595770349da34553a4cae4c7bf49a5ea
msgid "A key advantage of date based versioning is that it is straightforward to tell how old the base feature set of a particular release is given just the version number."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:607
#: 30b6bf099f9e4664b52580925d8882eb
msgid "Version numbers for date based projects typically take the form of YEAR.MONTH (for example, ``12.04``, ``15.10``)."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:611
#: 3263e863052641c7816c161f234d252c
msgid "Serial versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:613
#: ee09e3dcc8bc45e386a988356337a391
msgid "This is the simplest possible versioning scheme, and consists of a single number which is incremented every release."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:616
#: 45a41c70e3464c8b89ae0e9672a0f7f5
msgid "While serial versioning is very easy to manage as a developer, it is the hardest to track as an end user, as serial version numbers convey little or no information regarding API backwards compatibility."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:621
#: 20c3d70a705c4c53a97f593328730dfd
msgid "Hybrid schemes"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:623
#: 08485cf0281f477183f556201d7ca77b
msgid "Combinations of the above schemes are possible. For example, a project may combine date based versioning with serial versioning to create a YEAR.SERIAL numbering scheme that readily conveys the approximate age of a release, but doesn't otherwise commit to a particular release cadence within the year."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:629
#: 9a2d3eca1aae4e5e9da011c5ad4dc972
msgid "Pre-release versioning"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:631
#: dcf91db7ffcc4cff8251c7d073addf86
msgid "Regardless of the base versioning scheme, pre-releases for a given final release may be published as:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:634
#: 92c67a73585c4299a2a5be65b3ca49d2
msgid "zero or more dev releases (denoted with a \".devN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:635
#: 55e702b4b73244fbaae5ba2f0cfc2aae
msgid "zero or more alpha releases (denoted with a \".aN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:636
#: 2dbdda23bde445df8e66d7c36064329c
msgid "zero or more beta releases (denoted with a \".bN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:637
#: 16c184fb6ff44143be54a61ddf76b7af
msgid "zero or more release candidates (denoted with a \".rcN\" suffix)"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:639
#: 38e5e6f380c741388e6876fe1549042c
msgid "``pip`` and other modern Python package installers ignore pre-releases by default when deciding which versions of dependencies to install."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:644
#: f7ee2dbce5d3425abd3404e0bbb9a2e1
msgid "Local version identifiers"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:646
#: f8c966da3bdc478aa453bb39a618071a
msgid "Public version identifiers are designed to support distribution via :term:`PyPI <Python Package Index (PyPI)>`. Python's software distribution tools also support the notion of a :pep:`local version identifier <440#local-version-identifiers>`, which can be used to identify local development builds not intended for publication, or modified variants of a release maintained by a redistributor."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:653
#: 9f3c8a007ea44684abc386c3c421709b
msgid "A local version identifier takes the form ``<public version identifier>+<local version label>``. For example::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:661
#: 9430ad3226554349ab61d07bb99b00c2
msgid "Working in \"development mode\""
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:663
#: d3863a3b30704ddf986fb58dbee450ac
msgid "Although not required, it's common to locally install your project in \"editable\" or \"develop\" mode while you're working on it.  This allows your project to be both installed and editable in project form."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:667
#: 7a396799f689494eab963b03b6394010
msgid "Assuming you're in the root of your project directory, then run:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:674
#: cca49fbb774b44f0aac121a1aab173a6
msgid "Although somewhat cryptic, ``-e`` is short for ``--editable``, and ``.`` refers to the current working directory, so together, it means to install the current directory (i.e. your project) in editable mode.  This will also install any dependencies declared with \"install_requires\" and any scripts declared with \"console_scripts\".  Dependencies will be installed in the usual, non-editable mode."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:680
#: af9405491d8d4917b3681f55610d4ba7
msgid "It's fairly common to also want to install some of your dependencies in editable mode as well. For example, supposing your project requires \"foo\" and \"bar\", but you want \"bar\" installed from VCS in editable mode, then you could construct a requirements file like so::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:688
#: 118332ae897b4dd2ae27b3f9584b4793
msgid "The first line says to install your project and any dependencies. The second line overrides the \"bar\" dependency, such that it's fulfilled from VCS, not PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:692
#: 728a93b68f644834bca53c6bec7aa3af
msgid "If, however, you want \"bar\" installed from a local directory in editable mode, the requirements file should look like this, with the local paths at the top of the file::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:697
#: 7648cfba150841328de64e931b324f70
msgid "Otherwise, the dependency will be fulfilled from PyPI, due to the installation order of the requirements file.  For more on requirements files, see the :ref:`Requirements File <pip:Requirements Files>` section in the pip docs.  For more on VCS installs, see the :ref:`VCS Support <pip:VCS Support>` section of the pip docs."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:701
#: d3244e2ec2894a528205db3d81fd2e38
msgid "Lastly, if you don't want to install any dependencies at all, you can run::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:706
#: 6f7f600299804d09bab5d0e0d6844f61
msgid "For more information, see the `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_ section of the `setuptools docs <https://setuptools.readthedocs.io>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:713
#: 1b3a329188fb4a8bb22db3efad145284
msgid "Packaging your project"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:715
#: 017bb0c8b5df46e1a43e50c69a412771
msgid "To have your project installable from a :term:`Package Index` like :term:`PyPI <Python Package Index (PyPI)>`, you'll need to create a :term:`Distribution <Distribution Package>` (aka \":term:`Package <Distribution Package>`\") for your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:720
#: e79e2a91790c44778464fc75c15900e4
msgid "Before you can build wheels and sdists for your project, you'll need to install the ``build`` package:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:737
#: 2437d9af62784de584748bc6eec5aa9b
msgid "Source distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:739
#: 4045ba299a824856abe1484eb8d80205
msgid "Minimally, you should create a :term:`Source Distribution <Source Distribution (or \"sdist\")>`:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:755
#: 0f8c1fca70c240439bc019b18d60e4d3
msgid "A \"source distribution\" is unbuilt (i.e. it's not a :term:`Built Distribution`), and requires a build step when installed by pip.  Even if the distribution is pure Python (i.e. contains no extensions), it still involves a build step to build out the installation metadata from :file:`setup.py` and/or :file:`setup.cfg`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:763
#: 1617729b5a184ec1871162c8d40fb2b4
msgid "Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:765
#: 971a8a326502492280f695c2fc274616
msgid "You should also create a wheel for your project. A wheel is a :term:`built package <Built Distribution>` that can be installed without needing to go through the \"build\" process. Installing wheels is substantially faster for the end user than installing from a source distribution."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:770
#: 342b802674564e0b90361b5ebf5ac3de
msgid "If your project is pure Python then you'll be creating a :ref:`\"Pure Python Wheel\" (see section below) <Pure Python Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:773
#: 4213396ed29b461187420f4b06112f91
msgid "If your project contains compiled extensions, then you'll be creating what's called a :ref:`*Platform Wheel* (see section below) <Platform Wheels>`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:776
#: a50d0513d67245408ee5e596a67fd04e
msgid "If your project also supports Python 2 *and* contains no C extensions, then you should create what's called a *Universal Wheel* by adding the following to your :file:`setup.cfg` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:785
#: a04471d3046947b5ba44e7ee24a099fd
msgid "Only use this setting if your project does not have any C extensions *and* supports Python 2 and 3."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:792
#: 024464b46e9746039e223a89b49c80ac
msgid "Pure Python Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:794
#: 6851107df7de4382a3e1cc73786e034e
msgid "*Pure Python Wheels* contain no compiled extensions, and therefore only require a single Python wheel."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:797
#: ../source/guides/distributing-packages-using-setuptools.rst:826
#: 496451d49b944f34bdf97ff1446d00a7
#: 07d0695b395149afa882871de347aa84
msgid "To build the wheel:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:811
#: dc3ff6a2144f435eab01d7b01f0beaa9
msgid "The ``wheel`` package will detect that the code is pure Python, and build a wheel that's named such that it's usable on any Python 3 installation.  For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:815
#: 6d4f8c07a4f1451e919d1ee4e0c94856
msgid "If you run ``build`` without ``--wheel`` or ``--sdist``, it will build both files for you; this is useful when you don't need multiple wheels."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:821
#: 89c9c97b42d74c1ba774ae48dd910363
msgid "Platform Wheels"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:823
#: 5cb280ca6fe1410aa6e4a990d6037259
msgid "*Platform Wheels* are wheels that are specific to a certain platform like Linux, macOS, or Windows, usually due to containing compiled extensions."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:841
#: c7c3ea2f10a6490f9fdcbe656f171878
msgid "The ``wheel`` package will detect that the code is not pure Python, and build a wheel that's named such that it's only usable on the platform that it was built on. For details on the naming of wheel files, see :pep:`425`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:847
#: 66ea4cea01324c21b0da0dd6d38627f2
msgid ":term:`PyPI <Python Package Index (PyPI)>` currently supports uploads of platform wheels for Windows, macOS, and the multi-distro ``manylinux*`` ABI. Details of the latter are defined in :pep:`513`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:855
#: c633ca310c354efdac0ebc874fa4b2bf
msgid "Uploading your Project to PyPI"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:857
#: 250ccf90e95a41e4955020f5d9f8bf5c
msgid "When you ran the command to create your distribution, a new directory ``dist/`` was created under your project's root directory. That's where you'll find your distribution file(s) to upload."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:861
#: f1611d1ec5dc4e60829e2f99418bbe21
msgid "These files are only created when you run the command to create your distribution. This means that any time you change the source of your project or the configuration in your :file:`setup.py` file, you will need to rebuild these files again before you can distribute the changes to PyPI."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:866
#: c6936d26f0b3431f9557cd717fea3a30
msgid "Before releasing on main PyPI repo, you might prefer training with the `PyPI test site <https://test.pypi.org/>`_ which is cleaned on a semi regular basis. See :ref:`using-test-pypi` on how to setup your configuration in order to use it."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:871
#: 5d5988812f864b899e706274e0fa72bc
msgid "In other resources you may encounter references to using ``python setup.py register`` and ``python setup.py upload``. These methods of registering and uploading a package are **strongly discouraged** as it may use a plaintext HTTP or unverified HTTPS connection on some Python versions, allowing your username and password to be intercepted during transmission."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:877
#: 968c5d13f2824f9db9ad8ea82a1ce51e
msgid "The reStructuredText parser used on PyPI is **not** Sphinx! Furthermore, to ensure safety of all users, certain kinds of URLs and directives are forbidden or stripped out (e.g., the ``.. raw::`` directive). **Before** trying to upload your distribution, you should check to see if your brief / long descriptions provided in :file:`setup.py` are valid.  You can do this by running :std:doc:`twine check <index>` on your package files::"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:888
#: 2bb47df377bd405da07999192a970520
msgid "Create an account"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:890
#: bb7de465c6e840b5927a9f58f75163f5
msgid "First, you need a :term:`PyPI <Python Package Index (PyPI)>` user account. You can create an account `using the form on the PyPI website <https://pypi.org/account/register/>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:894
#: 303e2e15373442beaa5c34291c991934
msgid "Now you'll create a PyPI `API token`_ so you will be able to securely upload your project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:897
#: 3021cfb113124b9a926187a1787f1732
msgid "Go to https://pypi.org/manage/account/#api-tokens and create a new `API token`_; don't limit its scope to a particular project, since you are creating a new project."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:901
#: aae5ba7c00ee43b687a5558d1f0eaa30
msgid "**Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:904
#: 7f15df5cb9d44a079479bd2a3a5e7174
msgid "To avoid having to copy and paste the token every time you upload, you can create a :file:`$HOME/.pypirc` file:"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:913
#: 2912fb00f058499986995ae5fc3d5f5f
msgid "**Be aware that this stores your token in plaintext.**"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:915
#: ../source/guides/migrating-to-pypi-org.rst:70
#: ../source/guides/migrating-to-pypi-org.rst:109
#: ../source/guides/using-testpypi.rst:83
#: 71d6d387e73241e3a8ae2040d059e3c8
#: d35bd07a38034780b91c69f3d531cb71
#: bd68791fcead46039f9aeb158d33f4bc
#: 66514f30c1cb43ff9a3756de5b36e047
msgid "For more details, see the :ref:`specification <pypirc>` for :file:`.pypirc`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:921
#: 11a4ac992afe4e5ea4d88f4a465d45fc
msgid "Upload your distributions"
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:923
#: aebe65ad51d044988e5f36d7871151a0
msgid "Once you have an account you can upload your distributions to :term:`PyPI <Python Package Index (PyPI)>` using :ref:`twine`."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:926
#: a966b0ef9df04d1185a63210ce33be65
msgid "The process for uploading a release is the same regardless of whether or not the project already exists on PyPI - if it doesn't exist yet, it will be automatically created when the first release is uploaded."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:930
#: 231dbba6b0934d529fd6b20373759b81
msgid "For the second and subsequent releases, PyPI only requires that the version number of the new release differ from any previous releases."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:937
#: b5876f5c2ae241f3826099f4e8b0d10f
msgid "You can see if your package has successfully uploaded by navigating to the URL ``https://pypi.org/project/<sampleproject>`` where ``sampleproject`` is the name of your project that you uploaded. It may take a minute or two for your project to appear on the site."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:944
#: ../source/tutorials/installing-packages.rst:663
#: 912bbc02f4794804a172d7a51b7d3a9c
#: a0acc0f5e96248c897c13b3342108e36
msgid "Depending on your platform, this may require root or Administrator access. :ref:`pip` is currently considering changing this by `making user installs the default behavior <https://github.com/pypa/pip/issues/1668>`_."
msgstr ""

#: ../source/guides/distributing-packages-using-setuptools.rst:950
#: f993df658a3147959bb540d5b8f9b84e
msgid "Specifically, the \"console_script\" approach generates ``.exe`` files on Windows, which are necessary because the OS special-cases ``.exe`` files. Script-execution features like ``PATHEXT`` and the :pep:`Python Launcher for Windows <397>` allow scripts to be used in many cases, but not all."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:5
#: f84248accbfb466398e12a4af18e23a9
msgid "Dropping support for older Python versions"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:7
#: bd1eb0d876804053b3e0b701c89ac21c
msgid "Dropping support for older Python versions is supported by the standard :ref:`core-metadata` 1.2 specification via a \"Requires-Python\" attribute."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:9
#: 7dd76e93de894c0893a6e8a6e25b7910
msgid "Metadata 1.2+ clients, such as Pip 9.0+, will adhere to this specification by matching the current Python runtime and comparing it with the required version in the package metadata. If they do not match, it will attempt to install the last package distribution that supported that Python runtime."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:12
#: a72140f7bf87420bbeed16a3ecb72ddc
msgid "This mechanism can be used to drop support for older Python versions, by amending the \"Requires-Python\" attribute in the package metadata."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:14
#: 72f1cc68ba5b47d1a74e0da2d19d892e
msgid "This guide is specifically for users of :ref:`setuptools`, other packaging tools such as ``flit`` may offer similar functionality but users will need to consult relevant documentation."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:17
#: a97a62d931364c0198c3d6e61870f798
msgid "Requirements"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:19
#: 20eb36747a214cf3b369bf6465d668d8
msgid "This workflow requires that:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:21
#: 69ebe4a159c045dab5abb93e8bb8014a
msgid "The publisher is using the latest version of :ref:`setuptools`,"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:22
#: cd8e29907ca34397b4daceeb2c188c55
msgid "The latest version of :ref:`twine` is used to upload the package,"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:23
#: b0282522223942c89ea7937df99a0a03
msgid "The user installing the package has at least Pip 9.0, or a client that supports the Metadata 1.2 specification."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:26
#: 4fd7432d616f4c4ba17585ee5ca4b7c2
msgid "Dealing with the universal wheels"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:28
#: 061cbab0fc7c4746b950181d14e71b3c
msgid "Traditionally, projects providing Python code that is semantically compatible with both Python 2 and Python 3, produce :term:`wheels <Wheel>` that have a ``py2.py3`` tag in their names. When dropping support for Python 2, it is important not to forget to change this tag to just ``py3``. It is often configured within :file:`setup.cfg` under the ``[bdist_wheel]`` section by setting ``universal = 1`` if they use setuptools."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:36
#: ecc83ad8ac3740288cd896f299d352ec
msgid "If you use this method, either remove this option or section, or explicitly set ``universal`` to ``0``:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:48
#: a2e70ed305324e8f8d1ac80cf15e2dc7
msgid "Since it is possible to override the :file:`setup.cfg` settings via CLI flags, make sure that your scripts don't have ``--universal`` in your package creation scripts."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:53
#: bbebb43c42c24b839db2ea49771e4695
msgid "Defining the Python version required"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:56
#: c0c67f9281db4e8f941df359ee8d37f8
msgid "1. Download the newest version of Setuptools"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:58
#: 6a6f83ef764644b8824e8dc78ba02af1
msgid "Ensure that before you generate source distributions or binary distributions, you update Setuptools and install twine."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:60
#: 7712612ce4cc46228c2779dd4526a79c
msgid "Steps:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:74
#: e0a40fc0731a4ab0a25e9504b8d54825
msgid "`setuptools` version should be above 24.0.0."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:77
#: 18ff9fb2a0374ccb8989adab3dc67a6d
msgid "2. Specify the version ranges for supported Python distributions"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:79
#: cdd1dfb52119434da42e5f64020fd320
msgid "You can specify version ranges and exclusion rules, such as at least Python 3. Or, Python 2.7, 3.4 and beyond."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:81
#: ../source/specifications/core-metadata.rst:139
#: ../source/specifications/core-metadata.rst:463
#: ../source/specifications/core-metadata.rst:487
#: ../source/specifications/core-metadata.rst:527
#: ../source/specifications/core-metadata.rst:550
#: ../source/specifications/core-metadata.rst:583
#: ../source/specifications/core-metadata.rst:693
#: ../source/specifications/core-metadata.rst:722
#: 5ac070012eaa476f915ec939f069ef98
#: 4e06f685acbf4915b7e7447f8568c861
#: 0f2c784deebb4b29943e16b6bb04a326
#: 2ece31d7657247708540a1c390989c7b
#: 255e7ff13e1548968631fd144ca8dae6
#: 7cac7c0d100441ae8f61f7c9caf4633d
#: a33404a4e1794dd7960c55ff8b012944
#: 2a70adc6b2394c8d8652e3f4e5378325
#: d5250f6e2e974e2ea700ecbdf0d39b44
msgid "Examples::"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:86
#: f08228f0e06c46e7a2a6be63904cbbe7
msgid "The way to set those values is within the call to ``setup`` within your :file:`setup.py` script. This will insert the ``Requires-Python`` metadata values based on the argument you provide in ``python_requires``."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:101
#: 43e3cb08e01c42e4917b5439e1966234
msgid "3. Validating the Metadata before publishing"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:103
#: 859c2b60db1e4aedaa3042896d74cd81
msgid "Within a Python source package (the zip or the tar-gz file you download) is a text file called PKG-INFO."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:105
#: 0d8f71e60d2c4bf3997630d4c0c493f0
msgid "This file is generated by Distutils or :ref:`setuptools` when it generates the source package. The file contains a set of keys and values, the list of keys is part of the PyPa standard metadata format."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:108
#: 1ca4491e403a48cca81684d224ed4ff1
msgid "You can see the contents of the generated file like this::"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:112
#: b8795e7fce5d48359cdd9c5ac76c7c42
msgid "Validate that the following is in place, before publishing the package:"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:114
#: 1e5e6cadec694db888bfbb1c9ed8ae46
msgid "If you have upgraded correctly, the Metadata-Version value should be 1.2 or higher."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:115
#: cdecbef8c72c4f12aed71c2a450e1257
msgid "The Requires-Python field is set and matches your specification in setup.py."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:118
#: feb91a5ea9dd4da7847f8d301f9cb545
msgid "4. Using Twine to publish"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:120
#: ee3dca5e4f1545efacf00021c204f5a4
msgid "Twine has a number of advantages, apart from being faster it is now the supported method for publishing packages."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:122
#: 85be3b9178e64495afd64572abbe10a5
msgid "Make sure you are using the newest version of Twine, at least 1.9."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:125
#: 401b1f41afcd4129a72682230b7cf335
msgid "Dropping a Python release"
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:127
#: 4d09887d9c9c4a5f98fe083890957381
msgid "Once you have published a package with the Requires-Python metadata, you can then make a further update removing that Python runtime from support."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:129
#: 901f5332616e49059cc2039c0467a333
msgid "It must be done in this order for the automated fallback to work."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:131
#: dab3359cb23c4cacabae1f49a15ce866
msgid "For example, you published the Requires-Python: \">=2.7\" as version 1.0.0 of your package."
msgstr ""

#: ../source/guides/dropping-older-python-versions.rst:133
#: 2f2d04b4ee304a7489561e1cfdb7e1e2
msgid "If you were then to update the version string to \">=3.5\", and publish a new version 2.0.0 of your package, any users running Pip 9.0+ from version 2.7 will have version 1.0.0 of the package installed, and any >=3.5 users will receive version 2.0.0."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:5
#: 8c1483d569de448788a3e3d86c994000
msgid "Hosting your own simple repository"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:8
#: 58544968c4704bd1a9c3cc63952f1e3a
msgid "If you wish to host your own simple repository [1]_, you can either use a software package like `devpi`_ or you can use simply create the proper directory structure and use any web server that can serve static files and generate an autoindex."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:13
#: 6291fc0d5ac84dcd86b29755cdffca7e
msgid "In either case, since you'll be hosting a repository that is likely not in your user's default repositories, you should instruct them in your project's description to configure their installer appropriately. For example with pip:"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:29
#: 51e19c1b695e4f18ac615af3a9ffbdad
msgid "In addition, it is **highly** recommended that you serve your repository with valid HTTPS. At this time, the security of your user's installations depends on all repositories using a valid HTTPS setup."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:35
#: 2c04430c2cfb41cfa6f4b46ed08f5898
msgid "\"Manual\" repository"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:37
#: 13184941413d40449d34e40670111642
msgid "The directory layout is fairly simple, within a root directory you need to create a directory for each project. This directory should be the normalized name (as defined by :pep:`503`) of the project. Within each of these directories simply place each of the downloadable files. If you have the projects \"Foo\" (with the versions 1.0 and 2.0) and \"bar\" (with the version 0.1) You should end up with a structure that looks like::"
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:51
#: 6bf07b9a6dec4209800f871119f28689
msgid "Once you have this layout, simply configure your webserver to serve the root directory with autoindex enabled. For an example using the built in Web server in `Twisted`_, you would simply run ``twistd -n web --path .`` and then instruct users to add the URL to their installer's configuration."
msgstr ""

#: ../source/guides/hosting-your-own-index.rst:58
#: bfe3864825d740aea57d84376c3980a1
msgid "For complete documentation of the simple repository protocol, see :pep:`503`."
msgstr ""

#: ../source/guides/index.rst:8
#: ../source/guides/index.rst:8
#: 
#: 0ddcc03a185f441cb88ccfed571824f4
msgid "Installing Packages:"
msgstr ""

#: ../source/guides/index.rst:20
#: ../source/guides/index.rst:20
#: 
#: b7661fe54b814dc5bba4a5dadcc8c17a
msgid "Building and Publishing Projects:"
msgstr ""

#: ../source/guides/index.rst:38
#: ../source/guides/index.rst:38
#: 
#: 05b6906caf864acd98ee856e5d8f4018
msgid "Miscellaneous:"
msgstr ""

#: ../source/guides/index.rst:4
#: 75571fc20a3d4b489ada11fca314e22b
msgid "**Guides** are focused on accomplishing a specific task and assume that you are already familiar with the basics of Python packaging. If you're looking for an introduction to packaging, see :doc:`/tutorials/index`."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:5
#: 02ee0147d3d54d03888c78c081753be3
msgid "Package index mirrors and caches"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:8
#: ../source/guides/supporting-multiple-python-versions.rst:8
#: 83aa9f0916f74d4bb8f6a848f17f4caa
#: b7d57e4b85f24973a1b1c52e1185514e
msgid "2014-12-24"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:14
#: 3d715af53c864293860965ccab76ae73
msgid "Mirroring or caching of PyPI can be used to speed up local package installation, allow offline work, handle corporate firewalls or just plain Internet flakiness."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:17
#: be8001a185ef4c11b5fb1a463865c8ac
msgid "Three options are available in this area:"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:19
#: 7246c25fadd643959aad1be0ed42737e
msgid "pip provides local caching options,"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:20
#: de7246cb293c4cd89d6ae6cd143a8a74
msgid "devpi provides higher-level caching option, potentially shared amongst many users or machines, and"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:22
#: d23afb3f98ba4cc1b4bb32ff58944fe8
msgid "bandersnatch provides a local complete mirror of all PyPI :term:`packages <Distribution Package>`."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:27
#: b573e9aa4e8b4a50a5d246b6ae56ea4d
msgid "Caching with pip"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:29
#: 7136392ab86441369d81b1e831c60155
msgid "pip provides a number of facilities for speeding up installation by using local cached copies of :term:`packages <Distribution Package>`:"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:32
#: 6c9bb890ded649108473478daee0b028
msgid "`Fast & local installs <https://pip.pypa.io/en/latest/user_guide/#installing-from-local-packages>`_ by downloading all the requirements for a project and then pointing pip at those downloaded files instead of going to PyPI."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:36
#: 8ea18b4c6e9344bc8b98b4907f29025e
msgid "A variation on the above which pre-builds the installation files for the requirements using `python -m pip wheel <https://pip.readthedocs.io/en/latest/reference/pip_wheel.html>`_::"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:45
#: 5acdba009352480ca100d2042e1b1629
msgid "Caching with devpi"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:47
#: 13293c70c3a246f7959f1b1d5ad5a87a
msgid "devpi is a caching proxy server which you run on your laptop, or some other machine you know will always be available to you. See the `devpi documentation for getting started`__."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:55
#: 38f560d81854443397f80cf56ddd3957
msgid "Complete mirror with bandersnatch"
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:57
#: c8c5ccd8d02d4192bd26204e0387884a
msgid "bandersnatch will set up a complete local mirror of all PyPI :term:`packages <Distribution Package>` (externally-hosted packages are not mirrored). See the `bandersnatch documentation for getting that going`__."
msgstr ""

#: ../source/guides/index-mirrors-and-caches.rst:63
#: 67e77cdd9b39432ca2c8e99b74ce01ab
msgid "A benefit of devpi is that it will create a mirror which includes :term:`packages <Distribution Package>` that are external to PyPI, unlike bandersnatch which will only cache :term:`packages <Distribution Package>` hosted on PyPI."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:5
#: b41d7b3fb3f54a04904972c6b427e578
msgid "Installing scientific packages"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:11
#: 7802e1add4bf492da5fe0c288720575d
msgid "Scientific software tends to have more complex dependencies than most, and it will often have multiple build options to take advantage of different kinds of hardware, or to interoperate with different pieces of external software."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:16
#: d2f4eb3fc6b74ecfa4e577f35abc77f1
msgid "In particular, `NumPy <http://www.numpy.org/>`__, which provides the basis for most of the software in the `scientific Python stack <http://www.scipy.org/stackspec.html#stackspec>`__ can be configured to interoperate with different FORTRAN libraries, and can take advantage of different levels of vectorised instructions available in modern CPUs."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:22
#: 33664e68b6eb4151bed04f8e348ccf68
msgid "Starting with version 1.10.4 of NumPy and version 1.0.0 of SciPy, pre-built 32-bit and 64-bit binaries in the ``wheel`` format are available for all major operating systems (Windows, macOS, and Linux) on PyPI. Note, however, that on Windows, NumPy binaries are linked against the `ATLAS <http://www.netlib.org/atlas/>`__ BLAS/LAPACK library, restricted to SSE2 instructions, so they may not provide optimal linear algebra performance."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:29
#: bcc977d11b4f401db3b6922864b9cdf1
msgid "There are a number of alternative options for obtaining scientific Python libraries (or any other Python libraries that require a compilation environment to install from source and don't provide pre-built wheel files on PyPI)."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:35
#: ad900c3d3cb6472684fa4ffc39ee1765
msgid "Building from source"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:37
#: 086b4defb4a54a1d8ab5609fa7c77e1d
msgid "The same complexity which makes it difficult to distribute NumPy (and many of the projects that depend on it) as wheel files also make them difficult to build from source yourself. However, for intrepid folks that are willing to spend the time wrangling compilers and linkers for both C and FORTRAN, building from source is always an option."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:45
#: 8d6ad82b3f0c498798b8269efe9ac011
msgid "Linux distribution packages"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:47
#: a2b1d68c3ff14dda816cfb048ba0fc4f
msgid "For Linux users, the system package manager will often have pre-compiled versions of various pieces of scientific software, including NumPy and other parts of the scientific Python stack."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:51
#: 48fdf409913a40f4b2dc3828fa0e2ded
msgid "If using versions which may be several months old is acceptable, then this is likely to be a good option (just make sure to allow access to distributions installed into the system Python when using virtual environments)."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:57
#: 5aadddfe6caf431ca354a9d659f3c247
msgid "Windows installers"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:59
#: d6fcfd70b9184307bbb6eee130b39024
msgid "Many Python projects that don't (or can't) currently publish wheel files at least publish Windows installers, either on PyPI or on their project download page. Using these installers allows users to avoid the need to set up a suitable environment to build extensions locally."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:64
#: ed96fe0e2ef644439e136487951ba7fc
msgid "The extensions provided in these installers are typically compatible with the CPython Windows installers published on python.org."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:67
#: 49ab2082da5546daa4eb2a5214f6c4a2
msgid "For projects which don't provide their own Windows installers (and even some which do), Christoph Gohlke at the University of California provides a `collection of Windows installers <http://www.lfd.uci.edu/~gohlke/pythonlibs/>`__. Many Python users on Windows have reported a positive experience with these prebuilt versions."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:73
#: d96d5b0b9c24464cab05bbeeca32e5a7
msgid "As with Linux system packages, the Windows installers will only install into a system Python installation - they do not support installation in virtual environments. Allowing access to distributions installed into the system Python when using virtual environments is a common approach to working around this limitation."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:79
#: aafbe874a1cf41df88ce68061cbec784
msgid "The :term:`Wheel` project also provides a :command:`wheel convert` subcommand that can convert a Windows :command:`bdist_wininst` installer to a wheel."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:86
#: 8ce8aa79c3e44cf78ffe902cc5ac3266
msgid "macOS installers and package managers"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:88
#: 818cd87a31044f0493032717df25d2c4
msgid "Similar to the situation on Windows, many projects (including NumPy) publish macOS installers that are compatible with the macOS CPython binaries published on python.org."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:92
#: 7fe99a64ebcc4780a1c34030acf9662e
msgid "macOS users also have access to Linux distribution style package managers such as ``MacPorts``. The SciPy site has more details on using MacPorts to install the `scientific Python stack <http://www.scipy.org/install.html#mac-packages>`__"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:99
#: 7a5502a5bab342b4ae92b83120ba7b96
msgid "SciPy distributions"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:101
#: 12c1c90e79b6458aa6e0673408c1d9c6
msgid "The SciPy site lists `several distributions <http://www.scipy.org/install.html>`__ that provide the full SciPy stack to end users in an easy to use and update format."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:105
#: fbf55e41c60f4f73a77b8a2fdfad09c3
msgid "Some of these distributions may not be compatible with the standard ``pip`` and ``virtualenv`` based toolchain."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:109
#: ../source/key_projects.rst:586
#: b7c7d1f003274dbaa756c7caf6396632
#: 135d92ea7e784b0a9256db981273f2bb
msgid "Spack"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:110
#: 05c475d7a685414a8aeeccb7394587dd
msgid "`Spack <https://github.com/LLNL/spack/>`_ is a flexible package manager designed to support multiple versions, configurations, platforms, and compilers. It was built to support the needs of large supercomputing centers and scientific application teams, who must often build software many different ways. Spack is not limited to Python; it can install packages for ``C``, ``C++``, ``Fortran``, ``R``, and other languages.  It is non-destructive; installing a new version of one package does not break existing installations, so many configurations can coexist on the same system."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:119
#: bca3ec5014374b519473b3e53e858152
msgid "Spack offers a simple but powerful syntax that allows users to specify versions and configuration options concisely. Package files are written in pure Python, and they are templated so that it is easy to swap compilers, dependency implementations (like MPI), versions, and build options with a single package file.  Spack also generates *module* files so that packages can be loaded and unloaded from the user's environment."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:128
#: d5357a126f0e4cdfb10286f22d616121
msgid "The conda cross-platform package manager"
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:130
#: 225863eebac0492eab0c888154cd4d06
msgid "`Anaconda <https://www.anaconda.com/download/>`_ is a Python distribution published by Anaconda, Inc. It is a stable collection of Open Source packages for big data and scientific use.  As of the 5.0 release of Anaconda, about 200 packages are installed by default, and a total of 400-500 can be installed and updated from the Anaconda repository."
msgstr ""

#: ../source/guides/installing-scientific-packages.rst:136
#: da37dc21b2b54599ad023a3fe90ea240
msgid "``conda`` is an open source (BSD licensed) package management system and environment management system included in Anaconda that allows users to install multiple versions of binary software packages and their dependencies, and easily switch between them. It is a cross-platform tool working on Windows, macOS, and Linux. Conda can be used to package up and distribute all kinds of packages, it is not limited to just Python packages. It has full support for native virtual environments. Conda makes environments first-class citizens, making it easy to create independent environments even for C libraries. It is written in Python, but is Python-agnostic. Conda manages Python itself as a package, so that :command:`conda update python` is possible, in contrast to pip, which only manages Python packages. Conda is available in Anaconda and Miniconda (an easy-to-install download with just Python and conda)."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:2
#: 92bcc8b771aa404ebf490b3526775fa4
msgid "Installing stand alone command line tools"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:4
#: 8ce40e08574d49ad9381a225b0bcbedc
msgid "Many packages have command line entry points. Examples of this type of application are `mypy <https://github.com/python/mypy>`_, `flake8 <https://github.com/PyCQA/flake8>`_, `pipenv <https://github.com/pypa/pipenv>`_,and `black <https://github.com/ambv/black>`_."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:10
#: 260534d3185e4941b0d9450433109ebd
msgid "Usually you want to be able to access these from anywhere, but installing packages and their dependencies to the same global environment can cause version conflicts and break dependencies the operating system has on Python packages."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:15
#: 19961c28c92b4adc924a41750d5d0a41
msgid "`pipx <https://github.com/pipxproject/pipx>`_ solves this by creating a virtual environment for each package, while also ensuring that package's applications are accessible through a directory that is on your ``$PATH``. This allows each package to be upgraded or uninstalled without causing conflicts with other packages, and allows you to safely run the program from anywhere."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:21
#: 8f0c5d8494df456eb99b5bbb14ae325f
msgid "pipx only works with Python 3.6+."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:23
#: 83e88c6ec51048b190eeecd862be40e1
msgid "``pipx`` is installed with ``pip``:"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:30
#: 61bf51a5a8924fecbfd0123627166bc3
msgid "You may need to restart your terminal for the path updates to take effect."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:32
#: 3fcdbb5cb3924b87a73f7fe4bbefa524
msgid "Now you can install packages with ``pipx install`` and access the package's entry point(s) from anywhere."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:39
#: ../source/guides/installing-stand-alone-command-line-tools.rst:100
#: 03531788247c4c27aca04062eca209af
#: 93717faa87a1438a9996bb5714c69255
msgid "For example"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:59
#: 839ae51990d74600ae81993a476c3b2e
msgid "To see a list of packages installed with pipx and which CLI applications are available, use ``pipx list``."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:79
#: 2a2d92fc276143bf8dad0a82cdd76329
msgid "To upgrade or uninstall the package"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:86
#: c5e436232b784f6190a72e720d1afc21
msgid "``pipx`` can be upgraded or uninstalled with pip"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:93
#: 89a305ead4cb49be962f520138687774
msgid "``pipx`` also allows you to install and run the latest version of a cli tool in a temporary, ephemeral environment."
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:106
#: 27dbd4c6e36c4cb391e7d929840ef725
msgid "To see the full list of commands ``pipx`` offers, run"
msgstr ""

#: ../source/guides/installing-stand-alone-command-line-tools.rst:112
#: e132fa036e994ffa9e882205b333a39e
msgid "You can learn more about ``pipx`` at its homepage, https://github.com/pipxproject/pipx."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:5
#: 083c98a6930542a7b9be4d540258e5eb
msgid "Installing pip/setuptools/wheel with Linux Package Managers"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:8
#: 407469c41668403e92a81d198a0ac046
msgid "2015-09-17"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:11
#: b4ea3e6c49b24da5a4f2d0e9ef79f332
msgid "This section covers how to install :ref:`pip`, :ref:`setuptools`, and :ref:`wheel` using Linux package managers."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:14
#: 61b71e0a21584154a16ea1dca931c6df
msgid "If you're using a Python that was downloaded from `python.org <https://www.python.org>`_, then this section does not apply.  See the :ref:`installing_requirements` section instead."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:18
#: 011d64ca6e014d85b1d2cfa19d1fca92
msgid "Note that it's common for the versions of :ref:`pip`, :ref:`setuptools`, and :ref:`wheel` supported by a specific Linux Distribution to be outdated by the time it's released to the public, and updates generally only occur for security reasons, not for feature updates.  For certain Distributions, there are additional repositories that can be enabled to provide newer versions.  The repositories we know about are explained below."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:25
#: a1196885c98c49ceb8f2355d14a51a88
msgid "Also note that it's somewhat common for Distributions to apply patches for the sake of security and normalization to their own standards.  In some cases, this can lead to bugs or unexpected behaviors that vary from the original unpatched versions.  When this is known, we will make note of it below."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:32
#: 76b54148421b4b64bfe31676cc5f943b
msgid "Fedora"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:34
#: c5b5013025ba4dee86b4cf8b432ad353
msgid "Fedora 21:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:36
#: ../source/guides/installing-using-linux-tools.rst:45
#: ../source/guides/installing-using-linux-tools.rst:124
#: ../source/guides/installing-using-linux-tools.rst:138
#: ../source/guides/installing-using-linux-tools.rst:158
#: 0c657ba75a2f4fcda3bc4e46720a097b
#: 21acaa9b7f764c8496ec19e090496723
#: 23cde03ff8694f338a8561997abd679a
#: 8d79f06b08614d0f9b1fefb326ec35d0
#: f0e1e621337c4e729ac4c3ded0135611
msgid "Python 2::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:41
#: a36dd81bad524fd3ba469225d8ecb234
msgid "Python 3: ``sudo yum install python3 python3-wheel``"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:43
#: 843ddb3bd38f4886a9bf661562752bcd
msgid "Fedora 22:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:50
#: a65b07eae285430a893a8d3694a627be
msgid "Python 3: ``sudo dnf install python3 python3-wheel``"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:53
#: 3b9c0cd94c104f70ae0d8beebb18e935
msgid "To get newer versions of pip, setuptools, and wheel for Python 2, you can enable the `PyPA Copr Repo <https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using the `Copr Repo instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__, and then run::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:63
#: e41060ec61da4224a7172b5382a3ab27
msgid "CentOS/RHEL"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:65
#: 1c6f3bc6696348b4afc3a96539a1d8ee
msgid "CentOS and RHEL don't offer :ref:`pip` or :ref:`wheel` in their core repositories, although :ref:`setuptools` is installed by default."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:68
#: cec7ba2d4b2a42358a075a7c3485d136
msgid "To install pip and wheel for the system Python, there are two options:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:70
#: f0b55da3f15849b9af903f936109282c
msgid "Enable the `EPEL repository <https://fedoraproject.org/wiki/EPEL>`_ using `these instructions <https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F>`__. On EPEL 6 and EPEL7, you can install pip like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:77
#: f6eb0f4a652a45e18199eeed3fb73f54
msgid "On EPEL 7 (but not EPEL 6), you can install wheel like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:81
#: 64f86f5e5ddc4a07a1edf00ccdf9d4d3
msgid "Since EPEL only offers extra, non-conflicting packages, EPEL does not offer setuptools, since it's in the core repository."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:85
#: 49900874f8a54c799b763a74446f9d31
msgid "Enable the `PyPA Copr Repo <https://copr.fedoraproject.org/coprs/pypa/pypa/>`_ using `these instructions <https://fedorahosted.org/copr/wiki/HowToEnableRepo>`__ [1]_. You can install pip and wheel like so::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:92
#: b90a65143b374eaabff3817880e85206
msgid "To additionally upgrade setuptools, run::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:97
#: 9ab5fbb0fa08441e9e4a3cd0aa793a68
msgid "To install pip, wheel, and setuptools, in a parallel, non-system environment (using yum) then there are two options:"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:101
#: 85c166bd6ca146b7b92a04ae351c9d6b
msgid "Use the \"Software Collections\" feature to enable a parallel collection that includes pip, setuptools, and wheel."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:104
#: de9fc4c429464445843ed6b5b7a9805f
msgid "For Redhat, see here: http://developers.redhat.com/products/softwarecollections/overview/"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:106
#: c45ad3a1c88642098b9f4339e54f2b9b
msgid "For CentOS, see here: https://www.softwarecollections.org/en/"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:108
#: ed1e993e2c5d41a588a5ed6859c86ea5
msgid "Be aware that collections may not contain the most recent versions."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:110
#: fbd6377b859240a1be573d4f0928f3dd
msgid "Enable the `IUS repository <https://ius.io/GettingStarted/>`_ and install one of the `parallel-installable <https://ius.io/SafeRepo/#parallel-installable-package>`_ Pythons, along with pip, setuptools, and wheel, which are kept fairly up to date."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:116
#: ca84ba3a23c3431e8fc636a1ff74f169
msgid "For example, for Python 3.4 on CentOS7/RHEL7::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:122
#: 173e864e9b494fac9ecbfa255d37a73b
msgid "openSUSE"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:129
#: ../source/guides/installing-using-linux-tools.rst:143
#: ../source/guides/installing-using-linux-tools.rst:162
#: fc9ce6cd996648fa8aefb0a202ce1e8c
#: 24cb887e95c249618407823be22365cd
#: cf0f7c4db91943f5828a2594568caae9
msgid "Python 3::"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:135
#: 7273c6dcada84bd59651cab220b95c11
msgid "Debian/Ubuntu"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:150
#: ff6b943c4da24b36a1a675342477b10d
msgid "Recent Debian/Ubuntu versions have modified pip to use the `\"User Scheme\" <https://pip.pypa.io/en/stable/user_guide/#user-installs>`_ by default, which is a significant behavior change that can be surprising to some users."
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:156
#: 6192105089b1413bbeb36e01f4b4c2e6
msgid "Arch Linux"
msgstr ""

#: ../source/guides/installing-using-linux-tools.rst:168
#: 112d4f9860694d45beb7440a14868dc6
msgid "Currently, there is no \"copr\" yum plugin available for CentOS/RHEL, so the only option is to manually place the repo files as described."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:2
#: 38b73acda69141a5ae7319521c6d9df0
msgid "Installing packages using pip and virtual environments"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:4
#: 814461fabb1747c4a4596d2d00e2d29e
msgid "This guide discusses how to install packages using :ref:`pip` and a virtual environment manager: either :ref:`venv` for Python 3 or :ref:`virtualenv` for Python 2. These are the lowest-level tools for managing Python packages and are recommended if higher-level tools do not suit your needs."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:9
#: 87dafc6f2ac747f58a100143571d36ef
msgid "This doc uses the term **package** to refer to a :term:`Distribution Package`  which is different from an :term:`Import Package` that which is used to import modules in your Python source code."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:15
#: 654480bdc6c9456c8ab1c6b86b30bda4
msgid "Installing pip"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:17
#: 55f47d384f054dc882e03c723900222d
msgid ":ref:`pip` is the reference Python package manager. It's used to install and update packages. You'll need to make sure you have the latest version of pip installed."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:25
#: a289764b4e6947799366a5aac3448cb4
msgid "The Python installers for Windows include pip. You should be able to access pip using:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:33
#: d48bd8c6078b459ebc047c1c00cb276d
msgid "You can make sure that pip is up-to-date by running:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:41
#: 4277f999b57b46b68ec57155ae9d9044
msgid "Linux and macOS"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:43
#: eb1e6398fa614dddbe9cf270fc557efe
msgid "Debian and most other distributions include a `python-pip`_ package, if you want to use the Linux distribution-provided versions of pip see :doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:47
#: e96e616d56b64a01a5b5b43e0a708a0e
msgid "You can also install pip yourself to ensure you have the latest version. It's recommended to use the system pip to bootstrap a user installation of pip:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:54
#: f02449074637407a843eecabaff10444
msgid "Afterwards, you should have the newest pip installed in your user site:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:65
#: f3042070d27d4db5b8dbb67123b309e5
msgid "Installing virtualenv"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:67
#: 0aab97c6bbb648b5a82440de2cc78c54
msgid "If you are using Python 3.3 or newer, the :mod:`venv` module is the preferred way to create and manage virtual environments. venv is included in the Python standard library and requires no additional installation. If you are using venv, you may skip this section."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:73
#: 5fddbbca94b24cf882cf34698626e09e
msgid ":ref:`virtualenv` is used to manage Python packages for different projects. Using virtualenv allows you to avoid installing Python packages globally which could break system tools or other projects. You can install virtualenv using pip."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:78
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:108
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:137
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:150
#: ea1de5b32fce45e184e7d405dfc7af72
#: 46ea2ec077104837a9875dcc04d1c69d
#: 722c2da9c68f4e72b338e30310b429d8
#: cb90d6d93ebd4ed0b0aaab636d05434d
msgid "On macOS and Linux:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:84
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:114
#: ../source/guides/installing-using-pip-and-virtual-environments.rst:157
#: f6a2f1770f7c46019fc244faf59a8021
#: 7d631e952b4443fa9b95acf37201f9f8
#: 29fcee0b78234a2ebd5df4dbbdbd1b0e
msgid "On Windows:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:93
#: c2e23992ab0c441b95c798c2caa265c6
msgid "Creating a virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:95
#: a1444a25794f426c976ba402f11a6a9f
msgid ":ref:`venv` (for Python 3) and :ref:`virtualenv` (for Python 2) allow you to manage separate package installations for different projects. They essentially allow you to create a \"virtual\" isolated Python installation and install packages into that virtual installation. When you switch projects, you can simply create a new virtual environment and not have to worry about breaking the packages installed in the other environments. It is always recommended to use a virtual environment while developing Python applications."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:104
#: 7d43d485aa2144809786786f530d132e
msgid "To create a virtual environment, go to your project's directory and run venv. If you are using Python 2, replace ``venv`` with ``virtualenv`` in the below commands."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:120
#: 1af7a1f6290f4a9d92c3697eafd3b1ab
msgid "The second argument is the location to create the virtual environment. Generally, you can just create this in your project and call it ``env``."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:123
#: e1c1d5e2a7ed4ed2a7690a2fdb83887d
msgid "venv will create a virtual Python installation in the ``env`` folder."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:125
#: d45a55f8805f45ee9bce896b201b4c13
msgid "You should exclude your virtual environment directory from your version control system using ``.gitignore`` or similar."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:130
#: aee8f6a2c5904433bf6fc1257dc97179
msgid "Activating a virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:132
#: 967251dc7f09482e8a4dcafcf6d3a0c5
msgid "Before you can start installing or using packages in your virtual environment you'll need to *activate* it. Activating a virtual environment will put the virtual environment-specific ``python`` and ``pip`` executables into your shell's ``PATH``."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:143
#: 93e18b59a69f4464a18cd53b8bad2192
msgid "On Windows::"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:147
#: b5a62985c30f4790b1f3ee064f0729b0
msgid "You can confirm you're in the virtual environment by checking the location of your Python interpreter, it should point to the ``env`` directory."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:165
#: ba23b5304c3a4457be3f9be507a9f941
msgid "As long as your virtual environment is activated pip will install packages into that specific environment and you'll be able to import and use packages in your Python application."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:171
#: ec1eb4c6cbb3467ea2f53a3b15438130
msgid "Leaving the virtual environment"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:173
#: 94d0249382094b329c59fce4c31bf9be
msgid "If you want to switch projects or otherwise leave your virtual environment, simply run:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:179
#: 2290a221d73b4ab8a67b8ea219223420
msgid "If you want to re-enter the virtual environment just follow the same instructions above about activating a virtual environment. There's no need to re-create the virtual environment."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:184
#: 34f8763402bd4210b2ca8757a9cebcbd
msgid "Installing packages"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:186
#: cbe4f39554c744d7a46df44c309194c5
msgid "Now that you're in your virtual environment you can install packages. Let's install the `Requests`_ library from the :term:`Python Package Index (PyPI)`:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:201
#: be4a89569c1b4c219e37eabd29d48069
msgid "pip should download requests and all of its dependencies and install them:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:222
#: 5f490f8b84334fe6b15060088baf1dfc
msgid "Installing specific versions"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:224
#: 5f8553f329444935bf828a5e45f5792b
msgid "pip allows you to specify which version of a package to install using :term:`version specifiers <Version Specifier>`. For example, to install a specific version of ``requests``:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:240
#: 87552815dc7f4fbc845206c359c1fc9f
msgid "To install the latest ``2.x`` release of requests:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:254
#: c5f83d4b7f4f4340821924e0646b535e
msgid "To install pre-release versions of packages, use the ``--pre`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:270
#: 2d160a157d1840cba86d64e69bd270de
msgid "Installing extras"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:272
#: c87fc8d0d8bb4c648dd54e656f9497c8
msgid "Some packages have optional `extras`_. You can tell pip to install these by specifying the extra in brackets:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:292
#: 23f9f8ac8cba4b0ea9d712b04bfe2a4b
msgid "Installing from source"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:294
#: 1857aec9345443e8b7448bda4c1b2728
msgid "pip can install a package directly from source, for example:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:310
#: 526095f5505140e3bf295f936780eccb
msgid "Additionally, pip can install packages from source in `development mode`_, meaning that changes to the source directory will immediately affect the installed package without needing to re-install:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:331
#: 44f86b9df14049f4a60aa135ff974778
msgid "Installing from version control systems"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:333
#: fa88667c93ae4ea68bbf4c7809ce845b
msgid "pip can install packages directly from their version control system. For example, you can install directly from a git repository:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:340
#: 41bb5a0891b5424c840e60dbad644e33
msgid "For more information on supported version control systems and syntax, see pip's documentation on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:345
#: ../source/tutorials/installing-packages.rst:569
#: 514c17ddde3a40dba56b508043b15c9b
#: a40b575ab7d647c787842195fd0c1cd0
msgid "Installing from local archives"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:347
#: 6824596fa39f4f6199e40ad81b357b36
msgid "If you have a local copy of a :term:`Distribution Package`'s archive (a zip, wheel, or tar file) you can install it directly with pip:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:362
#: 92fab017c25a4109af375ec09b9bf3bd
msgid "If you have a directory containing archives of multiple packages, you can tell pip to look for packages there and not to use the :term:`Python Package Index (PyPI)` at all:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:378
#: 6bd8e5e8f8f94d36b570f376f56c9cad
msgid "This is useful if you are installing packages on a system with limited connectivity or if you want to strictly control the origin of distribution packages."
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:384
#: 4dca294d6e6a4811b20b3e036fed7b05
msgid "Using other package indexes"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:386
#: 2d6d43e25a91465aae8a5e363a6c8f36
msgid "If you want to download packages from a different index than the :term:`Python Package Index (PyPI)`, you can use the ``--index-url`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:401
#: fe8edf4772274d069decb14123c9687a
msgid "If you want to allow packages from both the :term:`Python Package Index (PyPI)` and a separate index, you can use the ``--extra-index-url`` flag instead:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:418
#: ../source/tutorials/installing-packages.rst:389
#: fc19e7df163245bbb1b31f7d66fca5b0
#: 7569203e18c84279a7132f58a78f73be
msgid "Upgrading packages"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:420
#: 6844ed39bf19404588a4373c284fb4b8
msgid "pip can upgrade packages in-place using the ``--upgrade`` flag. For example, to install the latest version of ``requests`` and all of its dependencies:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:436
#: ca16da6fd0e14779ab47cc87a042995c
msgid "Using requirements files"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:438
#: df49ac1e0e134a9abacb87f2a4f97d21
msgid "Instead of installing packages individually, pip allows you to declare all dependencies in a :ref:`Requirements File <pip:Requirements Files>`. For example you could create a :file:`requirements.txt` file containing:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:447
#: 6e60fdcdd7c74cd098febaa29e91219c
msgid "And tell pip to install all of the packages in this file using the ``-r`` flag:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:462
#: 552cfecc9de64dc9b39511bd6938c138
msgid "Freezing dependencies"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:464
#: ba3853df31844f2fa0381b89f1a94f80
msgid "Pip can export a list of all installed packages and their versions using the ``freeze`` command:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:479
#: 1ffe718dd1bf4fd3be7eff5d3636583d
msgid "Which will output a list of package specifiers such as:"
msgstr ""

#: ../source/guides/installing-using-pip-and-virtual-environments.rst:495
#: 597aab94d0c546fcac8d6e0877829bbe
msgid "This is useful for creating :ref:`pip:Requirements Files` that can re-create the exact versions of all packages installed in an environment."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:2
#: b6ce3f396c124b528c6117f78b95fe85
msgid "Making a PyPI-friendly README"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:4
#: a08418a021f941e7961de671a56598e1
msgid "README files can help your users understand your project and can be used to set your project's description on PyPI. This guide helps you create a README in a PyPI-friendly format and include your README in your package so it appears on PyPI."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:9
#: 7c7762f3852043dbb515de7fa813bea7
msgid "Creating a README file"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:11
#: c1a9f3b8338b4b539a5bad8e86c2abac
msgid "README files for Python projects are often named ``README``, ``README.txt``, ``README.rst``, or ``README.md``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:13
#: c4ec267ff4b741d983f14a538d00dac4
msgid "For your README to display properly on PyPI, choose a markup language supported by PyPI. Formats supported by `PyPI's README renderer <https://github.com/pypa/readme_renderer>`_ are:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:16
#: e1893e4bd325402f9239f51e990ff623
msgid "plain text"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:17
#: ae51091602764d85982231d5fe0b2033
msgid "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ (without Sphinx extensions)"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:18
#: d15b643a6857498d9161d2f175fbd56a
msgid "Markdown (`GitHub Flavored Markdown <https://github.github.com/gfm/>`_ by default, or `CommonMark <http://commonmark.org/>`_)"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:21
#: f3a504f670d74914b8ccb911507b3553
msgid "It's customary to save your README file in the root of your project, in the same directory as your :file:`setup.py` file."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:25
#: aa41adb128e94294afe659327755ddee
msgid "Including your README in your package's metadata"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:27
#: e876ed124b184f018efd5644c1fe740f
msgid "To include your README's contents as your package description, set your project's ``Description`` and ``Description-Content-Type`` metadata, typically in your project's :file:`setup.py` file."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:33
#: 64ab807a9e6f47a8a3699f2262f98af2
msgid ":ref:`description-optional`"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:34
#: 42f8574ddf244a96843936d539ab8caf
msgid ":ref:`description-content-type-optional`"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:36
#: 8267e0ec05414082a72f9e974e990851
msgid "For example, to set these values in a package's :file:`setup.py` file, use ``setup()``'s ``long_description`` and ``long_description_content_type``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:39
#: a1491a6cf18a43ec84ed0f9c4c201ed3
msgid "Set the value of ``long_description`` to the contents (not the path) of the README file itself. Set the ``long_description_content_type`` to an accepted ``Content-Type``-style value for your README file's markup, such as ``text/plain``, ``text/x-rst`` (for reStructuredText), or ``text/markdown``."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:45
#: 8c5ae1fdca9549a38356d0e4a0d36975
msgid "If you're using GitHub-flavored Markdown to write a project's description, ensure you upgrade the following tools:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:60
#: a87aefbf748746c582182489e540fb6e
msgid "The minimum required versions of the respective tools are:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:62
#: 2df537d9c1d14ec3a1895a2b18863982
msgid "``setuptools >= 38.6.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:63
#: 4d6fa0e93c2640c69fd7a6cee1787da7
msgid "``wheel >= 0.31.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:64
#: ff5c22c3a6e541c3903deadefbc21d62
msgid "``twine >= 1.11.0``"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:66
#: 824dae39785f4aec92123efe1ee153a7
msgid "It's recommended that you use ``twine`` to upload the project's distribution packages:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:72
#: e20596ae420c45d7a77b2106c1707d5f
msgid "For example, see this :file:`setup.py` file, which reads the contents of :file:`README.md` as ``long_description`` and identifies the markup as GitHub-flavored Markdown:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:95
#: a4bb36fe93b7483abe9f27afe46f271a
msgid "Validating reStructuredText markup"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:97
#: ec6bbb53b1ef4a45a482f116158ec06f
msgid "If your README is written in reStructuredText, any invalid markup will prevent it from rendering, causing PyPI to instead just show the README's raw source."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:100
#: 2fedc7946d8045b0aeb03d9761fe41fa
msgid "Note that Sphinx extensions used in docstrings, such as `directives and roles <http://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html>`_ (e.g., \"``:py:func:`getattr```\" or \"``:ref:`my-reference-label```\"), are not allowed here and will result in error messages like \"``Error: Unknown interpreted text role \"py:func\".``\"."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:105
#: 672f4776bb0f44dc8521c24f7226b570
msgid "You can check your README for markup errors before uploading as follows:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:107
#: 34489f2139a7484b90e886c2629e8c61
msgid "Install the latest version of `twine <https://github.com/pypa/twine>`_; version 1.12.0 or higher is required:"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:122
#: 5f66584691de4bca8ac37260a3c5fe1c
msgid "Build the sdist and wheel for your project as described under :ref:`Packaging Your Project`."
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:125
#: 7e4e5d0045e7498b96b1880b5afb7016
msgid "Run ``twine check`` on the sdist and wheel::"
msgstr ""

#: ../source/guides/making-a-pypi-friendly-readme.rst:129
#: 83ed2c6a988f43a29ca6dea551fa618c
msgid "This command will report any problems rendering your README.  If your markup renders fine, the command will output ``Checking distribution FILENAME: Passed``."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:4
#: e76708555b7c438984255c2ffda1fcdc
msgid "Migrating to PyPI.org"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:6
#: c4550f373f164747af5ddd5af51382e3
msgid ":term:`pypi.org` is the new, rewritten version of PyPI that has replaced the legacy PyPI code base. It is the default version of PyPI that people are expected to use. These are the tools and processes that people will need to interact with ``PyPI.org``."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:12
#: bc3d1c750bbe429893b40cc079d8e721
msgid "Publishing releases"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:14
#: 0e41fc06ee684306bcba0f5ead8254f8
msgid "``pypi.org`` is the default upload platform as of September 2016."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:16
#: 9457df4050ce4ebcaa6f7def56ab25ee
msgid "Uploads through ``pypi.python.org`` were *switched off* on **July 3, 2017**. As of April 13th, 2018, ``pypi.org`` is the URL for PyPI."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:19
#: a07e704ca16649358885fb0f5690b76d
msgid "The recommended way to migrate to PyPI.org for uploading is to ensure that you are using a new enough version of your upload tool."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:22
#: d1beff7f8a4346a5b37301fdd0e04f08
msgid "The default upload settings switched to ``pypi.org`` in the following versions:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:24
#: 903d72a325c1470bbd01d531a9cc9141
msgid "``twine`` 1.8.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:25
#: 7b8fff75edf44147b4b4f88606fbe534
msgid "``setuptools`` 27.0.0"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:26
#: 8ee8f85eec0a456b8f45ca5b41e10a6b
msgid "Python 2.7.13 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:27
#: 4a15a665b015422987dbce6ab6c9cdd8
msgid "Python 3.4.6 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:28
#: 1f92c939134d470091110efad7564f1b
msgid "Python 3.5.3 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:29
#: d4705354f5ab4dbca2474ffbb10e96ce
msgid "Python 3.6.0 (``distutils`` update)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:31
#: fd7f79afd27f4b13b13346f368436134
msgid "In addition to ensuring you're on a new enough version of the tool for the tool's default to have switched, you must also make sure that you have not configured the tool to override its default upload URL. Typically this is configured in a file located at :file:`$HOME/.pypirc`. If you see a file like:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:48
#: 14a3b047f25240f08e0987c3ec9a3ada
msgid "Then simply delete the line starting with ``repository`` and you will use your upload tool's default URL."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:51
#: 1a8fcf3b612a452c985e0130edbbc143
msgid "If for some reason you're unable to upgrade the version of your tool to a version that defaults to using PyPI.org, then you may edit :file:`$HOME/.pypirc` and include the ``repository:`` line, but use the value ``https://upload.pypi.org/legacy/`` instead:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:67
#: 21e0420da54d4ec8808189f8d45ba87b
msgid "(``legacy`` in this URL refers to the fact that this is the new server implementation's emulation of the legacy server implementation's upload API.)"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:73
#: d72875fb0d7a49c38e2ca6be93e5dc7f
msgid "Registering package names & metadata"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:75
#: ad567917cc8e41a99aa08c39bc4e2b9a
msgid "Explicit pre-registration of package names with the ``setup.py register`` command prior to the first upload is no longer required, and is not currently supported by the legacy upload API emulation on PyPI.org."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:79
#: 6e2cfefc60144591acc5343985662a00
msgid "As a result, attempting explicit registration after switching to using PyPI.org for uploads will give the following error message::"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:84
#: f67fb69e56a9434aa483f8f48fdc389a
msgid "The solution is to skip the registration step, and proceed directly to uploading artifacts."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:89
#: ../source/guides/using-testpypi.rst:5
#: 7ebc9a1a16d942d99c0543e0a898000b
#: d7b2920e54c842b99edca390f877c1d7
msgid "Using TestPyPI"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:91
#: a9eb280b4ec1416dbc2049f85e357c3f
msgid "Legacy TestPyPI (testpypi.python.org) is no longer available; use `test.pypi.org <https://test.pypi.org>`_ instead. If you use TestPyPI, you must update your :file:`$HOME/.pypirc` to handle TestPyPI's new location, by replacing ``https://testpypi.python.org/pypi`` with ``https://test.pypi.org/legacy/``, for example:"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:113
#: 6fea5e88753641b1827430bfff142230
msgid "Registering new user accounts"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:115
#: 8bbbd503654d4574bb4f238b8578237e
msgid "In order to help mitigate spam attacks against PyPI, new user registration through ``pypi.python.org`` was *switched off* on **February 20, 2018**. New user registrations at ``pypi.org`` are open."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:121
#: 29c2568b217a497f876c61e4f4104b51
msgid "Browsing packages"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:123
#: 1de66b5d94e34666b024022c97986df6
msgid "While ``pypi.python.org`` is may still be used in links from other PyPA documentation, etc, the default interface for browsing packages is ``pypi.org``. The domain pypi.python.org now redirects to pypi.org, and may be disabled sometime in the future."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:130
#: f00f9c5a2cd044e78f2fcfd58a803931
msgid "Downloading packages"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:132
#: f936ee1aa73d4184bdcc653b44140e11
msgid "``pypi.org`` is the default host for downloading packages."
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:135
#: 56898dc0b10c4e7dabb00de0d714aad7
msgid "Managing published packages and releases"
msgstr ""

#: ../source/guides/migrating-to-pypi-org.rst:137
#: 0edc9c5359d944d7a89be19db577919f
msgid "``pypi.org`` provides a fully functional interface for logged in users to manage their published packages and releases."
msgstr ""

#: ../source/guides/multi-version-installs.rst:5
#: 079c3ad651204d418e5bc990b8d9e3fc
msgid "Multi-version installs"
msgstr ""

#: ../source/guides/multi-version-installs.rst:8
#: ef482aba2f074c509065e4fc5aef6657
msgid "easy_install allows simultaneous installation of different versions of the same project into a single environment shared by multiple programs which must ``require`` the appropriate version of the project at run time (using ``pkg_resources``)."
msgstr ""

#: ../source/guides/multi-version-installs.rst:13
#: 29ef751e8d20422abbb849d89c1f1d86
msgid "For many use cases, virtual environments address this need without the complication of the ``require`` directive. However, the advantage of parallel installations within the same environment is that it works for an environment shared by multiple applications, such as the system Python in a Linux distribution."
msgstr ""

#: ../source/guides/multi-version-installs.rst:19
#: d8f306b22ee941178dd195ff423c0586
msgid "The major limitation of ``pkg_resources`` based parallel installation is that as soon as you import ``pkg_resources`` it locks in the *default* version of everything which is already available on sys.path. This can cause problems, since ``setuptools`` created command line scripts use ``pkg_resources`` to find the entry point to execute. This means that, for example, you can't use ``require`` tests invoked through ``nose`` or a WSGI application invoked through ``gunicorn`` if your application needs a non-default version of anything that is available on the standard ``sys.path`` - the script wrapper for the main application will lock in the version that is available by default, so the subsequent ``require`` call in your own code fails with a spurious version conflict."
msgstr ""

#: ../source/guides/multi-version-installs.rst:31
#: 8eed801ae1204073a4501b64ed622d4e
msgid "This can be worked around by setting all dependencies in ``__main__.__requires__`` before importing ``pkg_resources`` for the first time, but that approach does mean that standard command line invocations of the affected tools can't be used - it's necessary to write a custom wrapper script or use ``python -c '<command>'`` to invoke the application's main entry point directly."
msgstr ""

#: ../source/guides/multi-version-installs.rst:38
#: ae204202165f4cdd8d99689b7081f7c7
msgid "Refer to the `pkg_resources documentation <https://setuptools.readthedocs.io/en/latest/pkg_resources.html#workingset-objects>`__ for more details."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:5
#: 80eff4cb5e6d43f78468a2f8cb1e62ef
msgid "Packaging binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:8
#: ab08eccf77fa491a84584021d40a119a
msgid "2013-12-08"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:10
#: 556a76dd05564d9a82564dd32605136f
msgid "One of the features of the CPython reference interpreter is that, in addition to allowing the execution of Python code, it also exposes a rich C API for use by other software. One of the most common uses of this C API is to create importable C extensions that allow things which aren't always easy to achieve in pure Python code."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:20
#: 0284d3b996ab4ab9a5a01281117593d7
msgid "An overview of binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:23
#: ac4734be2d6c49ecaa9140dd04169a34
msgid "Use cases"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:25
#: 8c0d3c3bc25c4879afae97e398a0688d
msgid "The typical use cases for binary extensions break down into just three conventional categories:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:28
#: 5dd394ec68fd49de88eae62cf2d6fb6c
msgid "**accelerator modules**: these modules are completely self-contained, and are created solely to run faster than the equivalent pure Python code runs in CPython. Ideally, accelerator modules will always have a pure Python equivalent to use as a fallback if the accelerated version isn't available on a given system. The CPython standard library makes extensive use of accelerator modules. *Example*: When importing ``datetime``, Python falls back to the `datetime.py <https://github.com/python/cpython/blob/master/Lib/datetime.py>`_ module if the C implementation ( `_datetimemodule.c <https://github.com/python/cpython/blob/master/Modules/_datetimemodule.c>`_) is not available."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:39
#: 015e1ed72c2f41f49b2a67b68dba7557
msgid "**wrapper modules**: these modules are created to expose existing C interfaces to Python code. They may either expose the underlying C interface directly, or else expose a more \"Pythonic\" API that makes use of Python language features to make the API easier to use. The CPython standard library makes extensive use of wrapper modules. *Example*: `functools.py <https://github.com/python/cpython/blob/master/Lib/functools.py>`_ is a Python module wrapper for `_functoolsmodule.c <https://github.com/python/cpython/blob/master/Modules/_functoolsmodule.c>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:47
#: 52ceb57f1547453ba7629d36ba57f96c
msgid "**low-level system access**: these modules are created to access lower level features of the CPython runtime, the operating system, or the underlying hardware. Through platform specific code, extension modules may achieve things that aren't possible in pure Python code. A number of CPython standard library modules are written in C in order to access interpreter internals that aren't exposed at the language level. *Example*: ``sys``, which comes from `sysmodule.c <https://github.com/python/cpython/blob/master/Python/sysmodule.c>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:56
#: 590412f49bb841eb8bdd6ab29c76f6c4
msgid "One particularly notable feature of C extensions is that, when they don't need to call back into the interpreter runtime, they can release CPython's global interpreter lock around long-running operations (regardless of whether those operations are CPU or IO bound)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:61
#: 4315a2237d184a7abc5318a127a180e5
msgid "Not all extension modules will fit neatly into the above categories. The extension modules included with NumPy, for example, span all three use cases - they move inner loops to C for speed reasons, wrap external libraries written in C, FORTRAN and other languages, and use low level system interfaces for both CPython and the underlying operation system to support concurrent execution of vectorised operations and to tightly control the exact memory layout of created objects."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:71
#: df9d4dde9c4a4fcdb8214fcf86644f1e
msgid "Disadvantages"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:73
#: 0d9bf938940d418caf88eff59e311f12
msgid "The main disadvantage of using binary extensions is the fact that it makes subsequent distribution of the software more difficult. One of the advantages of using Python is that it is largely cross platform, and the languages used to write extension modules (typically C or C++, but really any language that can bind to the CPython C API) typically require that custom binaries be created for different platforms."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:80
#: 746cd46a7af3489fac5950e0467293ce
msgid "This means that binary extensions:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:82
#: 3eacfa60997c413fba0439fe1d92c577
msgid "require that end users be able to either build them from source, or else that someone publish pre-built binaries for common platforms"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:85
#: b6e21f58ca82439caf5418ad22cd4669
msgid "may not be compatible with different builds of the CPython reference interpreter"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:88
#: c82da55217af48438b34ead0f3a5acde
msgid "often will not work correctly with alternative interpreters such as PyPy, IronPython or Jython"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:91
#: c45e1c09cf0e49b79fc1c359e0833975
msgid "if handcoded, make maintenance more difficult by requiring that maintainers be familiar not only with Python, but also with the language used to create the binary extension, as well as with the details of the CPython C API."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:96
#: 2aa1fe20e7df4ef3be16497d7054abd3
msgid "if a pure Python fallback implementation is provided, make maintenance more difficult by requiring that changes be implemented in two places, and introducing additional complexity in the test suite to ensure both versions are always executed."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:101
#: 3a884369b8914d13a1a2984b92e0c33b
msgid "Another disadvantage of relying on binary extensions is that alternative import mechanisms (such as the ability to import modules directly from zipfiles) often won't work for extension modules (as the dynamic loading mechanisms on most platforms can only load libraries from disk)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:108
#: a5fae88b6af141c996e2564793eba1a8
msgid "Alternatives to handcoded accelerator modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:110
#: 21ceeee49053426b8f7c1e95586b2507
msgid "When extension modules are just being used to make code run faster (after profiling has identified the code where the speed increase is worth additional maintenance effort), a number of other alternatives should also be considered:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:115
#: e2f4bb6b92244227aa2e171d5c5e8ce8
msgid "look for existing optimised alternatives. The CPython standard library includes a number of optimised data structures and algorithms (especially in the builtins and the ``collections`` and ``itertools`` modules). The Python Package Index also offers additional alternatives. Sometimes, the appropriate choice of standard library or third party module can avoid the need to create your own accelerator module."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:122
#: 8538002b956b4bc39097b6f575d61160
msgid "for long running applications, the JIT compiled `PyPy interpreter <http://pypy.org/>`__ may offer a suitable alternative to the standard CPython runtime. The main barrier to adopting PyPy is typically reliance on other binary extension modules - while PyPy does emulate the CPython C API, modules that rely on that cause problems for the PyPy JIT, and the emulation layer can often expose latent defects in extension modules that CPython currently tolerates (frequently around reference counting errors - an object having one live reference instead of two often won't break anything, but no references instead of one is a major problem)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:132
#: 7e46c57ecba44f1784b62f701e0e77dd
msgid "`Cython <http://cython.org/>`__ is a mature static compiler that can compile most Python code to C extension modules. The initial compilation provides some speed increases (by bypassing the CPython interpreter layer), and Cython's optional static typing features can offer additional opportunities for speed increases. Using Cython still has the disadvantage of increasing the complexity of distributing the resulting application, but has the benefit of having a reduced barrier to entry for Python programmers (relative to other languages like C or C++)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:141
#: d29373328db246989246a9310f5ca0f9
msgid "`Numba <http://numba.pydata.org/>`__ is a newer tool, created by members of the scientific Python community, that aims to leverage LLVM to allow selective compilation of pieces of a Python application to native machine code at runtime. It requires that LLVM be available on the system where the code is running, but can provide significant speed increases, especially for operations that are amenable to vectorisation."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:150
#: 8cb24a77f39e4056b1e047949844d7fd
msgid "Alternatives to handcoded wrapper modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:152
#: 0d12b23fe3b94e69ac0050b92ae6858b
msgid "The C ABI (Application Binary Interface) is a common standard for sharing functionality between multiple applications. One of the strengths of the CPython C API (Application Programming Interface) is allowing Python users to tap into that functionality. However, wrapping modules by hand is quite tedious, so a number of other alternative approaches should be considered."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:158
#: be86a780123d4f719290d9c7f0077bce
msgid "The approaches described below don't simplify the distribution case at all, but they *can* significantly reduce the maintenance burden of keeping wrapper modules up to date."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:162
#: d707ca9395054ceea4584e5cee71dada
msgid "In addition to being useful for the creation of accelerator modules, `Cython <http://cython.org/>`__ is also useful for creating wrapper modules. It still involves wrapping the interfaces by hand, however, so may not be a good choice for wrapping large APIs."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:167
#: 9ab763d465af4cceb5d9b1cf15911dbf
msgid "`cffi <https://cffi.readthedocs.io/>`__ is a project created by some of the PyPy developers to make it straightforward for developers that already know both Python and C to expose their C modules to Python applications. It also makes it relatively straightforward to wrap a C module based on its header files, even if you don't know C yourself."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:173
#: dc92539f0e4246489f84ecd0a0f1ab50
msgid "One of the key advantages of ``cffi`` is that it is compatible with the PyPy JIT, allowing CFFI wrapper modules to participate fully in PyPy's tracing JIT optimisations."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:177
#: 067cfa9a654d480eb3488dbd0d6adcc4
msgid "`SWIG <http://www.swig.org/>`__ is a wrapper interface generator that allows a variety of programming languages, including Python, to interface with C *and C++* code."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:181
#: e863dd0f8c714adab292f88d92acb095
msgid "The standard library's ``ctypes`` module, while useful for getting access to C level interfaces when header information isn't available, suffers from the fact that it operates solely at the C ABI level, and thus has no automatic consistency checking between the interface actually being exported by the library and the one declared in the Python code. By contrast, the above alternatives are all able to operate at the C *API* level, using C header files to ensure consistency between the interface exported by the library being wrapped and the one expected by the Python wrapper module. While ``cffi`` *can* operate directly at the C ABI level, it suffers from the same interface inconsistency problems as ``ctypes`` when it is used that way."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:195
#: f9edc7816d684ab0b6956602dc2aa2d3
msgid "Alternatives for low level system access"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:197
#: db7d2c21c0cd4d0593080ec0b7ad8632
msgid "For applications that need low level system access (regardless of the reason), a binary extension module often *is* the best way to go about it. This is particularly true for low level access to the CPython runtime itself, since some operations (like releasing the Global Interpreter Lock) are simply invalid when the interpreter is running code, even if a module like ``ctypes`` or ``cffi`` is used to obtain access to the relevant C API interfaces."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:205
#: f69b735ff8ab4ac8922bd441cbb64450
msgid "For cases where the extension module is manipulating the underlying operating system or hardware (rather than the CPython runtime), it may sometimes be better to just write an ordinary C library (or a library in another systems programming language like C++ or Rust that can export a C compatible ABI), and then use one of the wrapping techniques described above to make the interface available as an importable Python module."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:214
#: 1c66f4de96ec46fbba67b702b1324c03
msgid "Implementing binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:216
#: 05146d6000cb47799ce4ee4dad209cdd
msgid "The CPython `Extending and Embedding <https://docs.python.org/3/extending/>`_ guide includes an introduction to writing a `custom extension module in C <https://docs.python.org/3/extending/extending.html>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:233
#: 1ef62e2dc7d1404fa7f03858ff26ae64
msgid "Building binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:236
#: 3692659e6ee247acb6a7250d45d9b9f7
msgid "Binary extensions for Windows"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:238
#: 063528ee4eb340fbbc6065f622205932
msgid "Before it is possible to build a binary extension, it is necessary to ensure that you have a suitable compiler available. On Windows, Visual C is used to build the official CPython interpreter, and should be used to build compatible binary extensions."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:243
#: e366ce0629574daab1c027d30a5b22f0
msgid "Python 2.7 used Visual Studio 2008, Python 3.3 and 3.4 used Visual Studio 2010, and Python 3.5+ uses Visual Studio 2015 or later. Unfortunately, older versions of Visual Studio are no longer easily available from Microsoft, so for versions of Python prior to 3.5, the compilers must be obtained differently if you do not already have a copy of the relevant version of Visual Studio."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:249
#: eb75bbf6134742eeb775cb299e3d4c52
msgid "To set up a build environment for binary extensions, the steps are as follows:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:251
#: ca9deed9757549b3ba580319a25bd332
msgid "For Python 2.7"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:253
#: 186b764302494d6f930fc36f44ea9664
msgid "Install \"Visual C++ Compiler Package for Python 2.7\", which is available from `Microsoft's website <https://www.microsoft.com/en-gb/download/details.aspx?id=44266>`__."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:256
#: 50185a0ddc16412686349a50c885ba1f
msgid "Use (a recent version of) setuptools in your setup.py (pip will do this for you, in any case)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:258
#: ../source/guides/packaging-binary-extensions.rst:268
#: ../source/guides/packaging-binary-extensions.rst:275
#: 6465321ffb99419d8233153c4f42376b
#: 595cdd33ca6240bbb892ecd28080013c
#: c927c7a8c688452eb5650ef45b586315
msgid "Done."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:260
#: d454b7be90274c06839e43955dac4a1b
msgid "For Python 3.4"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:262
#: d8c63236fe85486ca3a7518feb085f1b
msgid "Install \"Windows SDK for Windows 7 and .NET Framework 4\" (v7.1), which is available from `Microsoft's website <https://www.microsoft.com/en-gb/download/details.aspx?id=8279>`__."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:265
#: 5aca808ca93340c4abe661dc0c6d44e5
msgid "Work from an SDK command prompt (with the environment variables set, and the SDK on PATH)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:267
#: 952c6b83f6e9473ba72e18cc4f9520e7
msgid "Set DISTUTILS_USE_SDK=1"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:270
#: 1267f6ae4bb1409c9a44a98b9f69d89f
msgid "For Python 3.5"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:272
#: f513754ddeee42a09136795ded2d049a
msgid "Install `Visual Studio 2015 Community Edition <https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx>`__ (or any later version, when these are released)."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:277
#: 3b4022b5f7824d679e0cacace7e6bc58
msgid "Note that from Python 3.5 onwards, Visual Studio works in a backward compatible way, which means that any future version of Visual Studio will be able to build Python extensions for all Python versions from 3.5 onwards."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:281
#: 3f84243f62cb4b898d42153bd5dfac80
msgid "Building with the recommended compiler on Windows ensures that a compatible C library is used throughout the Python process."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:285
#: fdb4472442da4e56aad8b110dbcff4da
msgid "Binary extensions for Linux"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:287
#: 95ad0be96d1743b5a7af826d567d787c
msgid "Linux binaries must use a sufficiently old glibc to be compatible with older distributions. The `manylinux <https://github.com/pypa/manylinux>`_ Docker images provide a build environment with a glibc old enough to support most current Linux distributions on common architectures."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:293
#: e135bf842c0d46f6a1da5e9b03945af9
msgid "Binary extensions for macOS"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:295
#: bc9953f78326442db69baa432794a9fb
msgid "Binary compatibility on macOS is determined by the target minimum deployment system, e.g. *10.9*, which is often specified with the ``MACOSX_DEPLOYMENT_TARGET`` environmental variable when building binaries on macOS. When building with setuptools / distutils, the deployment target is specified with the flag ``--plat-name``, e.g. ``macosx-10.9-x86_64``. For common deployment targets for macOS Python distributions, see the `MacPython Spinning Wheels wiki <https://github.com/MacPython/wiki/wiki/Spinning-wheels>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:305
#: 5d3161e8b68b4416957b8f528c614088
msgid "Publishing binary extensions"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:307
#: d6fe4937fd164b0cb49f13f65a097a07
msgid "For interim guidance on this topic, see the discussion in `this issue <https://github.com/pypa/python-packaging-user-guide/issues/284>`_."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:323
#: ff23ccbdb63447b7a3ed5e64f702c330
msgid "Additional resources"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:325
#: 731888aa32f2456db95f527283aba5e2
msgid "Cross-platform development and distribution of extension modules is a complex topic, so this guide focuses primarily on providing pointers to various tools that automate dealing with the underlying technical challenges. The additional resources in this section are instead intended for developers looking to understand more about the underlying binary interfaces that those systems rely on at runtime."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:332
#: 0774ae9d16f548a788eeb8d655240ac9
msgid "Cross-platform wheel generation with scikit-build"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:334
#: dd4357f6141c44bf8a39e54ae946e45f
msgid "The `scikit-build <https://scikit-build.readthedocs.io/en/latest/>`_ package helps abstract cross-platform build operations and provides additional capabilities when creating binary extension packages. Additional documentation is also available on the `C runtime, compiler, and build system generator <https://scikit-build.readthedocs.io/en/latest/generators.html>`_ for Python binary extension modules."
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:342
#: 4674231430264963b5eb2f350ee80653
msgid "Introduction to C/C++ extension modules"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:344
#: 407b37e0413d4a78854544d19330ad85
msgid "For a more in depth explanation of how extension modules are used by CPython on a Debian system, see the following articles:"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:347
#: 6baa7394128d4a10a354660336fb824d
msgid "`What are (c)python extension modules? <https://thomasnyberg.com/what_are_extension_modules.html>`_"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:348
#: bc2631279a11488db4e3392749aaacb4
msgid "`Releasing the gil <https://thomasnyberg.com/releasing_the_gil.html>`_"
msgstr ""

#: ../source/guides/packaging-binary-extensions.rst:349
#: 778d27ba7ddc42dbb7880a6b5ce57d86
msgid "`Writing cpython extension modules using C++ <https://thomasnyberg.com/cpp_extension_modules.html>`_"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:3
#: 70b205dd7a8041248c633f2a12e79bed
msgid "Packaging namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:5
#: deff1075330c4523969530e83259d6a3
msgid "Namespace packages allow you to split the sub-packages and modules within a single :term:`package <Import Package>` across multiple, separate :term:`distribution packages <Distribution Package>` (referred to as **distributions** in this document to avoid ambiguity). For example, if you have the following package structure:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:24
#: 715426a9527e434eb814f2b6e45660b5
msgid "And you use this package in your code like so::"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:29
#: 8d827c28569f498db134767f7f5ef652
msgid "Then you can break these sub-packages into two separate distributions:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:46
#: 22ec0e36aebc4af7a594b05d1b63c75f
msgid "Each sub-package can now be separately installed, used, and versioned."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:48
#: 2f9c6cef09f14a8b895fc56a687c83b7
msgid "Namespace packages can be useful for a large collection of loosely-related packages (such as a large corpus of client libraries for multiple products from a single company). However, namespace packages come with several caveats and are not appropriate in all cases. A simple alternative is to use a prefix on all of your distributions such as ``import mynamespace_subpackage_a`` (you could even use ``import mynamespace_subpackage_a as subpackage_a`` to keep the import object short)."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:58
#: 1b9fdb04c1c34ab29b3ae82ae67184a6
msgid "Creating a namespace package"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:60
#: 7758e635d5984f53b3ac6bd39f5fd129
msgid "There are currently three different approaches to creating namespace packages:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:62
#: 2246027af2484575becf6ffc00b00d02
msgid "Use `native namespace packages`_. This type of namespace package is defined in :pep:`420` and is available in Python 3.3 and later. This is recommended if packages in your namespace only ever need to support Python 3 and installation via ``pip``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:66
#: f5ab1bb3db084fb6b87c8d36efeb163d
msgid "Use `pkgutil-style namespace packages`_. This is recommended for new packages that need to support Python 2 and 3 and installation via both ``pip`` and ``python setup.py install``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:69
#: 47464e52b7fd44c788432dedf3d8b8bf
msgid "Use `pkg_resources-style namespace packages`_. This method is recommended if you need compatibility with packages already using this method or if your package needs to be zip-safe."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:73
#: 556634ef9a814b5c8980cdafa4b4cb8c
msgid "While native namespace packages and pkgutil-style namespace packages are largely compatible, pkg_resources-style namespace packages are not compatible with the other methods. It's inadvisable to use different methods in different distributions that provide packages to the same namespace."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:80
#: 1ead423c603b4aecbef2a71cff6e92a3
msgid "Native namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:82
#: bef9e33f862b40aea1b0d9d2b707500d
msgid "Python 3.3 added **implicit** namespace packages from :pep:`420`. All that is required to create a native namespace package is that you just omit :file:`__init__.py` from the namespace package directory. An example file structure:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:97
#: fd7a4e776bc040549a30a1e610ef2c1a
msgid "It is extremely important that every distribution that uses the namespace package omits the :file:`__init__.py` or uses a pkgutil-style :file:`__init__.py`. If any distribution does not, it will cause the namespace logic to fail and the other sub-packages will not be importable."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:102
#: fa795b112eb848d08bca2ca8a9f7aa41
msgid "Because ``mynamespace`` doesn't contain an :file:`__init__.py`, :func:`setuptools.find_packages` won't find the sub-package. You must use :func:`setuptools.find_namespace_packages` instead or explicitly list all packages in your :file:`setup.py`. For example:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:117
#: 338a3215395842c3a179f45d73a47796
msgid "A complete working example of two native namespace packages can be found in the `native namespace package example project`_."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:123
#: 6d1607d493d04103afd34199393f94b9
msgid "Because native and pkgutil-style namespace packages are largely compatible, you can use native namespace packages in the distributions that only support Python 3 and pkgutil-style namespace packages in the distributions that need to support Python 2 and 3."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:129
#: 8f0f299f975140b5ade3375e1eec3590
msgid "pkgutil-style namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:131
#: 3648953617a845a09184906a7fec62f6
msgid "Python 2.3 introduced the `pkgutil`_ module and the `extend_path`_ function. This can be used to declare namespace packages that need to be compatible with both Python 2.3+ and Python 3. This is the recommended approach for the highest level of compatibility."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:136
#: d7437a9b722e4beeb20f214d9715a915
msgid "To create a pkgutil-style namespace package, you need to provide an :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:148
#: ../source/guides/packaging-namespace-packages.rst:194
#: 41e8327ddbb144baa43767e11cd7809d
#: b4e4762ddba745a9a6e4194dabacac14
msgid "The :file:`__init__.py` file for the namespace package needs to contain **only** the following:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:155
#: ../source/guides/packaging-namespace-packages.rst:201
#: 1b52282adbad43679724eb105ebdf1e8
#: 0d7771b9e60547d285543b54793376f0
msgid "**Every** distribution that uses the namespace package must include an identical :file:`__init__.py`. If any distribution does not, it will cause the namespace logic to fail and the other sub-packages will not be importable.  Any additional code in :file:`__init__.py` will be inaccessible."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:160
#: ecf355bbd31d49bc862adc537604e303
msgid "A complete working example of two pkgutil-style namespace packages can be found in the `pkgutil namespace example project`_."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:171
#: 8e54a758c6ce46618b9f02a9ae83f0fe
msgid "pkg_resources-style namespace packages"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:173
#: 6e68155badde43268e1237e1dcf9bc34
msgid "`Setuptools`_ provides the `pkg_resources.declare_namespace`_ function and the ``namespace_packages`` argument to :func:`~setuptools.setup`. Together these can be used to declare namespace packages. While this approach is no longer recommended, it is widely present in most existing namespace packages. If you are creating a new distribution within an existing namespace package that uses this method then it's recommended to continue using this as the different methods are not cross-compatible and it's not advisable to try to migrate an existing package."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:182
#: 7d05408ce739419988abfd343a8e7f7a
msgid "To create a pkg_resources-style namespace package, you need to provide an :file:`__init__.py` file for the namespace package:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:206
#: 09ae46c11aa9449daa490525e599f1b0
msgid "Some older recommendations advise the following in the namespace package :file:`__init__.py`:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:216
#: 5300997c41c84a3bbe1bcfdd5d8d39e4
msgid "The idea behind this was that in the rare case that setuptools isn't available packages would fall-back to the pkgutil-style packages. This isn't advisable because pkgutil and pkg_resources-style namespace packages are not cross-compatible. If the presence of setuptools is a concern then the package should just explicitly depend on setuptools via ``install_requires``."
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:223
#: a7676fb0565042a99224155b6ed194e2
msgid "Finally, every distribution must provide the ``namespace_packages`` argument to :func:`~setuptools.setup` in :file:`setup.py`. For example:"
msgstr ""

#: ../source/guides/packaging-namespace-packages.rst:237
#: 452dbd1a28644f73864a160f48312bc3
msgid "A complete working example of two pkg_resources-style namespace packages can be found in the `pkg_resources namespace example project`_."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:3
#: 976e752aa3c3434a942ccfb3f265cf15
msgid "Publishing package distribution releases using GitHub Actions CI/CD workflows"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:5
#: 2df906e003734bf686af6f0d2bbd26cb
msgid "`GitHub Actions CI/CD`_ allows you to run a series of commands whenever an event occurs on the GitHub platform. One popular choice is having a workflow that's triggered by a ``push`` event. This guide shows you how to publish a Python distribution whenever a tagged commit is pushed. It will use the `pypa/gh-action-pypi-publish GitHub Action`_."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:15
#: dee63422b7ce4441bda9226b2504f2ec
msgid "This guide *assumes* that you already have a project that you know how to build distributions for and *it lives on GitHub*."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:19
#: 8c72c4c92a364785b612d37214e08998
msgid "Saving credentials on GitHub"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:21
#: 24fefbf2073843879a8cffe32f8ac246
msgid "In this guide, we'll demonstrate uploading to both PyPI and TestPyPI, meaning that we'll have two separate sets of credentials. And we'll need to save them in the GitHub repository settings."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:26
#: 20cd013ca9104072a8dc2eeb213ebe58
msgid "Let's begin! 🚀"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:28
#: f49e0fc7ccf646328e8e77207430891f
msgid "Go to https://pypi.org/manage/account/#api-tokens and create a new `API token`_. If you have the project on PyPI already, limit the token scope to just that project. You can call it something like ``GitHub Actions CI/CD — project-org/project-repo`` in order for it to be easily distinguishable in the token list. **Don't close the page just yet — you won't see that token again.**"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:37
#: 172e9c70529a48b199aa5ca5552eedd6
msgid "In a separate browser tab or window, go to the ``Settings`` tab of your target repository and then click on `Secrets`_ in the left sidebar."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:40
#: 2a45f3915670437198f5ee0f8571139f
msgid "Create a new secret called ``PYPI_API_TOKEN`` and copy-paste the token from the first step."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:42
#: 453f7ad78345437aba24c7be5d774319
msgid "Now, go to https://test.pypi.org/manage/account/#api-tokens and repeat the steps. Save that TestPyPI token on GitHub as ``TEST_PYPI_API_TOKEN``."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:48
#: 226bd3f7edb540468720acf4c2c7e41e
msgid "If you don't have a TestPyPI account, you'll need to create it. It's not the same as a regular PyPI account."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:53
#: c011ab89a78a426c9bb5689dc9642e5a
msgid "Creating a workflow definition"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:55
#: 99185b66e9754174b2f18fe4019f6ebd
msgid "GitHub CI/CD workflows are declared in YAML files stored in the ``.github/workflows/`` directory of your repository."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:58
#: c69445a848c04ff0a49f7953e5f308d2
msgid "Let's create a ``.github/workflows/publish-to-test-pypi.yml`` file."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:61
#: e2472352af154dc68f03795427323d22
msgid "Start it with a meaningful name and define the event that should make GitHub run this workflow:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:70
#: 4c4fa25fab774839a5d054e369915d81
msgid "Defining a workflow job environment"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:72
#: 3bfca5491a234dc3a72146a00163f352
msgid "Now, let's add initial setup for our job. It's a process that will execute commands that we'll define later. In this guide, we'll use Ubuntu 18.04:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:83
#: fa421aaa5aeb4d068bcecf1ff7da633b
msgid "Checking out the project and building distributions"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:85
#: 57a2e02b04d748dd9bd0d2c04cd5fb81
msgid "Then, add the following under the ``build-n-publish`` section:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:92
#: 1d7685700a5241e89b5c6e812dfe2d2e
msgid "This will download your repository into the CI runner and then install and activate Python 3.7."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:95
#: 95a34a556769478cb0e3ee2fb09a7c1f
msgid "And now we can build dists from source. In this example, we'll use ``build`` package, assuming that your project has a ``pyproject.toml`` properly set up (see :pep:`517`/:pep:`518`)."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:102
#: 8d3bdf0f7e7c4b4c99d21c2439e8e69e
msgid "You can use any other method for building distributions as long as it produces ready-to-upload artifacts saved into the ``dist/`` folder."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:106
#: 39c61b96697b4bd4960364602946b404
msgid "So add this to the steps list:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:115
#: 77baa76b8c194affa3ccde5233c8f3a7
msgid "Publishing the distribution to PyPI and TestPyPI"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:117
#: f70f6e7dd4104ee492fea7630767b2cc
msgid "Finally, add the following steps at the end:"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:123
#: 0ab02d5434864bcc861b5f988aa048d5
msgid "These two steps use the `pypa/gh-action-pypi-publish`_ GitHub Action: the first one uploads contents of the ``dist/`` folder into TestPyPI unconditionally and the second does that to PyPI, but only if the current commit is tagged."
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:130
#: dba9242249194b2ea20e467d73244da0
msgid "That's all, folks!"
msgstr ""

#: ../source/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows.rst:132
#: c547c52550ed4abc804040aacb850fcb
msgid "Now, whenever you push a tagged commit to your Git repository remote on GitHub, this workflow will publish it to PyPI. And it'll publish any push to TestPyPI which is useful for providing test builds to your alpha users as well as making sure that your release pipeline remains healthy!"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:5
#: d16e452d5ee24b8895397b7f8c3d1e2d
msgid "Single-sourcing the package version"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:8
#: d15d384210d041c4bb364b2842902155
msgid "There are many techniques to maintain a single source of truth for the version number of your project:"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:11
#: c42f8f4d5a8441d59f66b5c55ada4575
msgid "Read the file in :file:`setup.py` and get the version. Example (from `pip setup.py <https://github.com/pypa/pip/blob/master/setup.py#L11>`_)::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:38
#: 6e1c77c06a8a4cf78feaab618f7fe451
msgid "As of the release of setuptools 46.4.0, one can accomplish the same thing by instead placing the following in the project's ``setup.cfg`` file (replacing \"package\" with the import name of the package):"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:47
#: 5bf29445913a459e8de9b8a422f12bcc
msgid "Earlier versions of setuptools implemented the ``attr:`` directive by importing the module, but setuptools 46.4.0 added rudimentary AST analysis so that ``attr:`` can function without having to import any of the package's dependencies."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:52
#: cdc5ebe239694b74b3b5c2ab63f33665
msgid "Also, please be aware that declarative config indicators, including the ``attr:`` directive, are not supported in parameters to ``setup.py``."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:55
#: 8c865cb2be4747fa86d116ccd45d1e06
msgid "Use an external build tool that either manages updating both locations, or offers an API that both locations can use."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:58
#: 6d667ab9e79c48308b276475c31f55c8
msgid "Few tools you could use, in no particular order, and not necessarily complete: `bump2version <https://pypi.org/project/bump2version>`_, `changes <https://pypi.org/project/changes>`_, `commitizen <https://pypi.org/project/commitizen>`_, `zest.releaser <https://pypi.org/project/zest.releaser>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:65
#: ab3a32bf29ed47e2989cea036cc1ebaa
msgid "Set the value to a ``__version__`` global variable in a dedicated module in your project (e.g. :file:`version.py`), then have :file:`setup.py` read and ``exec`` the value into a variable."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:76
#: 0d00f83e11cd4de0aeaa1b156962c206
msgid "Example using this technique: `warehouse <https://github.com/pypa/warehouse/blob/64ca42e42d5613c8339b3ec5e1cb7765c6b23083/warehouse/__about__.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:78
#: a19804be907a49e4b66f47ed6d50b6d5
msgid "Place the value in a simple ``VERSION`` text file and have both :file:`setup.py` and the project code read it."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:86
#: c582312448fe4fb5886fcbd1cd97d77c
msgid "An advantage with this technique is that it's not specific to Python.  Any tool can read the version."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:91
#: 6d120be79c504a04aea960983befb4bf
msgid "With this approach you must make sure that the ``VERSION`` file is included in all your source and binary distributions (e.g. add ``include VERSION`` to your :file:`MANIFEST.in`)."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:95
#: 0f6833ac5a7c4e1ca8d09cffef9bd0ab
msgid "Set the value in :file:`setup.py`, and have the project code use the ``importlib.metadata`` API to fetch the value at runtime. (``importlib.metadata`` was introduced in Python 3.8 and is available to older versions as the ``importlib-metadata`` project.)  An installed project's version can be fetched with the API as follows::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:110
#: 4d02d21db05742c8aaf020d528d9a645
msgid "Be aware that the ``importlib.metadata`` API only knows about what's in the installation metadata, which is not necessarily the code that's currently imported."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:114
#: 6efee8ea07b8410f8e8c1f695d6c78b5
msgid "If a project uses this method to fetch its version at runtime, then its ``install_requires`` value needs to be edited to install ``importlib-metadata`` on pre-3.8 versions of Python like so::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:128
#: 553ecf811cf34d7e88b2325fbdf23045
msgid "An older (and less efficient) alternative to ``importlib.metadata`` is the ``pkg_resources`` API provided by ``setuptools``::"
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:134
#: e86c143a38154f73a8fc58dc43507786
msgid "If a project uses ``pkg_resources`` to fetch its own version at runtime, then ``setuptools`` must be added to the project's ``install_requires`` list."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:138
#: acff0a9f899441b8a010a44078557400
msgid "Example using this technique: `setuptools <https://github.com/pypa/setuptools/blob/master/setuptools/version.py>`_."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:141
#: f2128adbb2a8424e9728ac15741d0f79
msgid "Set the value to ``__version__`` in ``sample/__init__.py`` and import ``sample`` in :file:`setup.py`."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:155
#: 5fee0bdcd2d643cb90c5e6aab90a78ac
msgid "Although this technique is common, beware that it will fail if ``sample/__init__.py`` imports packages from ``install_requires`` dependencies, which will very likely not be installed yet when :file:`setup.py` is run."
msgstr ""

#: ../source/guides/single-sourcing-package-version.rst:161
#: 192d71e314944b0fa7b04e9c1a01a3d1
msgid "Keep the version number in the tags of a version control system (Git, Mercurial, etc) instead of in the code, and automatically extract it from there using `setuptools_scm <https://pypi.org/project/setuptools_scm>`_."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:5
#: 33bc2a7df9594ef688fd432878d2ff61
msgid "Supporting multiple Python versions"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:37
#: f50370a6490949849ae2b05e4872282a
msgid "In addition to the work required to create a Python package, it is often necessary that the package must be made available on different versions of Python.  Different Python versions may contain different (or renamed) standard library packages, and the changes between Python versions 2.x and 3.x include changes in the language syntax."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:43
#: dd1e29e068f6495388b9e6d910dd25c6
msgid "Performed manually, all the testing required to ensure that the package works correctly on all the target Python versions (and OSs!) could be very time-consuming. Fortunately, several tools are available for dealing with this, and these will briefly be discussed here."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:49
#: a0113eabf8224b9f875a1bfa4116fcdd
msgid "Automated testing and continuous integration"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:51
#: 455efde338fe4b568e9cfff169b769f2
msgid "Several hosted services for automated testing are available. These services will typically monitor your source code repository (e.g. at `Github <https://github.com>`_ or `Bitbucket <https://bitbucket.org>`_) and run your project's test suite every time a new commit is made."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:56
#: 00671c4da24046c6a6a58b6e749b4886
msgid "These services also offer facilities to run your project's test suite on *multiple versions of Python*, giving rapid feedback about whether the code will work, without the developer having to perform such tests themselves."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:60
#: 4ab80208d165475187835ed32840ab91
msgid "Wikipedia has an extensive `comparison <http://en.wikipedia.org/wiki/Comparison_of_continuous_integration_software>`_ of many continuous-integration systems. There are two hosted services which when used in conjunction provide automated testing across Linux, Mac and Windows:"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:66
#: de7946584e684ab89ba802742a4ae3e9
msgid "`Travis CI <https://travis-ci.org>`_ provides both a Linux and a macOS environment. The Linux environment is Ubuntu 12.04 LTS Server Edition 64 bit while the macOS is 10.9.2 at the time of writing."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:69
#: 2340db71ff254979a2e5c4da4f835416
msgid "`Appveyor <http://www.appveyor.com>`_ provides a Windows environment (Windows Server 2012)."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:80
#: dd2925183626415ebe4bbc4b2f12af9d
msgid "Both `Travis CI`_ and Appveyor_ require a `YAML <http://www.yaml.org>`_-formatted file as specification for the instructions for testing. If any tests fail, the output log for that specific configuration can be inspected."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:85
#: 2d82a149d5e34f94a2da4edbba898989
msgid "For Python projects that are intended to be deployed on both Python 2 and 3 with a single-source strategy, there are a number of options."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:89
#: a07145bf58894c1b920fd6c4d1e23862
msgid "Tools for single-source Python packages"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:91
#: d0bf729f093e4fb6a303e95c4ea43d9f
msgid "`six <http://pythonhosted.org/six/>`_ is a tool developed by Benjamin Peterson for wrapping over the differences between Python 2 and Python 3. The six_ package has enjoyed widespread use and may be regarded as a reliable way to write a single-source Python module that can be use in both Python 2 and 3. The six_ module can be used from as early as Python 2.5. A tool called `modernize <https://pypi.org/project/modernize>`_, developed by Armin Ronacher, can be used to automatically apply the code modifications provided by six_."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:100
#: 3dc082511b0e438792a9bb8d6305521c
msgid "Similar to six_, `python-future <http://python-future.org/overview.html>`_ is a package that provides a compatibility layer between Python 2 and Python 3 source code; however, unlike six_, this package aims to provide interoperability between Python 2 and Python 3 with a language syntax that matches one of the two Python versions: one may use"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:107
#: e863db78b4da4d82a9ce44bdb5498f11
msgid "a Python 2 (by syntax) module in a Python 3 project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:108
#: 30072e56a81d494aa5c3a5959dfda79e
msgid "a Python 3 (by syntax) module in a *Python 2* project."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:110
#: 6c051cc53ab0449f8e5777a0862cf53e
msgid "Because of the bi-directionality, python-future_ offers a pathway to converting a Python 2 package to Python 3 syntax module-by-module. However, in contrast to six_, python-future_ is supported only from Python 2.6. Similar to modernize_ for six_, python-future_ comes with two scripts called ``futurize`` and ``pasteurize`` that can be applied to either a Python 2 module or a Python 3 module respectively."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:117
#: 08ed57728fc44fe99053c2ca1f114b68
msgid "Use of six_ or python-future_ adds an additional runtime dependency to your package: with python-future_, the ``futurize`` script can be called with the ``--stage1`` option to apply only the changes that Python 2.6+ already provides for forward-compatibility to Python 3. Any remaining compatibility problems would require manual changes."
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:124
#: 27471e93141b47eb86a9471ae6ec69b6
msgid "What's in which Python?"
msgstr ""

#: ../source/guides/supporting-multiple-python-versions.rst:126
#: 0df3a80e31264f5195239a35096e2cbb
msgid "Ned Batchelder provides a list of changes in each Python release for `Python 2 <https://nedbatchelder.com/blog/201109/whats_in_which_python.html>`__, `Python 3.0-3.3 <https://nedbatchelder.com/blog/201310/whats_in_which_python_3.html>`__ and `Python 3.4-3.6 <https://nedbatchelder.com/blog/201803/whats_in_which_python_3436.html>`__. These lists may be used to check whether any changes between Python versions may affect your package."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:3
#: 81bc5d8129a348cf8c36552aba7a6b18
msgid "Supporting Windows using Appveyor"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:6
#: 231fcd6fcfc04309a9c07e35a238aa89
msgid "2015-12-03"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:8
#: 15bca72aee3b4fbbb0bfac3a8f186527
msgid "This section covers how to use the free `Appveyor`_ continuous integration service to provide Windows support for your project. This includes testing the code on Windows, and building Windows-targeted binaries for projects that use C extensions."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:20
#: 9e3ab50e32ac435f8562df4ea03e0b74
msgid "Many projects are developed on Unix by default, and providing Windows support can be a challenge, because setting up a suitable Windows test environment is non-trivial, and may require buying software licenses."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:24
#: ebcbe12097c24db38440bc78ae0f8ae6
msgid "The Appveyor service is a continuous integration service, much like the better-known `Travis`_ service that is commonly used for testing by projects hosted on `Github`_. However, unlike Travis, the build workers on Appveyor are Windows hosts and have the necessary compilers installed to build Python extensions."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:30
#: 536879fd01304d3e9e85fb75682f4c0c
msgid "Windows users typically do not have access to a C compiler, and therefore are reliant on projects that use C extensions distributing binary wheels on PyPI in order for the distribution to be installable via ``python -m pip install <dist>``. By using Appveyor as a build service (even if not using it for testing) it is possible for projects without a dedicated Windows environment to provide Windows-targeted binaries."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:38
#: c5b8ff502b6c4a6a88caa67bef906a62
msgid "Setting up"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:40
#: 29be0b553e3e4e5e99358f67e3ada66e
msgid "In order to use Appveyor to build Windows wheels for your project, you must have an account on the service. Instructions on setting up an account are given in `the Appveyor documentation <http://www.appveyor.com/docs>`__. The free tier of account is perfectly adequate for open source projects."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:45
#: 2138898ed36b4d088db136e7091fec9c
msgid "Appveyor provides integration with `Github`_ and `Bitbucket`_, so as long as your project is hosted on one of those two services, setting up Appveyor integration is straightforward."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:49
#: f1b6e5558af04471a399b33ff625ff37
msgid "Once you have set up your Appveyor account and added your project, Appveyor will automatically build your project each time a commit occurs. This behaviour will be familiar to users of Travis."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:54
#: 57356e700c4d4e1680121f2a68dc2ff0
msgid "Adding Appveyor support to your project"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:56
#: e39429918b7b4a0fa6190a7bf338db75
msgid "In order to define how Appveyor should build your project, you need to add an :file:`appveyor.yml` file to your project. The full details of what can be included in the file are covered in the Appveyor documentation. This guide will provide the details necessary to set up wheel builds."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:61
#: 1c011aded393414db1a22698f79b2523
msgid "Appveyor includes by default all of the compiler toolchains needed to build extensions for Python. For Python 2.7, 3.5+ and 32-bit versions of 3.3 and 3.4, the tools work out of the box. But for 64-bit versions of Python 3.3 and 3.4, there is a small amount of additional configuration needed to let distutils know where to find the 64-bit compilers. (From 3.5 onwards, the version of Visual Studio used includes 64-bit compilers with no additional setup)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:69
#: 16304352ca00459680991d8564402ee3
msgid "appveyor.yml"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:75
#: af8c3a46fe2a44fdada28b022d552023
msgid "This file can be downloaded from `here <https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/appveyor.yml>`__."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:77
#: 1d6d8f3b2d74487da12413234b2f3783
msgid "The :file:`appveyor.yml` file must be located in the root directory of your project. It is in ``YAML`` format, and consists of a number of sections."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:80
#: 265d6c3dfaaf45a996ca0a643cb89a6f
msgid "The ``environment`` section is the key to defining the Python versions for which your wheels will be created. Appveyor comes with Python 2.6, 2.7, 3.3, 3.4 and 3.5 installed, in both 32-bit and 64-bit builds. The example file builds for all of these environments except Python 2.6. Installing for Python 2.6 is more complex, as it does not come with pip included. We don't support 2.6 in this document (as Windows users still using Python 2 are generally able to move to Python 2.7 without too much difficulty)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:88
#: 1ee8acc52e2540f09971f179016d96c8
msgid "The ``install`` section uses pip to install any additional software that the project may require. The only requirement for building wheels is the ``wheel`` project, but projects may wish to customise this code in certain circumstances (for example, to install additional build packages such as ``Cython``, or test tools such as ``tox``)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:94
#: cf345fdef5f44cecbd598c4c1f2409f5
msgid "The ``build`` section simply switches off builds - there is no build step needed for Python, unlike languages like ``C#``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:97
#: 90437954d3bb4033a49769c4bc760c8c
msgid "The main sections that will need to be tailored to your project are ``test_script`` and ``after_test``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:100
#: 66ed2731a8484558bcd05a1a2841710d
msgid "The ``test_script`` section is where you will run your project's tests. The supplied file runs your test suite using ``setup.py test``. If you are only interested in building wheels, and not in running your tests on Windows, you can replace this section with a dummy command such as ``echo Skipped Tests``. You may wish to use another test tool, such as ``nose`` or :file:`py.test`.  Or you may wish to use a test driver like ``tox`` - however if you are using ``tox`` there are some additional configuration changes you will need to consider, which are described below."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:109
#: 141df832ef9448fe8552444e91d0e285
msgid "The ``after_test`` runs once your tests have completed, and so is where the wheels should be built. Assuming your project uses the recommended tools (specifically, ``setuptools``) then the ``setup.py bdist_wheel`` command will build your wheels."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:114
#: e280a09c891540b9b905ad91bcf42046
msgid "Note that wheels will only be built if your tests succeed. If you expect your tests to fail on Windows, you can skip them as described above."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:119
#: bdd014131c974b64a98d7ebb06aa171b
msgid "Support script"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:121
#: ff50666e969a4c8488557d27a51d8a72
msgid "The :file:`appveyor.yml` file relies on a single support script, which sets up the environment to use the SDK compiler for 64-bit builds on Python 3.3 and 3.4.  For projects which do not need a compiler, or which don't support 3.3 or 3.4 on 64-bit Windows, only the :file:`appveyor.yml` file is needed."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:126
#: 832b5468741145d780f335aeb4f6b004
msgid "`build.cmd <https://raw.githubusercontent.com/pypa/python-packaging-user-guide/master/source/guides/appveyor-sample/build.cmd>`__ is a Windows batch script that runs a single command in an environment with the appropriate compiler for the selected Python version. All you need to do is to set the single environment variable ``DISTUTILS_USE_SDK`` to a value of ``1`` and the script does the rest. It sets up the SDK needed for 64-bit builds of Python 3.3 or 3.4, so don't set the environment variable for any other builds."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:133
#: 1e4bb6b2da964101ba1b91c7abd8284f
msgid "You can simply download the batch file and include it in your project unchanged."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:137
#: 4e8f1f8cba1c4d908ca11a08989e3983
msgid "Access to the built wheels"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:139
#: ec41eb40b3f548b2b44c0ca2155a4b60
msgid "When your build completes, the built wheels will be available from the Appveyor control panel for your project. They can be found by going to the build status page for each build in turn. At the top of the build output there is a series of links, one of which is \"Artifacts\". That page will include a list of links to the wheels for that Python version / architecture. You can download those wheels and upload them to PyPI as part of your release process."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:147
#: 14fffaa94465442e9924d6fc02c63c85
msgid "Additional notes"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:150
#: 7ae553e32fe6460db2987ed05eb53658
msgid "Testing with tox"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:152
#: 86c6e90e6e654bbd8bdceae25e97dfe1
msgid "Many projects use the `Tox`_ tool to run their tests. It ensures that tests are run in an isolated environment using the exact files that will be distributed by the project."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:156
#: 3eb29aa35ab6462d96a508b067dd905d
msgid "In order to use ``tox`` on Appveyor there are a couple of additional considerations (in actual fact, these issues are not specific to Appveyor, and may well affect other CI systems)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:160
#: 705ed3c433ea43c0a866a51c0f6d8008
msgid "By default, ``tox`` only passes a chosen subset of environment variables to the test processes. Because ``distutils`` uses environment variables to control the compiler, this \"test isolation\" feature will cause the tests to use the wrong compiler by default."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:165
#: ea9b1886d9da4e73b327568fc5526de7
msgid "To force ``tox`` to pass the necessary environment variables to the subprocess, you need to set the ``tox`` configuration option ``passenv`` to list the additional environment variables to be passed to the subprocess. For the SDK compilers, you need"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:170
#: 584fbf5c1f43456395ab8a253f3a85d7
msgid "``DISTUTILS_USE_SDK``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:171
#: dd93227bbd96416f8cac040498b19d23
msgid "``MSSdk``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:172
#: 156a1008f3844ce2b621234a20b362a5
msgid "``INCLUDE``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:173
#: 3560de50861f4f818d651b3593712aec
msgid "``LIB``"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:175
#: 8a321dda572d40a893668f2c89053f1d
msgid "The ``passenv`` option can be set in your :file:`tox.ini`, or if you prefer to avoid adding Windows-specific settings to your general project files, it can be set by setting the ``TOX_TESTENV_PASSENV`` environment variable. The supplied :file:`build.cmd` script does this by default whenever ``DISTUTILS_USE_SDK`` is set."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:181
#: 8965c8f759b14c60a53e09551811f481
msgid "When used interactively, ``tox`` allows you to run your tests against multiple environments (often, this means multiple Python versions). This feature is not as useful in a CI environment like Travis or Appveyor, where all tests are run in isolated environments for each configuration. As a result, projects often supply an argument ``-e ENVNAME`` to ``tox`` to specify which environment to use (there are default environments for most versions of Python)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:188
#: ae037c16265b46ec900dbc0326664ba9
msgid "However, this does *not* work well with a Windows CI system like Appveyor, where there are (for example) two installations of Python 3.4 (32-bit and 64-bit) available, but only one ``py34`` environment in ``tox``."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:192
#: 1defadef078d47b7b0db6ed65b7691cc
msgid "In order to run tests using ``tox``, therefore, projects should probably use the default ``py`` environment in ``tox``, which uses the Python interpreter that was used to run ``tox``. This will ensure that when Appveyor runs the tests, they will be run with the configured interpreter."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:197
#: 25c1a8f62c3c4f8fb8c5d2b37a7a04c4
msgid "In order to support running under the ``py`` environment, it is possible that projects with complex ``tox`` configurations might need to modify their :file:`tox.ini` file. Doing so is, however, outside the scope of this document."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:203
#: 269b337993334ae097d7a028cc7d0d9c
msgid "Automatically uploading wheels"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:205
#: 29ce9f52405841db9e981904b5d4893a
msgid "It is possible to request Appveyor to automatically upload wheels. There is a ``deployment`` step available in :file:`appveyor.yml` that can be used to (for example) copy the built artifacts to a FTP site, or an Amazon S3 instance. Documentation on how to do this is included in the Appveyor guides."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:210
#: abe48b705ccd4b51a7b4742094d863c1
msgid "Alternatively, it would be possible to add a ``twine upload`` step to the build.  The supplied :file:`appveyor.yml` does not do this, as it is not clear that uploading new wheels after every commit is desirable (although some projects may wish to do this)."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:216
#: 9e3201afa832445bad34cca655320681
msgid "External dependencies"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:218
#: aa688c0da889470c831aa060ddb6a453
msgid "The supplied scripts will successfully build any distribution that does not rely on 3rd party external libraries for the build."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:221
#: 7f7ec768bde343e0a7d993c8d13b945a
msgid "It is possible to add steps to the :file:`appveyor.yml` configuration (typically in the \"install\" section) to download and/or build external libraries needed by the distribution. And if needed, it is possible to add extra configuration for the build to supply the location of these libraries to the compiler. However, this level of configuration is beyond the scope of this document."
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:230
#: 61c5ff39525a4447a13c182fe725a4cc
msgid "Support scripts"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:232
#: f244152f5aae4407925ee0276e03df3a
msgid "For reference, the SDK setup support script is listed here:"
msgstr ""

#: ../source/guides/supporting-windows-using-appveyor.rst:234
#: 056ad1d31d0349509fa483c2ecf7cd23
msgid "``appveyor-sample/build.cmd``"
msgstr ""

#: ../source/guides/tool-recommendations.rst:5
#: c96780ec405643919b61279ea2af621c
msgid "Tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:7
#: 6025851a1c614e17bc46f15ec70145e7
msgid "If you're familiar with Python packaging and installation, and just want to know what tools are currently recommended, then here it is."
msgstr ""

#: ../source/guides/tool-recommendations.rst:12
#: 8c8910747dc64b29a284224e231b81b1
msgid "Application dependency management"
msgstr ""

#: ../source/guides/tool-recommendations.rst:14
#: b76009010168409e89063c8918373c51
msgid "Use :ref:`pipenv` to manage library dependencies when developing Python applications. See :doc:`../tutorials/managing-dependencies` for more details on using ``pipenv``."
msgstr ""

#: ../source/guides/tool-recommendations.rst:18
#: e331f77d16f54434b8337394fa6ad86a
msgid "When ``pipenv`` does not meet your use case, consider other tools like:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:20
#: 8bf652be869f42249723d967eb0d7d5e
msgid ":ref:`pip`"
msgstr ""

#: ../source/guides/tool-recommendations.rst:22
#: 69cc5a66c8fb4f5786a903f832fbcca9
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:24
#: 054321833f21481c85da63f42fe38357
msgid "`Poetry <https://python-poetry.org/>`_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:27
#: 7107fd2897fd495c8dfb91d2551a1361
msgid "Installation tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:29
#: cf651bb2d8524e1b8bc19d7abd59166a
msgid "Use :ref:`pip` to install Python :term:`packages <Distribution Package>` from :term:`PyPI <Python Package Index (PyPI)>`. [1]_ [2]_ Depending on how :ref:`pip` is installed, you may need to also install :ref:`wheel` to get the benefit of wheel caching. [3]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:34
#: 1358a3726c474c549d7c8b40b8c929f2
msgid "Use :ref:`virtualenv`, or `venv`_ to isolate application specific dependencies from a shared Python installation. [4]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:37
#: 6ef77e23c7ae4bdc83b5158d667b8daa
msgid "If you're looking for management of fully integrated cross-platform software stacks, consider:"
msgstr ""

#: ../source/guides/tool-recommendations.rst:40
#: 123a6797a2674a4d9b37f18b46361143
msgid ":ref:`buildout`: primarily focused on the web development community"
msgstr ""

#: ../source/guides/tool-recommendations.rst:42
#: 59243176a8694811b9572decd303c57c
msgid ":ref:`spack`, :ref:`hashdist`, or :ref:`conda`: primarily focused on the scientific community."
msgstr ""

#: ../source/guides/tool-recommendations.rst:47
#: 9fdb586a329046ddadef692596852a39
msgid "Packaging tool recommendations"
msgstr ""

#: ../source/guides/tool-recommendations.rst:49
#: 2e758b928088479d9bc70eb3fc4050a8
msgid "Use :ref:`setuptools` to define projects and create :term:`Source Distributions <Source Distribution (or \"sdist\")>`. [5]_ [6]_"
msgstr ""

#: ../source/guides/tool-recommendations.rst:52
#: 6bb21e266a66400eb4a0c98a61582675
msgid "Use the ``bdist_wheel`` :ref:`setuptools` extension available from the :ref:`wheel project <wheel>` to create :term:`wheels <Wheel>`.  This is especially beneficial, if your project contains binary extensions."
msgstr ""

#: ../source/guides/tool-recommendations.rst:56
#: 9e91c81011fb4ea980aa0b6661d3921f
msgid "Use `twine <https://pypi.org/project/twine>`_ for uploading distributions to :term:`PyPI <Python Package Index (PyPI)>`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:61
#: 126b59356cc549579c81033f9c4da26d
msgid "Publishing platform migration"
msgstr ""

#: ../source/guides/tool-recommendations.rst:63
#: 7a0404d0fe8f4dd4b9930c47056e7761
msgid "The original Python Package Index implementation (previously hosted at `pypi.python.org <https://pypi.python.org>`_) has been phased out in favour of an updated implementation hosted at `pypi.org <https://pypi.org>`_."
msgstr ""

#: ../source/guides/tool-recommendations.rst:67
#: 17624bf6fe504eacb14a3a71139ae0ec
msgid "See :ref:`Migrating to PyPI.org` for more information on the status of the migration, and what settings to change in your clients."
msgstr ""

#: ../source/guides/tool-recommendations.rst:72
#: 86ea974a20904e6aaa424c7fcad251ba
msgid "There are some cases where you might choose to use ``easy_install`` (from :ref:`setuptools`), e.g. if you need to install from :term:`Eggs <Egg>` (which pip doesn't support).  For a detailed breakdown, see :ref:`pip vs easy_install`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:77
#: fdce97a4dbf04d7287ec4986acf487e7
msgid "The acceptance of :pep:`453` means that :ref:`pip` will be available by default in most installations of Python 3.4 or later.  See the :pep:`rationale section <453#rationale>` from :pep:`453` as for why pip was chosen."
msgstr ""

#: ../source/guides/tool-recommendations.rst:82
#: 5ccf5a1c049d416cbde9b82a9918a85e
msgid "`get-pip.py <https://github.com/pypa/get-pip/#readme>`_ and :ref:`virtualenv` install :ref:`wheel`, whereas :ref:`ensurepip` and :ref:`venv <venv>` do not currently.  Also, the common \"python-pip\" package that's found in various linux distros, does not depend on \"python-wheel\" currently."
msgstr ""

#: ../source/guides/tool-recommendations.rst:88
#: 8d09eeb59a0d4072b89a67bc01794ddf
msgid "Beginning with Python 3.4, ``venv`` will create virtualenv environments with ``pip`` installed, thereby making it an equal alternative to :ref:`virtualenv`. However, using :ref:`virtualenv` will still be recommended for users that need cross-version consistency."
msgstr ""

#: ../source/guides/tool-recommendations.rst:93
#: be67cc9f314d436798b17b856d5e8f6c
msgid "Although you can use pure ``distutils`` for many projects, it does not support defining dependencies on other projects and is missing several convenience utilities for automatically populating distribution metadata correctly that are provided by ``setuptools``. Being outside the standard library, ``setuptools`` also offers a more consistent feature set across different versions of Python, and (unlike ``distutils``), recent versions of ``setuptools`` support all of the modern metadata fields described in :ref:`core-metadata`."
msgstr ""

#: ../source/guides/tool-recommendations.rst:102
#: 54fd505431874757bcae94df4561a716
msgid "Even for projects that do choose to use ``distutils``, when :ref:`pip` installs such projects directly from source (rather than installing from a prebuilt :term:`wheel <Wheel>` file), it will actually build your project using :ref:`setuptools` instead."
msgstr ""

#: ../source/guides/tool-recommendations.rst:107
#: 4cc40c8ec6c34d89836566e708fd38c6
msgid "`distribute`_ (a fork of setuptools) was merged back into :ref:`setuptools` in June 2013, thereby making setuptools the default choice for packaging."
msgstr ""

#: ../source/guides/using-manifest-in.rst:5
#: 4b17de64e74440baa2e114af4cdcf673
msgid "Including files in source distributions with ``MANIFEST.in``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:7
#: f5b3c61df02c44a19e794a5926e9bd98
msgid "When building a :term:`source distribution <Source Distribution (or \"sdist\")>` for your package, by default only a minimal set of files are included.  You may find yourself wanting to include extra files in the source distribution, such as an authors/contributors file, a :file:`docs/` directory, or a directory of data files used for testing purposes.  There may even be extra files that you *need* to include; for example, if your :file:`setup.py` computes your project's ``long_description`` by reading from both a README and a changelog file, you'll need to include both those files in the sdist so that people that build or install from the sdist get the correct results."
msgstr ""

#: ../source/guides/using-manifest-in.rst:17
#: 905698d8747248488347da1bacf399c2
msgid "Adding & removing files to & from the source distribution is done by writing a :file:`MANIFEST.in` file at the project root."
msgstr ""

#: ../source/guides/using-manifest-in.rst:22
#: 820d428e05e9470c8d7463ae80c9c3dc
msgid "How files are included in an sdist"
msgstr ""

#: ../source/guides/using-manifest-in.rst:24
#: 72c7b57dea1e4c31b2b56a0e5e8e8dac
msgid "The following files are included in a source distribution by default:"
msgstr ""

#: ../source/guides/using-manifest-in.rst:26
#: 9cb7bd3749fe4330af49d5f9e202d77b
msgid "all Python source files implied by the ``py_modules`` and ``packages`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:28
#: 4a6914d6c3404b30b095e6cf501af401
msgid "all C source files mentioned in the ``ext_modules`` or ``libraries`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:30
#: 55f6a1c110e34cb6859ff8249609136f
msgid "scripts specified by the ``scripts`` ``setup()`` argument"
msgstr ""

#: ../source/guides/using-manifest-in.rst:31
#: 6e0d25ed47e1417c8477b8f25ac7f5fb
msgid "all files specified by the ``package_data`` and ``data_files`` ``setup()`` arguments"
msgstr ""

#: ../source/guides/using-manifest-in.rst:33
#: c8f0ee03b7324cf28d5532bd81a851e4
msgid "the file specified by the ``license_file`` option in :file:`setup.cfg` (setuptools 40.8.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:35
#: 68829fb63e1f43c8b7e9fda1baee2b9e
msgid "all files specified by the ``license_files`` option in :file:`setup.cfg` (setuptools 42.0.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:37
#: 2f1ab56085b44aa7922f3cbfcd7cac22
msgid "all files matching the pattern :file:`test/test*.py`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:38
#: ac61f02739634bc481cff1ee47dd8b31
msgid ":file:`setup.py` (or whatever you called your setup script)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:39
#: cdda9e4d783d414995ff93400c542688
msgid ":file:`setup.cfg`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:40
#: ba0dbd93cfba49408b599803342e064b
msgid ":file:`README`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:41
#: eebf2e4963e049a9a201108a2690af05
msgid ":file:`README.txt`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:42
#: bc414a8e0e35416e8aa153ec1763400a
msgid ":file:`README.rst` (Python 3.7+ or setuptools 0.6.27+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:43
#: 13716bb88035497793abb5b4c412c672
msgid ":file:`README.md` (setuptools 36.4.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:44
#: c12fd3e638ad42f18b30111b6ab330d5
msgid ":file:`pyproject.toml` (setuptools 43.0.0+)"
msgstr ""

#: ../source/guides/using-manifest-in.rst:45
#: 55cdd50318f04239a97a710716f831cd
msgid ":file:`MANIFEST.in`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:47
#: 726a4a2955f74413b1d34cc78d8fb853
msgid "After adding the above files to the sdist, the commands in :file:`MANIFEST.in` (if such a file exists) are executed in order to add and remove further files to & from the sdist.  Default files can even be removed from the sdist with the appropriate :file:`MANIFEST.in` command."
msgstr ""

#: ../source/guides/using-manifest-in.rst:52
#: a9a70ba31d544337b7994916819c2eb1
msgid "After processing the :file:`MANIFEST.in` file, setuptools removes the :file:`build/` directory as well as any directories named :file:`RCS`, :file:`CVS`, or :file:`.svn` from the sdist, and it adds a :file:`PKG-INFO` file and an :file:`*.egg-info` directory.  This behavior cannot be changed with :file:`MANIFEST.in`."
msgstr ""

#: ../source/guides/using-manifest-in.rst:60
#: bc05656e0eb347ed93e765b60af75d97
msgid ":file:`MANIFEST.in` commands"
msgstr ""

#: ../source/guides/using-manifest-in.rst:62
#: f787bc9ceee34b35bf082e342b930779
msgid "A :file:`MANIFEST.in` file consists of commands, one per line, instructing setuptools to add or remove some set of files from the sdist.  The commands are:"
msgstr ""

#: ../source/guides/using-manifest-in.rst:67
#: 8934d5b04bc244839cf4bd95ede0b605
msgid "Command"
msgstr ""

#: ../source/guides/using-manifest-in.rst:69
#: e174e29e696c4dba99669fc162bbb394
msgid ":samp:`include {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:69
#: 0e831090c02c4ed88f4d91a909bf627e
msgid "Add all files matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:70
#: ecc6876c0e6349e5a1fbb906e2301ea2
msgid ":samp:`exclude {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:70
#: 361034f63b974f2c8e537535ea3ca25e
msgid "Remove all files matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:71
#: 9c4d7192932f466ea6f650ff12f839c5
msgid ":samp:`recursive-include {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:71
#: c00dfb711e1340e8b2a7525a29cf7930
msgid "Add all files under directories matching ``dir-pattern`` that match any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:72
#: 81af55c7318a4311afe1c7b845c34aa8
msgid ":samp:`recursive-exclude {dir-pattern} {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:72
#: 0944fe1c39004859a65e977992258490
msgid "Remove all files under directories matching ``dir-pattern`` that match any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:73
#: 0195648c307b49f693c385fe95a1f7c6
msgid ":samp:`global-include {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:73
#: 57938a7be4b04b139ff474fa976ae30d
msgid "Add all files anywhere in the source tree matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:74
#: bd2fc877113d4a6fa77e57e8ad25e459
msgid ":samp:`global-exclude {pat1} {pat2} ...`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:74
#: a22fb2abf3f94a168f14879765f08b1b
msgid "Remove all files anywhere in the source tree matching any of the listed patterns"
msgstr ""

#: ../source/guides/using-manifest-in.rst:75
#: 1f0fd2952c904d29bf694c0295862a20
msgid ":samp:`graft {dir-pattern}`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:75
#: a306829a880242b1ad929d2e1103d215
msgid "Add all files under directories matching ``dir-pattern``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:76
#: 3627e1d3a2fd4758918ee84814c6cd5c
msgid ":samp:`prune {dir-pattern}`"
msgstr ""

#: ../source/guides/using-manifest-in.rst:76
#: f626cb80641c4a3ea27255eb1247f1cc
msgid "Remove all files under directories matching ``dir-pattern``"
msgstr ""

#: ../source/guides/using-manifest-in.rst:79
#: 430095a4085c43a5b8d8609c6b4a72e5
msgid "The patterns here are glob-style patterns: ``*`` matches zero or more regular filename characters (on Unix, everything except forward slash; on Windows, everything except backslash and colon); ``?`` matches a single regular filename character, and ``[chars]`` matches any one of the characters between the square brackets (which may contain character ranges, e.g., ``[a-z]`` or ``[a-fA-F0-9]``).  Setuptools also has undocumented support for ``**`` matching zero or more characters including forward slash, backslash, and colon."
msgstr ""

#: ../source/guides/using-manifest-in.rst:87
#: 6549031bea8744b38b3d8b0a34e3489a
msgid "Directory patterns are relative to the root of the project directory; e.g., ``graft example*`` will include a directory named :file:`examples` in the project root but will not include :file:`docs/examples/`."
msgstr ""

#: ../source/guides/using-manifest-in.rst:91
#: 8d24b33719cd452994e8570ff8dc6b84
msgid "File & directory names in :file:`MANIFEST.in` should be ``/``-separated; setuptools will automatically convert the slashes to the local platform's appropriate directory separator."
msgstr ""

#: ../source/guides/using-manifest-in.rst:95
#: 19e137523fc840e29c57262fdfccf4d3
msgid "Commands are processed in the order they appear in the :file:`MANIFEST.in` file.  For example, given the commands::"
msgstr ""

#: ../source/guides/using-manifest-in.rst:101
#: 5673b7ff30744b40bb41d21e99242b04
msgid "the contents of the directory tree :file:`tests` will first be added to the sdist, and then after that all files in the sdist with a ``.pyc``, ``.pyo``, or ``.pyd`` extension will be removed from the sdist.  If the commands were in the opposite order, then ``*.pyc`` files etc. would be only be removed from what was already in the sdist before adding :file:`tests`, and if :file:`tests` happened to contain any ``*.pyc`` files, they would end up included in the sdist because the exclusion happened before they were included."
msgstr ""

#: ../source/guides/using-testpypi.rst:7
#: 2481be043f394b69922224baf305300e
msgid "``TestPyPI`` is a separate instance of the :term:`Python Package Index (PyPI)` that allows you to try out the distribution tools and process without worrying about affecting the real index. TestPyPI is hosted at `test.pypi.org <https://test.pypi.org>`_"
msgstr ""

#: ../source/guides/using-testpypi.rst:13
#: 6c7c4a7e3d4f41218881c485506f2028
msgid "Registering your account"
msgstr ""

#: ../source/guides/using-testpypi.rst:15
#: 8f0030e022bd4534816d62e0e3bbfe4d
msgid "Because TestPyPI has a separate database from the live PyPI, you'll need a separate user account for specifically for TestPyPI. Go to https://test.pypi.org/account/register/ to register your account."
msgstr ""

#: ../source/guides/using-testpypi.rst:19
#: a3c1e7a1226a4656b9d6be4d41c557f0
msgid "The database for TestPyPI may be periodically pruned, so it is not unusual for user accounts to be deleted."
msgstr ""

#: ../source/guides/using-testpypi.rst:24
#: 0ced9c3a7b3a42ebacbfd3b2708bbbad
msgid "Using TestPyPI with Twine"
msgstr ""

#: ../source/guides/using-testpypi.rst:26
#: aa0fa129bfe14dfabdde9580c1867b15
msgid "You can upload your distributions to TestPyPI using :ref:`twine` by specifying the ``--repository`` flag"
msgstr ""

#: ../source/guides/using-testpypi.rst:33
#: c9b9531de23c4ead82a14c051844b148
msgid "You can see if your package has successfully uploaded by navigating to the URL ``https://test.pypi.org/project/<sampleproject>`` where ``sampleproject`` is the name of your project that you uploaded. It may take a minute or two for your project to appear on the site."
msgstr ""

#: ../source/guides/using-testpypi.rst:39
#: 2e12caf1608a4f7fb4dddf7a7b84e702
msgid "Using TestPyPI with pip"
msgstr ""

#: ../source/guides/using-testpypi.rst:41
#: 739d6bc0cb344bef9ed608c9aba7be42
msgid "You can tell pip to download packages from TestPyPI instead of PyPI by specifying the ``--index-url`` flag"
msgstr ""

#: ../source/guides/using-testpypi.rst:56
#: 319c1c441895488b83b2ebe09a44b483
msgid "If you want to allow pip to also pull other packages from PyPI you can specify ``--extra-index-url`` to point to PyPI. This is useful when the package you're testing has dependencies:"
msgstr ""

#: ../source/guides/using-testpypi.rst:73
#: 7d66202723e34623921fee2c0ab87b78
msgid "Setting up TestPyPI in :file:`.pypirc`"
msgstr ""

#: ../source/guides/using-testpypi.rst:75
#: 991c3f1cdd2b498c963e06904b9dfa46
msgid "If you want to avoid entering your username, you can configure TestPyPI in your :file:`$HOME/.pypirc`:"
msgstr ""

#: ../source/index.rst:3
#: ../source/key_projects.rst:170
#: f3d7311e15204ce49886e0d77e14ff13
#: dfa7f2958b2042aeab28a6100a1cb678
msgid "Python Packaging User Guide"
msgstr ""

#: ../source/index.rst:5
#: f5939950c5ff4bbeb517e74178c0c5ee
msgid "The Python Packaging User Guide (PyPUG) is a collection of tutorials and guides for packaging Python software."
msgstr ""

#: ../source/index.rst:5
#: 3615481b88d64a73a8c63a2f80e06e9f
msgid "python, packaging, guide, tutorial"
msgstr ""

#: ../source/index.rst:24
#: aef19e5f9e3d4ce69cb47e079191e51a
msgid "Welcome to the *Python Packaging User Guide*, a collection of tutorials and references to help you distribute and install Python packages with modern tools."
msgstr ""

#: ../source/index.rst:28
#: cd407ec8064c4a7ea101fa8ecf426b39
msgid "This guide is maintained on `GitHub`_ by the `Python Packaging Authority`_. We happily accept any :doc:`contributions and feedback <contribute>`. 😊"
msgstr ""

#: ../source/index.rst:36
#: fece0061f9cd4a5fb07ffc9b52987d71
msgid "Get started"
msgstr ""

#: ../source/index.rst:38
#: d66af7df86b44f8892a374683c8724c4
msgid "Essential tools and concepts for working within the Python development ecosystem are covered in our :doc:`tutorials/index` section:"
msgstr ""

#: ../source/index.rst:41
#: cf07fa9bc89044fabc927452dd9d23c5
msgid "To learn how to install packages, see the :doc:`tutorial on installing packages <tutorials/installing-packages>`"
msgstr ""

#: ../source/index.rst:43
#: 13f2025ad01e4d00a65d53d5c5dc48cf
msgid "To learn how to manage dependencies in a version controlled project, see the :doc:`tutorial on managing application dependencies <tutorials/managing-dependencies>`"
msgstr ""

#: ../source/index.rst:45
#: a42d205ced114887878b6ddfea5d6e64
msgid "To learn how to package and distribute your projects, see the :doc:`tutorial on packaging and distributing <tutorials/packaging-projects>`"
msgstr ""

#: ../source/index.rst:47
#: aae9903478c14868858ec6bb47d027ad
msgid "To get an overview of packaging options for Python libraries and applications, see the :doc:`Overview of Python Packaging <overview>`"
msgstr ""

#: ../source/index.rst:52
#: 39a3f9e0dc50482d8591dd99c4ce9231
msgid "Learn more"
msgstr ""

#: ../source/index.rst:54
#: 52174c88d9384bfeaf3043dd9480d572
msgid "Beyond our :doc:`tutorials/index`, this guide has several other resources:"
msgstr ""

#: ../source/index.rst:56
#: bb6f2435a6fc4392a5937e3335394d1c
msgid "The :doc:`guides/index` section for walk throughs, such as :doc:`guides/installing-using-linux-tools` or :doc:`guides/packaging-binary-extensions`."
msgstr ""

#: ../source/index.rst:58
#: a33db0c01e774434a0f186886436986c
msgid "The :doc:`discussions/index` section for in-depth references on topics such as :doc:`discussions/deploying-python-applications` or :doc:`discussions/pip-vs-easy-install`."
msgstr ""

#: ../source/index.rst:60
#: 0d23fb9b3b7543ba93052c639eb86813
msgid "The :doc:`specifications/index` section for packaging interoperability specifications."
msgstr ""

#: ../source/index.rst:62
#: 687d4715849746638a4c0586c3b1cee6
msgid "Additionally, there is a list of :doc:`other projects <key_projects>` maintained by members of the Python Packaging Authority."
msgstr ""

#: ../source/key_projects.rst:6
#: e54c7036b17048d981e00b9cd23ec605
msgid "Project Summaries"
msgstr ""

#: ../source/key_projects.rst:8
#: ae5d774e45f94f20a444c5d692f3375f
msgid "Summaries and links for the most relevant projects in the space of Python installation and packaging."
msgstr ""

#: ../source/key_projects.rst:14
#: 7d6b1b0698e14e2aae715f55c327b74e
msgid "PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:19
#: 20c36b3bbd9b4ddbbc173a6d0796c1a9
msgid "bandersnatch"
msgstr ""

#: ../source/key_projects.rst:21
#: fec71d236e0a46c6a1cff3440ba892c2
msgid "`Issues <https://github.com/pypa/bandersnatch/issues>`__ | `GitHub <https://github.com/pypa/bandersnatch>`__ | `PyPI <https://pypi.org/project/bandersnatch>`__"
msgstr ""

#: ../source/key_projects.rst:25
#: ff5c0d519541442dac13d795f6762b43
msgid "``bandersnatch`` is a PyPI mirroring client designed to efficiently create a complete mirror of the contents of PyPI. Organizations thus save bandwidth and latency on package downloads (especially in the context of automated tests) and to prevent heavily loading PyPI's Content Delivery Network (CDN)."
msgstr ""

#: ../source/key_projects.rst:35
#: 5fb7600a49af479ea0779ff0decc5515
msgid "build"
msgstr ""

#: ../source/key_projects.rst:37
#: 764abc964d354dc6952d73f9b6f807c2
msgid "`Docs <https://pypa-build.readthedocs.io/>`__ | `Issues <https://github.com/pypa/build/issues>`__ | `GitHub <https://github.com/pypa/build>`__ | `PyPI <https://pypi.org/project/build>`__"
msgstr ""

#: ../source/key_projects.rst:42
#: b01137f142b94730b33cb0bffaa590fe
msgid "``build`` is a :pep:`517` compatible Python package builder. It provides a CLI to build packages, as well as a Python API."
msgstr ""

#: ../source/key_projects.rst:49
#: 9e38df89c72943b7a5bfea3c97425989
msgid "cibuildwheel"
msgstr ""

#: ../source/key_projects.rst:51
#: 7eff3bf365c14bc7864bed8a4dcf4b11
msgid "`Docs <https://cibuildwheel.readthedocs.io/>`__ | `Issues <https://github.com/pypa/cibuildwheel/issues>`__ | `GitHub <https://github.com/pypa/cibuildwheel>`__ | `PyPI <https://pypi.org/project/cibuildwheel>`__ | `Discussions <https://github.com/pypa/cibuildwheel/discussions>`__ | `Discord #cibuildwheel <https://discord.com/invite/pypa>`__"
msgstr ""

#: ../source/key_projects.rst:58
#: 2c23aeca449e4e12b9a7dd5e0a7db6db
msgid "``cibuildwheel`` is a package that builds wheels for all common platforms and Python versions on most CI systems."
msgstr ""

#: ../source/key_projects.rst:65
#: 8f935e10de904d76922159cb4b87beb6
msgid "distlib"
msgstr ""

#: ../source/key_projects.rst:67
#: 839cf433b4934cf684f8c43e68c912d1
msgid "`Docs <http://pythonhosted.org/distlib/>`__ | `Issues <https://bitbucket.org/pypa/distlib/issues?status=new&status=open>`__ | `Bitbucket <https://bitbucket.org/pypa/distlib>`__ | `PyPI <https://pypi.org/project/distlib>`__"
msgstr ""

#: ../source/key_projects.rst:72
#: 518c56d9c0a8494e89595b3ebd368aff
msgid "``distlib`` is a library which implements low-level functions that relate to packaging and distribution of Python software.  ``distlib`` implements several relevant PEPs (Python Enhancement Proposal standards) and is useful for developers of third-party packaging tools to make and upload binary and source :term:`distributions <Distribution Package>`, achieve interoperability, resolve dependencies, manage package resources, and do other similar functions."
msgstr ""

#: ../source/key_projects.rst:81
#: 85ad5ee0e9c54f178a15eefaa05be0fe
msgid "Unlike the stricter :ref:`packaging` project (below), which specifically implements modern Python packaging interoperability standards, ``distlib`` also attempts to provide reasonable fallback behaviours when asked to handle legacy packages and metadata that predate the modern interoperability standards and fall into the subset of packages that are incompatible with those standards."
msgstr ""

#: ../source/key_projects.rst:91
#: 9d2a55bdb4a14516b97aaeb649a0faf0
msgid "packaging"
msgstr ""

#: ../source/key_projects.rst:93
#: 4f1a26c2a89349679c8d20b888edacf4
msgid "`Docs <https://packaging.pypa.io>`__ | `Issues <https://github.com/pypa/packaging/issues>`__ | `GitHub <https://github.com/pypa/packaging>`__ | `PyPI <https://pypi.org/project/packaging>`__"
msgstr ""

#: ../source/key_projects.rst:98
#: a90368fa8a1b49b891d8a0a2275830a8
msgid "Core utilities for Python packaging used by :ref:`pip` and :ref:`setuptools`."
msgstr ""

#: ../source/key_projects.rst:100
#: a216099eaf1848a08b6460435d8a5b56
msgid "The core utilities in the packaging library handle version handling, specifiers, markers, requirements, tags, and similar attributes and tasks for Python packages. Most Python users rely on this library without needing to explicitly call it; developers of the other Python packaging, distribution, and installation tools listed here often use its functionality to parse, discover, and otherwise handle dependency attributes."
msgstr ""

#: ../source/key_projects.rst:108
#: b404590049d04696a6034da1caaee571
msgid "This project specifically focuses on implementing the modern Python packaging interoperability standards defined at :ref:`packaging-specifications`, and will report errors for sufficiently old legacy packages that are incompatible with those standards. In contrast, the :ref:`distlib` project is a more permissive library that attempts to provide a plausible reading of ambiguous metadata in cases where :ref:`packaging` will instead report on error."
msgstr ""

#: ../source/key_projects.rst:120
#: ../source/specifications/platform-compatibility-tags.rst:85
#: ad0b346135b04ed886b379f529e9622a
#: 4400722d882243c8bb294000f75840ad
msgid "pip"
msgstr ""

#: ../source/key_projects.rst:122
#: 0481ee83fc5f41efb0cddc34caffdff8
msgid "`Docs <https://pip.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/pip/issues>`__ | `GitHub <https://github.com/pypa/pip>`__ | `PyPI <https://pypi.org/project/pip/>`__"
msgstr ""

#: ../source/key_projects.rst:127
#: 88c194e7e10640c2b19ace3c607cd0be
msgid "The most popular tool for installing Python packages, and the one included with modern versions of Python."
msgstr ""

#: ../source/key_projects.rst:130
#: 39637bcec2fe4c3aa7eb42c2f6147ba3
msgid "It provides the essential core features for finding, downloading, and installing packages from PyPI and other Python package indexes, and can be incorporated into a wide range of development workflows via its command-line interface (CLI)."
msgstr ""

#: ../source/key_projects.rst:138
#: a40d65c8d23c47839555a1b81032b660
msgid "Pipenv"
msgstr ""

#: ../source/key_projects.rst:140
#: d9b644522530483a94ff1f397a946313
msgid "`Docs <https://pipenv.pypa.io/>`__ | `Source <https://github.com/pypa/pipenv>`__ | `Issues <https://github.com/pypa/pipenv/issues>`__ | `PyPI <https://pypi.org/project/pipenv>`__"
msgstr ""

#: ../source/key_projects.rst:145
#: 9976b9e3afb946b08f9f5df15814a736
msgid "Pipenv is a project that aims to bring the best of all packaging worlds to the Python world. It harnesses :ref:`Pipfile`, :ref:`pip`, and :ref:`virtualenv` into one single toolchain. It features very pretty terminal colors."
msgstr ""

#: ../source/key_projects.rst:149
#: dd217d902a5f47ed8b9fce176b7dd4b6
msgid "Pipenv aims to help users manage environments, dependencies, and imported packages on the command line. It also works well on Windows (which other tools often underserve), makes and checkes file hashes, to ensure compliance with hash-locked dependency specifiers, and eases uninstallation of packages and dependencies. It is used by Python users and system administrators, but has been less maintained since late 2018."
msgstr ""

#: ../source/key_projects.rst:160
#: 717a5ee4a3e94290ab5c86425468fd0a
msgid "Pipfile"
msgstr ""

#: ../source/key_projects.rst:162
#: a1eea6cf38cb4ee0b4ac0358ae8919b0
msgid "`Source <https://github.com/pypa/pipfile>`__"
msgstr ""

#: ../source/key_projects.rst:164
#: 7d60eebd818044daa52b4273f6d7bc8d
msgid ":file:`Pipfile` and its sister :file:`Pipfile.lock` are a higher-level application-centric alternative to :ref:`pip`'s lower-level :file:`requirements.txt` file."
msgstr ""

#: ../source/key_projects.rst:172
#: c2d4e65f4e1941c2aaf29261463389ac
msgid "`Docs <https://packaging.python.org/en/latest/>`__ | `Issues <https://github.com/pypa/python-packaging-user-guide/issues>`__ | `GitHub <https://github.com/pypa/python-packaging-user-guide>`__"
msgstr ""

#: ../source/key_projects.rst:176
#: ac55e545308842d89a2d5dda2b2007ad
msgid "This guide!"
msgstr ""

#: ../source/key_projects.rst:181
#: 36957e76bd7b48daa06726e9487477e1
msgid "readme_renderer"
msgstr ""

#: ../source/key_projects.rst:183
#: 5c0218d1ff4243efa57395d85f4d3ddb
msgid "`GitHub and docs <https://github.com/pypa/readme_renderer/>`__ | `PyPI <https://pypi.org/project/readme_renderer/>`__"
msgstr ""

#: ../source/key_projects.rst:186
#: bbf69ab186ed4426aae7c2186032ca65
msgid "``readme_renderer`` is a library that package developers use to render their user documentation (README) files into HTML from markup languages such as Markdown or reStructuredText. Developers call it on its own or via :ref:`twine`, as part of their release management process, to check that their package descriptions will properly display on PyPI."
msgstr ""

#: ../source/key_projects.rst:197
#: b5d260e2dff64ace98536090099492c4
msgid "setuptools"
msgstr ""

#: ../source/key_projects.rst:199
#: e9abec5be10c44c1bb5328f199d4f0f3
msgid "`Docs <https://setuptools.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/setuptools/issues>`__ | `GitHub <https://github.com/pypa/setuptools>`__ | `PyPI <https://pypi.org/project/setuptools>`__"
msgstr ""

#: ../source/key_projects.rst:204
#: fda89cb400d04dd180abe5b64dcf656b
msgid "setuptools (which includes ``easy_install``) is a collection of enhancements to the Python distutils that allow you to more easily build and distribute Python :term:`distributions <Distribution Package>`, especially ones that have dependencies on other packages."
msgstr ""

#: ../source/key_projects.rst:209
#: f7913f230bc14f1a994679614336c76a
msgid "`distribute`_ was a fork of setuptools that was merged back into setuptools (in v0.7), thereby making setuptools the primary choice for Python packaging."
msgstr ""

#: ../source/key_projects.rst:216
#: 4d5cb2c33d81479296064a3052e780f5
msgid "trove-classifiers"
msgstr ""

#: ../source/key_projects.rst:218
#: 2284aa17565e471fa51af2468dbc1d74
msgid "`Issues <https://github.com/pypa/trove-classifiers/issues>`__ | `GitHub <https://github.com/pypa/trove-classifiers>`__ | `PyPI <https://pypi.org/project/trove-classifiers/>`__"
msgstr ""

#: ../source/key_projects.rst:222
#: a61e144149854fb4886d566dd6a38c7c
msgid "trove-classifiers is the canonical source for `classifiers on PyPI <https://pypi.org/classifiers/>`_, which project maintainers use to `systematically describe their projects <https://packaging.python.org/specifications/core-metadata/#classifier-multiple-use>`_ so that users can better find projects that match their needs on the PyPI."
msgstr ""

#: ../source/key_projects.rst:228
#: 282316ca8505470c84fd1e898e155544
msgid "The trove-classifiers package contains a list of valid classifiers and deprecated classifiers (which are paired with the classifiers that replace them).  Use this package to validate classifiers used in packages intended for uploading to PyPI. As this list of classifiers is published as code, you can install and import it, giving you a more convenient workflow compared to referring to the `list published on PyPI <https://pypi.org/classifiers/>`_. The `issue tracker <https://github.com/pypa/trove-classifiers/issues>`_ for the project hosts discussions on proposed classifiers and requests for new classifiers."
msgstr ""

#: ../source/key_projects.rst:242
#: de6a641f98ed4892a424408f489e80a2
msgid "twine"
msgstr ""

#: ../source/key_projects.rst:244
#: 9e32f81109354cd089b1976bfa34ab7a
msgid "`Docs <https://twine.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/twine/issues>`__ | `GitHub <https://github.com/pypa/twine>`__ | `PyPI <https://pypi.org/project/twine>`__"
msgstr ""

#: ../source/key_projects.rst:249
#: 31298cc8e0754c40b957397a1da5fb81
msgid "Twine is the primary tool developers use to upload packages to the Python Package Index or other Python package indexes. It is a command-line program that passes program files and metadata to a web API. Developers use it because it's the official PyPI upload tool, it's fast and secure, it's maintained, and it reliably works."
msgstr ""

#: ../source/key_projects.rst:259
#: ../source/overview.rst:415
#: b3229df1dff14ecc9e0af774f6e1812b
#: 0f3ff1a0289c473297d8706e4c8e46ac
msgid "virtualenv"
msgstr ""

#: ../source/key_projects.rst:261
#: 21b792755d0e46dc9fced7de3f5b22c4
msgid "`Docs <https://virtualenv.pypa.io/en/stable/>`__ | `Issues <https://github.com/pypa/virtualenv/issues>`__ | `GitHub <https://github.com/pypa/virtualenv>`__ | `PyPI <https://pypi.org/project/virtualenv/>`__"
msgstr ""

#: ../source/key_projects.rst:266
#: 998ddf5999c44db9aac4a0605e249abb
msgid "virtualenv is a tool which uses the command-line path environment variable to create isolated Python :term:`Virtual Environments <Virtual Environment>`, much as :ref:`venv` does. virtualenv provides additional functionality, compared to :ref:`venv`, by supporting Python 2.7 and by providing convenient features for configuring, maintaining, duplicating, and troubleshooting the virtual environments. For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/key_projects.rst:279
#: 2c1d01242a2d468289de7cdaaf23d130
msgid "Warehouse"
msgstr ""

#: ../source/key_projects.rst:281
#: 081a41a577094fb2bc7af2640d2b5dc6
msgid "`Docs <https://warehouse.pypa.io/>`__ | `Issues <https://github.com/pypa/warehouse/issues>`__ | `GitHub <https://github.com/pypa/warehouse>`__"
msgstr ""

#: ../source/key_projects.rst:285
#: a9e61b1de46541ac86555eefeff72003
msgid "The current codebase powering the :term:`Python Package Index (PyPI)`. It is hosted at `pypi.org <https://pypi.org/>`_. The default source for :ref:`pip` downloads."
msgstr ""

#: ../source/key_projects.rst:293
#: d49f25de4a6e4073a6a53a5fd34eff99
msgid "wheel"
msgstr ""

#: ../source/key_projects.rst:295
#: 8163658adaa0433a865e70eb3b39f7e9
msgid "`Docs <https://wheel.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/pypa/wheel/issues>`__ | `GitHub <https://github.com/pypa/wheel>`__ | `PyPI <https://pypi.org/project/wheel>`__"
msgstr ""

#: ../source/key_projects.rst:300
#: 1f6492e27c4f4704be2380911082e231
msgid "Primarily, the wheel project offers the ``bdist_wheel`` :ref:`setuptools` extension for creating :term:`wheel distributions <Wheel>`.  Additionally, it offers its own command line utility for creating and installing wheels."
msgstr ""

#: ../source/key_projects.rst:304
#: ece1a197bd0f4a3097df9b8c97d0a6f4
msgid "See also `auditwheel <https://github.com/pypa/auditwheel>`__, a tool that package developers use to check and fix Python packages they are making in the binary wheel format. It provides functionality to discover dependencies, check metadata for compliance, and repair the wheel and metadata to properly link and include external shared libraries in a package."
msgstr ""

#: ../source/key_projects.rst:313
#: 2db757279e5742ae8eafed22b369cea1
msgid "Non-PyPA Projects"
msgstr ""

#: ../source/key_projects.rst:318
#: c9b55ad6c2284900b06b0214ffce956f
msgid "bento"
msgstr ""

#: ../source/key_projects.rst:320
#: 4d6c2ff9a55f473e86dab12c1a7758ae
msgid "`Docs <http://cournape.github.io/Bento/>`__ | `Issues <https://github.com/cournape/Bento/issues>`__ | `GitHub <https://github.com/cournape/Bento>`__ | `PyPI <https://pypi.org/project/bento>`__"
msgstr ""

#: ../source/key_projects.rst:325
#: 2a54416a31e9499aba9bb52dd5c5944f
msgid "Bento is a packaging tool solution for Python software, targeted as an alternative to :ref:`distutils`, :ref:`setuptools`, etc....  Bento's philosophy is reproducibility, extensibility and simplicity (in that order)."
msgstr ""

#: ../source/key_projects.rst:333
#: 7f4fbf9b5c914a948a262df74aebc0cc
msgid "buildout"
msgstr ""

#: ../source/key_projects.rst:335
#: 699897f1313f42fc8b3d285e794cbfec
msgid "`Docs <http://www.buildout.org/en/latest/>`__ | `Issues <https://bugs.launchpad.net/zc.buildout>`__ | `PyPI <https://pypi.org/project/zc.buildout>`__ | `GitHub <https://github.com/buildout/buildout/>`__"
msgstr ""

#: ../source/key_projects.rst:340
#: 83667288752f4bfda689b622e6d0d5bd
msgid "Buildout is a Python-based build system for creating, assembling and deploying applications from multiple parts, some of which may be non-Python-based.  It lets you create a buildout configuration and reproduce the same software later."
msgstr ""

#: ../source/key_projects.rst:347
#: 61c5ea504db84f97ac84aeadb37c932e
msgid "conda"
msgstr ""

#: ../source/key_projects.rst:349
#: bf911498487c4b6c8eaebc2f175d11fc
msgid "`Docs <http://conda.pydata.org/docs/>`__"
msgstr ""

#: ../source/key_projects.rst:351
#: 6c14a3b1698047b680d2c0fdb98a2ed6
msgid "conda is the package management tool for `Anaconda <https://docs.anaconda.com/anaconda/>`__ Python installations. Anaconda Python is a distribution from `Anaconda, Inc <https://www.anaconda.com/download>`__ specifically aimed at the scientific community, and in particular on Windows where the installation of binary extensions is often difficult."
msgstr ""

#: ../source/key_projects.rst:358
#: 1e2e883f6c0d4a82be4b81ef577bda80
msgid "Conda is a completely separate tool from :ref:`pip`, virtualenv and wheel, but provides many of their combined features in terms of package management, virtual environment management and deployment of binary extensions."
msgstr ""

#: ../source/key_projects.rst:362
#: a6a0d627b471410dac13d8406a3b3cd2
msgid "Conda does not install packages from PyPI and can install only from the official Anaconda repositories, or anaconda.org (a place for user-contributed *conda* packages), or a local (e.g. intranet) package server.  However, note that :ref:`pip` can be installed into, and work side-by-side with conda for managing :term:`distributions <Distribution Package>` from PyPI. Also, `conda skeleton <https://docs.conda.io/projects/conda-build/en/latest/user-guide/tutorials/build-pkgs-skeleton.html>`__ is a tool to make Python packages installable by conda by first fetching them from PyPI and modifying their metadata."
msgstr ""

#: ../source/key_projects.rst:375
#: d9f08edb0ef2407b89ff2dc15bd1d63d
msgid "devpi"
msgstr ""

#: ../source/key_projects.rst:377
#: bea1adda38c1416c8f73825d96766dfb
msgid "`Docs <http://doc.devpi.net/latest/>`__ | `Issues <https://bitbucket.org/hpk42/devpi/issues>`__ | `PyPI <https://pypi.org/project/devpi>`__"
msgstr ""

#: ../source/key_projects.rst:381
#: fc1639efd2b34158a05dcbf8620d0fb0
msgid "devpi features a powerful PyPI-compatible server and PyPI proxy cache with a complementary command line tool to drive packaging, testing and release activities with Python. devpi also provides a browsable and searchable web interface."
msgstr ""

#: ../source/key_projects.rst:390
#: fcb7d3ddc1374448a70ce04e993f3c03
msgid "flit"
msgstr ""

#: ../source/key_projects.rst:392
#: adfe8a996518414caff701ec803f06d3
msgid "`Docs <https://flit.readthedocs.io/en/latest/>`__ | `Issues <https://github.com/takluyver/flit/issues>`__ | `PyPI <https://pypi.org/project/flit>`__"
msgstr ""

#: ../source/key_projects.rst:396
#: f893f659e62c43efa515c6a5db2d97ab
msgid "Flit provides a simple way to upload pure Python packages and modules to PyPI. It focuses on `making the easy things easy <flit-rationale_>`_ for packaging. Flit can generate a configuration file to quickly set up a simple project, build source distributions and wheels, and upload them to PyPI."
msgstr ""

#: ../source/key_projects.rst:401
#: 024b5fa43449403784cdcfe1a2adbb59
msgid "Flit uses ``pyproject.toml`` to configure a project. Flit does not rely on tools such as :ref:`setuptools` to build distributions, or :ref:`twine` to upload them to PyPI. Flit requires Python 3, but you can use it to distribute modules for Python 2, so long as they can be imported on Python 3."
msgstr ""

#: ../source/key_projects.rst:411
#: fe07f4d8c3b04bc3a2d0f921256dc978
msgid "enscons"
msgstr ""

#: ../source/key_projects.rst:413
#: a68cc600ccf94167b5e5a613d8a6c05a
msgid "`Source <https://bitbucket.org/dholth/enscons/src>`__ | `Issues <https://bitbucket.org/dholth/enscons/issues>`__ | `PyPI <https://pypi.org/project/enscons>`__"
msgstr ""

#: ../source/key_projects.rst:417
#: a844049dbdb745f1a75c2c5650adc7be
msgid "Enscons is a Python packaging tool based on `SCons`_. It builds :ref:`pip`-compatible source distributions and wheels without using distutils or setuptools, including distributions with C extensions. Enscons has a different architecture and philosophy than :ref:`distutils`. Rather than adding build features to a Python packaging system, enscons adds Python packaging to a general purpose build system. Enscons helps you to build sdists that can be automatically built by :ref:`pip`, and wheels that are independent of enscons."
msgstr ""

#: ../source/key_projects.rst:432
#: 1fb7bbc87f804336941dc1468aeed8d6
msgid "Hashdist"
msgstr ""

#: ../source/key_projects.rst:434
#: 9c3249be28ca45cd9143313943aad3c5
msgid "`Docs <https://hashdist.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/hashdist/hashdist/>`__"
msgstr ""

#: ../source/key_projects.rst:437
#: 913f4f3153204253aa11592662296ea2
msgid "Hashdist is a library for building non-root software distributions. Hashdist is trying to be “the Debian of choice for cases where Debian technology doesn’t work”. The best way for Pythonistas to think about Hashdist may be a more powerful hybrid of :ref:`virtualenv` and :ref:`buildout`. It is aimed at solving the problem of installing scientific software, and making package distribution stateless, cached, and branchable. It is used by some researchers but has been lacking in maintenance since 2016."
msgstr ""

#: ../source/key_projects.rst:449
#: b37d338162df46649d31a9a1b4937128
msgid "hatch"
msgstr ""

#: ../source/key_projects.rst:451
#: 91e9dd1b0d874395b972735f7f54b21d
msgid "`GitHub and Docs <https://github.com/ofek/hatch>`__ | `PyPI <https://pypi.org/project/hatch>`__"
msgstr ""

#: ../source/key_projects.rst:454
#: 75d6dcbcc4444d8a8496a5aa851bc2eb
msgid "Hatch is a unified command-line tool meant to conveniently manage dependencies and environment isolation for Python developers. Python package developers use Hatch to configure, version, specify dependencies for, and publish packages to PyPI. Under the hood, it uses :ref:`twine` to upload packages to PyPI, and :ref:`pip` to download and install packages."
msgstr ""

#: ../source/key_projects.rst:464
#: 3b1ccf5cb24642248226fcaf972acc0a
msgid "pex"
msgstr ""

#: ../source/key_projects.rst:466
#: 3b3cb55e61644eb1a052b1f7c8975827
msgid "`Docs <https://pex.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/pantsbuild/pex/>`__ | `PyPI <https://pypi.org/project/pex>`__"
msgstr ""

#: ../source/key_projects.rst:470
#: 678b0e1937bc469bbaf23c8ae658c85b
msgid "pex is both a library and tool for generating :file:`.pex` (Python EXecutable) files, standalone Python environments in the spirit of :ref:`virtualenv`. :file:`.pex` files are just carefully constructed zip files with a ``#!/usr/bin/env python`` and special :file:`__main__.py`, and are designed to make deployment of Python applications as simple as ``cp``."
msgstr ""

#: ../source/key_projects.rst:479
#: 8bfe79564d234388aa90169280e4ee1c
msgid "pipx"
msgstr ""

#: ../source/key_projects.rst:481
#: 5cc9f0f811aa497b825fede4cf9ddc15
msgid "`Docs <https://pipxproject.github.io/pipx/>`__ | `GitHub <https://github.com/pipxproject/pipx>`__ | `PyPI <https://pypi.org/project/pipx/>`__"
msgstr ""

#: ../source/key_projects.rst:485
#: f2c8510eee9548d3bddbac5defda10b7
msgid "pipx is a tool to safely install and run Python CLI applications globally."
msgstr ""

#: ../source/key_projects.rst:490
#: f7fa444cb1714ef09b9f7502e2bcc726
msgid "pip-tools"
msgstr ""

#: ../source/key_projects.rst:492
#: 795373501bd24dfd96f57762f12d66f1
msgid "`GitHub and Docs <https://github.com/jazzband/pip-tools/>`__ | `PyPI <https://pypi.org/project/pip-tools/>`__"
msgstr ""

#: ../source/key_projects.rst:495
#: 8e23d795dec94753a31713073a58ea82
msgid "pip-tools is a suite of tools meant for Python system administrators and release managers who particularly want to keep their builds deterministic yet stay up to date with new versions of their dependencies. Users can specify particular release of their dependencies via hash, conveniently make a properly formatted list of requirements from information in other parts of their program, update all dependencies (a feature :ref:`pip` currently does not provide), and create layers of constraints for the program to obey."
msgstr ""

#: ../source/key_projects.rst:507
#: 86d1f8063442497da19131695030c647
msgid "piwheels"
msgstr ""

#: ../source/key_projects.rst:509
#: a949124da4fa43f2856c80a5d5269a1e
msgid "`Website <https://www.piwheels.org/>`__ | `Docs <https://piwheels.readthedocs.io/>`__ | `GitHub <https://github.com/piwheels/piwheels/>`__"
msgstr ""

#: ../source/key_projects.rst:513
#: 1037c87384e044709b4ec8e264bfc99b
msgid "piwheels is a website, and software underpinning it, that fetches source code distribution packages from PyPI and compiles them into binary wheels that are optimized for installation onto Raspberry Pi computers. Raspberry Pi OS pre-configures pip to use piwheels.org as an additional index to PyPI."
msgstr ""

#: ../source/key_projects.rst:522
#: 14f6e008289e45d7a378793c6e6563ae
msgid "poetry"
msgstr ""

#: ../source/key_projects.rst:524
#: 0b094b813b424a56a7493d53ac1f7a53
msgid "`Docs <https://python-poetry.org/>`__ | `GitHub <https://github.com/python-poetry/poetry>`__ | `PyPI <https://pypi.org/project/poetry/>`__"
msgstr ""

#: ../source/key_projects.rst:528
#: 564d561be9994c6db21e47f5ea10c8ee
msgid "poetry is a command-line tool to handle dependency installation and isolation as well as building and packaging of Python packages. It uses ``pyproject.toml`` and, instead of depending on the resolver functionality within :ref:`pip`, provides its own dependency resolver. It attempts to speed users' experience of installation and dependency resolution by locally caching metadata about dependencies."
msgstr ""

#: ../source/key_projects.rst:538
#: 4dcc0bfed4b54b03b6073fcce858fca9
msgid "pypiserver"
msgstr ""

#: ../source/key_projects.rst:540
#: 5ebfb909b4fa4d5d8652474a154a9043
msgid "`Docs <https://github.com/pypiserver/pypiserver/blob/master/README.rst>`__ | `GitHub <https://github.com/pypiserver/pypiserver>`__ | `PyPI <https://pypi.org/project/pypiserver/>`__"
msgstr ""

#: ../source/key_projects.rst:544
#: 24e3b4dd7877496d819c71c222d7fd12
msgid "pypiserver is a minimalist application that serves as a private Python package index within organizations, implementing a simple API and browser interface. You can upload private packages using standard upload tools, and users can download and install them with :ref:`pip`, without publishing them publicly. Organizations who use pypiserver usually download packages both from pypiserver and from PyPI."
msgstr ""

#: ../source/key_projects.rst:554
#: 7a22c1fa4852419a8ef5e5b49e1587f7
msgid "scikit-build"
msgstr ""

#: ../source/key_projects.rst:556
#: baee6e934eb146cfbed348b1d8d23350
msgid "`Docs <https://scikit-build.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/scikit-build/scikit-build/>`__ | `PyPI <https://pypi.org/project/scikit-build>`__"
msgstr ""

#: ../source/key_projects.rst:560
#: 2a27fad360a54bd6ae4a770e8457a15f
msgid "Scikit-build is an improved build system generator for CPython C/C++/Fortran/Cython extensions that integrates with :ref:`setuptools`, :ref:`wheel` and :ref:`pip`. It internally uses `cmake <https://pypi.org/project/cmake>`__ (available on PyPI) to provide better support for additional compilers, build systems, cross compilation, and locating dependencies and their associated build requirements. To speed up and parallelize the build of large projects, the user can install `ninja <https://pypi.org/project/ninja>`__ (also available on PyPI)."
msgstr ""

#: ../source/key_projects.rst:572
#: 6b69fee79eae4b80a954ee563d414b66
msgid "shiv"
msgstr ""

#: ../source/key_projects.rst:574
#: c5c17df4541043d180e6dd92db5e42d6
msgid "`Docs <https://shiv.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/linkedin/shiv>`__ | `PyPI <https://pypi.org/project/shiv/>`__"
msgstr ""

#: ../source/key_projects.rst:578
#: d827d93a7fbc4b249b90cda6ee014a0f
msgid "shiv is a command line utility for building fully self contained Python zipapps as outlined in :pep:`441`, but with all their dependencies included. Its primary goal is making distributing Python applications and command line tools fast & easy."
msgstr ""

#: ../source/key_projects.rst:588
#: 7863898fb80942b4a0d870c18f004168
msgid "`Docs <https://spack.readthedocs.io/>`__ | `GitHub <https://github.com/llnl/spack/>`__ | `Paper <http://www.computer.org/csdl/proceedings/sc/2015/3723/00/2807623.pdf>`__ | `Slides <https://tgamblin.github.io/files/Gamblin-Spack-SC15-Talk.pdf>`__"
msgstr ""

#: ../source/key_projects.rst:593
#: 5537ab32098c4c8caa6de115989cf4e2
msgid "A flexible package manager designed to support multiple versions, configurations, platforms, and compilers.  Spack is like Homebrew, but packages are written in Python and parameterized to allow easy swapping of compilers, library versions, build options, etc. Arbitrarily many versions of packages can coexist on the same system. Spack was designed for rapidly building high performance scientific applications on clusters and supercomputers."
msgstr ""

#: ../source/key_projects.rst:601
#: 3c302c22e2fa45e484add88008f7acfe
msgid "Spack is not in PyPI (yet), but it requires no installation and can be used immediately after cloning from GitHub."
msgstr ""

#: ../source/key_projects.rst:607
#: a8bc9f0809d6478a9637e54a1297226e
msgid "zest.releaser"
msgstr ""

#: ../source/key_projects.rst:609
#: 232e347ac21a43b1b07ea8db2c2e87f2
msgid "`Docs <https://zestreleaser.readthedocs.io/en/latest/>`__ | `GitHub <https://github.com/zestsoftware/zest.releaser/>`__ | `PyPI <https://pypi.org/project/zest.releaser/>`__"
msgstr ""

#: ../source/key_projects.rst:613
#: de5624ea1e2144d5b4237d3bf3124359
msgid "``zest.releaser`` is a Python package release tool providing an abstraction layer on top of :ref:`twine`. Python developers use ``zest.releaser`` to automate incrementing package version numbers, updating changelogs, tagging releases in source control, and uploading new packages to PyPI."
msgstr ""

#: ../source/key_projects.rst:620
#: ab08d45f0b094726950bbe834ac0a4ec
msgid "Standard Library Projects"
msgstr ""

#: ../source/key_projects.rst:625
#: a0914144782d4b81af1a0cae02cb5eaa
msgid "ensurepip"
msgstr ""

#: ../source/key_projects.rst:627
#: 48e8e722b9904b7c9294efcda5567131
msgid "`Docs <https://docs.python.org/3/library/ensurepip.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:630
#: 11978c4eada541058fd0c1088f1b0482
msgid "A package in the Python Standard Library that provides support for bootstrapping :ref:`pip` into an existing Python installation or virtual environment.  In most cases, end users won't use this module, but rather it will be used during the build of the Python distribution."
msgstr ""

#: ../source/key_projects.rst:639
#: 3c169ead63544decb9edcc597c0fdac0
msgid "distutils"
msgstr ""

#: ../source/key_projects.rst:641
#: 3060505fe05f472ba98be948875e4cec
msgid "`Docs <https://docs.python.org/3/library/distutils.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:644
#: 5631a7cbeb344ad4a55c3c6bf131958b
msgid "The original Python packaging system, added to the standard library in Python 2.0."
msgstr ""

#: ../source/key_projects.rst:647
#: bfa88c3ecff74b0ba6c513829d3c7af6
msgid "Due to the challenges of maintaining a packaging system where feature updates are tightly coupled to language runtime updates, direct usage of :ref:`distutils` is now actively discouraged, with :ref:`Setuptools` being the preferred replacement. :ref:`Setuptools` not only provides features that plain :ref:`distutils` doesn't offer (such as dependency declarations and entry point declarations), it also provides a consistent build interface and feature set across all supported Python versions."
msgstr ""

#: ../source/key_projects.rst:660
#: eddc472fb73f4924a76f90123ac7d3c0
msgid "venv"
msgstr ""

#: ../source/key_projects.rst:662
#: f334aefd9ce54ec6b32def433dc9a9f5
msgid "`Docs <https://docs.python.org/3/library/venv.html>`__ | `Issues <http://bugs.python.org>`__"
msgstr ""

#: ../source/key_projects.rst:665
#: e58d9886588946d895fabade9e898b2d
msgid "A package in the Python Standard Library (starting with Python 3.3) for creating :term:`Virtual Environments <Virtual Environment>`.  For more information, see the section on :ref:`Creating and using Virtual Environments`."
msgstr ""

#: ../source/news.rst:2
#: b80d7c82d2c1410fbec1909d80bd4341
msgid "News"
msgstr ""

#: ../source/news.rst:5
#: 1249333e8cc84c6582ed974451629972
msgid "September 2019"
msgstr ""

#: ../source/news.rst:6
#: 3a8896ff1b8c4eb2af527b0d0ada8995
msgid "Added a guide about publishing dists via GitHub Actions. (:pr:`647`)"
msgstr ""

#: ../source/news.rst:9
#: 80d4631a7d89459eb40310cfc72c7d02
msgid "August 2019"
msgstr ""

#: ../source/news.rst:10
#: 0ebe80b6a2b3430db927f4f754f166a6
msgid "Updated to use :file:`python3 -m` when installing pipx. (:pr:`631`)"
msgstr ""

#: ../source/news.rst:13
#: 61e51305dca648688d94375bd4fd765c
msgid "July 2019"
msgstr ""

#: ../source/news.rst:14
#: d3199b4af109493b896711faae4ad592
msgid "Marked all PEP numbers with the :pep: role. (:pr:`629`)"
msgstr ""

#: ../source/news.rst:15
#: 290e22e96e7540b2984bb51b39220ee5
msgid "Upgraded Sphinx version and removed pypa.io intersphinx. (:pr:`625`)"
msgstr ""

#: ../source/news.rst:16
#: 55081cadfe994a8a9ee69a13a4bcc3cb
msgid "Mentioned :file:`find_namespace_packages`. (:pr:`622`)"
msgstr ""

#: ../source/news.rst:17
#: 3505ca098e1543b38637fa181309a8ff
msgid "Updated directory layout examples for consistency. (:pr:`611`)"
msgstr ""

#: ../source/news.rst:18
#: 012e2a997b2d49edb750496c516b4bb7
msgid "Updated Bandersnatch link to GitHub. (:pr:`623`)"
msgstr ""

#: ../source/news.rst:21
#: d2d1bcba28d6411390d89dd1afd5ff33
msgid "June 2019"
msgstr ""

#: ../source/news.rst:22
#: 2d269d804f7144c2b16eee54a3ef5e26
msgid "Fixed some typos. (:pr:`620`)"
msgstr ""

#: ../source/news.rst:25
#: f8b4828a1c3c4168b46607d80d6037bd
msgid "May 2019"
msgstr ""

#: ../source/news.rst:26
#: 2d4e2ff5185a4f41ad77ab72f51a824a
msgid "Added :file:`python_requires` usage to packaging tutorial. (:pr:`613`)"
msgstr ""

#: ../source/news.rst:27
#: 16810ec29b704d638272d594b32f4979
msgid "Added a MANIFEST.in guide page. (:pr:`609`)"
msgstr ""

#: ../source/news.rst:30
#: 20f9ae7683d445698439d901b0b52724
msgid "April 2019"
msgstr ""

#: ../source/news.rst:31
#: 80a41831377243738336563e015fa5f4
msgid "Added a mention for :file:`shiv` in the key projects section. (:pr:`608`)"
msgstr ""

#: ../source/news.rst:32
#: 5762df95f48c43cbaee7877308ac20fc
msgid "Reduced emphasis on virtualenv. (:pr:`606`)"
msgstr ""

#: ../source/news.rst:35
#: 0107bd358dcb4d2e8acf27441fc05387
msgid "March 2019"
msgstr ""

#: ../source/news.rst:36
#: 43bb135774014beb93425e3f7cde074a
msgid "Moved single-sourcing guide version option to Python 3. (:pr:`605`)"
msgstr ""

#: ../source/news.rst:37
#: 982a019d787640f7a117ac6f0b78dce5
msgid "Covered RTD details for contributing. (:pr:`600`)"
msgstr ""

#: ../source/news.rst:40
#: 5f9cdd18d9494466b8ee7296ca098e40
msgid "February 2019"
msgstr ""

#: ../source/news.rst:41
#: 11fc234d5bfc487b932a4ec1c061aead
msgid "Elaborate upon the differences between the tutorial and the real packaging process. (:pr:`602`)"
msgstr ""

#: ../source/news.rst:42
#: a7385039f8ea47e1bc253bcb4943f8fe
msgid "Added instructions to install Python CLI applications. (:pr:`594`)"
msgstr ""

#: ../source/news.rst:45
#: 13ee7f32cc354276afb30270cc0e4d48
msgid "January 2019"
msgstr ""

#: ../source/news.rst:46
#: 0f57e1f5ce844635828dae742d4ddb1d
msgid "Added :file:`--no-deps` to the packaging tutorial. (:pr:`593`)"
msgstr ""

#: ../source/news.rst:47
#: 4d3d23aa24d24371bf7b027857a254af
msgid "Updated Sphinx and Nox. (:pr:`591`)"
msgstr ""

#: ../source/news.rst:48
#: 574e047a202d44b5bfaef4acb8d65f9e
msgid "Referenced Twine from Python3. (:pr:`581`)"
msgstr ""

#: ../source/news.rst:51
#: 904a8e6a339c40adaa1721c7126eb0f8
msgid "December 2018"
msgstr ""

#: ../source/news.rst:52
#: 4ad3c0a8d90142a8a00ce5062729fbfd
msgid "No programmers in the office!"
msgstr ""

#: ../source/news.rst:55
#: ffdb8a4d35bc497b95867c0b60528337
msgid "November 2018"
msgstr ""

#: ../source/news.rst:56
#: 0427dc1f9c09487ea1186f6fe8aed572
msgid "Removed landing page link to PyPI migration guide. (:pr:`575`)"
msgstr ""

#: ../source/news.rst:57
#: 468ce8dfb8054c3fbd496ed2291bf685
msgid "Changed bumpversion to bump2version. (:pr:`572`)"
msgstr ""

#: ../source/news.rst:58
#: c03138eef38b48a59fda840077825743
msgid "Added single-sourcing package version example. (:pr:`573`)"
msgstr ""

#: ../source/news.rst:59
#: d3fc3ebb171a4dbc81cf5d5bc86c57bf
msgid "Added a guide for creating documentation. (:pr:`568`)"
msgstr ""

#: ../source/news.rst:62
#: 731bccf4c4cb413a914ccfae192b350d
msgid "October 2018"
msgstr ""

#: ../source/news.rst:63
#: 2461d075b11142649ac7719438206817
msgid "Updated Nox package name. (:pr:`566`)"
msgstr ""

#: ../source/news.rst:64
#: e3079eae248040ab95f601d91906e35d
msgid "Mentioned Sphinx extensions in guides. (:pr:`562`)"
msgstr ""

#: ../source/news.rst:67
#: a9d0a7c6f1a241238e459a965009225b
msgid "September 2018"
msgstr ""

#: ../source/news.rst:68
#: 3e164295a5c44781b8ab99a80a94e98a
msgid "Added a section on checking RST markup. (:pr:`554`)"
msgstr ""

#: ../source/news.rst:69
#: 0fbaf48ddf094cb4888c33802f013c3f
msgid "Updated user installs page. (:pr:`558`)"
msgstr ""

#: ../source/news.rst:70
#: 74ee0faa80fb439897c621621ea1bb26
msgid "Updated Google BigQuery urls. (:pr:`556`)"
msgstr ""

#: ../source/news.rst:71
#: 323abeb77c9b48f9a07588b0bba86f0e
msgid "Replaced tar command with working command. (:pr:`552`)"
msgstr ""

#: ../source/news.rst:72
#: 773f6ba8deb246f0abeaee0f6f88d569
msgid "Changed to double quotes in the pip install SomeProject==1.4. (:pr:`550`)"
msgstr ""

#: ../source/news.rst:75
#: a2cbeca3f9ba4a6ea8e986886d3f1094
msgid "August 2018"
msgstr ""

#: ../source/news.rst:76
#: 1c4a3a27adae4b529d87c9c8e622fb1f
msgid "Removed the recommendation to store passwords in cleartext. (:pr:`546`)"
msgstr ""

#: ../source/news.rst:77
#: cc2bf22dbb5c44a6a2911d79c9b31d5d
msgid "Moved the Overview to a task based lead in along with the others. (:pr:`540`)"
msgstr ""

#: ../source/news.rst:78
#: 6b3e3e96021b40e98e81aeeef045a52d
msgid "Updated Python version supported by virtualenv. (:pr:`538`)"
msgstr ""

#: ../source/news.rst:79
#: 412e13a07c424443a279d0a602a4d03e
msgid "Added outline/rough draft of new Overview page. (:pr:`519`)"
msgstr ""

#: ../source/news.rst:82
#: 9b9191a2fdaf450ba2716b347ca586c2
msgid "July 2018"
msgstr ""

#: ../source/news.rst:84
#: a6d5ae2c134a4d6aacbf200a56f450ac
msgid "Improved binary extension docs. (:pr:`531`)"
msgstr ""

#: ../source/news.rst:85
#: 9a84155a6c804eba99d317410e48f31d
msgid "Added scikit-build to key projects. (:pr:`530`)"
msgstr ""

#: ../source/news.rst:88
#: aaa23b96bbd8430fb51c60435ea8f21b
msgid "June 2018"
msgstr ""

#: ../source/news.rst:90
#: 1582129fa90a4f7fad3e6b29b690c5da
msgid "Fixed categories of interop PEP for pypa.io. (:pr:`527`)"
msgstr ""

#: ../source/news.rst:91
#: 7483eb27c405436eb8911cb7d2d80674
msgid "Updated Markdown descriptions explanation. (:pr:`522`)"
msgstr ""

#: ../source/news.rst:94
#: 569bc72b86c840e18b1e500d692b2534
msgid "May 2018"
msgstr ""

#: ../source/news.rst:96
#: ecf63d57353249c0964d295bee66cdb0
msgid "Noted issues with Provides-Dist and Obsoletes-Dist. (:pr:`513`)"
msgstr ""

#: ../source/news.rst:97
#: bb9b16beecc449848f7d71931e9cc221
msgid "Removed outdated warning about Python version mixing with Pipenv. (:pr:`501`)"
msgstr ""

#: ../source/news.rst:98
#: 7b92e62635f147bda3521d09b22e401d
msgid "Simplified packaging tutorial. (:pr:`498`)"
msgstr ""

#: ../source/news.rst:99
#: 480a0c41d5fc4c0aae590e3a38e95734
msgid "Updated Windows users instructions for clarity. (:pr:`493`)"
msgstr ""

#: ../source/news.rst:100
#: 789e36449cc74378876fdf6a248ad5d2
msgid "Updated the license section description for completeness. (:pr:`492`)"
msgstr ""

#: ../source/news.rst:101
#: ed87e80cb2004ae6b6dacb659df954e7
msgid "Added specification-style document to contributing section. (:pr:`489`)"
msgstr ""

#: ../source/news.rst:102
#: e40a03ab6f7841909f5c7df660b59d1f
msgid "Added documentation types to contributing guide. (:pr:`485`)"
msgstr ""

#: ../source/news.rst:105
#: 916100437fe64f64bf4060101b6c0f60
msgid "April 2018"
msgstr ""

#: ../source/news.rst:107
#: fc7bdea0a6df4ca7a36bc94fc2053aed
msgid "Added README guide. (:pr:`461`)"
msgstr ""

#: ../source/news.rst:108
#: 7fb5203120bc4650b6edf7199d04ec4f
msgid "Updated instructions and status for PyPI launch. (:pr:`475`)"
msgstr ""

#: ../source/news.rst:109
#: 463950b6bb0e49049077ea8399e575a9
msgid "Added instructions for Warehouse. (:pr:`471`)"
msgstr ""

#: ../source/news.rst:110
#: 7ac9c4aba9c347bfaa3e92e7236974a4
msgid "Removed GPG references from publishing tutorial. (:pr:`466`)"
msgstr ""

#: ../source/news.rst:111
#: d42fd76957264617add2c98d4d78fc83
msgid "Added 'What’s in which Python 3.4–3.6?'. (:pr:`468`)"
msgstr ""

#: ../source/news.rst:112
#: a24f2eaf2b1d4e4cb4e504aab4069ebd
msgid "Added a guide for phasing out Python versions. (:pr:`459`)"
msgstr ""

#: ../source/news.rst:113
#: 4e9e8ce6fdb64d7a9d89ab28bce3bc9f
msgid "Made default Description-Content-Type variant GFM. (:pr:`462`)"
msgstr ""

#: ../source/news.rst:116
#: 8193bdc97b6a4336ac9fdbd6b8564bec
msgid "March 2018"
msgstr ""

#: ../source/news.rst:118
#: ad49002c36854452a6518dafc04dd3fa
msgid "Updated \"installing scientific packages\". (:pr:`455`)"
msgstr ""

#: ../source/news.rst:119
#: 771ebc343f0c4404adae5b588bbef5f4
msgid "Added :file:`long_description_content_type` to follow PEP 556. (:pr:`457`)"
msgstr ""

#: ../source/news.rst:120
#: 42264dee2c2f4e64a711d9c9741b7b31
msgid "Clarified a long description classifier on pypi.org. (:pr:`456`)"
msgstr ""

#: ../source/news.rst:121
#: 1332551b15e44a5e81f09b681b0133f9
msgid "Updated Core Metadata spec to follw PEP 556. (:pr:`412`)"
msgstr ""

#: ../source/news.rst:124
#: 4b9f2eaecae348329a572431a833e777
msgid "February 2018"
msgstr ""

#: ../source/news.rst:126
#: 19aa6ad796c04544a64c6fc7b9b892e4
msgid "Added python3-venv and python3-pip to Debian installation instructions. (:pr:`445`)"
msgstr ""

#: ../source/news.rst:127
#: ac31f15fe7d3494e882659d91b66f02b
msgid "Updated PyPI migration info. (:pr:`439`)"
msgstr ""

#: ../source/news.rst:128
#: 211c8f2d89824db39f7ba3b4fb59532d
msgid "Added a warning about managing multiple versions with pipenv. (:pr:`430`)"
msgstr ""

#: ../source/news.rst:129
#: 6b63eaf820234d47993ae9772408f458
msgid "Added example of multiple emails to Core Metadata. (:pr:`429`)"
msgstr ""

#: ../source/news.rst:130
#: 179bcf91d67648929c5cd549e04fefbb
msgid "Added explanation of \"legacy\" in test.pypi.org/legacy. (:pr:`426`)"
msgstr ""

#: ../source/news.rst:133
#: 16784f776d6447e3ba82a34f85423e39
msgid "January 2018"
msgstr ""

#: ../source/news.rst:135
#: 99bd168e4a064b0683c36d9d51954ce4
msgid "Added a link to PyPI's list of classifiers. (:pr:`425`)"
msgstr ""

#: ../source/news.rst:136
#: 0ff478f0910c47abb652a2270657bc02
msgid "Updated README.rst explanation. (:pr:`419`)"
msgstr ""

#: ../source/news.rst:139
#: 80856f681e514d0f87aa5297170a9645
msgid "December 2017"
msgstr ""

#: ../source/news.rst:141
#: 9bec6be9961c4badbe61c1c604adac73
msgid "Replaced :file:`~` with :file:`$HOME` in guides and tutorials.  (:pr:`418`)"
msgstr ""

#: ../source/news.rst:142
#: 6d9c195c5b6f494a9afc71fe42bce378
msgid "Noted which fields can be used with environment markers. (:pr:`416`)"
msgstr ""

#: ../source/news.rst:143
#: 4ad0f7cc4f5f4f0c95d42f7895e1300a
msgid "Updated Requires-Python section. (:pr:`414`)"
msgstr ""

#: ../source/news.rst:144
#: 198c5460c4ec4f8aae85fde1f8627a66
msgid "Added news page. (:pr:`404`)"
msgstr ""

#: ../source/news.rst:147
#: cd72b9eb64f7413a8f8f60602e7a9f37
msgid "November 2017"
msgstr ""

#: ../source/news.rst:149
#: 2e3f603082f6450f89159a118f2884f7
msgid "Introduced a new dependency management tutorial based on Pipenv. (:pr:`402`)"
msgstr ""

#: ../source/news.rst:150
#: 4a175e525090419c8addb18d9940d4a9
msgid "Updated the *Single Sourcing Package Version* tutorial to reflect pip's current strategy. (:pr:`400`)"
msgstr ""

#: ../source/news.rst:152
#: f86aa47a33894fe099db833495ae4b86
msgid "Added documentation about the ``py_modules`` argument to ``setup``. (:pr:`398`)"
msgstr ""

#: ../source/news.rst:153
#: 0684ce559a5b4cabae744943a9f22ff1
msgid "Simplified the wording for the :file:`manifest.in` section. (:pr:`395`)"
msgstr ""

#: ../source/news.rst:156
#: 85cc5206247a4abba9521bf525a49960
msgid "October 2017"
msgstr ""

#: ../source/news.rst:158
#: 0bd3df3411a9411a91357bb43ba83929
msgid "Added a specification for the :file:`entry_points.txt` file. (:pr:`398`)"
msgstr ""

#: ../source/news.rst:159
#: 0315e649f8154ae791dfad1065758fbe
msgid "Created a new guide for managing packages using ``pip`` and ``virtualenv``. (:pr:`385`)"
msgstr ""

#: ../source/news.rst:160
#: 8b2d58d4edfd415390529e8e1101c9e7
msgid "Split the specifications page into multiple pages. (:pr:`386`)"
msgstr ""

#: ../source/news.rst:163
#: a4c3738d6d0c4193969f0bc0031cb30e
msgid "September 2017"
msgstr ""

#: ../source/news.rst:165
#: e5fdd3d39c8e4dea8e343e3beb16f5de
msgid "Encouraged using ``readme_renderer`` to validate :file:`README.rst`. (:pr:`379`)"
msgstr ""

#: ../source/news.rst:167
#: 2435db175c714ad5b0d9e8f539a0857b
msgid "Recommended using the ``--user-base`` option. (:pr:`374`)"
msgstr ""

#: ../source/news.rst:170
#: f9b44f5ac03a4064bc5d70fef9b0b50c
msgid "August 2017"
msgstr ""

#: ../source/news.rst:172
#: abf43b32193f461ca4a4c073eada48c4
msgid "Added a new, experimental tutorial on installing packages using ``Pipenv``. (:pr:`369`)"
msgstr ""

#: ../source/news.rst:173
#: e70d7011109243dfafc48c99918aaa8b
msgid "Added a new guide on how to use ``TestPyPI``. (:pr:`366`)"
msgstr ""

#: ../source/news.rst:174
#: 08e8e7623ed94eb2b7f16d59a248106e
msgid "Added :file:`pypi.org` as a term. (:pr:`365`)"
msgstr ""

#: ../source/news.rst:177
#: d23a9584cab041b4a691e5b7273e5293
msgid "July 2017"
msgstr ""

#: ../source/news.rst:179
#: d9a16be509c34625b010ffa445d4a90c
msgid "Added ``flit`` to the key projects list. (:pr:`358`)"
msgstr ""

#: ../source/news.rst:180
#: e65c1f2c19e64db887f3bd64fc6e3e8f
msgid "Added ``enscons`` to the list of key projects. (:pr:`357`)"
msgstr ""

#: ../source/news.rst:181
#: e10604cb2315429793e4fa11e7c4e308
msgid "Updated this guide's ``readme`` with instructions on how to build the guide locally. (:pr:`356`)"
msgstr ""

#: ../source/news.rst:182
#: 23146711c91144f0a89a259cef79c734
msgid "Made the new ``TestPyPI`` URL more visible, adding note to homepage about pypi.org. (:pr:`354`)"
msgstr ""

#: ../source/news.rst:183
#: badf8dd458984a209716a70b55edde93
msgid "Added a note about the removal of the explicit registration API. (:pr:`347`)"
msgstr ""

#: ../source/news.rst:186
#: 4a0ab09d586344a48101305f13c4f5a4
msgid "June 2017"
msgstr ""

#: ../source/news.rst:188
#: cd291ad8d8af40f78db09870621bde95
msgid "Added a document on migrating uploads to :file:`PyPI.org`. (:pr:`339`)"
msgstr ""

#: ../source/news.rst:189
#: cb1d2bd0b4ef4380889cadf016d83a2a
msgid "Added documentation for ``python_requires``. (:pr:`338`)"
msgstr ""

#: ../source/news.rst:190
#: 34fca6cfab754a3895b32b5ba91958ba
msgid "Added a note about PyPI migration in the *Tool Recommendations* tutorial. (:pr:`335`)"
msgstr ""

#: ../source/news.rst:191
#: 66d97ce2c4ae40f99dc9fd7a96d9ec58
msgid "Added a note that :file:`manifest.in` does not affect wheels. (:pr:`332`)"
msgstr ""

#: ../source/news.rst:192
#: 2fe1eb6e543b4d55b884227083682194
msgid "Added a license section to the distributing guide. (:pr:`331`)"
msgstr ""

#: ../source/news.rst:193
#: 20ccfbf611664bbebb8dc7706614ac50
msgid "Expanded the section on the ``name`` argument. (:pr:`329`)"
msgstr ""

#: ../source/news.rst:194
#: 772b6a3bc5c648efbd546450c5b0504d
msgid "Adjusted the landing page. (:pr:`327`, :pr:`326`, :pr:`324`)"
msgstr ""

#: ../source/news.rst:195
#: 9352705808ec4bcbbb133008f6f33997
msgid "Updated to Sphinx 1.6.2. (:pr:`323`)"
msgstr ""

#: ../source/news.rst:196
#: 6a72d1da96ad49ceb9fd1a4e3b115d88
msgid "Switched to the PyPA theme. (:pr:`305`)"
msgstr ""

#: ../source/news.rst:197
#: 3bd2c2d15ee64944b32dce5b655d0f67
msgid "Re-organized the documentation into the new structure. (:pr:`318`)"
msgstr ""

#: ../source/news.rst:200
#: be7edeb2d60c4f41aa530785d869325a
msgid "May 2017"
msgstr ""

#: ../source/news.rst:202
#: 91df590a9c8a4737b7543ee037e02c14
msgid "Added documentation for the ``Description-Content-Type`` field. (:pr:`258`)"
msgstr ""

#: ../source/news.rst:203
#: c2e45e25c36b4402969186b8a5e5e6b6
msgid "Added contributor and style guide. (:pr:`307`)"
msgstr ""

#: ../source/news.rst:204
#: 155722f099ce4624a6be68cbd3775e2b
msgid "Documented ``pip`` and ``easy_install``'s differences for per-project indexes. (:pr:`233`)"
msgstr ""

#: ../source/news.rst:207
#: 8a904cc8a53d41dd955900f4d2c7b080
msgid "April 2017"
msgstr ""

#: ../source/news.rst:209
#: 7d8736706edd4485a1f0c76fd0341b68
msgid "Added travis configuration for testing pull requests. (:pr:`300`)"
msgstr ""

#: ../source/news.rst:210
#: 6eb5c519dbce4df5a541a01624547677
msgid "Mentioned the requirement of the ``wheel`` package for creating wheels (:pr:`299`)"
msgstr ""

#: ../source/news.rst:211
#: 7ad5215951c5427aa7fd6a9e320ab68b
msgid "Removed the ``twine register`` reference in the *Distributing Packages* tutorial. (:pr:`271`)"
msgstr ""

#: ../source/news.rst:212
#: 6e8642e537bf4c2b834b4474ad9b7b6f
msgid "Added a topic on plugin discovery. (:pr:`294`, :pr:`296`)"
msgstr ""

#: ../source/news.rst:213
#: 25cd87d96e10479da8b13398d59eaf83
msgid "Added a topic on namespace packages. (:pr:`290`)"
msgstr ""

#: ../source/news.rst:214
#: a8e13351010d4617a7990a73598a0bf7
msgid "Added documentation explaining prominently how to install ``pip`` in ``/usr/local``. (:pr:`230`)"
msgstr ""

#: ../source/news.rst:215
#: e81a7e16a82a4ec9acbbed4d606e07fe
msgid "Updated development mode documentation to mention that order of local packages matters. (:pr:`208`)"
msgstr ""

#: ../source/news.rst:216
#: 3d9be34e4c9f42e389038ba2c5336704
msgid "Convert readthedocs link for their ``.org`` -> ``.io`` migration for hosted projects (:pr:`239`)"
msgstr ""

#: ../source/news.rst:217
#: d0ca2f48c5b6453eb8f9a027f2d922b5
msgid "Swaped order of :file:`setup.py` arguments for the upload command, as order is significant. (:pr:`260`)"
msgstr ""

#: ../source/news.rst:219
#: 145edf4927904d4a9a2c5b5e4ca740ff
msgid "Explained how to install from unsupported sources using a helper application. (:pr:`289`)"
msgstr ""

#: ../source/news.rst:223
#: 27d487597ff448e0acbba77d380465eb
msgid "March 2017"
msgstr ""

#: ../source/news.rst:225
#: 6cff2dc093fe41e9907a74fba7224b65
msgid "Covered ``manylinux1`` in *Platform Wheels*. (:pr:`283`)"
msgstr ""

#: ../source/news.rst:228
#: 4f54fa87703e4fb2b389d1cb96eb1f6d
msgid "February 2017"
msgstr ""

#: ../source/news.rst:230
#: 82d20b079f90497ab954e16e3dad197a
msgid "Added :pep:`518`. (:pr:`281`)"
msgstr ""

#: ../source/overview.rst:3
#: 99a6d9b4b7184fc09c2b8b9eea488b02
msgid "An Overview of Packaging for Python"
msgstr ""

#: ../source/overview.rst:7
#: 3cd15d9f4c464e0db11008e60c2b5485
msgid "As a general-purpose programming language, Python is designed to be used in many ways. You can build web sites or industrial robots or a game for your friends to play, and much more, all using the same core technology."
msgstr ""

#: ../source/overview.rst:12
#: baabc81c536c4ddf8bddf4df73ad26c1
msgid "Python's flexibility is why the first step in every Python project must be to think about the project's audience and the corresponding environment where the project will run. It might seem strange to think about packaging before writing code, but this process does wonders for avoiding future headaches."
msgstr ""

#: ../source/overview.rst:18
#: 66e80ff06f03455bb0d493159b306cab
msgid "This overview provides a general-purpose decision tree for reasoning about Python's plethora of packaging options. Read on to choose the best technology for your next project."
msgstr ""

#: ../source/overview.rst:26
#: d1b40022fdd64e379f27b91ca6ad14ce
msgid "Thinking about deployment"
msgstr ""

#: ../source/overview.rst:28
#: 5f924e68ec8a4a0fb89a7a915e90056c
msgid "Packages exist to be installed (or *deployed*), so before you package anything, you'll want to have some answers to the deployment questions below:"
msgstr ""

#: ../source/overview.rst:32
#: a7d6cb613503438bb1801027dc021b4d
msgid "Who are your software's users? Will your software be installed by other developers doing software development, operations people in a datacenter, or a less software-savvy group?"
msgstr ""

#: ../source/overview.rst:35
#: 710c6fbb893041238016af3e0d8d1336
msgid "Is your software intended to run on servers, desktops, mobile clients (phones, tablets, etc.), or embedded in dedicated devices?"
msgstr ""

#: ../source/overview.rst:37
#: 943661680b714c4c8dcabf2bfd227f9b
msgid "Is your software installed individually, or in large deployment batches?"
msgstr ""

#: ../source/overview.rst:39
#: c0cd042eb19d4683afbdd210899ee74b
msgid "Packaging is all about target environment and deployment experience. There are many answers to the questions above and each combination of circumstances has its own solutions. With this information, the following overview will guide you to the packaging technologies best suited to your project."
msgstr ""

#: ../source/overview.rst:46
#: 639e036af62a45029002855ea4855659
msgid "Packaging Python libraries and tools"
msgstr ""

#: ../source/overview.rst:48
#: ecb8700a7d894dc48c015c186c83be00
msgid "You may have heard about PyPI, ``setup.py``, and ``wheel`` files. These are just a few of the tools Python's ecosystem provides for distributing Python code to developers, which you can read about in :doc:`guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/overview.rst:53
#: aa3d95196748418ca51ffc1b2cba3b28
msgid "The following approaches to packaging are meant for libraries and tools used by technical audience in a development setting. If you're looking for ways to package Python for a non-technical audience and/or a production setting, skip ahead to :ref:`packaging-applications`."
msgstr ""

#: ../source/overview.rst:59
#: 21234af44b704b84a3071ec75f2d4120
msgid "Python modules"
msgstr ""

#: ../source/overview.rst:61
#: 0570605775764ee3a58ebbda28a48969
msgid "A Python file, provided it only relies on the standard library, can be redistributed and reused. You will also need to ensure it's written for the right version of Python, and only relies on the standard library."
msgstr ""

#: ../source/overview.rst:66
#: 73b12d7f1d3947ef8859f274d93b2302
msgid "This is great for sharing simple scripts and snippets between people who both have compatible Python versions (such as via email, StackOverflow, or GitHub gists). There are even some entire Python libraries that offer this as an option, such as `bottle.py <https://bottlepy.org/docs/dev/>`_ and `boltons <http://boltons.readthedocs.io/en/latest/architecture.html#architecture>`_."
msgstr ""

#: ../source/overview.rst:73
#: 2773170d2385493d9f6ecccf8912f5c0
msgid "However, this pattern won't scale for projects that consist of multiple files, need additional libraries, or need a specific version of Python, hence the options below."
msgstr ""

#: ../source/overview.rst:78
#: cf017a04fc694e5889adf3be5eb53315
msgid "Python source distributions"
msgstr ""

#: ../source/overview.rst:80
#: 5c2393b9af7b47478c050112c9f04067
msgid "If your code consists of multiple Python files, it's usually organized into a directory structure. Any directory containing Python files can comprise an :term:`Import Package`."
msgstr ""

#: ../source/overview.rst:84
#: 15a1fb0bb032408d857ec729d41cc0ac
msgid "Because packages consist of multiple files, they are harder to distribute. Most protocols support transferring only one file at a time (when was the last time you clicked a link and it downloaded multiple files?). It's easier to get incomplete transfers, and harder to guarantee code integrity at the destination."
msgstr ""

#: ../source/overview.rst:90
#: da62d48f84424857b010f4c42da7db01
msgid "So long as your code contains nothing but pure Python code, and you know your deployment environment supports your version of Python, then you can use Python's native packaging tools to create a *source* :term:`Distribution Package`, or *sdist* for short."
msgstr ""

#: ../source/overview.rst:95
#: 0a30c26700e443d88f84ef8838bdc3a8
msgid "Python's *sdists* are compressed archives (``.tar.gz`` files) containing one or more packages or modules. If your code is pure-Python, and you only depend on other Python packages, you can `go here to learn more <https://docs.python.org/3/distutils/sourcedist.html>`_."
msgstr ""

#: ../source/overview.rst:100
#: 366ef8d1996b453b903f9f2c5b83ef51
msgid "If you rely on any non-Python code, or non-Python packages (such as `libxml2 <https://en.wikipedia.org/wiki/Libxml2>`_ in the case of `lxml <https://pypi.org/project/lxml/>`_, or BLAS libraries in the case of `numpy <https://pypi.org/project/numpy>`_), you will need to use the format detailed in the next section, which also has many advantages for pure-Python libraries."
msgstr ""

#: ../source/overview.rst:107
#: e4e19a803d4c4eac9379211d70953079
msgid "Python and PyPI support multiple distributions providing different implementations of the same package. For instance the unmaintained-but-seminal `PIL distribution <https://pypi.org/project/PIL/>`_ provides the PIL package, and so does `Pillow <https://pypi.org/project/Pillow/>`_, an actively-maintained fork of PIL!"
msgstr ""

#: ../source/overview.rst:114
#: b501440b518b4146b7fb9360ff32624f
msgid "This Python packaging superpower makes it possible for Pillow to be a drop-in replacement for PIL, just by changing your project's ``install_requires`` or ``requirements.txt``."
msgstr ""

#: ../source/overview.rst:119
#: d1fbd39828a3473eb5b9d27ed55decbc
msgid "Python binary distributions"
msgstr ""

#: ../source/overview.rst:121
#: 94f0af75ea014c42b31f0939129ff5ce
msgid "So much of Python's practical power comes from its ability to integrate with the software ecosystem, in particular libraries written in C, C++, Fortran, Rust, and other languages."
msgstr ""

#: ../source/overview.rst:125
#: 8691e3bdcc0147c0ac20bd0568ca2372
msgid "Not all developers have the right tools or experiences to build these components written in these compiled languages, so Python created the :term:`Wheel`, a package format designed to ship libraries with compiled artifacts. In fact, Python's package installer, ``pip``, always prefers wheels because installation is always faster, so even pure-Python packages work better with wheels."
msgstr ""

#: ../source/overview.rst:132
#: 2a637f3771694e14be30342ed3f7e956
msgid "Binary distributions are best when they come with source distributions to match. Even if you don't upload wheels of your code for every operating system, by uploading the sdist, you're enabling users of other platforms to still build it for themselves. Default to publishing both sdist and wheel archives together, *unless* you're creating artifacts for a very specific use case where you know the recipient only needs one or the other."
msgstr ""

#: ../source/overview.rst:140
#: 166c301d224a4c0c89b20e3c52dd6a5c
msgid "Python and PyPI make it easy to upload both wheels and sdists together. Just follow the :doc:`tutorials/packaging-projects` tutorial."
msgstr ""

#: ../source/overview.rst:148
#: 42b5bf0514884f63bc7ef52b81f8e4ae
msgid "A summary of Python's packaging capabilities for tools and libraries."
msgstr ""

#: ../source/overview.rst:148
#: 2c90747461c64e448e61e1c7f787d221
msgid "Python's recommended built-in library and tool packaging technologies. Excerpted from `The Packaging Gradient (2017) <https://www.youtube.com/watch?v=iLVNWfPWAC8>`_."
msgstr ""

#: ../source/overview.rst:155
#: 827a98db451e4d8a8646fdab6477978b
msgid "Packaging Python applications"
msgstr ""

#: ../source/overview.rst:157
#: fd28bd7f08a542b0afa238739f004dba
msgid "So far we've only discussed Python's native distribution tools. Based on our introduction, you would be correct to infer these built-in approaches only target environments which have Python, and an audience who knows how to install Python packages."
msgstr ""

#: ../source/overview.rst:162
#: 8bff74669b7e45489fe43a0c710ee2b8
msgid "With the variety of operating systems, configurations, and people out there, this assumption is only safe when targeting a developer audience."
msgstr ""

#: ../source/overview.rst:166
#: b43e3e649e5a4a5483f9711e251ba403
msgid "Python's native packaging is mostly built for distributing reusable code, called libraries, between developers. You can piggyback **tools**, or basic applications for developers, on top of Python's library packaging, using technologies like `setuptools entry_points <https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html>`_."
msgstr ""

#: ../source/overview.rst:172
#: 44ac75d01c074df2983b504259302f02
msgid "Libraries are building blocks, not complete applications. For distributing applications, there's a whole new world of technologies out there."
msgstr ""

#: ../source/overview.rst:176
#: e9ae25d589b24fdb944fba0d173170fd
msgid "The next few sections organize these application packaging options according to their dependencies on the target environment, so you can choose the right one for your project."
msgstr ""

#: ../source/overview.rst:181
#: e8868fd4fada4a7b8c1b1de98f9a6465
msgid "Depending on a framework"
msgstr ""

#: ../source/overview.rst:183
#: 014f2c24f94e437bbe5658660bbc820c
msgid "Some types of Python applications, like web site backends and other network services, are common enough that they have frameworks to enable their development and packaging. Other types of applications, like dynamic web frontends and mobile clients, are complex enough to target that a framework becomes more than a convenience."
msgstr ""

#: ../source/overview.rst:189
#: 49280277fbee4d4d83dcf329112c10c1
msgid "In all these cases, it makes sense to work backwards, from the framework's packaging and deployment story. Some frameworks include a deployment system which wraps the technologies outlined in the rest of the guide. In these cases, you'll want to defer to your framework's packaging guide for the easiest and most reliable production experience."
msgstr ""

#: ../source/overview.rst:195
#: 97e628d5b9a54166aa28784cbe3d7679
msgid "If you ever wonder how these platforms and frameworks work under the hood, you can always read the sections beyond."
msgstr ""

#: ../source/overview.rst:199
#: e193e854911c4192801f53f810118dfd
msgid "Service platforms"
msgstr ""

#: ../source/overview.rst:201
#: ff1502af217e47009303d7e40c8f04e2
msgid "If you're developing for a \"Platform-as-a-Service\" or \"PaaS\" like Heroku or Google App Engine, you are going to want to follow their respective packaging guides."
msgstr ""

#: ../source/overview.rst:205
#: a13f71467404408495c54333d9a2ec3c
msgid "`Heroku <https://devcenter.heroku.com/articles/getting-started-with-python>`_"
msgstr ""

#: ../source/overview.rst:206
#: 96b9e98c128d4cd987f3421339e7f32b
msgid "`Google App Engine <https://cloud.google.com/appengine/docs/python/>`_"
msgstr ""

#: ../source/overview.rst:207
#: a914ed27599a45979a7e16a91affa9bd
msgid "`PythonAnywhere <https://www.pythonanywhere.com/>`_"
msgstr ""

#: ../source/overview.rst:208
#: 535cb6ad11404f04836a8bef60fb24d1
msgid "`OpenShift <https://blog.openshift.com/getting-started-python/>`_"
msgstr ""

#: ../source/overview.rst:209
#: 1dc48800337946d390d342bf731fd10d
msgid "\"Serverless\" frameworks like `Zappa <https://www.zappa.io/>`_"
msgstr ""

#: ../source/overview.rst:211
#: f400732828564a0c8ff73a8a56c82185
msgid "In all these setups, the platform takes care of packaging and deployment, as long as you follow their patterns. Most software does not fit one of these templates, hence the existence of all the other options below."
msgstr ""

#: ../source/overview.rst:216
#: b9724dedf3f548759a476b42cc7fcba1
msgid "If you're developing software that will be deployed to machines you own, users' personal computers, or any other arrangement, read on."
msgstr ""

#: ../source/overview.rst:220
#: 82305e44f72d49b083ae6046881fb97a
msgid "Web browsers and mobile applications"
msgstr ""

#: ../source/overview.rst:222
#: 8dec0497353845f680dffbbc21cb3545
msgid "Python's steady advances are leading it into new spaces. These days you can write a mobile app or web application frontend in Python. While the language may be familiar, the packaging and deployment practices are brand new."
msgstr ""

#: ../source/overview.rst:227
#: 6d197c2de89f445e8b50dc40b5aeb954
msgid "If you're planning on releasing to these new frontiers, you'll want to check out the following frameworks, and refer to their packaging guides:"
msgstr ""

#: ../source/overview.rst:231
#: 58bfaf1cc434448d8afe0629f38402e4
msgid "`Kivy <https://kivy.org/#home>`_"
msgstr ""

#: ../source/overview.rst:232
#: 06b605b7181a4110865f6a7d727c29ae
msgid "`Beeware <https://pybee.org/>`_"
msgstr ""

#: ../source/overview.rst:233
#: f5d3b172ac36475fa7f05d9a3ab8c851
msgid "`Brython <https://brython.info/>`_"
msgstr ""

#: ../source/overview.rst:234
#: a6937705bbbe4a4593c79530ef18a79c
msgid "`Flexx <http://flexx.readthedocs.io/en/latest/>`_"
msgstr ""

#: ../source/overview.rst:236
#: c8b77e7e16a345c4ba4998c5c3ec7d16
msgid "If you are *not* interested in using a framework or platform, or just wonder about some of the technologies and techniques utilized by the frameworks above, continue reading below."
msgstr ""

#: ../source/overview.rst:241
#: e7065369ed12469b99f2ee4bc4a92197
msgid "Depending on a pre-installed Python"
msgstr ""

#: ../source/overview.rst:243
#: f4ef59d62e904d31a5f7589abf05b066
msgid "Pick an arbitrary computer, and depending on the context, there's a very good chance Python is already installed. Included by default in most Linux and Mac operating systems for many years now, you can reasonably depend on Python preexisting in your data centers or on the personal machines of developers and data scientists."
msgstr ""

#: ../source/overview.rst:249
#: 65059907d845454a88e42f3a107a62f3
msgid "Technologies which support this model:"
msgstr ""

#: ../source/overview.rst:251
#: 1f8bce3c008e47d396cd93f391047f60
msgid "`PEX <https://github.com/pantsbuild/pex#pex>`_ (Python EXecutable)"
msgstr ""

#: ../source/overview.rst:252
#: d4ec3b3c40bb4e06ade6e9aab3d0c7a6
msgid "`zipapp <https://docs.python.org/3/library/zipapp.html>`_ (does not help manage dependencies, requires Python 3.5+)"
msgstr ""

#: ../source/overview.rst:253
#: cfcbf468616745eebc58cbcd8c50b170
msgid "`shiv <https://github.com/linkedin/shiv#shiv>`_ (requires Python 3)"
msgstr ""

#: ../source/overview.rst:255
#: 902801c4efce403eb7ba17338e745a39
msgid "Of all the approaches here, depending on a pre-installed Python relies the most on the target environment. Of course, this also makes for the smallest package, as small as single-digit megabytes, or even kilobytes."
msgstr ""

#: ../source/overview.rst:260
#: dc18a75705934fdf9a4c7710eb9b87ac
msgid "In general, decreasing the dependency on the target system increases the size of our package, so the solutions here are roughly arranged by increasing size of output."
msgstr ""

#: ../source/overview.rst:267
#: c12fa67ef81a4ac5abfd7e27329de0ed
msgid "Depending on a separate software distribution ecosystem"
msgstr ""

#: ../source/overview.rst:269
#: a20685e5fa884b71860b36b4e2fa4a48
msgid "For a long time many operating systems, including Mac and Windows, lacked built-in package management. Only recently did these OSes gain so-called \"app stores\", but even those focus on consumer applications and offer little for developers."
msgstr ""

#: ../source/overview.rst:274
#: 234f4609b84b480cac1d3b2320f9cdde
msgid "Developers long sought remedies, and in this struggle, emerged with their own package management solutions, such as `Homebrew <https://brew.sh/>`_. The most relevant alternative for Python developers is a package ecosystem called `Anaconda <https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)>`_. Anaconda is built around Python and is increasingly common in academic, analytical, and other data-oriented environments, even making its way `into server-oriented environments <https://www.paypal-engineering.com/2016/09/07/python-packaging-at-paypal/>`_."
msgstr ""

#: ../source/overview.rst:284
#: d86785406f7d476e913627a3a934ec51
msgid "Instructions on building and publishing for the Anaconda ecosystem:"
msgstr ""

#: ../source/overview.rst:286
#: b1f2643193b640c7ae793f279b71eeb0
msgid "`Building libraries and applications with conda <https://conda.io/docs/user-guide/tutorials/index.html>`_"
msgstr ""

#: ../source/overview.rst:287
#: 5591082f387047d993a5c4a68742b615
msgid "`Transitioning a native Python package to Anaconda <https://conda.io/docs/user-guide/tutorials/build-pkgs-skeleton.html>`_"
msgstr ""

#: ../source/overview.rst:289
#: 3709209f6e1a48419c17057aeb4b2f07
msgid "A similar model involves installing an alternative Python distribution, but does not support arbitrary operating system-level packages:"
msgstr ""

#: ../source/overview.rst:293
#: 8b142958c35c4f0fa7b1b8fb0f50cc67
msgid "`Enthought Canopy <https://www.enthought.com/product/canopy/>`_"
msgstr ""

#: ../source/overview.rst:294
#: 6e92e940cb6842baa12c4a2addb1051b
msgid "`ActiveState ActivePython <https://www.activestate.com/activepython>`_"
msgstr ""

#: ../source/overview.rst:295
#: a8bbdf10a55a4280a20905b0ae48ec8b
msgid "`WinPython <http://winpython.github.io/>`_"
msgstr ""

#: ../source/overview.rst:300
#: e0b53e1f38f640a9b79c691025eff3d3
msgid "Bringing your own Python executable"
msgstr ""

#: ../source/overview.rst:302
#: 746fe1c3905b4199bf137c3b7e4cec2d
msgid "Computing as we know it is defined by the ability to execute programs. Every operating system natively supports one or more formats of program they can natively execute."
msgstr ""

#: ../source/overview.rst:306
#: 2bd9e854281a4c67b6a87e7788f5e3fd
msgid "There are many techniques and technologies which turn your Python program into one of these formats, most of which involve embedding the Python interpreter and any other dependencies into a single executable file."
msgstr ""

#: ../source/overview.rst:311
#: 1092e2e1792d4dd5804ccca9c4492e48
msgid "This approach, called *freezing*, offers wide compatibility and seamless user experience, though often requires multiple technologies, and a good amount of effort."
msgstr ""

#: ../source/overview.rst:315
#: be41a4df439045afb66920fb37261019
msgid "A selection of Python freezers:"
msgstr ""

#: ../source/overview.rst:317
#: e7d4dd9ffaa742d0a3b9a332aa396468
msgid "`pyInstaller <http://www.pyinstaller.org/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:318
#: 35786c45d3a5469aa6207f79491c7efa
msgid "`cx_Freeze <https://marcelotduarte.github.io/cx_Freeze/>`_ - Cross-platform"
msgstr ""

#: ../source/overview.rst:319
#: 9f8a91f7578b419991899f5b2d003f14
msgid "`constructor <https://github.com/conda/constructor>`_ - For command-line installers"
msgstr ""

#: ../source/overview.rst:320
#: 48d6c518504d4b0288e5213db682f14e
msgid "`py2exe <http://www.py2exe.org/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:321
#: b698b63877004468bdd4fdcf0ead42c6
msgid "`py2app <https://py2app.readthedocs.io/en/latest/>`_ - Mac only"
msgstr ""

#: ../source/overview.rst:322
#: adbbc90fc82a45f48ca50e49302f8f6a
msgid "`bbFreeze <https://pypi.org/project/bbfreeze>`_ - Windows, Linux, Python 2 only"
msgstr ""

#: ../source/overview.rst:323
#: b158c26ec1324296997bf886115dee12
msgid "`osnap <https://github.com/jamesabel/osnap>`_ - Windows and Mac"
msgstr ""

#: ../source/overview.rst:324
#: d3f5da64dbfb403b8f9a16b86ffddb40
msgid "`pynsist <https://pypi.org/project/pynsist/>`_ - Windows only"
msgstr ""

#: ../source/overview.rst:326
#: 2d364e4d99db41b8a34c0e4c0780b07f
msgid "Most of the above imply single-user deployments. For multi-component server applications, see `Chef Omnibus <https://github.com/chef/omnibus#-omnibus>`_."
msgstr ""

#: ../source/overview.rst:332
#: 2391a4c38a0b4da6b6a571f7033cff87
msgid "Bringing your own userspace"
msgstr ""

#: ../source/overview.rst:334
#: af13f3b0e2624ae6b2738ac148cced2b
msgid "An increasing number of operating systems -- including Linux, Mac OS, and Windows -- can be set up to run applications packaged as lightweight images, using a relatively modern arrangement often referred to as `operating-system-level virtualization <https://en.wikipedia.org/wiki/Operating-system-level_virtualization>`_, or *containerization*."
msgstr ""

#: ../source/overview.rst:341
#: 6e973fc4505542f9824a873202cfbff0
msgid "These techniques are mostly Python agnostic, because they package whole OS filesystems, not just Python or Python packages."
msgstr ""

#: ../source/overview.rst:344
#: 99e61674e2674144a39557427ff1517c
msgid "Adoption is most extensive among Linux servers, where the technology originated and where the technologies below work best:"
msgstr ""

#: ../source/overview.rst:347
#: 6d70522c768243ec856aeee52b9c5c1a
msgid "`AppImage <https://appimage.org/>`_"
msgstr ""

#: ../source/overview.rst:348
#: 32bdfa46966c461c881760ed200dd8e7
msgid "`Docker <https://www.fullstackpython.com/docker.html>`_"
msgstr ""

#: ../source/overview.rst:349
#: 6abad0e0efe541028781f6e7c8ece043
msgid "`Flatpak <https://flatpak.org/>`_"
msgstr ""

#: ../source/overview.rst:350
#: abb22bd80a2546b187d77ee268c8467f
msgid "`Snapcraft <https://snapcraft.io/>`_"
msgstr ""

#: ../source/overview.rst:353
#: 3b6ada17af394638bef8f6441fb73640
msgid "Bringing your own kernel"
msgstr ""

#: ../source/overview.rst:355
#: 6c2431e00754432ba0e3164bc1b00272
msgid "Most operating systems support some form of classical virtualization, running applications packaged as images containing a full operating system of their own. Running these virtual machines, or VMs, is a mature approach, widespread in data center environments."
msgstr ""

#: ../source/overview.rst:360
#: abd43a780b2c454182ca5c70a2e0cd38
msgid "These techniques are mostly reserved for larger scale deployments in data centers, though certain complex applications can benefit from this packaging. Technologies are Python agnostic, and include:"
msgstr ""

#: ../source/overview.rst:364
#: 7dd527a8c3434810aa2d3c9866c4807e
msgid "`Vagrant <https://www.vagrantup.com/>`_"
msgstr ""

#: ../source/overview.rst:365
#: d52a4eb770484053a3fd192de2f4ca96
msgid "`VHD <https://en.wikipedia.org/wiki/VHD_(file_format)>`_, `AMI <https://en.wikipedia.org/wiki/Amazon_Machine_Image>`_, and `other formats <https://docs.openstack.org/image-guide/image-formats.html>`_"
msgstr ""

#: ../source/overview.rst:366
#: c821238496834406860a18613597b56b
msgid "`OpenStack <https://www.redhat.com/en/topics/openstack>`_ - A cloud management system in Python, with extensive VM support"
msgstr ""

#: ../source/overview.rst:369
#: bcd9d841bcb54008b0c0bb897648259d
msgid "Bringing your own hardware"
msgstr ""

#: ../source/overview.rst:371
#: 170d8f8e97be4afb80a2f444374e4ec0
msgid "The most all-encompassing way to ship your software would be to ship it already-installed on some hardware. This way, your software's user would require only electricity."
msgstr ""

#: ../source/overview.rst:375
#: a6669a9359e640f1b405d1a0c8489d5e
msgid "Whereas the virtual machines described above are primarily reserved for the tech-savvy, you can find hardware appliances being used by everyone from the most advanced data centers to the youngest children."
msgstr ""

#: ../source/overview.rst:379
#: 6d43b7cc64b44185b791e0fbdb0b0525
msgid "Embed your code on an `Adafruit <https://github.com/adafruit/circuitpython#adafruit-circuitpython>`_, `MicroPython <https://micropython.org/>`_, or more-powerful hardware running Python, then ship it to the datacenter or your users' homes. They plug and play, and you can call it a day."
msgstr ""

#: ../source/overview.rst:389
#: 514a463af48a49ce8cc87427bb633406
msgid "A summary of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:389
#: b13109c354224c14a94ce780675a93b3
msgid "The simplified gamut of technologies used to package Python applications."
msgstr ""

#: ../source/overview.rst:392
#: ce623ec113fd444eae7aa5bc6400391e
msgid "What about..."
msgstr ""

#: ../source/overview.rst:394
#: 424dac825de94e2cb624305331d52f72
msgid "The sections above can only summarize so much, and you might be wondering about some of the more conspicuous gaps."
msgstr ""

#: ../source/overview.rst:398
#: 7f043c18883a416c90eb7d51b6f59f16
msgid "Operating system packages"
msgstr ""

#: ../source/overview.rst:400
#: b8d170c834f94454b14c7b0d951ea5c0
msgid "As mentioned in :ref:`depending-on-a-separate-ecosystem` above, some operating systems have package managers of their own. If you're very sure of the operating system you're targeting, you can depend directly on a format like `deb <https://en.wikipedia.org/wiki/Deb_(file_format)>`_ (for Debian, Ubuntu, etc.) or `RPM <https://en.wikipedia.org/wiki/RPM_Package_Manager>`_ (for Red Hat, Fedora, etc.), and use that built-in package manager to take care of installation, and even deployment. You can even use `FPM <https://fpm.readthedocs.io/en/latest/source/virtualenv.html>`_ to generate both deb and RPMs from the same source."
msgstr ""

#: ../source/overview.rst:411
#: 092a91013c144fa98887c874fc9bb77b
msgid "In most deployment pipelines, the OS package manager is just one piece of the puzzle."
msgstr ""

#: ../source/overview.rst:417
#: 4d131466aaf445a389f648180f95f185
msgid "`Virtualenvs <http://python-guide.readthedocs.io/en/latest/dev/virtualenvs/>`_ have been an indispensable tool for multiple generations of Python developer, but are slowly fading from view, as they are being wrapped by higher-level tools. With packaging in particular, virtualenvs are used as a primitive in `the dh-virtualenv tool <http://dh-virtualenv.readthedocs.io/en/1.0/tutorial.html>`_ and `osnap <https://github.com/jamesabel/osnap>`_, both of which wrap virtualenvs in a self-contained way."
msgstr ""

#: ../source/overview.rst:427
#: 3b7a07a6517c49688d83b935e5fe643a
msgid "For production deployments, do not rely on running ``python -m pip install`` from the Internet into a virtualenv, as one might do in a development environment. The overview above is full of much better solutions."
msgstr ""

#: ../source/overview.rst:432
#: 3a42db44cb67424081152053041c406b
msgid "Security"
msgstr ""

#: ../source/overview.rst:434
#: 9526c48ce61945959c2da24181e49a47
msgid "The further down the gradient you come, the harder it gets to update components of your package. Everything is more tightly bound together."
msgstr ""

#: ../source/overview.rst:437
#: 2a0242a93688464e9905b1342d57d7a0
msgid "For example, if a kernel security issue emerges, and you're deploying containers, the host system's kernel can be updated without requiring a new build on behalf of the application. If you deploy VM images, you'll need a new build. Whether or not this dynamic makes one option more secure is still a bit of an old debate, going back to the still-unsettled matter of `static versus dynamic linking <https://www.google.com/search?channel=fs&q=static+vs+dynamic+linking>`_."
msgstr ""

#: ../source/overview.rst:446
#: e225ae55cfe64823ba4055a85018392d
msgid "Wrap up"
msgstr ""

#: ../source/overview.rst:448
#: a94893e5ae694d398617475106c4bc99
msgid "Packaging in Python has a bit of a reputation for being a bumpy ride. This impression is mostly a byproduct of Python's versatility. Once you understand the natural boundaries between each packaging solution, you begin to realize that the varied landscape is a small price Python programmers pay for using one of the most balanced, flexible languages available."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:6
#: 5b15157f1253426cae900a5b9e2578d9
msgid "Binary distribution format"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:8
#: d2262d89388e4850bde05b59cc029848
msgid "The binary distribution format (:term:`wheel <Wheel>`) was originally defined in :pep:`427`. The current version of the specification is here."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:13
#: d412b393440c4127a40d9cc9d8a8f912
msgid "Abstract"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:15
#: 01faf6cdda9141c2bdf4a28aec00103a
msgid "This PEP describes a built-package format for Python called \"wheel\"."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:17
#: 499e2e77b8b7492d9b7ff434fec80df9
msgid "A wheel is a ZIP-format archive with a specially formatted file name and the ``.whl`` extension.  It contains a single distribution nearly as it would be installed according to PEP 376 with a particular installation scheme.  Although a specialized installer is recommended, a wheel file may be installed by simply unpacking into site-packages with the standard 'unzip' tool while preserving enough information to spread its contents out onto their final paths at any later time."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:27
#: 15de8f0425c54594a72569f25bb5a77b
msgid "PEP Acceptance"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:29
#: 139a412fec1f4d49b95e075c63063be9
msgid "This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 [1]_"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:34
#: a24d54feffcb4d939b5261b6ee068a4b
msgid "Rationale"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:36
#: 05d589e2ef1e49a3987315654a1f0c9c
msgid "Python needs a package format that is easier to install than sdist. Python's sdist packages are defined by and require the distutils and setuptools build systems, running arbitrary code to build-and-install, and re-compile, code just so it can be installed into a new virtualenv.  This system of conflating build-install is slow, hard to maintain, and hinders innovation in both build systems and installers."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:43
#: 782fd0bd50b0463685b6017c09d7f452
msgid "Wheel attempts to remedy these problems by providing a simpler interface between the build system and the installer.  The wheel binary package format frees installers from having to know about the build system, saves time by amortizing compile time over many installations, and removes the need to install a build system in the target environment."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:52
#: 5747b9100cc44d31a767e5dcf9d88eea
msgid "Details"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:55
#: 9a667102ebe946dcb0c60722eca280bf
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:57
#: 45e72495269347ada1e510569ed92351
msgid "Wheel installation notionally consists of two phases:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:59
#: 13aa17d74462443e9d6a8bf1f1a872be
msgid "Unpack."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:61
#: cffb570d1852406694d6426643479ba5
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:62
#: 78f5cece8e544f24bf8194358d504a8d
msgid "Check that installer is compatible with Wheel-Version.  Warn if minor version is greater, abort if major version is greater."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:64
#: a297fa980bba40009770e458823756e2
msgid "If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:66
#: 91310639dd5d45409a050aa7fc9ffa5b
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:68
#: 29603a8b22c74d89aa888513976967b8
msgid "Spread."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:70
#: 6274f6f637014149b43e9b869bc00e8f
msgid "Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there is data) ``distribution-1.0.data/``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:72
#: 9f2e4c190d2c482398fb9ec8e80c70b9
msgid "Move each subtree of ``distribution-1.0.data/`` onto its destination path. Each subdirectory of ``distribution-1.0.data/`` is a key into a dict of destination directories, such as ``distribution-1.0.data/(purelib|platlib|headers|scripts|data)``. The initially supported paths are taken from ``distutils.command.install``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:78
#: 5aa5e39762264b4c8bef31028c222e89
msgid "If applicable, update scripts starting with ``#!python`` to point to the correct interpreter."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:80
#: 46475d0441984cefb04180754a946572
msgid "Update ``distribution-1.0.dist-info/RECORD`` with the installed paths."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:82
#: cb49c1a1fb9c45329d991c19da084daa
msgid "Remove empty ``distribution-1.0.data`` directory."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:83
#: fb48aad3fb5947a493359bbc0343af16
msgid "Compile any installed .py to .pyc. (Uninstallers should be smart enough to remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:87
#: 35c8a0b0d8a34a4f948b0000825cce88
msgid "Recommended installer features"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:97
#: 42df2f0031444c3480c64604e85d9b07
msgid "Rewrite ``#!python``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:90
#: 07f07cefaed34ade9bc86484ec264c10
msgid "In wheel, scripts are packaged in ``{distribution}-{version}.data/scripts/``.  If the first line of a file in ``scripts/`` starts with exactly ``b'#!python'``, rewrite to point to the correct interpreter.  Unix installers may need to add the +x bit to these files if the archive was created on Windows."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:96
#: ea6e511c444c4f3fb1d5d72e11f7d8f6
msgid "The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a GUI script instead of a console script."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:102
#: 2b2bf2f5614b4317b39530149b7a33e7
msgid "Generate script wrappers."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:100
#: 8e215a8282a7484b97ef8e2ad9347393
msgid "In wheel, scripts packaged on Unix systems will certainly not have accompanying .exe wrappers.  Windows installers may want to add them during install."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:105
#: 84cf1f133afb46e1bfa3c33fa1e5f508
msgid "Recommended archiver features"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:112
#: bfa25e9e8ba54d018281b333dc721f19
msgid "Place ``.dist-info`` at the end of the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:108
#: 2042ebba92574cf4a63199e142bb1c93
msgid "Archivers are encouraged to place the ``.dist-info`` files physically at the end of the archive.  This enables some potentially interesting ZIP tricks including the ability to amend the metadata without rewriting the entire archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:115
#: 1d7849b0b3984c58b732eceb58343c02
msgid "File Format"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:118
#: c6ee066b2d1745998d7f2a5915604c9c
msgid "File name convention"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:120
#: 1f469f3b23db447d9a919a1380578ade
msgid "The wheel filename is ``{distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:124
#: 6b9b4d688e9b4fd392ae9563b2818ba0
msgid "distribution"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:124
#: 6c0efdc0904043ed8b3f21986de8fccc
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:127
#: 69fba18bd1b34f94918a948b0f30bdb1
msgid "Distribution version, e.g. 1.0."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:135
#: 3961c9539d1347ac9cfd04d847f382e4
msgid "build tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:130
#: 0c833c562bb24d6ebfd19e600f2d98fa
msgid "Optional build number.  Must start with a digit.  Acts as a tie-breaker if two wheel file names are the same in all other respects (i.e. name, version, and other tags).  Sort as an empty tuple if unspecified, else sort as a two-item tuple with the first item being the initial digits as an ``int``, and the second item being the remainder of the tag as a ``str``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:138
#: 0bcb940c54da4d9bab024d58fb28695f
msgid "language implementation and version tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:138
#: 7d5b3c5b6904459a8bf6c2b6298713a1
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:141
#: e24199ccbee34d80bb922f1887f02ca7
msgid "abi tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:141
#: 8d5195582a864d6b9663d131e824d31b
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:144
#: 49ca5653a95a4cc4a4b70e03c002cd4b
msgid "platform tag"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:144
#: 0c04cc4e15004b9ca3424f616d1a3139
msgid "E.g. 'linux_x86_64', 'any'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:146
#: e63d82c551d34fa2b5c303cda979e427
msgid "For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build of a package called 'distribution', and is compatible with Python 2.7 (any Python 2.7 implementation), with no ABI (pure Python), on any CPU architecture."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:151
#: 8948e660303a45ada7f75ea5327c1367
msgid "The last three components of the filename before the extension are called \"compatibility tags.\"  The compatibility tags express the package's basic interpreter requirements and are detailed in PEP 425."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:156
#: 7df40522bc7848b0a37f46016fcdcfe5
msgid "Escaping and Unicode"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:158
#: a8d6323ee9d84feb933835a78f8880c2
msgid "As the components of the filename are separated by a dash (``-``, HYPHEN-MINUS), this character cannot appear within any component. This is handled as follows:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:161
#: a6d6d4b5758b43c190ab7d39e3476ea0
msgid "In distribution names, any run of ``-_.`` characters (HYPHEN-MINUS, LOW LINE and FULL STOP) should be replaced with ``_`` (LOW LINE). This is equivalent to :pep:`503` normalisation followed by replacing ``-`` with ``_``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:164
#: b9c518f2096e4e61b59a2fb009dddb3e
msgid "Version numbers should be normalised according to :pep:`440`. Normalised version numbers cannot contain ``-``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:166
#: 264a899c7e464fd1b117495ddb685cde
msgid "The remaining components may not contain ``-`` characters, so no escaping is necessary."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:169
#: ec37a7ddfafc4b25a3784b52a9eccc08
msgid "Tools producing wheels should verify that the filename components do not contain ``-``, as the resulting file may not be processed correctly if they do."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:172
#: 0f3e4e6eb7f040439bd9e95b64c4df4f
msgid "The archive filename is Unicode.  It will be some time before the tools are updated to support non-ASCII filenames, but they are supported in this specification."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:176
#: 205334faff4a400e9575603189853ffc
msgid "The filenames *inside* the archive are encoded as UTF-8.  Although some ZIP clients in common use do not properly display UTF-8 filenames, the encoding is supported by both the ZIP specification and Python's ``zipfile``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:182
#: 2c5952ff60e543c79221cbaa7b3f0f63
msgid "File contents"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:184
#: 6e323ebf3bd742c0abe590632eedc208
msgid "The contents of a wheel file, where {distribution} is replaced with the name of the package, e.g. ``beaglevote`` and {version} is replaced with its version, e.g. ``1.0.0``, consist of:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:188
#: 83943d9e05ff4ca98b72847e33653615
msgid "``/``, the root of the archive, contains all files to be installed in ``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and ``platlib`` are usually both ``site-packages``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:191
#: 7143169525d14c4d8e6700c22a1ae5d2
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:192
#: e7676423ef494486923d204169f28e13
msgid "``{distribution}-{version}.data/`` contains one subdirectory for each non-empty install scheme key not already covered, where the subdirectory name is an index into a dictionary of install paths (e.g. ``data``, ``scripts``, ``include``, ``purelib``, ``platlib``)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:196
#: 6dd2e84ff81b487aa489702ea97d8ecf
msgid "Python scripts must appear in ``scripts`` and begin with exactly ``b'#!python'`` in order to enjoy script wrapper generation and ``#!python`` rewriting at install time.  They may have any or no extension."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:200
#: 2db6ea55a81a4af499efbb7f4b7cc8f7
msgid "``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 or greater format metadata."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:202
#: 4ad97675b2e44f30bdf0f18bc9bef59b
msgid "``{distribution}-{version}.dist-info/WHEEL`` is metadata about the archive itself in the same basic key: value format::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:212
#: 88d6ddd1776e4d4d8cfba3d0e4be399f
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:213
#: eb22e4f219e443439d29c4cc6f71d1a5
msgid "``Generator`` is the name and optionally the version of the software that produced the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:215
#: fa7a957a5fc341c198b42e9ed1f6570f
msgid "``Root-Is-Purelib`` is true if the top level directory of the archive should be installed into purelib; otherwise the root should be installed into platlib."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:218
#: b5dcda0cce974c12b1af04229a948b57
msgid "``Tag`` is the wheel's expanded compatibility tags; in the example the filename would contain ``py2.py3-none-any``."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:220
#: e1095c025121402689ed85cc49bafcef
msgid "``Build`` is the build number and is omitted if there is no build number."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:221
#: d0495ed68fa34610ab5042a5b5036064
msgid "A wheel installer should warn if Wheel-Version is greater than the version it supports, and must fail if Wheel-Version has a greater major version than the version it supports."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:224
#: ae28521538a74a6b8ab477270947dbca
msgid "Wheel, being an installation format that is intended to work across multiple versions of Python, does not generally include .pyc files."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:226
#: 8195e730d1ed496681b83e106ca2141b
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:228
#: 5f96f2a2e09d4c72b0ac87bd10c5582a
msgid "This version of the wheel specification is based on the distutils install schemes and does not define how to install files to other locations. The layout offers a superset of the functionality provided by the existing wininst and egg binary formats."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:235
#: ../source/specifications/recording-installed-packages.rst:35
#: cb1a63405b3a4e21970aa36555769d75
#: b7f53a33e5ee408eae8accd079000d42
msgid "The .dist-info directory"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:237
#: f08323d5f13f4bcbb01e40dff859ca26
msgid "Wheel .dist-info directories include at a minimum METADATA, WHEEL, and RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:239
#: f5a3e6d365c944cab1583e890793bcda
msgid "METADATA is the package metadata, the same format as PKG-INFO as found at the root of sdists."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:241
#: ce00f45762a04d54ab67b17968723770
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:242
#: b2cbfa32b74740a6bc0e45f751badb8f
msgid "RECORD is a list of (almost) all the files in the wheel and their secure hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a hash of itself, must include its hash.  The hash algorithm must be sha256 or better; specifically, md5 and sha1 are not permitted, as signed wheel files rely on the strong hashes in RECORD to validate the integrity of the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:248
#: e8cd8db0a2834b01b8e61bbaa5011619
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:249
#: 401d28aa94b04c9ab06ecdcf2ef2a41e
msgid "RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:251
#: 1d600a4c549a4f9a91f2291fdd82d6fa
msgid "RECORD.p7s is allowed as a courtesy to anyone who would prefer to use S/MIME signatures to secure their wheel files.  It is not mentioned in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:254
#: d7b267eee1ed4adcaf42176f9e672847
msgid "During extraction, wheel installers verify all the hashes in RECORD against the file contents.  Apart from RECORD and its signatures, installation will fail if any file in the archive is not both mentioned and correctly hashed in RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:261
#: bf6773363cb349e4b4e3ce2413b2a536
msgid "The .data directory"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:263
#: da43b29a748b40c9b4c749da09f340e0
msgid "Any file that is not normally installed inside site-packages goes into the .data directory, named as the .dist-info directory but with the .data/ extension::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:271
#: d45986ccdea94eb9bd08c49783e356a5
msgid "The .data directory contains subdirectories with the scripts, headers, documentation and so forth from the distribution.  During installation the contents of these subdirectories are moved onto their destination paths."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:277
#: 7354e4982fa245cbbed2fea804292f5b
msgid "Signed wheel files"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:279
#: 19f6e05368e04e04bfcdbc657b3c693a
msgid "Wheel files include an extended RECORD that enables digital signatures.  PEP 376's RECORD is altered to include a secure hash ``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding with no trailing = characters) as the second column instead of an md5sum.  All possible entries are hashed, including any generated files such as .pyc files, but not RECORD which cannot contain its own hash. For example::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:290
#: 725007f4e3fc43fa8d9f08c91aa17f36
msgid "The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in RECORD at all since they can only be added after RECORD is generated. Every other file in the archive must have a correct hash in RECORD or the installation will fail."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:295
#: 5a2adbfb418040c4adfa12f8a2b67062
msgid "If JSON web signatures are used, one or more JSON Web Signature JSON Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent to RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of RECORD as the signature's JSON payload::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:302
#: dce4f7bde36345e28169679dc4359619
msgid "(The hash value is the same format used in RECORD.)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:304
#: 2a87d397d670401d88d896ef63945e38
msgid "If RECORD.p7s is used, it must contain a detached S/MIME format signature of RECORD."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:307
#: 098717241d7d43af9ca73e24682c368a
msgid "A wheel installer is not required to understand digital signatures but MUST verify the hashes in RECORD against the extracted file contents. When the installer checks file hashes against RECORD, a separate signature checker only needs to establish that RECORD matches the signature."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:312
#: 3ee03295b8cf4adeac74dff598905a71
msgid "See"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:314
#: ad978c465e844f2bb0105ec458a5e0e1
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:315
#: 425c7527cb6e4c0ea9c72bf7595c81f1
msgid "http://self-issued.info/docs/draft-jones-jose-jws-json-serialization.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:316
#: 9f5188ffb677453ebf95161c06804cd9
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-key.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:317
#: 740f66885e20493faaa27ac5ebb7ab9a
msgid "http://self-issued.info/docs/draft-jones-jose-json-private-key.html"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:321
#: 3b221bf6c95a4900879ea3d9d855c712
msgid "Comparison to .egg"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:323
#: c9039cb519a844fc83ef24b334ceb1b9
msgid "Wheel is an installation format; egg is importable.  Wheel archives do not need to include .pyc and are less tied to a specific Python version or implementation. Wheel can install (pure Python) packages built with previous versions of Python so you don't always have to wait for the packager to catch up."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:328
#: 7145dd914f5c4ee5b3927a5b8339deb9
msgid "Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is compatible with the new world of Python packaging and the new concepts it brings."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:331
#: d1664110b798499880c7eb0ea2a242db
msgid "Wheel has a richer file naming convention for today's multi-implementation world.  A single wheel archive can indicate its compatibility with a number of Python language versions and implementations, ABIs, and system architectures.  Historically the ABI has been specific to a CPython release, wheel is ready for the stable ABI."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:337
#: cf0819ad1f1b4f22b6d1ccfddbbcaf59
msgid "Wheel is lossless.  The first wheel implementation bdist_wheel always generates egg-info, and then converts it to a .whl.  It is also possible to convert existing eggs and bdist_wininst distributions."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:341
#: 9967af8384c94c4b93c0554035daef61
msgid "Wheel is versioned.  Every wheel file contains the version of the wheel specification and the implementation that packaged it. Hopefully the next migration can simply be to Wheel 2.0."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:344
#: 2deac8bbb7cd4002aea8c65ee4f18643
msgid "Wheel is a reference to the other Python."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:348
#: 9654979cba994949a74fc0d2898e566c
msgid "FAQ"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:352
#: cc76683192ad4efda720687c77b9674a
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:354
#: 7e074da43e2342da966f13e6c4458cd4
msgid "This specification does not have an opinion on how you should organize your code.  The .data directory is just a place for any files that are not normally installed inside ``site-packages`` or on the PYTHONPATH. In other words, you may continue to use ``pkgutil.get_data(package, resource)`` even though *those* files will usually not be distributed in *wheel's* ``.data`` directory."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:363
#: 71db64edfb5943aead694fffe8045dbd
msgid "Why does wheel include attached signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:365
#: 6a55e78b936a488c8cb92120ad746b3b
msgid "Attached signatures are more convenient than detached signatures because they travel with the archive.  Since only the individual files are signed, the archive can be recompressed without invalidating the signature or individual files can be verified without having to download the whole archive."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:373
#: 901c654ff5334f0db6fd1ba8f6f6335c
msgid "Why does wheel allow JWS signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:375
#: 39af2e2218634cea9f3e08b700c8eb55
msgid "The JOSE specifications of which JWS is a part are designed to be easy to implement, a feature that is also one of wheel's primary design goals.  JWS yields a useful, concise pure-Python implementation."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:381
#: 2e92a852362f4210925692e920b90deb
msgid "Why does wheel also allow S/MIME signatures?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:383
#: 6fbafaba138245b29d7157f7e09729ea
msgid "S/MIME signatures are allowed for users who need or want to use existing public key infrastructure with wheel."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:386
#: e5586d357ae64295ada3fee2cbba2385
msgid "Signed packages are only a basic building block in a secure package update system.  Wheel only provides the building block."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:391
#: 004cb14dba1447758de6fd495a237e32
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:393
#: b67c0a106882459685b00bf6e8459695
msgid "Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is significant on some platforms. For example, Fedora installs pure Python packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:398
#: e0fc38d9c75e42639a387318a6c6fc8c
msgid "A wheel with \"Root-Is-Purelib: false\" with all its files in ``{name}-{version}.data/purelib`` is equivalent to a wheel with \"Root-Is-Purelib: true\" with those same files in the root, and it is legal to have files in both the \"purelib\" and \"platlib\" categories."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:403
#: e728afced01346e5b2eb669919886f06
msgid "In practice a wheel should have only one of \"purelib\" or \"platlib\" depending on whether it is pure Python or not and those files should be at the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:409
#: d03e97fca5124eba9cc9c967ea82b9b6
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:411
#: 16a44c24992849aab51c5a372b3e926d
msgid "Technically, due to the combination of supporting installation via simple extraction and using an archive format that is compatible with ``zipimport``, a subset of wheel files *do* support being placed directly on ``sys.path``. However, while this behaviour is a natural consequence of the format design, actually relying on it is generally discouraged."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:417
#: 07d39c831b934d98b622a21ce4874650
msgid "Firstly, wheel *is* designed primarily as a distribution format, so skipping the installation step also means deliberately avoiding any reliance on features that assume full installation (such as being able to use standard tools like ``pip`` and ``virtualenv`` to capture and manage dependencies in a way that can be properly tracked for auditing and security update purposes, or integrating fully with the standard build machinery for C extensions by publishing header files in the appropriate place)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:426
#: 62518a7b7fd6400b868ded78fe4185e1
msgid "Secondly, while some Python software is written to support running directly from a zip archive, it is still common for code to be written assuming it has been fully installed. When that assumption is broken by trying to run the software from a zip archive, the failures can often be obscure and hard to diagnose (especially when they occur in third party libraries). The two most common sources of problems with this are the fact that importing C extensions from a zip archive is *not* supported by CPython (since doing so is not supported directly by the dynamic loading machinery on any platform) and that when running from a zip archive the ``__file__`` attribute no longer refers to an ordinary filesystem path, but to a combination path that includes both the location of the zip archive on the filesystem and the relative path to the module inside the archive. Even when software correctly uses the abstract resource APIs internally, interfacing with external components may still require the availability of an actual on-disk file."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:443
#: 4dea681633e140089d86f8c5b1de442f
msgid "Like metaclasses, monkeypatching and metapath importers, if you're not already sure you need to take advantage of this feature, you almost certainly don't need it. If you *do* decide to use it anyway, be aware that many projects will require a failure to be reproduced with a fully installed package before accepting it as a genuine bug."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:450
#: 81e0951969be4c8f98dc677b481c071a
msgid "Changes"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:452
#: c1298872cca54abcb9d08b525cdadf62
msgid "Since :pep:`427`, this specification has changed as follows:"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:454
#: aecbd5dc69fd4121a93676032f3ddd2b
msgid "The rules on escaping in wheel filenames were revised, to bring them into line with what popular tools actually do (February 2021)."
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:461
#: 187537e3d9bf446a9faf7a5290ff7493
msgid "PEP acceptance (https://mail.python.org/pipermail/python-dev/2013-February/124103.html)"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:466
#: ecdc5b173efc4641aca407994abfbc9c
msgid "Appendix"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:468
#: ffc9f110eb304f69a1539f7b239e7fcd
msgid "Example urlsafe-base64-nopad implementation::"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:482
#: 872472a62b8c4af8b2c6a17cc9bdd8f4
msgid "Copyright"
msgstr ""

#: ../source/specifications/binary-distribution-format.rst:484
#: 1acc01c1fdd945e0b7b62cf2f18384d7
msgid "This document has been placed into the public domain."
msgstr ""

#: ../source/specifications/core-metadata.rst:5
#: abd36aa915e6423296a151c1d2611f70
msgid "Core metadata specifications"
msgstr ""

#: ../source/specifications/core-metadata.rst:7
#: 1407e1a4ae3449cbb8b9f0430d8f393b
msgid "Fields defined in the following specification should be considered valid, complete and not subject to change. The required fields are:"
msgstr ""

#: ../source/specifications/core-metadata.rst:10
#: adeb608f53a2420681ed23ae21ea615b
msgid "``Metadata-Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:11
#: 1a4062aed19e4ebc9b0a07ac9b9c1797
msgid "``Name``"
msgstr ""

#: ../source/specifications/core-metadata.rst:12
#: 21995ace7af74cb5bea4c8d0e212b90c
msgid "``Version``"
msgstr ""

#: ../source/specifications/core-metadata.rst:14
#: ec4b49d8eb62427d8e53720e6f4aa444
msgid "All the other fields are optional."
msgstr ""

#: ../source/specifications/core-metadata.rst:16
#: e143fbe8aa6748efba2215e500705fb3
msgid "The standard file format for metadata (including in :doc:`wheels <binary-distribution-format>` and :doc:`installed projects <recording-installed-packages>`) is based on the format of email headers. However, email formats have been revised several times, and exactly which email RFC applies to packaging metadata is not specified. In the absence of a precise definition, the practical standard is set by what the standard library :mod:`python:email.parser` module can parse using the :data:`~.python:email.policy.compat32` policy."
msgstr ""

#: ../source/specifications/core-metadata.rst:25
#: a96fe7298843468a9d27792731bff5d5
msgid "Although :pep:`566` defined a way to transform metadata into a JSON-compatible dictionary, this is not yet used as a standard interchange format. The need for tools to work with years worth of existing packages makes it difficult to shift to a new format."
msgstr ""

#: ../source/specifications/core-metadata.rst:30
#: 9926b4eef7e34624b3b8bf5719626663
msgid "*Interpreting old metadata:* In :pep:`566`, the version specifier field format specification was relaxed to accept the syntax used by popular publishing tools (namely to remove the requirement that version specifiers must be surrounded by parentheses). Metadata consumers may want to use the more relaxed formatting rules even for metadata files that are nominally less than version 2.1."
msgstr ""

#: ../source/specifications/core-metadata.rst:41
#: e9c96b3a565142548d46649274cf4867
msgid "Metadata-Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:45
#: 9893c76580be437fb3e0b1ee615884bb
msgid "Version of the file format; legal values are \"1.0\", \"1.1\", \"1.2\", \"2.1\" and \"2.2\"."
msgstr ""

#: ../source/specifications/core-metadata.rst:48
#: 26df78d242c443a5890fdce6f25b652d
msgid "Automated tools consuming metadata SHOULD warn if ``metadata_version`` is greater than the highest version they support, and MUST fail if ``metadata_version`` has a greater major version than the highest version they support (as described in :pep:`440`, the major version is the value before the first dot)."
msgstr ""

#: ../source/specifications/core-metadata.rst:54
#: 924438c846b84d0d820dff6c57121db7
msgid "For broader compatibility, build tools MAY choose to produce distribution metadata using the lowest metadata version that includes all of the needed fields."
msgstr ""

#: ../source/specifications/core-metadata.rst:58
#: ../source/specifications/core-metadata.rst:80
#: ../source/specifications/core-metadata.rst:95
#: ../source/specifications/core-metadata.rst:155
#: ../source/specifications/core-metadata.rst:170
#: ../source/specifications/core-metadata.rst:208
#: ../source/specifications/core-metadata.rst:283
#: ../source/specifications/core-metadata.rst:287
#: ../source/specifications/core-metadata.rst:291
#: ../source/specifications/core-metadata.rst:295
#: ../source/specifications/core-metadata.rst:327
#: ../source/specifications/core-metadata.rst:347
#: ../source/specifications/core-metadata.rst:373
#: ../source/specifications/core-metadata.rst:391
#: ../source/specifications/core-metadata.rst:416
#: ../source/specifications/core-metadata.rst:438
#: ../source/specifications/core-metadata.rst:600
#: ../source/specifications/core-metadata.rst:620
#: ../source/specifications/core-metadata.rst:630
#: e7655d1d6317435cbd05282aa4ab74f5
#: 2717fe81a4964ee8a8f44648c54ad28c
#: a2a8fd66e5834de8b5531f829c7ec802
#: 80e87b6713b64b21959c76abd5052878
#: 507c8dba60334761a62245352a4b8c4e
#: 6ee1ef8d40c14e9b9255bdf165cfd6a4
#: 95987ff5ee044bc6b06cba472277cfd1
#: 77dfea0edf494853abc59b5ff1725b4a
#: 5c03e03e98fa49e2bb7ef16d935753b3
#: 1aae0b08bb3647c7bbd41b5b4ac34cfa
#: 0bb54321592a4d60b325aa8d5cf6ac0e
#: 2096f40e2b0a4558bd41c990cfdc2ccd
#: c16e1240de9e4f798777496337735199
#: 7f89587afab04f278256324823232650
#: 6c74999f5238412a9c3f24d16bad4941
#: 7def4183fad1477f8d9e865205d60440
#: 4d2774752fcd4d97baa96d765797ab7f
#: 4db4c2d53c2b46649d156f1964c2f57a
#: be0bc17edb2547a9aca9ebcfbe037ae2
msgid "Example::"
msgstr ""

#: ../source/specifications/core-metadata.rst:66
#: dca04b15e31f42eca76df9fd7a9a2db9
msgid "Name"
msgstr ""

#: ../source/specifications/core-metadata.rst:69
#: 91e582e82f9f4ee19087a0cb390d8286
msgid "Added additional restrictions on format from :pep:`508`"
msgstr ""

#: ../source/specifications/core-metadata.rst:72
#: 70d4eac5d82e4cb583693d0759a50b7e
msgid "The name of the distribution. The name field is the primary identifier for a distribution. A valid name consists only of ASCII letters and numbers, period, underscore and hyphen. It must start and end with a letter or number. Distribution names are limited to those which match the following regex (run with ``re.IGNORECASE``)::"
msgstr ""

#: ../source/specifications/core-metadata.rst:88
#: 221c4da3fae8471ebe70b16c2610dafd
msgid "Version"
msgstr ""

#: ../source/specifications/core-metadata.rst:92
#: 8f35cb7c7e23406f8b352c3a62a0e3e6
msgid "A string containing the distribution's version number.  This field  must be in the format specified in :pep:`440`."
msgstr ""

#: ../source/specifications/core-metadata.rst:101
#: feac33324c024e91a04532ac44ac908c
msgid "Dynamic (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:105
#: fe9c5ee7742d4a03a7c838782945c78f
msgid "A string containing the name of another core metadata field. The field names ``Name`` and ``Version`` may not be specified in this field."
msgstr ""

#: ../source/specifications/core-metadata.rst:108
#: 7f827ecd066f4ea396c3f62ff17403d1
msgid "When found in the metadata of a source distribution, the following rules apply:"
msgstr ""

#: ../source/specifications/core-metadata.rst:111
#: 674b3596c6344b4caef6e1071673004b
msgid "If a field is *not* marked as ``Dynamic``, then the value of the field in any wheel built from the sdist MUST match the value in the sdist. If the field is not in the sdist, and not marked as ``Dynamic``, then it MUST NOT be present in the wheel."
msgstr ""

#: ../source/specifications/core-metadata.rst:115
#: 8cebebf434554fbfa56fed7803edfb64
msgid "If a field is marked as ``Dynamic``, it may contain any valid value in a wheel built from the sdist (including not being present at all)."
msgstr ""

#: ../source/specifications/core-metadata.rst:118
#: 2423124a161546d9bea6e21d1c112c34
msgid "If the sdist metadata version is older than version 2.2, then all fields should be treated as if they were specified with ``Dynamic`` (i.e. there are no special restrictions on the metadata of wheels built from the sdist)."
msgstr ""

#: ../source/specifications/core-metadata.rst:122
#: a6b100d7ed824541a7d6c773d6d112ba
msgid "In any context other than a source distribution, ``Dynamic`` is for information only, and indicates that the field value was calculated at wheel build time, and may not be the same as the value in the sdist or in other wheels for the project."
msgstr ""

#: ../source/specifications/core-metadata.rst:127
#: 95e120893d724ace9674e27d3bcc78dd
msgid "Full details of the semantics of ``Dynamic`` are described in :pep:`643`."
msgstr ""

#: ../source/specifications/core-metadata.rst:131
#: 36054274018941639b7dd0a414403982
msgid "Platform (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:135
#: d3ec09a36d72446c971d0588702d1916
msgid "A Platform specification describing an operating system supported by the distribution which is not listed in the \"Operating System\" Trove classifiers. See \"Classifier\" below."
msgstr ""

#: ../source/specifications/core-metadata.rst:146
#: a66448df02564e619b18f838e560a468
msgid "Supported-Platform (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:150
#: edf5d33cb1314fe08bd6708fcab6ae6f
msgid "Binary distributions containing a PKG-INFO file will use the Supported-Platform field in their metadata to specify the OS and CPU for which the binary distribution was compiled.  The semantics of the Supported-Platform field are not specified in this PEP."
msgstr ""

#: ../source/specifications/core-metadata.rst:164
#: 9ffff83c4f1f4f3aa21802ce77bb05b0
msgid "Summary"
msgstr ""

#: ../source/specifications/core-metadata.rst:168
#: a2fdbd2425014a3d8a6fb4fb6e9ee704
msgid "A one-line summary of what the distribution does."
msgstr ""

#: ../source/specifications/core-metadata.rst:188
#: c0cb4df1834b4a818494dac7d9150538
msgid "This field may be specified in the message body instead."
msgstr ""

#: ../source/specifications/core-metadata.rst:191
#: 30d56aa5fe1947c589bef14154cac2c3
msgid "A longer description of the distribution that can run to several paragraphs.  Software that deals with metadata should not assume any maximum size for this field, though people shouldn't include their instruction manual as the description."
msgstr ""

#: ../source/specifications/core-metadata.rst:196
#: 98592a4837ef40cca9ebba8e12f505f8
msgid "The contents of this field can be written using reStructuredText markup [1]_.  For programs that work with the metadata, supporting markup is optional; programs can also display the contents of the field as-is.  This means that authors should be conservative in the markup they use."
msgstr ""

#: ../source/specifications/core-metadata.rst:202
#: 8c2ac3c56ec14f088f66364cbd1cdcd0
msgid "To support empty lines and lines with indentation with respect to the RFC 822 format, any CRLF character has to be suffixed by 7 spaces followed by a pipe (\"|\") char. As a result, the Description field is encoded into a folded field that can be interpreted by RFC822 parser [2]_."
msgstr ""

#: ../source/specifications/core-metadata.rst:219
#: dcf8447b4c1d412f9a9968de476ac646
msgid "This encoding implies that any occurrences of a CRLF followed by 7 spaces and a pipe char have to be replaced by a single CRLF when the field is unfolded using a RFC822 reader."
msgstr ""

#: ../source/specifications/core-metadata.rst:223
#: 0fa5d7c37e134e6bbe64c6ad8132398b
msgid "Alternatively, the distribution's description may instead be provided in the message body (i.e., after a completely blank line following the headers, with no indentation or other special formatting necessary)."
msgstr ""

#: ../source/specifications/core-metadata.rst:232
#: 0e2f3565e4364d5694e2b9f0a011faca
msgid "Description-Content-Type"
msgstr ""

#: ../source/specifications/core-metadata.rst:236
#: cefecee067994c3a8b9a0d8be1b71fcd
msgid "A string stating the markup syntax (if any) used in the distribution's description, so that tools can intelligently render the description."
msgstr ""

#: ../source/specifications/core-metadata.rst:239
#: 1da09ba40aba4d8ea50d8bd83b50b7e0
msgid "Historically, PyPI supported descriptions in plain text and `reStructuredText (reST) <http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html>`_, and could render reST into HTML. However, it is common for distribution authors to write the description in `Markdown <https://daringfireball.net/projects/markdown/>`_ (`RFC 7763 <https://tools.ietf.org/html/rfc7763>`_) as many code hosting sites render Markdown READMEs, and authors would reuse the file for the description. PyPI didn't recognize the format and so could not render the description correctly. This resulted in many packages on PyPI with poorly-rendered descriptions when Markdown is left as plain text, or worse, was attempted to be rendered as reST. This field allows the distribution author to specify the format of their description, opening up the possibility for PyPI and other tools to be able to render Markdown and other formats."
msgstr ""

#: ../source/specifications/core-metadata.rst:253
#: 8ac74ac883d94b5d82a15214eb44ad99
msgid "The format of this field is the same as the ``Content-Type`` header in HTTP (i.e.: `RFC 1341 <https://www.w3.org/Protocols/rfc1341/4_Content-Type.html>`_). Briefly, this means that it has a ``type/subtype`` part and then it can optionally have a number of parameters:"
msgstr ""

#: ../source/specifications/core-metadata.rst:259
#: 7411bdbc91fd47d0a100afceadd31dab
msgid "Format::"
msgstr ""

#: ../source/specifications/core-metadata.rst:263
#: b0599c35732d4a3ab839f74025a92c47
msgid "The ``type/subtype`` part has only a few legal values:"
msgstr ""

#: ../source/specifications/core-metadata.rst:265
#: 09a9c2e5a0084de3b617837b61afc480
msgid "``text/plain``"
msgstr ""

#: ../source/specifications/core-metadata.rst:266
#: 8e88b4bf816046b582585a3c9bd51a4b
msgid "``text/x-rst``"
msgstr ""

#: ../source/specifications/core-metadata.rst:267
#: 318d836bf047421eb80bc28104680f86
msgid "``text/markdown``"
msgstr ""

#: ../source/specifications/core-metadata.rst:269
#: 64ba0f35dde146738fa7f25222169bd3
msgid "The ``charset`` parameter can be used to specify the character encoding of the description. The only legal value is ``UTF-8``. If omitted, it is assumed to be ``UTF-8``."
msgstr ""

#: ../source/specifications/core-metadata.rst:273
#: 16e42c71c58f40c7a0153dafaa6dc407
msgid "Other parameters might be specific to the chosen subtype. For example, for the ``markdown`` subtype, there is an optional ``variant`` parameter that allows specifying the variant of Markdown in use (defaults to ``GFM`` if not specified). Currently, two variants are recognized:"
msgstr ""

#: ../source/specifications/core-metadata.rst:278
#: 5b7fa18c8979493daf3289f8a0b2f481
msgid "``GFM`` for `Github-flavored Markdown <https://tools.ietf.org/html/rfc7764#section-3.2>`_"
msgstr ""

#: ../source/specifications/core-metadata.rst:280
#: 8efe9569c8654895b3441e4697daaa56
msgid "``CommonMark`` for `CommonMark <https://tools.ietf.org/html/rfc7764#section-3.5>`_"
msgstr ""

#: ../source/specifications/core-metadata.rst:299
#: 6f1a80057fef48d0a8ae246e67861cf6
msgid "If a ``Description-Content-Type`` is not specified, then applications should attempt to render it as ``text/x-rst; charset=UTF-8`` and fall back to ``text/plain`` if it is not valid rst."
msgstr ""

#: ../source/specifications/core-metadata.rst:303
#: 5538308b45404579869a4a75d01ad6c1
msgid "If a ``Description-Content-Type`` is an unrecognized value, then the assumed content type is ``text/plain`` (Although PyPI will probably reject anything with an unrecognized value)."
msgstr ""

#: ../source/specifications/core-metadata.rst:307
#: 2a79ccd66f594c7bbcbe6a856eb17261
msgid "If the ``Description-Content-Type`` is ``text/markdown`` and ``variant`` is not specified or is set to an unrecognized value, then the assumed ``variant`` is ``GFM``."
msgstr ""

#: ../source/specifications/core-metadata.rst:311
#: 23b62c471e354bd28fe0c81ee6c52a56
msgid "So for the last example above, the ``charset`` defaults to ``UTF-8`` and the ``variant`` defaults to ``GFM`` and thus it is equivalent to the example before it."
msgstr ""

#: ../source/specifications/core-metadata.rst:320
#: 5e077ef280c946708c4e162d5a0d78eb
msgid "Keywords"
msgstr ""

#: ../source/specifications/core-metadata.rst:324
#: 3592056ff6cc490098be8097adc0abca
msgid "A list of additional keywords, separated by commas, to be used to assist searching for the distribution in a larger catalog."
msgstr ""

#: ../source/specifications/core-metadata.rst:333
#: daa5a405a6c3402db71d670871a38475
msgid "The specification previously showed keywords separated by spaces, but distutils and setuptools implemented it with commas. These tools have been very widely used for many years, so it was easier to update the specification to match the de facto standard."
msgstr ""

#: ../source/specifications/core-metadata.rst:341
#: b1f1a46de23241ce839fef391e83b96d
msgid "Home-page"
msgstr ""

#: ../source/specifications/core-metadata.rst:345
#: 1ec08e01230b46198cfd4013dbe3ceb8
msgid "A string containing the URL for the distribution's home page."
msgstr ""

#: ../source/specifications/core-metadata.rst:353
#: 2c370d1a332a44378783d20d19597800
msgid "Download-URL"
msgstr ""

#: ../source/specifications/core-metadata.rst:357
#: 927b3bfd59b9401cad54a5637676aec6
msgid "A string containing the URL from which this version of the distribution can be downloaded.  (This means that the URL can't be something like \".../BeagleVote-latest.tgz\", but instead must be \".../BeagleVote-0.45.tgz\".)"
msgstr ""

#: ../source/specifications/core-metadata.rst:366
#: 34d531bfd77f4fbb99f39f0599fd279d
msgid "Author"
msgstr ""

#: ../source/specifications/core-metadata.rst:370
#: 29b27561647941998c6da311003dc871
msgid "A string containing the author's name at a minimum; additional contact information may be provided."
msgstr ""

#: ../source/specifications/core-metadata.rst:383
#: 2335f2f43d5a4dba981fca6a89286992
msgid "Author-email"
msgstr ""

#: ../source/specifications/core-metadata.rst:387
#: 2b5f1d5944e54c6abf81176b930d7578
msgid "A string containing the author's e-mail address.  It can contain a name and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""

#: ../source/specifications/core-metadata.rst:395
#: ../source/specifications/core-metadata.rst:442
#: eb1581f978484a518f95fa0a059d4ae5
#: e80ce00a71bc450d94d361318f734d34
msgid "Per RFC-822, this field may contain multiple comma-separated e-mail addresses::"
msgstr ""

#: ../source/specifications/core-metadata.rst:405
#: 031e89acec5346bca6e93fa315086c2a
msgid "Maintainer"
msgstr ""

#: ../source/specifications/core-metadata.rst:409
#: a6c5fc0a78454465af66bf38e00c0594
msgid "A string containing the maintainer's name at a minimum; additional contact information may be provided."
msgstr ""

#: ../source/specifications/core-metadata.rst:412
#: da41a0860ea940a19cfe135777c7d169
msgid "Note that this field is intended for use when a project is being maintained by someone other than the original author:  it should be omitted if it is identical to ``Author``."
msgstr ""

#: ../source/specifications/core-metadata.rst:426
#: 79a872e2c29045b6b7a5d5d65e5a44c7
msgid "Maintainer-email"
msgstr ""

#: ../source/specifications/core-metadata.rst:430
#: 46ad799d1baf4381aa4a44b62333c10d
msgid "A string containing the maintainer's e-mail address.  It can contain a name and e-mail address in the legal forms for a RFC-822 ``From:`` header."
msgstr ""

#: ../source/specifications/core-metadata.rst:434
#: 71688ee6beff41e3984e788d06187947
msgid "Note that this field is intended for use when a project is being maintained by someone other than the original author:  it should be omitted if it is identical to ``Author-email``."
msgstr ""

#: ../source/specifications/core-metadata.rst:452
#: de8e19e655c44e5e9f711c91a23c9427
msgid "License"
msgstr ""

#: ../source/specifications/core-metadata.rst:456
#: c5c767f904da4fdfb02a637a1c1771f6
msgid "Text indicating the license covering the distribution where the license is not a selection from the \"License\" Trove classifiers. See :ref:`\"Classifier\" <metadata-classifier>` below. This field may also be used to specify a particular version of a license which is named via the ``Classifier`` field, or to indicate a variation or exception to such a license."
msgstr ""

#: ../source/specifications/core-metadata.rst:476
#: 9ae0ae1fc214451dac56eadeb233784f
msgid "Classifier (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:480
#: c9ab191aba8e4ba49d52aea1a3e67735
msgid "Each entry is a string giving a single classification value for the distribution.  Classifiers are described in :pep:`301`, and the Python Package Index publishes a dynamic list of `currently defined classifiers <https://pypi.org/classifiers/>`__."
msgstr ""

#: ../source/specifications/core-metadata.rst:485
#: ../source/specifications/core-metadata.rst:574
#: ../source/specifications/core-metadata.rst:691
#: ../source/specifications/core-metadata.rst:715
#: 1183ed8560b84b46830a3f1ec041cc07
#: 9068e60648b44f0b9347bad7fd83fdaf
#: 9ebded4bf65c4c4ca5c8015daa05caa6
#: c16f4198c5fa48c8907899c9eea99f3d
msgid "This field may be followed by an environment marker after a semicolon."
msgstr ""

#: ../source/specifications/core-metadata.rst:496
#: 673aa422524542f4b177dfc8dbe81dd5
msgid "Requires-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:499
#: ../source/specifications/core-metadata.rst:561
#: ../source/specifications/core-metadata.rst:663
#: ../source/specifications/core-metadata.rst:704
#: fc2d66c68ece40e7aa5f3571dfc8ff67
#: 5a101a927e734ef5881c28ca1b13f112
#: 80ff0e69110c4d0a90425630ecef7ec3
#: f5f91810ec4446ab89cb036a04d36882
msgid "The field format specification was relaxed to accept the syntax used by popular publishing tools."
msgstr ""

#: ../source/specifications/core-metadata.rst:503
#: 153def5bc49f48a3851fa5964db3efcd
msgid "Each entry contains a string naming some other distutils project required by this distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:506
#: 052aee191bcc47c28da2e47d68d3885f
msgid "The format of a requirement string contains from one to four parts:"
msgstr ""

#: ../source/specifications/core-metadata.rst:508
#: dee055a4a10345c0b4148c7c6b877c25
msgid "A project name, in the same format as the ``Name:`` field. The only mandatory part."
msgstr ""

#: ../source/specifications/core-metadata.rst:510
#: 2784d4e9bc61439180c3009812e0f530
msgid "A comma-separated list of 'extra' names. These are defined by the required project, referring to specific features which may need extra dependencies."
msgstr ""

#: ../source/specifications/core-metadata.rst:513
#: afb6763357604f2a999244380489c4a4
msgid "A version specifier. Tools parsing the format should accept optional parentheses around this, but tools generating it should not use parentheses."
msgstr ""

#: ../source/specifications/core-metadata.rst:516
#: 64ab5a4160c34a71b071b2c180a688e7
msgid "An environment marker after a semicolon. This means that the requirement is only needed in the specified conditions."
msgstr ""

#: ../source/specifications/core-metadata.rst:519
#: bfbf9538cd8c4e4889ba42eaf0a84749
msgid "See :pep:`508` for full details of the allowed format."
msgstr ""

#: ../source/specifications/core-metadata.rst:521
#: bf3deab71e0d46338055963afde59503
msgid "The project names should correspond to names as found on the `Python Package Index`_."
msgstr ""

#: ../source/specifications/core-metadata.rst:524
#: 63a0577b740b4f7098a489299a7cf4c9
msgid "Version specifiers must follow the rules described in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:538
#: 4ec407ba01d0412ca46857e4c7939984
msgid "Requires-Python"
msgstr ""

#: ../source/specifications/core-metadata.rst:542
#: 7da5841f5f4148f99664e65d14f5fa63
msgid "This field specifies the Python version(s) that the distribution is guaranteed to be compatible with. Installation tools may look at this when picking which version of a project to install."
msgstr ""

#: ../source/specifications/core-metadata.rst:546
#: de8f3d5365434fe8aa6275804ca4570b
msgid "The value must be in the format specified in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:548
#: b077b86a72e6454288b22a2d5fc93058
msgid "This field cannot be followed by an environment marker."
msgstr ""

#: ../source/specifications/core-metadata.rst:558
#: a2bc19c436bf4833ad6add7543a0560c
msgid "Requires-External (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:565
#: 0109f8dc8dd04a7d8389abee8a359397
msgid "Each entry contains a string describing some dependency in the system that the distribution is to be used.  This field is intended to serve as a hint to downstream project maintainers, and has no semantics which are meaningful to the ``distutils`` distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:570
#: 715d63a44e4a429cae66deae387b8d33
msgid "The format of a requirement string is a name of an external dependency, optionally followed by a version declaration within parentheses."
msgstr ""

#: ../source/specifications/core-metadata.rst:576
#: 34fdfee4d5144df69dd28edee95d6845
msgid "Because they refer to non-Python software releases, version numbers for this field are **not** required to conform to the format specified in :pep:`440`:  they should correspond to the version scheme used by the external dependency."
msgstr ""

#: ../source/specifications/core-metadata.rst:581
#: b8f5a005228d4d0ea87fa82028954e3b
msgid "Notice that there is no particular rule on the strings to be used."
msgstr ""

#: ../source/specifications/core-metadata.rst:593
#: c070de3c6609447aa8ffb5ec83cd84dd
msgid "Project-URL (multiple-use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:597
#: 9d50ef6abf7e422cb81362e32e2e98a8
msgid "A string containing a browsable URL for the project and a label for it, separated by a comma."
msgstr ""

#: ../source/specifications/core-metadata.rst:604
#: 2562a6f36f6b4ca69ed031d8ac03bf6b
msgid "The label is free text limited to 32 characters."
msgstr ""

#: ../source/specifications/core-metadata.rst:612
#: 2119ae02aa83411f980b0323ebff3bec
msgid "Provides-Extra (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:616
#: 23c3c58035344699bb6d4ace9eecf6ca
msgid "A string containing the name of an optional feature. Must be a valid Python identifier. May be used to make a dependency conditional on whether the optional feature has been requested."
msgstr ""

#: ../source/specifications/core-metadata.rst:625
#: 4f1e5eab85a6407ea8aba8852c6fb370
msgid "A second distribution requires an optional dependency by placing it inside square brackets, and can request multiple features by separating them with a comma (,). The requirements are evaluated for each requested feature and added to the set of requirements for the distribution."
msgstr ""

#: ../source/specifications/core-metadata.rst:635
#: 89a2e391f1c24111b8f1ca839c05d6c5
msgid "Two feature names ``test`` and ``doc`` are reserved to mark dependencies that are needed for running automated tests and generating documentation, respectively."
msgstr ""

#: ../source/specifications/core-metadata.rst:639
#: e69d4493c9474f85bd95b6373532beb1
msgid "It is legal to specify ``Provides-Extra:`` without referencing it in any ``Requires-Dist:``."
msgstr ""

#: ../source/specifications/core-metadata.rst:644
#: 17a7ef37d9eb4c818735ad5ff6d90318
msgid "Rarely Used Fields"
msgstr ""

#: ../source/specifications/core-metadata.rst:646
#: 9fa3c4cc08ce4701a007e8bf5e06bfaf
msgid "The fields in this section are currently rarely used, as their design was inspired by comparable mechanisms in Linux package management systems, and it isn't at all clear how tools should interpret them in the context of an open index server such as `PyPI <https://pypi.org>`__."
msgstr ""

#: ../source/specifications/core-metadata.rst:651
#: 280c8158741448369d570d14ac77d86e
msgid "As a result, popular installation tools ignore them completely, which in turn means there is little incentive for package publishers to set them appropriately. However, they're retained in the metadata specification, as they're still potentially useful for informational purposes, and can also be used for their originally intended purpose in combination with a curated package repository."
msgstr ""

#: ../source/specifications/core-metadata.rst:660
#: 85910d4e24f441e49f4a9b0de380d60b
msgid "Provides-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:667
#: dff29d1a1bc34aba9369494153515562
msgid "Each entry contains a string naming a Distutils project which is contained within this distribution.  This field *must* include the project identified in the ``Name`` field, followed by the version : Name (Version)."
msgstr ""

#: ../source/specifications/core-metadata.rst:672
#: 3f727e5fa2f34ce0a51eaa586652794e
msgid "A distribution may provide additional names, e.g. to indicate that multiple projects have been bundled together.  For instance, source distributions of the ``ZODB`` project have historically included the ``transaction`` project, which is now available as a separate distribution.  Installing such a source distribution satisfies requirements for both ``ZODB`` and ``transaction``."
msgstr ""

#: ../source/specifications/core-metadata.rst:679
#: 0606b9cc7a5640d5b8cbdb501e3a9e5c
msgid "A distribution may also provide a \"virtual\" project name, which does not correspond to any separately-distributed project:  such a name might be used to indicate an abstract capability which could be supplied by one of multiple projects.  E.g., multiple projects might supply RDBMS bindings for use by a given ORM:  each project might declare that it provides ``ORM-bindings``, allowing other projects to depend only on having at most one of them installed."
msgstr ""

#: ../source/specifications/core-metadata.rst:687
#: 31a1e902044b494e93b0d0e9cddecfeb
msgid "A version declaration may be supplied and must follow the rules described in :doc:`version-specifiers`. The distribution's version number will be implied if none is specified."
msgstr ""

#: ../source/specifications/core-metadata.rst:701
#: fff91c89cb8443dab56600d486f705ea
msgid "Obsoletes-Dist (multiple use)"
msgstr ""

#: ../source/specifications/core-metadata.rst:708
#: 9283f9e21ba14ef29fbd84adf2fc3f82
msgid "Each entry contains a string describing a distutils project's distribution which this distribution renders obsolete, meaning that the two projects should not be installed at the same time."
msgstr ""

#: ../source/specifications/core-metadata.rst:712
#: f2e2d56e3c144f7d81b3182c1063e1e4
msgid "Version declarations can be supplied.  Version numbers must be in the format specified in :doc:`version-specifiers`."
msgstr ""

#: ../source/specifications/core-metadata.rst:717
#: cf5ebe48c245421bbfb94bfaea6489ff
msgid "The most common use of this field will be in case a project name changes, e.g. Gorgon 2.3 gets subsumed into Torqued Python 1.0. When you install Torqued Python, the Gorgon distribution should be removed."
msgstr ""

#: ../source/specifications/core-metadata.rst:730
#: 9359d448fa4946458893cf122533ca84
msgid "reStructuredText markup: http://docutils.sourceforge.net/"
msgstr ""

#: ../source/specifications/core-metadata.rst:735
#: af6e3890808c4747af7ac4132bd264b1
msgid "RFC 822 Long Header Fields: http://www.freesoft.org/CIE/RFC/822/7.htm"
msgstr ""

#: ../source/specifications/declaring-build-dependencies.rst:6
#: 220a94c6f5cf4a75a6a1bb8892b66eb2
msgid "Declaring build system dependencies"
msgstr ""

#: ../source/specifications/declaring-build-dependencies.rst:8
#: 17283052dfb548ca8405b1bdd978e1be
msgid "`pyproject.toml` is a build system independent file format defined in :pep:`518` that projects may provide in order to declare any Python level dependencies that must be installed in order to run the project's build system successfully."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:5
#: 72338416547f496096a109c27c63d5c4
msgid "Declaring project metadata"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:7
#: ce1cfa39f1214232997ed4f4184193a8
msgid ":pep:`621` specifies how to write a project's :ref:`core metadata <core-metadata>` in a ``pyproject.toml`` file for packaging-related tools to consume. It defines the following specification as the canonical source for the format used."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:12
#: 5355282f74694c548a4dfd51d1ded279
msgid "There are two kinds of metadata: *static* and *dynamic*. Static metadata is specified in the ``pyproject.toml`` file directly and cannot be specified or changed by a tool. Dynamic metadata is listed via the ``dynamic`` field (defined later in this specification) and represents metadata that a tool will later provide."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:18
#: 15880a8f4d0045c6a4b2843187c06c0c
msgid "The fields defined in this specification MUST be in a table named ``[project]`` in ``pyproject.toml``. No tools may add fields to this table which are not defined by this specification. For tools wishing to store their own settings in ``pyproject.toml``, they may use the ``[tool]`` table as defined in the :ref:`build dependency declaration specification <declaring-build-dependencies>`. The lack of a ``[project]`` table implicitly means the build back-end will dynamically provide all fields."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:27
#: d75d7db5f486483da6a5032e5232c17f
msgid "The only fields required to be statically defined are:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:29
#: ../source/specifications/declaring-project-metadata.rst:41
#: 91cae80b8bd3420bb5c519b865bdeb11
#: b7fcf208083b4ee999252f87131b1c9d
msgid "``name``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:31
#: e4b6f3fd60bd40c29a6cd2625d205148
msgid "The fields which are required but may be specified *either* statically or listed as dynamic are:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:34
#: ../source/specifications/declaring-project-metadata.rst:54
#: d569540643a74d51806105570cc96c22
#: 818d73b29cfb412aaa5715f3389a95f7
msgid "``version``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:36
#: a3a14bb7d21a48a492b1c83860edc268
msgid "All other fields are considered optional and my be specified statically, listed as dynamic, or left unspecified."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:43
#: ../source/specifications/declaring-project-metadata.rst:56
#: ../source/specifications/declaring-project-metadata.rst:68
#: ../source/specifications/declaring-project-metadata.rst:117
#: b5faae8d79ce452eb5fecc480652d352
#: c2c285a279524299a09c28e104980f7d
#: cc847d1d53b34a928d4f1ee2b1a3ddc4
#: 1f0058c1a15442768daa8a47b37697c6
msgid "TOML_ type: string"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:44
#: 1c123b98a65d40deb02372cc76139849
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Name <core-metadata-name>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:47
#: f933eebb594648099936a4e1181a790a
msgid "The name of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:49
#: 47c040797a89441fbcb8d4977b62a470
msgid "Tools SHOULD normalize this name, as specified by :pep:`503`, as soon as it is read for internal consistency."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:57
#: a8a7bb5a256540009ef1cab2826dab9e
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Version <core-metadata-version>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:60
#: c124cc8e16b64144b6660063bb7c450a
msgid "The version of the project as supported by :pep:`440`."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:62
#: 471b1e6973b54b878d7e62f6d8806f58
msgid "Users SHOULD prefer to specify already-normalized versions."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:66
#: c625e83c83984cf0a17e7f3b71671a18
msgid "``description``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:69
#: 82e48cb0ebca40e2b199cd2b6eb9d709
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Summary <core-metadata-summary>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:72
#: a937e614d72c4e59be48146feb9fe53c
msgid "The summary description of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:76
#: 8b83250bf75a4ca6bed4c2c9694a29c8
msgid "``readme``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:78
#: 24863e465e6641239dc53411ed5608c1
msgid "TOML_ type: string or table"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:79
#: 7759de48ace64bc8b1832ff6f2ef7692
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Description <core-metadata-description>` and :ref:`Description-Content-Type <core-metadata-description-content-type>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:83
#: 6746a1e6825e49989c8c07b1f4298724
msgid "The full description of the project (i.e. the README)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:85
#: 51e124811af8439dab732747357342da
msgid "The field accepts either a string or a table. If it is a string then it is a path relative to ``pyproject.toml`` to a text file containing the full description. Tools MUST assume the file's encoding is UTF-8. If the file path ends in a case-insensitive ``.md`` suffix, then tools MUST assume the content-type is ``text/markdown``. If the file path ends in a case-insensitive ``.rst``, then tools MUST assume the content-type is ``text/x-rst``. If a tool recognizes more extensions than this PEP, they MAY infer the content-type for the user without specifying this field as ``dynamic``. For all unrecognized suffixes when a content-type is not provided, tools MUST raise an error."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:96
#: da9e7b62bf624e61b2b90715646684b1
msgid "The ``readme`` field may also take a table. The ``file`` key has a string value representing a path relative to ``pyproject.toml`` to a file containing the full description. The ``text`` key has a string value which is the full description. These keys are mutually-exclusive, thus tools MUST raise an error if the metadata specifies both keys."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:103
#: 43b9d1ad061a4b9893ceea44ec470c7e
msgid "A table specified in the ``readme`` field also has a ``content-type`` field which takes a string specifying the content-type of the full description. A tool MUST raise an error if the metadata does not specify this field in the table. If the metadata does not specify the ``charset`` parameter, then it is assumed to be UTF-8. Tools MAY support other encodings if they choose to. Tools MAY support alternative content-types which they can transform to a content-type as supported by the :ref:`core metadata <core-metadata>`. Otherwise tools MUST raise an error for unsupported content-types."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:115
#: 99093e97441b4802b9a6833fe908eab4
msgid "``requires-python``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:118
#: f1f951eb0a2b47c6b718d4b3f632f213
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-Python <core-metadata-requires-python>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:121
#: aadfcb4b8cb6484e9acb5424cd0a1e9a
msgid "The Python version requirements of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:125
#: fbb70b09c9a34ada8ea31e1747dc5c39
msgid "``license``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:127
#: 34dca37755d041b994da8816a1c10903
msgid "TOML_ type: table"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:128
#: dec42ae79a6041e3b9f86152d9c46037
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`License <core-metadata-license>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:131
#: 6f0cf7dfe40c4bd1a91d69b4582b5a24
msgid "The table may have one of two keys. The ``file`` key has a string value that is a file path relative to ``pyproject.toml`` to the file which contains the license for the project. Tools MUST assume the file's encoding is UTF-8. The ``text`` key has a string value which is the license of the project.  These keys are mutually exclusive, so a tool MUST raise an error if the metadata specifies both keys."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:140
#: 643e45d7c7d2464386442fc79af6fdee
msgid "``authors``/``maintainers``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:142
#: 1c829541a44e461c87a8dab133ffa867
msgid "TOML_ type: Array of inline tables with string keys and values"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:143
#: 2c06327b34004b539df5ffaa50a03870
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Author <core-metadata-author>`, :ref:`Author-email <core-metadata-author-email>`, :ref:`Maintainer <core-metadata-maintainer>`, and :ref:`Maintainer-email <core-metadata-maintainer-email>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:149
#: 96c69eb751114b8a82174583b97415d6
msgid "The people or organizations considered to be the \"authors\" of the project. The exact meaning is open to interpretation — it may list the original or primary authors, current maintainers, or owners of the package."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:154
#: 913e0b1732794ac48c73168d3c34613c
msgid "The \"maintainers\" field is similar to \"authors\" in that its exact meaning is open to interpretation."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:157
#: 11920d5dc471401bb458d5ea44fb122a
msgid "These fields accept an array of tables with 2 keys: ``name`` and ``email``. Both values must be strings. The ``name`` value MUST be a valid email name (i.e. whatever can be put as a name, before an email, in `RFC 822`_) and not contain commas. The ``email`` value MUST be a valid email address. Both keys are optional."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:163
#: b1d98506ad2a4f52acf0539ab510eb41
msgid "Using the data to fill in :ref:`core metadata <core-metadata>` is as follows:"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:166
#: 17ce8323339a445e9911284f1c30dd39
msgid "If only ``name`` is provided, the value goes in :ref:`Author <core-metadata-author>` or :ref:`Maintainer <core-metadata-maintainer>` as appropriate."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:169
#: 06e0f90a4a76473bbf9ea5aec2d08821
msgid "If only ``email`` is provided, the value goes in :ref:`Author-email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-email>` as appropriate."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:173
#: dbbfc875e60f425f846da294ee1b4094
msgid "If both ``email`` and ``name`` are provided, the value goes in :ref:`Author-email <core-metadata-author-email>` or :ref:`Maintainer-email <core-metadata-maintainer-email>` as appropriate, with the format ``{name} <{email}>``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:177
#: b5b9de8ea48d4db8b1dc7f1dcee5ce4a
msgid "Multiple values should be separated by commas."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:181
#: 1c9616276a97400bbde5bc60e994d626
msgid "``keywords``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:183
#: ../source/specifications/declaring-project-metadata.rst:193
#: 42d76101b2b544d19107e48ec8162c92
#: b8908ac0fcb248acbae1d51b7eb28df7
msgid "TOML_ type: array of strings"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:184
#: e73e458729494d7eadf3272ac0ebcbdf
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Keywords <core-metadata-keywords>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:187
#: 326e78daa99844329ffd6b22fa950d11
msgid "The keywords for the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:191
#: 2900f259878a4a59b052378faea87048
msgid "``classifiers``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:194
#: bcb78ce530f246a28fe971bda419c3b4
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Classifier <core-metadata-classifier>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:197
#: ea3b050f98304629acf852b2216f707e
msgid "Trove classifiers which apply to the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:201
#: e1bb16f42675455fabe65cff37125694
msgid "``urls``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:203
#: b37a98b26fcf49c9b790f5cbf9df9eaf
msgid "TOML_ type: table with keys and values of strings"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:204
#: 8530f62dccdf478a89e73d52a883603b
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Project-URL <core-metadata-project-url>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:207
#: 72c60a439f924b72a1fd44e6ba2200db
msgid "A table of URLs where the key is the URL label and the value is the URL itself."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:212
#: 61c18ed356554ababb1196e48cd6c145
msgid "Entry points"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:214
#: 827b777247644befa4574454bbdf63d8
msgid "TOML_ type: table (``[project.scripts]``, ``[project.gui-scripts]``, and ``[project.entry-points]``)"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:216
#: 825f638f7fef491aa94ef21b6da8266b
msgid ":ref:`Entry points specification <entry-points>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:218
#: c738b46ea68d498390ad4a51f22b8415
msgid "There are three tables related to entry points. The ``[project.scripts]`` table corresponds to the ``console_scripts`` group in the :ref:`entry points specification <entry-points>`. The key of the table is the name of the entry point and the value is the object reference."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:224
#: 667e3f77f23341b3a66b46da12f03721
msgid "The ``[project.gui-scripts]`` table corresponds to the ``gui_scripts`` group in the :ref:`entry points specification <entry-points>`. Its format is the same as ``[project.scripts]``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:228
#: 83907993efbc4aa18e6662d47dbe8714
msgid "The ``[project.entry-points]`` table is a collection of tables. Each sub-table's name is an entry point group. The key and value semantics are the same as ``[project.scripts]``. Users MUST NOT create nested sub-tables but instead keep the entry point groups to only one level deep."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:234
#: 6146bc9c45e244bc8cec46e05588cb95
msgid "Build back-ends MUST raise an error if the metadata defines a ``[project.entry-points.console_scripts]`` or ``[project.entry-points.gui_scripts]`` table, as they would be ambiguous in the face of ``[project.scripts]`` and ``[project.gui-scripts]``, respectively."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:242
#: 842bb4b50fe348faba74b4de6f696e63
msgid "``dependencies``/``optional-dependencies``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:244
#: 615ded037a95450a97ce6110da3202d9
msgid "TOML_ type: Array of :pep:`508` strings (``dependencies``), and a table with values of arrays of :pep:`508` strings (``optional-dependencies``)"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:247
#: eb6df0f5601c4a80a44903dab839748b
msgid "Corresponding :ref:`core metadata <core-metadata>` field: :ref:`Requires-Dist <core-metadata-requires-dist>` and :ref:`Provides-Extra <core-metadata-provides-extra>`"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:251
#: bfd559a8a6054f39876c8755a7996cba
msgid "The (optional) dependencies of the project."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:253
#: e7f40a1570194b33a1e7e2e694ae0f7a
msgid "For ``dependencies``, it is a key whose value is an array of strings. Each string represents a dependency of the project and MUST be formatted as a valid :pep:`508` string. Each string maps directly to a :ref:`Requires-Dist <core-metadata-requires-dist>` entry."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:258
#: 1058f7e32bd147ae87f0d45d8ef340d7
msgid "For ``optional-dependencies``, it is a table where each key specifies an extra and whose value is an array of strings. The strings of the arrays must be valid :pep:`508` strings. The keys MUST be valid values for :ref:`Provides-Extra <core-metadata-provides-extra>`. Each value in the array thus becomes a corresponding :ref:`Requires-Dist <core-metadata-requires-dist>` entry for the matching :ref:`Provides-Extra <core-metadata-provides-extra>` metadata."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:269
#: f022a42ef41b4189b8e9ce9ea6edefdb
msgid "``dynamic``"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:271
#: 2af4aa4193d042f797a05141910145e1
msgid "TOML_ type: array of string"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:272
#: 5d22cb38b4f345ff9606614022baa378
msgid "A corresponding :ref:`core metadata <core-metadata>` field does not exist"
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:275
#: 86ea4521e1fe4106a31accb612e7ae1d
msgid "Specifies which fields listed by this PEP were intentionally unspecified so another tool can/will provide such metadata dynamically. This clearly delineates which metadata is purposefully unspecified and expected to stay unspecified compared to being provided via tooling later on."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:281
#: 2cfcc11ea499407b83de4c7c6f293503
msgid "A build back-end MUST honour statically-specified metadata (which means the metadata did not list the field in ``dynamic``)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:283
#: ef91827bbd4f4768b11442c7c1c4e1d0
msgid "A build back-end MUST raise an error if the metadata specifies ``name`` in ``dynamic``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:285
#: 250d7c7bb0934664a49acbce2a4ac1ef
msgid "If the :ref:`core metadata <core-metadata>` specification lists a field as \"Required\", then the metadata MUST specify the field statically or list it in ``dynamic`` (build back-ends MUST raise an error otherwise, i.e. it should not be possible for a required field to not be listed somehow in the ``[project]`` table)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:290
#: ebf066e9cbb0409abb9ca103f94dcf2f
msgid "If the :ref:`core metadata <core-metadata>` specification lists a field as \"Optional\", the metadata MAY list it in ``dynamic`` if the expectation is a build back-end will provide the data for the field later."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:294
#: 7de2dda9b9a844929ef28e11024412cb
msgid "Build back-ends MUST raise an error if the metadata specifies a field statically as well as being listed in ``dynamic``."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:296
#: 083172f3aafb4657815f3e903d924f0e
msgid "If the metadata does not list a field in ``dynamic``, then a build back-end CANNOT fill in the requisite metadata on behalf of the user (i.e. ``dynamic`` is the only way to allow a tool to fill in metadata and the user must opt into the filling in)."
msgstr ""

#: ../source/specifications/declaring-project-metadata.rst:300
#: 0ff124ab543147d49ad508eefcc651e4
msgid "Build back-ends MUST raise an error if the metadata specifies a field in ``dynamic`` but the build back-end was unable to determine the data for it (omitting the data, if determined to be the accurate value, is acceptable)."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:6
#: 53c3041f95164cd6b5e19d722b4803d0
msgid "Dependency specifiers"
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:8
#: d4520b7eb040499f84c52e1e50500035
msgid "The dependency specifier format used to declare a dependency on another component is defined in :pep:`508`."
msgstr ""

#: ../source/specifications/dependency-specifiers.rst:11
#: 984338a90da54ee7aaedf80913b58295
msgid "The environment markers section in this PEP supersedes the environment markers section in :pep:`345`."
msgstr ""

#: ../source/specifications/direct-url.rst:6
#: 344c97454104432bbf6fc43ee7d88ff5
msgid "Recording the Direct URL Origin of installed distributions"
msgstr ""

#: ../source/specifications/direct-url.rst:8
#: 359c03cb55b44b1b9a3fd4c3f77f9d16
msgid "This document specifies a :file:`direct_url.json` file in the :file:`*.dist-info` directory of an installed distribution, to record the Direct URL Origin of the distribution. The layout of this file was originally specified in :pep:`610` and is formally documented here."
msgstr ""

#: ../source/specifications/direct-url.rst:17
#: de33505060c448b882c09db03b0158a2
msgid "Specification"
msgstr ""

#: ../source/specifications/direct-url.rst:19
#: 060ad330894140169440123007efce36
msgid "The :file:`direct_url.json` file MUST be created in the :file:`*.dist-info` directory by installers when installing a distribution from a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""

#: ../source/specifications/direct-url.rst:23
#: ../source/specifications/recording-installed-packages.rst:206
#: 4c0e40c326db4ffda3e5d9408d21b767
#: 026f1b6f9dd544048acdf96f4b42c646
msgid "This file MUST NOT be created when installing a distribution from an other type of requirement (i.e. name plus version specifier)."
msgstr ""

#: ../source/specifications/direct-url.rst:26
#: 45db32b726b7406590fa174ae5a9296c
msgid "This JSON file MUST be a dictionary, compliant with `RFC 8259 <https://tools.ietf.org/html/rfc8259>`_ and UTF-8 encoded."
msgstr ""

#: ../source/specifications/direct-url.rst:29
#: f699cefc79444c16b6cee25d6d80aa0d
msgid "If present, it MUST contain at least two fields. The first one is ``url``, with type ``string``. Depending on what ``url`` refers to, the second field MUST be one of ``vcs_info`` (if ``url`` is a VCS reference), ``archive_info`` (if ``url`` is a source archives or a wheel), or ``dir_info`` (if ``url``  is a local directory). These info fields have a (possibly empty) subdictionary as value, with the possible keys defined below."
msgstr ""

#: ../source/specifications/direct-url.rst:36
#: 632f46826145409ebca3dce7219f901c
msgid "``url`` MUST be stripped of any sensitive authentication information, for security reasons."
msgstr ""

#: ../source/specifications/direct-url.rst:39
#: efa8b82d26264abba6c70d172cf74a68
msgid "The user:password section of the URL MAY however be composed of environment variables, matching the following regular expression::"
msgstr ""

#: ../source/specifications/direct-url.rst:45
#: 3f58a06be9b94ba7b08f624a85e6316d
msgid "Additionally, the user:password section of the URL MAY be a well-known, non security sensitive string. A typical example is ``git`` in the case of an URL such as ``ssh://git@gitlab.com/user/repo``."
msgstr ""

#: ../source/specifications/direct-url.rst:49
#: 215dbaa6abd140618c6eb6c4c652854c
msgid "When ``url`` refers to a VCS repository, the ``vcs_info`` key MUST be present as a dictionary with the following keys:"
msgstr ""

#: ../source/specifications/direct-url.rst:52
#: 0984d23d306645a78b84d7019fdaf249
msgid "A ``vcs`` key (type ``string``) MUST be present, containing the name of the VCS (i.e. one of ``git``, ``hg``, ``bzr``, ``svn``). Other VCS's SHOULD be registered by writing a PEP to amend this specification. The ``url`` value MUST be compatible with the corresponding VCS, so an installer can hand it off without transformation to a checkout/download command of the VCS."
msgstr ""

#: ../source/specifications/direct-url.rst:58
#: 9af221c82b8f446ab7fdc456e5bcec01
msgid "A ``requested_revision`` key (type ``string``) MAY be present naming a branch/tag/ref/commit/revision/etc (in a format compatible with the VCS) to install."
msgstr ""

#: ../source/specifications/direct-url.rst:61
#: c4da3bf005f44e1585a53935f18eba10
msgid "A ``commit_id`` key (type ``string``) MUST be present, containing the exact commit/revision number that was installed. If the VCS supports commit-hash based revision identifiers, such commit-hash MUST be used as ``commit_id`` in order to reference the immutable version of the source code that was installed."
msgstr ""

#: ../source/specifications/direct-url.rst:68
#: ffffc57399e8454e9405883700faafe0
msgid "When ``url`` refers to a source archive or a wheel, the ``archive_info`` key MUST be present as a dictionary with the following key:"
msgstr ""

#: ../source/specifications/direct-url.rst:71
#: 364d05ca7b3c41d987af73d213d48b13
msgid "A ``hash`` key (type ``string``) SHOULD be present, with value ``<hash-algorithm>=<expected-hash>``. It is RECOMMENDED that only hashes which are unconditionally provided by the latest version of the standard library's ``hashlib`` module be used for source archive hashes. At time of writing, that list consists of 'md5', 'sha1', 'sha224', 'sha256', 'sha384', and 'sha512'."
msgstr ""

#: ../source/specifications/direct-url.rst:78
#: cc21f9422499442b826ee66275851708
msgid "When ``url`` refers to a local directory, the ``dir_info`` key MUST be present as a dictionary with the following key:"
msgstr ""

#: ../source/specifications/direct-url.rst:81
#: 74e66d650aff4e388f79b3f8f6e5cbf6
msgid "``editable`` (type: ``boolean``): ``true`` if the distribution was installed in editable mode, ``false`` otherwise. If absent, default to ``false``."
msgstr ""

#: ../source/specifications/direct-url.rst:84
#: 82612de4d6304ec89953e80869f65427
msgid "When ``url`` refers to a local directory, it MUST have the ``file`` sheme and be compliant with `RFC 8089 <https://tools.ietf.org/html/rfc8089>`_. In particular, the path component must be absolute. Symbolic links SHOULD be preserved when making relative paths absolute."
msgstr ""

#: ../source/specifications/direct-url.rst:91
#: d80ef8341b414774bee912dafd4d05b0
msgid "When the requested URL has the file:// scheme and points to a local directory that happens to contain a VCS checkout, installers MUST NOT attempt to infer any VCS information and therefore MUST NOT output any VCS related information (such as ``vcs_info``) in :file:`direct_url.json`."
msgstr ""

#: ../source/specifications/direct-url.rst:96
#: e4691d5dfda148368991da320bcfe6cf
msgid "A top-level ``subdirectory`` field MAY be present containing a directory path, relative to the root of the VCS repository, source archive or local directory, to specify where ``pyproject.toml`` or ``setup.py`` is located."
msgstr ""

#: ../source/specifications/direct-url.rst:102
#: 0f609b7b93ea4a5fb97927f7cf9bfb5a
msgid "As a general rule, installers should as much as possible preserve the information that was provided in the requested URL when generating :file:`direct_url.json`. For example user:password environment variables should be preserved and ``requested_revision`` should reflect the revision that was provided in the requested URL as faithfully as possible. This information is however *enriched* with more precise data, such as ``commit_id``."
msgstr ""

#: ../source/specifications/direct-url.rst:110
#: 530ab65a05504fafb9dbac7de5c3abce
msgid "Registered VCS"
msgstr ""

#: ../source/specifications/direct-url.rst:112
#: d1f19f32d39d42628f8f19759bc4b353
msgid "This section lists the registered VCS's; expanded, VCS-specific information on how to use the ``vcs``, ``requested_revision``, and other fields of ``vcs_info``; and in some cases additional VCS-specific fields. Tools MAY support other VCS's although it is RECOMMENDED to register them by writing a PEP to amend this specification. The ``vcs`` field SHOULD be the command name (lowercased). Additional fields that would be necessary to support such VCS SHOULD be prefixed with the VCS command name."
msgstr ""

#: ../source/specifications/direct-url.rst:122
#: cf964432074e481e82fd43093b7a86e2
msgid "Git"
msgstr ""

#: ../source/specifications/direct-url.rst:124
#: ../source/specifications/direct-url.rst:156
#: ../source/specifications/direct-url.rst:179
#: ../source/specifications/direct-url.rst:202
#: 78b303b993454005b6ec5e95592fd21d
#: 8fc49bf9f69945978e35cb59613f7e65
#: 873107fca0fa4a4ca4034867be76495d
#: b07b38dc1f194e29825ebf8eb086eae6
msgid "Home page"
msgstr ""

#: ../source/specifications/direct-url.rst:126
#: b908aa6cc2684fa5a36dfa025dfbb30b
msgid "https://git-scm.com/"
msgstr ""

#: ../source/specifications/direct-url.rst:128
#: ../source/specifications/direct-url.rst:160
#: ../source/specifications/direct-url.rst:183
#: ../source/specifications/direct-url.rst:206
#: c2838c078665438eb8b79b0417682cf0
#: 982e14119e2f4a7db8c613ced108f0a6
#: 60f2c362049441c6926cb6d28a3ead67
#: b9465a4974524f3fa810ecee39500c22
msgid "vcs command"
msgstr ""

#: ../source/specifications/direct-url.rst:130
#: ../source/specifications/direct-url.rst:134
#: 23789f92a8cb4639bd1f72f44528e185
#: a472224e72a04e8d93c19aa9e74c62f4
msgid "git"
msgstr ""

#: ../source/specifications/direct-url.rst:132
#: ../source/specifications/direct-url.rst:164
#: ../source/specifications/direct-url.rst:187
#: ../source/specifications/direct-url.rst:210
#: a57996cf0da446c39d12e1ec376bc117
#: 7e4f77528dee4518993451e02fcc3e8d
#: 3da8b37d86a44f549c7413bb40b67ddb
#: f701d35e2d8d49798639489a93c4a9bf
msgid "``vcs`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:136
#: ../source/specifications/direct-url.rst:168
#: ../source/specifications/direct-url.rst:191
#: ../source/specifications/direct-url.rst:214
#: 52306c88ee124354b15bbe9d36b7691d
#: 9547832a32174b4b9c83bd51467a5e09
#: 56d2842a9428469699e8e0d4474b894e
#: bbf38e8209754a85b38e54e30df975f4
msgid "``requested_revision`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:138
#: 4ecab0a9a2f0404bae9607533205a01e
msgid "A tag name, branch name, Git ref, commit hash, shortened commit hash, or other commit-ish."
msgstr ""

#: ../source/specifications/direct-url.rst:141
#: ../source/specifications/direct-url.rst:172
#: ../source/specifications/direct-url.rst:195
#: ../source/specifications/direct-url.rst:219
#: 4cdf7d804b1e4c14b84370ba84a7c22a
#: 8514ec3bb4734bf8a197508e34a36bac
#: caaea7862af942f3886619623d1e2275
#: ff19c6697756420d8820a5ca12ac2b67
msgid "``commit_id`` field"
msgstr ""

#: ../source/specifications/direct-url.rst:143
#: af571b2a3293441687158f91d90fc511
msgid "A commit hash (40 hexadecimal characters sha1)."
msgstr ""

#: ../source/specifications/direct-url.rst:147
#: 705f4a60eae54e94ae30e5d6b481e746
msgid "Installers can use the ``git show-ref`` and ``git symbolic-ref`` commands to determine if the ``requested_revision`` corresponds to a Git ref. In turn, a ref beginning with ``refs/tags/`` corresponds to a tag, and a ref beginning with ``refs/remotes/origin/`` after cloning corresponds to a branch."
msgstr ""

#: ../source/specifications/direct-url.rst:154
#: 7ea2cd6676a349f0a93469ac7ddb8518
msgid "Mercurial"
msgstr ""

#: ../source/specifications/direct-url.rst:158
#: cb28a1616a8e459cbd121f98ce431939
msgid "https://www.mercurial-scm.org/"
msgstr ""

#: ../source/specifications/direct-url.rst:162
#: ../source/specifications/direct-url.rst:166
#: 67157a2a04064beb814f4c335f38aa8d
#: cfad7a6469ad4d3aa12ffb601b4d9a41
msgid "hg"
msgstr ""

#: ../source/specifications/direct-url.rst:170
#: f8d06b186060492da4a128999850ea20
msgid "A tag name, branch name, changeset ID, shortened changeset ID."
msgstr ""

#: ../source/specifications/direct-url.rst:174
#: f689f2aaa3414c59a0f73c099121f712
msgid "A changeset ID (40 hexadecimal characters)."
msgstr ""

#: ../source/specifications/direct-url.rst:177
#: 7c557961667b4e0f809e73927fd9919e
msgid "Bazaar"
msgstr ""

#: ../source/specifications/direct-url.rst:181
#: 85f8bf8de9d94e0d95291a0e5c649a0a
msgid "https://bazaar.canonical.com/"
msgstr ""

#: ../source/specifications/direct-url.rst:185
#: ../source/specifications/direct-url.rst:189
#: 65dcac6a90474ca5a704ea4eaf674ed2
#: 026e91b166e44c90ac5d8a9a784c6ff7
msgid "bzr"
msgstr ""

#: ../source/specifications/direct-url.rst:193
#: 922923a5103b48aa928cdc3f2c8fe305
msgid "A tag name, branch name, revision id."
msgstr ""

#: ../source/specifications/direct-url.rst:197
#: a1be339930ce49c891c387f722c7b9e4
msgid "A revision id."
msgstr ""

#: ../source/specifications/direct-url.rst:200
#: 7b05b04cdc264bb58d72f89dfe38ea35
msgid "Subversion"
msgstr ""

#: ../source/specifications/direct-url.rst:204
#: ae762f52b5f941169f047041eb1086eb
msgid "https://subversion.apache.org/"
msgstr ""

#: ../source/specifications/direct-url.rst:208
#: ../source/specifications/direct-url.rst:212
#: 85460296f063400cb03e401834bb2bd8
#: aba5f0772414411fa734a891f4ec5a93
msgid "svn"
msgstr ""

#: ../source/specifications/direct-url.rst:216
#: 9e3746f146a0460faa619f1a969ab087
msgid "``requested_revision`` must be compatible with ``svn checkout`` ``--revision`` option. In Subversion, branch or tag is part of ``url``."
msgstr ""

#: ../source/specifications/direct-url.rst:221
#: b562440e474144a0a583cc09149db010
msgid "Since Subversion does not support globally unique identifiers, this field is the Subversion revision number in the corresponding repository."
msgstr ""

#: ../source/specifications/direct-url.rst:229
#: 35edcd872eb746bbb849dfe3d29bce1a
msgid "Example direct_url.json"
msgstr ""

#: ../source/specifications/direct-url.rst:231
#: 59c87a865b34470e8486a817144a9e03
msgid "Source archive:"
msgstr ""

#: ../source/specifications/direct-url.rst:242
#: 38e5a645830947058444c5058c4eb0d8
msgid "Git URL with tag and commit-hash:"
msgstr ""

#: ../source/specifications/direct-url.rst:255
#: e0a73882fcdb4776b2a9721ad4779c87
msgid "Local directory:"
msgstr ""

#: ../source/specifications/direct-url.rst:264
#: 7a9c8e8e8e054f5bb7d0fd9b1aeae481
msgid "Local directory installed in editable mode:"
msgstr ""

#: ../source/specifications/direct-url.rst:277
#: 97976ec77d544a55b3a07dc8a37e49e6
msgid "Example pip commands and their effect on direct_url.json"
msgstr ""

#: ../source/specifications/direct-url.rst:279
#: 8155d2d94b1140f4b59acc5857e1f02f
msgid "Commands that generate a ``direct_url.json``:"
msgstr ""

#: ../source/specifications/direct-url.rst:281
#: b9f65a53ac2c4726b777cd2935b14454
msgid "pip install https://example.com/app-1.0.tgz"
msgstr ""

#: ../source/specifications/direct-url.rst:282
#: 2c702bf0835f4d609c6f760bc6637256
msgid "pip install https://example.com/app-1.0.whl"
msgstr ""

#: ../source/specifications/direct-url.rst:283
#: aa87827f9d3142d990c69f8efeec9a0f
msgid "pip install \"git+https://example.com/repo/app.git#egg=app&subdirectory=setup\""
msgstr ""

#: ../source/specifications/direct-url.rst:284
#: c4b286fca5104ffbb5ee47846212f93a
msgid "pip install ./app"
msgstr ""

#: ../source/specifications/direct-url.rst:285
#: 77206d08cc6748dab40221af6e94645d
msgid "pip install file:///home/user/app"
msgstr ""

#: ../source/specifications/direct-url.rst:286
#: 202fbff30a4943c997f9f271c7f3dc91
msgid "pip install --editable \"git+https://example.com/repo/app.git#egg=app&subdirectory=setup\" (in which case, ``url`` will be the local directory where the git repository has been cloned to, and ``dir_info`` will be present with ``\"editable\": true`` and no ``vcs_info`` will be set)"
msgstr ""

#: ../source/specifications/direct-url.rst:290
#: 80cc9f39dfad44cb856831ab41b5e6fd
msgid "pip install -e ./app"
msgstr ""

#: ../source/specifications/direct-url.rst:292
#: 81799885bbfe4c6f82e46c78ac6037eb
msgid "Commands that *do not* generate a ``direct_url.json``"
msgstr ""

#: ../source/specifications/direct-url.rst:294
#: 09e4d3fdce2443b1af8e57f4dc93b20b
msgid "pip install app"
msgstr ""

#: ../source/specifications/direct-url.rst:295
#: cbf067fc5a904831843e59e9e1f9169b
msgid "pip install app --no-index --find-links https://example.com/"
msgstr ""

#: ../source/specifications/entry-points.rst:5
#: a0d51789b11c472bbc8a5401a1aa4ea1
msgid "Entry points specification"
msgstr ""

#: ../source/specifications/entry-points.rst:7
#: 6d417d459bd74257bd4edaebdcac996f
msgid "*Entry points* are a mechanism for an installed distribution to advertise components it provides to be discovered and used by other code. For example:"
msgstr ""

#: ../source/specifications/entry-points.rst:11
#: 862f95d4d7e94ad58fc19407e224833f
msgid "Distributions can specify ``console_scripts`` entry points, each referring to a function. When *pip* (or another console_scripts aware installer) installs the distribution, it will create a command-line wrapper for each entry point."
msgstr ""

#: ../source/specifications/entry-points.rst:14
#: 1692c769121c45ee99dee6f3ab335818
msgid "Applications can use entry points to load plugins; e.g. Pygments (a syntax highlighting tool) can use additional lexers and styles from separately installed packages. For more about this, see :doc:`/guides/creating-and-discovering-plugins`."
msgstr ""

#: ../source/specifications/entry-points.rst:19
#: 74a46f4ce64644489899f6f40491d2e9
msgid "The entry point file format was originally developed to allow packages built with setuptools to provide integration point metadata that would be read at runtime with ``importlib.metadata``. It is now defined as a PyPA interoperability specification in order to allow build tools other than setuptools to publish ``importlib.metadata`` compatible entry point metadata, and runtime libraries other than ``importlib.metadata`` to portably read published entry point metadata (potentially with different caching and conflict resolution strategies)."
msgstr ""

#: ../source/specifications/entry-points.rst:28
#: ad5055a9096743859cf336a335b8a320
msgid "Data model"
msgstr ""

#: ../source/specifications/entry-points.rst:30
#: 2f9b143e28634f2c9fdc76af9352c581
msgid "Conceptually, an entry point is defined by three required properties:"
msgstr ""

#: ../source/specifications/entry-points.rst:32
#: 2644ec970c754fc189e37fd124fc4cac
msgid "The **group** that an entry point belongs to indicates what sort of object it provides. For instance, the group ``console_scripts`` is for entry points referring to functions which can be used as a command, while ``pygments.styles`` is the group for classes defining pygments styles. The consumer typically defines the expected interface. To avoid clashes, consumers defining a new group should use names starting with a PyPI name owned by the consumer project, followed by ``.``. Group names must be one or more groups of letters, numbers and underscores, separated by dots (regex ``^\\w+(\\.\\w+)*$``)."
msgstr ""

#: ../source/specifications/entry-points.rst:42
#: 00842ac47aa94ab7b72bb13d79ea3745
msgid "The **name** identifies this entry point within its group. The precise meaning of this is up to the consumer. For console scripts, the name of the entry point is the command that will be used to launch it. Within a distribution, entry point names should be unique. If different distributions provide the same name, the consumer decides how to handle such conflicts. The name may contain any characters except ``=``, but it cannot start or end with any whitespace character, or start with ``[``. For new entry points, it is recommended to use only letters, numbers, underscores, dots and dashes (regex ``[\\w.-]+``)."
msgstr ""

#: ../source/specifications/entry-points.rst:51
#: 8edb282530cc4a0981a90f0819d49813
msgid "The **object reference** points to a Python object. It is either in the form ``importable.module``, or ``importable.module:object.attr``. Each of the parts delimited by dots and the colon is a valid Python identifier. It is intended to be looked up like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:64
#: e1bec47dffe84ed0976c298dd9d0964b
msgid "Some tools call this kind of object reference by itself an 'entry point', for want of a better term, especially where it points to a function to launch a program."
msgstr ""

#: ../source/specifications/entry-points.rst:68
#: 7ccda0b7daee4e7f991d6a7f1eaf230b
msgid "There is also an optional property: the **extras** are a set of strings identifying optional features of the distribution providing the entry point. If these are specified, the entry point requires the dependencies of those 'extras'. See the metadata field :ref:`metadata_provides_extra`."
msgstr ""

#: ../source/specifications/entry-points.rst:73
#: 33393136ebc449428ebb458f6875f7bf
msgid "Using extras for an entry point is no longer recommended. Consumers should support parsing them from existing distributions, but may then ignore them. New publishing tools need not support specifying extras. The functionality of handling extras was tied to setuptools' model of managing 'egg' packages, but newer tools such as pip and virtualenv use a different model."
msgstr ""

#: ../source/specifications/entry-points.rst:80
#: dacc73343e0640508733af182d01c737
msgid "File format"
msgstr ""

#: ../source/specifications/entry-points.rst:82
#: 050bb8a0c6fc4946b1dd0ab3484bdac6
msgid "Entry points are defined in a file called :file:`entry_points.txt` in the :file:`*.dist-info` directory of the distribution. This is the directory described in :pep:`376` for installed distributions, and in :pep:`427` for wheels.  The file uses the UTF-8 character encoding."
msgstr ""

#: ../source/specifications/entry-points.rst:87
#: 1076ae70152f4769aa74e4ff10d120d9
msgid "The file contents are in INI format, as read by Python's :mod:`configparser` module. However, configparser treats names as case-insensitive by default, whereas entry point names are case sensitive. A case-sensitive config parser can be made like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:97
#: 0853481ef2be4670bb7ccf3b57391a95
msgid "The entry points file must always use ``=`` to delimit names from values (whereas configparser also allows using ``:``)."
msgstr ""

#: ../source/specifications/entry-points.rst:100
#: 4853744c8af94762906b3ad7bee9faee
msgid "The sections of the config file represent entry point groups, the names are names, and the values encode both the object reference and the optional extras. If extras are used, they are a comma-separated list inside square brackets."
msgstr ""

#: ../source/specifications/entry-points.rst:104
#: 326929389dfc454ab1e9c4ee6f395be9
msgid "Within a value, readers must accept and ignore spaces (including multiple consecutive spaces) before or after the colon, between the object reference and the left square bracket, between the extra names and the square brackets and colons delimiting them, and after the right square bracket. The syntax for extras is formally specified as part of :pep:`508` (as ``extras``). For tools writing the file, it is recommended only to insert a space between the object reference and the left square bracket."
msgstr ""

#: ../source/specifications/entry-points.rst:112
#: 3e58b7451b5f42a5a3bdd27d0e25d37e
msgid "For example::"
msgstr ""

#: ../source/specifications/entry-points.rst:124
#: 6fac725e455a4022820ec25d1c119cc1
msgid "Use for scripts"
msgstr ""

#: ../source/specifications/entry-points.rst:126
#: e085e4d87ab2420eb025eb4b685d2dfe
msgid "Two groups of entry points have special significance in packaging: ``console_scripts`` and ``gui_scripts``. In both groups, the name of the entry point should be usable as a command in a system shell after the package is installed. The object reference points to a function which will be called with no arguments when this command is run. The function may return an integer to be used as a process exit code, and returning ``None`` is equivalent to returning ``0``."
msgstr ""

#: ../source/specifications/entry-points.rst:134
#: eb087507528f40b5b71d5dc2851bb5c3
msgid "For instance, the entry point ``mycmd = mymod:main`` would create a command ``mycmd`` launching a script like this::"
msgstr ""

#: ../source/specifications/entry-points.rst:141
#: 576e7f8bbc8243ffbcd3c0dcf0bcc71e
msgid "The difference between ``console_scripts`` and ``gui_scripts`` only affects Windows systems. ``console_scripts`` are wrapped in a console executable, so they are attached to a console and can use ``sys.stdin``, ``sys.stdout`` and ``sys.stderr`` for input and output. ``gui_scripts`` are wrapped in a GUI executable, so they can be started without a console, but cannot use standard streams unless application code redirects them. Other platforms do not have the same distinction."
msgstr ""

#: ../source/specifications/entry-points.rst:149
#: 08d6b387f9e54b7587183b6d85487bc0
msgid "Install tools are expected to set up wrappers for both ``console_scripts`` and ``gui_scripts`` in the scripts directory of the install scheme. They are not responsible for putting this directory in the ``PATH`` environment variable which defines where command-line tools are found."
msgstr ""

#: ../source/specifications/entry-points.rst:154
#: cab8250e8003415584c2e62ab59e2bde
msgid "As files are created from the names, and some filesystems are case-insensitive, packages should avoid using names in these groups which differ only in case. The behaviour of install tools when names differ only in case is undefined."
msgstr ""

#: ../source/specifications/index.rst:4
#: 138f19f2c7514915b446252963cbbdd6
msgid "PyPA specifications"
msgstr ""

#: ../source/specifications/index.rst:6
#: 9472fab452cb414f95d6917f5fad4df4
msgid "This is a list of currently active interoperability specifications maintained by the Python Packaging Authority. The process for updating these standards, and for proposing new ones, is documented on `pypa.io <https://www.pypa.io/en/latest/specifications/>`__."
msgstr ""

#: ../source/specifications/index.rst:13
#: fe77469794e444d4af046501723658cd
msgid "Package Distribution Metadata"
msgstr ""

#: ../source/specifications/index.rst:30
#: dccf3c984f194429a7d29d6a0582c0fc
msgid "Package Distribution File Formats"
msgstr ""

#: ../source/specifications/index.rst:40
#: 0d966bff877f4ddb8ab4a3823d046c97
msgid "Package Index Interfaces"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:6
#: eaad58898dae431daa20564f2b44b91b
msgid "Platform compatibility tags"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:8
#: fbac14be50814fbe9a2a31c1268ce0af
msgid "Platform compatibility tags allow build tools to mark distributions as being compatible with specific platforms, and allows installers to understand which distributions are compatible with the system they are running on."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:12
#: e8134fb2ad0a491a9948480b645f4155
msgid "The platform compatibility tagging model used for the ``wheel`` distribution format is defined in :pep:`425`."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:16
#: f36c623dbedb47f396109d08662d54c2
msgid "Platform tags for Windows"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:18
#: c304892889de40dab8e08e49cb59babc
msgid "The scheme defined in :pep:`425` covers public distribution of wheel files to systems running Windows."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:22
#: 31e71531cbc04aa9acea0023ef5a4f7b
msgid "Platform tags for macOS (Mac OS X)"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:24
#: 7333e08d521142158cb6b13bdcda1c7d
msgid "The scheme defined in :pep:`425` covers public distribution of wheel files to systems running macOS (previously known as Mac OS X)."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:28
#: 3bf92fca966247d3af3457c7e970b295
msgid "Platform tags for common Linux distributions"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:32
#: bd22cf803b90477a841b8c250e3df538
msgid "The scheme defined in :pep:`425` is insufficient for public distribution of wheel files (and \\*nix wheel files in general) to Linux platforms, due to the large ecosystem of Linux platforms and subtle differences between them."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:36
#: 1439e9dafabd4423be5ecd65bbb3e079
msgid "Instead, :pep:`600` defines the ``manylinux`` standard, which represents a common subset of Linux platforms, and allows building wheels tagged with the ``manylinux`` platform tag which can be used across most common Linux distributions."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:41
#: b5e7fa93661b40cdabb47839bcc3b0b0
msgid "There were multiple iterations of the ``manylinux`` specification, each representing the common subset of Linux platforms at a given point in time:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:44
#: ffc6794539b4450ea1e04069a3752c57
msgid "``manylinux1`` (:pep:`513`) supports ``x86_64`` and ``i686`` architectures, and is based on a compatible Linux platform from 2007."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:46
#: ffa6a550f5864afdb30d35ea212edd78
msgid "``manylinux2010`` (:pep:`571`) supports ``x86_64`` and ``i686`` architectures. and updates the previous specification to be based on a compatible Linux platform from 2010 instead."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:49
#: c181855ad15648d8996aceb93c4f4291
msgid "``manylinux2014`` (:pep:`599`) adds support for a number of additional architectures (``aarch64``, ``armv7l``, ``ppc64``, ``ppc64le``, and ``s390x``) and updates the base platform to a compatible Linux platform from 2014."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:54
#: f041c5d29ebc4a0baa3a314d920cc8ee
msgid "``manylinux_x_y`` (:pep:`600`) supersedes all previous PEPs to define a future-proof standard. It defines ``x`` and ``y`` as glibc major an minor versions supported (e.g. ``manylinux_2_24`` should work on any distro using glibc 2.24+). Previous tags are still supported for backward compatibility."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:59
#: e03def7cc2454107995053de2ebfeb74
msgid "In general, distributions built for older versions of the specification are forwards-compatible (meaning that ``manylinux1`` distributions should continue to work on modern systems) but not backwards-compatible (meaning that ``manylinux2010`` distributions are not expected to work on platforms that existed before 2010)."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:65
#: 8297d2e6c9ce4b469cf75919a7e210a5
msgid "Package maintainers should attempt to target the most compatible specification possible, with the caveat that the provided build environment for ``manylinux1`` and ``manylinux2010`` have reached end-of-life meaning that these images will no longer receive security updates."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:71
#: 6ba6b20dfb73499bbd6a653e69b43cc6
msgid "Manylinux compatibility support"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:74
#: 8387ed153d91436f8d6a9e21142d350b
msgid "The ``manylinux2014`` specification is relatively new and is not yet widely recognised by install tools."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:76
#: b9286de1e0834df58c46780139060c97
msgid "The ``manylinux_x_y`` specification is relatively new and is not yet widely recognised by install tools."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:79
#: 828c27b0ede3425d840ac62fc3ce9b8f
msgid "The following table shows the minimum versions of relevant projects to support the various ``manylinux`` standards:"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: c4dc936e958c44aeb5795bf94549f72d
msgid "Tool"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 7ea41c60a3584402a666fb227d75d6cf
msgid "``manylinux1``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 1b4b2dfb1aa944419000d149cec58437
msgid "``manylinux2010``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: f67cc3e6759e420e86acee7e372d28ff
msgid "``manylinux2014``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:83
#: 648acec23f224cf0a0f38c6590460e83
msgid "``manylinux_x_y``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: b51d102bfdf74a9a9787f9e029ea7ab4
msgid "``>=8.1.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: 0a54cef26f6e487e8a392dd466685b4c
msgid "``>=19.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: b176e78b702741798b97b6cdb9c48c3f
msgid "``>=19.3``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:85
#: 462152b10acf4a8c91da74d5512a3b23
msgid "``>=20.3``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 557ab4195f234f35be968cab4f32e47f
msgid "auditwheel"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 8b14731313644b7c8cc734c1f8ad976d
msgid "``>=1.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: 4a327052e690437a8f8ce8195b4a94a5
msgid "``>=2.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: aee02860d1924947a0da271e73d6b9ad
msgid "``>=3.0.0``"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:86
#: a973371a64644ac28f2f9786db38cdd7
msgid "``>=3.3.0`` [#]_"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:90
#: 10ee66ee76e143459b552e3e90ade661
msgid "Platform tags for other \\*nix platforms"
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:92
#: 00ab3c0d7c7740fe862631d2093537b3
msgid "The scheme defined in :pep:`425` is not generally sufficient for public distribution of wheel files to other \\*nix platforms. Efforts are currently (albeit intermittently) under way to define improved compatibility tagging schemes for AIX and for Alpine Linux."
msgstr ""

#: ../source/specifications/platform-compatibility-tags.rst:98
#: e4a07e52551546ea9b0bc46d3e4d3cce
msgid "Only support for ``manylinux_2_24`` has been added in auditwheel 3.3.0"
msgstr ""

#: ../source/specifications/pypirc.rst:6
#: 590ef652d25b4ec999e0a0793103a218
msgid "The :file:`.pypirc` file"
msgstr ""

#: ../source/specifications/pypirc.rst:8
#: 744e691a4f9d4f0f870a40a8ed6ecf9a
msgid "A :file:`.pypirc` file allows you to define the configuration for :term:`package indexes <Package Index>` (referred to here as \"repositories\"), so that you don't have to enter the URL, username, or password whenever you upload a package with :ref:`twine` or :ref:`flit`."
msgstr ""

#: ../source/specifications/pypirc.rst:13
#: a3f86b7970364ac48541d2734da9d5ac
msgid "The format (originally defined by the :ref:`distutils` package) is:"
msgstr ""

#: ../source/specifications/pypirc.rst:32
#: d20c2aa95fa749a0bd09d4fb8064d17c
msgid "The ``distutils`` section defines an ``index-servers`` field that lists the name of all sections describing a repository."
msgstr ""

#: ../source/specifications/pypirc.rst:35
#: a37f8e7ce166489aa9639a4857725cf0
msgid "Each section describing a repository defines three fields:"
msgstr ""

#: ../source/specifications/pypirc.rst:37
#: 28f391ae08c240ce8a0a20bb85c373fc
msgid "``repository``: The URL of the repository."
msgstr ""

#: ../source/specifications/pypirc.rst:38
#: a56fa32abbc74f3c9d91535b97ee4dc8
msgid "``username``: The registered username on the repository."
msgstr ""

#: ../source/specifications/pypirc.rst:39
#: cae6f582aa9c4f3c99080d1274eeccad
msgid "``password``: The password that will used to authenticate the username."
msgstr ""

#: ../source/specifications/pypirc.rst:43
#: 3b325372ab204e85a6ccd21e7ba218f5
msgid "Be aware that this stores your password in plain text. For better security, consider an alternative like `keyring`_, setting environment variables, or providing the password on the command line."
msgstr ""

#: ../source/specifications/pypirc.rst:47
#: 384cdd3acc8b480bb343fe33e22c9223
msgid "Otherwise, set the permissions on :file:`.pypirc` so that only you can view or modify it. For example, on Linux or macOS, run:"
msgstr ""

#: ../source/specifications/pypirc.rst:57
#: 9c797e54c5f546eca89cc9aae4ef9c1d
msgid "Common configurations"
msgstr ""

#: ../source/specifications/pypirc.rst:61
#: fb6a21fae7754de18a49ed3dfdd0a5a3
msgid "These examples apply to :ref:`twine`, and projects like :ref:`hatch` that use it under the hood. Other projects (e.g. :ref:`flit`) also use :file:`.pypirc`, but with different defaults. Please refer to each project's documentation for more details and usage instructions."
msgstr ""

#: ../source/specifications/pypirc.rst:66
#: c557ef2795c248f9b7004a3da9aa57c6
msgid "Twine's default configuration mimics a :file:`.pypirc` with repository sections for PyPI and TestPyPI:"
msgstr ""

#: ../source/specifications/pypirc.rst:82
#: 9f56f9cbcadc428aa26ccbfb96366529
msgid "Twine will add additional configuration from :file:`$HOME/.pypirc`, the command line, and environment variables to this default configuration."
msgstr ""

#: ../source/specifications/pypirc.rst:86
#: 533ca495f9a1478b941d2fb274283ffa
msgid "Using a PyPI token"
msgstr ""

#: ../source/specifications/pypirc.rst:88
#: f17d64e63f9b471dae6259d500bdcc54
msgid "To set your `API token`_ for PyPI, you can create a :file:`$HOME/.pypirc` similar to:"
msgstr ""

#: ../source/specifications/pypirc.rst:97
#: 81e4e9a3b1e541cc94146312a98faf55
msgid "For :ref:`TestPyPI <using-test-pypi>`, add a ``[testpypi]`` section, using the API token from your TestPyPI account."
msgstr ""

#: ../source/specifications/pypirc.rst:103
#: a54c270c0cdf4c48914fafb2d20b81d0
msgid "Using another package index"
msgstr ""

#: ../source/specifications/pypirc.rst:105
#: ca6b8a8b07ea4e269e6225d050d229b5
msgid "To configure an additional repository, you'll need to redefine the ``index-servers`` field to include the repository name. Here is a complete example of a :file:`$HOME/.pypirc` for PyPI, TestPyPI, and a private repository:"
msgstr ""

#: ../source/specifications/pypirc.rst:132
#: 29abf5463a6d4301adbda20be222f2b6
msgid "Instead of using the ``password`` field, consider saving your API tokens and passwords securely using `keyring`_ (which is installed by Twine):"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:5
#: a72d887ca69c4832ab1e46d70a929667
msgid "Recording installed projects"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:7
#: 27a0a270745349d6aa63ad941cf42579
msgid "This document specifies a common format of recording information about Python :term:`projects <Project>` installed in an environment. A common metadata format allows tools to query, manage or uninstall projects, regardless of how they were installed."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:12
#: cb18ffd2893544b9b2feed174c44552e
msgid "Almost all information is optional. This allows tools outside the Python ecosystem, such as Linux package managers, to integrate with Python tooling as much as possible. For example, even if an installer cannot easily provide a list of installed files in a format specific to Python tooling, it should still record the name and version of the installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:21
#: 420e1adbcd434b7680edab35d8d04a89
msgid "History and change workflow"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:23
#: 51871089be1c43318ea03b6bc8034d77
msgid "The metadata described here was first specified in :pep:`376`, and later amended in :pep:`627`. It was formerly known as *Database of Installed Python Distributions*. Further amendments (except trivial language or typography fixes) must be made through the PEP process (see :pep:`1`)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:29
#: d82cd16182ea499a9aa4f1b80c720d74
msgid "While this document is the normative specification, these PEPs that introduce changes to it may include additional information such as rationales and backwards compatibility considerations."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:37
#: fd22c1f4c4bd466f8eab7b5ae3a999f0
msgid "Each project installed from a distribution must, in addition to files, install a \"``.dist-info``\" directory located alongside importable modules and packages (commonly, the ``site-packages`` directory)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:41
#: 021da898cbd14489894b05fe0b073272
msgid "This directory is named as ``{name}-{version}.dist-info``, with ``name`` and ``version`` fields corresponding to :ref:`core-metadata`. Both fields must be normalized (see :pep:`PEP 503 <503#normalized-names>` and :pep:`PEP 440 <440#normalization>` for the definition of normalization for each field respectively), and replace dash (``-``) characters with underscore (``_``) chacaters, so the ``.dist-info`` directory always has exactly one dash (``-``) character in its stem, separating the ``name`` and ``version`` fields."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:50
#: 78f9a54668804f1caec4751b0bb0677e
msgid "Historically, tools have failed to replace dot characters or normalize case in the ``name`` field, or not perform normalization in the ``version`` field. Tools consuming ``.dist-info`` directories should expect those fields to be unnormalized, and treat them as equivalent to their normalized counterparts. New tools that write ``.dist-info`` directories MUST normalize both ``name`` and ``version`` fields using the rules described above, and existing tools are encouraged to start normalizing those fields."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:60
#: 292815fd138142378425b1b0e27a62f2
msgid "The ``.dist-info`` directory's name is formatted to unambigiously represent a distribution as a filesystem path. Tools presenting a distribution name to a user should avoid using the normalized name, and instead present the specified name (when needed prior to resolution to an installed package), or read the respective fields in Core Metadata, since values listed there are unescaped and accurately reflect the distribution. Libraries should provide API for such tools to consume, so tools can have access to the unnormalized name when displaying distrubution information."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:69
#: ea2bdd470b9145759c53e72006eb7b53
msgid "This ``.dist-info`` directory can contain these files, described in detail below:"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:72
#: 97141d0bba244aa69b0d033de1046230
msgid "``METADATA``: contains project metadata"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:73
#: fed9e18969b14c5c854df8451e7d02bd
msgid "``RECORD``: records the list of installed files."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:74
#: 2c8587477c4e4b9ea362a85422dbea21
msgid "``INSTALLER``: records the name of the tool used to install the project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:76
#: 5211c7a0751644eea41b5fd7903d158d
msgid "The ``METADATA`` file is mandatory. All other files may be omitted at the installing tool's discretion. Additional installer-specific files may be present."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:82
#: 9801d9d2089c4815982a81815c61c251
msgid "The :ref:`binary-distribution-format` specification describes additional files that may appear in the ``.dist-info`` directory of a :term:`Wheel`. Such files may be copied to the ``.dist-info`` directory of an installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:87
#: 6159af0303f44358a91a5e38ae29424c
msgid "The previous versions of this specification also specified a ``REQUESTED`` file. This file is now considered a tool-specific extension, but may be standardized again in the future. See `PEP 376 <https://www.python.org/dev/peps/pep-0376/#requested>`_ for its original meaning."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:94
#: 6d95a8041d36448aab5447d7be45f323
msgid "The METADATA file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:96
#: 7d273caf22a248ee98e9a31de89d49c2
msgid "The ``METADATA`` file contains metadata as described in the :ref:`core-metadata` specification, version 1.1 or greater."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:99
#: 5f38908fe1b1413897fd4aca51a5dfc8
msgid "The ``METADATA`` file is mandatory. If it cannot be created, or if required core metadata is not available, installers must report an error and fail to install the project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:105
#: 0d2af2c67b1d4f729838c241ab881ee3
msgid "The RECORD file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:107
#: be827126130f4046a525ec572c22e1ed
msgid "The ``RECORD`` file holds the list of installed files. It is a CSV file containing one record (line) per installed file."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:110
#: 6da71f0c2417449db448dfb9e8f05028
msgid "The CSV dialect must be readable with the default ``reader`` of Python's ``csv`` module:"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:113
#: 841b8bd634134e3fb37b15f85c677104
msgid "field delimiter: ``,`` (comma),"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:114
#: 4402886bf7434c3383eb85a9b9124417
msgid "quoting char: ``\"`` (straight double quote),"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:115
#: 7b81674836b240f3a06fbf09f94e560b
msgid "line terminator: either ``\\r\\n`` or ``\\n``."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:117
#: 37823c7fcafe40bc820693dd9ab5eb6a
msgid "Each record is composed of three elements: the file's **path**, the **hash** of the contents, and its **size**."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:120
#: 0660391cf6a04d99b85003ce54c8e421
msgid "The *path* may be either absolute, or relative to the directory containing the ``.dist-info`` directory (commonly, the ``site-packages`` directory). On Windows, directories may be separated either by forward- or backslashes (``/`` or ``\\``)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:125
#: cde8a15b8d074e2eb0dfe11402612b57
msgid "The *hash* is either an empty string or the name of a hash algorithm from ``hashlib.algorithms_guaranteed``, followed by the equals character ``=`` and the digest of the file's contents, encoded with the urlsafe-base64-nopad encoding (``base64.urlsafe_b64encode(digest)`` with trailing ``=`` removed)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:130
#: f8448449e3fb4129943f4ccb39ca0f48
msgid "The *size* is either the empty string, or file's size in bytes, as a base 10 integer."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:133
#: 46931c12206e4c42b00de678be6f1457
msgid "For any file, either or both of the *hash* and *size* fields may be left empty. Commonly, entries for ``.pyc`` files and the ``RECORD`` file itself have empty *hash* and *size*. For other files, leaving the information out is discouraged, as it prevents verifying the integrity of the installed project."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:139
#: 5c0811e5332d436ba4dc708053066304
msgid "If the ``RECORD`` file is present, it must list all installed files of the project, except ``.pyc`` files corresponding to ``.py`` files listed in ``RECORD``, which are optional. Notably, the contents of the ``.dist-info`` directory (including the ``RECORD`` file itself) must be listed. Directories should not be listed."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:146
#: 3f955d69ce854a009887cb94cfc72366
msgid "To completely uninstall a package, a tool needs to remove all files listed in ``RECORD``, all ``.pyc`` files (of all optimization levels) corresponding to removed ``.py`` files, and any directories emptied by the uninstallation."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:151
#: c6275603d81d43619e1d4e7c26bd6ae1
msgid "Here is an example snippet of a possible ``RECORD`` file::"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:170
#: 4c991e5cf0f84e9595cede2e587b5a77
msgid "If the ``RECORD`` file is missing, tools that rely on ``.dist-info`` must not atempt to uninstall or upgrade the package. (This does not apply to tools that rely on other sources of information, such as system package managers in Linux distros.)"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:177
#: 62ddca93b4ea4090987632690fc379cd
msgid "The INSTALLER file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:179
#: 8eca7710a02d40baa1d696d4d509fda3
msgid "If present, ``INSTALLER`` is a single-line text file naming the tool used to install the project. If the installer is executable from the command line, ``INSTALLER`` should contain the command name. Otherwise, it should contain a printable ASCII string."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:185
#: 2bd447088aed45c98a0f8084b4ecb0ec
msgid "The file can be terminated by zero or more ASCII whitespace characters."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:187
#: 857978314bfc40b9931768150516f0ba
msgid "Here are examples of two possible ``INSTALLER`` files::"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:195
#: edd87d2570724fa9a4f0d7a2e4a7458d
msgid "This value should be used for informational purposes only. For example, if a tool is asked to uninstall a project but finds no ``RECORD`` file, it may suggest that the tool named in ``INSTALLER`` may be able to do the uninstallation."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:201
#: d8fd7a5cd36e4274b33dafc8056e7140
msgid "The direct_url.json file"
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:203
#: 580596da60e34194980105e9629a0bc2
msgid "This file MUST be created by installers when installing a distribution from a requirement specifying a direct URL reference (including a VCS URL)."
msgstr ""

#: ../source/specifications/recording-installed-packages.rst:209
#: c7017c2c132e4d39a7293caae0bdb111
msgid "Its detailed specification is at :ref:`direct-url`."
msgstr ""

#: ../source/specifications/simple-repository-api.rst:6
#: a64519da6f3546a7a067f2ce5d85e864
msgid "Simple repository API"
msgstr ""

#: ../source/specifications/simple-repository-api.rst:8
#: 3c7787ae82db4c219aa027f1c7c4e326
msgid "The current interface for querying available package versions and retrieving packages from an index server is defined in :pep:`503`, with the addition of \"yank\" support (allowing a kind of file deletion) as defined in :pep:`592` and specifying the interface version provided by an index server in :pep:`629`."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:6
#: a1876f70f8174b70bbc98f3e898dce4f
msgid "Source distribution format"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:8
#: 5b59ad5abbeb4243bb979663c03110c5
msgid "The current standard format of source distribution format is identified by the presence of a :file:`pyproject.toml` file in the distribution archive.  The layout of such a distribution was originally specified in :pep:`517` and is formally documented here."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:13
#: 28fa9a6b8d4c4337bfef5a2cb4d21fad
msgid "There is also the legacy source distribution format, implicitly defined by the behaviour of ``distutils`` module in the standard library, when executing :command:`setup.py sdist`. This document does not attempt to standardise this format, except to note that if a legacy source distribution contains a ``PKG-INFO`` file using metadata version 2.2 or later, then it MUST follow the rules applicable to source distributions defined in the metadata specification."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:21
#: fc78530ebae04886aa184ae6a0dabe02
msgid "Source distributions are also known as *sdists* for short."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:24
#: 62e34ed9542c4bc1b00949f1c6a4d4c4
msgid "Source distribution file name"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:26
#: fa5bff90053f425cace738df7868bdae
msgid "The file name of a sdist is not currently standardised, although the *de facto* form is ``{name}-{version}.tar.gz``, where ``{name}`` is the canonicalized form of the project name (see :pep:`503` for the canonicalization rules) with ``-`` characters replaced with ``_``, and ``{version}`` is the project version."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:31
#: 272847154dc74d52b2a19e9f15c92a5f
msgid "The name and version components of the filename MUST match the values stored in the metadata contained in the file."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:35
#: 6b085483557c46a69ffa216c8fe08e32
msgid "Source distribution file format"
msgstr ""

#: ../source/specifications/source-distribution-format.rst:37
#: 98ecd4d3a0c642b7a6b5f965666d92c2
msgid "A ``.tar.gz`` source distribution (sdist) contains a single top-level directory called ``{name}-{version}`` (e.g. ``foo-1.0``), containing the source files of the package. The name and version MUST match the metadata stored in the file. This directory must also contain a :file:`pyproject.toml` in the format defined in :ref:`declaring-build-dependencies`, and a ``PKG-INFO`` file containing metadata in the format described in the :ref:`core-metadata` specification. The metadata MUST conform to at least version 2.2 of the metadata specification."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:45
#: 592a807468b740a68848ab0b72e2b0b9
msgid "No other content of a sdist is required or defined. Build systems can store whatever information they need in the sdist to build the project."
msgstr ""

#: ../source/specifications/source-distribution-format.rst:48
#: 12f3be68ab5f435d886a59620545514b
msgid "The tarball should use the modern POSIX.1-2001 pax tar format, which specifies UTF-8 based file names."
msgstr ""

#: ../source/specifications/version-specifiers.rst:6
#: 0ffaf6673f554e78b979f7d03112d506
msgid "Version specifiers"
msgstr ""

#: ../source/specifications/version-specifiers.rst:8
#: be54a33d4a37471193e7539a5eaa39ef
msgid "Version numbering requirements and the semantics for specifying comparisons between versions are defined in :pep:`440`."
msgstr ""

#: ../source/specifications/version-specifiers.rst:11
#: ff5985ff722b4bc282855d60fcc51391
msgid "The version specifiers section in this PEP supersedes the version specifiers section in :pep:`345`."
msgstr ""

#: ../source/support.rst:3
#: 92ba1ff0d230452989691a691bc3c60e
msgid "How to Get Support"
msgstr ""

#: ../source/support.rst:5
#: ccd0be5863fc486d9a3b16d87e03f366
msgid "For support related to a specific project, see the links on the :doc:`Projects <key_projects>` page."
msgstr ""

#: ../source/support.rst:8
#: 17ad700e6f1a4140842e1810e85b2d9b
msgid "For something more general, or when you're just not sure, please `open an issue <https://github.com/pypa/packaging-problems/issues/new>`_ on the `packaging-problems <https://github.com/pypa/packaging-problems>`_ repository on GitHub."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:5
#: 391d0ea40e53431fb61730dab37ecc85
msgid "Creating Documentation"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:7
#: ab4c3e21ebe04402b8d69c017b9239f5
msgid "This section covers the basics of how to create documentation using `Sphinx`_ and host the documentation for free in `Read The Docs`_."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:13
#: e5a76c4ab64248979ee98368d5706370
msgid "Installing Sphinx"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:14
#: 519b9fc53ffb4cdeb4134777845893c1
msgid "Use ``pip`` to install Sphinx:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:28
#: b0ae761669554ad2b2d52232c4042261
msgid "For other installation methods, see this `installation guide`_ by Sphinx."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:33
#: af66bfb38b4945d996ed995d3c9d7811
msgid "Getting Started With Sphinx"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:35
#: 90b10cf4d5664ffb92571cee1b3aa01e
msgid "Create a ``docs`` directory inside your project to hold your documentation:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:42
#: 8e3efbd22cad414697e59c87dce99e6c
msgid "Run ``sphinx-quickstart`` inside the ``docs`` directory:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:49
#: 876bf0c3fe1548ac85b140ddd2a40b50
msgid "This sets up a source directory, walks you through some basic configurations, and creates an ``index.rst`` file as well as a ``conf.py`` file."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:51
#: 23601df62b3a44ee94fb3c908ab4d546
msgid "You can add some information about your project in ``index.rst``, then build them:"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:57
#: 7aec42a729c34ac0aff9a60b2212d84b
msgid "For more details on the build process, see this `guide`_ by Read The Docs."
msgstr ""

#: ../source/tutorials/creating-documentation.rst:62
#: 54c275dc80c14af9b1f2045ab99c21f9
msgid "Other Sources"
msgstr ""

#: ../source/tutorials/creating-documentation.rst:64
#: 615c3151995c4a4a8f5354b555330df4
msgid "For a more detailed guide on how to use Sphinx and reStructuredText, please see this `documentation tutorial`_ on Hitchhiker's Guide to Python."
msgstr ""

#: ../source/tutorials/index.rst:4
#: a2acfe9600b44da780cd6a1a8c691bc2
msgid "**Tutorials** are opinionated step-by-step guides to help you get familiar with packaging concepts. For more detailed information on specific packaging topics, see :doc:`/guides/index`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:5
#: 85a462ba3edf4cb5a3db5506843d98c2
msgid "Installing Packages"
msgstr ""

#: ../source/tutorials/installing-packages.rst:7
#: b8fe2387ef654b03a73adb67c1dc333b
msgid "This section covers the basics of how to install Python :term:`packages <Distribution Package>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:10
#: b835ae918a2044b99548d45a853cd696
msgid "It's important to note that the term \"package\" in this context is being used to describe a bundle of software to be installed (i.e. as a synonym for a :term:`distribution <Distribution Package>`). It does not to refer to the kind of :term:`package <Import Package>` that you import in your Python source code (i.e. a container of modules). It is common in the Python community to refer to a :term:`distribution <Distribution Package>` using the term \"package\".  Using the term \"distribution\" is often not preferred, because it can easily be confused with a Linux distribution, or another larger software distribution like Python itself."
msgstr ""

#: ../source/tutorials/installing-packages.rst:28
#: 1f7a51325d274481b7124f792adc975a
msgid "Requirements for Installing Packages"
msgstr ""

#: ../source/tutorials/installing-packages.rst:30
#: 22c0dfa6a9e64511a44d0bb532ce1657
msgid "This section describes the steps to follow before installing other Python packages."
msgstr ""

#: ../source/tutorials/installing-packages.rst:35
#: 3b6cd91855944c379ba1b22f81261347
msgid "Ensure you can run Python from the command line"
msgstr ""

#: ../source/tutorials/installing-packages.rst:37
#: 76a8fdc9746642c8bedf5f1fa8e37ce6
msgid "Before you go any further, make sure you have Python and that the expected version is available from your command line. You can check this by running:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:53
#: 37c19ac062cb4ea6954220d30b26ae24
msgid "You should get some output like ``Python 3.6.3``. If you do not have Python, please install the latest 3.x version from `python.org`_ or refer to the `Installing Python`_ section of the Hitchhiker's Guide to Python."
msgstr ""

#: ../source/tutorials/installing-packages.rst:57
#: 376d3f350fa3408a965fa323179304e3
msgid "If you're a newcomer and you get an error like this:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:66
#: 74b1ff5a059f4974a8f8d2ebb2dbdb5c
msgid "It's because this command and other suggested commands in this tutorial are intended to be run in a *shell* (also called a *terminal* or *console*). See the Python for Beginners `getting started tutorial`_ for an introduction to using your operating system's shell and interacting with Python."
msgstr ""

#: ../source/tutorials/installing-packages.rst:72
#: bd5a2b95738f4e07961efccf06f1ac08
msgid "If you're using an enhanced shell like IPython or the Jupyter notebook, you can run system commands like those in this tutorial by prefacing them with a ``!`` character:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:82
#: 042fafaa9526424bba9f10e3a6f1c726
msgid "It's recommended to write ``{sys.executable}`` rather than plain ``python`` in order to ensure that commands are run in the Python installation matching the currently running notebook (which may not be the same Python installation that the ``python`` command refers to)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:87
#: 9f403fdeae0b423eb5dedbf4dc88b85c
msgid "Due to the way most Linux distributions are handling the Python 3 migration, Linux users using the system Python without creating a virtual environment first should replace the ``python`` command in this tutorial with ``python3`` and the ``python -m pip`` command with ``python3 -m pip --user``. Do *not* run any of the commands in this tutorial with ``sudo``: if you get a permissions error, come back to the section on creating virtual environments, set one up, and then continue with the tutorial as written."
msgstr ""

#: ../source/tutorials/installing-packages.rst:99
#: 74ecff6895ed46a5a37f111c810cdbe5
msgid "Ensure you can run pip from the command line"
msgstr ""

#: ../source/tutorials/installing-packages.rst:101
#: 50e774afa80c4d53be8348fdf336746b
msgid "Additionally, you'll need to make sure you have :ref:`pip` available. You can check this by running:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:116
#: 9b97e74fca2a45139a68495829349579
msgid "If you installed Python from source, with an installer from `python.org`_, or via `Homebrew`_ you should already have pip. If you're on Linux and installed using your OS package manager, you may have to install pip separately, see :doc:`/guides/installing-using-linux-tools`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:124
#: b879435042654c0a966de831e628e6a8
msgid "If ``pip`` isn't already installed, then first try to bootstrap it from the standard library:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:139
#: dd71c0d429b243aea5754bc5a274c37a
msgid "If that still doesn't allow you to run ``python -m pip``:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:141
#: ee0cf97ebe2c4e34b52c0bb1bd4424e6
msgid "Securely Download `get-pip.py <https://bootstrap.pypa.io/get-pip.py>`_ [1]_"
msgstr ""

#: ../source/tutorials/installing-packages.rst:144
#: 0c0f1b937cbf43fd9e825749f2e397fe
msgid "Run ``python get-pip.py``. [2]_  This will install or upgrade pip. Additionally, it will install :ref:`setuptools` and :ref:`wheel` if they're not installed already."
msgstr ""

#: ../source/tutorials/installing-packages.rst:150
#: a4a39e7cec834a9a9f9d672daa94ea6a
msgid "Be cautious if you're using a Python install that's managed by your operating system or another package manager. get-pip.py does not coordinate with those tools, and may leave your system in an inconsistent state. You can use ``python get-pip.py --prefix=/usr/local/`` to install in ``/usr/local`` which is designed for locally-installed software."
msgstr ""

#: ../source/tutorials/installing-packages.rst:159
#: b427a5375f604f9b8269049a2e8e0300
msgid "Ensure pip, setuptools, and wheel are up to date"
msgstr ""

#: ../source/tutorials/installing-packages.rst:161
#: 5bfd64263af045ba8c28622c588aa375
msgid "While ``pip`` alone is sufficient to install from pre-built binary archives, up to date copies of the ``setuptools`` and ``wheel`` projects are useful to ensure you can also install from source archives::"
msgstr ""

#: ../source/tutorials/installing-packages.rst:169
#: ac663b93265447fa8081328eb5baef44
msgid "Optionally, create a virtual environment"
msgstr ""

#: ../source/tutorials/installing-packages.rst:171
#: e14e2d7bc02c486aa8493e9617a9c87e
msgid "See :ref:`section below <Creating and using Virtual Environments>` for details, but here's the basic `venv`_ [3]_ command to use on a typical Linux system:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:188
#: 06c126cdb62d4200a57046b74b0a5d67
msgid "This will create a new virtual environment in the ``tutorial_env`` subdirectory, and configure the current shell to use it as the default ``python`` environment."
msgstr ""

#: ../source/tutorials/installing-packages.rst:195
#: 8c59f6a4562d405a83def1560fde29a8
msgid "Creating Virtual Environments"
msgstr ""

#: ../source/tutorials/installing-packages.rst:197
#: 6d200f034ea54a26bdbfdccb572dab80
msgid "Python \"Virtual Environments\" allow Python :term:`packages <Distribution Package>` to be installed in an isolated location for a particular application, rather than being installed globally. If you are looking to safely install global command line tools, see :doc:`/guides/installing-stand-alone-command-line-tools`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:203
#: 978ad032151c4852bf7af01e911d42b9
msgid "Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these applications? If you install everything into /usr/lib/python3.6/site-packages (or whatever your platform’s standard location is), it’s easy to end up in a situation where you unintentionally upgrade an application that shouldn’t be upgraded."
msgstr ""

#: ../source/tutorials/installing-packages.rst:209
#: e92d04cb24d449928c580d56993bf9d5
msgid "Or more generally, what if you want to install an application and leave it be? If an application works, any change in its libraries or the versions of those libraries can break the application."
msgstr ""

#: ../source/tutorials/installing-packages.rst:213
#: a1ce4d50e0a84e4a92fceae0e885ce45
msgid "Also, what if you can’t install :term:`packages <Distribution Package>` into the global site-packages directory? For instance, on a shared host."
msgstr ""

#: ../source/tutorials/installing-packages.rst:216
#: de468245950142c0863b5ad2f5ab7226
msgid "In all these cases, virtual environments can help you. They have their own installation directories and they don’t share libraries with other virtual environments."
msgstr ""

#: ../source/tutorials/installing-packages.rst:220
#: e11ee52b32304b1189dafb5cdf3b3c4e
msgid "Currently, there are two common tools for creating Python virtual environments:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:222
#: 9e5a25787b644628bb83615db6e0db46
msgid "`venv`_ is available by default in Python 3.3 and later, and installs :ref:`pip` and :ref:`setuptools` into created virtual environments in Python 3.4 and later."
msgstr ""

#: ../source/tutorials/installing-packages.rst:225
#: 873423dead1846b8922f18c2237e64ab
msgid ":ref:`virtualenv` needs to be installed separately, but supports Python 2.7+ and Python 3.3+, and :ref:`pip`, :ref:`setuptools` and :ref:`wheel` are always installed into created virtual environments by default (regardless of Python version)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:230
#: 80a900c0314e4c6b83a201be0d15f5e5
msgid "The basic usage is like so:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:232
#: 47a376a1a3f54d6b9e2833d704a37183
msgid "Using `venv`_:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:248
#: f98323359f674441970db7044082567c
msgid "Using :ref:`virtualenv`:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:264
#: c6d20f4d80bc42f6b611879bb21b293b
msgid "For more information, see the `venv`_ docs or the `virtualenv <http://virtualenv.pypa.io>`_ docs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:266
#: 207215bd051b47bea95e21837cd1cde4
msgid "The use of :command:`source` under Unix shells ensures that the virtual environment's variables are set within the current shell, and not in a subprocess (which then disappears, having no useful effect)."
msgstr ""

#: ../source/tutorials/installing-packages.rst:271
#: b1166de22b634a8281cf84dbb669ff6a
msgid "In both of the above cases, Windows users should _not_ use the :command:`source` command, but should rather run the :command:`activate` script directly from the command shell like so:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:281
#: 5043b37a815349df9554de09c60cb0a1
msgid "Managing multiple virtual environments directly can become tedious, so the :ref:`dependency management tutorial <managing-dependencies>` introduces a higher level tool, :ref:`Pipenv`, that automatically manages a separate virtual environment for each project and application that you work on."
msgstr ""

#: ../source/tutorials/installing-packages.rst:288
#: e8048b0a15a047b199fb0077514654cd
msgid "Use pip for Installing"
msgstr ""

#: ../source/tutorials/installing-packages.rst:290
#: 662991a8242f459aa4df08c39e6dceca
msgid ":ref:`pip` is the recommended installer.  Below, we'll cover the most common usage scenarios. For more detail, see the `pip docs <https://pip.pypa.io>`_, which includes a complete `Reference Guide <https://pip.pypa.io/en/latest/reference/index.html>`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:297
#: 16f5ded0f2df4870ba24b15090a90c99
msgid "Installing from PyPI"
msgstr ""

#: ../source/tutorials/installing-packages.rst:299
#: 23b25f88bff142e487a8b0c8a8544d68
msgid "The most common usage of :ref:`pip` is to install from the :term:`Python Package Index <Python Package Index (PyPI)>` using a :term:`requirement specifier <Requirement Specifier>`. Generally speaking, a requirement specifier is composed of a project name followed by an optional :term:`version specifier <Version Specifier>`.  :pep:`440` contains a :pep:`full specification <440#version-specifiers>` of the currently supported specifiers. Below are some examples."
msgstr ""

#: ../source/tutorials/installing-packages.rst:307
#: 5e6a4619d0ae436bb65dad6203700e97
msgid "To install the latest version of \"SomeProject\":"
msgstr ""

#: ../source/tutorials/installing-packages.rst:321
#: c5e5ed56efc2482898b7a448b4b1bbb9
msgid "To install a specific version:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:335
#: 9e167f4ffdbe4b5e8091b9907e7938d0
msgid "To install greater than or equal to one version and less than another:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:350
#: 4f3876b8a8b344d1a7b7b1eba17b06db
msgid "To install a version that's :pep:`\"compatible\" <440#compatible-release>` with a certain version: [4]_"
msgstr ""

#: ../source/tutorials/installing-packages.rst:365
#: 5e560635563549f184c64f142c3c4f1a
msgid "In this case, this means to install any version \"==1.4.*\" version that's also \">=1.4.2\"."
msgstr ""

#: ../source/tutorials/installing-packages.rst:370
#: 587e6e25af554c2ca0bb0e4896e28780
msgid "Source Distributions vs Wheels"
msgstr ""

#: ../source/tutorials/installing-packages.rst:372
#: a4d722d0b81c4dc38c5df06d648111b3
msgid ":ref:`pip` can install from either :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>` or :term:`Wheels <Wheel>`, but if both are present on PyPI, pip will prefer a compatible :term:`wheel <Wheel>`. You can override pip`s default behavior by e.g. using its :ref:`--no-binary <pip:install_--no-binary>` option."
msgstr ""

#: ../source/tutorials/installing-packages.rst:378
#: 674e7244cd764248b4f6b6ae2199f215
msgid ":term:`Wheels <Wheel>` are a pre-built :term:`distribution <Distribution Package>` format that provides faster installation compared to :term:`Source Distributions (sdist) <Source Distribution (or \"sdist\")>`, especially when a project contains compiled extensions."
msgstr ""

#: ../source/tutorials/installing-packages.rst:383
#: 76bdf5411d8945179b0c41d196da5e20
msgid "If :ref:`pip` does not find a wheel to install, it will locally build a wheel and cache it for future installs, instead of rebuilding the source distribution in the future."
msgstr ""

#: ../source/tutorials/installing-packages.rst:391
#: 5632d646e32143cc8b4ec62cee378e9d
msgid "Upgrade an already installed ``SomeProject`` to the latest from PyPI."
msgstr ""

#: ../source/tutorials/installing-packages.rst:408
#: f31362dc893d4fcab69f0473a63a86b3
msgid "Installing to the User Site"
msgstr ""

#: ../source/tutorials/installing-packages.rst:410
#: 86757dc0609349e896c5390e9ac7f144
msgid "To install :term:`packages <Distribution Package>` that are isolated to the current user, use the ``--user`` flag:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:425
#: 027dd5eb89c740478cc708fa655037c6
msgid "For more information see the `User Installs <https://pip.readthedocs.io/en/latest/user_guide.html#user-installs>`_ section from the pip docs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:429
#: 86c992a01b6741d49d858a2b8d07d88e
msgid "Note that the ``--user`` flag has no effect when inside a virtual environment - all installation commands will affect the virtual environment."
msgstr ""

#: ../source/tutorials/installing-packages.rst:432
#: 17472a27f5234ac28102271ef1f24e10
msgid "If ``SomeProject`` defines any command-line scripts or console entry points, ``--user`` will cause them to be installed inside the `user base`_'s binary directory, which may or may not already be present in your shell's :envvar:`PATH`.  (Starting in version 10, pip displays a warning when installing any scripts to a directory outside :envvar:`PATH`.)  If the scripts are not available in your shell after installation, you'll need to add the directory to your :envvar:`PATH`:"
msgstr ""

#: ../source/tutorials/installing-packages.rst:440
#: b8c3f856a5f2479e81e9d133c4fc0e67
msgid "On Linux and macOS you can find the user base binary directory by running ``python -m site --user-base`` and adding ``bin`` to the end. For example, this will typically print ``~/.local`` (with ``~`` expanded to the absolute path to your home directory) so you'll need to add ``~/.local/bin`` to your ``PATH``.  You can set your ``PATH`` permanently by `modifying ~/.profile`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:446
#: 5c70decba7cd40608390e7f7fe071e48
msgid "On Windows you can find the user base binary directory by running ``py -m site --user-site`` and replacing ``site-packages`` with ``Scripts``. For example, this could return ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\site-packages`` so you would need to set your ``PATH`` to include ``C:\\Users\\Username\\AppData\\Roaming\\Python36\\Scripts``. You can set your user ``PATH`` permanently in the `Control Panel`_. You may need to log out for the ``PATH`` changes to take effect."
msgstr ""

#: ../source/tutorials/installing-packages.rst:462
#: c5284b946af54b1db96cb6d467172df3
msgid "Install a list of requirements specified in a :ref:`Requirements File <pip:Requirements Files>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:478
#: 1d6bd6bbf996407488ecac1fcbd17322
msgid "Installing from VCS"
msgstr ""

#: ../source/tutorials/installing-packages.rst:480
#: 0cc05fa230994727b76e31251ed43a4d
msgid "Install a project from VCS in \"editable\" mode.  For a full breakdown of the syntax, see pip's section on :ref:`VCS Support <pip:VCS Support>`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:502
#: afe31375fdb34118882a5a7353364d92
msgid "Installing from other Indexes"
msgstr ""

#: ../source/tutorials/installing-packages.rst:504
#: 845a076b9abc4a46b08dbe74ed9de5c0
msgid "Install from an alternate index"
msgstr ""

#: ../source/tutorials/installing-packages.rst:518
#: b5a9119004b34d53a4b0f3569bed95e2
msgid "Search an additional index during install, in addition to :term:`PyPI <Python Package Index (PyPI)>`"
msgstr ""

#: ../source/tutorials/installing-packages.rst:534
#: ab0046ab7900429e95937163d76cc2b7
msgid "Installing from a local src tree"
msgstr ""

#: ../source/tutorials/installing-packages.rst:537
#: cc17b8fb364d454aa8c1929acb90240c
msgid "Installing from local src in `Development Mode <https://setuptools.readthedocs.io/en/latest/setuptools.html#development-mode>`_, i.e. in such a way that the project appears to be installed, but yet is still editable from the src tree."
msgstr ""

#: ../source/tutorials/installing-packages.rst:554
#: c4a7635a908349fb80ee32757a9bf134
msgid "You can also install normally from src"
msgstr ""

#: ../source/tutorials/installing-packages.rst:571
#: 220120bb4b684ecab4ea07b8a1fcce26
msgid "Install a particular source archive file."
msgstr ""

#: ../source/tutorials/installing-packages.rst:585
#: bb06574abda947cebb9e0032815a1043
msgid "Install from a local directory containing archives (and don't check :term:`PyPI <Python Package Index (PyPI)>`)"
msgstr ""

#: ../source/tutorials/installing-packages.rst:605
#: 30eb0d2d0cb34daeaf4716246a46bc36
msgid "Installing from other sources"
msgstr ""

#: ../source/tutorials/installing-packages.rst:607
#: 73be2379d27b44f19e8ab4eded70e687
msgid "To install from other data sources (for example Amazon S3 storage) you can create a helper application that presents the data in a :pep:`503` compliant index format, and use the ``--extra-index-url`` flag to direct pip to use that index."
msgstr ""

#: ../source/tutorials/installing-packages.rst:619
#: 6bd5914c46c4439195a1580a8636826e
msgid "Installing Prereleases"
msgstr ""

#: ../source/tutorials/installing-packages.rst:621
#: a6b8d87cd8104e00a491cae069f1d4bd
msgid "Find pre-release and development versions, in addition to stable versions.  By default, pip only finds stable versions."
msgstr ""

#: ../source/tutorials/installing-packages.rst:637
#: 1313da6690cc477bbfc2976018ab21a5
msgid "Installing Setuptools \"Extras\""
msgstr ""

#: ../source/tutorials/installing-packages.rst:639
#: 68c9cadc4057482a9eb311498fdd5c4a
msgid "Install `setuptools extras`_."
msgstr ""

#: ../source/tutorials/installing-packages.rst:659
#: 8d13faa656004d31ba84438fd39d31e8
msgid "\"Secure\" in this context means using a modern browser or a tool like :command:`curl` that verifies SSL certificates when downloading from https URLs."
msgstr ""

#: ../source/tutorials/installing-packages.rst:668
#: 0183c5722fc140378ab1df21b712e657
msgid "Beginning with Python 3.4, ``venv`` (a stdlib alternative to :ref:`virtualenv`) will create virtualenv environments with ``pip`` pre-installed, thereby making it an equal alternative to :ref:`virtualenv`."
msgstr ""

#: ../source/tutorials/installing-packages.rst:673
#: 7aa5e5b0d30e400595781adcabcaad80
msgid "The compatible release specifier was accepted in :pep:`440` and support was released in :ref:`setuptools` v8.0 and :ref:`pip` v6.0"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:4
#: 6584ff9f55004e8d81db54265705d944
msgid "Managing Application Dependencies"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:6
#: 558eb6acd6e84126862d36e25281edc4
msgid "The :ref:`package installation tutorial <installing-packages>` covered the basics of getting set up to install and update Python packages."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:9
#: 53f7bdd4af9041a6bcc4d6dfccf8603f
msgid "However, running these commands interactively can get tedious even for your own personal projects, and things get even more difficult when trying to set up development environments automatically for projects with multiple contributors."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:13
#: 0de3cbd9894c433aa37a9c1ea3f63b9b
msgid "This tutorial walks you through the use of :ref:`Pipenv` to manage dependencies for an application. It will show you how to install and use the necessary tools and make strong recommendations on best practices."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:17
#: f18d36be99d9452193e8860a53dae78e
msgid "Keep in mind that Python is used for a great many different purposes, and precisely how you want to manage your dependencies may change based on how you decide to publish your software. The guidance presented here is most directly applicable to the development and deployment of network services (including web applications), but is also very well suited to managing development and testing environments for any kind of project."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:24
#: 7078c1817f8545aba5886c736ade1662
msgid "Developers of Python libraries, or of applications that support distribution as Python libraries, should also consider the `poetry <https://github.com/python-poetry/poetry>`_ project as an alternative dependency management solution."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:30
#: 8745a907b24045f98cba31f784e9bec3
msgid "Installing Pipenv"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:32
#: f05a5f73b5a04a769917db70b5340d04
msgid ":ref:`Pipenv` is a dependency manager for Python projects. If you're familiar with Node.js' `npm`_ or Ruby's `bundler`_, it is similar in spirit to those tools. While :ref:`pip` alone is often sufficient for personal use, Pipenv is recommended for collaborative projects as it's a higher-level tool that simplifies dependency management for common use cases."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:38
#: e2687f25840c46159ccf7610ea10dc33
msgid "Use ``pip`` to install Pipenv:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:54
#: 1f6f8f227d2f4028ae5c788143642a8d
msgid "This does a `user installation`_ to prevent breaking any system-wide packages. If ``pipenv`` isn't available in your shell after installation, you'll need to add the `user base`_'s binary directory to your ``PATH``. See :ref:`Installing to the User Site` for more information."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:65
#: b7b306cabad04616bcd72246b3d716d2
msgid "Installing packages for your project"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:67
#: 8c2e5320206e4a8a8b4a28281b4cc10c
msgid "Pipenv manages dependencies on a per-project basis. To install packages, change into your project's directory (or just an empty directory for this tutorial) and run:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:76
#: 3c89e9bc70c14c129766841bc9c73cc7
msgid "Pipenv will install the `Requests`_ library and create a ``Pipfile`` for you in your project's directory. The :ref:`Pipfile` is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others. You should get output similar to this (although the exact paths shown will vary):"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:112
#: 7b8e651c51af46baa3a3b2773245de3d
msgid "Using installed packages"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:114
#: f180551f6e844ce0ba69f1d647929bd2
msgid "Now that Requests is installed you can create a simple :file:`main.py` file to use it:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:125
#: 6f7dca288f4041fcbbb8408de79ce8d6
msgid "Then you can run this script using ``pipenv run``:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:131
#: 9b5b10c2b2344ef583284a637c21b806
msgid "You should get output similar to this:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:137
#: e6e62100a6324b078bf741a697f26f05
msgid "Using ``pipenv run`` ensures that your installed packages are available to your script. It's also possible to spawn a new shell that ensures all commands have access to your installed packages with ``pipenv shell``."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:143
#: ../source/tutorials/packaging-projects.rst:594
#: c79f98bc93c848cbbb4b158083ddc4ab
#: eb8602abe2d340e5aaaa681413c71437
msgid "Next steps"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:145
#: 6bee4bdcc79748f7900bacdc089a4838
msgid "Congratulations, you now know how to effectively manage dependencies and development environments on a collaborative Python project! ✨ 🍰 ✨"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:148
#: 2c1fbddf74d74b0892c7b45f9d527f89
msgid "If you're interested in creating and distributing your own Python packages, see the :ref:`tutorial on packaging and distributing packages <distributing-packages>`."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:151
#: 5c801af7dcdc4483955128e0f2dac618
msgid "Note that when your application includes definitions of Python source packages, they (and their dependencies) can be added to your ``pipenv`` environment with ``pipenv install -e <relative-path-to-source-directory>`` (e.g. ``pipenv install -e .`` or ``pipenv install -e src``)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:160
#: f488c213078a4b6f8facb9b52bc9e9ad
msgid "Other Tools for Application Dependency Management"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:162
#: 35271ce9ef7e47b9b50d818b9ca63aca
msgid "If you find this particular approach to managing application dependencies isn't working well for you or your use case, you may want to explore these other tools and techniques to see if one of them is a better fit:"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:166
#: 5c99969ccdcd41d4b5844fc5cfc71abd
msgid "`poetry <https://github.com/python-poetry/poetry>`__ for a tool comparable in scope to ``pipenv`` that focuses more directly on use cases where the repository being managed is structured as a Python project with a valid ``pyproject.toml`` file (by contrast, ``pipenv`` explicitly avoids making the assumption that the application being worked on that's depending on components from PyPI will itself support distribution as a ``pip``-installable Python package)."
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:172
#: 6b2538190e2947e4924dced1d33ce386
msgid "`hatch <https://github.com/ofek/hatch>`_ for opinionated coverage of even more steps in the project management workflow (such as incrementing versions, tagging releases, and creating new skeleton projects from project templates)"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:175
#: 072768b6800f46608fc9bfbba03e700a
msgid "`pip-tools <https://github.com/jazzband/pip-tools>`_ to build your own custom workflow from lower level pieces like ``pip-compile`` and ``pip-sync``"
msgstr ""

#: ../source/tutorials/managing-dependencies.rst:177
#: b136d5b74d5046eeb25caf90d0eec038
msgid "`micropipenv <https://github.com/thoth-station/micropipenv>`_ is a lightweight wrapper for pip to support requirements.txt, Pipenv and Poetry lock files or converting them to pip-tools compatible output. Designed for containerized Python applications but not limited to them."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:2
#: 8166f322890d4d8dbbeed15e5bc42e9d
msgid "Packaging Python Projects"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:4
#: d673aa2161584b528cda5e82c2e4bed3
msgid "This tutorial walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to upload it to the Python Package Index."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:10
#: b2f6e95a644b49fabc5cfcb0b0e0516c
msgid "If you have trouble running the commands in this tutoral, please copy the command and its output, then `open an issue`_ on the `packaging-problems`_ repository on GitHub. We'll do our best to help you!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:18
#: ea9f259310e64c9a8fa9917491de8117
msgid "Some of the commands require a newer version of :ref:`pip`, so start by making sure you have the latest version installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:35
#: c92cd4cda41d420da7ea1e3beb7c2246
msgid "A simple project"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:37
#: 58b3f1110707447ca32296d47dcde3d4
msgid "This tutorial uses a simple project named ``example_package``.  We recommend following this tutorial as-is using this project, before packaging your own project."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:41
#: cec9931e7da643649b758b3f67e0ea86
msgid "Create the following file structure locally:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:51
#: fdb3ebab73d742b9bbb53b1375ba40ba
msgid ":file:`__init__.py` is required to import the directory as a package, and should be empty."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:54
#: 591553d126254fefa4b4b5f17cb55220
msgid ":file:`example.py` is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. Open that file and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:63
#: 3f6b78e031354f3abe6ed52ea70b925f
msgid "If you are unfamiliar with Python's :term:`modules <Module>` and :term:`import packages <Import Package>`, take a few minutes to read over the `Python documentation for packages and modules`_."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:67
#: b4b721b3ca5b462091c85c5aaf9c85bd
msgid "Once you create this structure, you'll want to run all of the commands in this tutorial within the ``packaging_tutorial`` directory."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:75
#: 57ce57d587514e28a5738df51d5b75ee
msgid "Creating the package files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:77
#: 36142d9212564556b8428fb10df21a41
msgid "You will now add files that are used to prepare the project for distribution. When you're done, the project structure will look like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:95
#: b66dba743bc04e9c8f1b0ed2a9c223f7
msgid "Creating a test directory"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:97
#: ca44dc6262f84fc795f1a5ee9df4268a
msgid ":file:`tests/` is a placeholder for test files. Leave it empty for now."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:101
#: cdff4e52e44a45068df8e8cacf091d35
msgid "Creating pyproject.toml"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:103
#: 1617962fb3c64be6bc57eeaa6e54f0c2
msgid ":file:`pyproject.toml` tells build tools (like :ref:`pip` and :ref:`build`) what is required to build your project. This tutorial uses :ref:`setuptools`, so open :file:`pyproject.toml` and enter the following content:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:117
#: 4446f5e26eef4b0c913ccd70bc088b9a
msgid "``build-system.requires`` gives a list of packages that are needed to build your package. Listing something here will *only* make it available during the build, not after it is installed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:121
#: 3a98f9530b2640ae814f606c7b073139
msgid "``build-system.build-backend`` is the name of Python object that will be used to perform the build. If you were to use a different build system, such as :ref:`flit` or :ref:`poetry`, those would go here, and the configuration details would be completely different than the :ref:`setuptools` configuration described below."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:127
#: ad3cd9fcdddd41b38e8a11f40fef00d3
msgid "See :pep:`517` and :pep:`518` for background and details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:131
#: 9b546f36680b4048955742c41246ee8e
msgid "Configuring metadata"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:133
#: 0fcdca9c2b44403f8da425f2ca2df325
msgid "There are two types of metadata: static and dynamic."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:135
#: 34296f9c9d79441ab4aaf1ecba034879
msgid "Static metadata (:file:`setup.cfg`): guaranteed to be the same every time. This is simpler, easier to read, and avoids many common errors, like encoding errors."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:137
#: a5faba1087fa4af2ab3ce43787e18bb1
msgid "Dynamic metadata (:file:`setup.py`): possibly non-deterministic. Any items that are dynamic or determined at install-time, as well as extension modules or extensions to setuptools, need to go into :file:`setup.py`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:141
#: 8047e42c7be14ba39f3f64b229a3865e
msgid "Static metadata (:file:`setup.cfg`) should be preferred. Dynamic metadata (:file:`setup.py`) should be used only as an escape hatch when absolutely necessary. :file:`setup.py` used to be required, but can be omitted with newer versions of setuptools and pip."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:148
#: bc1ff394dee74a929237b19f5a829e6c
msgid ":file:`setup.cfg` is the configuration file for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include. Eventually much of this configuration may be able to move to :file:`pyproject.toml`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:153
#: 561416866afd41089ae3e39d9ea15810
msgid "Open :file:`setup.cfg` and enter the following content. Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:185
#: 06cac1c39b344bfd81956847338fe406
msgid "There are a `variety of metadata and options <https://setuptools.readthedocs.io/en/latest/userguide/declarative_config.html>`_ supported here. This is in :doc:`configparser <python:library/configparser>` format; do not place quotes around values. This example package uses a relatively minimal set of ``metadata``:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:191
#: ../source/tutorials/packaging-projects.rst:286
#: 8a13fba695ab42c8a8d5d11578c23b02
#: 5048162d7cc943e48946da7da452d44a
msgid "``name`` is the *distribution name* of your package. This can be any name as long as it only contains letters, numbers, ``_`` , and ``-``. It also must not already be taken on pypi.org. **Be sure to update this with your username,** as this ensures you won't try to upload a package with the same name as one which already exists."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:196
#: 2502584d1b0b47ad932af778e4fbac2f
msgid "``version`` is the package version. See :pep:`440` for more details on versions. You can use ``file:`` or ``attr:`` directives to read from a file or package attribute."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:199
#: ../source/tutorials/packaging-projects.rst:293
#: ecc672af30bf4d95a984bcce42fe9676
#: d31e45e8297442fd88dea136e99a7bcd
msgid "``author`` and ``author_email`` are used to identify the author of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:201
#: ../source/tutorials/packaging-projects.rst:295
#: 90178bba9f3140ed9efe52487eb96305
#: b10fdf2d2c834f75b1153eae659106ce
msgid "``description`` is a short, one-sentence summary of the package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:202
#: bbdb41a121b844c9b3dbf6439348ba86
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md` (which is a common pattern) using the ``file:`` directive."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:206
#: ../source/tutorials/packaging-projects.rst:300
#: 3057061cf7f44c6b9f144fddbec2cc17
#: 8e91326e6452494186079657af730a21
msgid "``long_description_content_type`` tells the index what type of markup is used for the long description. In this case, it's Markdown."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:208
#: ../source/tutorials/packaging-projects.rst:302
#: cc806affb1f841deb17abb65771a2760
#: 02f43d978367495e9c2acc7ad5d4b5c1
msgid "``url`` is the URL for the homepage of the project. For many projects, this will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting service."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:211
#: ../source/tutorials/packaging-projects.rst:305
#: ff8f12987e58455c9f06bb3fb0f49fbd
#: a22b5a55f6fc4fdc97e863e96a3d174f
msgid "``project_urls`` lets you list any number of extra links to show on PyPI. Generally this could be to documentation, issue trackers, etc."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:213
#: ../source/tutorials/packaging-projects.rst:307
#: 5f43096b8bd94b519f2a50fa11465b4d
#: fc33b80a576049ccbd53923fafdbc0b5
msgid "``classifiers`` gives the index and :ref:`pip` some additional metadata about your package. In this case, the package is only compatible with Python 3, is licensed under the MIT license, and is OS-independent. You should always include at least which version(s) of Python your package works on, which license your package is available under, and which operating systems your package will work on. For a complete list of classifiers, see https://pypi.org/classifiers/."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:221
#: 862bc12e8a5541af9fd749534d6cab41
msgid "In the ``options`` category, we have controls for setuptools itself:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:223
#: afa56af9520a4c3b9b1c1b96f541add4
msgid "``package_dir`` is a mapping of package names and directories. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:227
#: f114edf562bc4a92811960c1c5223eda
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use the ``find:`` directive to automatically discover all packages and subpackages and ``options.packages.find`` to specify the ``package_dir`` to use. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:234
#: d1de15d168cb451284fe86f36d3fefdf
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back through older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:238
#: ../source/tutorials/packaging-projects.rst:329
#: 6caa073d5d4e463181973eea4fd3a99b
#: 98a52def5a64408e9e8faa9bc5d4305c
msgid "There are many more than the ones mentioned here. See :doc:`/guides/distributing-packages-using-setuptools` for more details."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:244
#: ced187e69a4f48a383f66f84e4256d17
msgid ":file:`setup.py` is the build script for :ref:`setuptools`. It tells setuptools about your package (such as the name and version) as well as which code files to include."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:248
#: e1a97461bd3345b781ef371f25cb7bb4
msgid "Open :file:`setup.py` and enter the following content.  Change the ``name`` to include your username; this ensures that you have a unique package name and that your package doesn't conflict with packages uploaded by other people following this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:283
#: 576bdecf60d0425990230aaa125b10ad
msgid ":func:`setup` takes several arguments. This example package uses a relatively minimal set:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:291
#: d197323f534d40c1add8b33e811011a9
msgid "``version`` is the package version. See :pep:`440` for more details on versions."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:296
#: 2bd8799d9d43474fb3842ebd817ac192
msgid "``long_description`` is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from :file:`README.md`, which is a common pattern."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:314
#: ea6c45cd3af94342b109d940c0fcd32d
msgid "``package_dir`` is a dictionary with package names for keys and directories for values. An empty package name represents the \"root package\" --- the directory in the project that contains all Python source files for the package --- so in this case the ``src`` directory is designated the root package."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:319
#: b3473a19422e48b1933724d3e11f1834
msgid "``packages`` is a list of all Python :term:`import packages <Import Package>` that should be included in the :term:`distribution package <Distribution Package>`. Instead of listing each package manually, we can use :func:`find_packages` to automatically discover all packages and subpackages under ``package_dir``. In this case, the list of packages will be ``example_package`` as that's the only package present."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:325
#: 0c821a35f8dc487891ef315d15db4360
msgid "``python_requires`` gives the versions of Python supported by your project. Installers like :ref:`pip` will look back though older versions of packages until it finds one that has a matching Python version."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:333
#: 0577e8c63aba47e5b76ffa123f3cca83
msgid "Creating README.md"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:335
#: b890ed25e1ba4572ac4c2ee32405efbb
msgid "Open :file:`README.md` and enter the following content. You can customize this if you'd like."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:347
#: 0440803476a647c6bd92e84b5a182784
msgid "Because our configuration loads :file:`README.md` to provide a ``long_description``, :file:`README.md` must be included along with your code when you :ref:`generate a source distribution <generating archives>`. Newer versions of :ref:`setuptools` will do this automatically."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:354
#: c03ba726dbb949fd86e213bf641ffd98
msgid "Creating a LICENSE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:356
#: 9633b4f42b7d41d6961cf72317d1fce9
msgid "It's important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see https://choosealicense.com/. Once you have chosen a license, open :file:`LICENSE` and enter the license text. For example, if you had chosen the MIT license:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:387
#: fc264228494d493e81404e0ddcb37976
msgid "Including other files"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:389
#: 5bc03bcdeb3d42968d7fb50da41095f5
msgid "The files listed above will be included automatically in your :term:`source distribution <Source Distribution (or \"sdist\")>`. If you want to control what goes in this explicitly, see :ref:`Using MANIFEST.in`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:393
#: 104ab75bc9a440afbbad0529adfb1ce0
msgid "The final :term:`built distribution <Built Distribution>` will have the Python files in the discovered or listed Python packages. If you want to control what goes here, such as to add data files, see :doc:`Including Data Files <setuptools:userguide/datafiles>` from the :doc:`setuptools docs <setuptools:index>`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:402
#: 73e06ce651314c48b20caf5b3c33cbb7
msgid "Generating distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:404
#: 3ba3ad11fcba4f68a74c49b448fe8b76
msgid "The next step is to generate :term:`distribution packages <Distribution Package>` for the package. These are archives that are uploaded to the Python Package Index and can be installed by :ref:`pip`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:408
#: 31b72289c00e414aa5580bbd7a0bb2c5
msgid "Make sure you have the latest version of PyPA's :ref:`build` installed:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:422
#: 590b687b6b9f4e1591c619d28f240e13
msgid "If you have trouble installing these, see the :doc:`installing-packages` tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:425
#: 0d35248f6196424c9edd8c283d3db07a
msgid "Now run this command from the same directory where :file:`pyproject.toml` is located:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:439
#: 960da2418eef4e5ba50455ee6443ba38
msgid "This command should output a lot of text and once completed should generate two files in the :file:`dist` directory:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:449
#: 40c59413bc474ba7ae66e2162d17373e
msgid "The ``tar.gz`` file is a :term:`source archive <Source Archive>` whereas the ``.whl`` file is a :term:`built distribution <Built Distribution>`. Newer :ref:`pip` versions preferentially install built distributions, but will fall back to source archives if needed. You should always upload a source archive and provide built archives for the platforms your project is compatible with. In this case, our example package is compatible with Python on any platform so only one built distribution is needed."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:458
#: 29f9d48d36114b32a3d5a3eaff870583
msgid "Uploading the distribution archives"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:460
#: e4b2cd067df942068bd9976d63a83bbd
msgid "Finally, it's time to upload your package to the Python Package Index!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:462
#: a5b2beb9fdc3491cadf871eb4776dd99
msgid "The first thing you'll need to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. It's great for things like this tutorial where we don't necessarily want to upload to the real index. To register an account, go to https://test.pypi.org/account/register/ and complete the steps on that page. You will also need to verify your email address before you're able to upload any packages.  For more details, see :doc:`/guides/using-testpypi`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:470
#: c39bfb868fba47d58573cab04a27ab54
msgid "To securely upload your project, you'll need a PyPI `API token`_. Create one at https://test.pypi.org/manage/account/#api-tokens, setting the \"Scope\" to \"Entire account\". **Don't close the page until you have copied and saved the token — you won't see that token again.**"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:477
#: 502867c221ae4a74a1e297006027a4c1
msgid "Now that you are registered, you can use :ref:`twine` to upload the distribution packages. You'll need to install Twine:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:492
#: d103ccec58da446794fe4f3447f6e793
msgid "Once installed, run Twine to upload all of the archives under :file:`dist`:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:506
#: 8d0137c1b72f40e08aee4ec3b2a4b7ee
msgid "You will be prompted for a username and password. For the username, use ``__token__``. For the password, use the token value, including the ``pypi-`` prefix."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:510
#: 913d701dceb94224a2c8219d9bc50a07
msgid "After the command completes, you should see output similar to this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:523
#: ad170668ff884244b62571b7a1137ec8
msgid "Once uploaded your package should be viewable on TestPyPI, for example, https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:528
#: c59fabf4c9b848dcb23965f70e99b44a
msgid "Installing your newly uploaded package"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:530
#: 0eec95771c3646fb99ffbb65071188c3
msgid "You can use :ref:`pip` to install your package and verify that it works. Create a :ref:`virtual environment <Creating and using Virtual Environments>` and install your package from TestPyPI:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:546
#: 9a0b0641f1e6495aa1abaa7f3907209f
msgid "Make sure to specify your username in the package name!"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:548
#: 14da5ec74dcb4060b876faef04f0cb3a
msgid "pip should install the package from TestPyPI and the output should look something like this:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:558
#: 670d209fce82450d922cef47ec8dae12
msgid "This example uses ``--index-url`` flag to specify TestPyPI instead of live PyPI. Additionally, it specifies ``--no-deps``. Since TestPyPI doesn't have the same packages as the live PyPI, it's possible that attempting to install dependencies may fail or install something unexpected. While our example package doesn't have any dependencies, it's a good practice to avoid installing dependencies when using TestPyPI."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:565
#: 463aa9da63ba4e50a399b73d493895a1
msgid "You can test that it was installed correctly by importing the package. Make sure you're still in your virtual environment, then run Python:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:580
#: 89f7b314dacb4f6eb8b1201224f59c78
msgid "and import the package:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:588
#: cf67607572544ab4a648d99020e42bb5
msgid "Note that the :term:`import package <Import Package>` is ``example_package`` regardless of what ``name`` you gave your :term:`distribution package <Distribution Package>` in :file:`setup.cfg` or :file:`setup.py` (in this case, ``example-pkg-YOUR-USERNAME-HERE``)."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:596
#: 63fa89ad4db84c1782baafcb973dd0e9
msgid "**Congratulations, you've packaged and distributed a Python project!** ✨ 🍰 ✨"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:599
#: ece49c62a4884fd3ab97f41656b5393b
msgid "Keep in mind that this tutorial showed you how to upload your package to Test PyPI, which isn't a permanent storage. The Test system occasionally deletes packages and accounts. It is best to use TestPyPI for testing and experiments like this tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:604
#: a649659f3ece46bbbad5ff1035773e08
msgid "When you are ready to upload a real package to the Python Package Index you can do much the same as you did in this tutorial, but with these important differences:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:608
#: 44d946fe278e467e9038a8db45d85554
msgid "Choose a memorable and unique name for your package. You don't have to append your username as you did in the tutorial."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:610
#: 1eb7219ff413436f91047ec55701f0cb
msgid "Register an account on https://pypi.org - note that these are two separate servers and the login details from the test server are not shared with the main server."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:613
#: 65c8befe4f764192a1411b5cc504ee68
msgid "Use ``twine upload dist/*`` to upload your package and enter your credentials for the account you registered on the real PyPI.  Now that you're uploading the package in production, you don't need to specify ``--repository``; the package will upload to https://pypi.org/ by default."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:617
#: 978d816fd3a94fbfbd5b67c767d7fc39
msgid "Install your package from the real PyPI using ``python3 -m pip install [your-package]``."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:619
#: 3f3c4cf48d25456e85943d8030f7d6cb
msgid "At this point if you want to read more on packaging Python libraries here are some things you can do:"
msgstr ""

#: ../source/tutorials/packaging-projects.rst:622
#: 2237c45abee140d6830d36632ab876d6
msgid "Read more about using :ref:`setuptools` to package libraries in :doc:`/guides/distributing-packages-using-setuptools`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:624
#: ca905d30b1994b19a88e6a7bb0b34d2e
msgid "Read about :doc:`/guides/packaging-binary-extensions`."
msgstr ""

#: ../source/tutorials/packaging-projects.rst:625
#: a636cef9c6df412aaedb3a4098b93b76
msgid "Consider alternatives to :ref:`setuptools` such as :ref:`flit`, :ref:`hatch`, and :ref:`poetry`."
msgstr ""
